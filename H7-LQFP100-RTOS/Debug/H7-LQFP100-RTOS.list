
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0801539c  0801539c  0002539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801574c  0801574c  0002574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015754  08015754  00025754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015758  08015758  00025758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  0801575c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fdc  24000100  0801585c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050dc  0801585c  000350dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000326b6  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548f  00000000  00000000  000627e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a9c  00000000  00000000  0006c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000308f8  00000000  00000000  0007416c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001944b2  00000000  00000000  000a4a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00238f16  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad64  00000000  00000000  00238f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015384 	.word	0x08015384

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08015384 	.word	0x08015384

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 fc0e 	bl	8010ebc <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 fc03 	bl	8010ebc <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 fbf8 	bl	8010ebc <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f013 ffba 	bl	8014648 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000688 	.word	0x24000688
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	080153dc 	.word	0x080153dc

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00d fef3 	bl	800e4e8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	08000963 	.word	0x08000963
 8000728:	0800098f 	.word	0x0800098f
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094d 	.word	0x0800094d
 8000770:	08000979 	.word	0x08000979
 8000774:	080009a3 	.word	0x080009a3
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f013 ff49 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fdd9 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f013 ff3f 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fdcf 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f013 ff35 	bl	8014648 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 fb88 	bl	8004f1a <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f004 f9c9 	bl	8004ba4 <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f013 ff17 	bl	8014648 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 fb6a 	bl	8004f1a <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f004 f9ab 	bl	8004ba4 <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f013 fef9 	bl	8014648 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00c f8eb 	bl	800ca40 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f004 f9ed 	bl	8004c54 <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00c f94c 	bl	800cb20 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 faa2 	bl	8004dd4 <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f013 fed8 	bl	8014648 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f013 fec3 	bl	8014648 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f013 feae 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fd3e 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f013 fea4 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fd34 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f013 fe9a 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fd2a 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f013 fe90 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fd20 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f013 fe86 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fd15 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 800094a:	e0e5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094e:	f013 fe7b 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fd0a 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 8000960:	e0da      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000964:	f013 fe70 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	2201      	movs	r2, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fcff 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 8000976:	e0cf      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000978:	4837      	ldr	r0, [pc, #220]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 800097a:	f013 fe65 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fcf4 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 800098c:	e0c4      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 8000990:	f013 fe5a 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fcea 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 80009a0:	e0ba      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a4:	f013 fe50 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fce0 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f013 fe46 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 fcd5 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f013 fe3b 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fcca 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f013 fe30 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fcbf 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	2400068c 	.word	0x2400068c
 80009fc:	240005cc 	.word	0x240005cc
 8000a00:	080153f4 	.word	0x080153f4
 8000a04:	58020400 	.word	0x58020400
 8000a08:	080153fc 	.word	0x080153fc
 8000a0c:	08015408 	.word	0x08015408
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	08015410 	.word	0x08015410
 8000a20:	0801541c 	.word	0x0801541c
 8000a24:	24000684 	.word	0x24000684
 8000a28:	24000534 	.word	0x24000534
 8000a2c:	08015430 	.word	0x08015430
 8000a30:	24000000 	.word	0x24000000
 8000a34:	0801543c 	.word	0x0801543c
 8000a38:	08015448 	.word	0x08015448
 8000a3c:	08015454 	.word	0x08015454
 8000a40:	08015460 	.word	0x08015460
 8000a44:	0801546c 	.word	0x0801546c
 8000a48:	0801547c 	.word	0x0801547c
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	08015488 	.word	0x08015488
 8000a54:	08015494 	.word	0x08015494
 8000a58:	080154a4 	.word	0x080154a4
 8000a5c:	080154b4 	.word	0x080154b4
 8000a60:	080154c0 	.word	0x080154c0
 8000a64:	080154cc 	.word	0x080154cc
 8000a68:	080154d8 	.word	0x080154d8
 8000a6c:	080154e4 	.word	0x080154e4
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f013 fde9 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fc78 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f013 fdde 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fc6e 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f013 fdd4 	bl	8014648 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fc64 	bl	8008374 <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f013 fdca 	bl	8014648 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f013 fdc6 	bl	8014648 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f013 fdbf 	bl	8014648 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f013 fdb8 	bl	8014648 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f013 fdb1 	bl	8014648 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f013 fdaa 	bl	8014648 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f013 fda3 	bl	8014648 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	080154f0 	.word	0x080154f0
 8000b24:	58020800 	.word	0x58020800
 8000b28:	080154fc 	.word	0x080154fc
 8000b2c:	08015508 	.word	0x08015508
 8000b30:	08015518 	.word	0x08015518
 8000b34:	08015528 	.word	0x08015528
 8000b38:	2400067e 	.word	0x2400067e
 8000b3c:	08015530 	.word	0x08015530
 8000b40:	08015538 	.word	0x08015538
 8000b44:	2400067f 	.word	0x2400067f
 8000b48:	08015540 	.word	0x08015540
 8000b4c:	0801554c 	.word	0x0801554c
 8000b50:	24000680 	.word	0x24000680
 8000b54:	08015554 	.word	0x08015554

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 fa6a 	bl	8003034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f89a 	bl	8000c98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f918 	bl	8000d98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fe6a 	bl	8001840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fe38 	bl	80017e0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fd9c 	bl	80016ac <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fde8 	bl	8001748 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb28 	bl	80011cc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fc1a 	bl	80013b4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fd1e 	bl	80015c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fc6e 	bl	8001464 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa5c 	bl	8001044 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f934 	bl	8000df8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 faea 	bl	8001168 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000b94:	f000 fbb6 	bl	8001304 <MX_SPI1_Init>
  MX_RTC_Init();
 8000b98:	f000 fb58 	bl	800124c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  if (!handshake())
 8000b9c:	f000 feca 	bl	8001934 <handshake>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <main+0x52>
  {
	  Error_Handler();
 8000ba6:	f001 fb69 	bl	800227c <Error_Handler>
  }


  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000baa:	2100      	movs	r1, #0
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <main+0xec>)
 8000bae:	f00c f857 	bl	800cc60 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4824      	ldr	r0, [pc, #144]	; (8000c48 <main+0xf0>)
 8000bb6:	f00c f853 	bl	800cc60 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4823      	ldr	r0, [pc, #140]	; (8000c4c <main+0xf4>)
 8000bbe:	f00c f84f 	bl	800cc60 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bc2:	f010 f825 	bl	8010c10 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2108      	movs	r1, #8
 8000bca:	2010      	movs	r0, #16
 8000bcc:	f010 fa20 	bl	8011010 <osMessageQueueNew>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <main+0xf8>)
 8000bd4:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <main+0xfc>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <main+0x100>)
 8000bdc:	f010 f862 	bl	8010ca4 <osThreadNew>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <main+0x104>)
 8000be4:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <main+0x108>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <main+0x10c>)
 8000bec:	f010 f85a 	bl	8010ca4 <osThreadNew>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <main+0x110>)
 8000bf4:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <main+0x114>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	481d      	ldr	r0, [pc, #116]	; (8000c70 <main+0x118>)
 8000bfc:	f010 f852 	bl	8010ca4 <osThreadNew>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <main+0x11c>)
 8000c04:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <main+0x120>)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <main+0x124>)
 8000c0c:	f010 f84a 	bl	8010ca4 <osThreadNew>
 8000c10:	4603      	mov	r3, r0
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <main+0x128>)
 8000c14:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c16:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <main+0x12c>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	481b      	ldr	r0, [pc, #108]	; (8000c88 <main+0x130>)
 8000c1c:	f010 f842 	bl	8010ca4 <osThreadNew>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <main+0x134>)
 8000c24:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f010 f909 	bl	8010e3e <osEventFlagsNew>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <main+0x138>)
 8000c30:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c32:	f000 fea9 	bl	8001988 <system_setup>
  printf("Starting kernal...\n");
 8000c36:	4817      	ldr	r0, [pc, #92]	; (8000c94 <main+0x13c>)
 8000c38:	f013 fd06 	bl	8014648 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c3c:	f010 f80c 	bl	8010c58 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c40:	e7fe      	b.n	8000c40 <main+0xe8>
 8000c42:	bf00      	nop
 8000c44:	240004e8 	.word	0x240004e8
 8000c48:	24000534 	.word	0x24000534
 8000c4c:	24000580 	.word	0x24000580
 8000c50:	24000674 	.word	0x24000674
 8000c54:	080155c0 	.word	0x080155c0
 8000c58:	0800210d 	.word	0x0800210d
 8000c5c:	24000660 	.word	0x24000660
 8000c60:	080155e4 	.word	0x080155e4
 8000c64:	08002151 	.word	0x08002151
 8000c68:	24000664 	.word	0x24000664
 8000c6c:	08015608 	.word	0x08015608
 8000c70:	08002195 	.word	0x08002195
 8000c74:	24000668 	.word	0x24000668
 8000c78:	0801562c 	.word	0x0801562c
 8000c7c:	080021d9 	.word	0x080021d9
 8000c80:	2400066c 	.word	0x2400066c
 8000c84:	08015650 	.word	0x08015650
 8000c88:	080021fd 	.word	0x080021fd
 8000c8c:	24000670 	.word	0x24000670
 8000c90:	24000688 	.word	0x24000688
 8000c94:	0801555c 	.word	0x0801555c

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09c      	sub	sp, #112	; 0x70
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	224c      	movs	r2, #76	; 0x4c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f013 fb60 	bl	801436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2220      	movs	r2, #32
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f013 fb5a 	bl	801436c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f007 fca9 	bl	8008610 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	4a32      	ldr	r2, [pc, #200]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <SystemClock_Config+0xf8>)
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ce0:	4a2c      	ldr	r2, [pc, #176]	; (8000d94 <SystemClock_Config+0xfc>)
 8000ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf4:	bf00      	nop
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <SystemClock_Config+0xfc>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d02:	d1f8      	bne.n	8000cf6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d04:	230a      	movs	r3, #10
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0c:	2340      	movs	r3, #64	; 0x40
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d20:	230c      	movs	r3, #12
 8000d22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d24:	2304      	movs	r3, #4
 8000d26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d30:	230c      	movs	r3, #12
 8000d32:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d40:	4618      	mov	r0, r3
 8000d42:	f007 fc9f 	bl	8008684 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d4c:	f001 fa96 	bl	800227c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	233f      	movs	r3, #63	; 0x3f
 8000d52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2303      	movs	r3, #3
 8000d56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2101      	movs	r1, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	f008 f8de 	bl	8008f38 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d82:	f001 fa7b 	bl	800227c <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3770      	adds	r7, #112	; 0x70
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	58000400 	.word	0x58000400
 8000d94:	58024800 	.word	0x58024800

08000d98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0b0      	sub	sp, #192	; 0xc0
 8000d9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	22c0      	movs	r2, #192	; 0xc0
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f013 fae1 	bl	801436c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000daa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dae:	f04f 0300 	mov.w	r3, #0
 8000db2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000db6:	2304      	movs	r3, #4
 8000db8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000dba:	2309      	movs	r3, #9
 8000dbc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dca:	23c0      	movs	r3, #192	; 0xc0
 8000dcc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000dd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	4618      	mov	r0, r3
 8000de2:	f008 fc77 	bl	80096d4 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000dec:	f001 fa46 	bl	800227c <Error_Handler>
  }
}
 8000df0:	bf00      	nop
 8000df2:	37c0      	adds	r7, #192	; 0xc0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1c:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e1e:	4a7d      	ldr	r2, [pc, #500]	; (8001014 <MX_ADC1_Init+0x21c>)
 8000e20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e22:	4b7b      	ldr	r3, [pc, #492]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2a:	4b79      	ldr	r3, [pc, #484]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e30:	4b77      	ldr	r3, [pc, #476]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e36:	4b76      	ldr	r3, [pc, #472]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e3c:	4b74      	ldr	r3, [pc, #464]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e42:	4b73      	ldr	r3, [pc, #460]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e48:	4b71      	ldr	r3, [pc, #452]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e4a:	220b      	movs	r2, #11
 8000e4c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4e:	4b70      	ldr	r3, [pc, #448]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e54:	4b6e      	ldr	r3, [pc, #440]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b6d      	ldr	r3, [pc, #436]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e60:	4b6b      	ldr	r3, [pc, #428]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e66:	4b6a      	ldr	r3, [pc, #424]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e6e:	4b68      	ldr	r3, [pc, #416]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e74:	4b66      	ldr	r3, [pc, #408]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	4864      	ldr	r0, [pc, #400]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e7e:	f002 fb89 	bl	8003594 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e88:	f001 f9f8 	bl	800227c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	485e      	ldr	r0, [pc, #376]	; (8001010 <MX_ADC1_Init+0x218>)
 8000e98:	f003 fca4 	bl	80047e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000ea2:	f001 f9eb 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea6:	4b5c      	ldr	r3, [pc, #368]	; (8001018 <MX_ADC1_Init+0x220>)
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000eb6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4851      	ldr	r0, [pc, #324]	; (8001010 <MX_ADC1_Init+0x218>)
 8000eca:	f002 fde7 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ed4:	f001 f9d2 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed8:	4b50      	ldr	r3, [pc, #320]	; (800101c <MX_ADC1_Init+0x224>)
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000edc:	230c      	movs	r3, #12
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	484a      	ldr	r0, [pc, #296]	; (8001010 <MX_ADC1_Init+0x218>)
 8000ee6:	f002 fdd9 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ef0:	f001 f9c4 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ef4:	4b4a      	ldr	r3, [pc, #296]	; (8001020 <MX_ADC1_Init+0x228>)
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4843      	ldr	r0, [pc, #268]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f02:	f002 fdcb 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000f0c:	f001 f9b6 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f10:	4b44      	ldr	r3, [pc, #272]	; (8001024 <MX_ADC1_Init+0x22c>)
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f14:	2318      	movs	r3, #24
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483c      	ldr	r0, [pc, #240]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f1e:	f002 fdbd 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f28:	f001 f9a8 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_ADC1_Init+0x230>)
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4835      	ldr	r0, [pc, #212]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f3c:	f002 fdae 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f46:	f001 f999 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <MX_ADC1_Init+0x234>)
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f4e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f5a:	f002 fd9f 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f64:	f001 f98a 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f68:	4b31      	ldr	r3, [pc, #196]	; (8001030 <MX_ADC1_Init+0x238>)
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f6c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	4826      	ldr	r0, [pc, #152]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f78:	f002 fd90 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f82:	f001 f97b 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_ADC1_Init+0x23c>)
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f8a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	481e      	ldr	r0, [pc, #120]	; (8001010 <MX_ADC1_Init+0x218>)
 8000f96:	f002 fd81 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000fa0:	f001 f96c 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_ADC1_Init+0x240>)
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000fa8:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <MX_ADC1_Init+0x218>)
 8000fb4:	f002 fd72 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fbe:	f001 f95d 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_ADC1_Init+0x244>)
 8000fc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_ADC1_Init+0x218>)
 8000fd6:	f002 fd61 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fe0:	f001 f94c 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_ADC1_Init+0x248>)
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fe8:	f240 2306 	movw	r3, #518	; 0x206
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_ADC1_Init+0x218>)
 8000ff8:	f002 fd50 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8001002:	f001 f93b 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2400011c 	.word	0x2400011c
 8001014:	40022000 	.word	0x40022000
 8001018:	0c900008 	.word	0x0c900008
 800101c:	10c00010 	.word	0x10c00010
 8001020:	14f00020 	.word	0x14f00020
 8001024:	1d500080 	.word	0x1d500080
 8001028:	21800100 	.word	0x21800100
 800102c:	25b00200 	.word	0x25b00200
 8001030:	2a000400 	.word	0x2a000400
 8001034:	2e300800 	.word	0x2e300800
 8001038:	3ac04000 	.word	0x3ac04000
 800103c:	3ef08000 	.word	0x3ef08000
 8001040:	47520000 	.word	0x47520000

08001044 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <MX_ADC3_Init+0x110>)
 800105e:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <MX_ADC3_Init+0x114>)
 8001060:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <MX_ADC3_Init+0x110>)
 8001064:	2208      	movs	r2, #8
 8001066:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001068:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <MX_ADC3_Init+0x110>)
 800106a:	2201      	movs	r2, #1
 800106c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <MX_ADC3_Init+0x110>)
 8001070:	2204      	movs	r2, #4
 8001072:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <MX_ADC3_Init+0x110>)
 8001076:	2200      	movs	r2, #0
 8001078:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800107a:	4b36      	ldr	r3, [pc, #216]	; (8001154 <MX_ADC3_Init+0x110>)
 800107c:	2201      	movs	r2, #1
 800107e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001080:	4b34      	ldr	r3, [pc, #208]	; (8001154 <MX_ADC3_Init+0x110>)
 8001082:	2204      	movs	r2, #4
 8001084:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MX_ADC3_Init+0x110>)
 8001088:	2200      	movs	r2, #0
 800108a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <MX_ADC3_Init+0x110>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <MX_ADC3_Init+0x110>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <MX_ADC3_Init+0x110>)
 800109a:	2203      	movs	r2, #3
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_ADC3_Init+0x110>)
 80010a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <MX_ADC3_Init+0x110>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_ADC3_Init+0x110>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010b4:	4827      	ldr	r0, [pc, #156]	; (8001154 <MX_ADC3_Init+0x110>)
 80010b6:	f002 fa6d 	bl	8003594 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010c0:	f001 f8dc 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_ADC3_Init+0x118>)
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c8:	2306      	movs	r3, #6
 80010ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010cc:	2307      	movs	r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d6:	2304      	movs	r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_ADC3_Init+0x110>)
 80010e8:	f002 fcd8 	bl	8003a9c <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010f2:	f001 f8c3 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_ADC3_Init+0x11c>)
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010fa:	230c      	movs	r3, #12
 80010fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <MX_ADC3_Init+0x110>)
 8001104:	f002 fcca 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800110e:	f001 f8b5 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001116:	2312      	movs	r3, #18
 8001118:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_ADC3_Init+0x110>)
 8001120:	f002 fcbc 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800112a:	f001 f8a7 	bl	800227c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_ADC3_Init+0x120>)
 8001130:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001132:	2318      	movs	r3, #24
 8001134:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_ADC3_Init+0x110>)
 800113c:	f002 fcae 	bl	8003a9c <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001146:	f001 f899 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	24000180 	.word	0x24000180
 8001158:	58026000 	.word	0x58026000
 800115c:	cb840000 	.word	0xcb840000
 8001160:	cfb80000 	.word	0xcfb80000
 8001164:	04300002 	.word	0x04300002

08001168 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2224      	movs	r2, #36	; 0x24
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f013 f8f9 	bl	801436c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_DAC1_Init+0x5c>)
 800117c:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_DAC1_Init+0x60>)
 800117e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <MX_DAC1_Init+0x5c>)
 8001182:	f003 fced 	bl	8004b60 <HAL_DAC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800118c:	f001 f876 	bl	800227c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001194:	230a      	movs	r3, #10
 8001196:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800119c:	2301      	movs	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_DAC1_Init+0x5c>)
 80011ac:	f003 ff08 	bl	8004fc0 <HAL_DAC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011b6:	f001 f861 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	240002d4 	.word	0x240002d4
 80011c8:	40007400 	.word	0x40007400

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <MX_I2C1_Init+0x78>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_I2C1_Init+0x74>)
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <MX_I2C1_Init+0x7c>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_I2C1_Init+0x74>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_I2C1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_I2C1_Init+0x74>)
 8001208:	f007 f8ce 	bl	80083a8 <HAL_I2C_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001212:	f001 f833 	bl	800227c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001216:	2100      	movs	r1, #0
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <MX_I2C1_Init+0x74>)
 800121a:	f007 f961 	bl	80084e0 <HAL_I2CEx_ConfigAnalogFilter>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001224:	f001 f82a 	bl	800227c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001228:	2100      	movs	r1, #0
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2C1_Init+0x74>)
 800122c:	f007 f9a3 	bl	8008576 <HAL_I2CEx_ConfigDigitalFilter>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001236:	f001 f821 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	24000360 	.word	0x24000360
 8001244:	40005400 	.word	0x40005400
 8001248:	00506682 	.word	0x00506682

0800124c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_RTC_Init+0xb0>)
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <MX_RTC_Init+0xb4>)
 8001268:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_RTC_Init+0xb0>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_RTC_Init+0xb0>)
 8001272:	227f      	movs	r2, #127	; 0x7f
 8001274:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_RTC_Init+0xb0>)
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_RTC_Init+0xb0>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_RTC_Init+0xb0>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_RTC_Init+0xb0>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_RTC_Init+0xb0>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001294:	4819      	ldr	r0, [pc, #100]	; (80012fc <MX_RTC_Init+0xb0>)
 8001296:	f00a ff1b 	bl	800c0d0 <HAL_RTC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80012a0:	f000 ffec 	bl	800227c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <MX_RTC_Init+0xb0>)
 80012c0:	f00a ff88 	bl	800c1d4 <HAL_RTC_SetTime>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012ca:	f000 ffd7 	bl	800227c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80012ce:	2305      	movs	r3, #5
 80012d0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80012d2:	2305      	movs	r3, #5
 80012d4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 80012d6:	2331      	movs	r3, #49	; 0x31
 80012d8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80012da:	2324      	movs	r3, #36	; 0x24
 80012dc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_RTC_Init+0xb0>)
 80012e6:	f00b f86f 	bl	800c3c8 <HAL_RTC_SetDate>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012f0:	f000 ffc4 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	240003b4 	.word	0x240003b4
 8001300:	58004000 	.word	0x58004000

08001304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001308:	4b28      	ldr	r3, [pc, #160]	; (80013ac <MX_SPI1_Init+0xa8>)
 800130a:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <MX_SPI1_Init+0xac>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001310:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001318:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800131c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001320:	220f      	movs	r2, #15
 8001322:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_SPI1_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001332:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001336:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_SPI1_Init+0xa8>)
 800133a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800133e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_SPI1_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI1_Init+0xa8>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI1_Init+0xa8>)
 800136e:	2200      	movs	r2, #0
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001374:	2200      	movs	r2, #0
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI1_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001386:	2200      	movs	r2, #0
 8001388:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_SPI1_Init+0xa8>)
 800138c:	2200      	movs	r2, #0
 800138e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001392:	2200      	movs	r2, #0
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_SPI1_Init+0xa8>)
 8001398:	f00b f9bc 	bl	800c714 <HAL_SPI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80013a2:	f000 ff6b 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240003d8 	.word	0x240003d8
 80013b0:	40013000 	.word	0x40013000

080013b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_SPI2_Init+0xa8>)
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <MX_SPI2_Init+0xac>)
 80013bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013be:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_SPI2_Init+0xa8>)
 80013c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_SPI2_Init+0xa8>)
 80013c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_SPI2_Init+0xa8>)
 80013d0:	220f      	movs	r2, #15
 80013d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_SPI2_Init+0xa8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_SPI2_Init+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_SPI2_Init+0xa8>)
 80013e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_SPI2_Init+0xa8>)
 80013ea:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80013ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_SPI2_Init+0xa8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_SPI2_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_SPI2_Init+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SPI2_Init+0xa8>)
 8001404:	2200      	movs	r2, #0
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_SPI2_Init+0xa8>)
 800140a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_SPI2_Init+0xa8>)
 8001412:	2200      	movs	r2, #0
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_SPI2_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_SPI2_Init+0xa8>)
 800141e:	2200      	movs	r2, #0
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_SPI2_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_SPI2_Init+0xa8>)
 800142a:	2200      	movs	r2, #0
 800142c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_SPI2_Init+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SPI2_Init+0xa8>)
 8001436:	2200      	movs	r2, #0
 8001438:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_SPI2_Init+0xa8>)
 800143c:	2200      	movs	r2, #0
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SPI2_Init+0xa8>)
 8001442:	2200      	movs	r2, #0
 8001444:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_SPI2_Init+0xa8>)
 8001448:	f00b f964 	bl	800c714 <HAL_SPI_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001452:	f000 ff13 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000460 	.word	0x24000460
 8001460:	40003800 	.word	0x40003800

08001464 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b09a      	sub	sp, #104	; 0x68
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001484:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	222c      	movs	r2, #44	; 0x2c
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f012 ff64 	bl	801436c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014a6:	4a45      	ldr	r2, [pc, #276]	; (80015bc <MX_TIM1_Init+0x158>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014ac:	225f      	movs	r2, #95	; 0x5f
 80014ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80014b6:	4b40      	ldr	r3, [pc, #256]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014b8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80014bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d0:	4839      	ldr	r0, [pc, #228]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014d2:	f00b fa5e 	bl	800c992 <HAL_TIM_Base_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f000 fece 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ea:	4619      	mov	r1, r3
 80014ec:	4832      	ldr	r0, [pc, #200]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014ee:	f00c f89d 	bl	800d62c <HAL_TIM_ConfigClockSource>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014f8:	f000 fec0 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014fc:	482e      	ldr	r0, [pc, #184]	; (80015b8 <MX_TIM1_Init+0x154>)
 80014fe:	f00b fd09 	bl	800cf14 <HAL_TIM_PWM_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001508:	f000 feb8 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001518:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800151c:	4619      	mov	r1, r3
 800151e:	4826      	ldr	r0, [pc, #152]	; (80015b8 <MX_TIM1_Init+0x154>)
 8001520:	f00c fdda 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800152a:	f000 fea7 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152e:	2360      	movs	r3, #96	; 0x60
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001532:	f240 13df 	movw	r3, #479	; 0x1df
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <MX_TIM1_Init+0x154>)
 8001556:	f00b ff55 	bl	800d404 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001560:	f000 fe8c 	bl	800227c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <MX_TIM1_Init+0x154>)
 800159a:	f00c fe2b 	bl	800e1f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80015a4:	f000 fe6a 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <MX_TIM1_Init+0x154>)
 80015aa:	f001 f9f5 	bl	8002998 <HAL_TIM_MspPostInit>

}
 80015ae:	bf00      	nop
 80015b0:	3768      	adds	r7, #104	; 0x68
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	240004e8 	.word	0x240004e8
 80015bc:	40010000 	.word	0x40010000

080015c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <MX_TIM2_Init+0xe8>)
 80015f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <MX_TIM2_Init+0xe8>)
 80015fc:	222f      	movs	r2, #47	; 0x2f
 80015fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001608:	f640 4234 	movw	r2, #3124	; 0xc34
 800160c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800161a:	4823      	ldr	r0, [pc, #140]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800161c:	f00b f9b9 	bl	800c992 <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001626:	f000 fe29 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001634:	4619      	mov	r1, r3
 8001636:	481c      	ldr	r0, [pc, #112]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001638:	f00b fff8 	bl	800d62c <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001642:	f000 fe1b 	bl	800227c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001648:	f00b fc64 	bl	800cf14 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001652:	f000 fe13 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001656:	2320      	movs	r3, #32
 8001658:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4810      	ldr	r0, [pc, #64]	; (80016a8 <MX_TIM2_Init+0xe8>)
 8001666:	f00c fd37 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001670:	f000 fe04 	bl	800227c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	; 0x60
 8001676:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	220c      	movs	r2, #12
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800168c:	f00b feba 	bl	800d404 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001696:	f000 fdf1 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM2_Init+0xe8>)
 800169c:	f001 f97c 	bl	8002998 <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3738      	adds	r7, #56	; 0x38
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	24000534 	.word	0x24000534

080016ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM3_Init+0x94>)
 80016cc:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <MX_TIM3_Init+0x98>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_TIM3_Init+0x94>)
 80016d2:	222f      	movs	r2, #47	; 0x2f
 80016d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM3_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM3_Init+0x94>)
 80016de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_TIM3_Init+0x94>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_TIM3_Init+0x94>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016f0:	4813      	ldr	r0, [pc, #76]	; (8001740 <MX_TIM3_Init+0x94>)
 80016f2:	f00b f94e 	bl	800c992 <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016fc:	f000 fdbe 	bl	800227c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001704:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM3_Init+0x94>)
 800170e:	f00b ff8d 	bl	800d62c <HAL_TIM_ConfigClockSource>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001718:	f000 fdb0 	bl	800227c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM3_Init+0x94>)
 800172a:	f00c fcd5 	bl	800e0d8 <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001734:	f000 fda2 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	24000580 	.word	0x24000580
 8001744:	40000400 	.word	0x40000400

08001748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <MX_USART1_UART_Init+0x94>)
 8001750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001754:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 8001792:	f00c fdcb 	bl	800e32c <HAL_UART_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800179c:	f000 fd6e 	bl	800227c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a0:	2100      	movs	r1, #0
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017a4:	f00f f925 	bl	80109f2 <HAL_UARTEx_SetTxFifoThreshold>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017ae:	f000 fd65 	bl	800227c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017b6:	f00f f95a 	bl	8010a6e <HAL_UARTEx_SetRxFifoThreshold>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f000 fd5c 	bl	800227c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_USART1_UART_Init+0x90>)
 80017c6:	f00f f8db 	bl	8010980 <HAL_UARTEx_DisableFifoMode>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017d0:	f000 fd54 	bl	800227c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	240005cc 	.word	0x240005cc
 80017dc:	40011000 	.word	0x40011000

080017e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_DMA_Init+0x5c>)
 80017e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <MX_DMA_Init+0x5c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_DMA_Init+0x5c>)
 80017f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2105      	movs	r1, #5
 8001808:	200b      	movs	r0, #11
 800180a:	f003 f981 	bl	8004b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800180e:	200b      	movs	r0, #11
 8001810:	f003 f998 	bl	8004b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2105      	movs	r1, #5
 8001818:	200c      	movs	r0, #12
 800181a:	f003 f979 	bl	8004b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800181e:	200c      	movs	r0, #12
 8001820:	f003 f990 	bl	8004b44 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2105      	movs	r1, #5
 8001828:	2010      	movs	r0, #16
 800182a:	f003 f971 	bl	8004b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800182e:	2010      	movs	r0, #16
 8001830:	f003 f988 	bl	8004b44 <HAL_NVIC_EnableIRQ>

}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	58024400 	.word	0x58024400

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	4a32      	ldr	r2, [pc, #200]	; (8001928 <MX_GPIO_Init+0xe8>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <MX_GPIO_Init+0xe8>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <MX_GPIO_Init+0xe8>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	4a23      	ldr	r2, [pc, #140]	; (8001928 <MX_GPIO_Init+0xe8>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c0:	4b19      	ldr	r3, [pc, #100]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018ce:	2200      	movs	r2, #0
 80018d0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80018d4:	4815      	ldr	r0, [pc, #84]	; (800192c <MX_GPIO_Init+0xec>)
 80018d6:	f006 fd4d 	bl	8008374 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	2164      	movs	r1, #100	; 0x64
 80018de:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_GPIO_Init+0xf0>)
 80018e0:	f006 fd48 	bl	8008374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018e4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80018e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <MX_GPIO_Init+0xec>)
 80018fe:	f006 fb71 	bl	8007fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001902:	2364      	movs	r3, #100	; 0x64
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_GPIO_Init+0xf0>)
 800191a:	f006 fb63 	bl	8007fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	58024400 	.word	0x58024400
 800192c:	58020800 	.word	0x58020800
 8001930:	58020400 	.word	0x58020400

08001934 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
	uint8_t buffer[1];
	uint8_t key;

	while(1)
	{
		HAL_UART_Receive_IT(&huart1, buffer, 1);
 800193a:	463b      	mov	r3, r7
 800193c:	2201      	movs	r2, #1
 800193e:	4619      	mov	r1, r3
 8001940:	4810      	ldr	r0, [pc, #64]	; (8001984 <handshake+0x50>)
 8001942:	f00c fdd1 	bl	800e4e8 <HAL_UART_Receive_IT>
		key = buffer[0];
 8001946:	783b      	ldrb	r3, [r7, #0]
 8001948:	70fb      	strb	r3, [r7, #3]
		if(key == 0xFF)
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	2bff      	cmp	r3, #255	; 0xff
 800194e:	d1f4      	bne.n	800193a <handshake+0x6>
		{
			buffer[0] = 0xFA;
 8001950:	23fa      	movs	r3, #250	; 0xfa
 8001952:	703b      	strb	r3, [r7, #0]
			for(int i = 0; i < 10; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	e00b      	b.n	8001972 <handshake+0x3e>
			{
				HAL_UART_Transmit(&huart1, buffer, 1, 100);
 800195a:	4639      	mov	r1, r7
 800195c:	2364      	movs	r3, #100	; 0x64
 800195e:	2201      	movs	r2, #1
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <handshake+0x50>)
 8001962:	f00c fd33 	bl	800e3cc <HAL_UART_Transmit>
				HAL_Delay(100);
 8001966:	2064      	movs	r0, #100	; 0x64
 8001968:	f001 fbc0 	bl	80030ec <HAL_Delay>
			for(int i = 0; i < 10; i++)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3301      	adds	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b09      	cmp	r3, #9
 8001976:	ddf0      	ble.n	800195a <handshake+0x26>
			}

			return 1;
 8001978:	2301      	movs	r3, #1
		}
	}
	return 0;
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	240005cc 	.word	0x240005cc

08001988 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 800198c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001990:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001996:	210c      	movs	r1, #12
 8001998:	4818      	ldr	r0, [pc, #96]	; (80019fc <system_setup+0x74>)
 800199a:	f00b fb1d 	bl	800cfd8 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800199e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019a6:	4816      	ldr	r0, [pc, #88]	; (8001a00 <system_setup+0x78>)
 80019a8:	f002 feb8 	bl	800471c <HAL_ADCEx_Calibration_Start>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80019b2:	f000 fc63 	bl	800227c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80019b6:	220b      	movs	r2, #11
 80019b8:	4912      	ldr	r1, [pc, #72]	; (8001a04 <system_setup+0x7c>)
 80019ba:	4811      	ldr	r0, [pc, #68]	; (8001a00 <system_setup+0x78>)
 80019bc:	f001 ff8c 	bl	80038d8 <HAL_ADC_Start_DMA>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80019c6:	f000 fc59 	bl	800227c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80019ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <system_setup+0x80>)
 80019d4:	f002 fea2 	bl	800471c <HAL_ADCEx_Calibration_Start>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80019de:	f000 fc4d 	bl	800227c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80019e2:	2204      	movs	r2, #4
 80019e4:	4909      	ldr	r1, [pc, #36]	; (8001a0c <system_setup+0x84>)
 80019e6:	4808      	ldr	r0, [pc, #32]	; (8001a08 <system_setup+0x80>)
 80019e8:	f001 ff76 	bl	80038d8 <HAL_ADC_Start_DMA>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80019f2:	f000 fc43 	bl	800227c <Error_Handler>
	  	}
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	24000534 	.word	0x24000534
 8001a00:	2400011c 	.word	0x2400011c
 8001a04:	24000700 	.word	0x24000700
 8001a08:	24000180 	.word	0x24000180
 8001a0c:	24000720 	.word	0x24000720

08001a10 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	481d      	ldr	r0, [pc, #116]	; (8001a98 <getTimestamp+0x88>)
 8001a22:	f00a fc75 	bl	800c310 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	481a      	ldr	r0, [pc, #104]	; (8001a98 <getTimestamp+0x88>)
 8001a30:	f00a fd52 	bl	800c4d8 <HAL_RTC_GetDate>
    uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a3a:	fb03 f202 	mul.w	r2, r3, r2
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <getTimestamp+0x88>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24



    buffer[0] = currentDate.Year;		// 0-99
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	701a      	strb	r2, [r3, #0]
    buffer[1] = currentDate.Month;		// 1-12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3301      	adds	r3, #1
 8001a56:	7b7a      	ldrb	r2, [r7, #13]
 8001a58:	701a      	strb	r2, [r3, #0]
    buffer[2] = currentDate.Date;		// 1-31
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	7bba      	ldrb	r2, [r7, #14]
 8001a60:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3303      	adds	r3, #3
 8001a66:	7c3a      	ldrb	r2, [r7, #16]
 8001a68:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	7c7a      	ldrb	r2, [r7, #17]
 8001a70:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3305      	adds	r3, #5
 8001a76:	7cba      	ldrb	r2, [r7, #18]
 8001a78:	701a      	strb	r2, [r3, #0]
    buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	0a1a      	lsrs	r2, r3, #8
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3306      	adds	r3, #6
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]
    buffer[7] = milliseconds & 0xFF;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3307      	adds	r3, #7
 8001a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	240003b4 	.word	0x240003b4

08001a9c <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f012 fc3f 	bl	8014330 <malloc>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f012 fc47 	bl	8014350 <memcpy>
    packet.size = size;
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ad2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001ae6:	bf00      	nop
 8001ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aec:	483f      	ldr	r0, [pc, #252]	; (8001bec <sample_pmt+0x10c>)
 8001aee:	f006 fc29 	bl	8008344 <HAL_GPIO_ReadPin>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f7      	bne.n	8001ae8 <sample_pmt+0x8>
	}
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001af8:	200e      	movs	r0, #14
 8001afa:	f012 fc19 	bl	8014330 <malloc>
 8001afe:	4603      	mov	r3, r0
 8001b00:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001b02:	2002      	movs	r0, #2
 8001b04:	f012 fc14 	bl	8014330 <malloc>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001b0c:	2008      	movs	r0, #8
 8001b0e:	f012 fc0f 	bl	8014330 <malloc>
 8001b12:	4603      	mov	r3, r0
 8001b14:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7ff ff7a 	bl	8001a10 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	220e      	movs	r2, #14
 8001b20:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	3301      	adds	r3, #1
 8001b26:	220d      	movs	r2, #13
 8001b28:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	22bb      	movs	r2, #187	; 0xbb
 8001b2e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	22bb      	movs	r2, #187	; 0xbb
 8001b36:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <sample_pmt+0x110>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3302      	adds	r3, #2
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <sample_pmt+0x110>)
 8001b4a:	881a      	ldrh	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3303      	adds	r3, #3
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3304      	adds	r3, #4
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	7812      	ldrb	r2, [r2, #0]
 8001b5c:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3305      	adds	r3, #5
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	7852      	ldrb	r2, [r2, #1]
 8001b66:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3306      	adds	r3, #6
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3307      	adds	r3, #7
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	7852      	ldrb	r2, [r2, #1]
 8001b7a:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	7892      	ldrb	r2, [r2, #2]
 8001b84:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3309      	adds	r3, #9
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	78d2      	ldrb	r2, [r2, #3]
 8001b8e:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	330a      	adds	r3, #10
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	7912      	ldrb	r2, [r2, #4]
 8001b98:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	330b      	adds	r3, #11
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	7952      	ldrb	r2, [r2, #5]
 8001ba2:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	7992      	ldrb	r2, [r2, #6]
 8001bac:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	330d      	adds	r3, #13
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	79d2      	ldrb	r2, [r2, #7]
 8001bb6:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	220e      	movs	r2, #14
 8001bbc:	6979      	ldr	r1, [r7, #20]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ff6c 	bl	8001a9c <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <sample_pmt+0x114>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	1d39      	adds	r1, r7, #4
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f00f fa93 	bl	80110f8 <osMessageQueuePut>
	free(buffer);
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f012 fbb4 	bl	8014340 <free>
	free(pmt_spi);
 8001bd8:	6938      	ldr	r0, [r7, #16]
 8001bda:	f012 fbb1 	bl	8014340 <free>
	free(timestamp);
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f012 fbae 	bl	8014340 <free>
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58020000 	.word	0x58020000
 8001bf0:	24000678 	.word	0x24000678
 8001bf4:	24000674 	.word	0x24000674

08001bf8 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8001bfe:	bf00      	nop
 8001c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c04:	4856      	ldr	r0, [pc, #344]	; (8001d60 <sample_erpa+0x168>)
 8001c06:	f006 fb9d 	bl	8008344 <HAL_GPIO_ReadPin>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f7      	bne.n	8001c00 <sample_erpa+0x8>
	}

    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001c10:	2012      	movs	r0, #18
 8001c12:	f012 fb8d 	bl	8014330 <malloc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f012 fb88 	bl	8014330 <malloc>
 8001c20:	4603      	mov	r3, r0
 8001c22:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8001c24:	2004      	movs	r0, #4
 8001c26:	f012 fb83 	bl	8014330 <malloc>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001c2e:	2008      	movs	r0, #8
 8001c30:	f012 fb7e 	bl	8014330 <malloc>
 8001c34:	4603      	mov	r3, r0
 8001c36:	60bb      	str	r3, [r7, #8]
    getTimestamp(timestamp);
 8001c38:	68b8      	ldr	r0, [r7, #8]
 8001c3a:	f7ff fee9 	bl	8001a10 <getTimestamp>

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	220e      	movs	r2, #14
 8001c42:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	3301      	adds	r3, #1
 8001c48:	220d      	movs	r2, #13
 8001c4a:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	22ee      	movs	r2, #238	; 0xee
 8001c50:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3302      	adds	r3, #2
 8001c56:	22dd      	movs	r2, #221	; 0xdd
 8001c58:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	22aa      	movs	r2, #170	; 0xaa
 8001c5e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	22aa      	movs	r2, #170	; 0xaa
 8001c66:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8001c68:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <sample_erpa+0x16c>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3302      	adds	r3, #2
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <sample_erpa+0x16c>)
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3303      	adds	r3, #3
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3305      	adds	r3, #5
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3306      	adds	r3, #6
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	881a      	ldrh	r2, [r3, #0]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3307      	adds	r3, #7
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3309      	adds	r3, #9
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	7852      	ldrb	r2, [r2, #1]
 8001cd2:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	330a      	adds	r3, #10
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	7812      	ldrb	r2, [r2, #0]
 8001cdc:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	330b      	adds	r3, #11
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	7852      	ldrb	r2, [r2, #1]
 8001ce6:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	330c      	adds	r3, #12
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	7892      	ldrb	r2, [r2, #2]
 8001cf0:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	330d      	adds	r3, #13
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	78d2      	ldrb	r2, [r2, #3]
 8001cfa:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	330e      	adds	r3, #14
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	7912      	ldrb	r2, [r2, #4]
 8001d04:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	330f      	adds	r3, #15
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	7952      	ldrb	r2, [r2, #5]
 8001d0e:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3310      	adds	r3, #16
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	7992      	ldrb	r2, [r2, #6]
 8001d18:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3311      	adds	r3, #17
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	79d2      	ldrb	r2, [r2, #7]
 8001d22:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001d24:	463b      	mov	r3, r7
 8001d26:	2212      	movs	r2, #18
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff feb6 	bl	8001a9c <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <sample_erpa+0x170>)
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	4639      	mov	r1, r7
 8001d36:	2300      	movs	r3, #0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f00f f9dd 	bl	80110f8 <osMessageQueuePut>
	free(buffer);
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f012 fafe 	bl	8014340 <free>
	free(erpa_spi);
 8001d44:	6938      	ldr	r0, [r7, #16]
 8001d46:	f012 fafb 	bl	8014340 <free>
	free(erpa_adc);
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f012 faf8 	bl	8014340 <free>
	free(timestamp);
 8001d50:	68b8      	ldr	r0, [r7, #8]
 8001d52:	f012 faf5 	bl	8014340 <free>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	58020400 	.word	0x58020400
 8001d64:	2400067a 	.word	0x2400067a
 8001d68:	24000674 	.word	0x24000674

08001d6c <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001d72:	202e      	movs	r0, #46	; 0x2e
 8001d74:	f012 fadc 	bl	8014330 <malloc>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	61fb      	str	r3, [r7, #28]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8001d7c:	2008      	movs	r0, #8
 8001d7e:	f012 fad7 	bl	8014330 <malloc>
 8001d82:	4603      	mov	r3, r0
 8001d84:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001d86:	2012      	movs	r0, #18
 8001d88:	f012 fad2 	bl	8014330 <malloc>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001d90:	2008      	movs	r0, #8
 8001d92:	f012 facd 	bl	8014330 <malloc>
 8001d96:	4603      	mov	r3, r0
 8001d98:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8001d9a:	2008      	movs	r0, #8
 8001d9c:	f012 fac8 	bl	8014330 <malloc>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
    getTimestamp(timestamp);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff fe33 	bl	8001a10 <getTimestamp>

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2211      	movs	r2, #17
 8001dae:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	3302      	adds	r3, #2
 8001db4:	2212      	movs	r2, #18
 8001db6:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	2213      	movs	r2, #19
 8001dbe:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	3306      	adds	r3, #6
 8001dc4:	2214      	movs	r2, #20
 8001dc6:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	22a0      	movs	r2, #160	; 0xa0
 8001dcc:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	22a1      	movs	r2, #161	; 0xa1
 8001dd4:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	22a2      	movs	r2, #162	; 0xa2
 8001ddc:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3306      	adds	r3, #6
 8001de2:	22a3      	movs	r2, #163	; 0xa3
 8001de4:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3308      	adds	r3, #8
 8001dea:	22a4      	movs	r2, #164	; 0xa4
 8001dec:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	330a      	adds	r3, #10
 8001df2:	22a5      	movs	r2, #165	; 0xa5
 8001df4:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	330c      	adds	r3, #12
 8001dfa:	22a6      	movs	r2, #166	; 0xa6
 8001dfc:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	330e      	adds	r3, #14
 8001e02:	22a7      	movs	r2, #167	; 0xa7
 8001e04:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3310      	adds	r3, #16
 8001e0a:	22a8      	movs	r2, #168	; 0xa8
 8001e0c:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	22b0      	movs	r2, #176	; 0xb0
 8001e12:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3302      	adds	r3, #2
 8001e18:	22b1      	movs	r2, #177	; 0xb1
 8001e1a:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	22b2      	movs	r2, #178	; 0xb2
 8001e22:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	3306      	adds	r3, #6
 8001e28:	22b3      	movs	r2, #179	; 0xb3
 8001e2a:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	22cc      	movs	r2, #204	; 0xcc
 8001e30:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	22cc      	movs	r2, #204	; 0xcc
 8001e38:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001e3a:	4ba5      	ldr	r3, [pc, #660]	; (80020d0 <sample_hk+0x364>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3302      	adds	r3, #2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001e4a:	4ba1      	ldr	r3, [pc, #644]	; (80020d0 <sample_hk+0x364>)
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3303      	adds	r3, #3
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3302      	adds	r3, #2
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	3304      	adds	r3, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3305      	adds	r3, #5
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3306      	adds	r3, #6
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	121a      	asrs	r2, r3, #8
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	3309      	adds	r3, #9
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb8:	121a      	asrs	r2, r3, #8
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	330a      	adds	r3, #10
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	330b      	adds	r3, #11
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	121a      	asrs	r2, r3, #8
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	330c      	adds	r3, #12
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	330d      	adds	r3, #13
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	3306      	adds	r3, #6
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	121a      	asrs	r2, r3, #8
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	330e      	adds	r3, #14
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	3306      	adds	r3, #6
 8001f0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	330f      	adds	r3, #15
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3310      	adds	r3, #16
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	881a      	ldrh	r2, [r3, #0]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3311      	adds	r3, #17
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3302      	adds	r3, #2
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3312      	adds	r3, #18
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3302      	adds	r3, #2
 8001f48:	881a      	ldrh	r2, [r3, #0]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3313      	adds	r3, #19
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3304      	adds	r3, #4
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3314      	adds	r3, #20
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3304      	adds	r3, #4
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3315      	adds	r3, #21
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3306      	adds	r3, #6
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	3316      	adds	r3, #22
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3306      	adds	r3, #6
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3317      	adds	r3, #23
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	330c      	adds	r3, #12
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	330c      	adds	r3, #12
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3319      	adds	r3, #25
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3306      	adds	r3, #6
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	331a      	adds	r3, #26
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3306      	adds	r3, #6
 8001fc8:	881a      	ldrh	r2, [r3, #0]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	331b      	adds	r3, #27
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	331c      	adds	r3, #28
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	331d      	adds	r3, #29
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	330e      	adds	r3, #14
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	331e      	adds	r3, #30
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	330e      	adds	r3, #14
 8002008:	881a      	ldrh	r2, [r3, #0]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	331f      	adds	r3, #31
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3310      	adds	r3, #16
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b29a      	uxth	r2, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	3320      	adds	r3, #32
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3310      	adds	r3, #16
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3321      	adds	r3, #33	; 0x21
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3308      	adds	r3, #8
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	b29a      	uxth	r2, r3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	3322      	adds	r3, #34	; 0x22
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3308      	adds	r3, #8
 8002048:	881a      	ldrh	r2, [r3, #0]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3323      	adds	r3, #35	; 0x23
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	330a      	adds	r3, #10
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b29a      	uxth	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3324      	adds	r3, #36	; 0x24
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	330a      	adds	r3, #10
 8002068:	881a      	ldrh	r2, [r3, #0]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3325      	adds	r3, #37	; 0x25
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3326      	adds	r3, #38	; 0x26
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3327      	adds	r3, #39	; 0x27
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	7852      	ldrb	r2, [r2, #1]
 8002084:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3328      	adds	r3, #40	; 0x28
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	7892      	ldrb	r2, [r2, #2]
 800208e:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3329      	adds	r3, #41	; 0x29
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	78d2      	ldrb	r2, [r2, #3]
 8002098:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	332a      	adds	r3, #42	; 0x2a
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	7912      	ldrb	r2, [r2, #4]
 80020a2:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	332b      	adds	r3, #43	; 0x2b
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	7952      	ldrb	r2, [r2, #5]
 80020ac:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	332c      	adds	r3, #44	; 0x2c
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	7992      	ldrb	r2, [r2, #6]
 80020b6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	332d      	adds	r3, #45	; 0x2d
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	79d2      	ldrb	r2, [r2, #7]
 80020c0:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	222e      	movs	r2, #46	; 0x2e
 80020c6:	69f9      	ldr	r1, [r7, #28]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fce7 	bl	8001a9c <create_packet>
 80020ce:	e001      	b.n	80020d4 <sample_hk+0x368>
 80020d0:	2400067c 	.word	0x2400067c
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <sample_hk+0x39c>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	1d39      	adds	r1, r7, #4
 80020da:	2300      	movs	r3, #0
 80020dc:	2200      	movs	r2, #0
 80020de:	f00f f80b 	bl	80110f8 <osMessageQueuePut>
	free(buffer);
 80020e2:	69f8      	ldr	r0, [r7, #28]
 80020e4:	f012 f92c 	bl	8014340 <free>
	free(hk_i2c);
 80020e8:	69b8      	ldr	r0, [r7, #24]
 80020ea:	f012 f929 	bl	8014340 <free>
	free(hk_adc1);
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f012 f926 	bl	8014340 <free>
	free(hk_adc3);
 80020f4:	6938      	ldr	r0, [r7, #16]
 80020f6:	f012 f923 	bl	8014340 <free>
	free(timestamp);
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f012 f920 	bl	8014340 <free>
}
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	24000674 	.word	0x24000674

0800210c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <PMT_init+0x38>)
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	f00e ff10 	bl	8010f44 <osEventFlagsWait>
		if(PMT_ON){
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <PMT_init+0x3c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <PMT_init+0x30>
	    sample_pmt();
 800212c:	f7ff fcd8 	bl	8001ae0 <sample_pmt>
		pmt_seq++;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <PMT_init+0x40>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <PMT_init+0x40>)
 800213a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 800213c:	f00e fe44 	bl	8010dc8 <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002140:	e7e8      	b.n	8002114 <PMT_init+0x8>
 8002142:	bf00      	nop
 8002144:	24000688 	.word	0x24000688
 8002148:	2400067e 	.word	0x2400067e
 800214c:	24000678 	.word	0x24000678

08002150 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <ERPA_init+0x38>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002160:	2200      	movs	r2, #0
 8002162:	2102      	movs	r1, #2
 8002164:	f00e feee 	bl	8010f44 <osEventFlagsWait>
	  if (ERPA_ON)
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <ERPA_init+0x3c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8002170:	f7ff fd42 	bl	8001bf8 <sample_erpa>
		erpa_seq++;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <ERPA_init+0x40>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <ERPA_init+0x40>)
 800217e:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8002180:	f00e fe22 	bl	8010dc8 <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002184:	e7e8      	b.n	8002158 <ERPA_init+0x8>
 8002186:	bf00      	nop
 8002188:	24000688 	.word	0x24000688
 800218c:	2400067f 	.word	0x2400067f
 8002190:	2400067a 	.word	0x2400067a

08002194 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HK_init+0x38>)
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a4:	2200      	movs	r2, #0
 80021a6:	2104      	movs	r1, #4
 80021a8:	f00e fecc 	bl	8010f44 <osEventFlagsWait>
	  if(HK_ON)
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HK_init+0x3c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HK_init+0x30>
	  {
	    sample_hk();
 80021b4:	f7ff fdda 	bl	8001d6c <sample_hk>
		hk_seq++;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HK_init+0x40>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <HK_init+0x40>)
 80021c2:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 80021c4:	f00e fe00 	bl	8010dc8 <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80021c8:	e7e8      	b.n	800219c <HK_init+0x8>
 80021ca:	bf00      	nop
 80021cc:	24000688 	.word	0x24000688
 80021d0:	24000680 	.word	0x24000680
 80021d4:	2400067c 	.word	0x2400067c

080021d8 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80021e0:	2201      	movs	r2, #1
 80021e2:	4904      	ldr	r1, [pc, #16]	; (80021f4 <UART_RX_init+0x1c>)
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <UART_RX_init+0x20>)
 80021e6:	f00c f97f 	bl	800e4e8 <HAL_UART_Receive_IT>
		osDelay(5);
 80021ea:	2005      	movs	r0, #5
 80021ec:	f00e fe0c 	bl	8010e08 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80021f0:	e7f6      	b.n	80021e0 <UART_RX_init+0x8>
 80021f2:	bf00      	nop
 80021f4:	2400068c 	.word	0x2400068c
 80021f8:	240005cc 	.word	0x240005cc

080021fc <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <UART_TX_init+0x50>)
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	f107 010c 	add.w	r1, r7, #12
 800220c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002210:	2200      	movs	r2, #0
 8002212:	f00e ffd1 	bl	80111b8 <osMessageQueueGet>
 8002216:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d113      	bne.n	8002246 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <UART_TX_init+0x50>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f00f f826 	bl	8011274 <osMessageQueueGetCount>
 8002228:	4603      	mov	r3, r0
 800222a:	4619      	mov	r1, r3
 800222c:	4808      	ldr	r0, [pc, #32]	; (8002250 <UART_TX_init+0x54>)
 800222e:	f012 f985 	bl	801453c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	8a3a      	ldrh	r2, [r7, #16]
 8002236:	2364      	movs	r3, #100	; 0x64
 8002238:	4806      	ldr	r0, [pc, #24]	; (8002254 <UART_TX_init+0x58>)
 800223a:	f00c f8c7 	bl	800e3cc <HAL_UART_Transmit>
	       free(msg.array);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4618      	mov	r0, r3
 8002242:	f012 f87d 	bl	8014340 <free>
	   }
	   osThreadYield();
 8002246:	f00e fdbf 	bl	8010dc8 <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 800224a:	e7db      	b.n	8002204 <UART_TX_init+0x8>
 800224c:	24000674 	.word	0x24000674
 8002250:	08015590 	.word	0x08015590
 8002254:	240005cc 	.word	0x240005cc

08002258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800226a:	f000 ff1f 	bl	80030ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40001000 	.word	0x40001000

0800227c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002280:	b672      	cpsid	i
}
 8002282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002284:	e7fe      	b.n	8002284 <Error_Handler+0x8>
	...

08002288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_MspInit+0x38>)
 8002290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <HAL_MspInit+0x38>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_MspInit+0x38>)
 80022a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	210f      	movs	r1, #15
 80022b0:	f06f 0001 	mvn.w	r0, #1
 80022b4:	f002 fc2c 	bl	8004b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	58024400 	.word	0x58024400

080022c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08e      	sub	sp, #56	; 0x38
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a7b      	ldr	r2, [pc, #492]	; (80024d0 <HAL_ADC_MspInit+0x20c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f040 8091 	bne.w	800240a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80022e8:	4b7a      	ldr	r3, [pc, #488]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 80022ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ee:	4a79      	ldr	r2, [pc, #484]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 80022f0:	f043 0320 	orr.w	r3, r3, #32
 80022f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022f8:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 80022fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	623b      	str	r3, [r7, #32]
 8002304:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230c:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b6b      	ldr	r3, [pc, #428]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232a:	4a6a      	ldr	r2, [pc, #424]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002334:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002342:	4b64      	ldr	r3, [pc, #400]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002348:	4a62      	ldr	r2, [pc, #392]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002352:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002360:	2333      	movs	r3, #51	; 0x33
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002364:	2303      	movs	r3, #3
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002370:	4619      	mov	r1, r3
 8002372:	4859      	ldr	r0, [pc, #356]	; (80024d8 <HAL_ADC_MspInit+0x214>)
 8002374:	f005 fe36 	bl	8007fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002378:	23ce      	movs	r3, #206	; 0xce
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237c:	2303      	movs	r3, #3
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002388:	4619      	mov	r1, r3
 800238a:	4854      	ldr	r0, [pc, #336]	; (80024dc <HAL_ADC_MspInit+0x218>)
 800238c:	f005 fe2a 	bl	8007fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002390:	2303      	movs	r3, #3
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002394:	2303      	movs	r3, #3
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a0:	4619      	mov	r1, r3
 80023a2:	484f      	ldr	r0, [pc, #316]	; (80024e0 <HAL_ADC_MspInit+0x21c>)
 80023a4:	f005 fe1e 	bl	8007fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80023a8:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023aa:	4a4f      	ldr	r2, [pc, #316]	; (80024e8 <HAL_ADC_MspInit+0x224>)
 80023ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023b0:	2209      	movs	r2, #9
 80023b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ba:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023c0:	4b48      	ldr	r3, [pc, #288]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023c8:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023d0:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023d8:	4b42      	ldr	r3, [pc, #264]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023e0:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023e6:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023ec:	483d      	ldr	r0, [pc, #244]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 80023ee:	f002 ffbd 	bl	800536c <HAL_DMA_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80023f8:	f7ff ff40 	bl	800227c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a39      	ldr	r2, [pc, #228]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 8002400:	64da      	str	r2, [r3, #76]	; 0x4c
 8002402:	4a38      	ldr	r2, [pc, #224]	; (80024e4 <HAL_ADC_MspInit+0x220>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002408:	e05e      	b.n	80024c8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a37      	ldr	r2, [pc, #220]	; (80024ec <HAL_ADC_MspInit+0x228>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d159      	bne.n	80024c8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241a:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800241c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002438:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_ADC_MspInit+0x210>)
 8002444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002450:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002454:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002458:	f000 fe78 	bl	800314c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800245c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002460:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002464:	f000 fe72 	bl	800314c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002468:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 800246a:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <HAL_ADC_MspInit+0x230>)
 800246c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 8002470:	2273      	movs	r2, #115	; 0x73
 8002472:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 8002482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002486:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 800248a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800248e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 8002492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002496:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 800249a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800249e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80024ac:	4810      	ldr	r0, [pc, #64]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024ae:	f002 ff5d 	bl	800536c <HAL_DMA_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 80024b8:	f7ff fee0 	bl	800227c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_ADC_MspInit+0x22c>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024c8:	bf00      	nop
 80024ca:	3738      	adds	r7, #56	; 0x38
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40022000 	.word	0x40022000
 80024d4:	58024400 	.word	0x58024400
 80024d8:	58020800 	.word	0x58020800
 80024dc:	58020000 	.word	0x58020000
 80024e0:	58020400 	.word	0x58020400
 80024e4:	240001e4 	.word	0x240001e4
 80024e8:	40020010 	.word	0x40020010
 80024ec:	58026000 	.word	0x58026000
 80024f0:	2400025c 	.word	0x2400025c
 80024f4:	40020028 	.word	0x40020028

080024f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_DAC_MspInit+0xf0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d161      	bne.n	80025de <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 800251c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002520:	4a32      	ldr	r2, [pc, #200]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 8002522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002526:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 800252c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 800253a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253e:	4a2b      	ldr	r2, [pc, #172]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002548:	4b28      	ldr	r3, [pc, #160]	; (80025ec <HAL_DAC_MspInit+0xf4>)
 800254a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002556:	2310      	movs	r3, #16
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255a:	2303      	movs	r3, #3
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4821      	ldr	r0, [pc, #132]	; (80025f0 <HAL_DAC_MspInit+0xf8>)
 800256a:	f005 fd3b 	bl	8007fe4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800256e:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <HAL_DAC_MspInit+0x100>)
 8002572:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002576:	2243      	movs	r2, #67	; 0x43
 8002578:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 800257c:	2240      	movs	r2, #64	; 0x40
 800257e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800258c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002594:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 8002598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800259c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80025b2:	4810      	ldr	r0, [pc, #64]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025b4:	f002 feda 	bl	800536c <HAL_DMA_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80025be:	f7ff fe5d 	bl	800227c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_DAC_MspInit+0xfc>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2105      	movs	r1, #5
 80025d2:	2036      	movs	r0, #54	; 0x36
 80025d4:	f002 fa9c 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025d8:	2036      	movs	r0, #54	; 0x36
 80025da:	f002 fab3 	bl	8004b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80025de:	bf00      	nop
 80025e0:	3728      	adds	r7, #40	; 0x28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40007400 	.word	0x40007400
 80025ec:	58024400 	.word	0x58024400
 80025f0:	58020000 	.word	0x58020000
 80025f4:	240002e8 	.word	0x240002e8
 80025f8:	40020088 	.word	0x40020088

080025fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b0ba      	sub	sp, #232	; 0xe8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	22c0      	movs	r2, #192	; 0xc0
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f011 fea5 	bl	801436c <memset>
  if(hi2c->Instance==I2C1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_I2C_MspInit+0xc8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d146      	bne.n	80026ba <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800262c:	f04f 0208 	mov.w	r2, #8
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263e:	f107 0310 	add.w	r3, r7, #16
 8002642:	4618      	mov	r0, r3
 8002644:	f007 f846 	bl	80096d4 <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800264e:	f7ff fe15 	bl	800227c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 8002654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002670:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002678:	2312      	movs	r3, #18
 800267a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800268a:	2304      	movs	r3, #4
 800268c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002690:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002694:	4619      	mov	r1, r3
 8002696:	480d      	ldr	r0, [pc, #52]	; (80026cc <HAL_I2C_MspInit+0xd0>)
 8002698:	f005 fca4 	bl	8007fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 800269e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a2:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 80026a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_I2C_MspInit+0xcc>)
 80026ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	37e8      	adds	r7, #232	; 0xe8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40005400 	.word	0x40005400
 80026c8:	58024400 	.word	0x58024400
 80026cc:	58020400 	.word	0x58020400

080026d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0b2      	sub	sp, #200	; 0xc8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	22c0      	movs	r2, #192	; 0xc0
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f011 fe43 	bl	801436c <memset>
  if(hrtc->Instance==RTC)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a10      	ldr	r2, [pc, #64]	; (800272c <HAL_RTC_MspInit+0x5c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d119      	bne.n	8002724 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002704:	f107 0308 	add.w	r3, r7, #8
 8002708:	4618      	mov	r0, r3
 800270a:	f006 ffe3 	bl	80096d4 <HAL_RCCEx_PeriphCLKConfig>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002714:	f7ff fdb2 	bl	800227c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RTC_MspInit+0x60>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_RTC_MspInit+0x60>)
 800271e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002724:	bf00      	nop
 8002726:	37c8      	adds	r7, #200	; 0xc8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	58004000 	.word	0x58004000
 8002730:	58024400 	.word	0x58024400

08002734 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0bc      	sub	sp, #240	; 0xf0
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 0318 	add.w	r3, r7, #24
 8002750:	22c0      	movs	r2, #192	; 0xc0
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f011 fe09 	bl	801436c <memset>
  if(hspi->Instance==SPI1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a4c      	ldr	r2, [pc, #304]	; (8002890 <HAL_SPI_MspInit+0x15c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d145      	bne.n	80027f0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002770:	2300      	movs	r3, #0
 8002772:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002774:	f107 0318 	add.w	r3, r7, #24
 8002778:	4618      	mov	r0, r3
 800277a:	f006 ffab 	bl	80096d4 <HAL_RCCEx_PeriphCLKConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002784:	f7ff fd7a 	bl	800227c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002788:	4b42      	ldr	r3, [pc, #264]	; (8002894 <HAL_SPI_MspInit+0x160>)
 800278a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800278e:	4a41      	ldr	r2, [pc, #260]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002794:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002798:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <HAL_SPI_MspInit+0x160>)
 800279a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800279e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_SPI_MspInit+0x160>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	4a39      	ldr	r2, [pc, #228]	; (8002894 <HAL_SPI_MspInit+0x160>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b6:	4b37      	ldr	r3, [pc, #220]	; (8002894 <HAL_SPI_MspInit+0x160>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80027c4:	2318      	movs	r3, #24
 80027c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027dc:	2305      	movs	r3, #5
 80027de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027e6:	4619      	mov	r1, r3
 80027e8:	482b      	ldr	r0, [pc, #172]	; (8002898 <HAL_SPI_MspInit+0x164>)
 80027ea:	f005 fbfb 	bl	8007fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027ee:	e04a      	b.n	8002886 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_SPI_MspInit+0x168>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d145      	bne.n	8002886 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80027fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002806:	2300      	movs	r3, #0
 8002808:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280a:	f107 0318 	add.w	r3, r7, #24
 800280e:	4618      	mov	r0, r3
 8002810:	f006 ff60 	bl	80096d4 <HAL_RCCEx_PeriphCLKConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800281a:	f7ff fd2f 	bl	800227c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002824:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800282a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_SPI_MspInit+0x160>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_SPI_MspInit+0x160>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_SPI_MspInit+0x160>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800285a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800285e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002874:	2305      	movs	r3, #5
 8002876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800287e:	4619      	mov	r1, r3
 8002880:	4805      	ldr	r0, [pc, #20]	; (8002898 <HAL_SPI_MspInit+0x164>)
 8002882:	f005 fbaf 	bl	8007fe4 <HAL_GPIO_Init>
}
 8002886:	bf00      	nop
 8002888:	37f0      	adds	r7, #240	; 0xf0
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40013000 	.word	0x40013000
 8002894:	58024400 	.word	0x58024400
 8002898:	58020400 	.word	0x58020400
 800289c:	40003800 	.word	0x40003800

080028a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a37      	ldr	r2, [pc, #220]	; (800298c <HAL_TIM_Base_MspInit+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d12f      	bne.n	8002912 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 80028b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028b8:	4a35      	ldr	r2, [pc, #212]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 80028c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2105      	movs	r1, #5
 80028d4:	2018      	movs	r0, #24
 80028d6:	f002 f91b 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80028da:	2018      	movs	r0, #24
 80028dc:	f002 f932 	bl	8004b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2105      	movs	r1, #5
 80028e4:	2019      	movs	r0, #25
 80028e6:	f002 f913 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80028ea:	2019      	movs	r0, #25
 80028ec:	f002 f92a 	bl	8004b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2105      	movs	r1, #5
 80028f4:	201a      	movs	r0, #26
 80028f6:	f002 f90b 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80028fa:	201a      	movs	r0, #26
 80028fc:	f002 f922 	bl	8004b44 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2105      	movs	r1, #5
 8002904:	201b      	movs	r0, #27
 8002906:	f002 f903 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800290a:	201b      	movs	r0, #27
 800290c:	f002 f91a 	bl	8004b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002910:	e038      	b.n	8002984 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d117      	bne.n	800294c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 800291e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002922:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 800292e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2105      	movs	r1, #5
 800293e:	201c      	movs	r0, #28
 8002940:	f002 f8e6 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002944:	201c      	movs	r0, #28
 8002946:	f002 f8fd 	bl	8004b44 <HAL_NVIC_EnableIRQ>
}
 800294a:	e01b      	b.n	8002984 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_TIM_Base_MspInit+0xf4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d116      	bne.n	8002984 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 8002958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_TIM_Base_MspInit+0xf0>)
 8002968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002974:	2200      	movs	r2, #0
 8002976:	2105      	movs	r1, #5
 8002978:	201d      	movs	r0, #29
 800297a:	f002 f8c9 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800297e:	201d      	movs	r0, #29
 8002980:	f002 f8e0 	bl	8004b44 <HAL_NVIC_EnableIRQ>
}
 8002984:	bf00      	nop
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40010000 	.word	0x40010000
 8002990:	58024400 	.word	0x58024400
 8002994:	40000400 	.word	0x40000400

08002998 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <HAL_TIM_MspPostInit+0xb8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d120      	bne.n	80029fc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 80029bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c0:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 80029cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	4818      	ldr	r0, [pc, #96]	; (8002a58 <HAL_TIM_MspPostInit+0xc0>)
 80029f6:	f005 faf5 	bl	8007fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029fa:	e024      	b.n	8002a46 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d11f      	bne.n	8002a46 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_TIM_MspPostInit+0xbc>)
 8002a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4806      	ldr	r0, [pc, #24]	; (8002a5c <HAL_TIM_MspPostInit+0xc4>)
 8002a42:	f005 facf 	bl	8007fe4 <HAL_GPIO_Init>
}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	58024400 	.word	0x58024400
 8002a58:	58020000 	.word	0x58020000
 8002a5c:	58020400 	.word	0x58020400

08002a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0ba      	sub	sp, #232	; 0xe8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	22c0      	movs	r2, #192	; 0xc0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f011 fc73 	bl	801436c <memset>
  if(huart->Instance==USART1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <HAL_UART_MspInit+0xd8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d14e      	bne.n	8002b2e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a90:	f04f 0201 	mov.w	r2, #1
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa2:	f107 0310 	add.w	r3, r7, #16
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f006 fe14 	bl	80096d4 <HAL_RCCEx_PeriphCLKConfig>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002ab2:	f7ff fbe3 	bl	800227c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002abc:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_UART_MspInit+0xdc>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002af2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b0c:	2307      	movs	r3, #7
 8002b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b16:	4619      	mov	r1, r3
 8002b18:	4809      	ldr	r0, [pc, #36]	; (8002b40 <HAL_UART_MspInit+0xe0>)
 8002b1a:	f005 fa63 	bl	8007fe4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2105      	movs	r1, #5
 8002b22:	2025      	movs	r0, #37	; 0x25
 8002b24:	f001 fff4 	bl	8004b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b28:	2025      	movs	r0, #37	; 0x25
 8002b2a:	f002 f80b 	bl	8004b44 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b2e:	bf00      	nop
 8002b30:	37e8      	adds	r7, #232	; 0xe8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	58020000 	.word	0x58020000

08002b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b090      	sub	sp, #64	; 0x40
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	d827      	bhi.n	8002ba2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002b52:	2200      	movs	r2, #0
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	2036      	movs	r0, #54	; 0x36
 8002b58:	f001 ffda 	bl	8004b10 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b5c:	2036      	movs	r0, #54	; 0x36
 8002b5e:	f001 fff1 	bl	8004b44 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002b62:	4a29      	ldr	r2, [pc, #164]	; (8002c08 <HAL_InitTick+0xc4>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b68:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_InitTick+0xc8>)
 8002b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b6e:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <HAL_InitTick+0xc8>)
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_InitTick+0xc8>)
 8002b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b86:	f107 0210 	add.w	r2, r7, #16
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f006 fd5d 	bl	8009650 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_InitTick+0x6a>
 8002ba0:	e001      	b.n	8002ba6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e02b      	b.n	8002bfe <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ba6:	f006 fd27 	bl	80095f8 <HAL_RCC_GetPCLK1Freq>
 8002baa:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002bac:	e004      	b.n	8002bb8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bae:	f006 fd23 	bl	80095f8 <HAL_RCC_GetPCLK1Freq>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <HAL_InitTick+0xcc>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	0c9b      	lsrs	r3, r3, #18
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bc8:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_InitTick+0xd4>)
 8002bca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_InitTick+0xd0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002be6:	480b      	ldr	r0, [pc, #44]	; (8002c14 <HAL_InitTick+0xd0>)
 8002be8:	f009 fed3 	bl	800c992 <HAL_TIM_Base_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002bf2:	4808      	ldr	r0, [pc, #32]	; (8002c14 <HAL_InitTick+0xd0>)
 8002bf4:	f009 ffbc 	bl	800cb70 <HAL_TIM_Base_Start_IT>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	e000      	b.n	8002bfe <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3740      	adds	r7, #64	; 0x40
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24000090 	.word	0x24000090
 8002c0c:	58024400 	.word	0x58024400
 8002c10:	431bde83 	.word	0x431bde83
 8002c14:	24000728 	.word	0x24000728
 8002c18:	40001000 	.word	0x40001000

08002c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002c20:	e7fe      	b.n	8002c20 <NMI_Handler+0x4>

08002c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <HardFault_Handler+0x4>

08002c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <MemManage_Handler+0x4>

08002c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <DMA1_Stream0_IRQHandler+0x10>)
 8002c4e:	f003 feb7 	bl	80069c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	240001e4 	.word	0x240001e4

08002c5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <DMA1_Stream1_IRQHandler+0x10>)
 8002c62:	f003 fead 	bl	80069c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2400025c 	.word	0x2400025c

08002c70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <DMA1_Stream5_IRQHandler+0x10>)
 8002c76:	f003 fea3 	bl	80069c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	240002e8 	.word	0x240002e8

08002c84 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <TIM1_BRK_IRQHandler+0x10>)
 8002c8a:	f00a fab3 	bl	800d1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	240004e8 	.word	0x240004e8

08002c98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <TIM1_UP_IRQHandler+0x10>)
 8002c9e:	f00a faa9 	bl	800d1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	240004e8 	.word	0x240004e8

08002cac <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <TIM1_TRG_COM_IRQHandler+0x10>)
 8002cb2:	f00a fa9f 	bl	800d1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	240004e8 	.word	0x240004e8

08002cc0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <TIM1_CC_IRQHandler+0x10>)
 8002cc6:	f00a fa95 	bl	800d1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	240004e8 	.word	0x240004e8

08002cd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <TIM2_IRQHandler+0x10>)
 8002cda:	f00a fa8b 	bl	800d1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	24000534 	.word	0x24000534

08002ce8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM3_IRQHandler+0x10>)
 8002cee:	f00a fa81 	bl	800d1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	24000580 	.word	0x24000580

08002cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <USART1_IRQHandler+0x10>)
 8002d02:	f00b fc3d 	bl	800e580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	240005cc 	.word	0x240005cc

08002d10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <TIM6_DAC_IRQHandler+0x20>)
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002d1e:	4804      	ldr	r0, [pc, #16]	; (8002d30 <TIM6_DAC_IRQHandler+0x20>)
 8002d20:	f002 f8a5 	bl	8004e6e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002d24:	4803      	ldr	r0, [pc, #12]	; (8002d34 <TIM6_DAC_IRQHandler+0x24>)
 8002d26:	f00a fa65 	bl	800d1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	240002d4 	.word	0x240002d4
 8002d34:	24000728 	.word	0x24000728

08002d38 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <ITM_SendChar+0x48>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <ITM_SendChar+0x48>)
 8002d48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d4c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <ITM_SendChar+0x4c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <ITM_SendChar+0x4c>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002d5a:	bf00      	nop
 8002d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f8      	beq.n	8002d5c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002d6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	6013      	str	r3, [r2, #0]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000edfc 	.word	0xe000edfc
 8002d84:	e0000e00 	.word	0xe0000e00

08002d88 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e00a      	b.n	8002db0 <_read+0x28>
		*ptr++ = __io_getchar();
 8002d9a:	f3af 8000 	nop.w
 8002d9e:	4601      	mov	r1, r0
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	60ba      	str	r2, [r7, #8]
 8002da6:	b2ca      	uxtb	r2, r1
 8002da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	3301      	adds	r3, #1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	dbf0      	blt.n	8002d9a <_read+0x12>
	}

	return len;
 8002db8:	687b      	ldr	r3, [r7, #4]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e009      	b.n	8002de8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	60ba      	str	r2, [r7, #8]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ffab 	bl	8002d38 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	dbf1      	blt.n	8002dd4 <_write+0x12>
	}
	return len;
 8002df0:	687b      	ldr	r3, [r7, #4]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <_close>:

int _close(int file) {
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e22:	605a      	str	r2, [r3, #4]
	return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <_isatty>:

int _isatty(int file) {
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <_sbrk+0x64>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <_sbrk+0x64>)
 8002e82:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <_sbrk+0x68>)
 8002e84:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <_sbrk+0x64>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d207      	bcs.n	8002ea4 <_sbrk+0x40>
		errno = ENOMEM;
 8002e94:	f011 fa22 	bl	80142dc <__errno>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea2:	e009      	b.n	8002eb8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <_sbrk+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <_sbrk+0x64>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <_sbrk+0x64>)
 8002eb4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	24080000 	.word	0x24080000
 8002ec4:	00000400 	.word	0x00000400
 8002ec8:	24000774 	.word	0x24000774
 8002ecc:	240050e0 	.word	0x240050e0

08002ed0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <SystemInit+0xe4>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	4a36      	ldr	r2, [pc, #216]	; (8002fb4 <SystemInit+0xe4>)
 8002edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <SystemInit+0xe8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	2b06      	cmp	r3, #6
 8002eee:	d807      	bhi.n	8002f00 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002ef0:	4b31      	ldr	r3, [pc, #196]	; (8002fb8 <SystemInit+0xe8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 030f 	bic.w	r3, r3, #15
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <SystemInit+0xe8>)
 8002efa:	f043 0307 	orr.w	r3, r3, #7
 8002efe:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002f00:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <SystemInit+0xec>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <SystemInit+0xec>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <SystemInit+0xec>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <SystemInit+0xec>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4929      	ldr	r1, [pc, #164]	; (8002fbc <SystemInit+0xec>)
 8002f18:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <SystemInit+0xf0>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <SystemInit+0xe8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <SystemInit+0xe8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 030f 	bic.w	r3, r3, #15
 8002f32:	4a21      	ldr	r2, [pc, #132]	; (8002fb8 <SystemInit+0xe8>)
 8002f34:	f043 0307 	orr.w	r3, r3, #7
 8002f38:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <SystemInit+0xec>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002f40:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <SystemInit+0xec>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <SystemInit+0xec>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002f4c:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <SystemInit+0xec>)
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <SystemInit+0xf4>)
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <SystemInit+0xec>)
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <SystemInit+0xf8>)
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002f58:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <SystemInit+0xec>)
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <SystemInit+0xfc>)
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <SystemInit+0xec>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <SystemInit+0xec>)
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <SystemInit+0xfc>)
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <SystemInit+0xec>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <SystemInit+0xec>)
 8002f72:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <SystemInit+0xfc>)
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <SystemInit+0xec>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <SystemInit+0xec>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <SystemInit+0xec>)
 8002f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f86:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <SystemInit+0xec>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <SystemInit+0x100>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <SystemInit+0x104>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9a:	d202      	bcs.n	8002fa2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <SystemInit+0x108>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <SystemInit+0x10c>)
 8002fa4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002fa8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00
 8002fb8:	52002000 	.word	0x52002000
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fc4:	02020200 	.word	0x02020200
 8002fc8:	01ff0000 	.word	0x01ff0000
 8002fcc:	01010280 	.word	0x01010280
 8002fd0:	5c001000 	.word	0x5c001000
 8002fd4:	ffff0000 	.word	0xffff0000
 8002fd8:	51008108 	.word	0x51008108
 8002fdc:	52004000 	.word	0x52004000

08002fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fe4:	f7ff ff74 	bl	8002ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fea:	490d      	ldr	r1, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003000:	4c0a      	ldr	r4, [pc, #40]	; (800302c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300e:	f011 f96b 	bl	80142e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003012:	f7fd fda1 	bl	8000b58 <main>
  bx  lr
 8003016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003018:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800301c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003020:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8003024:	0801575c 	.word	0x0801575c
  ldr r2, =_sbss
 8003028:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800302c:	240050dc 	.word	0x240050dc

08003030 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003030:	e7fe      	b.n	8003030 <ADC3_IRQHandler>
	...

08003034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303a:	2003      	movs	r0, #3
 800303c:	f001 fd5d 	bl	8004afa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003040:	f006 f930 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_Init+0x68>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	4913      	ldr	r1, [pc, #76]	; (80030a0 <HAL_Init+0x6c>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_Init+0x68>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <HAL_Init+0x6c>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <HAL_Init+0x70>)
 8003076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_Init+0x74>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307e:	2005      	movs	r0, #5
 8003080:	f7ff fd60 	bl	8002b44 <HAL_InitTick>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e002      	b.n	8003094 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800308e:	f7ff f8fb 	bl	8002288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58024400 	.word	0x58024400
 80030a0:	08015674 	.word	0x08015674
 80030a4:	2400008c 	.word	0x2400008c
 80030a8:	24000088 	.word	0x24000088

080030ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_IncTick+0x20>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_IncTick+0x24>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_IncTick+0x24>)
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	24000094 	.word	0x24000094
 80030d0:	24000778 	.word	0x24000778

080030d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return uwTick;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_GetTick+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	24000778 	.word	0x24000778

080030ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff ffee 	bl	80030d4 <HAL_GetTick>
 80030f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003104:	d005      	beq.n	8003112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <HAL_Delay+0x44>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003112:	bf00      	nop
 8003114:	f7ff ffde 	bl	80030d4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	429a      	cmp	r2, r3
 8003122:	d8f7      	bhi.n	8003114 <HAL_Delay+0x28>
  {
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	24000094 	.word	0x24000094

08003134 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_GetREVID+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0c1b      	lsrs	r3, r3, #16
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	5c001000 	.word	0x5c001000

0800314c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003156:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	4904      	ldr	r1, [pc, #16]	; (8003174 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	58000400 	.word	0x58000400

08003178 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	609a      	str	r2, [r3, #8]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3360      	adds	r3, #96	; 0x60
 80031f2:	461a      	mov	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	431a      	orrs	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	611a      	str	r2, [r3, #16]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003252:	b480      	push	{r7}
 8003254:	b087      	sub	sp, #28
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3360      	adds	r3, #96	; 0x60
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	431a      	orrs	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	601a      	str	r2, [r3, #0]
  }
}
 800327c:	bf00      	nop
 800327e:	371c      	adds	r7, #28
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3330      	adds	r3, #48	; 0x30
 80032be:	461a      	mov	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	4413      	add	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	211f      	movs	r1, #31
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	401a      	ands	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0e9b      	lsrs	r3, r3, #26
 80032e6:	f003 011f 	and.w	r1, r3, #31
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f023 0203 	bic.w	r2, r3, #3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3314      	adds	r3, #20
 800333c:	461a      	mov	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	0e5b      	lsrs	r3, r3, #25
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	4413      	add	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0d1b      	lsrs	r3, r3, #20
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2107      	movs	r1, #7
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	401a      	ands	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	0d1b      	lsrs	r3, r3, #20
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	431a      	orrs	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800339c:	43db      	mvns	r3, r3
 800339e:	401a      	ands	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0318 	and.w	r3, r3, #24
 80033a6:	4908      	ldr	r1, [pc, #32]	; (80033c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033a8:	40d9      	lsrs	r1, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	400b      	ands	r3, r1
 80033ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	000fffff 	.word	0x000fffff

080033cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 031f 	and.w	r3, r3, #31
}
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <LL_ADC_DisableDeepPowerDown+0x20>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6093      	str	r3, [r2, #8]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	5fffffc0 	.word	0x5fffffc0

0800340c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800341c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003420:	d101      	bne.n	8003426 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <LL_ADC_EnableInternalRegulator+0x24>)
 8003442:	4013      	ands	r3, r2
 8003444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	6fffffc0 	.word	0x6fffffc0

0800345c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003470:	d101      	bne.n	8003476 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <LL_ADC_Enable+0x24>)
 8003492:	4013      	ands	r3, r2
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	7fffffc0 	.word	0x7fffffc0

080034ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <LL_ADC_Disable+0x24>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	f043 0202 	orr.w	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	7fffffc0 	.word	0x7fffffc0

080034d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <LL_ADC_IsEnabled+0x18>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <LL_ADC_IsEnabled+0x1a>
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d101      	bne.n	8003512 <LL_ADC_IsDisableOngoing+0x18>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <LL_ADC_IsDisableOngoing+0x1a>
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <LL_ADC_REG_StartConversion+0x24>)
 800352e:	4013      	ands	r3, r2
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	7fffffc0 	.word	0x7fffffc0

08003548 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d101      	bne.n	8003560 <LL_ADC_REG_IsConversionOngoing+0x18>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b08      	cmp	r3, #8
 8003580:	d101      	bne.n	8003586 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b089      	sub	sp, #36	; 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e18f      	b.n	80038ce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7fe fe81 	bl	80022c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff19 	bl	800340c <LL_ADC_IsDeepPowerDownEnabled>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d004      	beq.n	80035ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff feff 	bl	80033e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff ff34 	bl	800345c <LL_ADC_IsInternalRegulatorEnabled>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d114      	bne.n	8003624 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff18 	bl	8003434 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003604:	4b87      	ldr	r3, [pc, #540]	; (8003824 <HAL_ADC_Init+0x290>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	4a87      	ldr	r2, [pc, #540]	; (8003828 <HAL_ADC_Init+0x294>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	3301      	adds	r3, #1
 8003614:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003616:	e002      	b.n	800361e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	3b01      	subs	r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f9      	bne.n	8003618 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff17 	bl	800345c <LL_ADC_IsInternalRegulatorEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0210 	orr.w	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff77 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 800365a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b00      	cmp	r3, #0
 8003666:	f040 8129 	bne.w	80038bc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f040 8125 	bne.w	80038bc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff24 	bl	80034d4 <LL_ADC_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d136      	bne.n	8003700 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a65      	ldr	r2, [pc, #404]	; (800382c <HAL_ADC_Init+0x298>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_ADC_Init+0x112>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a63      	ldr	r2, [pc, #396]	; (8003830 <HAL_ADC_Init+0x29c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10e      	bne.n	80036c4 <HAL_ADC_Init+0x130>
 80036a6:	4861      	ldr	r0, [pc, #388]	; (800382c <HAL_ADC_Init+0x298>)
 80036a8:	f7ff ff14 	bl	80034d4 <LL_ADC_IsEnabled>
 80036ac:	4604      	mov	r4, r0
 80036ae:	4860      	ldr	r0, [pc, #384]	; (8003830 <HAL_ADC_Init+0x29c>)
 80036b0:	f7ff ff10 	bl	80034d4 <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4323      	orrs	r3, r4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e008      	b.n	80036d6 <HAL_ADC_Init+0x142>
 80036c4:	485b      	ldr	r0, [pc, #364]	; (8003834 <HAL_ADC_Init+0x2a0>)
 80036c6:	f7ff ff05 	bl	80034d4 <LL_ADC_IsEnabled>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a53      	ldr	r2, [pc, #332]	; (800382c <HAL_ADC_Init+0x298>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_ADC_Init+0x15a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_ADC_Init+0x29c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_Init+0x15e>
 80036ee:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_ADC_Init+0x2a4>)
 80036f0:	e000      	b.n	80036f4 <HAL_ADC_Init+0x160>
 80036f2:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_ADC_Init+0x2a8>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f7ff fd3c 	bl	8003178 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003700:	f7ff fd18 	bl	8003134 <HAL_GetREVID>
 8003704:	4603      	mov	r3, r0
 8003706:	f241 0203 	movw	r2, #4099	; 0x1003
 800370a:	4293      	cmp	r3, r2
 800370c:	d914      	bls.n	8003738 <HAL_ADC_Init+0x1a4>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d110      	bne.n	8003738 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7d5b      	ldrb	r3, [r3, #21]
 800371a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003720:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003726:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	7f1b      	ldrb	r3, [r3, #28]
 800372c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800372e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003730:	f043 030c 	orr.w	r3, r3, #12
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e00d      	b.n	8003754 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	7d5b      	ldrb	r3, [r3, #21]
 800373c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003742:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003748:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7f1b      	ldrb	r3, [r3, #28]
 800374e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7f1b      	ldrb	r3, [r3, #28]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d106      	bne.n	800376a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	3b01      	subs	r3, #1
 8003762:	045b      	lsls	r3, r3, #17
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_ADC_Init+0x2ac>)
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	69b9      	ldr	r1, [r7, #24]
 8003796:	430b      	orrs	r3, r1
 8003798:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fed2 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 80037a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fedf 	bl	800356e <LL_ADC_INJ_IsConversionOngoing>
 80037b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d15f      	bne.n	8003878 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d15c      	bne.n	8003878 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7d1b      	ldrb	r3, [r3, #20]
 80037c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <HAL_ADC_Init+0x2b0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	69b9      	ldr	r1, [r7, #24]
 80037dc:	430b      	orrs	r3, r1
 80037de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d130      	bne.n	800384c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	4b14      	ldr	r3, [pc, #80]	; (8003848 <HAL_ADC_Init+0x2b4>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037fe:	3a01      	subs	r2, #1
 8003800:	0411      	lsls	r1, r2, #16
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003812:	430a      	orrs	r2, r1
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	611a      	str	r2, [r3, #16]
 8003820:	e01c      	b.n	800385c <HAL_ADC_Init+0x2c8>
 8003822:	bf00      	nop
 8003824:	24000088 	.word	0x24000088
 8003828:	053e2d63 	.word	0x053e2d63
 800382c:	40022000 	.word	0x40022000
 8003830:	40022100 	.word	0x40022100
 8003834:	58026000 	.word	0x58026000
 8003838:	40022300 	.word	0x40022300
 800383c:	58026300 	.word	0x58026300
 8003840:	fff0c003 	.word	0xfff0c003
 8003844:	ffffbffc 	.word	0xffffbffc
 8003848:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fdec 	bl	8004450 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10c      	bne.n	800389a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f023 010f 	bic.w	r1, r3, #15
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	1e5a      	subs	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
 8003898:	e007      	b.n	80038aa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 020f 	bic.w	r2, r2, #15
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f023 0303 	bic.w	r3, r3, #3
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
 80038ba:	e007      	b.n	80038cc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 0210 	orr.w	r2, r3, #16
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	; 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}
 80038d6:	bf00      	nop

080038d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a55      	ldr	r2, [pc, #340]	; (8003a40 <HAL_ADC_Start_DMA+0x168>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_ADC_Start_DMA+0x20>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a54      	ldr	r2, [pc, #336]	; (8003a44 <HAL_ADC_Start_DMA+0x16c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_ADC_Start_DMA+0x24>
 80038f8:	4b53      	ldr	r3, [pc, #332]	; (8003a48 <HAL_ADC_Start_DMA+0x170>)
 80038fa:	e000      	b.n	80038fe <HAL_ADC_Start_DMA+0x26>
 80038fc:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <HAL_ADC_Start_DMA+0x174>)
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fd64 	bl	80033cc <LL_ADC_GetMultimode>
 8003904:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fe1c 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 808c 	bne.w	8003a30 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_ADC_Start_DMA+0x4e>
 8003922:	2302      	movs	r3, #2
 8003924:	e087      	b.n	8003a36 <HAL_ADC_Start_DMA+0x15e>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2b05      	cmp	r3, #5
 8003938:	d002      	beq.n	8003940 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b09      	cmp	r3, #9
 800393e:	d170      	bne.n	8003a22 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fc07 	bl	8004154 <ADC_Enable>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d163      	bne.n	8003a18 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003954:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <HAL_ADC_Start_DMA+0x178>)
 8003956:	4013      	ands	r3, r2
 8003958:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a37      	ldr	r2, [pc, #220]	; (8003a44 <HAL_ADC_Start_DMA+0x16c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d002      	beq.n	8003970 <HAL_ADC_Start_DMA+0x98>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	e000      	b.n	8003972 <HAL_ADC_Start_DMA+0x9a>
 8003970:	4b33      	ldr	r3, [pc, #204]	; (8003a40 <HAL_ADC_Start_DMA+0x168>)
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	4293      	cmp	r3, r2
 8003978:	d002      	beq.n	8003980 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d006      	beq.n	80039a6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	f023 0206 	bic.w	r2, r3, #6
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	659a      	str	r2, [r3, #88]	; 0x58
 80039a4:	e002      	b.n	80039ac <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_ADC_Start_DMA+0x17c>)
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <HAL_ADC_Start_DMA+0x180>)
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c0:	4a26      	ldr	r2, [pc, #152]	; (8003a5c <HAL_ADC_Start_DMA+0x184>)
 80039c2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	221c      	movs	r2, #28
 80039ca:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0210 	orr.w	r2, r2, #16
 80039e2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f7ff fc89 	bl	8003306 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3340      	adds	r3, #64	; 0x40
 80039fe:	4619      	mov	r1, r3
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f002 f80e 	bl	8005a24 <HAL_DMA_Start_IT>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fd85 	bl	8003520 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a16:	e00d      	b.n	8003a34 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003a20:	e008      	b.n	8003a34 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003a2e:	e001      	b.n	8003a34 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
 8003a32:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40022100 	.word	0x40022100
 8003a48:	40022300 	.word	0x40022300
 8003a4c:	58026300 	.word	0x58026300
 8003a50:	fffff0fe 	.word	0xfffff0fe
 8003a54:	08004327 	.word	0x08004327
 8003a58:	080043ff 	.word	0x080043ff
 8003a5c:	0800441b 	.word	0x0800441b

08003a60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a9c:	b590      	push	{r4, r7, lr}
 8003a9e:	b0a1      	sub	sp, #132	; 0x84
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a65      	ldr	r2, [pc, #404]	; (8003c4c <HAL_ADC_ConfigChannel+0x1b0>)
 8003ab6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x2a>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e32e      	b.n	8004124 <HAL_ADC_ConfigChannel+0x688>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fd38 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 8313 	bne.w	8004106 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	db2c      	blt.n	8003b42 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d108      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x6a>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0e9b      	lsrs	r3, r3, #26
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2201      	movs	r2, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	e016      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x98>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b0e:	fa93 f3a3 	rbit	r3, r3
 8003b12:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e003      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b24:	fab3 f383 	clz	r3, r3
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2201      	movs	r2, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	69d1      	ldr	r1, [r2, #28]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f7ff fbad 	bl	80032ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fcf5 	bl	8003548 <LL_ADC_REG_IsConversionOngoing>
 8003b5e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fd02 	bl	800356e <LL_ADC_INJ_IsConversionOngoing>
 8003b6a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f040 80b8 	bne.w	8003ce4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 80b4 	bne.w	8003ce4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f7ff fbcf 	bl	800332c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b8e:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <HAL_ADC_ConfigChannel+0x1b4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x118>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	e01d      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x154>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x13e>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	e00a      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x154>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d02c      	beq.n	8003c54 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6919      	ldr	r1, [r3, #16]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c08:	f7ff faea 	bl	80031e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6919      	ldr	r1, [r3, #16]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	7e5b      	ldrb	r3, [r3, #25]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d102      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x186>
 8003c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c20:	e000      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x188>
 8003c22:	2300      	movs	r3, #0
 8003c24:	461a      	mov	r2, r3
 8003c26:	f7ff fb14 	bl	8003252 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6919      	ldr	r1, [r3, #16]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	7e1b      	ldrb	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d102      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1a4>
 8003c3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c3e:	e000      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x1a6>
 8003c40:	2300      	movs	r3, #0
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7ff faec 	bl	8003220 <LL_ADC_SetDataRightShift>
 8003c48:	e04c      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x248>
 8003c4a:	bf00      	nop
 8003c4c:	47ff0000 	.word	0x47ff0000
 8003c50:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	069b      	lsls	r3, r3, #26
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d107      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	069b      	lsls	r3, r3, #26
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c9a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ca2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	069b      	lsls	r3, r3, #26
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d107      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cbe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	069b      	lsls	r3, r3, #26
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d107      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ce2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fbf3 	bl	80034d4 <LL_ADC_IsEnabled>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 8211 	bne.w	8004118 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7ff fb3e 	bl	8003384 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4aa1      	ldr	r2, [pc, #644]	; (8003f94 <HAL_ADC_ConfigChannel+0x4f8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	f040 812e 	bne.w	8003f70 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x2a0>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	bf94      	ite	ls
 8003d34:	2301      	movls	r3, #1
 8003d36:	2300      	movhi	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e019      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x2d4>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003d54:	2320      	movs	r3, #32
 8003d56:	e003      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	3301      	adds	r3, #1
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2b09      	cmp	r3, #9
 8003d68:	bf94      	ite	ls
 8003d6a:	2301      	movls	r3, #1
 8003d6c:	2300      	movhi	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d079      	beq.n	8003e68 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d107      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x2f4>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0e9b      	lsrs	r3, r3, #26
 8003d86:	3301      	adds	r3, #1
 8003d88:	069b      	lsls	r3, r3, #26
 8003d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d8e:	e015      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x320>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d98:	fa93 f3a3 	rbit	r3, r3
 8003d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003da8:	2320      	movs	r3, #32
 8003daa:	e003      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	3301      	adds	r3, #1
 8003db6:	069b      	lsls	r3, r3, #26
 8003db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x340>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	e017      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x370>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003df4:	2320      	movs	r3, #32
 8003df6:	e003      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2101      	movs	r1, #1
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	ea42 0103 	orr.w	r1, r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x396>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0e9b      	lsrs	r3, r3, #26
 8003e22:	3301      	adds	r3, #1
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	051b      	lsls	r3, r3, #20
 8003e30:	e018      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x3c8>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	e003      	b.n	8003e56 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	3301      	adds	r3, #1
 8003e58:	f003 021f 	and.w	r2, r3, #31
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e64:	430b      	orrs	r3, r1
 8003e66:	e07e      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x3e8>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	069b      	lsls	r3, r3, #26
 8003e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e82:	e015      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x414>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003e9c:	2320      	movs	r3, #32
 8003e9e:	e003      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	069b      	lsls	r3, r3, #26
 8003eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x434>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	0e9b      	lsrs	r3, r3, #26
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2101      	movs	r1, #1
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	e017      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x464>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	61bb      	str	r3, [r7, #24]
  return result;
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003ee8:	2320      	movs	r3, #32
 8003eea:	e003      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	2101      	movs	r1, #1
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	ea42 0103 	orr.w	r1, r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10d      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x490>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	3301      	adds	r3, #1
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	3b1e      	subs	r3, #30
 8003f24:	051b      	lsls	r3, r3, #20
 8003f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	e01b      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x4c8>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	fa93 f3a3 	rbit	r3, r3
 8003f38:	60fb      	str	r3, [r7, #12]
  return result;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003f44:	2320      	movs	r3, #32
 8003f46:	e003      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f003 021f 	and.w	r2, r3, #31
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3b1e      	subs	r3, #30
 8003f5e:	051b      	lsls	r3, r3, #20
 8003f60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f64:	430b      	orrs	r3, r1
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	6892      	ldr	r2, [r2, #8]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f7ff f9de 	bl	800332c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f280 80cf 	bge.w	8004118 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a06      	ldr	r2, [pc, #24]	; (8003f98 <HAL_ADC_ConfigChannel+0x4fc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_ADC_ConfigChannel+0x4f2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <HAL_ADC_ConfigChannel+0x500>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x508>
 8003f8e:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_ADC_ConfigChannel+0x504>)
 8003f90:	e009      	b.n	8003fa6 <HAL_ADC_ConfigChannel+0x50a>
 8003f92:	bf00      	nop
 8003f94:	47ff0000 	.word	0x47ff0000
 8003f98:	40022000 	.word	0x40022000
 8003f9c:	40022100 	.word	0x40022100
 8003fa0:	40022300 	.word	0x40022300
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_ADC_ConfigChannel+0x690>)
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f90c 	bl	80031c4 <LL_ADC_GetCommonPathInternalCh>
 8003fac:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a5f      	ldr	r2, [pc, #380]	; (8004130 <HAL_ADC_ConfigChannel+0x694>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_ADC_ConfigChannel+0x526>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5d      	ldr	r2, [pc, #372]	; (8004134 <HAL_ADC_ConfigChannel+0x698>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10e      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x544>
 8003fc2:	485b      	ldr	r0, [pc, #364]	; (8004130 <HAL_ADC_ConfigChannel+0x694>)
 8003fc4:	f7ff fa86 	bl	80034d4 <LL_ADC_IsEnabled>
 8003fc8:	4604      	mov	r4, r0
 8003fca:	485a      	ldr	r0, [pc, #360]	; (8004134 <HAL_ADC_ConfigChannel+0x698>)
 8003fcc:	f7ff fa82 	bl	80034d4 <LL_ADC_IsEnabled>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4323      	orrs	r3, r4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e008      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x556>
 8003fe0:	4855      	ldr	r0, [pc, #340]	; (8004138 <HAL_ADC_ConfigChannel+0x69c>)
 8003fe2:	f7ff fa77 	bl	80034d4 <LL_ADC_IsEnabled>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d07d      	beq.n	80040f2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a50      	ldr	r2, [pc, #320]	; (800413c <HAL_ADC_ConfigChannel+0x6a0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d130      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x5c6>
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d12b      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a4a      	ldr	r2, [pc, #296]	; (8004138 <HAL_ADC_ConfigChannel+0x69c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	f040 8081 	bne.w	8004118 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a45      	ldr	r2, [pc, #276]	; (8004130 <HAL_ADC_ConfigChannel+0x694>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_ADC_ConfigChannel+0x58e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a43      	ldr	r2, [pc, #268]	; (8004134 <HAL_ADC_ConfigChannel+0x698>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_ADC_ConfigChannel+0x592>
 800402a:	4a45      	ldr	r2, [pc, #276]	; (8004140 <HAL_ADC_ConfigChannel+0x6a4>)
 800402c:	e000      	b.n	8004030 <HAL_ADC_ConfigChannel+0x594>
 800402e:	4a3f      	ldr	r2, [pc, #252]	; (800412c <HAL_ADC_ConfigChannel+0x690>)
 8004030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004032:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7ff f8b0 	bl	800319e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_ADC_ConfigChannel+0x6a8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	4a40      	ldr	r2, [pc, #256]	; (8004148 <HAL_ADC_ConfigChannel+0x6ac>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	099b      	lsrs	r3, r3, #6
 800404c:	3301      	adds	r3, #1
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004052:	e002      	b.n	800405a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3b01      	subs	r3, #1
 8004058:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f9      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004060:	e05a      	b.n	8004118 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a39      	ldr	r2, [pc, #228]	; (800414c <HAL_ADC_ConfigChannel+0x6b0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d11e      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x60e>
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d119      	bne.n	80040aa <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <HAL_ADC_ConfigChannel+0x69c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d14b      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <HAL_ADC_ConfigChannel+0x694>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_ADC_ConfigChannel+0x5f8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a29      	ldr	r2, [pc, #164]	; (8004134 <HAL_ADC_ConfigChannel+0x698>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x5fc>
 8004094:	4a2a      	ldr	r2, [pc, #168]	; (8004140 <HAL_ADC_ConfigChannel+0x6a4>)
 8004096:	e000      	b.n	800409a <HAL_ADC_ConfigChannel+0x5fe>
 8004098:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_ADC_ConfigChannel+0x690>)
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7ff f87b 	bl	800319e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040a8:	e036      	b.n	8004118 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_ADC_ConfigChannel+0x6b4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d131      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x67c>
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d12c      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <HAL_ADC_ConfigChannel+0x69c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d127      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_ADC_ConfigChannel+0x694>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_ADC_ConfigChannel+0x640>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <HAL_ADC_ConfigChannel+0x698>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d101      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x644>
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_ADC_ConfigChannel+0x6a4>)
 80040de:	e000      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x646>
 80040e0:	4a12      	ldr	r2, [pc, #72]	; (800412c <HAL_ADC_ConfigChannel+0x690>)
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f7ff f857 	bl	800319e <LL_ADC_SetCommonPathInternalCh>
 80040f0:	e012      	b.n	8004118 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004104:	e008      	b.n	8004118 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f043 0220 	orr.w	r2, r3, #32
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004120:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004124:	4618      	mov	r0, r3
 8004126:	3784      	adds	r7, #132	; 0x84
 8004128:	46bd      	mov	sp, r7
 800412a:	bd90      	pop	{r4, r7, pc}
 800412c:	58026300 	.word	0x58026300
 8004130:	40022000 	.word	0x40022000
 8004134:	40022100 	.word	0x40022100
 8004138:	58026000 	.word	0x58026000
 800413c:	cb840000 	.word	0xcb840000
 8004140:	40022300 	.word	0x40022300
 8004144:	24000088 	.word	0x24000088
 8004148:	053e2d63 	.word	0x053e2d63
 800414c:	c7520000 	.word	0xc7520000
 8004150:	cfb80000 	.word	0xcfb80000

08004154 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff f9b7 	bl	80034d4 <LL_ADC_IsEnabled>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d16e      	bne.n	800424a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	4b38      	ldr	r3, [pc, #224]	; (8004254 <ADC_Enable+0x100>)
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0210 	orr.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	f043 0201 	orr.w	r2, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e05a      	b.n	800424c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff f972 	bl	8003484 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80041a0:	f7fe ff98 	bl	80030d4 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2b      	ldr	r2, [pc, #172]	; (8004258 <ADC_Enable+0x104>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <ADC_Enable+0x66>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a29      	ldr	r2, [pc, #164]	; (800425c <ADC_Enable+0x108>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d101      	bne.n	80041be <ADC_Enable+0x6a>
 80041ba:	4b29      	ldr	r3, [pc, #164]	; (8004260 <ADC_Enable+0x10c>)
 80041bc:	e000      	b.n	80041c0 <ADC_Enable+0x6c>
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <ADC_Enable+0x110>)
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff f903 	bl	80033cc <LL_ADC_GetMultimode>
 80041c6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a23      	ldr	r2, [pc, #140]	; (800425c <ADC_Enable+0x108>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d002      	beq.n	80041d8 <ADC_Enable+0x84>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	e000      	b.n	80041da <ADC_Enable+0x86>
 80041d8:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <ADC_Enable+0x104>)
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02c      	beq.n	800423c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d130      	bne.n	800424a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041e8:	e028      	b.n	800423c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f970 	bl	80034d4 <LL_ADC_IsEnabled>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d104      	bne.n	8004204 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff f940 	bl	8003484 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004204:	f7fe ff66 	bl	80030d4 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d914      	bls.n	800423c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d00d      	beq.n	800423c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f043 0210 	orr.w	r2, r3, #16
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e007      	b.n	800424c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b01      	cmp	r3, #1
 8004248:	d1cf      	bne.n	80041ea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	8000003f 	.word	0x8000003f
 8004258:	40022000 	.word	0x40022000
 800425c:	40022100 	.word	0x40022100
 8004260:	40022300 	.word	0x40022300
 8004264:	58026300 	.word	0x58026300

08004268 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff f940 	bl	80034fa <LL_ADC_IsDisableOngoing>
 800427a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff f927 	bl	80034d4 <LL_ADC_IsEnabled>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d047      	beq.n	800431c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d144      	bne.n	800431c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 030d 	and.w	r3, r3, #13
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10c      	bne.n	80042ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff f901 	bl	80034ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2203      	movs	r2, #3
 80042b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042b2:	f7fe ff0f 	bl	80030d4 <HAL_GetTick>
 80042b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042b8:	e029      	b.n	800430e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f043 0210 	orr.w	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e023      	b.n	800431e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042d6:	f7fe fefd 	bl	80030d4 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d914      	bls.n	800430e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f043 0210 	orr.w	r2, r3, #16
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004302:	f043 0201 	orr.w	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e007      	b.n	800431e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1dc      	bne.n	80042d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800433c:	2b00      	cmp	r3, #0
 800433e:	d14b      	bne.n	80043d8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004344:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d021      	beq.n	800439e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe ff92 	bl	8003288 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d032      	beq.n	80043d0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d12b      	bne.n	80043d0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d11f      	bne.n	80043d0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f043 0201 	orr.w	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
 800439c:	e018      	b.n	80043d0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d111      	bne.n	80043d0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f7ff fb45 	bl	8003a60 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043d6:	e00e      	b.n	80043f6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff fb4f 	bl	8003a88 <HAL_ADC_ErrorCallback>
}
 80043ea:	e004      	b.n	80043f6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff fb31 	bl	8003a74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	f043 0204 	orr.w	r2, r3, #4
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff fb21 	bl	8003a88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a7a      	ldr	r2, [pc, #488]	; (8004648 <ADC_ConfigureBoostMode+0x1f8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <ADC_ConfigureBoostMode+0x1c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a79      	ldr	r2, [pc, #484]	; (800464c <ADC_ConfigureBoostMode+0x1fc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d109      	bne.n	8004480 <ADC_ConfigureBoostMode+0x30>
 800446c:	4b78      	ldr	r3, [pc, #480]	; (8004650 <ADC_ConfigureBoostMode+0x200>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e008      	b.n	8004492 <ADC_ConfigureBoostMode+0x42>
 8004480:	4b74      	ldr	r3, [pc, #464]	; (8004654 <ADC_ConfigureBoostMode+0x204>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01c      	beq.n	80044d0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004496:	f005 f87f 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 800449a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044a4:	d010      	beq.n	80044c8 <ADC_ConfigureBoostMode+0x78>
 80044a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044aa:	d873      	bhi.n	8004594 <ADC_ConfigureBoostMode+0x144>
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d002      	beq.n	80044b8 <ADC_ConfigureBoostMode+0x68>
 80044b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b6:	d16d      	bne.n	8004594 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	60fb      	str	r3, [r7, #12]
        break;
 80044c6:	e068      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	60fb      	str	r3, [r7, #12]
        break;
 80044ce:	e064      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80044d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	f006 fb06 	bl	800aae8 <HAL_RCCEx_GetPeriphCLKFreq>
 80044dc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044e6:	d051      	beq.n	800458c <ADC_ConfigureBoostMode+0x13c>
 80044e8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044ec:	d854      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 80044ee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044f2:	d047      	beq.n	8004584 <ADC_ConfigureBoostMode+0x134>
 80044f4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044f8:	d84e      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 80044fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044fe:	d03d      	beq.n	800457c <ADC_ConfigureBoostMode+0x12c>
 8004500:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004504:	d848      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 8004506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450a:	d033      	beq.n	8004574 <ADC_ConfigureBoostMode+0x124>
 800450c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004510:	d842      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 8004512:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004516:	d029      	beq.n	800456c <ADC_ConfigureBoostMode+0x11c>
 8004518:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800451c:	d83c      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 800451e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004522:	d01a      	beq.n	800455a <ADC_ConfigureBoostMode+0x10a>
 8004524:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004528:	d836      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 800452a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800452e:	d014      	beq.n	800455a <ADC_ConfigureBoostMode+0x10a>
 8004530:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004534:	d830      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 8004536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800453a:	d00e      	beq.n	800455a <ADC_ConfigureBoostMode+0x10a>
 800453c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004540:	d82a      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 8004542:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004546:	d008      	beq.n	800455a <ADC_ConfigureBoostMode+0x10a>
 8004548:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800454c:	d824      	bhi.n	8004598 <ADC_ConfigureBoostMode+0x148>
 800454e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004552:	d002      	beq.n	800455a <ADC_ConfigureBoostMode+0x10a>
 8004554:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004558:	d11e      	bne.n	8004598 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	0c9b      	lsrs	r3, r3, #18
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	60fb      	str	r3, [r7, #12]
        break;
 800456a:	e016      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	60fb      	str	r3, [r7, #12]
        break;
 8004572:	e012      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	60fb      	str	r3, [r7, #12]
        break;
 800457a:	e00e      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	099b      	lsrs	r3, r3, #6
 8004580:	60fb      	str	r3, [r7, #12]
        break;
 8004582:	e00a      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	09db      	lsrs	r3, r3, #7
 8004588:	60fb      	str	r3, [r7, #12]
        break;
 800458a:	e006      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	60fb      	str	r3, [r7, #12]
        break;
 8004592:	e002      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004598:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800459a:	f7fe fdcb 	bl	8003134 <HAL_GetREVID>
 800459e:	4603      	mov	r3, r0
 80045a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d815      	bhi.n	80045d4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <ADC_ConfigureBoostMode+0x208>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d908      	bls.n	80045c2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045be:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80045c0:	e03e      	b.n	8004640 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045d0:	609a      	str	r2, [r3, #8]
}
 80045d2:	e035      	b.n	8004640 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <ADC_ConfigureBoostMode+0x20c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d808      	bhi.n	80045f4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045f0:	609a      	str	r2, [r3, #8]
}
 80045f2:	e025      	b.n	8004640 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a1a      	ldr	r2, [pc, #104]	; (8004660 <ADC_ConfigureBoostMode+0x210>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d80a      	bhi.n	8004612 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	e016      	b.n	8004640 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <ADC_ConfigureBoostMode+0x214>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d80a      	bhi.n	8004630 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462c:	609a      	str	r2, [r3, #8]
}
 800462e:	e007      	b.n	8004640 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40022000 	.word	0x40022000
 800464c:	40022100 	.word	0x40022100
 8004650:	40022300 	.word	0x40022300
 8004654:	58026300 	.word	0x58026300
 8004658:	01312d00 	.word	0x01312d00
 800465c:	005f5e10 	.word	0x005f5e10
 8004660:	00bebc20 	.word	0x00bebc20
 8004664:	017d7840 	.word	0x017d7840

08004668 <LL_ADC_IsEnabled>:
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <LL_ADC_IsEnabled+0x18>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <LL_ADC_IsEnabled+0x1a>
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <LL_ADC_StartCalibration>:
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <LL_ADC_StartCalibration+0x38>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80046b0:	430a      	orrs	r2, r1
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	609a      	str	r2, [r3, #8]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	3ffeffc0 	.word	0x3ffeffc0

080046cc <LL_ADC_IsCalibrationOnGoing>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046e0:	d101      	bne.n	80046e6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <LL_ADC_REG_IsConversionOngoing>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d101      	bne.n	800470c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_ADCEx_Calibration_Start+0x1e>
 8004736:	2302      	movs	r3, #2
 8004738:	e04c      	b.n	80047d4 <HAL_ADCEx_Calibration_Start+0xb8>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f7ff fd90 	bl	8004268 <ADC_Disable>
 8004748:	4603      	mov	r3, r0
 800474a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d135      	bne.n	80047be <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004756:	4b21      	ldr	r3, [pc, #132]	; (80047dc <HAL_ADCEx_Calibration_Start+0xc0>)
 8004758:	4013      	ands	r3, r2
 800475a:	f043 0202 	orr.w	r2, r3, #2
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff ff90 	bl	8004690 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004770:	e014      	b.n	800479c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3301      	adds	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d30d      	bcc.n	800479c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f023 0312 	bic.w	r3, r3, #18
 8004788:	f043 0210 	orr.w	r2, r3, #16
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e01b      	b.n	80047d4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff93 	bl	80046cc <LL_ADC_IsCalibrationOnGoing>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e2      	bne.n	8004772 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f023 0303 	bic.w	r3, r3, #3
 80047b4:	f043 0201 	orr.w	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
 80047bc:	e005      	b.n	80047ca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f043 0210 	orr.w	r2, r3, #16
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	ffffeefd 	.word	0xffffeefd
 80047e0:	25c3f800 	.word	0x25c3f800

080047e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b09f      	sub	sp, #124	; 0x7c
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047fe:	2302      	movs	r3, #2
 8004800:	e0be      	b.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800480e:	2300      	movs	r3, #0
 8004810:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a5c      	ldr	r2, [pc, #368]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d102      	bne.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800481c:	4b5b      	ldr	r3, [pc, #364]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	e001      	b.n	8004826 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e09d      	b.n	8004980 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff ff54 	bl	80046f4 <LL_ADC_REG_IsConversionOngoing>
 800484c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff ff4e 	bl	80046f4 <LL_ADC_REG_IsConversionOngoing>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d17f      	bne.n	800495e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800485e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004860:	2b00      	cmp	r3, #0
 8004862:	d17c      	bne.n	800495e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a47      	ldr	r2, [pc, #284]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a46      	ldr	r2, [pc, #280]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d101      	bne.n	800487c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004878:	4b45      	ldr	r3, [pc, #276]	; (8004990 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800487a:	e000      	b.n	800487e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800487c:	4b45      	ldr	r3, [pc, #276]	; (8004994 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800487e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d039      	beq.n	80048fc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	431a      	orrs	r2, r3
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a3a      	ldr	r2, [pc, #232]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a38      	ldr	r2, [pc, #224]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10e      	bne.n	80048cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80048ae:	4836      	ldr	r0, [pc, #216]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048b0:	f7ff feda 	bl	8004668 <LL_ADC_IsEnabled>
 80048b4:	4604      	mov	r4, r0
 80048b6:	4835      	ldr	r0, [pc, #212]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048b8:	f7ff fed6 	bl	8004668 <LL_ADC_IsEnabled>
 80048bc:	4603      	mov	r3, r0
 80048be:	4323      	orrs	r3, r4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e008      	b.n	80048de <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80048cc:	4832      	ldr	r0, [pc, #200]	; (8004998 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048ce:	f7ff fecb 	bl	8004668 <LL_ADC_IsEnabled>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d047      	beq.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	6811      	ldr	r1, [r2, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	431a      	orrs	r2, r3
 80048f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048fa:	e03a      	b.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004906:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d10e      	bne.n	800493a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800491c:	481a      	ldr	r0, [pc, #104]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800491e:	f7ff fea3 	bl	8004668 <LL_ADC_IsEnabled>
 8004922:	4604      	mov	r4, r0
 8004924:	4819      	ldr	r0, [pc, #100]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004926:	f7ff fe9f 	bl	8004668 <LL_ADC_IsEnabled>
 800492a:	4603      	mov	r3, r0
 800492c:	4323      	orrs	r3, r4
 800492e:	2b00      	cmp	r3, #0
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e008      	b.n	800494c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800493a:	4817      	ldr	r0, [pc, #92]	; (8004998 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800493c:	f7ff fe94 	bl	8004668 <LL_ADC_IsEnabled>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf0c      	ite	eq
 8004946:	2301      	moveq	r3, #1
 8004948:	2300      	movne	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b11      	ldr	r3, [pc, #68]	; (800499c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004956:	4013      	ands	r3, r2
 8004958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800495a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800495c:	e009      	b.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004970:	e000      	b.n	8004974 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004972:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800497c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004980:	4618      	mov	r0, r3
 8004982:	377c      	adds	r7, #124	; 0x7c
 8004984:	46bd      	mov	sp, r7
 8004986:	bd90      	pop	{r4, r7, pc}
 8004988:	40022000 	.word	0x40022000
 800498c:	40022100 	.word	0x40022100
 8004990:	40022300 	.word	0x40022300
 8004994:	58026300 	.word	0x58026300
 8004998:	58026000 	.word	0x58026000
 800499c:	fffff0e0 	.word	0xfffff0e0

080049a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <__NVIC_SetPriorityGrouping+0x40>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049bc:	4013      	ands	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <__NVIC_SetPriorityGrouping+0x44>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ce:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <__NVIC_SetPriorityGrouping+0x40>)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	60d3      	str	r3, [r2, #12]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00
 80049e4:	05fa0000 	.word	0x05fa0000

080049e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <__NVIC_GetPriorityGrouping+0x18>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f003 0307 	and.w	r3, r3, #7
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db0b      	blt.n	8004a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	f003 021f 	and.w	r2, r3, #31
 8004a1c:	4907      	ldr	r1, [pc, #28]	; (8004a3c <__NVIC_EnableIRQ+0x38>)
 8004a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	2001      	movs	r0, #1
 8004a26:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db0a      	blt.n	8004a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	490c      	ldr	r1, [pc, #48]	; (8004a8c <__NVIC_SetPriority+0x4c>)
 8004a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a68:	e00a      	b.n	8004a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4908      	ldr	r1, [pc, #32]	; (8004a90 <__NVIC_SetPriority+0x50>)
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	3b04      	subs	r3, #4
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	761a      	strb	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf28      	it	cs
 8004ab2:	2304      	movcs	r3, #4
 8004ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d902      	bls.n	8004ac4 <NVIC_EncodePriority+0x30>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3b03      	subs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <NVIC_EncodePriority+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	4313      	orrs	r3, r2
         );
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff ff4c 	bl	80049a0 <__NVIC_SetPriorityGrouping>
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b1e:	f7ff ff63 	bl	80049e8 <__NVIC_GetPriorityGrouping>
 8004b22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	6978      	ldr	r0, [r7, #20]
 8004b2a:	f7ff ffb3 	bl	8004a94 <NVIC_EncodePriority>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b34:	4611      	mov	r1, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ff82 	bl	8004a40 <__NVIC_SetPriority>
}
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff ff56 	bl	8004a04 <__NVIC_EnableIRQ>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e014      	b.n	8004b9c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	791b      	ldrb	r3, [r3, #4]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fd fcb8 	bl	80024f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e046      	b.n	8004c46 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	795b      	ldrb	r3, [r3, #5]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_DAC_Start+0x20>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e040      	b.n	8004c46 <HAL_DAC_Start+0xa2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2201      	movs	r2, #1
 8004bde:	409a      	lsls	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10f      	bne.n	8004c0e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d11d      	bne.n	8004c38 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	e014      	b.n	8004c38 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2102      	movs	r1, #2
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d107      	bne.n	8004c38 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0202 	orr.w	r2, r2, #2
 8004c36:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0a2      	b.n	8004db2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	795b      	ldrb	r3, [r3, #5]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_DAC_Start_DMA+0x24>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e09c      	b.n	8004db2 <HAL_DAC_Start_DMA+0x15e>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2202      	movs	r2, #2
 8004c82:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d129      	bne.n	8004cde <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	4a4b      	ldr	r2, [pc, #300]	; (8004dbc <HAL_DAC_Start_DMA+0x168>)
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	4a4a      	ldr	r2, [pc, #296]	; (8004dc0 <HAL_DAC_Start_DMA+0x16c>)
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	4a49      	ldr	r2, [pc, #292]	; (8004dc4 <HAL_DAC_Start_DMA+0x170>)
 8004ca0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_DAC_Start_DMA+0x6c>
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d005      	beq.n	8004cca <HAL_DAC_Start_DMA+0x76>
 8004cbe:	e009      	b.n	8004cd4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	613b      	str	r3, [r7, #16]
        break;
 8004cc8:	e033      	b.n	8004d32 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	613b      	str	r3, [r7, #16]
        break;
 8004cd2:	e02e      	b.n	8004d32 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3310      	adds	r3, #16
 8004cda:	613b      	str	r3, [r7, #16]
        break;
 8004cdc:	e029      	b.n	8004d32 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	4a39      	ldr	r2, [pc, #228]	; (8004dc8 <HAL_DAC_Start_DMA+0x174>)
 8004ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	4a38      	ldr	r2, [pc, #224]	; (8004dcc <HAL_DAC_Start_DMA+0x178>)
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	4a37      	ldr	r2, [pc, #220]	; (8004dd0 <HAL_DAC_Start_DMA+0x17c>)
 8004cf4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d04:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_DAC_Start_DMA+0xc0>
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d005      	beq.n	8004d1e <HAL_DAC_Start_DMA+0xca>
 8004d12:	e009      	b.n	8004d28 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	613b      	str	r3, [r7, #16]
        break;
 8004d1c:	e009      	b.n	8004d32 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3318      	adds	r3, #24
 8004d24:	613b      	str	r3, [r7, #16]
        break;
 8004d26:	e004      	b.n	8004d32 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	331c      	adds	r3, #28
 8004d2e:	613b      	str	r3, [r7, #16]
        break;
 8004d30:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d111      	bne.n	8004d5c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6898      	ldr	r0, [r3, #8]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	f000 fe67 	bl	8005a24 <HAL_DMA_Start_IT>
 8004d56:	4603      	mov	r3, r0
 8004d58:	75fb      	strb	r3, [r7, #23]
 8004d5a:	e010      	b.n	8004d7e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68d8      	ldr	r0, [r3, #12]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	f000 fe55 	bl	8005a24 <HAL_DMA_Start_IT>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10c      	bne.n	8004da4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2201      	movs	r2, #1
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e005      	b.n	8004db0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f043 0204 	orr.w	r2, r3, #4
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	08005245 	.word	0x08005245
 8004dc0:	08005267 	.word	0x08005267
 8004dc4:	08005283 	.word	0x08005283
 8004dc8:	08005301 	.word	0x08005301
 8004dcc:	08005323 	.word	0x08005323
 8004dd0:	0800533f 	.word	0x0800533f

08004dd4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e03e      	b.n	8004e66 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6819      	ldr	r1, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	400a      	ands	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6819      	ldr	r1, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2201      	movs	r2, #1
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43da      	mvns	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	400a      	ands	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 f863 	bl	8005ef8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e00c      	b.n	8004e5e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 f855 	bl	8005ef8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004e5c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e84:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01d      	beq.n	8004ecc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f043 0201 	orr.w	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ec4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f86f 	bl	8004faa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01d      	beq.n	8004f12 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d018      	beq.n	8004f12 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f043 0202 	orr.w	r2, r3, #2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004efa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f9ed 	bl	80052ec <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e015      	b.n	8004f62 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4413      	add	r3, r2
 8004f48:	3308      	adds	r3, #8
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e004      	b.n	8004f58 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3314      	adds	r3, #20
 8004f56:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_DAC_ConfigChannel+0x1e>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e12a      	b.n	8005238 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	795b      	ldrb	r3, [r3, #5]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_DAC_ConfigChannel+0x2e>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e124      	b.n	8005238 <HAL_DAC_ConfigChannel+0x278>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d17a      	bne.n	80050f8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005002:	f7fe f867 	bl	80030d4 <HAL_GetTick>
 8005006:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d13d      	bne.n	800508a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800500e:	e018      	b.n	8005042 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005010:	f7fe f860 	bl	80030d4 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d911      	bls.n	8005042 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005024:	4b86      	ldr	r3, [pc, #536]	; (8005240 <HAL_DAC_ConfigChannel+0x280>)
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f043 0208 	orr.w	r2, r3, #8
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2203      	movs	r2, #3
 800503c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e0fa      	b.n	8005238 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	4b7d      	ldr	r3, [pc, #500]	; (8005240 <HAL_DAC_ConfigChannel+0x280>)
 800504a:	4013      	ands	r3, r2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1df      	bne.n	8005010 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	6992      	ldr	r2, [r2, #24]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
 800505a:	e020      	b.n	800509e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800505c:	f7fe f83a 	bl	80030d4 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b01      	cmp	r3, #1
 8005068:	d90f      	bls.n	800508a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	da0a      	bge.n	800508a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f043 0208 	orr.w	r2, r3, #8
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2203      	movs	r2, #3
 8005084:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0d6      	b.n	8005238 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	2b00      	cmp	r3, #0
 8005092:	dbe3      	blt.n	800505c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	6992      	ldr	r2, [r2, #24]
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	43db      	mvns	r3, r3
 80050b4:	ea02 0103 	and.w	r1, r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	409a      	lsls	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	21ff      	movs	r1, #255	; 0xff
 80050da:	fa01 f303 	lsl.w	r3, r1, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	ea02 0103 	and.w	r1, r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6a1a      	ldr	r2, [r3, #32]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	409a      	lsls	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d11d      	bne.n	800513c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	221f      	movs	r2, #31
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2207      	movs	r2, #7
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	43db      	mvns	r3, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d102      	bne.n	8005166 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005160:	2300      	movs	r3, #0
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
 8005164:	e00f      	b.n	8005186 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d102      	bne.n	8005174 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800516e:	2301      	movs	r3, #1
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	e008      	b.n	8005186 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800517c:	2301      	movs	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	e001      	b.n	8005186 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005182:	2300      	movs	r3, #0
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43da      	mvns	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	400a      	ands	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4313      	orrs	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	22c0      	movs	r2, #192	; 0xc0
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43da      	mvns	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	400a      	ands	r2, r1
 8005226:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005238:	4618      	mov	r0, r3
 800523a:	3728      	adds	r7, #40	; 0x28
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20008000 	.word	0x20008000

08005244 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f7ff fe8b 	bl	8004f6e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	711a      	strb	r2, [r3, #4]
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff fe84 	bl	8004f82 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f043 0204 	orr.w	r2, r3, #4
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff fe7a 	bl	8004f96 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	711a      	strb	r2, [r3, #4]
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff ffce 	bl	80052b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	711a      	strb	r2, [r3, #4]
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff ffc7 	bl	80052c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f043 0204 	orr.w	r2, r3, #4
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ffbd 	bl	80052d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	711a      	strb	r2, [r3, #4]
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005374:	f7fd feae 	bl	80030d4 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e316      	b.n	80059b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a66      	ldr	r2, [pc, #408]	; (8005524 <HAL_DMA_Init+0x1b8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d04a      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a65      	ldr	r2, [pc, #404]	; (8005528 <HAL_DMA_Init+0x1bc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d045      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a63      	ldr	r2, [pc, #396]	; (800552c <HAL_DMA_Init+0x1c0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d040      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a62      	ldr	r2, [pc, #392]	; (8005530 <HAL_DMA_Init+0x1c4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d03b      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a60      	ldr	r2, [pc, #384]	; (8005534 <HAL_DMA_Init+0x1c8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d036      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a5f      	ldr	r2, [pc, #380]	; (8005538 <HAL_DMA_Init+0x1cc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d031      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a5d      	ldr	r2, [pc, #372]	; (800553c <HAL_DMA_Init+0x1d0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02c      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a5c      	ldr	r2, [pc, #368]	; (8005540 <HAL_DMA_Init+0x1d4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d027      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a5a      	ldr	r2, [pc, #360]	; (8005544 <HAL_DMA_Init+0x1d8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d022      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a59      	ldr	r2, [pc, #356]	; (8005548 <HAL_DMA_Init+0x1dc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d01d      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a57      	ldr	r2, [pc, #348]	; (800554c <HAL_DMA_Init+0x1e0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a56      	ldr	r2, [pc, #344]	; (8005550 <HAL_DMA_Init+0x1e4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a54      	ldr	r2, [pc, #336]	; (8005554 <HAL_DMA_Init+0x1e8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a53      	ldr	r2, [pc, #332]	; (8005558 <HAL_DMA_Init+0x1ec>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a51      	ldr	r2, [pc, #324]	; (800555c <HAL_DMA_Init+0x1f0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_DMA_Init+0xb8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a50      	ldr	r2, [pc, #320]	; (8005560 <HAL_DMA_Init+0x1f4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d101      	bne.n	8005428 <HAL_DMA_Init+0xbc>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_DMA_Init+0xbe>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 813b 	beq.w	80056a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a37      	ldr	r2, [pc, #220]	; (8005524 <HAL_DMA_Init+0x1b8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d04a      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a36      	ldr	r2, [pc, #216]	; (8005528 <HAL_DMA_Init+0x1bc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d045      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a34      	ldr	r2, [pc, #208]	; (800552c <HAL_DMA_Init+0x1c0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d040      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a33      	ldr	r2, [pc, #204]	; (8005530 <HAL_DMA_Init+0x1c4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d03b      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a31      	ldr	r2, [pc, #196]	; (8005534 <HAL_DMA_Init+0x1c8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d036      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a30      	ldr	r2, [pc, #192]	; (8005538 <HAL_DMA_Init+0x1cc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d031      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2e      	ldr	r2, [pc, #184]	; (800553c <HAL_DMA_Init+0x1d0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d02c      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2d      	ldr	r2, [pc, #180]	; (8005540 <HAL_DMA_Init+0x1d4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d027      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2b      	ldr	r2, [pc, #172]	; (8005544 <HAL_DMA_Init+0x1d8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d022      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a2a      	ldr	r2, [pc, #168]	; (8005548 <HAL_DMA_Init+0x1dc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d01d      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a28      	ldr	r2, [pc, #160]	; (800554c <HAL_DMA_Init+0x1e0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d018      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a27      	ldr	r2, [pc, #156]	; (8005550 <HAL_DMA_Init+0x1e4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a25      	ldr	r2, [pc, #148]	; (8005554 <HAL_DMA_Init+0x1e8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a24      	ldr	r2, [pc, #144]	; (8005558 <HAL_DMA_Init+0x1ec>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a22      	ldr	r2, [pc, #136]	; (800555c <HAL_DMA_Init+0x1f0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_DMA_Init+0x174>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a21      	ldr	r2, [pc, #132]	; (8005560 <HAL_DMA_Init+0x1f4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d108      	bne.n	80054f2 <HAL_DMA_Init+0x186>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e007      	b.n	8005502 <HAL_DMA_Init+0x196>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005502:	e02f      	b.n	8005564 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005504:	f7fd fde6 	bl	80030d4 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b05      	cmp	r3, #5
 8005510:	d928      	bls.n	8005564 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2203      	movs	r2, #3
 800551c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e246      	b.n	80059b2 <HAL_DMA_Init+0x646>
 8005524:	40020010 	.word	0x40020010
 8005528:	40020028 	.word	0x40020028
 800552c:	40020040 	.word	0x40020040
 8005530:	40020058 	.word	0x40020058
 8005534:	40020070 	.word	0x40020070
 8005538:	40020088 	.word	0x40020088
 800553c:	400200a0 	.word	0x400200a0
 8005540:	400200b8 	.word	0x400200b8
 8005544:	40020410 	.word	0x40020410
 8005548:	40020428 	.word	0x40020428
 800554c:	40020440 	.word	0x40020440
 8005550:	40020458 	.word	0x40020458
 8005554:	40020470 	.word	0x40020470
 8005558:	40020488 	.word	0x40020488
 800555c:	400204a0 	.word	0x400204a0
 8005560:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1c8      	bne.n	8005504 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4b83      	ldr	r3, [pc, #524]	; (800578c <HAL_DMA_Init+0x420>)
 800557e:	4013      	ands	r3, r2
 8005580:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800558a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005596:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d107      	bne.n	80055c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	4313      	orrs	r3, r2
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80055c8:	4b71      	ldr	r3, [pc, #452]	; (8005790 <HAL_DMA_Init+0x424>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4b71      	ldr	r3, [pc, #452]	; (8005794 <HAL_DMA_Init+0x428>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d4:	d328      	bcc.n	8005628 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b28      	cmp	r3, #40	; 0x28
 80055dc:	d903      	bls.n	80055e6 <HAL_DMA_Init+0x27a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b2e      	cmp	r3, #46	; 0x2e
 80055e4:	d917      	bls.n	8005616 <HAL_DMA_Init+0x2aa>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b3e      	cmp	r3, #62	; 0x3e
 80055ec:	d903      	bls.n	80055f6 <HAL_DMA_Init+0x28a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b42      	cmp	r3, #66	; 0x42
 80055f4:	d90f      	bls.n	8005616 <HAL_DMA_Init+0x2aa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b46      	cmp	r3, #70	; 0x46
 80055fc:	d903      	bls.n	8005606 <HAL_DMA_Init+0x29a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b48      	cmp	r3, #72	; 0x48
 8005604:	d907      	bls.n	8005616 <HAL_DMA_Init+0x2aa>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b4e      	cmp	r3, #78	; 0x4e
 800560c:	d905      	bls.n	800561a <HAL_DMA_Init+0x2ae>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b52      	cmp	r3, #82	; 0x52
 8005614:	d801      	bhi.n	800561a <HAL_DMA_Init+0x2ae>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <HAL_DMA_Init+0x2b0>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005626:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b04      	cmp	r3, #4
 8005650:	d117      	bne.n	8005682 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f002 fb33 	bl	8007cd0 <DMA_CheckFifoParam>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d008      	beq.n	8005682 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2240      	movs	r2, #64	; 0x40
 8005674:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e197      	b.n	80059b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f002 fa6e 	bl	8007b6c <DMA_CalcBaseAndBitshift>
 8005690:	4603      	mov	r3, r0
 8005692:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	223f      	movs	r2, #63	; 0x3f
 800569e:	409a      	lsls	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	e0cd      	b.n	8005842 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a3b      	ldr	r2, [pc, #236]	; (8005798 <HAL_DMA_Init+0x42c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <HAL_DMA_Init+0x38a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a39      	ldr	r2, [pc, #228]	; (800579c <HAL_DMA_Init+0x430>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d01d      	beq.n	80056f6 <HAL_DMA_Init+0x38a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <HAL_DMA_Init+0x434>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <HAL_DMA_Init+0x38a>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a36      	ldr	r2, [pc, #216]	; (80057a4 <HAL_DMA_Init+0x438>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_DMA_Init+0x38a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a35      	ldr	r2, [pc, #212]	; (80057a8 <HAL_DMA_Init+0x43c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_DMA_Init+0x38a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a33      	ldr	r2, [pc, #204]	; (80057ac <HAL_DMA_Init+0x440>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_DMA_Init+0x38a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <HAL_DMA_Init+0x444>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_DMA_Init+0x38a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a30      	ldr	r2, [pc, #192]	; (80057b4 <HAL_DMA_Init+0x448>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <HAL_DMA_Init+0x38e>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <HAL_DMA_Init+0x390>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8097 	beq.w	8005830 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a24      	ldr	r2, [pc, #144]	; (8005798 <HAL_DMA_Init+0x42c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d021      	beq.n	8005750 <HAL_DMA_Init+0x3e4>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a22      	ldr	r2, [pc, #136]	; (800579c <HAL_DMA_Init+0x430>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01c      	beq.n	8005750 <HAL_DMA_Init+0x3e4>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <HAL_DMA_Init+0x434>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d017      	beq.n	8005750 <HAL_DMA_Init+0x3e4>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <HAL_DMA_Init+0x438>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d012      	beq.n	8005750 <HAL_DMA_Init+0x3e4>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <HAL_DMA_Init+0x43c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00d      	beq.n	8005750 <HAL_DMA_Init+0x3e4>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <HAL_DMA_Init+0x440>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d008      	beq.n	8005750 <HAL_DMA_Init+0x3e4>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <HAL_DMA_Init+0x444>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d003      	beq.n	8005750 <HAL_DMA_Init+0x3e4>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a19      	ldr	r2, [pc, #100]	; (80057b4 <HAL_DMA_Init+0x448>)
 800574e:	4293      	cmp	r3, r2
 8005750:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <HAL_DMA_Init+0x44c>)
 800576e:	4013      	ands	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d020      	beq.n	80057bc <HAL_DMA_Init+0x450>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d102      	bne.n	8005788 <HAL_DMA_Init+0x41c>
 8005782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005786:	e01a      	b.n	80057be <HAL_DMA_Init+0x452>
 8005788:	2300      	movs	r3, #0
 800578a:	e018      	b.n	80057be <HAL_DMA_Init+0x452>
 800578c:	fe10803f 	.word	0xfe10803f
 8005790:	5c001000 	.word	0x5c001000
 8005794:	ffff0000 	.word	0xffff0000
 8005798:	58025408 	.word	0x58025408
 800579c:	5802541c 	.word	0x5802541c
 80057a0:	58025430 	.word	0x58025430
 80057a4:	58025444 	.word	0x58025444
 80057a8:	58025458 	.word	0x58025458
 80057ac:	5802546c 	.word	0x5802546c
 80057b0:	58025480 	.word	0x58025480
 80057b4:	58025494 	.word	0x58025494
 80057b8:	fffe000f 	.word	0xfffe000f
 80057bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	68d2      	ldr	r2, [r2, #12]
 80057c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	4b6e      	ldr	r3, [pc, #440]	; (80059bc <HAL_DMA_Init+0x650>)
 8005804:	4413      	add	r3, r2
 8005806:	4a6e      	ldr	r2, [pc, #440]	; (80059c0 <HAL_DMA_Init+0x654>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	009a      	lsls	r2, r3, #2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f002 f9a9 	bl	8007b6c <DMA_CalcBaseAndBitshift>
 800581a:	4603      	mov	r3, r0
 800581c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	2201      	movs	r2, #1
 8005828:	409a      	lsls	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	e008      	b.n	8005842 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2240      	movs	r2, #64	; 0x40
 8005834:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2203      	movs	r2, #3
 800583a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e0b7      	b.n	80059b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a5f      	ldr	r2, [pc, #380]	; (80059c4 <HAL_DMA_Init+0x658>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d072      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a5d      	ldr	r2, [pc, #372]	; (80059c8 <HAL_DMA_Init+0x65c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d06d      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a5c      	ldr	r2, [pc, #368]	; (80059cc <HAL_DMA_Init+0x660>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d068      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a5a      	ldr	r2, [pc, #360]	; (80059d0 <HAL_DMA_Init+0x664>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d063      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a59      	ldr	r2, [pc, #356]	; (80059d4 <HAL_DMA_Init+0x668>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d05e      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a57      	ldr	r2, [pc, #348]	; (80059d8 <HAL_DMA_Init+0x66c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d059      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a56      	ldr	r2, [pc, #344]	; (80059dc <HAL_DMA_Init+0x670>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d054      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a54      	ldr	r2, [pc, #336]	; (80059e0 <HAL_DMA_Init+0x674>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d04f      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a53      	ldr	r2, [pc, #332]	; (80059e4 <HAL_DMA_Init+0x678>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d04a      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a51      	ldr	r2, [pc, #324]	; (80059e8 <HAL_DMA_Init+0x67c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d045      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a50      	ldr	r2, [pc, #320]	; (80059ec <HAL_DMA_Init+0x680>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d040      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a4e      	ldr	r2, [pc, #312]	; (80059f0 <HAL_DMA_Init+0x684>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d03b      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a4d      	ldr	r2, [pc, #308]	; (80059f4 <HAL_DMA_Init+0x688>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d036      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a4b      	ldr	r2, [pc, #300]	; (80059f8 <HAL_DMA_Init+0x68c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d031      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a4a      	ldr	r2, [pc, #296]	; (80059fc <HAL_DMA_Init+0x690>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d02c      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a48      	ldr	r2, [pc, #288]	; (8005a00 <HAL_DMA_Init+0x694>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d027      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a47      	ldr	r2, [pc, #284]	; (8005a04 <HAL_DMA_Init+0x698>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d022      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a45      	ldr	r2, [pc, #276]	; (8005a08 <HAL_DMA_Init+0x69c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01d      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a44      	ldr	r2, [pc, #272]	; (8005a0c <HAL_DMA_Init+0x6a0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d018      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a42      	ldr	r2, [pc, #264]	; (8005a10 <HAL_DMA_Init+0x6a4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d013      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a41      	ldr	r2, [pc, #260]	; (8005a14 <HAL_DMA_Init+0x6a8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00e      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a3f      	ldr	r2, [pc, #252]	; (8005a18 <HAL_DMA_Init+0x6ac>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d009      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3e      	ldr	r2, [pc, #248]	; (8005a1c <HAL_DMA_Init+0x6b0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_DMA_Init+0x5c6>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a3c      	ldr	r2, [pc, #240]	; (8005a20 <HAL_DMA_Init+0x6b4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d101      	bne.n	8005936 <HAL_DMA_Init+0x5ca>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <HAL_DMA_Init+0x5cc>
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d032      	beq.n	80059a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f002 fa43 	bl	8007dc8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b80      	cmp	r3, #128	; 0x80
 8005948:	d102      	bne.n	8005950 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005964:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_DMA_Init+0x624>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b08      	cmp	r3, #8
 8005974:	d80c      	bhi.n	8005990 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f002 fac0 	bl	8007efc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	e008      	b.n	80059a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	a7fdabf8 	.word	0xa7fdabf8
 80059c0:	cccccccd 	.word	0xcccccccd
 80059c4:	40020010 	.word	0x40020010
 80059c8:	40020028 	.word	0x40020028
 80059cc:	40020040 	.word	0x40020040
 80059d0:	40020058 	.word	0x40020058
 80059d4:	40020070 	.word	0x40020070
 80059d8:	40020088 	.word	0x40020088
 80059dc:	400200a0 	.word	0x400200a0
 80059e0:	400200b8 	.word	0x400200b8
 80059e4:	40020410 	.word	0x40020410
 80059e8:	40020428 	.word	0x40020428
 80059ec:	40020440 	.word	0x40020440
 80059f0:	40020458 	.word	0x40020458
 80059f4:	40020470 	.word	0x40020470
 80059f8:	40020488 	.word	0x40020488
 80059fc:	400204a0 	.word	0x400204a0
 8005a00:	400204b8 	.word	0x400204b8
 8005a04:	58025408 	.word	0x58025408
 8005a08:	5802541c 	.word	0x5802541c
 8005a0c:	58025430 	.word	0x58025430
 8005a10:	58025444 	.word	0x58025444
 8005a14:	58025458 	.word	0x58025458
 8005a18:	5802546c 	.word	0x5802546c
 8005a1c:	58025480 	.word	0x58025480
 8005a20:	58025494 	.word	0x58025494

08005a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e226      	b.n	8005e8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_DMA_Start_IT+0x2a>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e21f      	b.n	8005e8e <HAL_DMA_Start_IT+0x46a>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	f040 820a 	bne.w	8005e78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a68      	ldr	r2, [pc, #416]	; (8005c18 <HAL_DMA_Start_IT+0x1f4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d04a      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a66      	ldr	r2, [pc, #408]	; (8005c1c <HAL_DMA_Start_IT+0x1f8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d045      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a65      	ldr	r2, [pc, #404]	; (8005c20 <HAL_DMA_Start_IT+0x1fc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d040      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a63      	ldr	r2, [pc, #396]	; (8005c24 <HAL_DMA_Start_IT+0x200>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d03b      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a62      	ldr	r2, [pc, #392]	; (8005c28 <HAL_DMA_Start_IT+0x204>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d036      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a60      	ldr	r2, [pc, #384]	; (8005c2c <HAL_DMA_Start_IT+0x208>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d031      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a5f      	ldr	r2, [pc, #380]	; (8005c30 <HAL_DMA_Start_IT+0x20c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d02c      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a5d      	ldr	r2, [pc, #372]	; (8005c34 <HAL_DMA_Start_IT+0x210>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d027      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a5c      	ldr	r2, [pc, #368]	; (8005c38 <HAL_DMA_Start_IT+0x214>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d022      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a5a      	ldr	r2, [pc, #360]	; (8005c3c <HAL_DMA_Start_IT+0x218>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01d      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a59      	ldr	r2, [pc, #356]	; (8005c40 <HAL_DMA_Start_IT+0x21c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d018      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a57      	ldr	r2, [pc, #348]	; (8005c44 <HAL_DMA_Start_IT+0x220>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a56      	ldr	r2, [pc, #344]	; (8005c48 <HAL_DMA_Start_IT+0x224>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00e      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a54      	ldr	r2, [pc, #336]	; (8005c4c <HAL_DMA_Start_IT+0x228>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d009      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a53      	ldr	r2, [pc, #332]	; (8005c50 <HAL_DMA_Start_IT+0x22c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d004      	beq.n	8005b12 <HAL_DMA_Start_IT+0xee>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a51      	ldr	r2, [pc, #324]	; (8005c54 <HAL_DMA_Start_IT+0x230>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d108      	bne.n	8005b24 <HAL_DMA_Start_IT+0x100>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	e007      	b.n	8005b34 <HAL_DMA_Start_IT+0x110>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0201 	bic.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 fe6a 	bl	8007814 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a34      	ldr	r2, [pc, #208]	; (8005c18 <HAL_DMA_Start_IT+0x1f4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d04a      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a33      	ldr	r2, [pc, #204]	; (8005c1c <HAL_DMA_Start_IT+0x1f8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d045      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a31      	ldr	r2, [pc, #196]	; (8005c20 <HAL_DMA_Start_IT+0x1fc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d040      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a30      	ldr	r2, [pc, #192]	; (8005c24 <HAL_DMA_Start_IT+0x200>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d03b      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a2e      	ldr	r2, [pc, #184]	; (8005c28 <HAL_DMA_Start_IT+0x204>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d036      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a2d      	ldr	r2, [pc, #180]	; (8005c2c <HAL_DMA_Start_IT+0x208>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d031      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <HAL_DMA_Start_IT+0x20c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d02c      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <HAL_DMA_Start_IT+0x210>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d027      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a28      	ldr	r2, [pc, #160]	; (8005c38 <HAL_DMA_Start_IT+0x214>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d022      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a27      	ldr	r2, [pc, #156]	; (8005c3c <HAL_DMA_Start_IT+0x218>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d01d      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a25      	ldr	r2, [pc, #148]	; (8005c40 <HAL_DMA_Start_IT+0x21c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d018      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a24      	ldr	r2, [pc, #144]	; (8005c44 <HAL_DMA_Start_IT+0x220>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d013      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a22      	ldr	r2, [pc, #136]	; (8005c48 <HAL_DMA_Start_IT+0x224>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00e      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a21      	ldr	r2, [pc, #132]	; (8005c4c <HAL_DMA_Start_IT+0x228>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d009      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <HAL_DMA_Start_IT+0x22c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_DMA_Start_IT+0x1bc>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <HAL_DMA_Start_IT+0x230>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d101      	bne.n	8005be4 <HAL_DMA_Start_IT+0x1c0>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_DMA_Start_IT+0x1c2>
 8005be4:	2300      	movs	r3, #0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d036      	beq.n	8005c58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f023 021e 	bic.w	r2, r3, #30
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0216 	orr.w	r2, r2, #22
 8005bfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d03e      	beq.n	8005c84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0208 	orr.w	r2, r2, #8
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e035      	b.n	8005c84 <HAL_DMA_Start_IT+0x260>
 8005c18:	40020010 	.word	0x40020010
 8005c1c:	40020028 	.word	0x40020028
 8005c20:	40020040 	.word	0x40020040
 8005c24:	40020058 	.word	0x40020058
 8005c28:	40020070 	.word	0x40020070
 8005c2c:	40020088 	.word	0x40020088
 8005c30:	400200a0 	.word	0x400200a0
 8005c34:	400200b8 	.word	0x400200b8
 8005c38:	40020410 	.word	0x40020410
 8005c3c:	40020428 	.word	0x40020428
 8005c40:	40020440 	.word	0x40020440
 8005c44:	40020458 	.word	0x40020458
 8005c48:	40020470 	.word	0x40020470
 8005c4c:	40020488 	.word	0x40020488
 8005c50:	400204a0 	.word	0x400204a0
 8005c54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 020e 	bic.w	r2, r3, #14
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 020a 	orr.w	r2, r2, #10
 8005c6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0204 	orr.w	r2, r2, #4
 8005c82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a83      	ldr	r2, [pc, #524]	; (8005e98 <HAL_DMA_Start_IT+0x474>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d072      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a82      	ldr	r2, [pc, #520]	; (8005e9c <HAL_DMA_Start_IT+0x478>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d06d      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a80      	ldr	r2, [pc, #512]	; (8005ea0 <HAL_DMA_Start_IT+0x47c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d068      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a7f      	ldr	r2, [pc, #508]	; (8005ea4 <HAL_DMA_Start_IT+0x480>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d063      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a7d      	ldr	r2, [pc, #500]	; (8005ea8 <HAL_DMA_Start_IT+0x484>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d05e      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a7c      	ldr	r2, [pc, #496]	; (8005eac <HAL_DMA_Start_IT+0x488>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d059      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a7a      	ldr	r2, [pc, #488]	; (8005eb0 <HAL_DMA_Start_IT+0x48c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d054      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a79      	ldr	r2, [pc, #484]	; (8005eb4 <HAL_DMA_Start_IT+0x490>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d04f      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a77      	ldr	r2, [pc, #476]	; (8005eb8 <HAL_DMA_Start_IT+0x494>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d04a      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a76      	ldr	r2, [pc, #472]	; (8005ebc <HAL_DMA_Start_IT+0x498>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d045      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a74      	ldr	r2, [pc, #464]	; (8005ec0 <HAL_DMA_Start_IT+0x49c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d040      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a73      	ldr	r2, [pc, #460]	; (8005ec4 <HAL_DMA_Start_IT+0x4a0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d03b      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a71      	ldr	r2, [pc, #452]	; (8005ec8 <HAL_DMA_Start_IT+0x4a4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d036      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a70      	ldr	r2, [pc, #448]	; (8005ecc <HAL_DMA_Start_IT+0x4a8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d031      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6e      	ldr	r2, [pc, #440]	; (8005ed0 <HAL_DMA_Start_IT+0x4ac>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d02c      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6d      	ldr	r2, [pc, #436]	; (8005ed4 <HAL_DMA_Start_IT+0x4b0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d027      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a6b      	ldr	r2, [pc, #428]	; (8005ed8 <HAL_DMA_Start_IT+0x4b4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d022      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6a      	ldr	r2, [pc, #424]	; (8005edc <HAL_DMA_Start_IT+0x4b8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d01d      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a68      	ldr	r2, [pc, #416]	; (8005ee0 <HAL_DMA_Start_IT+0x4bc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a67      	ldr	r2, [pc, #412]	; (8005ee4 <HAL_DMA_Start_IT+0x4c0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a65      	ldr	r2, [pc, #404]	; (8005ee8 <HAL_DMA_Start_IT+0x4c4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a64      	ldr	r2, [pc, #400]	; (8005eec <HAL_DMA_Start_IT+0x4c8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a62      	ldr	r2, [pc, #392]	; (8005ef0 <HAL_DMA_Start_IT+0x4cc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_DMA_Start_IT+0x350>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a61      	ldr	r2, [pc, #388]	; (8005ef4 <HAL_DMA_Start_IT+0x4d0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d101      	bne.n	8005d78 <HAL_DMA_Start_IT+0x354>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <HAL_DMA_Start_IT+0x356>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01a      	beq.n	8005db4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <HAL_DMA_Start_IT+0x474>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d04a      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a36      	ldr	r2, [pc, #216]	; (8005e9c <HAL_DMA_Start_IT+0x478>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d045      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <HAL_DMA_Start_IT+0x47c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d040      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a33      	ldr	r2, [pc, #204]	; (8005ea4 <HAL_DMA_Start_IT+0x480>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d03b      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a31      	ldr	r2, [pc, #196]	; (8005ea8 <HAL_DMA_Start_IT+0x484>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d036      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a30      	ldr	r2, [pc, #192]	; (8005eac <HAL_DMA_Start_IT+0x488>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d031      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2e      	ldr	r2, [pc, #184]	; (8005eb0 <HAL_DMA_Start_IT+0x48c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02c      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2d      	ldr	r2, [pc, #180]	; (8005eb4 <HAL_DMA_Start_IT+0x490>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d027      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a2b      	ldr	r2, [pc, #172]	; (8005eb8 <HAL_DMA_Start_IT+0x494>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d022      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a2a      	ldr	r2, [pc, #168]	; (8005ebc <HAL_DMA_Start_IT+0x498>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01d      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <HAL_DMA_Start_IT+0x49c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <HAL_DMA_Start_IT+0x4a0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <HAL_DMA_Start_IT+0x4a4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <HAL_DMA_Start_IT+0x4a8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <HAL_DMA_Start_IT+0x4ac>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_DMA_Start_IT+0x430>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a21      	ldr	r2, [pc, #132]	; (8005ed4 <HAL_DMA_Start_IT+0x4b0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d108      	bne.n	8005e66 <HAL_DMA_Start_IT+0x442>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e012      	b.n	8005e8c <HAL_DMA_Start_IT+0x468>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0201 	orr.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	e009      	b.n	8005e8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	40020010 	.word	0x40020010
 8005e9c:	40020028 	.word	0x40020028
 8005ea0:	40020040 	.word	0x40020040
 8005ea4:	40020058 	.word	0x40020058
 8005ea8:	40020070 	.word	0x40020070
 8005eac:	40020088 	.word	0x40020088
 8005eb0:	400200a0 	.word	0x400200a0
 8005eb4:	400200b8 	.word	0x400200b8
 8005eb8:	40020410 	.word	0x40020410
 8005ebc:	40020428 	.word	0x40020428
 8005ec0:	40020440 	.word	0x40020440
 8005ec4:	40020458 	.word	0x40020458
 8005ec8:	40020470 	.word	0x40020470
 8005ecc:	40020488 	.word	0x40020488
 8005ed0:	400204a0 	.word	0x400204a0
 8005ed4:	400204b8 	.word	0x400204b8
 8005ed8:	58025408 	.word	0x58025408
 8005edc:	5802541c 	.word	0x5802541c
 8005ee0:	58025430 	.word	0x58025430
 8005ee4:	58025444 	.word	0x58025444
 8005ee8:	58025458 	.word	0x58025458
 8005eec:	5802546c 	.word	0x5802546c
 8005ef0:	58025480 	.word	0x58025480
 8005ef4:	58025494 	.word	0x58025494

08005ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005f00:	f7fd f8e8 	bl	80030d4 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e2dc      	b.n	80064ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d008      	beq.n	8005f2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2280      	movs	r2, #128	; 0x80
 8005f20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e2cd      	b.n	80064ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a76      	ldr	r2, [pc, #472]	; (800610c <HAL_DMA_Abort+0x214>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d04a      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a74      	ldr	r2, [pc, #464]	; (8006110 <HAL_DMA_Abort+0x218>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d045      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a73      	ldr	r2, [pc, #460]	; (8006114 <HAL_DMA_Abort+0x21c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d040      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a71      	ldr	r2, [pc, #452]	; (8006118 <HAL_DMA_Abort+0x220>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d03b      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a70      	ldr	r2, [pc, #448]	; (800611c <HAL_DMA_Abort+0x224>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d036      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6e      	ldr	r2, [pc, #440]	; (8006120 <HAL_DMA_Abort+0x228>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d031      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a6d      	ldr	r2, [pc, #436]	; (8006124 <HAL_DMA_Abort+0x22c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d02c      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a6b      	ldr	r2, [pc, #428]	; (8006128 <HAL_DMA_Abort+0x230>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d027      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a6a      	ldr	r2, [pc, #424]	; (800612c <HAL_DMA_Abort+0x234>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d022      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a68      	ldr	r2, [pc, #416]	; (8006130 <HAL_DMA_Abort+0x238>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01d      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a67      	ldr	r2, [pc, #412]	; (8006134 <HAL_DMA_Abort+0x23c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d018      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a65      	ldr	r2, [pc, #404]	; (8006138 <HAL_DMA_Abort+0x240>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d013      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a64      	ldr	r2, [pc, #400]	; (800613c <HAL_DMA_Abort+0x244>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00e      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a62      	ldr	r2, [pc, #392]	; (8006140 <HAL_DMA_Abort+0x248>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d009      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a61      	ldr	r2, [pc, #388]	; (8006144 <HAL_DMA_Abort+0x24c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_DMA_Abort+0xd6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a5f      	ldr	r2, [pc, #380]	; (8006148 <HAL_DMA_Abort+0x250>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d101      	bne.n	8005fd2 <HAL_DMA_Abort+0xda>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <HAL_DMA_Abort+0xdc>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d013      	beq.n	8006000 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 021e 	bic.w	r2, r2, #30
 8005fe6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e00a      	b.n	8006016 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 020e 	bic.w	r2, r2, #14
 800600e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3c      	ldr	r2, [pc, #240]	; (800610c <HAL_DMA_Abort+0x214>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d072      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a3a      	ldr	r2, [pc, #232]	; (8006110 <HAL_DMA_Abort+0x218>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d06d      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a39      	ldr	r2, [pc, #228]	; (8006114 <HAL_DMA_Abort+0x21c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d068      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a37      	ldr	r2, [pc, #220]	; (8006118 <HAL_DMA_Abort+0x220>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d063      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a36      	ldr	r2, [pc, #216]	; (800611c <HAL_DMA_Abort+0x224>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d05e      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a34      	ldr	r2, [pc, #208]	; (8006120 <HAL_DMA_Abort+0x228>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d059      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a33      	ldr	r2, [pc, #204]	; (8006124 <HAL_DMA_Abort+0x22c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d054      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a31      	ldr	r2, [pc, #196]	; (8006128 <HAL_DMA_Abort+0x230>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d04f      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a30      	ldr	r2, [pc, #192]	; (800612c <HAL_DMA_Abort+0x234>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d04a      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a2e      	ldr	r2, [pc, #184]	; (8006130 <HAL_DMA_Abort+0x238>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d045      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a2d      	ldr	r2, [pc, #180]	; (8006134 <HAL_DMA_Abort+0x23c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d040      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a2b      	ldr	r2, [pc, #172]	; (8006138 <HAL_DMA_Abort+0x240>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d03b      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2a      	ldr	r2, [pc, #168]	; (800613c <HAL_DMA_Abort+0x244>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d036      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a28      	ldr	r2, [pc, #160]	; (8006140 <HAL_DMA_Abort+0x248>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d031      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a27      	ldr	r2, [pc, #156]	; (8006144 <HAL_DMA_Abort+0x24c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d02c      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a25      	ldr	r2, [pc, #148]	; (8006148 <HAL_DMA_Abort+0x250>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d027      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a24      	ldr	r2, [pc, #144]	; (800614c <HAL_DMA_Abort+0x254>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d022      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <HAL_DMA_Abort+0x258>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01d      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a21      	ldr	r2, [pc, #132]	; (8006154 <HAL_DMA_Abort+0x25c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d018      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <HAL_DMA_Abort+0x260>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1e      	ldr	r2, [pc, #120]	; (800615c <HAL_DMA_Abort+0x264>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00e      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <HAL_DMA_Abort+0x268>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <HAL_DMA_Abort+0x26c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_DMA_Abort+0x20e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a19      	ldr	r2, [pc, #100]	; (8006168 <HAL_DMA_Abort+0x270>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d132      	bne.n	800616c <HAL_DMA_Abort+0x274>
 8006106:	2301      	movs	r3, #1
 8006108:	e031      	b.n	800616e <HAL_DMA_Abort+0x276>
 800610a:	bf00      	nop
 800610c:	40020010 	.word	0x40020010
 8006110:	40020028 	.word	0x40020028
 8006114:	40020040 	.word	0x40020040
 8006118:	40020058 	.word	0x40020058
 800611c:	40020070 	.word	0x40020070
 8006120:	40020088 	.word	0x40020088
 8006124:	400200a0 	.word	0x400200a0
 8006128:	400200b8 	.word	0x400200b8
 800612c:	40020410 	.word	0x40020410
 8006130:	40020428 	.word	0x40020428
 8006134:	40020440 	.word	0x40020440
 8006138:	40020458 	.word	0x40020458
 800613c:	40020470 	.word	0x40020470
 8006140:	40020488 	.word	0x40020488
 8006144:	400204a0 	.word	0x400204a0
 8006148:	400204b8 	.word	0x400204b8
 800614c:	58025408 	.word	0x58025408
 8006150:	5802541c 	.word	0x5802541c
 8006154:	58025430 	.word	0x58025430
 8006158:	58025444 	.word	0x58025444
 800615c:	58025458 	.word	0x58025458
 8006160:	5802546c 	.word	0x5802546c
 8006164:	58025480 	.word	0x58025480
 8006168:	58025494 	.word	0x58025494
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006180:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6d      	ldr	r2, [pc, #436]	; (800633c <HAL_DMA_Abort+0x444>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d04a      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a6b      	ldr	r2, [pc, #428]	; (8006340 <HAL_DMA_Abort+0x448>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d045      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a6a      	ldr	r2, [pc, #424]	; (8006344 <HAL_DMA_Abort+0x44c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d040      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a68      	ldr	r2, [pc, #416]	; (8006348 <HAL_DMA_Abort+0x450>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a67      	ldr	r2, [pc, #412]	; (800634c <HAL_DMA_Abort+0x454>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d036      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a65      	ldr	r2, [pc, #404]	; (8006350 <HAL_DMA_Abort+0x458>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d031      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a64      	ldr	r2, [pc, #400]	; (8006354 <HAL_DMA_Abort+0x45c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d02c      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a62      	ldr	r2, [pc, #392]	; (8006358 <HAL_DMA_Abort+0x460>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a61      	ldr	r2, [pc, #388]	; (800635c <HAL_DMA_Abort+0x464>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a5f      	ldr	r2, [pc, #380]	; (8006360 <HAL_DMA_Abort+0x468>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01d      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a5e      	ldr	r2, [pc, #376]	; (8006364 <HAL_DMA_Abort+0x46c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a5c      	ldr	r2, [pc, #368]	; (8006368 <HAL_DMA_Abort+0x470>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a5b      	ldr	r2, [pc, #364]	; (800636c <HAL_DMA_Abort+0x474>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a59      	ldr	r2, [pc, #356]	; (8006370 <HAL_DMA_Abort+0x478>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a58      	ldr	r2, [pc, #352]	; (8006374 <HAL_DMA_Abort+0x47c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_DMA_Abort+0x32a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a56      	ldr	r2, [pc, #344]	; (8006378 <HAL_DMA_Abort+0x480>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d108      	bne.n	8006234 <HAL_DMA_Abort+0x33c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e007      	b.n	8006244 <HAL_DMA_Abort+0x34c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006244:	e013      	b.n	800626e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006246:	f7fc ff45 	bl	80030d4 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b05      	cmp	r3, #5
 8006252:	d90c      	bls.n	800626e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2203      	movs	r2, #3
 800625e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e12d      	b.n	80064ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e5      	bne.n	8006246 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2f      	ldr	r2, [pc, #188]	; (800633c <HAL_DMA_Abort+0x444>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d04a      	beq.n	800631a <HAL_DMA_Abort+0x422>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <HAL_DMA_Abort+0x448>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d045      	beq.n	800631a <HAL_DMA_Abort+0x422>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2c      	ldr	r2, [pc, #176]	; (8006344 <HAL_DMA_Abort+0x44c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d040      	beq.n	800631a <HAL_DMA_Abort+0x422>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2a      	ldr	r2, [pc, #168]	; (8006348 <HAL_DMA_Abort+0x450>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d03b      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a29      	ldr	r2, [pc, #164]	; (800634c <HAL_DMA_Abort+0x454>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d036      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a27      	ldr	r2, [pc, #156]	; (8006350 <HAL_DMA_Abort+0x458>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d031      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a26      	ldr	r2, [pc, #152]	; (8006354 <HAL_DMA_Abort+0x45c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d02c      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a24      	ldr	r2, [pc, #144]	; (8006358 <HAL_DMA_Abort+0x460>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d027      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a23      	ldr	r2, [pc, #140]	; (800635c <HAL_DMA_Abort+0x464>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a21      	ldr	r2, [pc, #132]	; (8006360 <HAL_DMA_Abort+0x468>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01d      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a20      	ldr	r2, [pc, #128]	; (8006364 <HAL_DMA_Abort+0x46c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1e      	ldr	r2, [pc, #120]	; (8006368 <HAL_DMA_Abort+0x470>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1d      	ldr	r2, [pc, #116]	; (800636c <HAL_DMA_Abort+0x474>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_DMA_Abort+0x422>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <HAL_DMA_Abort+0x478>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_DMA_Abort+0x422>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1a      	ldr	r2, [pc, #104]	; (8006374 <HAL_DMA_Abort+0x47c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_DMA_Abort+0x422>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a18      	ldr	r2, [pc, #96]	; (8006378 <HAL_DMA_Abort+0x480>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d101      	bne.n	800631e <HAL_DMA_Abort+0x426>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <HAL_DMA_Abort+0x428>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d02b      	beq.n	800637c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006328:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632e:	f003 031f 	and.w	r3, r3, #31
 8006332:	223f      	movs	r2, #63	; 0x3f
 8006334:	409a      	lsls	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	609a      	str	r2, [r3, #8]
 800633a:	e02a      	b.n	8006392 <HAL_DMA_Abort+0x49a>
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	2201      	movs	r2, #1
 800638c:	409a      	lsls	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a4f      	ldr	r2, [pc, #316]	; (80064d4 <HAL_DMA_Abort+0x5dc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d072      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a4d      	ldr	r2, [pc, #308]	; (80064d8 <HAL_DMA_Abort+0x5e0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d06d      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a4c      	ldr	r2, [pc, #304]	; (80064dc <HAL_DMA_Abort+0x5e4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d068      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a4a      	ldr	r2, [pc, #296]	; (80064e0 <HAL_DMA_Abort+0x5e8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d063      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a49      	ldr	r2, [pc, #292]	; (80064e4 <HAL_DMA_Abort+0x5ec>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d05e      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a47      	ldr	r2, [pc, #284]	; (80064e8 <HAL_DMA_Abort+0x5f0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d059      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a46      	ldr	r2, [pc, #280]	; (80064ec <HAL_DMA_Abort+0x5f4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d054      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a44      	ldr	r2, [pc, #272]	; (80064f0 <HAL_DMA_Abort+0x5f8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d04f      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a43      	ldr	r2, [pc, #268]	; (80064f4 <HAL_DMA_Abort+0x5fc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d04a      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a41      	ldr	r2, [pc, #260]	; (80064f8 <HAL_DMA_Abort+0x600>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d045      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a40      	ldr	r2, [pc, #256]	; (80064fc <HAL_DMA_Abort+0x604>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d040      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a3e      	ldr	r2, [pc, #248]	; (8006500 <HAL_DMA_Abort+0x608>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d03b      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a3d      	ldr	r2, [pc, #244]	; (8006504 <HAL_DMA_Abort+0x60c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d036      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a3b      	ldr	r2, [pc, #236]	; (8006508 <HAL_DMA_Abort+0x610>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d031      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a3a      	ldr	r2, [pc, #232]	; (800650c <HAL_DMA_Abort+0x614>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d02c      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a38      	ldr	r2, [pc, #224]	; (8006510 <HAL_DMA_Abort+0x618>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d027      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a37      	ldr	r2, [pc, #220]	; (8006514 <HAL_DMA_Abort+0x61c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a35      	ldr	r2, [pc, #212]	; (8006518 <HAL_DMA_Abort+0x620>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01d      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a34      	ldr	r2, [pc, #208]	; (800651c <HAL_DMA_Abort+0x624>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a32      	ldr	r2, [pc, #200]	; (8006520 <HAL_DMA_Abort+0x628>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a31      	ldr	r2, [pc, #196]	; (8006524 <HAL_DMA_Abort+0x62c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <HAL_DMA_Abort+0x630>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2e      	ldr	r2, [pc, #184]	; (800652c <HAL_DMA_Abort+0x634>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_DMA_Abort+0x58a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2c      	ldr	r2, [pc, #176]	; (8006530 <HAL_DMA_Abort+0x638>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <HAL_DMA_Abort+0x58e>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <HAL_DMA_Abort+0x590>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d015      	beq.n	80064b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006494:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00c      	beq.n	80064b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40020010 	.word	0x40020010
 80064d8:	40020028 	.word	0x40020028
 80064dc:	40020040 	.word	0x40020040
 80064e0:	40020058 	.word	0x40020058
 80064e4:	40020070 	.word	0x40020070
 80064e8:	40020088 	.word	0x40020088
 80064ec:	400200a0 	.word	0x400200a0
 80064f0:	400200b8 	.word	0x400200b8
 80064f4:	40020410 	.word	0x40020410
 80064f8:	40020428 	.word	0x40020428
 80064fc:	40020440 	.word	0x40020440
 8006500:	40020458 	.word	0x40020458
 8006504:	40020470 	.word	0x40020470
 8006508:	40020488 	.word	0x40020488
 800650c:	400204a0 	.word	0x400204a0
 8006510:	400204b8 	.word	0x400204b8
 8006514:	58025408 	.word	0x58025408
 8006518:	5802541c 	.word	0x5802541c
 800651c:	58025430 	.word	0x58025430
 8006520:	58025444 	.word	0x58025444
 8006524:	58025458 	.word	0x58025458
 8006528:	5802546c 	.word	0x5802546c
 800652c:	58025480 	.word	0x58025480
 8006530:	58025494 	.word	0x58025494

08006534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e237      	b.n	80069b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d004      	beq.n	800655c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2280      	movs	r2, #128	; 0x80
 8006556:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e22c      	b.n	80069b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a5c      	ldr	r2, [pc, #368]	; (80066d4 <HAL_DMA_Abort_IT+0x1a0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d04a      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a5b      	ldr	r2, [pc, #364]	; (80066d8 <HAL_DMA_Abort_IT+0x1a4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d045      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a59      	ldr	r2, [pc, #356]	; (80066dc <HAL_DMA_Abort_IT+0x1a8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d040      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a58      	ldr	r2, [pc, #352]	; (80066e0 <HAL_DMA_Abort_IT+0x1ac>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d03b      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a56      	ldr	r2, [pc, #344]	; (80066e4 <HAL_DMA_Abort_IT+0x1b0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d036      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a55      	ldr	r2, [pc, #340]	; (80066e8 <HAL_DMA_Abort_IT+0x1b4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d031      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a53      	ldr	r2, [pc, #332]	; (80066ec <HAL_DMA_Abort_IT+0x1b8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d02c      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a52      	ldr	r2, [pc, #328]	; (80066f0 <HAL_DMA_Abort_IT+0x1bc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d027      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a50      	ldr	r2, [pc, #320]	; (80066f4 <HAL_DMA_Abort_IT+0x1c0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d022      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a4f      	ldr	r2, [pc, #316]	; (80066f8 <HAL_DMA_Abort_IT+0x1c4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d01d      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a4d      	ldr	r2, [pc, #308]	; (80066fc <HAL_DMA_Abort_IT+0x1c8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d018      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a4c      	ldr	r2, [pc, #304]	; (8006700 <HAL_DMA_Abort_IT+0x1cc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d013      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a4a      	ldr	r2, [pc, #296]	; (8006704 <HAL_DMA_Abort_IT+0x1d0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00e      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a49      	ldr	r2, [pc, #292]	; (8006708 <HAL_DMA_Abort_IT+0x1d4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d009      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a47      	ldr	r2, [pc, #284]	; (800670c <HAL_DMA_Abort_IT+0x1d8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d004      	beq.n	80065fc <HAL_DMA_Abort_IT+0xc8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a46      	ldr	r2, [pc, #280]	; (8006710 <HAL_DMA_Abort_IT+0x1dc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d101      	bne.n	8006600 <HAL_DMA_Abort_IT+0xcc>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <HAL_DMA_Abort_IT+0xce>
 8006600:	2300      	movs	r3, #0
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 8086 	beq.w	8006714 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2204      	movs	r2, #4
 800660c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2f      	ldr	r2, [pc, #188]	; (80066d4 <HAL_DMA_Abort_IT+0x1a0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d04a      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2e      	ldr	r2, [pc, #184]	; (80066d8 <HAL_DMA_Abort_IT+0x1a4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d045      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2c      	ldr	r2, [pc, #176]	; (80066dc <HAL_DMA_Abort_IT+0x1a8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d040      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2b      	ldr	r2, [pc, #172]	; (80066e0 <HAL_DMA_Abort_IT+0x1ac>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d03b      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a29      	ldr	r2, [pc, #164]	; (80066e4 <HAL_DMA_Abort_IT+0x1b0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d036      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a28      	ldr	r2, [pc, #160]	; (80066e8 <HAL_DMA_Abort_IT+0x1b4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d031      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a26      	ldr	r2, [pc, #152]	; (80066ec <HAL_DMA_Abort_IT+0x1b8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d02c      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a25      	ldr	r2, [pc, #148]	; (80066f0 <HAL_DMA_Abort_IT+0x1bc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d027      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a23      	ldr	r2, [pc, #140]	; (80066f4 <HAL_DMA_Abort_IT+0x1c0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d022      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a22      	ldr	r2, [pc, #136]	; (80066f8 <HAL_DMA_Abort_IT+0x1c4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d01d      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a20      	ldr	r2, [pc, #128]	; (80066fc <HAL_DMA_Abort_IT+0x1c8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d018      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1f      	ldr	r2, [pc, #124]	; (8006700 <HAL_DMA_Abort_IT+0x1cc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <HAL_DMA_Abort_IT+0x1d0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00e      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1c      	ldr	r2, [pc, #112]	; (8006708 <HAL_DMA_Abort_IT+0x1d4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1a      	ldr	r2, [pc, #104]	; (800670c <HAL_DMA_Abort_IT+0x1d8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <HAL_DMA_Abort_IT+0x17c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a19      	ldr	r2, [pc, #100]	; (8006710 <HAL_DMA_Abort_IT+0x1dc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d108      	bne.n	80066c2 <HAL_DMA_Abort_IT+0x18e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	e178      	b.n	80069b4 <HAL_DMA_Abort_IT+0x480>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e16f      	b.n	80069b4 <HAL_DMA_Abort_IT+0x480>
 80066d4:	40020010 	.word	0x40020010
 80066d8:	40020028 	.word	0x40020028
 80066dc:	40020040 	.word	0x40020040
 80066e0:	40020058 	.word	0x40020058
 80066e4:	40020070 	.word	0x40020070
 80066e8:	40020088 	.word	0x40020088
 80066ec:	400200a0 	.word	0x400200a0
 80066f0:	400200b8 	.word	0x400200b8
 80066f4:	40020410 	.word	0x40020410
 80066f8:	40020428 	.word	0x40020428
 80066fc:	40020440 	.word	0x40020440
 8006700:	40020458 	.word	0x40020458
 8006704:	40020470 	.word	0x40020470
 8006708:	40020488 	.word	0x40020488
 800670c:	400204a0 	.word	0x400204a0
 8006710:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 020e 	bic.w	r2, r2, #14
 8006722:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a6c      	ldr	r2, [pc, #432]	; (80068dc <HAL_DMA_Abort_IT+0x3a8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d04a      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a6b      	ldr	r2, [pc, #428]	; (80068e0 <HAL_DMA_Abort_IT+0x3ac>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d045      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a69      	ldr	r2, [pc, #420]	; (80068e4 <HAL_DMA_Abort_IT+0x3b0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d040      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a68      	ldr	r2, [pc, #416]	; (80068e8 <HAL_DMA_Abort_IT+0x3b4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d03b      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a66      	ldr	r2, [pc, #408]	; (80068ec <HAL_DMA_Abort_IT+0x3b8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d036      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a65      	ldr	r2, [pc, #404]	; (80068f0 <HAL_DMA_Abort_IT+0x3bc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d031      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a63      	ldr	r2, [pc, #396]	; (80068f4 <HAL_DMA_Abort_IT+0x3c0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d02c      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a62      	ldr	r2, [pc, #392]	; (80068f8 <HAL_DMA_Abort_IT+0x3c4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d027      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a60      	ldr	r2, [pc, #384]	; (80068fc <HAL_DMA_Abort_IT+0x3c8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a5f      	ldr	r2, [pc, #380]	; (8006900 <HAL_DMA_Abort_IT+0x3cc>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d01d      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a5d      	ldr	r2, [pc, #372]	; (8006904 <HAL_DMA_Abort_IT+0x3d0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a5c      	ldr	r2, [pc, #368]	; (8006908 <HAL_DMA_Abort_IT+0x3d4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a5a      	ldr	r2, [pc, #360]	; (800690c <HAL_DMA_Abort_IT+0x3d8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a59      	ldr	r2, [pc, #356]	; (8006910 <HAL_DMA_Abort_IT+0x3dc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a57      	ldr	r2, [pc, #348]	; (8006914 <HAL_DMA_Abort_IT+0x3e0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_DMA_Abort_IT+0x290>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a56      	ldr	r2, [pc, #344]	; (8006918 <HAL_DMA_Abort_IT+0x3e4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d108      	bne.n	80067d6 <HAL_DMA_Abort_IT+0x2a2>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e007      	b.n	80067e6 <HAL_DMA_Abort_IT+0x2b2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3c      	ldr	r2, [pc, #240]	; (80068dc <HAL_DMA_Abort_IT+0x3a8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d072      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3a      	ldr	r2, [pc, #232]	; (80068e0 <HAL_DMA_Abort_IT+0x3ac>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d06d      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a39      	ldr	r2, [pc, #228]	; (80068e4 <HAL_DMA_Abort_IT+0x3b0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d068      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a37      	ldr	r2, [pc, #220]	; (80068e8 <HAL_DMA_Abort_IT+0x3b4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d063      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a36      	ldr	r2, [pc, #216]	; (80068ec <HAL_DMA_Abort_IT+0x3b8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d05e      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a34      	ldr	r2, [pc, #208]	; (80068f0 <HAL_DMA_Abort_IT+0x3bc>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d059      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a33      	ldr	r2, [pc, #204]	; (80068f4 <HAL_DMA_Abort_IT+0x3c0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d054      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a31      	ldr	r2, [pc, #196]	; (80068f8 <HAL_DMA_Abort_IT+0x3c4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d04f      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a30      	ldr	r2, [pc, #192]	; (80068fc <HAL_DMA_Abort_IT+0x3c8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d04a      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2e      	ldr	r2, [pc, #184]	; (8006900 <HAL_DMA_Abort_IT+0x3cc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d045      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2d      	ldr	r2, [pc, #180]	; (8006904 <HAL_DMA_Abort_IT+0x3d0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d040      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a2b      	ldr	r2, [pc, #172]	; (8006908 <HAL_DMA_Abort_IT+0x3d4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d03b      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a2a      	ldr	r2, [pc, #168]	; (800690c <HAL_DMA_Abort_IT+0x3d8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d036      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a28      	ldr	r2, [pc, #160]	; (8006910 <HAL_DMA_Abort_IT+0x3dc>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d031      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a27      	ldr	r2, [pc, #156]	; (8006914 <HAL_DMA_Abort_IT+0x3e0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d02c      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a25      	ldr	r2, [pc, #148]	; (8006918 <HAL_DMA_Abort_IT+0x3e4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d027      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a24      	ldr	r2, [pc, #144]	; (800691c <HAL_DMA_Abort_IT+0x3e8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a22      	ldr	r2, [pc, #136]	; (8006920 <HAL_DMA_Abort_IT+0x3ec>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01d      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a21      	ldr	r2, [pc, #132]	; (8006924 <HAL_DMA_Abort_IT+0x3f0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <HAL_DMA_Abort_IT+0x3f4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1e      	ldr	r2, [pc, #120]	; (800692c <HAL_DMA_Abort_IT+0x3f8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <HAL_DMA_Abort_IT+0x3fc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <HAL_DMA_Abort_IT+0x400>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_DMA_Abort_IT+0x3a2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <HAL_DMA_Abort_IT+0x404>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d132      	bne.n	800693c <HAL_DMA_Abort_IT+0x408>
 80068d6:	2301      	movs	r3, #1
 80068d8:	e031      	b.n	800693e <HAL_DMA_Abort_IT+0x40a>
 80068da:	bf00      	nop
 80068dc:	40020010 	.word	0x40020010
 80068e0:	40020028 	.word	0x40020028
 80068e4:	40020040 	.word	0x40020040
 80068e8:	40020058 	.word	0x40020058
 80068ec:	40020070 	.word	0x40020070
 80068f0:	40020088 	.word	0x40020088
 80068f4:	400200a0 	.word	0x400200a0
 80068f8:	400200b8 	.word	0x400200b8
 80068fc:	40020410 	.word	0x40020410
 8006900:	40020428 	.word	0x40020428
 8006904:	40020440 	.word	0x40020440
 8006908:	40020458 	.word	0x40020458
 800690c:	40020470 	.word	0x40020470
 8006910:	40020488 	.word	0x40020488
 8006914:	400204a0 	.word	0x400204a0
 8006918:	400204b8 	.word	0x400204b8
 800691c:	58025408 	.word	0x58025408
 8006920:	5802541c 	.word	0x5802541c
 8006924:	58025430 	.word	0x58025430
 8006928:	58025444 	.word	0x58025444
 800692c:	58025458 	.word	0x58025458
 8006930:	5802546c 	.word	0x5802546c
 8006934:	58025480 	.word	0x58025480
 8006938:	58025494 	.word	0x58025494
 800693c:	2300      	movs	r3, #0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d028      	beq.n	8006994 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006950:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006956:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	2201      	movs	r2, #1
 8006962:	409a      	lsls	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006970:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00c      	beq.n	8006994 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006988:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006992:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop

080069c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	; 0x28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069cc:	4b67      	ldr	r3, [pc, #412]	; (8006b6c <HAL_DMA_IRQHandler+0x1ac>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a67      	ldr	r2, [pc, #412]	; (8006b70 <HAL_DMA_IRQHandler+0x1b0>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	0a9b      	lsrs	r3, r3, #10
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a5f      	ldr	r2, [pc, #380]	; (8006b74 <HAL_DMA_IRQHandler+0x1b4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d04a      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a5d      	ldr	r2, [pc, #372]	; (8006b78 <HAL_DMA_IRQHandler+0x1b8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d045      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a5c      	ldr	r2, [pc, #368]	; (8006b7c <HAL_DMA_IRQHandler+0x1bc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d040      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a5a      	ldr	r2, [pc, #360]	; (8006b80 <HAL_DMA_IRQHandler+0x1c0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d03b      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a59      	ldr	r2, [pc, #356]	; (8006b84 <HAL_DMA_IRQHandler+0x1c4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d036      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a57      	ldr	r2, [pc, #348]	; (8006b88 <HAL_DMA_IRQHandler+0x1c8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d031      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a56      	ldr	r2, [pc, #344]	; (8006b8c <HAL_DMA_IRQHandler+0x1cc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d02c      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a54      	ldr	r2, [pc, #336]	; (8006b90 <HAL_DMA_IRQHandler+0x1d0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d027      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a53      	ldr	r2, [pc, #332]	; (8006b94 <HAL_DMA_IRQHandler+0x1d4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d022      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a51      	ldr	r2, [pc, #324]	; (8006b98 <HAL_DMA_IRQHandler+0x1d8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01d      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a50      	ldr	r2, [pc, #320]	; (8006b9c <HAL_DMA_IRQHandler+0x1dc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d018      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a4e      	ldr	r2, [pc, #312]	; (8006ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a4d      	ldr	r2, [pc, #308]	; (8006ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00e      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a4b      	ldr	r2, [pc, #300]	; (8006ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d009      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a4a      	ldr	r2, [pc, #296]	; (8006bac <HAL_DMA_IRQHandler+0x1ec>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d004      	beq.n	8006a92 <HAL_DMA_IRQHandler+0xd2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a48      	ldr	r2, [pc, #288]	; (8006bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d101      	bne.n	8006a96 <HAL_DMA_IRQHandler+0xd6>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <HAL_DMA_IRQHandler+0xd8>
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 842b 	beq.w	80072f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	409a      	lsls	r2, r3
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80a2 	beq.w	8006bf8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a2e      	ldr	r2, [pc, #184]	; (8006b74 <HAL_DMA_IRQHandler+0x1b4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d04a      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a2d      	ldr	r2, [pc, #180]	; (8006b78 <HAL_DMA_IRQHandler+0x1b8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d045      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a2b      	ldr	r2, [pc, #172]	; (8006b7c <HAL_DMA_IRQHandler+0x1bc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d040      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2a      	ldr	r2, [pc, #168]	; (8006b80 <HAL_DMA_IRQHandler+0x1c0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d03b      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a28      	ldr	r2, [pc, #160]	; (8006b84 <HAL_DMA_IRQHandler+0x1c4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d036      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a27      	ldr	r2, [pc, #156]	; (8006b88 <HAL_DMA_IRQHandler+0x1c8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d031      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <HAL_DMA_IRQHandler+0x1cc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d02c      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a24      	ldr	r2, [pc, #144]	; (8006b90 <HAL_DMA_IRQHandler+0x1d0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d027      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a22      	ldr	r2, [pc, #136]	; (8006b94 <HAL_DMA_IRQHandler+0x1d4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d022      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a21      	ldr	r2, [pc, #132]	; (8006b98 <HAL_DMA_IRQHandler+0x1d8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d01d      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1f      	ldr	r2, [pc, #124]	; (8006b9c <HAL_DMA_IRQHandler+0x1dc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d018      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <HAL_DMA_IRQHandler+0x1e0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d013      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1c      	ldr	r2, [pc, #112]	; (8006ba4 <HAL_DMA_IRQHandler+0x1e4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d00e      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1b      	ldr	r2, [pc, #108]	; (8006ba8 <HAL_DMA_IRQHandler+0x1e8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d009      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a19      	ldr	r2, [pc, #100]	; (8006bac <HAL_DMA_IRQHandler+0x1ec>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x194>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a18      	ldr	r2, [pc, #96]	; (8006bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d12f      	bne.n	8006bb4 <HAL_DMA_IRQHandler+0x1f4>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	bf14      	ite	ne
 8006b62:	2301      	movne	r3, #1
 8006b64:	2300      	moveq	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	e02e      	b.n	8006bc8 <HAL_DMA_IRQHandler+0x208>
 8006b6a:	bf00      	nop
 8006b6c:	24000088 	.word	0x24000088
 8006b70:	1b4e81b5 	.word	0x1b4e81b5
 8006b74:	40020010 	.word	0x40020010
 8006b78:	40020028 	.word	0x40020028
 8006b7c:	40020040 	.word	0x40020040
 8006b80:	40020058 	.word	0x40020058
 8006b84:	40020070 	.word	0x40020070
 8006b88:	40020088 	.word	0x40020088
 8006b8c:	400200a0 	.word	0x400200a0
 8006b90:	400200b8 	.word	0x400200b8
 8006b94:	40020410 	.word	0x40020410
 8006b98:	40020428 	.word	0x40020428
 8006b9c:	40020440 	.word	0x40020440
 8006ba0:	40020458 	.word	0x40020458
 8006ba4:	40020470 	.word	0x40020470
 8006ba8:	40020488 	.word	0x40020488
 8006bac:	400204a0 	.word	0x400204a0
 8006bb0:	400204b8 	.word	0x400204b8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf14      	ite	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	2300      	moveq	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d015      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f022 0204 	bic.w	r2, r2, #4
 8006bda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	2208      	movs	r2, #8
 8006be6:	409a      	lsls	r2, r3
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf0:	f043 0201 	orr.w	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	fa22 f303 	lsr.w	r3, r2, r3
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d06e      	beq.n	8006cec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a69      	ldr	r2, [pc, #420]	; (8006db8 <HAL_DMA_IRQHandler+0x3f8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d04a      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a67      	ldr	r2, [pc, #412]	; (8006dbc <HAL_DMA_IRQHandler+0x3fc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d045      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a66      	ldr	r2, [pc, #408]	; (8006dc0 <HAL_DMA_IRQHandler+0x400>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d040      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a64      	ldr	r2, [pc, #400]	; (8006dc4 <HAL_DMA_IRQHandler+0x404>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d03b      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a63      	ldr	r2, [pc, #396]	; (8006dc8 <HAL_DMA_IRQHandler+0x408>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d036      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a61      	ldr	r2, [pc, #388]	; (8006dcc <HAL_DMA_IRQHandler+0x40c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d031      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a60      	ldr	r2, [pc, #384]	; (8006dd0 <HAL_DMA_IRQHandler+0x410>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d02c      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a5e      	ldr	r2, [pc, #376]	; (8006dd4 <HAL_DMA_IRQHandler+0x414>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d027      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a5d      	ldr	r2, [pc, #372]	; (8006dd8 <HAL_DMA_IRQHandler+0x418>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d022      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a5b      	ldr	r2, [pc, #364]	; (8006ddc <HAL_DMA_IRQHandler+0x41c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d01d      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a5a      	ldr	r2, [pc, #360]	; (8006de0 <HAL_DMA_IRQHandler+0x420>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d018      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a58      	ldr	r2, [pc, #352]	; (8006de4 <HAL_DMA_IRQHandler+0x424>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d013      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a57      	ldr	r2, [pc, #348]	; (8006de8 <HAL_DMA_IRQHandler+0x428>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00e      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a55      	ldr	r2, [pc, #340]	; (8006dec <HAL_DMA_IRQHandler+0x42c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d009      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a54      	ldr	r2, [pc, #336]	; (8006df0 <HAL_DMA_IRQHandler+0x430>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d004      	beq.n	8006cae <HAL_DMA_IRQHandler+0x2ee>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a52      	ldr	r2, [pc, #328]	; (8006df4 <HAL_DMA_IRQHandler+0x434>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d10a      	bne.n	8006cc4 <HAL_DMA_IRQHandler+0x304>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	e003      	b.n	8006ccc <HAL_DMA_IRQHandler+0x30c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00d      	beq.n	8006cec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2201      	movs	r2, #1
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce4:	f043 0202 	orr.w	r2, r3, #2
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	409a      	lsls	r2, r3
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 808f 	beq.w	8006e20 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a2c      	ldr	r2, [pc, #176]	; (8006db8 <HAL_DMA_IRQHandler+0x3f8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d04a      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2a      	ldr	r2, [pc, #168]	; (8006dbc <HAL_DMA_IRQHandler+0x3fc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d045      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a29      	ldr	r2, [pc, #164]	; (8006dc0 <HAL_DMA_IRQHandler+0x400>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d040      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a27      	ldr	r2, [pc, #156]	; (8006dc4 <HAL_DMA_IRQHandler+0x404>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d03b      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a26      	ldr	r2, [pc, #152]	; (8006dc8 <HAL_DMA_IRQHandler+0x408>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d036      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a24      	ldr	r2, [pc, #144]	; (8006dcc <HAL_DMA_IRQHandler+0x40c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d031      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a23      	ldr	r2, [pc, #140]	; (8006dd0 <HAL_DMA_IRQHandler+0x410>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d02c      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a21      	ldr	r2, [pc, #132]	; (8006dd4 <HAL_DMA_IRQHandler+0x414>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d027      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a20      	ldr	r2, [pc, #128]	; (8006dd8 <HAL_DMA_IRQHandler+0x418>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d022      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <HAL_DMA_IRQHandler+0x41c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d01d      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1d      	ldr	r2, [pc, #116]	; (8006de0 <HAL_DMA_IRQHandler+0x420>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d018      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1b      	ldr	r2, [pc, #108]	; (8006de4 <HAL_DMA_IRQHandler+0x424>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d013      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1a      	ldr	r2, [pc, #104]	; (8006de8 <HAL_DMA_IRQHandler+0x428>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00e      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a18      	ldr	r2, [pc, #96]	; (8006dec <HAL_DMA_IRQHandler+0x42c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d009      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a17      	ldr	r2, [pc, #92]	; (8006df0 <HAL_DMA_IRQHandler+0x430>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_DMA_IRQHandler+0x3e2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a15      	ldr	r2, [pc, #84]	; (8006df4 <HAL_DMA_IRQHandler+0x434>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d12a      	bne.n	8006df8 <HAL_DMA_IRQHandler+0x438>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bf14      	ite	ne
 8006db0:	2301      	movne	r3, #1
 8006db2:	2300      	moveq	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	e023      	b.n	8006e00 <HAL_DMA_IRQHandler+0x440>
 8006db8:	40020010 	.word	0x40020010
 8006dbc:	40020028 	.word	0x40020028
 8006dc0:	40020040 	.word	0x40020040
 8006dc4:	40020058 	.word	0x40020058
 8006dc8:	40020070 	.word	0x40020070
 8006dcc:	40020088 	.word	0x40020088
 8006dd0:	400200a0 	.word	0x400200a0
 8006dd4:	400200b8 	.word	0x400200b8
 8006dd8:	40020410 	.word	0x40020410
 8006ddc:	40020428 	.word	0x40020428
 8006de0:	40020440 	.word	0x40020440
 8006de4:	40020458 	.word	0x40020458
 8006de8:	40020470 	.word	0x40020470
 8006dec:	40020488 	.word	0x40020488
 8006df0:	400204a0 	.word	0x400204a0
 8006df4:	400204b8 	.word	0x400204b8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e18:	f043 0204 	orr.w	r2, r3, #4
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	2210      	movs	r2, #16
 8006e2a:	409a      	lsls	r2, r3
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80a6 	beq.w	8006f82 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a85      	ldr	r2, [pc, #532]	; (8007050 <HAL_DMA_IRQHandler+0x690>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d04a      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a83      	ldr	r2, [pc, #524]	; (8007054 <HAL_DMA_IRQHandler+0x694>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d045      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a82      	ldr	r2, [pc, #520]	; (8007058 <HAL_DMA_IRQHandler+0x698>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d040      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a80      	ldr	r2, [pc, #512]	; (800705c <HAL_DMA_IRQHandler+0x69c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d03b      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a7f      	ldr	r2, [pc, #508]	; (8007060 <HAL_DMA_IRQHandler+0x6a0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d036      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a7d      	ldr	r2, [pc, #500]	; (8007064 <HAL_DMA_IRQHandler+0x6a4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d031      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a7c      	ldr	r2, [pc, #496]	; (8007068 <HAL_DMA_IRQHandler+0x6a8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d02c      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a7a      	ldr	r2, [pc, #488]	; (800706c <HAL_DMA_IRQHandler+0x6ac>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d027      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a79      	ldr	r2, [pc, #484]	; (8007070 <HAL_DMA_IRQHandler+0x6b0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a77      	ldr	r2, [pc, #476]	; (8007074 <HAL_DMA_IRQHandler+0x6b4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01d      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a76      	ldr	r2, [pc, #472]	; (8007078 <HAL_DMA_IRQHandler+0x6b8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a74      	ldr	r2, [pc, #464]	; (800707c <HAL_DMA_IRQHandler+0x6bc>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a73      	ldr	r2, [pc, #460]	; (8007080 <HAL_DMA_IRQHandler+0x6c0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a71      	ldr	r2, [pc, #452]	; (8007084 <HAL_DMA_IRQHandler+0x6c4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a70      	ldr	r2, [pc, #448]	; (8007088 <HAL_DMA_IRQHandler+0x6c8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x516>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a6e      	ldr	r2, [pc, #440]	; (800708c <HAL_DMA_IRQHandler+0x6cc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d10a      	bne.n	8006eec <HAL_DMA_IRQHandler+0x52c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bf14      	ite	ne
 8006ee4:	2301      	movne	r3, #1
 8006ee6:	2300      	moveq	r3, #0
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	e009      	b.n	8006f00 <HAL_DMA_IRQHandler+0x540>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	2300      	moveq	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d03e      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f08:	f003 031f 	and.w	r3, r3, #31
 8006f0c:	2210      	movs	r2, #16
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d018      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d108      	bne.n	8006f42 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d024      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
 8006f40:	e01f      	b.n	8006f82 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01b      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
 8006f52:	e016      	b.n	8006f82 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d107      	bne.n	8006f72 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0208 	bic.w	r2, r2, #8
 8006f70:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	409a      	lsls	r2, r3
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8110 	beq.w	80071b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2c      	ldr	r2, [pc, #176]	; (8007050 <HAL_DMA_IRQHandler+0x690>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d04a      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2b      	ldr	r2, [pc, #172]	; (8007054 <HAL_DMA_IRQHandler+0x694>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d045      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a29      	ldr	r2, [pc, #164]	; (8007058 <HAL_DMA_IRQHandler+0x698>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d040      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a28      	ldr	r2, [pc, #160]	; (800705c <HAL_DMA_IRQHandler+0x69c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d03b      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a26      	ldr	r2, [pc, #152]	; (8007060 <HAL_DMA_IRQHandler+0x6a0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d036      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a25      	ldr	r2, [pc, #148]	; (8007064 <HAL_DMA_IRQHandler+0x6a4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d031      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a23      	ldr	r2, [pc, #140]	; (8007068 <HAL_DMA_IRQHandler+0x6a8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d02c      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a22      	ldr	r2, [pc, #136]	; (800706c <HAL_DMA_IRQHandler+0x6ac>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d027      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a20      	ldr	r2, [pc, #128]	; (8007070 <HAL_DMA_IRQHandler+0x6b0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d022      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1f      	ldr	r2, [pc, #124]	; (8007074 <HAL_DMA_IRQHandler+0x6b4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d01d      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1d      	ldr	r2, [pc, #116]	; (8007078 <HAL_DMA_IRQHandler+0x6b8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d018      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1c      	ldr	r2, [pc, #112]	; (800707c <HAL_DMA_IRQHandler+0x6bc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1a      	ldr	r2, [pc, #104]	; (8007080 <HAL_DMA_IRQHandler+0x6c0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a19      	ldr	r2, [pc, #100]	; (8007084 <HAL_DMA_IRQHandler+0x6c4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d009      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a17      	ldr	r2, [pc, #92]	; (8007088 <HAL_DMA_IRQHandler+0x6c8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <HAL_DMA_IRQHandler+0x678>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a16      	ldr	r2, [pc, #88]	; (800708c <HAL_DMA_IRQHandler+0x6cc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d12b      	bne.n	8007090 <HAL_DMA_IRQHandler+0x6d0>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b00      	cmp	r3, #0
 8007044:	bf14      	ite	ne
 8007046:	2301      	movne	r3, #1
 8007048:	2300      	moveq	r3, #0
 800704a:	b2db      	uxtb	r3, r3
 800704c:	e02a      	b.n	80070a4 <HAL_DMA_IRQHandler+0x6e4>
 800704e:	bf00      	nop
 8007050:	40020010 	.word	0x40020010
 8007054:	40020028 	.word	0x40020028
 8007058:	40020040 	.word	0x40020040
 800705c:	40020058 	.word	0x40020058
 8007060:	40020070 	.word	0x40020070
 8007064:	40020088 	.word	0x40020088
 8007068:	400200a0 	.word	0x400200a0
 800706c:	400200b8 	.word	0x400200b8
 8007070:	40020410 	.word	0x40020410
 8007074:	40020428 	.word	0x40020428
 8007078:	40020440 	.word	0x40020440
 800707c:	40020458 	.word	0x40020458
 8007080:	40020470 	.word	0x40020470
 8007084:	40020488 	.word	0x40020488
 8007088:	400204a0 	.word	0x400204a0
 800708c:	400204b8 	.word	0x400204b8
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	bf14      	ite	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	2300      	moveq	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8087 	beq.w	80071b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	2220      	movs	r2, #32
 80070b4:	409a      	lsls	r2, r3
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d139      	bne.n	800713a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0216 	bic.w	r2, r2, #22
 80070d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695a      	ldr	r2, [r3, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <HAL_DMA_IRQHandler+0x736>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d007      	beq.n	8007106 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0208 	bic.w	r2, r2, #8
 8007104:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	223f      	movs	r2, #63	; 0x3f
 8007110:	409a      	lsls	r2, r3
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 834a 	beq.w	80077c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
          }
          return;
 8007138:	e344      	b.n	80077c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d018      	beq.n	800717a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d108      	bne.n	8007168 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	2b00      	cmp	r3, #0
 800715c:	d02c      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
 8007166:	e027      	b.n	80071b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d023      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
 8007178:	e01e      	b.n	80071b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10f      	bne.n	80071a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0210 	bic.w	r2, r2, #16
 8007196:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8306 	beq.w	80077ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8088 	beq.w	80072e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2204      	movs	r2, #4
 80071d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a7a      	ldr	r2, [pc, #488]	; (80073c8 <HAL_DMA_IRQHandler+0xa08>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d04a      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a79      	ldr	r2, [pc, #484]	; (80073cc <HAL_DMA_IRQHandler+0xa0c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d045      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a77      	ldr	r2, [pc, #476]	; (80073d0 <HAL_DMA_IRQHandler+0xa10>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d040      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a76      	ldr	r2, [pc, #472]	; (80073d4 <HAL_DMA_IRQHandler+0xa14>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d03b      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a74      	ldr	r2, [pc, #464]	; (80073d8 <HAL_DMA_IRQHandler+0xa18>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d036      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a73      	ldr	r2, [pc, #460]	; (80073dc <HAL_DMA_IRQHandler+0xa1c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d031      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a71      	ldr	r2, [pc, #452]	; (80073e0 <HAL_DMA_IRQHandler+0xa20>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d02c      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a70      	ldr	r2, [pc, #448]	; (80073e4 <HAL_DMA_IRQHandler+0xa24>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d027      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a6e      	ldr	r2, [pc, #440]	; (80073e8 <HAL_DMA_IRQHandler+0xa28>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d022      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a6d      	ldr	r2, [pc, #436]	; (80073ec <HAL_DMA_IRQHandler+0xa2c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a6b      	ldr	r2, [pc, #428]	; (80073f0 <HAL_DMA_IRQHandler+0xa30>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a6a      	ldr	r2, [pc, #424]	; (80073f4 <HAL_DMA_IRQHandler+0xa34>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a68      	ldr	r2, [pc, #416]	; (80073f8 <HAL_DMA_IRQHandler+0xa38>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a67      	ldr	r2, [pc, #412]	; (80073fc <HAL_DMA_IRQHandler+0xa3c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a65      	ldr	r2, [pc, #404]	; (8007400 <HAL_DMA_IRQHandler+0xa40>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_DMA_IRQHandler+0x8b8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a64      	ldr	r2, [pc, #400]	; (8007404 <HAL_DMA_IRQHandler+0xa44>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d108      	bne.n	800728a <HAL_DMA_IRQHandler+0x8ca>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e007      	b.n	800729a <HAL_DMA_IRQHandler+0x8da>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3301      	adds	r3, #1
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d307      	bcc.n	80072b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1f2      	bne.n	800729a <HAL_DMA_IRQHandler+0x8da>
 80072b4:	e000      	b.n	80072b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80072b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2203      	movs	r2, #3
 80072ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80072ce:	e003      	b.n	80072d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8272 	beq.w	80077ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
 80072f2:	e26c      	b.n	80077ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a43      	ldr	r2, [pc, #268]	; (8007408 <HAL_DMA_IRQHandler+0xa48>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d022      	beq.n	8007344 <HAL_DMA_IRQHandler+0x984>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a42      	ldr	r2, [pc, #264]	; (800740c <HAL_DMA_IRQHandler+0xa4c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d01d      	beq.n	8007344 <HAL_DMA_IRQHandler+0x984>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a40      	ldr	r2, [pc, #256]	; (8007410 <HAL_DMA_IRQHandler+0xa50>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d018      	beq.n	8007344 <HAL_DMA_IRQHandler+0x984>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a3f      	ldr	r2, [pc, #252]	; (8007414 <HAL_DMA_IRQHandler+0xa54>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d013      	beq.n	8007344 <HAL_DMA_IRQHandler+0x984>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a3d      	ldr	r2, [pc, #244]	; (8007418 <HAL_DMA_IRQHandler+0xa58>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d00e      	beq.n	8007344 <HAL_DMA_IRQHandler+0x984>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a3c      	ldr	r2, [pc, #240]	; (800741c <HAL_DMA_IRQHandler+0xa5c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d009      	beq.n	8007344 <HAL_DMA_IRQHandler+0x984>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a3a      	ldr	r2, [pc, #232]	; (8007420 <HAL_DMA_IRQHandler+0xa60>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <HAL_DMA_IRQHandler+0x984>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a39      	ldr	r2, [pc, #228]	; (8007424 <HAL_DMA_IRQHandler+0xa64>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d101      	bne.n	8007348 <HAL_DMA_IRQHandler+0x988>
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <HAL_DMA_IRQHandler+0x98a>
 8007348:	2300      	movs	r3, #0
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 823f 	beq.w	80077ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	2204      	movs	r2, #4
 8007362:	409a      	lsls	r2, r3
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	4013      	ands	r3, r2
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80cd 	beq.w	8007508 <HAL_DMA_IRQHandler+0xb48>
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80c7 	beq.w	8007508 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2204      	movs	r2, #4
 8007384:	409a      	lsls	r2, r3
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d049      	beq.n	8007428 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8210 	beq.w	80077c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073b0:	e20a      	b.n	80077c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 8206 	beq.w	80077c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073c4:	e200      	b.n	80077c8 <HAL_DMA_IRQHandler+0xe08>
 80073c6:	bf00      	nop
 80073c8:	40020010 	.word	0x40020010
 80073cc:	40020028 	.word	0x40020028
 80073d0:	40020040 	.word	0x40020040
 80073d4:	40020058 	.word	0x40020058
 80073d8:	40020070 	.word	0x40020070
 80073dc:	40020088 	.word	0x40020088
 80073e0:	400200a0 	.word	0x400200a0
 80073e4:	400200b8 	.word	0x400200b8
 80073e8:	40020410 	.word	0x40020410
 80073ec:	40020428 	.word	0x40020428
 80073f0:	40020440 	.word	0x40020440
 80073f4:	40020458 	.word	0x40020458
 80073f8:	40020470 	.word	0x40020470
 80073fc:	40020488 	.word	0x40020488
 8007400:	400204a0 	.word	0x400204a0
 8007404:	400204b8 	.word	0x400204b8
 8007408:	58025408 	.word	0x58025408
 800740c:	5802541c 	.word	0x5802541c
 8007410:	58025430 	.word	0x58025430
 8007414:	58025444 	.word	0x58025444
 8007418:	58025458 	.word	0x58025458
 800741c:	5802546c 	.word	0x5802546c
 8007420:	58025480 	.word	0x58025480
 8007424:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	d160      	bne.n	80074f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a7f      	ldr	r2, [pc, #508]	; (8007634 <HAL_DMA_IRQHandler+0xc74>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d04a      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a7d      	ldr	r2, [pc, #500]	; (8007638 <HAL_DMA_IRQHandler+0xc78>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d045      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a7c      	ldr	r2, [pc, #496]	; (800763c <HAL_DMA_IRQHandler+0xc7c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d040      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a7a      	ldr	r2, [pc, #488]	; (8007640 <HAL_DMA_IRQHandler+0xc80>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d03b      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a79      	ldr	r2, [pc, #484]	; (8007644 <HAL_DMA_IRQHandler+0xc84>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d036      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a77      	ldr	r2, [pc, #476]	; (8007648 <HAL_DMA_IRQHandler+0xc88>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d031      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a76      	ldr	r2, [pc, #472]	; (800764c <HAL_DMA_IRQHandler+0xc8c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d02c      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a74      	ldr	r2, [pc, #464]	; (8007650 <HAL_DMA_IRQHandler+0xc90>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d027      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a73      	ldr	r2, [pc, #460]	; (8007654 <HAL_DMA_IRQHandler+0xc94>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d022      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a71      	ldr	r2, [pc, #452]	; (8007658 <HAL_DMA_IRQHandler+0xc98>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01d      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a70      	ldr	r2, [pc, #448]	; (800765c <HAL_DMA_IRQHandler+0xc9c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d018      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a6e      	ldr	r2, [pc, #440]	; (8007660 <HAL_DMA_IRQHandler+0xca0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6d      	ldr	r2, [pc, #436]	; (8007664 <HAL_DMA_IRQHandler+0xca4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00e      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a6b      	ldr	r2, [pc, #428]	; (8007668 <HAL_DMA_IRQHandler+0xca8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d009      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a6a      	ldr	r2, [pc, #424]	; (800766c <HAL_DMA_IRQHandler+0xcac>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xb12>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a68      	ldr	r2, [pc, #416]	; (8007670 <HAL_DMA_IRQHandler+0xcb0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d108      	bne.n	80074e4 <HAL_DMA_IRQHandler+0xb24>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0208 	bic.w	r2, r2, #8
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e007      	b.n	80074f4 <HAL_DMA_IRQHandler+0xb34>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0204 	bic.w	r2, r2, #4
 80074f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8165 	beq.w	80077c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007506:	e15f      	b.n	80077c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750c:	f003 031f 	and.w	r3, r3, #31
 8007510:	2202      	movs	r2, #2
 8007512:	409a      	lsls	r2, r3
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80c5 	beq.w	80076a8 <HAL_DMA_IRQHandler+0xce8>
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 80bf 	beq.w	80076a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	2202      	movs	r2, #2
 8007534:	409a      	lsls	r2, r3
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d018      	beq.n	8007576 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 813a 	beq.w	80077cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007560:	e134      	b.n	80077cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 8130 	beq.w	80077cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007574:	e12a      	b.n	80077cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 8089 	bne.w	8007694 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a2b      	ldr	r2, [pc, #172]	; (8007634 <HAL_DMA_IRQHandler+0xc74>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d04a      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a29      	ldr	r2, [pc, #164]	; (8007638 <HAL_DMA_IRQHandler+0xc78>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d045      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a28      	ldr	r2, [pc, #160]	; (800763c <HAL_DMA_IRQHandler+0xc7c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d040      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a26      	ldr	r2, [pc, #152]	; (8007640 <HAL_DMA_IRQHandler+0xc80>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d03b      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a25      	ldr	r2, [pc, #148]	; (8007644 <HAL_DMA_IRQHandler+0xc84>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d036      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a23      	ldr	r2, [pc, #140]	; (8007648 <HAL_DMA_IRQHandler+0xc88>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d031      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a22      	ldr	r2, [pc, #136]	; (800764c <HAL_DMA_IRQHandler+0xc8c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d02c      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a20      	ldr	r2, [pc, #128]	; (8007650 <HAL_DMA_IRQHandler+0xc90>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d027      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1f      	ldr	r2, [pc, #124]	; (8007654 <HAL_DMA_IRQHandler+0xc94>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d022      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1d      	ldr	r2, [pc, #116]	; (8007658 <HAL_DMA_IRQHandler+0xc98>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d01d      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a1c      	ldr	r2, [pc, #112]	; (800765c <HAL_DMA_IRQHandler+0xc9c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d018      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1a      	ldr	r2, [pc, #104]	; (8007660 <HAL_DMA_IRQHandler+0xca0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d013      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a19      	ldr	r2, [pc, #100]	; (8007664 <HAL_DMA_IRQHandler+0xca4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00e      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a17      	ldr	r2, [pc, #92]	; (8007668 <HAL_DMA_IRQHandler+0xca8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d009      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a16      	ldr	r2, [pc, #88]	; (800766c <HAL_DMA_IRQHandler+0xcac>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d004      	beq.n	8007622 <HAL_DMA_IRQHandler+0xc62>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a14      	ldr	r2, [pc, #80]	; (8007670 <HAL_DMA_IRQHandler+0xcb0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d128      	bne.n	8007674 <HAL_DMA_IRQHandler+0xcb4>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0214 	bic.w	r2, r2, #20
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	e027      	b.n	8007684 <HAL_DMA_IRQHandler+0xcc4>
 8007634:	40020010 	.word	0x40020010
 8007638:	40020028 	.word	0x40020028
 800763c:	40020040 	.word	0x40020040
 8007640:	40020058 	.word	0x40020058
 8007644:	40020070 	.word	0x40020070
 8007648:	40020088 	.word	0x40020088
 800764c:	400200a0 	.word	0x400200a0
 8007650:	400200b8 	.word	0x400200b8
 8007654:	40020410 	.word	0x40020410
 8007658:	40020428 	.word	0x40020428
 800765c:	40020440 	.word	0x40020440
 8007660:	40020458 	.word	0x40020458
 8007664:	40020470 	.word	0x40020470
 8007668:	40020488 	.word	0x40020488
 800766c:	400204a0 	.word	0x400204a0
 8007670:	400204b8 	.word	0x400204b8
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 020a 	bic.w	r2, r2, #10
 8007682:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8097 	beq.w	80077cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076a6:	e091      	b.n	80077cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	2208      	movs	r2, #8
 80076b2:	409a      	lsls	r2, r3
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8088 	beq.w	80077ce <HAL_DMA_IRQHandler+0xe0e>
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8082 	beq.w	80077ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a41      	ldr	r2, [pc, #260]	; (80077d4 <HAL_DMA_IRQHandler+0xe14>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d04a      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a3f      	ldr	r2, [pc, #252]	; (80077d8 <HAL_DMA_IRQHandler+0xe18>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d045      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a3e      	ldr	r2, [pc, #248]	; (80077dc <HAL_DMA_IRQHandler+0xe1c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d040      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a3c      	ldr	r2, [pc, #240]	; (80077e0 <HAL_DMA_IRQHandler+0xe20>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d03b      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a3b      	ldr	r2, [pc, #236]	; (80077e4 <HAL_DMA_IRQHandler+0xe24>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d036      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a39      	ldr	r2, [pc, #228]	; (80077e8 <HAL_DMA_IRQHandler+0xe28>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d031      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a38      	ldr	r2, [pc, #224]	; (80077ec <HAL_DMA_IRQHandler+0xe2c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d02c      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a36      	ldr	r2, [pc, #216]	; (80077f0 <HAL_DMA_IRQHandler+0xe30>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d027      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a35      	ldr	r2, [pc, #212]	; (80077f4 <HAL_DMA_IRQHandler+0xe34>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d022      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a33      	ldr	r2, [pc, #204]	; (80077f8 <HAL_DMA_IRQHandler+0xe38>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01d      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a32      	ldr	r2, [pc, #200]	; (80077fc <HAL_DMA_IRQHandler+0xe3c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d018      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a30      	ldr	r2, [pc, #192]	; (8007800 <HAL_DMA_IRQHandler+0xe40>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a2f      	ldr	r2, [pc, #188]	; (8007804 <HAL_DMA_IRQHandler+0xe44>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00e      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2d      	ldr	r2, [pc, #180]	; (8007808 <HAL_DMA_IRQHandler+0xe48>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a2c      	ldr	r2, [pc, #176]	; (800780c <HAL_DMA_IRQHandler+0xe4c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d004      	beq.n	800776a <HAL_DMA_IRQHandler+0xdaa>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <HAL_DMA_IRQHandler+0xe50>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d108      	bne.n	800777c <HAL_DMA_IRQHandler+0xdbc>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 021c 	bic.w	r2, r2, #28
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e007      	b.n	800778c <HAL_DMA_IRQHandler+0xdcc>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 020e 	bic.w	r2, r2, #14
 800778a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007790:	f003 031f 	and.w	r3, r3, #31
 8007794:	2201      	movs	r2, #1
 8007796:	409a      	lsls	r2, r3
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d009      	beq.n	80077ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
 80077c2:	e004      	b.n	80077ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80077c4:	bf00      	nop
 80077c6:	e002      	b.n	80077ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077c8:	bf00      	nop
 80077ca:	e000      	b.n	80077ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80077ce:	3728      	adds	r7, #40	; 0x28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40020010 	.word	0x40020010
 80077d8:	40020028 	.word	0x40020028
 80077dc:	40020040 	.word	0x40020040
 80077e0:	40020058 	.word	0x40020058
 80077e4:	40020070 	.word	0x40020070
 80077e8:	40020088 	.word	0x40020088
 80077ec:	400200a0 	.word	0x400200a0
 80077f0:	400200b8 	.word	0x400200b8
 80077f4:	40020410 	.word	0x40020410
 80077f8:	40020428 	.word	0x40020428
 80077fc:	40020440 	.word	0x40020440
 8007800:	40020458 	.word	0x40020458
 8007804:	40020470 	.word	0x40020470
 8007808:	40020488 	.word	0x40020488
 800780c:	400204a0 	.word	0x400204a0
 8007810:	400204b8 	.word	0x400204b8

08007814 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007826:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a7f      	ldr	r2, [pc, #508]	; (8007a30 <DMA_SetConfig+0x21c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d072      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a7d      	ldr	r2, [pc, #500]	; (8007a34 <DMA_SetConfig+0x220>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d06d      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a7c      	ldr	r2, [pc, #496]	; (8007a38 <DMA_SetConfig+0x224>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d068      	beq.n	800791e <DMA_SetConfig+0x10a>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a7a      	ldr	r2, [pc, #488]	; (8007a3c <DMA_SetConfig+0x228>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d063      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a79      	ldr	r2, [pc, #484]	; (8007a40 <DMA_SetConfig+0x22c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d05e      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a77      	ldr	r2, [pc, #476]	; (8007a44 <DMA_SetConfig+0x230>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d059      	beq.n	800791e <DMA_SetConfig+0x10a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a76      	ldr	r2, [pc, #472]	; (8007a48 <DMA_SetConfig+0x234>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d054      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a74      	ldr	r2, [pc, #464]	; (8007a4c <DMA_SetConfig+0x238>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d04f      	beq.n	800791e <DMA_SetConfig+0x10a>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a73      	ldr	r2, [pc, #460]	; (8007a50 <DMA_SetConfig+0x23c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d04a      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a71      	ldr	r2, [pc, #452]	; (8007a54 <DMA_SetConfig+0x240>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d045      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a70      	ldr	r2, [pc, #448]	; (8007a58 <DMA_SetConfig+0x244>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d040      	beq.n	800791e <DMA_SetConfig+0x10a>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a6e      	ldr	r2, [pc, #440]	; (8007a5c <DMA_SetConfig+0x248>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d03b      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a6d      	ldr	r2, [pc, #436]	; (8007a60 <DMA_SetConfig+0x24c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d036      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a6b      	ldr	r2, [pc, #428]	; (8007a64 <DMA_SetConfig+0x250>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d031      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a6a      	ldr	r2, [pc, #424]	; (8007a68 <DMA_SetConfig+0x254>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d02c      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a68      	ldr	r2, [pc, #416]	; (8007a6c <DMA_SetConfig+0x258>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d027      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a67      	ldr	r2, [pc, #412]	; (8007a70 <DMA_SetConfig+0x25c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d022      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a65      	ldr	r2, [pc, #404]	; (8007a74 <DMA_SetConfig+0x260>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01d      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a64      	ldr	r2, [pc, #400]	; (8007a78 <DMA_SetConfig+0x264>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d018      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a62      	ldr	r2, [pc, #392]	; (8007a7c <DMA_SetConfig+0x268>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <DMA_SetConfig+0x10a>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a61      	ldr	r2, [pc, #388]	; (8007a80 <DMA_SetConfig+0x26c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a5f      	ldr	r2, [pc, #380]	; (8007a84 <DMA_SetConfig+0x270>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <DMA_SetConfig+0x10a>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a5e      	ldr	r2, [pc, #376]	; (8007a88 <DMA_SetConfig+0x274>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <DMA_SetConfig+0x10a>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a5c      	ldr	r2, [pc, #368]	; (8007a8c <DMA_SetConfig+0x278>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <DMA_SetConfig+0x10e>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <DMA_SetConfig+0x110>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00d      	beq.n	8007944 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007930:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007942:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a39      	ldr	r2, [pc, #228]	; (8007a30 <DMA_SetConfig+0x21c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d04a      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a38      	ldr	r2, [pc, #224]	; (8007a34 <DMA_SetConfig+0x220>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d045      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a36      	ldr	r2, [pc, #216]	; (8007a38 <DMA_SetConfig+0x224>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d040      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a35      	ldr	r2, [pc, #212]	; (8007a3c <DMA_SetConfig+0x228>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d03b      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a33      	ldr	r2, [pc, #204]	; (8007a40 <DMA_SetConfig+0x22c>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d036      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a32      	ldr	r2, [pc, #200]	; (8007a44 <DMA_SetConfig+0x230>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d031      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a30      	ldr	r2, [pc, #192]	; (8007a48 <DMA_SetConfig+0x234>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d02c      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2f      	ldr	r2, [pc, #188]	; (8007a4c <DMA_SetConfig+0x238>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d027      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a2d      	ldr	r2, [pc, #180]	; (8007a50 <DMA_SetConfig+0x23c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d022      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a2c      	ldr	r2, [pc, #176]	; (8007a54 <DMA_SetConfig+0x240>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d01d      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a2a      	ldr	r2, [pc, #168]	; (8007a58 <DMA_SetConfig+0x244>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d018      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a29      	ldr	r2, [pc, #164]	; (8007a5c <DMA_SetConfig+0x248>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d013      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a27      	ldr	r2, [pc, #156]	; (8007a60 <DMA_SetConfig+0x24c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00e      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a26      	ldr	r2, [pc, #152]	; (8007a64 <DMA_SetConfig+0x250>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d009      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a24      	ldr	r2, [pc, #144]	; (8007a68 <DMA_SetConfig+0x254>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d004      	beq.n	80079e4 <DMA_SetConfig+0x1d0>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a23      	ldr	r2, [pc, #140]	; (8007a6c <DMA_SetConfig+0x258>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d101      	bne.n	80079e8 <DMA_SetConfig+0x1d4>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e000      	b.n	80079ea <DMA_SetConfig+0x1d6>
 80079e8:	2300      	movs	r3, #0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d059      	beq.n	8007aa2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	223f      	movs	r2, #63	; 0x3f
 80079f8:	409a      	lsls	r2, r3
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b40      	cmp	r3, #64	; 0x40
 8007a1c:	d138      	bne.n	8007a90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a2e:	e086      	b.n	8007b3e <DMA_SetConfig+0x32a>
 8007a30:	40020010 	.word	0x40020010
 8007a34:	40020028 	.word	0x40020028
 8007a38:	40020040 	.word	0x40020040
 8007a3c:	40020058 	.word	0x40020058
 8007a40:	40020070 	.word	0x40020070
 8007a44:	40020088 	.word	0x40020088
 8007a48:	400200a0 	.word	0x400200a0
 8007a4c:	400200b8 	.word	0x400200b8
 8007a50:	40020410 	.word	0x40020410
 8007a54:	40020428 	.word	0x40020428
 8007a58:	40020440 	.word	0x40020440
 8007a5c:	40020458 	.word	0x40020458
 8007a60:	40020470 	.word	0x40020470
 8007a64:	40020488 	.word	0x40020488
 8007a68:	400204a0 	.word	0x400204a0
 8007a6c:	400204b8 	.word	0x400204b8
 8007a70:	58025408 	.word	0x58025408
 8007a74:	5802541c 	.word	0x5802541c
 8007a78:	58025430 	.word	0x58025430
 8007a7c:	58025444 	.word	0x58025444
 8007a80:	58025458 	.word	0x58025458
 8007a84:	5802546c 	.word	0x5802546c
 8007a88:	58025480 	.word	0x58025480
 8007a8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	60da      	str	r2, [r3, #12]
}
 8007aa0:	e04d      	b.n	8007b3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a29      	ldr	r2, [pc, #164]	; (8007b4c <DMA_SetConfig+0x338>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d022      	beq.n	8007af2 <DMA_SetConfig+0x2de>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a27      	ldr	r2, [pc, #156]	; (8007b50 <DMA_SetConfig+0x33c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d01d      	beq.n	8007af2 <DMA_SetConfig+0x2de>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a26      	ldr	r2, [pc, #152]	; (8007b54 <DMA_SetConfig+0x340>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d018      	beq.n	8007af2 <DMA_SetConfig+0x2de>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a24      	ldr	r2, [pc, #144]	; (8007b58 <DMA_SetConfig+0x344>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d013      	beq.n	8007af2 <DMA_SetConfig+0x2de>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a23      	ldr	r2, [pc, #140]	; (8007b5c <DMA_SetConfig+0x348>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00e      	beq.n	8007af2 <DMA_SetConfig+0x2de>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a21      	ldr	r2, [pc, #132]	; (8007b60 <DMA_SetConfig+0x34c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d009      	beq.n	8007af2 <DMA_SetConfig+0x2de>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a20      	ldr	r2, [pc, #128]	; (8007b64 <DMA_SetConfig+0x350>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <DMA_SetConfig+0x2de>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1e      	ldr	r2, [pc, #120]	; (8007b68 <DMA_SetConfig+0x354>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d101      	bne.n	8007af6 <DMA_SetConfig+0x2e2>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e000      	b.n	8007af8 <DMA_SetConfig+0x2e4>
 8007af6:	2300      	movs	r3, #0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d020      	beq.n	8007b3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b00:	f003 031f 	and.w	r3, r3, #31
 8007b04:	2201      	movs	r2, #1
 8007b06:	409a      	lsls	r2, r3
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d108      	bne.n	8007b2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	60da      	str	r2, [r3, #12]
}
 8007b2c:	e007      	b.n	8007b3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	60da      	str	r2, [r3, #12]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	58025408 	.word	0x58025408
 8007b50:	5802541c 	.word	0x5802541c
 8007b54:	58025430 	.word	0x58025430
 8007b58:	58025444 	.word	0x58025444
 8007b5c:	58025458 	.word	0x58025458
 8007b60:	5802546c 	.word	0x5802546c
 8007b64:	58025480 	.word	0x58025480
 8007b68:	58025494 	.word	0x58025494

08007b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a42      	ldr	r2, [pc, #264]	; (8007c84 <DMA_CalcBaseAndBitshift+0x118>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d04a      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a41      	ldr	r2, [pc, #260]	; (8007c88 <DMA_CalcBaseAndBitshift+0x11c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d045      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a3f      	ldr	r2, [pc, #252]	; (8007c8c <DMA_CalcBaseAndBitshift+0x120>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d040      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a3e      	ldr	r2, [pc, #248]	; (8007c90 <DMA_CalcBaseAndBitshift+0x124>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d03b      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a3c      	ldr	r2, [pc, #240]	; (8007c94 <DMA_CalcBaseAndBitshift+0x128>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d036      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a3b      	ldr	r2, [pc, #236]	; (8007c98 <DMA_CalcBaseAndBitshift+0x12c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d031      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a39      	ldr	r2, [pc, #228]	; (8007c9c <DMA_CalcBaseAndBitshift+0x130>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d02c      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a38      	ldr	r2, [pc, #224]	; (8007ca0 <DMA_CalcBaseAndBitshift+0x134>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d027      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a36      	ldr	r2, [pc, #216]	; (8007ca4 <DMA_CalcBaseAndBitshift+0x138>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d022      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a35      	ldr	r2, [pc, #212]	; (8007ca8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d01d      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a33      	ldr	r2, [pc, #204]	; (8007cac <DMA_CalcBaseAndBitshift+0x140>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d018      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a32      	ldr	r2, [pc, #200]	; (8007cb0 <DMA_CalcBaseAndBitshift+0x144>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d013      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a30      	ldr	r2, [pc, #192]	; (8007cb4 <DMA_CalcBaseAndBitshift+0x148>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00e      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a2f      	ldr	r2, [pc, #188]	; (8007cb8 <DMA_CalcBaseAndBitshift+0x14c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d009      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a2d      	ldr	r2, [pc, #180]	; (8007cbc <DMA_CalcBaseAndBitshift+0x150>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d004      	beq.n	8007c14 <DMA_CalcBaseAndBitshift+0xa8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a2c      	ldr	r2, [pc, #176]	; (8007cc0 <DMA_CalcBaseAndBitshift+0x154>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d101      	bne.n	8007c18 <DMA_CalcBaseAndBitshift+0xac>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <DMA_CalcBaseAndBitshift+0xae>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d024      	beq.n	8007c68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	3b10      	subs	r3, #16
 8007c26:	4a27      	ldr	r2, [pc, #156]	; (8007cc4 <DMA_CalcBaseAndBitshift+0x158>)
 8007c28:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2c:	091b      	lsrs	r3, r3, #4
 8007c2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	4a24      	ldr	r2, [pc, #144]	; (8007cc8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007c38:	5cd3      	ldrb	r3, [r2, r3]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d908      	bls.n	8007c58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	4b1f      	ldr	r3, [pc, #124]	; (8007ccc <DMA_CalcBaseAndBitshift+0x160>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	1d1a      	adds	r2, r3, #4
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	659a      	str	r2, [r3, #88]	; 0x58
 8007c56:	e00d      	b.n	8007c74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4b1b      	ldr	r3, [pc, #108]	; (8007ccc <DMA_CalcBaseAndBitshift+0x160>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6593      	str	r3, [r2, #88]	; 0x58
 8007c66:	e005      	b.n	8007c74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40020010 	.word	0x40020010
 8007c88:	40020028 	.word	0x40020028
 8007c8c:	40020040 	.word	0x40020040
 8007c90:	40020058 	.word	0x40020058
 8007c94:	40020070 	.word	0x40020070
 8007c98:	40020088 	.word	0x40020088
 8007c9c:	400200a0 	.word	0x400200a0
 8007ca0:	400200b8 	.word	0x400200b8
 8007ca4:	40020410 	.word	0x40020410
 8007ca8:	40020428 	.word	0x40020428
 8007cac:	40020440 	.word	0x40020440
 8007cb0:	40020458 	.word	0x40020458
 8007cb4:	40020470 	.word	0x40020470
 8007cb8:	40020488 	.word	0x40020488
 8007cbc:	400204a0 	.word	0x400204a0
 8007cc0:	400204b8 	.word	0x400204b8
 8007cc4:	aaaaaaab 	.word	0xaaaaaaab
 8007cc8:	08015684 	.word	0x08015684
 8007ccc:	fffffc00 	.word	0xfffffc00

08007cd0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d120      	bne.n	8007d26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d858      	bhi.n	8007d9e <DMA_CheckFifoParam+0xce>
 8007cec:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <DMA_CheckFifoParam+0x24>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d05 	.word	0x08007d05
 8007cf8:	08007d17 	.word	0x08007d17
 8007cfc:	08007d05 	.word	0x08007d05
 8007d00:	08007d9f 	.word	0x08007d9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d048      	beq.n	8007da2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d14:	e045      	b.n	8007da2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d1e:	d142      	bne.n	8007da6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d24:	e03f      	b.n	8007da6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2e:	d123      	bne.n	8007d78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d838      	bhi.n	8007daa <DMA_CheckFifoParam+0xda>
 8007d38:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <DMA_CheckFifoParam+0x70>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d57 	.word	0x08007d57
 8007d48:	08007d51 	.word	0x08007d51
 8007d4c:	08007d69 	.word	0x08007d69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
        break;
 8007d54:	e030      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d025      	beq.n	8007dae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d66:	e022      	b.n	8007dae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d70:	d11f      	bne.n	8007db2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d76:	e01c      	b.n	8007db2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d902      	bls.n	8007d86 <DMA_CheckFifoParam+0xb6>
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d003      	beq.n	8007d8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007d84:	e018      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	73fb      	strb	r3, [r7, #15]
        break;
 8007d8a:	e015      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d9c:	e00b      	b.n	8007db6 <DMA_CheckFifoParam+0xe6>
        break;
 8007d9e:	bf00      	nop
 8007da0:	e00a      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>
        break;
 8007da2:	bf00      	nop
 8007da4:	e008      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>
        break;
 8007da6:	bf00      	nop
 8007da8:	e006      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>
        break;
 8007daa:	bf00      	nop
 8007dac:	e004      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>
        break;
 8007dae:	bf00      	nop
 8007db0:	e002      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>
        break;
 8007db2:	bf00      	nop
 8007db4:	e000      	b.n	8007db8 <DMA_CheckFifoParam+0xe8>
    break;
 8007db6:	bf00      	nop
    }
  }

  return status;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop

08007dc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a38      	ldr	r2, [pc, #224]	; (8007ebc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d022      	beq.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a36      	ldr	r2, [pc, #216]	; (8007ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01d      	beq.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a35      	ldr	r2, [pc, #212]	; (8007ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d018      	beq.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a33      	ldr	r2, [pc, #204]	; (8007ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d013      	beq.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a32      	ldr	r2, [pc, #200]	; (8007ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00e      	beq.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a30      	ldr	r2, [pc, #192]	; (8007ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d009      	beq.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a2f      	ldr	r2, [pc, #188]	; (8007ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d004      	beq.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a2d      	ldr	r2, [pc, #180]	; (8007ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d101      	bne.n	8007e2a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01a      	beq.n	8007e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	3b08      	subs	r3, #8
 8007e38:	4a28      	ldr	r2, [pc, #160]	; (8007edc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3e:	091b      	lsrs	r3, r3, #4
 8007e40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4b26      	ldr	r3, [pc, #152]	; (8007ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a24      	ldr	r2, [pc, #144]	; (8007ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	409a      	lsls	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e64:	e024      	b.n	8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	3b10      	subs	r3, #16
 8007e6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007e70:	fba2 2303 	umull	r2, r3, r2, r3
 8007e74:	091b      	lsrs	r3, r3, #4
 8007e76:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4a1c      	ldr	r2, [pc, #112]	; (8007eec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d806      	bhi.n	8007e8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4a1b      	ldr	r2, [pc, #108]	; (8007ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d902      	bls.n	8007e8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4b18      	ldr	r3, [pc, #96]	; (8007ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a16      	ldr	r2, [pc, #88]	; (8007ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ea0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007eb0:	bf00      	nop
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	58025408 	.word	0x58025408
 8007ec0:	5802541c 	.word	0x5802541c
 8007ec4:	58025430 	.word	0x58025430
 8007ec8:	58025444 	.word	0x58025444
 8007ecc:	58025458 	.word	0x58025458
 8007ed0:	5802546c 	.word	0x5802546c
 8007ed4:	58025480 	.word	0x58025480
 8007ed8:	58025494 	.word	0x58025494
 8007edc:	cccccccd 	.word	0xcccccccd
 8007ee0:	16009600 	.word	0x16009600
 8007ee4:	58025880 	.word	0x58025880
 8007ee8:	aaaaaaab 	.word	0xaaaaaaab
 8007eec:	400204b8 	.word	0x400204b8
 8007ef0:	4002040f 	.word	0x4002040f
 8007ef4:	10008200 	.word	0x10008200
 8007ef8:	40020880 	.word	0x40020880

08007efc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d04a      	beq.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d847      	bhi.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a25      	ldr	r2, [pc, #148]	; (8007fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d022      	beq.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a24      	ldr	r2, [pc, #144]	; (8007fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d01d      	beq.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a22      	ldr	r2, [pc, #136]	; (8007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d018      	beq.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1f      	ldr	r2, [pc, #124]	; (8007fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00e      	beq.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1e      	ldr	r2, [pc, #120]	; (8007fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d009      	beq.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a1c      	ldr	r2, [pc, #112]	; (8007fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a1b      	ldr	r2, [pc, #108]	; (8007fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d101      	bne.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e000      	b.n	8007f6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4b17      	ldr	r3, [pc, #92]	; (8007fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007f84:	671a      	str	r2, [r3, #112]	; 0x70
 8007f86:	e009      	b.n	8007f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	461a      	mov	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a11      	ldr	r2, [pc, #68]	; (8007fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007f9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	409a      	lsls	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	58025408 	.word	0x58025408
 8007fb8:	5802541c 	.word	0x5802541c
 8007fbc:	58025430 	.word	0x58025430
 8007fc0:	58025444 	.word	0x58025444
 8007fc4:	58025458 	.word	0x58025458
 8007fc8:	5802546c 	.word	0x5802546c
 8007fcc:	58025480 	.word	0x58025480
 8007fd0:	58025494 	.word	0x58025494
 8007fd4:	1600963f 	.word	0x1600963f
 8007fd8:	58025940 	.word	0x58025940
 8007fdc:	1000823f 	.word	0x1000823f
 8007fe0:	40020940 	.word	0x40020940

08007fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b089      	sub	sp, #36	; 0x24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ff2:	4b89      	ldr	r3, [pc, #548]	; (8008218 <HAL_GPIO_Init+0x234>)
 8007ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ff6:	e194      	b.n	8008322 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	fa01 f303 	lsl.w	r3, r1, r3
 8008004:	4013      	ands	r3, r2
 8008006:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 8186 	beq.w	800831c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	2b01      	cmp	r3, #1
 800801a:	d005      	beq.n	8008028 <HAL_GPIO_Init+0x44>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f003 0303 	and.w	r3, r3, #3
 8008024:	2b02      	cmp	r3, #2
 8008026:	d130      	bne.n	800808a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	2203      	movs	r2, #3
 8008034:	fa02 f303 	lsl.w	r3, r2, r3
 8008038:	43db      	mvns	r3, r3
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	4013      	ands	r3, r2
 800803e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	fa02 f303 	lsl.w	r3, r2, r3
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	4313      	orrs	r3, r2
 8008050:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800805e:	2201      	movs	r2, #1
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	fa02 f303 	lsl.w	r3, r2, r3
 8008066:	43db      	mvns	r3, r3
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	4013      	ands	r3, r2
 800806c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	091b      	lsrs	r3, r3, #4
 8008074:	f003 0201 	and.w	r2, r3, #1
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	4313      	orrs	r3, r2
 8008082:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b03      	cmp	r3, #3
 8008094:	d017      	beq.n	80080c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	2203      	movs	r2, #3
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	4313      	orrs	r3, r2
 80080be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f003 0303 	and.w	r3, r3, #3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d123      	bne.n	800811a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	08da      	lsrs	r2, r3, #3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3208      	adds	r2, #8
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	220f      	movs	r2, #15
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	43db      	mvns	r3, r3
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	4013      	ands	r3, r2
 80080f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	691a      	ldr	r2, [r3, #16]
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	fa02 f303 	lsl.w	r3, r2, r3
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	4313      	orrs	r3, r2
 800810a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	08da      	lsrs	r2, r3, #3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3208      	adds	r2, #8
 8008114:	69b9      	ldr	r1, [r7, #24]
 8008116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	2203      	movs	r2, #3
 8008126:	fa02 f303 	lsl.w	r3, r2, r3
 800812a:	43db      	mvns	r3, r3
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	4013      	ands	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f003 0203 	and.w	r2, r3, #3
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	fa02 f303 	lsl.w	r3, r2, r3
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	4313      	orrs	r3, r2
 8008146:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 80e0 	beq.w	800831c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800815c:	4b2f      	ldr	r3, [pc, #188]	; (800821c <HAL_GPIO_Init+0x238>)
 800815e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008162:	4a2e      	ldr	r2, [pc, #184]	; (800821c <HAL_GPIO_Init+0x238>)
 8008164:	f043 0302 	orr.w	r3, r3, #2
 8008168:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800816c:	4b2b      	ldr	r3, [pc, #172]	; (800821c <HAL_GPIO_Init+0x238>)
 800816e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800817a:	4a29      	ldr	r2, [pc, #164]	; (8008220 <HAL_GPIO_Init+0x23c>)
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	089b      	lsrs	r3, r3, #2
 8008180:	3302      	adds	r3, #2
 8008182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	220f      	movs	r2, #15
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	43db      	mvns	r3, r3
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	4013      	ands	r3, r2
 800819c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a20      	ldr	r2, [pc, #128]	; (8008224 <HAL_GPIO_Init+0x240>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d052      	beq.n	800824c <HAL_GPIO_Init+0x268>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a1f      	ldr	r2, [pc, #124]	; (8008228 <HAL_GPIO_Init+0x244>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d031      	beq.n	8008212 <HAL_GPIO_Init+0x22e>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a1e      	ldr	r2, [pc, #120]	; (800822c <HAL_GPIO_Init+0x248>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d02b      	beq.n	800820e <HAL_GPIO_Init+0x22a>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a1d      	ldr	r2, [pc, #116]	; (8008230 <HAL_GPIO_Init+0x24c>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d025      	beq.n	800820a <HAL_GPIO_Init+0x226>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a1c      	ldr	r2, [pc, #112]	; (8008234 <HAL_GPIO_Init+0x250>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d01f      	beq.n	8008206 <HAL_GPIO_Init+0x222>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a1b      	ldr	r2, [pc, #108]	; (8008238 <HAL_GPIO_Init+0x254>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d019      	beq.n	8008202 <HAL_GPIO_Init+0x21e>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a1a      	ldr	r2, [pc, #104]	; (800823c <HAL_GPIO_Init+0x258>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d013      	beq.n	80081fe <HAL_GPIO_Init+0x21a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a19      	ldr	r2, [pc, #100]	; (8008240 <HAL_GPIO_Init+0x25c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d00d      	beq.n	80081fa <HAL_GPIO_Init+0x216>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a18      	ldr	r2, [pc, #96]	; (8008244 <HAL_GPIO_Init+0x260>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d007      	beq.n	80081f6 <HAL_GPIO_Init+0x212>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a17      	ldr	r2, [pc, #92]	; (8008248 <HAL_GPIO_Init+0x264>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d101      	bne.n	80081f2 <HAL_GPIO_Init+0x20e>
 80081ee:	2309      	movs	r3, #9
 80081f0:	e02d      	b.n	800824e <HAL_GPIO_Init+0x26a>
 80081f2:	230a      	movs	r3, #10
 80081f4:	e02b      	b.n	800824e <HAL_GPIO_Init+0x26a>
 80081f6:	2308      	movs	r3, #8
 80081f8:	e029      	b.n	800824e <HAL_GPIO_Init+0x26a>
 80081fa:	2307      	movs	r3, #7
 80081fc:	e027      	b.n	800824e <HAL_GPIO_Init+0x26a>
 80081fe:	2306      	movs	r3, #6
 8008200:	e025      	b.n	800824e <HAL_GPIO_Init+0x26a>
 8008202:	2305      	movs	r3, #5
 8008204:	e023      	b.n	800824e <HAL_GPIO_Init+0x26a>
 8008206:	2304      	movs	r3, #4
 8008208:	e021      	b.n	800824e <HAL_GPIO_Init+0x26a>
 800820a:	2303      	movs	r3, #3
 800820c:	e01f      	b.n	800824e <HAL_GPIO_Init+0x26a>
 800820e:	2302      	movs	r3, #2
 8008210:	e01d      	b.n	800824e <HAL_GPIO_Init+0x26a>
 8008212:	2301      	movs	r3, #1
 8008214:	e01b      	b.n	800824e <HAL_GPIO_Init+0x26a>
 8008216:	bf00      	nop
 8008218:	58000080 	.word	0x58000080
 800821c:	58024400 	.word	0x58024400
 8008220:	58000400 	.word	0x58000400
 8008224:	58020000 	.word	0x58020000
 8008228:	58020400 	.word	0x58020400
 800822c:	58020800 	.word	0x58020800
 8008230:	58020c00 	.word	0x58020c00
 8008234:	58021000 	.word	0x58021000
 8008238:	58021400 	.word	0x58021400
 800823c:	58021800 	.word	0x58021800
 8008240:	58021c00 	.word	0x58021c00
 8008244:	58022000 	.word	0x58022000
 8008248:	58022400 	.word	0x58022400
 800824c:	2300      	movs	r3, #0
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	f002 0203 	and.w	r2, r2, #3
 8008254:	0092      	lsls	r2, r2, #2
 8008256:	4093      	lsls	r3, r2
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	4313      	orrs	r3, r2
 800825c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800825e:	4938      	ldr	r1, [pc, #224]	; (8008340 <HAL_GPIO_Init+0x35c>)
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	089b      	lsrs	r3, r3, #2
 8008264:	3302      	adds	r3, #2
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800826c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	43db      	mvns	r3, r3
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	4013      	ands	r3, r2
 800827c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800829a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	43db      	mvns	r3, r3
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	4013      	ands	r3, r2
 80082aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d003      	beq.n	80082c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80082c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	43db      	mvns	r3, r3
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	4013      	ands	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	43db      	mvns	r3, r3
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	4013      	ands	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	f47f ae63 	bne.w	8007ff8 <HAL_GPIO_Init+0x14>
  }
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	3724      	adds	r7, #36	; 0x24
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	58000400 	.word	0x58000400

08008344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691a      	ldr	r2, [r3, #16]
 8008354:	887b      	ldrh	r3, [r7, #2]
 8008356:	4013      	ands	r3, r2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800835c:	2301      	movs	r3, #1
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	e001      	b.n	8008366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008366:	7bfb      	ldrb	r3, [r7, #15]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	807b      	strh	r3, [r7, #2]
 8008380:	4613      	mov	r3, r2
 8008382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008384:	787b      	ldrb	r3, [r7, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800838a:	887a      	ldrh	r2, [r7, #2]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008390:	e003      	b.n	800839a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008392:	887b      	ldrh	r3, [r7, #2]
 8008394:	041a      	lsls	r2, r3, #16
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	619a      	str	r2, [r3, #24]
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e08b      	b.n	80084d2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fa f914 	bl	80025fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2224      	movs	r2, #36	; 0x24
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0201 	bic.w	r2, r2, #1
 80083ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80083f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008408:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d107      	bne.n	8008422 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	e006      	b.n	8008430 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800842e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	2b02      	cmp	r3, #2
 8008436:	d108      	bne.n	800844a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008446:	605a      	str	r2, [r3, #4]
 8008448:	e007      	b.n	800845a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008458:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6859      	ldr	r1, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4b1d      	ldr	r3, [pc, #116]	; (80084dc <HAL_I2C_Init+0x134>)
 8008466:	430b      	orrs	r3, r1
 8008468:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008478:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	691a      	ldr	r2, [r3, #16]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	69d9      	ldr	r1, [r3, #28]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1a      	ldr	r2, [r3, #32]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	02008000 	.word	0x02008000

080084e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d138      	bne.n	8008568 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008500:	2302      	movs	r3, #2
 8008502:	e032      	b.n	800856a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2224      	movs	r2, #36	; 0x24
 8008510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f022 0201 	bic.w	r2, r2, #1
 8008522:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008532:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6819      	ldr	r1, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0201 	orr.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	e000      	b.n	800856a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008568:	2302      	movs	r3, #2
  }
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b20      	cmp	r3, #32
 800858a:	d139      	bne.n	8008600 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008592:	2b01      	cmp	r3, #1
 8008594:	d101      	bne.n	800859a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008596:	2302      	movs	r3, #2
 8008598:	e033      	b.n	8008602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2224      	movs	r2, #36	; 0x24
 80085a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f022 0201 	bic.w	r2, r2, #1
 80085b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0201 	orr.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	e000      	b.n	8008602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008600:	2302      	movs	r3, #2
  }
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
	...

08008610 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008618:	4b19      	ldr	r3, [pc, #100]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b04      	cmp	r3, #4
 8008622:	d00a      	beq.n	800863a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008624:	4b16      	ldr	r3, [pc, #88]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	429a      	cmp	r2, r3
 8008630:	d001      	beq.n	8008636 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e01f      	b.n	8008676 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	e01d      	b.n	8008676 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800863a:	4b11      	ldr	r3, [pc, #68]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f023 0207 	bic.w	r2, r3, #7
 8008642:	490f      	ldr	r1, [pc, #60]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4313      	orrs	r3, r2
 8008648:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800864a:	f7fa fd43 	bl	80030d4 <HAL_GetTick>
 800864e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008650:	e009      	b.n	8008666 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008652:	f7fa fd3f 	bl	80030d4 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008660:	d901      	bls.n	8008666 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e007      	b.n	8008676 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <HAL_PWREx_ConfigSupply+0x70>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800866e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008672:	d1ee      	bne.n	8008652 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	58024800 	.word	0x58024800

08008684 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08c      	sub	sp, #48	; 0x30
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f000 bc48 	b.w	8008f28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8088 	beq.w	80087b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086a6:	4b99      	ldr	r3, [pc, #612]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086b0:	4b96      	ldr	r3, [pc, #600]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	2b10      	cmp	r3, #16
 80086ba:	d007      	beq.n	80086cc <HAL_RCC_OscConfig+0x48>
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	2b18      	cmp	r3, #24
 80086c0:	d111      	bne.n	80086e6 <HAL_RCC_OscConfig+0x62>
 80086c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d10c      	bne.n	80086e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086cc:	4b8f      	ldr	r3, [pc, #572]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d06d      	beq.n	80087b4 <HAL_RCC_OscConfig+0x130>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d169      	bne.n	80087b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f000 bc21 	b.w	8008f28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ee:	d106      	bne.n	80086fe <HAL_RCC_OscConfig+0x7a>
 80086f0:	4b86      	ldr	r3, [pc, #536]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a85      	ldr	r2, [pc, #532]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80086f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	e02e      	b.n	800875c <HAL_RCC_OscConfig+0xd8>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10c      	bne.n	8008720 <HAL_RCC_OscConfig+0x9c>
 8008706:	4b81      	ldr	r3, [pc, #516]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a80      	ldr	r2, [pc, #512]	; (800890c <HAL_RCC_OscConfig+0x288>)
 800870c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	4b7e      	ldr	r3, [pc, #504]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a7d      	ldr	r2, [pc, #500]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008718:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	e01d      	b.n	800875c <HAL_RCC_OscConfig+0xd8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008728:	d10c      	bne.n	8008744 <HAL_RCC_OscConfig+0xc0>
 800872a:	4b78      	ldr	r3, [pc, #480]	; (800890c <HAL_RCC_OscConfig+0x288>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a77      	ldr	r2, [pc, #476]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	4b75      	ldr	r3, [pc, #468]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a74      	ldr	r2, [pc, #464]	; (800890c <HAL_RCC_OscConfig+0x288>)
 800873c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	e00b      	b.n	800875c <HAL_RCC_OscConfig+0xd8>
 8008744:	4b71      	ldr	r3, [pc, #452]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a70      	ldr	r2, [pc, #448]	; (800890c <HAL_RCC_OscConfig+0x288>)
 800874a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	4b6e      	ldr	r3, [pc, #440]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a6d      	ldr	r2, [pc, #436]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800875a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d013      	beq.n	800878c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008764:	f7fa fcb6 	bl	80030d4 <HAL_GetTick>
 8008768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800876c:	f7fa fcb2 	bl	80030d4 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b64      	cmp	r3, #100	; 0x64
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e3d4      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800877e:	4b63      	ldr	r3, [pc, #396]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0f0      	beq.n	800876c <HAL_RCC_OscConfig+0xe8>
 800878a:	e014      	b.n	80087b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878c:	f7fa fca2 	bl	80030d4 <HAL_GetTick>
 8008790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008792:	e008      	b.n	80087a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008794:	f7fa fc9e 	bl	80030d4 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b64      	cmp	r3, #100	; 0x64
 80087a0:	d901      	bls.n	80087a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e3c0      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087a6:	4b59      	ldr	r3, [pc, #356]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1f0      	bne.n	8008794 <HAL_RCC_OscConfig+0x110>
 80087b2:	e000      	b.n	80087b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 80ca 	beq.w	8008958 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087c4:	4b51      	ldr	r3, [pc, #324]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087ce:	4b4f      	ldr	r3, [pc, #316]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80087d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d007      	beq.n	80087ea <HAL_RCC_OscConfig+0x166>
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	2b18      	cmp	r3, #24
 80087de:	d156      	bne.n	800888e <HAL_RCC_OscConfig+0x20a>
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d151      	bne.n	800888e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ea:	4b48      	ldr	r3, [pc, #288]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d005      	beq.n	8008802 <HAL_RCC_OscConfig+0x17e>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e392      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008802:	4b42      	ldr	r3, [pc, #264]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f023 0219 	bic.w	r2, r3, #25
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	493f      	ldr	r1, [pc, #252]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008810:	4313      	orrs	r3, r2
 8008812:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008814:	f7fa fc5e 	bl	80030d4 <HAL_GetTick>
 8008818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800881c:	f7fa fc5a 	bl	80030d4 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e37c      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800882e:	4b37      	ldr	r3, [pc, #220]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0304 	and.w	r3, r3, #4
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f0      	beq.n	800881c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800883a:	f7fa fc7b 	bl	8003134 <HAL_GetREVID>
 800883e:	4603      	mov	r3, r0
 8008840:	f241 0203 	movw	r2, #4099	; 0x1003
 8008844:	4293      	cmp	r3, r2
 8008846:	d817      	bhi.n	8008878 <HAL_RCC_OscConfig+0x1f4>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b40      	cmp	r3, #64	; 0x40
 800884e:	d108      	bne.n	8008862 <HAL_RCC_OscConfig+0x1de>
 8008850:	4b2e      	ldr	r3, [pc, #184]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008858:	4a2c      	ldr	r2, [pc, #176]	; (800890c <HAL_RCC_OscConfig+0x288>)
 800885a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800885e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008860:	e07a      	b.n	8008958 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008862:	4b2a      	ldr	r3, [pc, #168]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	031b      	lsls	r3, r3, #12
 8008870:	4926      	ldr	r1, [pc, #152]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008872:	4313      	orrs	r3, r2
 8008874:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008876:	e06f      	b.n	8008958 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008878:	4b24      	ldr	r3, [pc, #144]	; (800890c <HAL_RCC_OscConfig+0x288>)
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	061b      	lsls	r3, r3, #24
 8008886:	4921      	ldr	r1, [pc, #132]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008888:	4313      	orrs	r3, r2
 800888a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800888c:	e064      	b.n	8008958 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d047      	beq.n	8008926 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008896:	4b1d      	ldr	r3, [pc, #116]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f023 0219 	bic.w	r2, r3, #25
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	491a      	ldr	r1, [pc, #104]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a8:	f7fa fc14 	bl	80030d4 <HAL_GetTick>
 80088ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b0:	f7fa fc10 	bl	80030d4 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e332      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088c2:	4b12      	ldr	r3, [pc, #72]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0f0      	beq.n	80088b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ce:	f7fa fc31 	bl	8003134 <HAL_GetREVID>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80088d8:	4293      	cmp	r3, r2
 80088da:	d819      	bhi.n	8008910 <HAL_RCC_OscConfig+0x28c>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	2b40      	cmp	r3, #64	; 0x40
 80088e2:	d108      	bne.n	80088f6 <HAL_RCC_OscConfig+0x272>
 80088e4:	4b09      	ldr	r3, [pc, #36]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088ec:	4a07      	ldr	r2, [pc, #28]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80088ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f2:	6053      	str	r3, [r2, #4]
 80088f4:	e030      	b.n	8008958 <HAL_RCC_OscConfig+0x2d4>
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <HAL_RCC_OscConfig+0x288>)
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	031b      	lsls	r3, r3, #12
 8008904:	4901      	ldr	r1, [pc, #4]	; (800890c <HAL_RCC_OscConfig+0x288>)
 8008906:	4313      	orrs	r3, r2
 8008908:	604b      	str	r3, [r1, #4]
 800890a:	e025      	b.n	8008958 <HAL_RCC_OscConfig+0x2d4>
 800890c:	58024400 	.word	0x58024400
 8008910:	4b9a      	ldr	r3, [pc, #616]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	061b      	lsls	r3, r3, #24
 800891e:	4997      	ldr	r1, [pc, #604]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008920:	4313      	orrs	r3, r2
 8008922:	604b      	str	r3, [r1, #4]
 8008924:	e018      	b.n	8008958 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008926:	4b95      	ldr	r3, [pc, #596]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a94      	ldr	r2, [pc, #592]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 800892c:	f023 0301 	bic.w	r3, r3, #1
 8008930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008932:	f7fa fbcf 	bl	80030d4 <HAL_GetTick>
 8008936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008938:	e008      	b.n	800894c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800893a:	f7fa fbcb 	bl	80030d4 <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	2b02      	cmp	r3, #2
 8008946:	d901      	bls.n	800894c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e2ed      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800894c:	4b8b      	ldr	r3, [pc, #556]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1f0      	bne.n	800893a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 80a9 	beq.w	8008ab8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008966:	4b85      	ldr	r3, [pc, #532]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800896e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008970:	4b82      	ldr	r3, [pc, #520]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008974:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d007      	beq.n	800898c <HAL_RCC_OscConfig+0x308>
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	2b18      	cmp	r3, #24
 8008980:	d13a      	bne.n	80089f8 <HAL_RCC_OscConfig+0x374>
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	2b01      	cmp	r3, #1
 800898a:	d135      	bne.n	80089f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800898c:	4b7b      	ldr	r3, [pc, #492]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <HAL_RCC_OscConfig+0x320>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	2b80      	cmp	r3, #128	; 0x80
 800899e:	d001      	beq.n	80089a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e2c1      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089a4:	f7fa fbc6 	bl	8003134 <HAL_GetREVID>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d817      	bhi.n	80089e2 <HAL_RCC_OscConfig+0x35e>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	d108      	bne.n	80089cc <HAL_RCC_OscConfig+0x348>
 80089ba:	4b70      	ldr	r3, [pc, #448]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80089c2:	4a6e      	ldr	r2, [pc, #440]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 80089c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089ca:	e075      	b.n	8008ab8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089cc:	4b6b      	ldr	r3, [pc, #428]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	069b      	lsls	r3, r3, #26
 80089da:	4968      	ldr	r1, [pc, #416]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089e0:	e06a      	b.n	8008ab8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089e2:	4b66      	ldr	r3, [pc, #408]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	061b      	lsls	r3, r3, #24
 80089f0:	4962      	ldr	r1, [pc, #392]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089f6:	e05f      	b.n	8008ab8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d042      	beq.n	8008a86 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a00:	4b5e      	ldr	r3, [pc, #376]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a5d      	ldr	r2, [pc, #372]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0c:	f7fa fb62 	bl	80030d4 <HAL_GetTick>
 8008a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a14:	f7fa fb5e 	bl	80030d4 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e280      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a26:	4b55      	ldr	r3, [pc, #340]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0f0      	beq.n	8008a14 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a32:	f7fa fb7f 	bl	8003134 <HAL_GetREVID>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d817      	bhi.n	8008a70 <HAL_RCC_OscConfig+0x3ec>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	2b20      	cmp	r3, #32
 8008a46:	d108      	bne.n	8008a5a <HAL_RCC_OscConfig+0x3d6>
 8008a48:	4b4c      	ldr	r3, [pc, #304]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a50:	4a4a      	ldr	r2, [pc, #296]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a56:	6053      	str	r3, [r2, #4]
 8008a58:	e02e      	b.n	8008ab8 <HAL_RCC_OscConfig+0x434>
 8008a5a:	4b48      	ldr	r3, [pc, #288]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	069b      	lsls	r3, r3, #26
 8008a68:	4944      	ldr	r1, [pc, #272]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	604b      	str	r3, [r1, #4]
 8008a6e:	e023      	b.n	8008ab8 <HAL_RCC_OscConfig+0x434>
 8008a70:	4b42      	ldr	r3, [pc, #264]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	061b      	lsls	r3, r3, #24
 8008a7e:	493f      	ldr	r1, [pc, #252]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60cb      	str	r3, [r1, #12]
 8008a84:	e018      	b.n	8008ab8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a86:	4b3d      	ldr	r3, [pc, #244]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a3c      	ldr	r2, [pc, #240]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a92:	f7fa fb1f 	bl	80030d4 <HAL_GetTick>
 8008a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a98:	e008      	b.n	8008aac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a9a:	f7fa fb1b 	bl	80030d4 <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e23d      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008aac:	4b33      	ldr	r3, [pc, #204]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1f0      	bne.n	8008a9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d036      	beq.n	8008b32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d019      	beq.n	8008b00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008acc:	4b2b      	ldr	r3, [pc, #172]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ad0:	4a2a      	ldr	r2, [pc, #168]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008ad2:	f043 0301 	orr.w	r3, r3, #1
 8008ad6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad8:	f7fa fafc 	bl	80030d4 <HAL_GetTick>
 8008adc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ade:	e008      	b.n	8008af2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ae0:	f7fa faf8 	bl	80030d4 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e21a      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008af2:	4b22      	ldr	r3, [pc, #136]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0f0      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x45c>
 8008afe:	e018      	b.n	8008b32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b00:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b04:	4a1d      	ldr	r2, [pc, #116]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008b06:	f023 0301 	bic.w	r3, r3, #1
 8008b0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0c:	f7fa fae2 	bl	80030d4 <HAL_GetTick>
 8008b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b12:	e008      	b.n	8008b26 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b14:	f7fa fade 	bl	80030d4 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d901      	bls.n	8008b26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e200      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b26:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1f0      	bne.n	8008b14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d039      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d01c      	beq.n	8008b80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b46:	4b0d      	ldr	r3, [pc, #52]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a0c      	ldr	r2, [pc, #48]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b52:	f7fa fabf 	bl	80030d4 <HAL_GetTick>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b58:	e008      	b.n	8008b6c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b5a:	f7fa fabb 	bl	80030d4 <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d901      	bls.n	8008b6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e1dd      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b6c:	4b03      	ldr	r3, [pc, #12]	; (8008b7c <HAL_RCC_OscConfig+0x4f8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0f0      	beq.n	8008b5a <HAL_RCC_OscConfig+0x4d6>
 8008b78:	e01b      	b.n	8008bb2 <HAL_RCC_OscConfig+0x52e>
 8008b7a:	bf00      	nop
 8008b7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b80:	4b9b      	ldr	r3, [pc, #620]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a9a      	ldr	r2, [pc, #616]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b8c:	f7fa faa2 	bl	80030d4 <HAL_GetTick>
 8008b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b92:	e008      	b.n	8008ba6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b94:	f7fa fa9e 	bl	80030d4 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e1c0      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ba6:	4b92      	ldr	r3, [pc, #584]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f0      	bne.n	8008b94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0304 	and.w	r3, r3, #4
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 8081 	beq.w	8008cc2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008bc0:	4b8c      	ldr	r3, [pc, #560]	; (8008df4 <HAL_RCC_OscConfig+0x770>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a8b      	ldr	r2, [pc, #556]	; (8008df4 <HAL_RCC_OscConfig+0x770>)
 8008bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bcc:	f7fa fa82 	bl	80030d4 <HAL_GetTick>
 8008bd0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bd4:	f7fa fa7e 	bl	80030d4 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b64      	cmp	r3, #100	; 0x64
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e1a0      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008be6:	4b83      	ldr	r3, [pc, #524]	; (8008df4 <HAL_RCC_OscConfig+0x770>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0f0      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d106      	bne.n	8008c08 <HAL_RCC_OscConfig+0x584>
 8008bfa:	4b7d      	ldr	r3, [pc, #500]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfe:	4a7c      	ldr	r2, [pc, #496]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c00:	f043 0301 	orr.w	r3, r3, #1
 8008c04:	6713      	str	r3, [r2, #112]	; 0x70
 8008c06:	e02d      	b.n	8008c64 <HAL_RCC_OscConfig+0x5e0>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10c      	bne.n	8008c2a <HAL_RCC_OscConfig+0x5a6>
 8008c10:	4b77      	ldr	r3, [pc, #476]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c14:	4a76      	ldr	r2, [pc, #472]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c1c:	4b74      	ldr	r3, [pc, #464]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c20:	4a73      	ldr	r2, [pc, #460]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c22:	f023 0304 	bic.w	r3, r3, #4
 8008c26:	6713      	str	r3, [r2, #112]	; 0x70
 8008c28:	e01c      	b.n	8008c64 <HAL_RCC_OscConfig+0x5e0>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2b05      	cmp	r3, #5
 8008c30:	d10c      	bne.n	8008c4c <HAL_RCC_OscConfig+0x5c8>
 8008c32:	4b6f      	ldr	r3, [pc, #444]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c36:	4a6e      	ldr	r2, [pc, #440]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c38:	f043 0304 	orr.w	r3, r3, #4
 8008c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c3e:	4b6c      	ldr	r3, [pc, #432]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c42:	4a6b      	ldr	r2, [pc, #428]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c44:	f043 0301 	orr.w	r3, r3, #1
 8008c48:	6713      	str	r3, [r2, #112]	; 0x70
 8008c4a:	e00b      	b.n	8008c64 <HAL_RCC_OscConfig+0x5e0>
 8008c4c:	4b68      	ldr	r3, [pc, #416]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c50:	4a67      	ldr	r2, [pc, #412]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c52:	f023 0301 	bic.w	r3, r3, #1
 8008c56:	6713      	str	r3, [r2, #112]	; 0x70
 8008c58:	4b65      	ldr	r3, [pc, #404]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5c:	4a64      	ldr	r2, [pc, #400]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c5e:	f023 0304 	bic.w	r3, r3, #4
 8008c62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d015      	beq.n	8008c98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c6c:	f7fa fa32 	bl	80030d4 <HAL_GetTick>
 8008c70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c72:	e00a      	b.n	8008c8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c74:	f7fa fa2e 	bl	80030d4 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d901      	bls.n	8008c8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e14e      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c8a:	4b59      	ldr	r3, [pc, #356]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d0ee      	beq.n	8008c74 <HAL_RCC_OscConfig+0x5f0>
 8008c96:	e014      	b.n	8008cc2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c98:	f7fa fa1c 	bl	80030d4 <HAL_GetTick>
 8008c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c9e:	e00a      	b.n	8008cb6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ca0:	f7fa fa18 	bl	80030d4 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e138      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cb6:	4b4e      	ldr	r3, [pc, #312]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cba:	f003 0302 	and.w	r3, r3, #2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1ee      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 812d 	beq.w	8008f26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ccc:	4b48      	ldr	r3, [pc, #288]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cd4:	2b18      	cmp	r3, #24
 8008cd6:	f000 80bd 	beq.w	8008e54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	f040 809e 	bne.w	8008e20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ce4:	4b42      	ldr	r3, [pc, #264]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a41      	ldr	r2, [pc, #260]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf0:	f7fa f9f0 	bl	80030d4 <HAL_GetTick>
 8008cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cf8:	f7fa f9ec 	bl	80030d4 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e10e      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d0a:	4b39      	ldr	r3, [pc, #228]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d16:	4b36      	ldr	r3, [pc, #216]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d1a:	4b37      	ldr	r3, [pc, #220]	; (8008df8 <HAL_RCC_OscConfig+0x774>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d26:	0112      	lsls	r2, r2, #4
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	4931      	ldr	r1, [pc, #196]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	628b      	str	r3, [r1, #40]	; 0x28
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d34:	3b01      	subs	r3, #1
 8008d36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	025b      	lsls	r3, r3, #9
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	431a      	orrs	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	041b      	lsls	r3, r3, #16
 8008d4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	061b      	lsls	r3, r3, #24
 8008d5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d60:	4923      	ldr	r1, [pc, #140]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d66:	4b22      	ldr	r3, [pc, #136]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6a:	4a21      	ldr	r2, [pc, #132]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d6c:	f023 0301 	bic.w	r3, r3, #1
 8008d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d72:	4b1f      	ldr	r3, [pc, #124]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d76:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <HAL_RCC_OscConfig+0x778>)
 8008d78:	4013      	ands	r3, r2
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d7e:	00d2      	lsls	r2, r2, #3
 8008d80:	491b      	ldr	r1, [pc, #108]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d86:	4b1a      	ldr	r3, [pc, #104]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	f023 020c 	bic.w	r2, r3, #12
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	4917      	ldr	r1, [pc, #92]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d98:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9c:	f023 0202 	bic.w	r2, r3, #2
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da4:	4912      	ldr	r1, [pc, #72]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008daa:	4b11      	ldr	r3, [pc, #68]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	4a10      	ldr	r2, [pc, #64]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db6:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	4a0d      	ldr	r2, [pc, #52]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc6:	4a0a      	ldr	r2, [pc, #40]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008dce:	4b08      	ldr	r3, [pc, #32]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	4a07      	ldr	r2, [pc, #28]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008dd4:	f043 0301 	orr.w	r3, r3, #1
 8008dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a04      	ldr	r2, [pc, #16]	; (8008df0 <HAL_RCC_OscConfig+0x76c>)
 8008de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de6:	f7fa f975 	bl	80030d4 <HAL_GetTick>
 8008dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dec:	e011      	b.n	8008e12 <HAL_RCC_OscConfig+0x78e>
 8008dee:	bf00      	nop
 8008df0:	58024400 	.word	0x58024400
 8008df4:	58024800 	.word	0x58024800
 8008df8:	fffffc0c 	.word	0xfffffc0c
 8008dfc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e00:	f7fa f968 	bl	80030d4 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e08a      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e12:	4b47      	ldr	r3, [pc, #284]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f0      	beq.n	8008e00 <HAL_RCC_OscConfig+0x77c>
 8008e1e:	e082      	b.n	8008f26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e20:	4b43      	ldr	r3, [pc, #268]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a42      	ldr	r2, [pc, #264]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e2c:	f7fa f952 	bl	80030d4 <HAL_GetTick>
 8008e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e32:	e008      	b.n	8008e46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e34:	f7fa f94e 	bl	80030d4 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d901      	bls.n	8008e46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e070      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e46:	4b3a      	ldr	r3, [pc, #232]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1f0      	bne.n	8008e34 <HAL_RCC_OscConfig+0x7b0>
 8008e52:	e068      	b.n	8008f26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e54:	4b36      	ldr	r3, [pc, #216]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e5a:	4b35      	ldr	r3, [pc, #212]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d031      	beq.n	8008ecc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f003 0203 	and.w	r2, r3, #3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d12a      	bne.n	8008ecc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	091b      	lsrs	r3, r3, #4
 8008e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d122      	bne.n	8008ecc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d11a      	bne.n	8008ecc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	0a5b      	lsrs	r3, r3, #9
 8008e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d111      	bne.n	8008ecc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	0c1b      	lsrs	r3, r3, #16
 8008eac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d108      	bne.n	8008ecc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	0e1b      	lsrs	r3, r3, #24
 8008ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d001      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e02b      	b.n	8008f28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008ed0:	4b17      	ldr	r3, [pc, #92]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed4:	08db      	lsrs	r3, r3, #3
 8008ed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008eda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d01f      	beq.n	8008f26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008ee6:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eea:	4a11      	ldr	r2, [pc, #68]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ef2:	f7fa f8ef 	bl	80030d4 <HAL_GetTick>
 8008ef6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008ef8:	bf00      	nop
 8008efa:	f7fa f8eb 	bl	80030d4 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d0f9      	beq.n	8008efa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f06:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f0a:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <HAL_RCC_OscConfig+0x8b0>)
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f12:	00d2      	lsls	r2, r2, #3
 8008f14:	4906      	ldr	r1, [pc, #24]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008f16:	4313      	orrs	r3, r2
 8008f18:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	4a04      	ldr	r2, [pc, #16]	; (8008f30 <HAL_RCC_OscConfig+0x8ac>)
 8008f20:	f043 0301 	orr.w	r3, r3, #1
 8008f24:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3730      	adds	r7, #48	; 0x30
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	58024400 	.word	0x58024400
 8008f34:	ffff0007 	.word	0xffff0007

08008f38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e19c      	b.n	8009286 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f4c:	4b8a      	ldr	r3, [pc, #552]	; (8009178 <HAL_RCC_ClockConfig+0x240>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d910      	bls.n	8008f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f5a:	4b87      	ldr	r3, [pc, #540]	; (8009178 <HAL_RCC_ClockConfig+0x240>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f023 020f 	bic.w	r2, r3, #15
 8008f62:	4985      	ldr	r1, [pc, #532]	; (8009178 <HAL_RCC_ClockConfig+0x240>)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f6a:	4b83      	ldr	r3, [pc, #524]	; (8009178 <HAL_RCC_ClockConfig+0x240>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d001      	beq.n	8008f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e184      	b.n	8009286 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d010      	beq.n	8008faa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	4b7b      	ldr	r3, [pc, #492]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d908      	bls.n	8008faa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f98:	4b78      	ldr	r3, [pc, #480]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	4975      	ldr	r1, [pc, #468]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0308 	and.w	r3, r3, #8
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d010      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	4b70      	ldr	r3, [pc, #448]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d908      	bls.n	8008fd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008fc6:	4b6d      	ldr	r3, [pc, #436]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	496a      	ldr	r1, [pc, #424]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0310 	and.w	r3, r3, #16
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d010      	beq.n	8009006 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	4b64      	ldr	r3, [pc, #400]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d908      	bls.n	8009006 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ff4:	4b61      	ldr	r3, [pc, #388]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	495e      	ldr	r1, [pc, #376]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009002:	4313      	orrs	r3, r2
 8009004:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d010      	beq.n	8009034 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69da      	ldr	r2, [r3, #28]
 8009016:	4b59      	ldr	r3, [pc, #356]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800901e:	429a      	cmp	r2, r3
 8009020:	d908      	bls.n	8009034 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009022:	4b56      	ldr	r3, [pc, #344]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	4953      	ldr	r1, [pc, #332]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009030:	4313      	orrs	r3, r2
 8009032:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0302 	and.w	r3, r3, #2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d010      	beq.n	8009062 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	4b4d      	ldr	r3, [pc, #308]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	429a      	cmp	r2, r3
 800904e:	d908      	bls.n	8009062 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009050:	4b4a      	ldr	r3, [pc, #296]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	f023 020f 	bic.w	r2, r3, #15
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	4947      	ldr	r1, [pc, #284]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 800905e:	4313      	orrs	r3, r2
 8009060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d055      	beq.n	800911a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800906e:	4b43      	ldr	r3, [pc, #268]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	4940      	ldr	r1, [pc, #256]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 800907c:	4313      	orrs	r3, r2
 800907e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d107      	bne.n	8009098 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009088:	4b3c      	ldr	r3, [pc, #240]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d121      	bne.n	80090d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e0f6      	b.n	8009286 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	2b03      	cmp	r3, #3
 800909e:	d107      	bne.n	80090b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090a0:	4b36      	ldr	r3, [pc, #216]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d115      	bne.n	80090d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e0ea      	b.n	8009286 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d107      	bne.n	80090c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090b8:	4b30      	ldr	r3, [pc, #192]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d109      	bne.n	80090d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e0de      	b.n	8009286 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090c8:	4b2c      	ldr	r3, [pc, #176]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0304 	and.w	r3, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e0d6      	b.n	8009286 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090d8:	4b28      	ldr	r3, [pc, #160]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f023 0207 	bic.w	r2, r3, #7
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4925      	ldr	r1, [pc, #148]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ea:	f7f9 fff3 	bl	80030d4 <HAL_GetTick>
 80090ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090f0:	e00a      	b.n	8009108 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090f2:	f7f9 ffef 	bl	80030d4 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009100:	4293      	cmp	r3, r2
 8009102:	d901      	bls.n	8009108 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e0be      	b.n	8009286 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009108:	4b1c      	ldr	r3, [pc, #112]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	429a      	cmp	r2, r3
 8009118:	d1eb      	bne.n	80090f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d010      	beq.n	8009148 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	4b14      	ldr	r3, [pc, #80]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	429a      	cmp	r2, r3
 8009134:	d208      	bcs.n	8009148 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f023 020f 	bic.w	r2, r3, #15
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	490e      	ldr	r1, [pc, #56]	; (800917c <HAL_RCC_ClockConfig+0x244>)
 8009144:	4313      	orrs	r3, r2
 8009146:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <HAL_RCC_ClockConfig+0x240>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 030f 	and.w	r3, r3, #15
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d214      	bcs.n	8009180 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009156:	4b08      	ldr	r3, [pc, #32]	; (8009178 <HAL_RCC_ClockConfig+0x240>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f023 020f 	bic.w	r2, r3, #15
 800915e:	4906      	ldr	r1, [pc, #24]	; (8009178 <HAL_RCC_ClockConfig+0x240>)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	4313      	orrs	r3, r2
 8009164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009166:	4b04      	ldr	r3, [pc, #16]	; (8009178 <HAL_RCC_ClockConfig+0x240>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 030f 	and.w	r3, r3, #15
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d005      	beq.n	8009180 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e086      	b.n	8009286 <HAL_RCC_ClockConfig+0x34e>
 8009178:	52002000 	.word	0x52002000
 800917c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d010      	beq.n	80091ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	4b3f      	ldr	r3, [pc, #252]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009198:	429a      	cmp	r2, r3
 800919a:	d208      	bcs.n	80091ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800919c:	4b3c      	ldr	r3, [pc, #240]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	4939      	ldr	r1, [pc, #228]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0308 	and.w	r3, r3, #8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d010      	beq.n	80091dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695a      	ldr	r2, [r3, #20]
 80091be:	4b34      	ldr	r3, [pc, #208]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d208      	bcs.n	80091dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091ca:	4b31      	ldr	r3, [pc, #196]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	492e      	ldr	r1, [pc, #184]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d010      	beq.n	800920a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699a      	ldr	r2, [r3, #24]
 80091ec:	4b28      	ldr	r3, [pc, #160]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d208      	bcs.n	800920a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091f8:	4b25      	ldr	r3, [pc, #148]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	4922      	ldr	r1, [pc, #136]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 8009206:	4313      	orrs	r3, r2
 8009208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0320 	and.w	r3, r3, #32
 8009212:	2b00      	cmp	r3, #0
 8009214:	d010      	beq.n	8009238 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	69da      	ldr	r2, [r3, #28]
 800921a:	4b1d      	ldr	r3, [pc, #116]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009222:	429a      	cmp	r2, r3
 8009224:	d208      	bcs.n	8009238 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009226:	4b1a      	ldr	r3, [pc, #104]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	4917      	ldr	r1, [pc, #92]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 8009234:	4313      	orrs	r3, r2
 8009236:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009238:	f000 f834 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 800923c:	4602      	mov	r2, r0
 800923e:	4b14      	ldr	r3, [pc, #80]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	0a1b      	lsrs	r3, r3, #8
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	4912      	ldr	r1, [pc, #72]	; (8009294 <HAL_RCC_ClockConfig+0x35c>)
 800924a:	5ccb      	ldrb	r3, [r1, r3]
 800924c:	f003 031f 	and.w	r3, r3, #31
 8009250:	fa22 f303 	lsr.w	r3, r2, r3
 8009254:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009256:	4b0e      	ldr	r3, [pc, #56]	; (8009290 <HAL_RCC_ClockConfig+0x358>)
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	4a0d      	ldr	r2, [pc, #52]	; (8009294 <HAL_RCC_ClockConfig+0x35c>)
 8009260:	5cd3      	ldrb	r3, [r2, r3]
 8009262:	f003 031f 	and.w	r3, r3, #31
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	fa22 f303 	lsr.w	r3, r2, r3
 800926c:	4a0a      	ldr	r2, [pc, #40]	; (8009298 <HAL_RCC_ClockConfig+0x360>)
 800926e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009270:	4a0a      	ldr	r2, [pc, #40]	; (800929c <HAL_RCC_ClockConfig+0x364>)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009276:	4b0a      	ldr	r3, [pc, #40]	; (80092a0 <HAL_RCC_ClockConfig+0x368>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4618      	mov	r0, r3
 800927c:	f7f9 fc62 	bl	8002b44 <HAL_InitTick>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	58024400 	.word	0x58024400
 8009294:	08015674 	.word	0x08015674
 8009298:	2400008c 	.word	0x2400008c
 800929c:	24000088 	.word	0x24000088
 80092a0:	24000090 	.word	0x24000090

080092a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b089      	sub	sp, #36	; 0x24
 80092a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092aa:	4bb3      	ldr	r3, [pc, #716]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092b2:	2b18      	cmp	r3, #24
 80092b4:	f200 8155 	bhi.w	8009562 <HAL_RCC_GetSysClockFreq+0x2be>
 80092b8:	a201      	add	r2, pc, #4	; (adr r2, 80092c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80092ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092be:	bf00      	nop
 80092c0:	08009325 	.word	0x08009325
 80092c4:	08009563 	.word	0x08009563
 80092c8:	08009563 	.word	0x08009563
 80092cc:	08009563 	.word	0x08009563
 80092d0:	08009563 	.word	0x08009563
 80092d4:	08009563 	.word	0x08009563
 80092d8:	08009563 	.word	0x08009563
 80092dc:	08009563 	.word	0x08009563
 80092e0:	0800934b 	.word	0x0800934b
 80092e4:	08009563 	.word	0x08009563
 80092e8:	08009563 	.word	0x08009563
 80092ec:	08009563 	.word	0x08009563
 80092f0:	08009563 	.word	0x08009563
 80092f4:	08009563 	.word	0x08009563
 80092f8:	08009563 	.word	0x08009563
 80092fc:	08009563 	.word	0x08009563
 8009300:	08009351 	.word	0x08009351
 8009304:	08009563 	.word	0x08009563
 8009308:	08009563 	.word	0x08009563
 800930c:	08009563 	.word	0x08009563
 8009310:	08009563 	.word	0x08009563
 8009314:	08009563 	.word	0x08009563
 8009318:	08009563 	.word	0x08009563
 800931c:	08009563 	.word	0x08009563
 8009320:	08009357 	.word	0x08009357
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009324:	4b94      	ldr	r3, [pc, #592]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b00      	cmp	r3, #0
 800932e:	d009      	beq.n	8009344 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009330:	4b91      	ldr	r3, [pc, #580]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	08db      	lsrs	r3, r3, #3
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	4a90      	ldr	r2, [pc, #576]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800933c:	fa22 f303 	lsr.w	r3, r2, r3
 8009340:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009342:	e111      	b.n	8009568 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009344:	4b8d      	ldr	r3, [pc, #564]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009346:	61bb      	str	r3, [r7, #24]
      break;
 8009348:	e10e      	b.n	8009568 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800934a:	4b8d      	ldr	r3, [pc, #564]	; (8009580 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800934c:	61bb      	str	r3, [r7, #24]
      break;
 800934e:	e10b      	b.n	8009568 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009350:	4b8c      	ldr	r3, [pc, #560]	; (8009584 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009352:	61bb      	str	r3, [r7, #24]
      break;
 8009354:	e108      	b.n	8009568 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009356:	4b88      	ldr	r3, [pc, #544]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	f003 0303 	and.w	r3, r3, #3
 800935e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009360:	4b85      	ldr	r3, [pc, #532]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009364:	091b      	lsrs	r3, r3, #4
 8009366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800936a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800936c:	4b82      	ldr	r3, [pc, #520]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009376:	4b80      	ldr	r3, [pc, #512]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937a:	08db      	lsrs	r3, r3, #3
 800937c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	fb02 f303 	mul.w	r3, r2, r3
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 80e1 	beq.w	800955c <HAL_RCC_GetSysClockFreq+0x2b8>
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b02      	cmp	r3, #2
 800939e:	f000 8083 	beq.w	80094a8 <HAL_RCC_GetSysClockFreq+0x204>
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	f200 80a1 	bhi.w	80094ec <HAL_RCC_GetSysClockFreq+0x248>
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_RCC_GetSysClockFreq+0x114>
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d056      	beq.n	8009464 <HAL_RCC_GetSysClockFreq+0x1c0>
 80093b6:	e099      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b8:	4b6f      	ldr	r3, [pc, #444]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0320 	and.w	r3, r3, #32
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d02d      	beq.n	8009420 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093c4:	4b6c      	ldr	r3, [pc, #432]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	08db      	lsrs	r3, r3, #3
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	4a6b      	ldr	r2, [pc, #428]	; (800957c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093d0:	fa22 f303 	lsr.w	r3, r2, r3
 80093d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ee:	4b62      	ldr	r3, [pc, #392]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009402:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009588 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800941e:	e087      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800958c <HAL_RCC_GetSysClockFreq+0x2e8>
 800942e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009432:	4b51      	ldr	r3, [pc, #324]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009442:	ed97 6a02 	vldr	s12, [r7, #8]
 8009446:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009588 <HAL_RCC_GetSysClockFreq+0x2e4>
 800944a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009462:	e065      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009590 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009476:	4b40      	ldr	r3, [pc, #256]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009486:	ed97 6a02 	vldr	s12, [r7, #8]
 800948a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009588 <HAL_RCC_GetSysClockFreq+0x2e4>
 800948e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800949a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800949e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094a6:	e043      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009594 <HAL_RCC_GetSysClockFreq+0x2f0>
 80094b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ba:	4b2f      	ldr	r3, [pc, #188]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80094ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009588 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094ea:	e021      	b.n	8009530 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009590 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094fe:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009506:	ee07 3a90 	vmov	s15, r3
 800950a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800950e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009512:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009588 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800951a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800951e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800952a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800952e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009530:	4b11      	ldr	r3, [pc, #68]	; (8009578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009534:	0a5b      	lsrs	r3, r3, #9
 8009536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800953a:	3301      	adds	r3, #1
 800953c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009548:	edd7 6a07 	vldr	s13, [r7, #28]
 800954c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009554:	ee17 3a90 	vmov	r3, s15
 8009558:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800955a:	e005      	b.n	8009568 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	61bb      	str	r3, [r7, #24]
      break;
 8009560:	e002      	b.n	8009568 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009562:	4b07      	ldr	r3, [pc, #28]	; (8009580 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009564:	61bb      	str	r3, [r7, #24]
      break;
 8009566:	bf00      	nop
  }

  return sysclockfreq;
 8009568:	69bb      	ldr	r3, [r7, #24]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3724      	adds	r7, #36	; 0x24
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	58024400 	.word	0x58024400
 800957c:	03d09000 	.word	0x03d09000
 8009580:	003d0900 	.word	0x003d0900
 8009584:	017d7840 	.word	0x017d7840
 8009588:	46000000 	.word	0x46000000
 800958c:	4c742400 	.word	0x4c742400
 8009590:	4a742400 	.word	0x4a742400
 8009594:	4bbebc20 	.word	0x4bbebc20

08009598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800959e:	f7ff fe81 	bl	80092a4 <HAL_RCC_GetSysClockFreq>
 80095a2:	4602      	mov	r2, r0
 80095a4:	4b10      	ldr	r3, [pc, #64]	; (80095e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	0a1b      	lsrs	r3, r3, #8
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	490f      	ldr	r1, [pc, #60]	; (80095ec <HAL_RCC_GetHCLKFreq+0x54>)
 80095b0:	5ccb      	ldrb	r3, [r1, r3]
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	f003 030f 	and.w	r3, r3, #15
 80095c4:	4a09      	ldr	r2, [pc, #36]	; (80095ec <HAL_RCC_GetHCLKFreq+0x54>)
 80095c6:	5cd3      	ldrb	r3, [r2, r3]
 80095c8:	f003 031f 	and.w	r3, r3, #31
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	fa22 f303 	lsr.w	r3, r2, r3
 80095d2:	4a07      	ldr	r2, [pc, #28]	; (80095f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80095d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095d6:	4a07      	ldr	r2, [pc, #28]	; (80095f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095dc:	4b04      	ldr	r3, [pc, #16]	; (80095f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80095de:	681b      	ldr	r3, [r3, #0]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	58024400 	.word	0x58024400
 80095ec:	08015674 	.word	0x08015674
 80095f0:	2400008c 	.word	0x2400008c
 80095f4:	24000088 	.word	0x24000088

080095f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095fc:	f7ff ffcc 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 8009600:	4602      	mov	r2, r0
 8009602:	4b06      	ldr	r3, [pc, #24]	; (800961c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	091b      	lsrs	r3, r3, #4
 8009608:	f003 0307 	and.w	r3, r3, #7
 800960c:	4904      	ldr	r1, [pc, #16]	; (8009620 <HAL_RCC_GetPCLK1Freq+0x28>)
 800960e:	5ccb      	ldrb	r3, [r1, r3]
 8009610:	f003 031f 	and.w	r3, r3, #31
 8009614:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009618:	4618      	mov	r0, r3
 800961a:	bd80      	pop	{r7, pc}
 800961c:	58024400 	.word	0x58024400
 8009620:	08015674 	.word	0x08015674

08009624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009628:	f7ff ffb6 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 800962c:	4602      	mov	r2, r0
 800962e:	4b06      	ldr	r3, [pc, #24]	; (8009648 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	0a1b      	lsrs	r3, r3, #8
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	4904      	ldr	r1, [pc, #16]	; (800964c <HAL_RCC_GetPCLK2Freq+0x28>)
 800963a:	5ccb      	ldrb	r3, [r1, r3]
 800963c:	f003 031f 	and.w	r3, r3, #31
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009644:	4618      	mov	r0, r3
 8009646:	bd80      	pop	{r7, pc}
 8009648:	58024400 	.word	0x58024400
 800964c:	08015674 	.word	0x08015674

08009650 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	223f      	movs	r2, #63	; 0x3f
 800965e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009660:	4b1a      	ldr	r3, [pc, #104]	; (80096cc <HAL_RCC_GetClockConfig+0x7c>)
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f003 0207 	and.w	r2, r3, #7
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800966c:	4b17      	ldr	r3, [pc, #92]	; (80096cc <HAL_RCC_GetClockConfig+0x7c>)
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009678:	4b14      	ldr	r3, [pc, #80]	; (80096cc <HAL_RCC_GetClockConfig+0x7c>)
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	f003 020f 	and.w	r2, r3, #15
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009684:	4b11      	ldr	r3, [pc, #68]	; (80096cc <HAL_RCC_GetClockConfig+0x7c>)
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009690:	4b0e      	ldr	r3, [pc, #56]	; (80096cc <HAL_RCC_GetClockConfig+0x7c>)
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800969c:	4b0b      	ldr	r3, [pc, #44]	; (80096cc <HAL_RCC_GetClockConfig+0x7c>)
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80096a8:	4b08      	ldr	r3, [pc, #32]	; (80096cc <HAL_RCC_GetClockConfig+0x7c>)
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <HAL_RCC_GetClockConfig+0x80>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 020f 	and.w	r2, r3, #15
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	601a      	str	r2, [r3, #0]
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	58024400 	.word	0x58024400
 80096d0:	52002000 	.word	0x52002000

080096d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096d8:	b0ca      	sub	sp, #296	; 0x128
 80096da:	af00      	add	r7, sp, #0
 80096dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096e6:	2300      	movs	r3, #0
 80096e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80096f8:	2500      	movs	r5, #0
 80096fa:	ea54 0305 	orrs.w	r3, r4, r5
 80096fe:	d049      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009706:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800970a:	d02f      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800970c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009710:	d828      	bhi.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009716:	d01a      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800971c:	d822      	bhi.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009726:	d007      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009728:	e01c      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800972a:	4bb8      	ldr	r3, [pc, #736]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	4ab7      	ldr	r2, [pc, #732]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009736:	e01a      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800973c:	3308      	adds	r3, #8
 800973e:	2102      	movs	r1, #2
 8009740:	4618      	mov	r0, r3
 8009742:	f002 fb61 	bl	800be08 <RCCEx_PLL2_Config>
 8009746:	4603      	mov	r3, r0
 8009748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800974c:	e00f      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009752:	3328      	adds	r3, #40	; 0x28
 8009754:	2102      	movs	r1, #2
 8009756:	4618      	mov	r0, r3
 8009758:	f002 fc08 	bl	800bf6c <RCCEx_PLL3_Config>
 800975c:	4603      	mov	r3, r0
 800975e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009762:	e004      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800976a:	e000      	b.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800976c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800976e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009776:	4ba5      	ldr	r3, [pc, #660]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800977e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009784:	4aa1      	ldr	r2, [pc, #644]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009786:	430b      	orrs	r3, r1
 8009788:	6513      	str	r3, [r2, #80]	; 0x50
 800978a:	e003      	b.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800978c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009790:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80097a0:	f04f 0900 	mov.w	r9, #0
 80097a4:	ea58 0309 	orrs.w	r3, r8, r9
 80097a8:	d047      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80097aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	d82a      	bhi.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80097b4:	a201      	add	r2, pc, #4	; (adr r2, 80097bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80097b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ba:	bf00      	nop
 80097bc:	080097d1 	.word	0x080097d1
 80097c0:	080097df 	.word	0x080097df
 80097c4:	080097f5 	.word	0x080097f5
 80097c8:	08009813 	.word	0x08009813
 80097cc:	08009813 	.word	0x08009813
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d0:	4b8e      	ldr	r3, [pc, #568]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	4a8d      	ldr	r2, [pc, #564]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097dc:	e01a      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e2:	3308      	adds	r3, #8
 80097e4:	2100      	movs	r1, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f002 fb0e 	bl	800be08 <RCCEx_PLL2_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097f2:	e00f      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f8:	3328      	adds	r3, #40	; 0x28
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f002 fbb5 	bl	800bf6c <RCCEx_PLL3_Config>
 8009802:	4603      	mov	r3, r0
 8009804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009808:	e004      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009810:	e000      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800981c:	4b7b      	ldr	r3, [pc, #492]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800981e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009820:	f023 0107 	bic.w	r1, r3, #7
 8009824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982a:	4a78      	ldr	r2, [pc, #480]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800982c:	430b      	orrs	r3, r1
 800982e:	6513      	str	r3, [r2, #80]	; 0x50
 8009830:	e003      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800983a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009842:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009846:	f04f 0b00 	mov.w	fp, #0
 800984a:	ea5a 030b 	orrs.w	r3, sl, fp
 800984e:	d04c      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800985a:	d030      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800985c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009860:	d829      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009862:	2bc0      	cmp	r3, #192	; 0xc0
 8009864:	d02d      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009866:	2bc0      	cmp	r3, #192	; 0xc0
 8009868:	d825      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800986a:	2b80      	cmp	r3, #128	; 0x80
 800986c:	d018      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800986e:	2b80      	cmp	r3, #128	; 0x80
 8009870:	d821      	bhi.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009876:	2b40      	cmp	r3, #64	; 0x40
 8009878:	d007      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800987a:	e01c      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987c:	4b63      	ldr	r3, [pc, #396]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009880:	4a62      	ldr	r2, [pc, #392]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009888:	e01c      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988e:	3308      	adds	r3, #8
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f002 fab8 	bl	800be08 <RCCEx_PLL2_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800989e:	e011      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a4:	3328      	adds	r3, #40	; 0x28
 80098a6:	2100      	movs	r1, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f002 fb5f 	bl	800bf6c <RCCEx_PLL3_Config>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80098b4:	e006      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098bc:	e002      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80098be:	bf00      	nop
 80098c0:	e000      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80098c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10a      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80098cc:	4b4f      	ldr	r3, [pc, #316]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80098d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098da:	4a4c      	ldr	r2, [pc, #304]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6513      	str	r3, [r2, #80]	; 0x50
 80098e0:	e003      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80098ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80098f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80098fa:	2300      	movs	r3, #0
 80098fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009900:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009904:	460b      	mov	r3, r1
 8009906:	4313      	orrs	r3, r2
 8009908:	d053      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800990a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009912:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009916:	d035      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800991c:	d82e      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800991e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009922:	d031      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009924:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009928:	d828      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800992a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800992e:	d01a      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009934:	d822      	bhi.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800993a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800993e:	d007      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009940:	e01c      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009942:	4b32      	ldr	r3, [pc, #200]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	4a31      	ldr	r2, [pc, #196]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800994c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800994e:	e01c      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009954:	3308      	adds	r3, #8
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f002 fa55 	bl	800be08 <RCCEx_PLL2_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009964:	e011      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996a:	3328      	adds	r3, #40	; 0x28
 800996c:	2100      	movs	r1, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f002 fafc 	bl	800bf6c <RCCEx_PLL3_Config>
 8009974:	4603      	mov	r3, r0
 8009976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800997a:	e006      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009982:	e002      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009992:	4b1e      	ldr	r3, [pc, #120]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009996:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800999a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80099a2:	4a1a      	ldr	r2, [pc, #104]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6593      	str	r3, [r2, #88]	; 0x58
 80099a8:	e003      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80099be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80099c2:	2300      	movs	r3, #0
 80099c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80099cc:	460b      	mov	r3, r1
 80099ce:	4313      	orrs	r3, r2
 80099d0:	d056      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80099d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099de:	d038      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80099e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099e4:	d831      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099ea:	d034      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80099ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099f0:	d82b      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099f6:	d01d      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80099f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099fc:	d825      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d006      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a06:	d00a      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009a08:	e01f      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a0a:	bf00      	nop
 8009a0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a10:	4ba2      	ldr	r3, [pc, #648]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	4aa1      	ldr	r2, [pc, #644]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a1c:	e01c      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a22:	3308      	adds	r3, #8
 8009a24:	2100      	movs	r1, #0
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 f9ee 	bl	800be08 <RCCEx_PLL2_Config>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a32:	e011      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a38:	3328      	adds	r3, #40	; 0x28
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f002 fa95 	bl	800bf6c <RCCEx_PLL3_Config>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a48:	e006      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a50:	e002      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a52:	bf00      	nop
 8009a54:	e000      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10b      	bne.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a60:	4b8e      	ldr	r3, [pc, #568]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a70:	4a8a      	ldr	r2, [pc, #552]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a72:	430b      	orrs	r3, r1
 8009a74:	6593      	str	r3, [r2, #88]	; 0x58
 8009a76:	e003      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a90:	2300      	movs	r3, #0
 8009a92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	d03a      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa6:	2b30      	cmp	r3, #48	; 0x30
 8009aa8:	d01f      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009aaa:	2b30      	cmp	r3, #48	; 0x30
 8009aac:	d819      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	d00c      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	d815      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d019      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009aba:	2b10      	cmp	r3, #16
 8009abc:	d111      	bne.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009abe:	4b77      	ldr	r3, [pc, #476]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	4a76      	ldr	r2, [pc, #472]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009aca:	e011      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	2102      	movs	r1, #2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 f997 	bl	800be08 <RCCEx_PLL2_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009ae0:	e006      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ae8:	e002      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009aea:	bf00      	nop
 8009aec:	e000      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009af8:	4b68      	ldr	r3, [pc, #416]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b06:	4a65      	ldr	r2, [pc, #404]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b0c:	e003      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009b22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b26:	2300      	movs	r3, #0
 8009b28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4313      	orrs	r3, r2
 8009b34:	d051      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b40:	d035      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b46:	d82e      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b4c:	d031      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009b4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b52:	d828      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b58:	d01a      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5e:	d822      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b68:	d007      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009b6a:	e01c      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b6c:	4b4b      	ldr	r3, [pc, #300]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	4a4a      	ldr	r2, [pc, #296]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b78:	e01c      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7e:	3308      	adds	r3, #8
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f002 f940 	bl	800be08 <RCCEx_PLL2_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b8e:	e011      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	3328      	adds	r3, #40	; 0x28
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f002 f9e7 	bl	800bf6c <RCCEx_PLL3_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ba4:	e006      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bac:	e002      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009bae:	bf00      	nop
 8009bb0:	e000      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009bbc:	4b37      	ldr	r3, [pc, #220]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bca:	4a34      	ldr	r2, [pc, #208]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	6513      	str	r3, [r2, #80]	; 0x50
 8009bd0:	e003      	b.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bea:	2300      	movs	r3, #0
 8009bec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009bf0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	d056      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c04:	d033      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c0a:	d82c      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c10:	d02f      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c16:	d826      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c1c:	d02b      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c22:	d820      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c28:	d012      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c2e:	d81a      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d022      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c38:	d115      	bne.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3e:	3308      	adds	r3, #8
 8009c40:	2101      	movs	r1, #1
 8009c42:	4618      	mov	r0, r3
 8009c44:	f002 f8e0 	bl	800be08 <RCCEx_PLL2_Config>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c4e:	e015      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c54:	3328      	adds	r3, #40	; 0x28
 8009c56:	2101      	movs	r1, #1
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f002 f987 	bl	800bf6c <RCCEx_PLL3_Config>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c64:	e00a      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c6c:	e006      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c6e:	bf00      	nop
 8009c70:	e004      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c72:	bf00      	nop
 8009c74:	e002      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c76:	bf00      	nop
 8009c78:	e000      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10d      	bne.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c84:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c88:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c92:	4a02      	ldr	r2, [pc, #8]	; (8009c9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c94:	430b      	orrs	r3, r1
 8009c96:	6513      	str	r3, [r2, #80]	; 0x50
 8009c98:	e006      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009c9a:	bf00      	nop
 8009c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cbe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	d055      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cd4:	d033      	beq.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cda:	d82c      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce0:	d02f      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce6:	d826      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009ce8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cec:	d02b      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009cee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cf2:	d820      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cf8:	d012      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cfe:	d81a      	bhi.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d022      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d08:	d115      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0e:	3308      	adds	r3, #8
 8009d10:	2101      	movs	r1, #1
 8009d12:	4618      	mov	r0, r3
 8009d14:	f002 f878 	bl	800be08 <RCCEx_PLL2_Config>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d1e:	e015      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d24:	3328      	adds	r3, #40	; 0x28
 8009d26:	2101      	movs	r1, #1
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f002 f91f 	bl	800bf6c <RCCEx_PLL3_Config>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d34:	e00a      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d3c:	e006      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d3e:	bf00      	nop
 8009d40:	e004      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d42:	bf00      	nop
 8009d44:	e002      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d46:	bf00      	nop
 8009d48:	e000      	b.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10b      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d54:	4ba3      	ldr	r3, [pc, #652]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d58:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d64:	4a9f      	ldr	r2, [pc, #636]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d66:	430b      	orrs	r3, r1
 8009d68:	6593      	str	r3, [r2, #88]	; 0x58
 8009d6a:	e003      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d84:	2300      	movs	r3, #0
 8009d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4313      	orrs	r3, r2
 8009d92:	d037      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d9e:	d00e      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009da4:	d816      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d018      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dae:	d111      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db0:	4b8c      	ldr	r3, [pc, #560]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	4a8b      	ldr	r2, [pc, #556]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009dbc:	e00f      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 f81e 	bl	800be08 <RCCEx_PLL2_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009dd2:	e004      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009de6:	4b7f      	ldr	r3, [pc, #508]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df4:	4a7b      	ldr	r2, [pc, #492]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009df6:	430b      	orrs	r3, r1
 8009df8:	6513      	str	r3, [r2, #80]	; 0x50
 8009dfa:	e003      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4313      	orrs	r3, r2
 8009e22:	d039      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d81c      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009e2e:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e34:	08009e71 	.word	0x08009e71
 8009e38:	08009e45 	.word	0x08009e45
 8009e3c:	08009e53 	.word	0x08009e53
 8009e40:	08009e71 	.word	0x08009e71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e44:	4b67      	ldr	r3, [pc, #412]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	4a66      	ldr	r2, [pc, #408]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e50:	e00f      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e56:	3308      	adds	r3, #8
 8009e58:	2102      	movs	r1, #2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f001 ffd4 	bl	800be08 <RCCEx_PLL2_Config>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e66:	e004      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e6e:	e000      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10a      	bne.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e7a:	4b5a      	ldr	r3, [pc, #360]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e7e:	f023 0103 	bic.w	r1, r3, #3
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e88:	4a56      	ldr	r2, [pc, #344]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e8a:	430b      	orrs	r3, r1
 8009e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e8e:	e003      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009eae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	f000 809f 	beq.w	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009eba:	4b4b      	ldr	r3, [pc, #300]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a4a      	ldr	r2, [pc, #296]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ec6:	f7f9 f905 	bl	80030d4 <HAL_GetTick>
 8009eca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ece:	e00b      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ed0:	f7f9 f900 	bl	80030d4 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b64      	cmp	r3, #100	; 0x64
 8009ede:	d903      	bls.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ee6:	e005      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ee8:	4b3f      	ldr	r3, [pc, #252]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d0ed      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d179      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009efc:	4b39      	ldr	r3, [pc, #228]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f08:	4053      	eors	r3, r2
 8009f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d015      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f12:	4b34      	ldr	r3, [pc, #208]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f1e:	4b31      	ldr	r3, [pc, #196]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f22:	4a30      	ldr	r2, [pc, #192]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f2a:	4b2e      	ldr	r3, [pc, #184]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2e:	4a2d      	ldr	r2, [pc, #180]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f36:	4a2b      	ldr	r2, [pc, #172]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f4a:	d118      	bne.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4c:	f7f9 f8c2 	bl	80030d4 <HAL_GetTick>
 8009f50:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f54:	e00d      	b.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f56:	f7f9 f8bd 	bl	80030d4 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f60:	1ad2      	subs	r2, r2, r3
 8009f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d903      	bls.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009f70:	e005      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f72:	4b1c      	ldr	r3, [pc, #112]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f76:	f003 0302 	and.w	r3, r3, #2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0eb      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d129      	bne.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f96:	d10e      	bne.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009f98:	4b12      	ldr	r3, [pc, #72]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fa8:	091a      	lsrs	r2, r3, #4
 8009faa:	4b10      	ldr	r3, [pc, #64]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	4a0d      	ldr	r2, [pc, #52]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fb0:	430b      	orrs	r3, r1
 8009fb2:	6113      	str	r3, [r2, #16]
 8009fb4:	e005      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	4a0a      	ldr	r2, [pc, #40]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fc0:	6113      	str	r3, [r2, #16]
 8009fc2:	4b08      	ldr	r3, [pc, #32]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fd2:	4a04      	ldr	r2, [pc, #16]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fd4:	430b      	orrs	r3, r1
 8009fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8009fd8:	e00e      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009fda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009fe2:	e009      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	58024800 	.word	0x58024800
 8009fec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f002 0301 	and.w	r3, r2, #1
 800a004:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a008:	2300      	movs	r3, #0
 800a00a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a00e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a012:	460b      	mov	r3, r1
 800a014:	4313      	orrs	r3, r2
 800a016:	f000 8089 	beq.w	800a12c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a01e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a020:	2b28      	cmp	r3, #40	; 0x28
 800a022:	d86b      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a024:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02a:	bf00      	nop
 800a02c:	0800a105 	.word	0x0800a105
 800a030:	0800a0fd 	.word	0x0800a0fd
 800a034:	0800a0fd 	.word	0x0800a0fd
 800a038:	0800a0fd 	.word	0x0800a0fd
 800a03c:	0800a0fd 	.word	0x0800a0fd
 800a040:	0800a0fd 	.word	0x0800a0fd
 800a044:	0800a0fd 	.word	0x0800a0fd
 800a048:	0800a0fd 	.word	0x0800a0fd
 800a04c:	0800a0d1 	.word	0x0800a0d1
 800a050:	0800a0fd 	.word	0x0800a0fd
 800a054:	0800a0fd 	.word	0x0800a0fd
 800a058:	0800a0fd 	.word	0x0800a0fd
 800a05c:	0800a0fd 	.word	0x0800a0fd
 800a060:	0800a0fd 	.word	0x0800a0fd
 800a064:	0800a0fd 	.word	0x0800a0fd
 800a068:	0800a0fd 	.word	0x0800a0fd
 800a06c:	0800a0e7 	.word	0x0800a0e7
 800a070:	0800a0fd 	.word	0x0800a0fd
 800a074:	0800a0fd 	.word	0x0800a0fd
 800a078:	0800a0fd 	.word	0x0800a0fd
 800a07c:	0800a0fd 	.word	0x0800a0fd
 800a080:	0800a0fd 	.word	0x0800a0fd
 800a084:	0800a0fd 	.word	0x0800a0fd
 800a088:	0800a0fd 	.word	0x0800a0fd
 800a08c:	0800a105 	.word	0x0800a105
 800a090:	0800a0fd 	.word	0x0800a0fd
 800a094:	0800a0fd 	.word	0x0800a0fd
 800a098:	0800a0fd 	.word	0x0800a0fd
 800a09c:	0800a0fd 	.word	0x0800a0fd
 800a0a0:	0800a0fd 	.word	0x0800a0fd
 800a0a4:	0800a0fd 	.word	0x0800a0fd
 800a0a8:	0800a0fd 	.word	0x0800a0fd
 800a0ac:	0800a105 	.word	0x0800a105
 800a0b0:	0800a0fd 	.word	0x0800a0fd
 800a0b4:	0800a0fd 	.word	0x0800a0fd
 800a0b8:	0800a0fd 	.word	0x0800a0fd
 800a0bc:	0800a0fd 	.word	0x0800a0fd
 800a0c0:	0800a0fd 	.word	0x0800a0fd
 800a0c4:	0800a0fd 	.word	0x0800a0fd
 800a0c8:	0800a0fd 	.word	0x0800a0fd
 800a0cc:	0800a105 	.word	0x0800a105
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 fe95 	bl	800be08 <RCCEx_PLL2_Config>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a0e4:	e00f      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ea:	3328      	adds	r3, #40	; 0x28
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 ff3c 	bl	800bf6c <RCCEx_PLL3_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a0fa:	e004      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a102:	e000      	b.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a104:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a10e:	4bbf      	ldr	r3, [pc, #764]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a112:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a11c:	4abb      	ldr	r2, [pc, #748]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a11e:	430b      	orrs	r3, r1
 800a120:	6553      	str	r3, [r2, #84]	; 0x54
 800a122:	e003      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a128:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	f002 0302 	and.w	r3, r2, #2
 800a138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a13c:	2300      	movs	r3, #0
 800a13e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a142:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a146:	460b      	mov	r3, r1
 800a148:	4313      	orrs	r3, r2
 800a14a:	d041      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a152:	2b05      	cmp	r3, #5
 800a154:	d824      	bhi.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a156:	a201      	add	r2, pc, #4	; (adr r2, 800a15c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a1a9 	.word	0x0800a1a9
 800a160:	0800a175 	.word	0x0800a175
 800a164:	0800a18b 	.word	0x0800a18b
 800a168:	0800a1a9 	.word	0x0800a1a9
 800a16c:	0800a1a9 	.word	0x0800a1a9
 800a170:	0800a1a9 	.word	0x0800a1a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a178:	3308      	adds	r3, #8
 800a17a:	2101      	movs	r1, #1
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 fe43 	bl	800be08 <RCCEx_PLL2_Config>
 800a182:	4603      	mov	r3, r0
 800a184:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a188:	e00f      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a18e:	3328      	adds	r3, #40	; 0x28
 800a190:	2101      	movs	r1, #1
 800a192:	4618      	mov	r0, r3
 800a194:	f001 feea 	bl	800bf6c <RCCEx_PLL3_Config>
 800a198:	4603      	mov	r3, r0
 800a19a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a19e:	e004      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1a6:	e000      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a1a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10a      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1b2:	4b96      	ldr	r3, [pc, #600]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b6:	f023 0107 	bic.w	r1, r3, #7
 800a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1c0:	4a92      	ldr	r2, [pc, #584]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1c2:	430b      	orrs	r3, r1
 800a1c4:	6553      	str	r3, [r2, #84]	; 0x54
 800a1c6:	e003      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f002 0304 	and.w	r3, r2, #4
 800a1dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	d044      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1f8:	2b05      	cmp	r3, #5
 800a1fa:	d825      	bhi.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a1fc:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a251 	.word	0x0800a251
 800a208:	0800a21d 	.word	0x0800a21d
 800a20c:	0800a233 	.word	0x0800a233
 800a210:	0800a251 	.word	0x0800a251
 800a214:	0800a251 	.word	0x0800a251
 800a218:	0800a251 	.word	0x0800a251
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a220:	3308      	adds	r3, #8
 800a222:	2101      	movs	r1, #1
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fdef 	bl	800be08 <RCCEx_PLL2_Config>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a230:	e00f      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a236:	3328      	adds	r3, #40	; 0x28
 800a238:	2101      	movs	r1, #1
 800a23a:	4618      	mov	r0, r3
 800a23c:	f001 fe96 	bl	800bf6c <RCCEx_PLL3_Config>
 800a240:	4603      	mov	r3, r0
 800a242:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a246:	e004      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a24e:	e000      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10b      	bne.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a25a:	4b6c      	ldr	r3, [pc, #432]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25e:	f023 0107 	bic.w	r1, r3, #7
 800a262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a26a:	4a68      	ldr	r2, [pc, #416]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6593      	str	r3, [r2, #88]	; 0x58
 800a270:	e003      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a276:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	f002 0320 	and.w	r3, r2, #32
 800a286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a28a:	2300      	movs	r3, #0
 800a28c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a294:	460b      	mov	r3, r1
 800a296:	4313      	orrs	r3, r2
 800a298:	d055      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2a6:	d033      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a2a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2ac:	d82c      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b2:	d02f      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b8:	d826      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2be:	d02b      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a2c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2c4:	d820      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ca:	d012      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2d0:	d81a      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d022      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a2d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2da:	d115      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 fd8f 	bl	800be08 <RCCEx_PLL2_Config>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a2f0:	e015      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f6:	3328      	adds	r3, #40	; 0x28
 800a2f8:	2102      	movs	r1, #2
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f001 fe36 	bl	800bf6c <RCCEx_PLL3_Config>
 800a300:	4603      	mov	r3, r0
 800a302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a306:	e00a      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a30e:	e006      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a310:	bf00      	nop
 800a312:	e004      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a314:	bf00      	nop
 800a316:	e002      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a318:	bf00      	nop
 800a31a:	e000      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a31c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a31e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10b      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a326:	4b39      	ldr	r3, [pc, #228]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a336:	4a35      	ldr	r2, [pc, #212]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a338:	430b      	orrs	r3, r1
 800a33a:	6553      	str	r3, [r2, #84]	; 0x54
 800a33c:	e003      	b.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a33e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a356:	2300      	movs	r3, #0
 800a358:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a35c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a360:	460b      	mov	r3, r1
 800a362:	4313      	orrs	r3, r2
 800a364:	d058      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a36e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a372:	d033      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a374:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a378:	d82c      	bhi.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a37a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37e:	d02f      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a384:	d826      	bhi.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a386:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a38a:	d02b      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a38c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a390:	d820      	bhi.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a396:	d012      	beq.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a39c:	d81a      	bhi.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d022      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a3a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a6:	d115      	bne.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f001 fd29 	bl	800be08 <RCCEx_PLL2_Config>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a3bc:	e015      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c2:	3328      	adds	r3, #40	; 0x28
 800a3c4:	2102      	movs	r1, #2
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f001 fdd0 	bl	800bf6c <RCCEx_PLL3_Config>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a3d2:	e00a      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3da:	e006      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3dc:	bf00      	nop
 800a3de:	e004      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3e0:	bf00      	nop
 800a3e2:	e002      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3e4:	bf00      	nop
 800a3e6:	e000      	b.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10e      	bne.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3f2:	4b06      	ldr	r3, [pc, #24]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a402:	4a02      	ldr	r2, [pc, #8]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a404:	430b      	orrs	r3, r1
 800a406:	6593      	str	r3, [r2, #88]	; 0x58
 800a408:	e006      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a40a:	bf00      	nop
 800a40c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a428:	2300      	movs	r3, #0
 800a42a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a42e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a432:	460b      	mov	r3, r1
 800a434:	4313      	orrs	r3, r2
 800a436:	d055      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a43c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a440:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a444:	d033      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a446:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a44a:	d82c      	bhi.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a44c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a450:	d02f      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a456:	d826      	bhi.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a458:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a45c:	d02b      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a45e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a462:	d820      	bhi.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a468:	d012      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a46a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a46e:	d81a      	bhi.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a470:	2b00      	cmp	r3, #0
 800a472:	d022      	beq.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a478:	d115      	bne.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a47e:	3308      	adds	r3, #8
 800a480:	2100      	movs	r1, #0
 800a482:	4618      	mov	r0, r3
 800a484:	f001 fcc0 	bl	800be08 <RCCEx_PLL2_Config>
 800a488:	4603      	mov	r3, r0
 800a48a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a48e:	e015      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a494:	3328      	adds	r3, #40	; 0x28
 800a496:	2102      	movs	r1, #2
 800a498:	4618      	mov	r0, r3
 800a49a:	f001 fd67 	bl	800bf6c <RCCEx_PLL3_Config>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4a4:	e00a      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4ac:	e006      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4ae:	bf00      	nop
 800a4b0:	e004      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4b2:	bf00      	nop
 800a4b4:	e002      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4b6:	bf00      	nop
 800a4b8:	e000      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a4ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d10b      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a4c4:	4ba1      	ldr	r3, [pc, #644]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a4d4:	4a9d      	ldr	r2, [pc, #628]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4d6:	430b      	orrs	r3, r1
 800a4d8:	6593      	str	r3, [r2, #88]	; 0x58
 800a4da:	e003      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f002 0308 	and.w	r3, r2, #8
 800a4f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a4fe:	460b      	mov	r3, r1
 800a500:	4313      	orrs	r3, r2
 800a502:	d01e      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a510:	d10c      	bne.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a516:	3328      	adds	r3, #40	; 0x28
 800a518:	2102      	movs	r1, #2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f001 fd26 	bl	800bf6c <RCCEx_PLL3_Config>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a52c:	4b87      	ldr	r3, [pc, #540]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a530:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a53c:	4a83      	ldr	r2, [pc, #524]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a53e:	430b      	orrs	r3, r1
 800a540:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f002 0310 	and.w	r3, r2, #16
 800a54e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a552:	2300      	movs	r3, #0
 800a554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a558:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a55c:	460b      	mov	r3, r1
 800a55e:	4313      	orrs	r3, r2
 800a560:	d01e      	beq.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a56a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a56e:	d10c      	bne.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a574:	3328      	adds	r3, #40	; 0x28
 800a576:	2102      	movs	r1, #2
 800a578:	4618      	mov	r0, r3
 800a57a:	f001 fcf7 	bl	800bf6c <RCCEx_PLL3_Config>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a58a:	4b70      	ldr	r3, [pc, #448]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a58c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a58e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a59a:	4a6c      	ldr	r2, [pc, #432]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a59c:	430b      	orrs	r3, r1
 800a59e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a5ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	d03e      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5cc:	d022      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a5ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d2:	d81b      	bhi.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d003      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5dc:	d00b      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a5de:	e015      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f001 fc0d 	bl	800be08 <RCCEx_PLL2_Config>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a5f4:	e00f      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fa:	3328      	adds	r3, #40	; 0x28
 800a5fc:	2102      	movs	r1, #2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f001 fcb4 	bl	800bf6c <RCCEx_PLL3_Config>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a60a:	e004      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a612:	e000      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a614:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10b      	bne.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a61e:	4b4b      	ldr	r3, [pc, #300]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a622:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a62e:	4a47      	ldr	r2, [pc, #284]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a630:	430b      	orrs	r3, r1
 800a632:	6593      	str	r3, [r2, #88]	; 0x58
 800a634:	e003      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a63a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a64a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a64c:	2300      	movs	r3, #0
 800a64e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a650:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a654:	460b      	mov	r3, r1
 800a656:	4313      	orrs	r3, r2
 800a658:	d03b      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a662:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a666:	d01f      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a668:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a66c:	d818      	bhi.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a66e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a672:	d003      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a678:	d007      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a67a:	e011      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a67c:	4b33      	ldr	r3, [pc, #204]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a680:	4a32      	ldr	r2, [pc, #200]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a688:	e00f      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68e:	3328      	adds	r3, #40	; 0x28
 800a690:	2101      	movs	r1, #1
 800a692:	4618      	mov	r0, r3
 800a694:	f001 fc6a 	bl	800bf6c <RCCEx_PLL3_Config>
 800a698:	4603      	mov	r3, r0
 800a69a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a69e:	e004      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6a6:	e000      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a6b2:	4b26      	ldr	r3, [pc, #152]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c2:	4a22      	ldr	r2, [pc, #136]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	6553      	str	r3, [r2, #84]	; 0x54
 800a6c8:	e003      	b.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a6de:	673b      	str	r3, [r7, #112]	; 0x70
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	677b      	str	r3, [r7, #116]	; 0x74
 800a6e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	d034      	beq.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a6f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6fc:	d007      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a6fe:	e011      	b.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a700:	4b12      	ldr	r3, [pc, #72]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	4a11      	ldr	r2, [pc, #68]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a70a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a70c:	e00e      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a712:	3308      	adds	r3, #8
 800a714:	2102      	movs	r1, #2
 800a716:	4618      	mov	r0, r3
 800a718:	f001 fb76 	bl	800be08 <RCCEx_PLL2_Config>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a722:	e003      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a72c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10d      	bne.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a734:	4b05      	ldr	r3, [pc, #20]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a742:	4a02      	ldr	r2, [pc, #8]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a744:	430b      	orrs	r3, r1
 800a746:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a748:	e006      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a74a:	bf00      	nop
 800a74c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a764:	66bb      	str	r3, [r7, #104]	; 0x68
 800a766:	2300      	movs	r3, #0
 800a768:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a76a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a76e:	460b      	mov	r3, r1
 800a770:	4313      	orrs	r3, r2
 800a772:	d00c      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a778:	3328      	adds	r3, #40	; 0x28
 800a77a:	2102      	movs	r1, #2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f001 fbf5 	bl	800bf6c <RCCEx_PLL3_Config>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d002      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a79a:	663b      	str	r3, [r7, #96]	; 0x60
 800a79c:	2300      	movs	r3, #0
 800a79e:	667b      	str	r3, [r7, #100]	; 0x64
 800a7a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	d038      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7b6:	d018      	beq.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a7b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7bc:	d811      	bhi.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a7be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c2:	d014      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a7c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7c8:	d80b      	bhi.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d011      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d2:	d106      	bne.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7d4:	4bc3      	ldr	r3, [pc, #780]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	4ac2      	ldr	r2, [pc, #776]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a7e0:	e008      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7e8:	e004      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7ea:	bf00      	nop
 800a7ec:	e002      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7ee:	bf00      	nop
 800a7f0:	e000      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10b      	bne.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7fc:	4bb9      	ldr	r3, [pc, #740]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a800:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a80c:	4ab5      	ldr	r2, [pc, #724]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a80e:	430b      	orrs	r3, r1
 800a810:	6553      	str	r3, [r2, #84]	; 0x54
 800a812:	e003      	b.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a818:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a828:	65bb      	str	r3, [r7, #88]	; 0x58
 800a82a:	2300      	movs	r3, #0
 800a82c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a82e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a832:	460b      	mov	r3, r1
 800a834:	4313      	orrs	r3, r2
 800a836:	d009      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a838:	4baa      	ldr	r3, [pc, #680]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a83a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a83c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a846:	4aa7      	ldr	r2, [pc, #668]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a848:	430b      	orrs	r3, r1
 800a84a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a858:	653b      	str	r3, [r7, #80]	; 0x50
 800a85a:	2300      	movs	r3, #0
 800a85c:	657b      	str	r3, [r7, #84]	; 0x54
 800a85e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a862:	460b      	mov	r3, r1
 800a864:	4313      	orrs	r3, r2
 800a866:	d00a      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a868:	4b9e      	ldr	r3, [pc, #632]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a874:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a878:	4a9a      	ldr	r2, [pc, #616]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a87a:	430b      	orrs	r3, r1
 800a87c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a88a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a88c:	2300      	movs	r3, #0
 800a88e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a890:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a894:	460b      	mov	r3, r1
 800a896:	4313      	orrs	r3, r2
 800a898:	d009      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a89a:	4b92      	ldr	r3, [pc, #584]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a89e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8a8:	4a8e      	ldr	r2, [pc, #568]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8aa:	430b      	orrs	r3, r1
 800a8ac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a8ba:	643b      	str	r3, [r7, #64]	; 0x40
 800a8bc:	2300      	movs	r3, #0
 800a8be:	647b      	str	r3, [r7, #68]	; 0x44
 800a8c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	d00e      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8ca:	4b86      	ldr	r3, [pc, #536]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	4a85      	ldr	r2, [pc, #532]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8d4:	6113      	str	r3, [r2, #16]
 800a8d6:	4b83      	ldr	r3, [pc, #524]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d8:	6919      	ldr	r1, [r3, #16]
 800a8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a8e2:	4a80      	ldr	r2, [pc, #512]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8e4:	430b      	orrs	r3, r1
 800a8e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a8f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a8fe:	460b      	mov	r3, r1
 800a900:	4313      	orrs	r3, r2
 800a902:	d009      	beq.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a904:	4b77      	ldr	r3, [pc, #476]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a908:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a912:	4a74      	ldr	r2, [pc, #464]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a914:	430b      	orrs	r3, r1
 800a916:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a924:	633b      	str	r3, [r7, #48]	; 0x30
 800a926:	2300      	movs	r3, #0
 800a928:	637b      	str	r3, [r7, #52]	; 0x34
 800a92a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a92e:	460b      	mov	r3, r1
 800a930:	4313      	orrs	r3, r2
 800a932:	d00a      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a934:	4b6b      	ldr	r3, [pc, #428]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a938:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a944:	4a67      	ldr	r2, [pc, #412]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a946:	430b      	orrs	r3, r1
 800a948:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	2100      	movs	r1, #0
 800a954:	62b9      	str	r1, [r7, #40]	; 0x28
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a95c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a960:	460b      	mov	r3, r1
 800a962:	4313      	orrs	r3, r2
 800a964:	d011      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a96a:	3308      	adds	r3, #8
 800a96c:	2100      	movs	r1, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f001 fa4a 	bl	800be08 <RCCEx_PLL2_Config>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a97a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	2100      	movs	r1, #0
 800a994:	6239      	str	r1, [r7, #32]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
 800a99c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	d011      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f001 fa2a 	bl	800be08 <RCCEx_PLL2_Config>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	61b9      	str	r1, [r7, #24]
 800a9d6:	f003 0304 	and.w	r3, r3, #4
 800a9da:	61fb      	str	r3, [r7, #28]
 800a9dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	d011      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	2102      	movs	r1, #2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 fa0a 	bl	800be08 <RCCEx_PLL2_Config>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	2100      	movs	r1, #0
 800aa14:	6139      	str	r1, [r7, #16]
 800aa16:	f003 0308 	and.w	r3, r3, #8
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa20:	460b      	mov	r3, r1
 800aa22:	4313      	orrs	r3, r2
 800aa24:	d011      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2a:	3328      	adds	r3, #40	; 0x28
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f001 fa9c 	bl	800bf6c <RCCEx_PLL3_Config>
 800aa34:	4603      	mov	r3, r0
 800aa36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800aa3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	2100      	movs	r1, #0
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	f003 0310 	and.w	r3, r3, #16
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa60:	460b      	mov	r3, r1
 800aa62:	4313      	orrs	r3, r2
 800aa64:	d011      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6a:	3328      	adds	r3, #40	; 0x28
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 fa7c 	bl	800bf6c <RCCEx_PLL3_Config>
 800aa74:	4603      	mov	r3, r0
 800aa76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	2100      	movs	r1, #0
 800aa94:	6039      	str	r1, [r7, #0]
 800aa96:	f003 0320 	and.w	r3, r3, #32
 800aa9a:	607b      	str	r3, [r7, #4]
 800aa9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	d011      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaaa:	3328      	adds	r3, #40	; 0x28
 800aaac:	2102      	movs	r1, #2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 fa5c 	bl	800bf6c <RCCEx_PLL3_Config>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aaba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800aaca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	e000      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
}
 800aad8:	4618      	mov	r0, r3
 800aada:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800aade:	46bd      	mov	sp, r7
 800aae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aae4:	58024400 	.word	0x58024400

0800aae8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b090      	sub	sp, #64	; 0x40
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aaf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaf6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800aafa:	430b      	orrs	r3, r1
 800aafc:	f040 8094 	bne.w	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab00:	4b9e      	ldr	r3, [pc, #632]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab04:	f003 0307 	and.w	r3, r3, #7
 800ab08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	f200 8087 	bhi.w	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab12:	a201      	add	r2, pc, #4	; (adr r2, 800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab18:	0800ab2d 	.word	0x0800ab2d
 800ab1c:	0800ab55 	.word	0x0800ab55
 800ab20:	0800ab7d 	.word	0x0800ab7d
 800ab24:	0800ac19 	.word	0x0800ac19
 800ab28:	0800aba5 	.word	0x0800aba5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab2c:	4b93      	ldr	r3, [pc, #588]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab38:	d108      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f001 f810 	bl	800bb64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab48:	f000 bd45 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab50:	f000 bd41 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab54:	4b89      	ldr	r3, [pc, #548]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab60:	d108      	bne.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab62:	f107 0318 	add.w	r3, r7, #24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fd54 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab70:	f000 bd31 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab78:	f000 bd2d 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab7c:	4b7f      	ldr	r3, [pc, #508]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab88:	d108      	bne.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab8a:	f107 030c 	add.w	r3, r7, #12
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fe94 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab98:	f000 bd1d 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba0:	f000 bd19 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aba4:	4b75      	ldr	r3, [pc, #468]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abae:	4b73      	ldr	r3, [pc, #460]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d10c      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800abba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d109      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc0:	4b6e      	ldr	r3, [pc, #440]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	4a6d      	ldr	r2, [pc, #436]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd2:	e01f      	b.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abd4:	4b69      	ldr	r3, [pc, #420]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe0:	d106      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abe8:	d102      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abea:	4b66      	ldr	r3, [pc, #408]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800abec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abee:	e011      	b.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abf0:	4b62      	ldr	r3, [pc, #392]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abfc:	d106      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac04:	d102      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac06:	4b60      	ldr	r3, [pc, #384]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ac08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac0a:	e003      	b.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac10:	f000 bce1 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac14:	f000 bcdf 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac18:	4b5c      	ldr	r3, [pc, #368]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac1c:	f000 bcdb 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac24:	f000 bcd7 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ac28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac2c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ac30:	430b      	orrs	r3, r1
 800ac32:	f040 80ad 	bne.w	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ac36:	4b51      	ldr	r3, [pc, #324]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ac3e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac46:	d056      	beq.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4e:	f200 8090 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	2bc0      	cmp	r3, #192	; 0xc0
 800ac56:	f000 8088 	beq.w	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	2bc0      	cmp	r3, #192	; 0xc0
 800ac5e:	f200 8088 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	2b80      	cmp	r3, #128	; 0x80
 800ac66:	d032      	beq.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ac68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6a:	2b80      	cmp	r3, #128	; 0x80
 800ac6c:	f200 8081 	bhi.w	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	2b40      	cmp	r3, #64	; 0x40
 800ac7a:	d014      	beq.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ac7c:	e079      	b.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac7e:	4b3f      	ldr	r3, [pc, #252]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac8a:	d108      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 ff67 	bl	800bb64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac9a:	f000 bc9c 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca2:	f000 bc98 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aca6:	4b35      	ldr	r3, [pc, #212]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acb2:	d108      	bne.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb4:	f107 0318 	add.w	r3, r7, #24
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fcab 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc2:	f000 bc88 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acca:	f000 bc84 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acce:	4b2b      	ldr	r3, [pc, #172]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acda:	d108      	bne.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acdc:	f107 030c 	add.w	r3, r7, #12
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fdeb 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acea:	f000 bc74 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf2:	f000 bc70 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acf6:	4b21      	ldr	r3, [pc, #132]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acfe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad00:	4b1e      	ldr	r3, [pc, #120]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	d10c      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d109      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad12:	4b1a      	ldr	r3, [pc, #104]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	08db      	lsrs	r3, r3, #3
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	4a18      	ldr	r2, [pc, #96]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad24:	e01f      	b.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad26:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad32:	d106      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ad34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad3a:	d102      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad3c:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad40:	e011      	b.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad42:	4b0e      	ldr	r3, [pc, #56]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad4e:	d106      	bne.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ad50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad56:	d102      	bne.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad58:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad5c:	e003      	b.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad62:	f000 bc38 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad66:	f000 bc36 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad6a:	4b08      	ldr	r3, [pc, #32]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad6e:	f000 bc32 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad76:	f000 bc2e 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad7a:	bf00      	nop
 800ad7c:	58024400 	.word	0x58024400
 800ad80:	03d09000 	.word	0x03d09000
 800ad84:	003d0900 	.word	0x003d0900
 800ad88:	017d7840 	.word	0x017d7840
 800ad8c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ad90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad94:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	f040 809c 	bne.w	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ad9e:	4b9e      	ldr	r3, [pc, #632]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ada0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ada6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adae:	d054      	beq.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800adb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800adb6:	f200 808b 	bhi.w	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adc0:	f000 8083 	beq.w	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800adca:	f200 8081 	bhi.w	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800add4:	d02f      	beq.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800addc:	d878      	bhi.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d004      	beq.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adea:	d012      	beq.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800adec:	e070      	b.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adee:	4b8a      	ldr	r3, [pc, #552]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adfa:	d107      	bne.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 feaf 	bl	800bb64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae0a:	e3e4      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae10:	e3e1      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae12:	4b81      	ldr	r3, [pc, #516]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae1e:	d107      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae20:	f107 0318 	add.w	r3, r7, #24
 800ae24:	4618      	mov	r0, r3
 800ae26:	f000 fbf5 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae2e:	e3d2      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae34:	e3cf      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae36:	4b78      	ldr	r3, [pc, #480]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae42:	d107      	bne.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae44:	f107 030c 	add.w	r3, r7, #12
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 fd37 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae52:	e3c0      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae58:	e3bd      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae5a:	4b6f      	ldr	r3, [pc, #444]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae62:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae64:	4b6c      	ldr	r3, [pc, #432]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d10c      	bne.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ae70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d109      	bne.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae76:	4b68      	ldr	r3, [pc, #416]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	08db      	lsrs	r3, r3, #3
 800ae7c:	f003 0303 	and.w	r3, r3, #3
 800ae80:	4a66      	ldr	r2, [pc, #408]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae82:	fa22 f303 	lsr.w	r3, r2, r3
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae88:	e01e      	b.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae8a:	4b63      	ldr	r3, [pc, #396]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae96:	d106      	bne.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ae98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae9e:	d102      	bne.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aea0:	4b5f      	ldr	r3, [pc, #380]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aea4:	e010      	b.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aea6:	4b5c      	ldr	r3, [pc, #368]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeb2:	d106      	bne.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aeb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeba:	d102      	bne.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aebc:	4b59      	ldr	r3, [pc, #356]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aec0:	e002      	b.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aec6:	e386      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aec8:	e385      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aeca:	4b57      	ldr	r3, [pc, #348]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aece:	e382      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed4:	e37f      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeda:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aede:	430b      	orrs	r3, r1
 800aee0:	f040 80a7 	bne.w	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aee4:	4b4c      	ldr	r3, [pc, #304]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aee8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aeec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aef4:	d055      	beq.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aefc:	f200 8096 	bhi.w	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af06:	f000 8084 	beq.w	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af10:	f200 808c 	bhi.w	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af1a:	d030      	beq.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af22:	f200 8083 	bhi.w	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af32:	d012      	beq.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800af34:	e07a      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af36:	4b38      	ldr	r3, [pc, #224]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af42:	d107      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fe0b 	bl	800bb64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af52:	e340      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af54:	2300      	movs	r3, #0
 800af56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af58:	e33d      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af5a:	4b2f      	ldr	r3, [pc, #188]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af66:	d107      	bne.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af68:	f107 0318 	add.w	r3, r7, #24
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 fb51 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af76:	e32e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af7c:	e32b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af7e:	4b26      	ldr	r3, [pc, #152]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af8a:	d107      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af8c:	f107 030c 	add.w	r3, r7, #12
 800af90:	4618      	mov	r0, r3
 800af92:	f000 fc93 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af9a:	e31c      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa0:	e319      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afa2:	4b1d      	ldr	r3, [pc, #116]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afaa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afac:	4b1a      	ldr	r3, [pc, #104]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0304 	and.w	r3, r3, #4
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	d10c      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800afb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d109      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afbe:	4b16      	ldr	r3, [pc, #88]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	08db      	lsrs	r3, r3, #3
 800afc4:	f003 0303 	and.w	r3, r3, #3
 800afc8:	4a14      	ldr	r2, [pc, #80]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800afca:	fa22 f303 	lsr.w	r3, r2, r3
 800afce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afd0:	e01e      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afd2:	4b11      	ldr	r3, [pc, #68]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afde:	d106      	bne.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800afe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afe6:	d102      	bne.n	800afee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afe8:	4b0d      	ldr	r3, [pc, #52]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800afea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afec:	e010      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afee:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aff6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800affa:	d106      	bne.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800affc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b002:	d102      	bne.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b004:	4b07      	ldr	r3, [pc, #28]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b006:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b008:	e002      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b00e:	e2e2      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b010:	e2e1      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b016:	e2de      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b018:	58024400 	.word	0x58024400
 800b01c:	03d09000 	.word	0x03d09000
 800b020:	003d0900 	.word	0x003d0900
 800b024:	017d7840 	.word	0x017d7840
 800b028:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b030:	e2d1      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b032:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b036:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b03a:	430b      	orrs	r3, r1
 800b03c:	f040 809c 	bne.w	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b040:	4b93      	ldr	r3, [pc, #588]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b044:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b048:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b050:	d054      	beq.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b058:	f200 808b 	bhi.w	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b062:	f000 8083 	beq.w	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b06c:	f200 8081 	bhi.w	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b076:	d02f      	beq.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b07e:	d878      	bhi.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	2b00      	cmp	r3, #0
 800b084:	d004      	beq.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b08c:	d012      	beq.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b08e:	e070      	b.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b090:	4b7f      	ldr	r3, [pc, #508]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b09c:	d107      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b09e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fd5e 	bl	800bb64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ac:	e293      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b2:	e290      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b4:	4b76      	ldr	r3, [pc, #472]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0c0:	d107      	bne.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0c2:	f107 0318 	add.w	r3, r7, #24
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 faa4 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d0:	e281      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d6:	e27e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0d8:	4b6d      	ldr	r3, [pc, #436]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e4:	d107      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e6:	f107 030c 	add.w	r3, r7, #12
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fbe6 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f4:	e26f      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fa:	e26c      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0fc:	4b64      	ldr	r3, [pc, #400]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b104:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b106:	4b62      	ldr	r3, [pc, #392]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 0304 	and.w	r3, r3, #4
 800b10e:	2b04      	cmp	r3, #4
 800b110:	d10c      	bne.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b114:	2b00      	cmp	r3, #0
 800b116:	d109      	bne.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b118:	4b5d      	ldr	r3, [pc, #372]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	08db      	lsrs	r3, r3, #3
 800b11e:	f003 0303 	and.w	r3, r3, #3
 800b122:	4a5c      	ldr	r2, [pc, #368]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b124:	fa22 f303 	lsr.w	r3, r2, r3
 800b128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b12a:	e01e      	b.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b12c:	4b58      	ldr	r3, [pc, #352]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b138:	d106      	bne.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b140:	d102      	bne.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b142:	4b55      	ldr	r3, [pc, #340]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b146:	e010      	b.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b148:	4b51      	ldr	r3, [pc, #324]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b154:	d106      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b15c:	d102      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b15e:	4b4f      	ldr	r3, [pc, #316]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b162:	e002      	b.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b168:	e235      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b16a:	e234      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b16c:	4b4c      	ldr	r3, [pc, #304]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b170:	e231      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b176:	e22e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b17c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b180:	430b      	orrs	r3, r1
 800b182:	f040 808f 	bne.w	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b186:	4b42      	ldr	r3, [pc, #264]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b18a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b18e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b196:	d06b      	beq.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b19e:	d874      	bhi.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1a6:	d056      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1ae:	d86c      	bhi.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1b6:	d03b      	beq.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1be:	d864      	bhi.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1c6:	d021      	beq.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ce:	d85c      	bhi.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d004      	beq.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1dc:	d004      	beq.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b1de:	e054      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b1e0:	f7fe fa0a 	bl	80095f8 <HAL_RCC_GetPCLK1Freq>
 800b1e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1e6:	e1f6      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1e8:	4b29      	ldr	r3, [pc, #164]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1f4:	d107      	bne.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1f6:	f107 0318 	add.w	r3, r7, #24
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 fa0a 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b204:	e1e7      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20a:	e1e4      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b20c:	4b20      	ldr	r3, [pc, #128]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b218:	d107      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b21a:	f107 030c 	add.w	r3, r7, #12
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fb4c 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b228:	e1d5      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b22e:	e1d2      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b230:	4b17      	ldr	r3, [pc, #92]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d109      	bne.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b23c:	4b14      	ldr	r3, [pc, #80]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	08db      	lsrs	r3, r3, #3
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	4a13      	ldr	r2, [pc, #76]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b248:	fa22 f303 	lsr.w	r3, r2, r3
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b24e:	e1c2      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b254:	e1bf      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b256:	4b0e      	ldr	r3, [pc, #56]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b262:	d102      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b264:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b268:	e1b5      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b26e:	e1b2      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b27c:	d102      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b27e:	4b07      	ldr	r3, [pc, #28]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b282:	e1a8      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b288:	e1a5      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b28e:	e1a2      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b290:	58024400 	.word	0x58024400
 800b294:	03d09000 	.word	0x03d09000
 800b298:	003d0900 	.word	0x003d0900
 800b29c:	017d7840 	.word	0x017d7840
 800b2a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b2a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2a8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	d173      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b2b0:	4b9c      	ldr	r3, [pc, #624]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b2b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2c0:	d02f      	beq.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2c8:	d863      	bhi.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d004      	beq.n	800b2da <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d6:	d012      	beq.n	800b2fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b2d8:	e05b      	b.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2da:	4b92      	ldr	r3, [pc, #584]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2e6:	d107      	bne.n	800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2e8:	f107 0318 	add.w	r3, r7, #24
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f000 f991 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f6:	e16e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2fc:	e16b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2fe:	4b89      	ldr	r3, [pc, #548]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b30a:	d107      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b30c:	f107 030c 	add.w	r3, r7, #12
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fad3 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b31a:	e15c      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b320:	e159      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b322:	4b80      	ldr	r3, [pc, #512]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b326:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b32c:	4b7d      	ldr	r3, [pc, #500]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b04      	cmp	r3, #4
 800b336:	d10c      	bne.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d109      	bne.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b33e:	4b79      	ldr	r3, [pc, #484]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	08db      	lsrs	r3, r3, #3
 800b344:	f003 0303 	and.w	r3, r3, #3
 800b348:	4a77      	ldr	r2, [pc, #476]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b34a:	fa22 f303 	lsr.w	r3, r2, r3
 800b34e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b350:	e01e      	b.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b352:	4b74      	ldr	r3, [pc, #464]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b35e:	d106      	bne.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b366:	d102      	bne.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b368:	4b70      	ldr	r3, [pc, #448]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b36a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b36c:	e010      	b.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b36e:	4b6d      	ldr	r3, [pc, #436]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b37a:	d106      	bne.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b382:	d102      	bne.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b384:	4b6a      	ldr	r3, [pc, #424]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b388:	e002      	b.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b38e:	e122      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b390:	e121      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b396:	e11e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b39c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b3a0:	430b      	orrs	r3, r1
 800b3a2:	d133      	bne.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b3a4:	4b5f      	ldr	r3, [pc, #380]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d004      	beq.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3ba:	d012      	beq.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b3bc:	e023      	b.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3be:	4b59      	ldr	r3, [pc, #356]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ca:	d107      	bne.n	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 fbc7 	bl	800bb64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3da:	e0fc      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e0:	e0f9      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3e2:	4b50      	ldr	r3, [pc, #320]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3ee:	d107      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f0:	f107 0318 	add.w	r3, r7, #24
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 f90d 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3fe:	e0ea      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b404:	e0e7      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b40a:	e0e4      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b40c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b410:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b414:	430b      	orrs	r3, r1
 800b416:	f040 808d 	bne.w	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b41a:	4b42      	ldr	r3, [pc, #264]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b41e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b422:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b42a:	d06b      	beq.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b432:	d874      	bhi.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b43a:	d056      	beq.n	800b4ea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b442:	d86c      	bhi.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b44a:	d03b      	beq.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b452:	d864      	bhi.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b45a:	d021      	beq.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b462:	d85c      	bhi.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b470:	d004      	beq.n	800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b472:	e054      	b.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b474:	f000 f8b8 	bl	800b5e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b478:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b47a:	e0ac      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b47c:	4b29      	ldr	r3, [pc, #164]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b488:	d107      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b48a:	f107 0318 	add.w	r3, r7, #24
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 f8c0 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b498:	e09d      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b49e:	e09a      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4a0:	4b20      	ldr	r3, [pc, #128]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ac:	d107      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ae:	f107 030c 	add.w	r3, r7, #12
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 fa02 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4bc:	e08b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4c2:	e088      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4c4:	4b17      	ldr	r3, [pc, #92]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	2b04      	cmp	r3, #4
 800b4ce:	d109      	bne.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4d0:	4b14      	ldr	r3, [pc, #80]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	08db      	lsrs	r3, r3, #3
 800b4d6:	f003 0303 	and.w	r3, r3, #3
 800b4da:	4a13      	ldr	r2, [pc, #76]	; (800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4e2:	e078      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e8:	e075      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b4ea:	4b0e      	ldr	r3, [pc, #56]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f6:	d102      	bne.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b4f8:	4b0c      	ldr	r3, [pc, #48]	; (800b52c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4fc:	e06b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b502:	e068      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b504:	4b07      	ldr	r3, [pc, #28]	; (800b524 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b50c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b510:	d102      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b512:	4b07      	ldr	r3, [pc, #28]	; (800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b514:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b516:	e05e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b51c:	e05b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b522:	e058      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b524:	58024400 	.word	0x58024400
 800b528:	03d09000 	.word	0x03d09000
 800b52c:	003d0900 	.word	0x003d0900
 800b530:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b534:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b538:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b53c:	430b      	orrs	r3, r1
 800b53e:	d148      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b540:	4b27      	ldr	r3, [pc, #156]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b548:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b550:	d02a      	beq.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b558:	d838      	bhi.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d004      	beq.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b566:	d00d      	beq.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b568:	e030      	b.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b56a:	4b1d      	ldr	r3, [pc, #116]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b576:	d102      	bne.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b578:	4b1a      	ldr	r3, [pc, #104]	; (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b57c:	e02b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b582:	e028      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b584:	4b16      	ldr	r3, [pc, #88]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b58c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b590:	d107      	bne.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b596:	4618      	mov	r0, r3
 800b598:	f000 fae4 	bl	800bb64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5a0:	e019      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a6:	e016      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5a8:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5b4:	d107      	bne.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5b6:	f107 0318 	add.w	r3, r7, #24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 f82a 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5c4:	e007      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ca:	e004      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5d0:	e001      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3740      	adds	r7, #64	; 0x40
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	58024400 	.word	0x58024400
 800b5e4:	017d7840 	.word	0x017d7840

0800b5e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b5ec:	f7fd ffd4 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	4b06      	ldr	r3, [pc, #24]	; (800b60c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b5f4:	6a1b      	ldr	r3, [r3, #32]
 800b5f6:	091b      	lsrs	r3, r3, #4
 800b5f8:	f003 0307 	and.w	r3, r3, #7
 800b5fc:	4904      	ldr	r1, [pc, #16]	; (800b610 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b5fe:	5ccb      	ldrb	r3, [r1, r3]
 800b600:	f003 031f 	and.w	r3, r3, #31
 800b604:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b608:	4618      	mov	r0, r3
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	58024400 	.word	0x58024400
 800b610:	08015674 	.word	0x08015674

0800b614 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b614:	b480      	push	{r7}
 800b616:	b089      	sub	sp, #36	; 0x24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b61c:	4ba1      	ldr	r3, [pc, #644]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b620:	f003 0303 	and.w	r3, r3, #3
 800b624:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b626:	4b9f      	ldr	r3, [pc, #636]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62a:	0b1b      	lsrs	r3, r3, #12
 800b62c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b630:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b632:	4b9c      	ldr	r3, [pc, #624]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b636:	091b      	lsrs	r3, r3, #4
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b63e:	4b99      	ldr	r3, [pc, #612]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b642:	08db      	lsrs	r3, r3, #3
 800b644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	fb02 f303 	mul.w	r3, r2, r3
 800b64e:	ee07 3a90 	vmov	s15, r3
 800b652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 8111 	beq.w	800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	2b02      	cmp	r3, #2
 800b666:	f000 8083 	beq.w	800b770 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	f200 80a1 	bhi.w	800b7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d003      	beq.n	800b680 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d056      	beq.n	800b72c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b67e:	e099      	b.n	800b7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b680:	4b88      	ldr	r3, [pc, #544]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 0320 	and.w	r3, r3, #32
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d02d      	beq.n	800b6e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b68c:	4b85      	ldr	r3, [pc, #532]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	08db      	lsrs	r3, r3, #3
 800b692:	f003 0303 	and.w	r3, r3, #3
 800b696:	4a84      	ldr	r2, [pc, #528]	; (800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b698:	fa22 f303 	lsr.w	r3, r2, r3
 800b69c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	ee07 3a90 	vmov	s15, r3
 800b6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	ee07 3a90 	vmov	s15, r3
 800b6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b6:	4b7b      	ldr	r3, [pc, #492]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6e6:	e087      	b.n	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	ee07 3a90 	vmov	s15, r3
 800b6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6fa:	4b6a      	ldr	r3, [pc, #424]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b70a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b70e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b71a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b72a:	e065      	b.n	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	ee07 3a90 	vmov	s15, r3
 800b732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b736:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b73e:	4b59      	ldr	r3, [pc, #356]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b746:	ee07 3a90 	vmov	s15, r3
 800b74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b74e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b752:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b75e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b76a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b76e:	e043      	b.n	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	ee07 3a90 	vmov	s15, r3
 800b776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b782:	4b48      	ldr	r3, [pc, #288]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78a:	ee07 3a90 	vmov	s15, r3
 800b78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b792:	ed97 6a03 	vldr	s12, [r7, #12]
 800b796:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7b2:	e021      	b.n	800b7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	ee07 3a90 	vmov	s15, r3
 800b7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c6:	4b37      	ldr	r3, [pc, #220]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ce:	ee07 3a90 	vmov	s15, r3
 800b7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b7f8:	4b2a      	ldr	r3, [pc, #168]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fc:	0a5b      	lsrs	r3, r3, #9
 800b7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b802:	ee07 3a90 	vmov	s15, r3
 800b806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b80e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b812:	edd7 6a07 	vldr	s13, [r7, #28]
 800b816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b81a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b81e:	ee17 2a90 	vmov	r2, s15
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b826:	4b1f      	ldr	r3, [pc, #124]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	0c1b      	lsrs	r3, r3, #16
 800b82c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b830:	ee07 3a90 	vmov	s15, r3
 800b834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b838:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b83c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b840:	edd7 6a07 	vldr	s13, [r7, #28]
 800b844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b84c:	ee17 2a90 	vmov	r2, s15
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b854:	4b13      	ldr	r3, [pc, #76]	; (800b8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b858:	0e1b      	lsrs	r3, r3, #24
 800b85a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b85e:	ee07 3a90 	vmov	s15, r3
 800b862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b86a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b86e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b87a:	ee17 2a90 	vmov	r2, s15
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b882:	e008      	b.n	800b896 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	609a      	str	r2, [r3, #8]
}
 800b896:	bf00      	nop
 800b898:	3724      	adds	r7, #36	; 0x24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	58024400 	.word	0x58024400
 800b8a8:	03d09000 	.word	0x03d09000
 800b8ac:	46000000 	.word	0x46000000
 800b8b0:	4c742400 	.word	0x4c742400
 800b8b4:	4a742400 	.word	0x4a742400
 800b8b8:	4bbebc20 	.word	0x4bbebc20

0800b8bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b089      	sub	sp, #36	; 0x24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8c4:	4ba1      	ldr	r3, [pc, #644]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c8:	f003 0303 	and.w	r3, r3, #3
 800b8cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b8ce:	4b9f      	ldr	r3, [pc, #636]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d2:	0d1b      	lsrs	r3, r3, #20
 800b8d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8da:	4b9c      	ldr	r3, [pc, #624]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8de:	0a1b      	lsrs	r3, r3, #8
 800b8e0:	f003 0301 	and.w	r3, r3, #1
 800b8e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b8e6:	4b99      	ldr	r3, [pc, #612]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ea:	08db      	lsrs	r3, r3, #3
 800b8ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	fb02 f303 	mul.w	r3, r2, r3
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 8111 	beq.w	800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	f000 8083 	beq.w	800ba18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	2b02      	cmp	r3, #2
 800b916:	f200 80a1 	bhi.w	800ba5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d003      	beq.n	800b928 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b920:	69bb      	ldr	r3, [r7, #24]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d056      	beq.n	800b9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b926:	e099      	b.n	800ba5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b928:	4b88      	ldr	r3, [pc, #544]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0320 	and.w	r3, r3, #32
 800b930:	2b00      	cmp	r3, #0
 800b932:	d02d      	beq.n	800b990 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b934:	4b85      	ldr	r3, [pc, #532]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	08db      	lsrs	r3, r3, #3
 800b93a:	f003 0303 	and.w	r3, r3, #3
 800b93e:	4a84      	ldr	r2, [pc, #528]	; (800bb50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b940:	fa22 f303 	lsr.w	r3, r2, r3
 800b944:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	ee07 3a90 	vmov	s15, r3
 800b94c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b95e:	4b7b      	ldr	r3, [pc, #492]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b96e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b972:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b98a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b98e:	e087      	b.n	800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	ee07 3a90 	vmov	s15, r3
 800b996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9a2:	4b6a      	ldr	r3, [pc, #424]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9aa:	ee07 3a90 	vmov	s15, r3
 800b9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9d2:	e065      	b.n	800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	ee07 3a90 	vmov	s15, r3
 800b9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9e6:	4b59      	ldr	r3, [pc, #356]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ee:	ee07 3a90 	vmov	s15, r3
 800b9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba16:	e043      	b.n	800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	ee07 3a90 	vmov	s15, r3
 800ba1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba2a:	4b48      	ldr	r3, [pc, #288]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba32:	ee07 3a90 	vmov	s15, r3
 800ba36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba5a:	e021      	b.n	800baa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	ee07 3a90 	vmov	s15, r3
 800ba62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba6e:	4b37      	ldr	r3, [pc, #220]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba76:	ee07 3a90 	vmov	s15, r3
 800ba7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800baa0:	4b2a      	ldr	r3, [pc, #168]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa4:	0a5b      	lsrs	r3, r3, #9
 800baa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baaa:	ee07 3a90 	vmov	s15, r3
 800baae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baba:	edd7 6a07 	vldr	s13, [r7, #28]
 800babe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bac6:	ee17 2a90 	vmov	r2, s15
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bace:	4b1f      	ldr	r3, [pc, #124]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad2:	0c1b      	lsrs	r3, r3, #16
 800bad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bae4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bae8:	edd7 6a07 	vldr	s13, [r7, #28]
 800baec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baf4:	ee17 2a90 	vmov	r2, s15
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bafc:	4b13      	ldr	r3, [pc, #76]	; (800bb4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb00:	0e1b      	lsrs	r3, r3, #24
 800bb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb16:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb22:	ee17 2a90 	vmov	r2, s15
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb2a:	e008      	b.n	800bb3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	609a      	str	r2, [r3, #8]
}
 800bb3e:	bf00      	nop
 800bb40:	3724      	adds	r7, #36	; 0x24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	58024400 	.word	0x58024400
 800bb50:	03d09000 	.word	0x03d09000
 800bb54:	46000000 	.word	0x46000000
 800bb58:	4c742400 	.word	0x4c742400
 800bb5c:	4a742400 	.word	0x4a742400
 800bb60:	4bbebc20 	.word	0x4bbebc20

0800bb64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b089      	sub	sp, #36	; 0x24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb6c:	4ba0      	ldr	r3, [pc, #640]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb70:	f003 0303 	and.w	r3, r3, #3
 800bb74:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bb76:	4b9e      	ldr	r3, [pc, #632]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7a:	091b      	lsrs	r3, r3, #4
 800bb7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb80:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb82:	4b9b      	ldr	r3, [pc, #620]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb86:	f003 0301 	and.w	r3, r3, #1
 800bb8a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb8c:	4b98      	ldr	r3, [pc, #608]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb90:	08db      	lsrs	r3, r3, #3
 800bb92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	fb02 f303 	mul.w	r3, r2, r3
 800bb9c:	ee07 3a90 	vmov	s15, r3
 800bba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 8111 	beq.w	800bdd2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	f000 8083 	beq.w	800bcbe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	f200 80a1 	bhi.w	800bd02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d003      	beq.n	800bbce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d056      	beq.n	800bc7a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bbcc:	e099      	b.n	800bd02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbce:	4b88      	ldr	r3, [pc, #544]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 0320 	and.w	r3, r3, #32
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d02d      	beq.n	800bc36 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbda:	4b85      	ldr	r3, [pc, #532]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	08db      	lsrs	r3, r3, #3
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	4a83      	ldr	r2, [pc, #524]	; (800bdf4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bbe6:	fa22 f303 	lsr.w	r3, r2, r3
 800bbea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	ee07 3a90 	vmov	s15, r3
 800bbfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc04:	4b7a      	ldr	r3, [pc, #488]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc0c:	ee07 3a90 	vmov	s15, r3
 800bc10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc14:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc18:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc30:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc34:	e087      	b.n	800bd46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	ee07 3a90 	vmov	s15, r3
 800bc3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc40:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc48:	4b69      	ldr	r3, [pc, #420]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc50:	ee07 3a90 	vmov	s15, r3
 800bc54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc58:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc5c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc78:	e065      	b.n	800bd46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	ee07 3a90 	vmov	s15, r3
 800bc80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc84:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc8c:	4b58      	ldr	r3, [pc, #352]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc94:	ee07 3a90 	vmov	s15, r3
 800bc98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcbc:	e043      	b.n	800bd46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	ee07 3a90 	vmov	s15, r3
 800bcc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bccc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd0:	4b47      	ldr	r3, [pc, #284]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd8:	ee07 3a90 	vmov	s15, r3
 800bcdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bce4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd00:	e021      	b.n	800bd46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	ee07 3a90 	vmov	s15, r3
 800bd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd14:	4b36      	ldr	r3, [pc, #216]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd1c:	ee07 3a90 	vmov	s15, r3
 800bd20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd24:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd28:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd44:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bd46:	4b2a      	ldr	r3, [pc, #168]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4a:	0a5b      	lsrs	r3, r3, #9
 800bd4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd50:	ee07 3a90 	vmov	s15, r3
 800bd54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd60:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd6c:	ee17 2a90 	vmov	r2, s15
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bd74:	4b1e      	ldr	r3, [pc, #120]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd78:	0c1b      	lsrs	r3, r3, #16
 800bd7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7e:	ee07 3a90 	vmov	s15, r3
 800bd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd9a:	ee17 2a90 	vmov	r2, s15
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bda2:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda6:	0e1b      	lsrs	r3, r3, #24
 800bda8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdac:	ee07 3a90 	vmov	s15, r3
 800bdb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc8:	ee17 2a90 	vmov	r2, s15
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bdd0:	e008      	b.n	800bde4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	609a      	str	r2, [r3, #8]
}
 800bde4:	bf00      	nop
 800bde6:	3724      	adds	r7, #36	; 0x24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	58024400 	.word	0x58024400
 800bdf4:	03d09000 	.word	0x03d09000
 800bdf8:	46000000 	.word	0x46000000
 800bdfc:	4c742400 	.word	0x4c742400
 800be00:	4a742400 	.word	0x4a742400
 800be04:	4bbebc20 	.word	0x4bbebc20

0800be08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be16:	4b53      	ldr	r3, [pc, #332]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800be18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1a:	f003 0303 	and.w	r3, r3, #3
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d101      	bne.n	800be26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e099      	b.n	800bf5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be26:	4b4f      	ldr	r3, [pc, #316]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a4e      	ldr	r2, [pc, #312]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800be2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be32:	f7f7 f94f 	bl	80030d4 <HAL_GetTick>
 800be36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be38:	e008      	b.n	800be4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be3a:	f7f7 f94b 	bl	80030d4 <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	2b02      	cmp	r3, #2
 800be46:	d901      	bls.n	800be4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e086      	b.n	800bf5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be4c:	4b45      	ldr	r3, [pc, #276]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1f0      	bne.n	800be3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be58:	4b42      	ldr	r3, [pc, #264]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800be5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	031b      	lsls	r3, r3, #12
 800be66:	493f      	ldr	r1, [pc, #252]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	628b      	str	r3, [r1, #40]	; 0x28
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	3b01      	subs	r3, #1
 800be72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	025b      	lsls	r3, r3, #9
 800be7e:	b29b      	uxth	r3, r3
 800be80:	431a      	orrs	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	3b01      	subs	r3, #1
 800be88:	041b      	lsls	r3, r3, #16
 800be8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be8e:	431a      	orrs	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	3b01      	subs	r3, #1
 800be96:	061b      	lsls	r3, r3, #24
 800be98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be9c:	4931      	ldr	r1, [pc, #196]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bea2:	4b30      	ldr	r3, [pc, #192]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	492d      	ldr	r1, [pc, #180]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800beb0:	4313      	orrs	r3, r2
 800beb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800beb4:	4b2b      	ldr	r3, [pc, #172]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800beb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb8:	f023 0220 	bic.w	r2, r3, #32
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	699b      	ldr	r3, [r3, #24]
 800bec0:	4928      	ldr	r1, [pc, #160]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bec2:	4313      	orrs	r3, r2
 800bec4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bec6:	4b27      	ldr	r3, [pc, #156]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beca:	4a26      	ldr	r2, [pc, #152]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800becc:	f023 0310 	bic.w	r3, r3, #16
 800bed0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bed2:	4b24      	ldr	r3, [pc, #144]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bed6:	4b24      	ldr	r3, [pc, #144]	; (800bf68 <RCCEx_PLL2_Config+0x160>)
 800bed8:	4013      	ands	r3, r2
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	69d2      	ldr	r2, [r2, #28]
 800bede:	00d2      	lsls	r2, r2, #3
 800bee0:	4920      	ldr	r1, [pc, #128]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bee2:	4313      	orrs	r3, r2
 800bee4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bee6:	4b1f      	ldr	r3, [pc, #124]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	4a1e      	ldr	r2, [pc, #120]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800beec:	f043 0310 	orr.w	r3, r3, #16
 800bef0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d106      	bne.n	800bf06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bef8:	4b1a      	ldr	r3, [pc, #104]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	4a19      	ldr	r2, [pc, #100]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800befe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf02:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf04:	e00f      	b.n	800bf26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d106      	bne.n	800bf1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf0c:	4b15      	ldr	r3, [pc, #84]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	4a14      	ldr	r2, [pc, #80]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bf12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf18:	e005      	b.n	800bf26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf1a:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1e:	4a11      	ldr	r2, [pc, #68]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bf20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf26:	4b0f      	ldr	r3, [pc, #60]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a0e      	ldr	r2, [pc, #56]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bf2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf32:	f7f7 f8cf 	bl	80030d4 <HAL_GetTick>
 800bf36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf38:	e008      	b.n	800bf4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf3a:	f7f7 f8cb 	bl	80030d4 <HAL_GetTick>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d901      	bls.n	800bf4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	e006      	b.n	800bf5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <RCCEx_PLL2_Config+0x15c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d0f0      	beq.n	800bf3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	58024400 	.word	0x58024400
 800bf68:	ffff0007 	.word	0xffff0007

0800bf6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf7a:	4b53      	ldr	r3, [pc, #332]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800bf7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf7e:	f003 0303 	and.w	r3, r3, #3
 800bf82:	2b03      	cmp	r3, #3
 800bf84:	d101      	bne.n	800bf8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e099      	b.n	800c0be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf8a:	4b4f      	ldr	r3, [pc, #316]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a4e      	ldr	r2, [pc, #312]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800bf90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf96:	f7f7 f89d 	bl	80030d4 <HAL_GetTick>
 800bf9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf9c:	e008      	b.n	800bfb0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf9e:	f7f7 f899 	bl	80030d4 <HAL_GetTick>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	d901      	bls.n	800bfb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e086      	b.n	800c0be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfb0:	4b45      	ldr	r3, [pc, #276]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1f0      	bne.n	800bf9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bfbc:	4b42      	ldr	r3, [pc, #264]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	051b      	lsls	r3, r3, #20
 800bfca:	493f      	ldr	r1, [pc, #252]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	628b      	str	r3, [r1, #40]	; 0x28
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	025b      	lsls	r3, r3, #9
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	041b      	lsls	r3, r3, #16
 800bfee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bff2:	431a      	orrs	r2, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	061b      	lsls	r3, r3, #24
 800bffc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c000:	4931      	ldr	r1, [pc, #196]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c002:	4313      	orrs	r3, r2
 800c004:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c006:	4b30      	ldr	r3, [pc, #192]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	492d      	ldr	r1, [pc, #180]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c014:	4313      	orrs	r3, r2
 800c016:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c018:	4b2b      	ldr	r3, [pc, #172]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	4928      	ldr	r1, [pc, #160]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c026:	4313      	orrs	r3, r2
 800c028:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c02a:	4b27      	ldr	r3, [pc, #156]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	4a26      	ldr	r2, [pc, #152]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c034:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c036:	4b24      	ldr	r3, [pc, #144]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c03a:	4b24      	ldr	r3, [pc, #144]	; (800c0cc <RCCEx_PLL3_Config+0x160>)
 800c03c:	4013      	ands	r3, r2
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	69d2      	ldr	r2, [r2, #28]
 800c042:	00d2      	lsls	r2, r2, #3
 800c044:	4920      	ldr	r1, [pc, #128]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c046:	4313      	orrs	r3, r2
 800c048:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c04a:	4b1f      	ldr	r3, [pc, #124]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04e:	4a1e      	ldr	r2, [pc, #120]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d106      	bne.n	800c06a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c05c:	4b1a      	ldr	r3, [pc, #104]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c060:	4a19      	ldr	r2, [pc, #100]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c066:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c068:	e00f      	b.n	800c08a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d106      	bne.n	800c07e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c070:	4b15      	ldr	r3, [pc, #84]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	4a14      	ldr	r2, [pc, #80]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c076:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c07a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c07c:	e005      	b.n	800c08a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c07e:	4b12      	ldr	r3, [pc, #72]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c082:	4a11      	ldr	r2, [pc, #68]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c088:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c08a:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a0e      	ldr	r2, [pc, #56]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c096:	f7f7 f81d 	bl	80030d4 <HAL_GetTick>
 800c09a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c09c:	e008      	b.n	800c0b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c09e:	f7f7 f819 	bl	80030d4 <HAL_GetTick>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d901      	bls.n	800c0b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	e006      	b.n	800c0be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0b0:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <RCCEx_PLL3_Config+0x15c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d0f0      	beq.n	800c09e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	58024400 	.word	0x58024400
 800c0cc:	ffff0007 	.word	0xffff0007

0800c0d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d071      	beq.n	800c1c6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d106      	bne.n	800c0fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7f6 faea 	bl	80026d0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2202      	movs	r2, #2
 800c100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	f003 0310 	and.w	r3, r3, #16
 800c10e:	2b10      	cmp	r3, #16
 800c110:	d050      	beq.n	800c1b4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	22ca      	movs	r2, #202	; 0xca
 800c118:	625a      	str	r2, [r3, #36]	; 0x24
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2253      	movs	r2, #83	; 0x53
 800c120:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fa4a 	bl	800c5bc <RTC_EnterInitMode>
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d124      	bne.n	800c17c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6899      	ldr	r1, [r3, #8]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	4b24      	ldr	r3, [pc, #144]	; (800c1d0 <HAL_RTC_Init+0x100>)
 800c13e:	400b      	ands	r3, r1
 800c140:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6899      	ldr	r1, [r3, #8]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	431a      	orrs	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	431a      	orrs	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	430a      	orrs	r2, r1
 800c15e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	0419      	lsls	r1, r3, #16
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68da      	ldr	r2, [r3, #12]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	430a      	orrs	r2, r1
 800c170:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa56 	bl	800c624 <RTC_ExitInitMode>
 800c178:	4603      	mov	r3, r0
 800c17a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d113      	bne.n	800c1aa <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f022 0203 	bic.w	r2, r2, #3
 800c190:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	69da      	ldr	r2, [r3, #28]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	430a      	orrs	r2, r1
 800c1a8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	22ff      	movs	r2, #255	; 0xff
 800c1b0:	625a      	str	r2, [r3, #36]	; 0x24
 800c1b2:	e001      	b.n	800c1b8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d103      	bne.n	800c1c6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	ff8fffbf 	.word	0xff8fffbf

0800c1d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1d4:	b590      	push	{r4, r7, lr}
 800c1d6:	b087      	sub	sp, #28
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d101      	bne.n	800c1ee <HAL_RTC_SetTime+0x1a>
 800c1ea:	2302      	movs	r3, #2
 800c1ec:	e089      	b.n	800c302 <HAL_RTC_SetTime+0x12e>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2202      	movs	r2, #2
 800c1fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	22ca      	movs	r2, #202	; 0xca
 800c204:	625a      	str	r2, [r3, #36]	; 0x24
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2253      	movs	r2, #83	; 0x53
 800c20c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f000 f9d4 	bl	800c5bc <RTC_EnterInitMode>
 800c214:	4603      	mov	r3, r0
 800c216:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c218:	7cfb      	ldrb	r3, [r7, #19]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d161      	bne.n	800c2e2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d126      	bne.n	800c272 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d102      	bne.n	800c238 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2200      	movs	r2, #0
 800c236:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 fa2f 	bl	800c6a0 <RTC_ByteToBcd2>
 800c242:	4603      	mov	r3, r0
 800c244:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	785b      	ldrb	r3, [r3, #1]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f000 fa28 	bl	800c6a0 <RTC_ByteToBcd2>
 800c250:	4603      	mov	r3, r0
 800c252:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c254:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	789b      	ldrb	r3, [r3, #2]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 fa20 	bl	800c6a0 <RTC_ByteToBcd2>
 800c260:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c262:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	78db      	ldrb	r3, [r3, #3]
 800c26a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c26c:	4313      	orrs	r3, r2
 800c26e:	617b      	str	r3, [r7, #20]
 800c270:	e018      	b.n	800c2a4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2200      	movs	r2, #0
 800c284:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	785b      	ldrb	r3, [r3, #1]
 800c290:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c292:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c298:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	78db      	ldrb	r3, [r3, #3]
 800c29e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	6979      	ldr	r1, [r7, #20]
 800c2aa:	4b18      	ldr	r3, [pc, #96]	; (800c30c <HAL_RTC_SetTime+0x138>)
 800c2ac:	400b      	ands	r3, r1
 800c2ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	689a      	ldr	r2, [r3, #8]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c2be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	6899      	ldr	r1, [r3, #8]
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	68da      	ldr	r2, [r3, #12]
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 f9a3 	bl	800c624 <RTC_ExitInitMode>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	22ff      	movs	r2, #255	; 0xff
 800c2e8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c2ea:	7cfb      	ldrb	r3, [r7, #19]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d103      	bne.n	800c2f8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c300:	7cfb      	ldrb	r3, [r7, #19]
}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}
 800c30a:	bf00      	nop
 800c30c:	007f7f7f 	.word	0x007f7f7f

0800c310 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	4b22      	ldr	r3, [pc, #136]	; (800c3c4 <HAL_RTC_GetTime+0xb4>)
 800c33c:	4013      	ands	r3, r2
 800c33e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	0c1b      	lsrs	r3, r3, #16
 800c344:	b2db      	uxtb	r3, r3
 800c346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	0a1b      	lsrs	r3, r3, #8
 800c354:	b2db      	uxtb	r3, r3
 800c356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	0d9b      	lsrs	r3, r3, #22
 800c372:	b2db      	uxtb	r3, r3
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	b2da      	uxtb	r2, r3
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d11a      	bne.n	800c3ba <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f000 f9a9 	bl	800c6e0 <RTC_Bcd2ToByte>
 800c38e:	4603      	mov	r3, r0
 800c390:	461a      	mov	r2, r3
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	785b      	ldrb	r3, [r3, #1]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f9a0 	bl	800c6e0 <RTC_Bcd2ToByte>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	789b      	ldrb	r3, [r3, #2]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 f997 	bl	800c6e0 <RTC_Bcd2ToByte>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	007f7f7f 	.word	0x007f7f7f

0800c3c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c3c8:	b590      	push	{r4, r7, lr}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d101      	bne.n	800c3e2 <HAL_RTC_SetDate+0x1a>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e073      	b.n	800c4ca <HAL_RTC_SetDate+0x102>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10e      	bne.n	800c416 <HAL_RTC_SetDate+0x4e>
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	785b      	ldrb	r3, [r3, #1]
 800c3fc:	f003 0310 	and.w	r3, r3, #16
 800c400:	2b00      	cmp	r3, #0
 800c402:	d008      	beq.n	800c416 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	785b      	ldrb	r3, [r3, #1]
 800c408:	f023 0310 	bic.w	r3, r3, #16
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	330a      	adds	r3, #10
 800c410:	b2da      	uxtb	r2, r3
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d11c      	bne.n	800c456 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	78db      	ldrb	r3, [r3, #3]
 800c420:	4618      	mov	r0, r3
 800c422:	f000 f93d 	bl	800c6a0 <RTC_ByteToBcd2>
 800c426:	4603      	mov	r3, r0
 800c428:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	785b      	ldrb	r3, [r3, #1]
 800c42e:	4618      	mov	r0, r3
 800c430:	f000 f936 	bl	800c6a0 <RTC_ByteToBcd2>
 800c434:	4603      	mov	r3, r0
 800c436:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c438:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	789b      	ldrb	r3, [r3, #2]
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 f92e 	bl	800c6a0 <RTC_ByteToBcd2>
 800c444:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c446:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c450:	4313      	orrs	r3, r2
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	e00e      	b.n	800c474 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	78db      	ldrb	r3, [r3, #3]
 800c45a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	785b      	ldrb	r3, [r3, #1]
 800c460:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c462:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c468:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c470:	4313      	orrs	r3, r2
 800c472:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	22ca      	movs	r2, #202	; 0xca
 800c47a:	625a      	str	r2, [r3, #36]	; 0x24
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2253      	movs	r2, #83	; 0x53
 800c482:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 f899 	bl	800c5bc <RTC_EnterInitMode>
 800c48a:	4603      	mov	r3, r0
 800c48c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c48e:	7cfb      	ldrb	r3, [r7, #19]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	6979      	ldr	r1, [r7, #20]
 800c49a:	4b0e      	ldr	r3, [pc, #56]	; (800c4d4 <HAL_RTC_SetDate+0x10c>)
 800c49c:	400b      	ands	r3, r1
 800c49e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 f8bf 	bl	800c624 <RTC_ExitInitMode>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	22ff      	movs	r2, #255	; 0xff
 800c4b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c4b2:	7cfb      	ldrb	r3, [r7, #19]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d103      	bne.n	800c4c0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c4c8:	7cfb      	ldrb	r3, [r7, #19]


}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	371c      	adds	r7, #28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd90      	pop	{r4, r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	00ffff3f 	.word	0x00ffff3f

0800c4d8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	4b21      	ldr	r3, [pc, #132]	; (800c570 <HAL_RTC_GetDate+0x98>)
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	0c1b      	lsrs	r3, r3, #16
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	0a1b      	lsrs	r3, r3, #8
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	f003 031f 	and.w	r3, r3, #31
 800c504:	b2da      	uxtb	r2, r3
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c512:	b2da      	uxtb	r2, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	0b5b      	lsrs	r3, r3, #13
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	f003 0307 	and.w	r3, r3, #7
 800c522:	b2da      	uxtb	r2, r3
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d11a      	bne.n	800c564 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	78db      	ldrb	r3, [r3, #3]
 800c532:	4618      	mov	r0, r3
 800c534:	f000 f8d4 	bl	800c6e0 <RTC_Bcd2ToByte>
 800c538:	4603      	mov	r3, r0
 800c53a:	461a      	mov	r2, r3
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	785b      	ldrb	r3, [r3, #1]
 800c544:	4618      	mov	r0, r3
 800c546:	f000 f8cb 	bl	800c6e0 <RTC_Bcd2ToByte>
 800c54a:	4603      	mov	r3, r0
 800c54c:	461a      	mov	r2, r3
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	789b      	ldrb	r3, [r3, #2]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 f8c2 	bl	800c6e0 <RTC_Bcd2ToByte>
 800c55c:	4603      	mov	r3, r0
 800c55e:	461a      	mov	r2, r3
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	00ffff3f 	.word	0x00ffff3f

0800c574 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a0d      	ldr	r2, [pc, #52]	; (800c5b8 <HAL_RTC_WaitForSynchro+0x44>)
 800c582:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c584:	f7f6 fda6 	bl	80030d4 <HAL_GetTick>
 800c588:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c58a:	e009      	b.n	800c5a0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c58c:	f7f6 fda2 	bl	80030d4 <HAL_GetTick>
 800c590:	4602      	mov	r2, r0
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c59a:	d901      	bls.n	800c5a0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c59c:	2303      	movs	r3, #3
 800c59e:	e007      	b.n	800c5b0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	f003 0320 	and.w	r3, r3, #32
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d0ee      	beq.n	800c58c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	0003ff5f 	.word	0x0003ff5f

0800c5bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d120      	bne.n	800c618 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5de:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c5e0:	f7f6 fd78 	bl	80030d4 <HAL_GetTick>
 800c5e4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c5e6:	e00d      	b.n	800c604 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c5e8:	f7f6 fd74 	bl	80030d4 <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5f6:	d905      	bls.n	800c604 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2203      	movs	r2, #3
 800c600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d102      	bne.n	800c618 <RTC_EnterInitMode+0x5c>
 800c612:	7bfb      	ldrb	r3, [r7, #15]
 800c614:	2b03      	cmp	r3, #3
 800c616:	d1e7      	bne.n	800c5e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c618:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c62c:	2300      	movs	r3, #0
 800c62e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c630:	4b1a      	ldr	r3, [pc, #104]	; (800c69c <RTC_ExitInitMode+0x78>)
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	4a19      	ldr	r2, [pc, #100]	; (800c69c <RTC_ExitInitMode+0x78>)
 800c636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c63a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c63c:	4b17      	ldr	r3, [pc, #92]	; (800c69c <RTC_ExitInitMode+0x78>)
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f003 0320 	and.w	r3, r3, #32
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10c      	bne.n	800c662 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff ff93 	bl	800c574 <HAL_RTC_WaitForSynchro>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d01e      	beq.n	800c692 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2203      	movs	r2, #3
 800c658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c65c:	2303      	movs	r3, #3
 800c65e:	73fb      	strb	r3, [r7, #15]
 800c660:	e017      	b.n	800c692 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c662:	4b0e      	ldr	r3, [pc, #56]	; (800c69c <RTC_ExitInitMode+0x78>)
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	4a0d      	ldr	r2, [pc, #52]	; (800c69c <RTC_ExitInitMode+0x78>)
 800c668:	f023 0320 	bic.w	r3, r3, #32
 800c66c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7ff ff80 	bl	800c574 <HAL_RTC_WaitForSynchro>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d005      	beq.n	800c686 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2203      	movs	r2, #3
 800c67e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c682:	2303      	movs	r3, #3
 800c684:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c686:	4b05      	ldr	r3, [pc, #20]	; (800c69c <RTC_ExitInitMode+0x78>)
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	4a04      	ldr	r2, [pc, #16]	; (800c69c <RTC_ExitInitMode+0x78>)
 800c68c:	f043 0320 	orr.w	r3, r3, #32
 800c690:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c692:	7bfb      	ldrb	r3, [r7, #15]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	58004000 	.word	0x58004000

0800c6a0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c6ae:	79fb      	ldrb	r3, [r7, #7]
 800c6b0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c6b2:	e005      	b.n	800c6c0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c6ba:	7afb      	ldrb	r3, [r7, #11]
 800c6bc:	3b0a      	subs	r3, #10
 800c6be:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c6c0:	7afb      	ldrb	r3, [r7, #11]
 800c6c2:	2b09      	cmp	r3, #9
 800c6c4:	d8f6      	bhi.n	800c6b4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	011b      	lsls	r3, r3, #4
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	7afb      	ldrb	r3, [r7, #11]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	b2db      	uxtb	r3, r3
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c6ea:	79fb      	ldrb	r3, [r7, #7]
 800c6ec:	091b      	lsrs	r3, r3, #4
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	0092      	lsls	r2, r2, #2
 800c6f4:	4413      	add	r3, r2
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c6fa:	79fb      	ldrb	r3, [r7, #7]
 800c6fc:	f003 030f 	and.w	r3, r3, #15
 800c700:	b2da      	uxtb	r2, r3
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	4413      	add	r3, r2
 800c706:	b2db      	uxtb	r3, r3
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d101      	bne.n	800c726 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	e10f      	b.n	800c946 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a87      	ldr	r2, [pc, #540]	; (800c950 <HAL_SPI_Init+0x23c>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d00f      	beq.n	800c756 <HAL_SPI_Init+0x42>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a86      	ldr	r2, [pc, #536]	; (800c954 <HAL_SPI_Init+0x240>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d00a      	beq.n	800c756 <HAL_SPI_Init+0x42>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a84      	ldr	r2, [pc, #528]	; (800c958 <HAL_SPI_Init+0x244>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d005      	beq.n	800c756 <HAL_SPI_Init+0x42>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	2b0f      	cmp	r3, #15
 800c750:	d901      	bls.n	800c756 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	e0f7      	b.n	800c946 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f900 	bl	800c95c <SPI_GetPacketSize>
 800c75c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a7b      	ldr	r2, [pc, #492]	; (800c950 <HAL_SPI_Init+0x23c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d00c      	beq.n	800c782 <HAL_SPI_Init+0x6e>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a79      	ldr	r2, [pc, #484]	; (800c954 <HAL_SPI_Init+0x240>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d007      	beq.n	800c782 <HAL_SPI_Init+0x6e>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a78      	ldr	r2, [pc, #480]	; (800c958 <HAL_SPI_Init+0x244>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d002      	beq.n	800c782 <HAL_SPI_Init+0x6e>
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b08      	cmp	r3, #8
 800c780:	d811      	bhi.n	800c7a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c786:	4a72      	ldr	r2, [pc, #456]	; (800c950 <HAL_SPI_Init+0x23c>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d009      	beq.n	800c7a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a70      	ldr	r2, [pc, #448]	; (800c954 <HAL_SPI_Init+0x240>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d004      	beq.n	800c7a0 <HAL_SPI_Init+0x8c>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a6f      	ldr	r2, [pc, #444]	; (800c958 <HAL_SPI_Init+0x244>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d104      	bne.n	800c7aa <HAL_SPI_Init+0x96>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2b10      	cmp	r3, #16
 800c7a4:	d901      	bls.n	800c7aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e0cd      	b.n	800c946 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d106      	bne.n	800c7c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7f5 ffb8 	bl	8002734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f022 0201 	bic.w	r2, r2, #1
 800c7da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c7e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7f0:	d119      	bne.n	800c826 <HAL_SPI_Init+0x112>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7fa:	d103      	bne.n	800c804 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c800:	2b00      	cmp	r3, #0
 800c802:	d008      	beq.n	800c816 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10c      	bne.n	800c826 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c814:	d107      	bne.n	800c826 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c824:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00f      	beq.n	800c852 <HAL_SPI_Init+0x13e>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	2b06      	cmp	r3, #6
 800c838:	d90b      	bls.n	800c852 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	430a      	orrs	r2, r1
 800c84e:	601a      	str	r2, [r3, #0]
 800c850:	e007      	b.n	800c862 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c860:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	69da      	ldr	r2, [r3, #28]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86a:	431a      	orrs	r2, r3
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	431a      	orrs	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c874:	ea42 0103 	orr.w	r1, r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68da      	ldr	r2, [r3, #12]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	430a      	orrs	r2, r1
 800c882:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88c:	431a      	orrs	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c892:	431a      	orrs	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	431a      	orrs	r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	431a      	orrs	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	431a      	orrs	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8b6:	431a      	orrs	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	431a      	orrs	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8c2:	ea42 0103 	orr.w	r1, r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d113      	bne.n	800c902 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c900:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f022 0201 	bic.w	r2, r2, #1
 800c910:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00a      	beq.n	800c934 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	430a      	orrs	r2, r1
 800c932:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	40013000 	.word	0x40013000
 800c954:	40003800 	.word	0x40003800
 800c958:	40003c00 	.word	0x40003c00

0800c95c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c968:	095b      	lsrs	r3, r3, #5
 800c96a:	3301      	adds	r3, #1
 800c96c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	3307      	adds	r3, #7
 800c97a:	08db      	lsrs	r3, r3, #3
 800c97c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	fb02 f303 	mul.w	r3, r2, r3
}
 800c986:	4618      	mov	r0, r3
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b082      	sub	sp, #8
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e049      	b.n	800ca38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d106      	bne.n	800c9be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7f5 ff71 	bl	80028a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f000 ff41 	bl	800d858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2201      	movs	r2, #1
 800ca02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2201      	movs	r2, #1
 800ca22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d001      	beq.n	800ca58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e04c      	b.n	800caf2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a26      	ldr	r2, [pc, #152]	; (800cb00 <HAL_TIM_Base_Start+0xc0>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d022      	beq.n	800cab0 <HAL_TIM_Base_Start+0x70>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca72:	d01d      	beq.n	800cab0 <HAL_TIM_Base_Start+0x70>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a22      	ldr	r2, [pc, #136]	; (800cb04 <HAL_TIM_Base_Start+0xc4>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d018      	beq.n	800cab0 <HAL_TIM_Base_Start+0x70>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a21      	ldr	r2, [pc, #132]	; (800cb08 <HAL_TIM_Base_Start+0xc8>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d013      	beq.n	800cab0 <HAL_TIM_Base_Start+0x70>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a1f      	ldr	r2, [pc, #124]	; (800cb0c <HAL_TIM_Base_Start+0xcc>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d00e      	beq.n	800cab0 <HAL_TIM_Base_Start+0x70>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a1e      	ldr	r2, [pc, #120]	; (800cb10 <HAL_TIM_Base_Start+0xd0>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d009      	beq.n	800cab0 <HAL_TIM_Base_Start+0x70>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a1c      	ldr	r2, [pc, #112]	; (800cb14 <HAL_TIM_Base_Start+0xd4>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d004      	beq.n	800cab0 <HAL_TIM_Base_Start+0x70>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a1b      	ldr	r2, [pc, #108]	; (800cb18 <HAL_TIM_Base_Start+0xd8>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d115      	bne.n	800cadc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	689a      	ldr	r2, [r3, #8]
 800cab6:	4b19      	ldr	r3, [pc, #100]	; (800cb1c <HAL_TIM_Base_Start+0xdc>)
 800cab8:	4013      	ands	r3, r2
 800caba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b06      	cmp	r3, #6
 800cac0:	d015      	beq.n	800caee <HAL_TIM_Base_Start+0xae>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cac8:	d011      	beq.n	800caee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f042 0201 	orr.w	r2, r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cada:	e008      	b.n	800caee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0201 	orr.w	r2, r2, #1
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	e000      	b.n	800caf0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	40010000 	.word	0x40010000
 800cb04:	40000400 	.word	0x40000400
 800cb08:	40000800 	.word	0x40000800
 800cb0c:	40000c00 	.word	0x40000c00
 800cb10:	40010400 	.word	0x40010400
 800cb14:	40001800 	.word	0x40001800
 800cb18:	40014000 	.word	0x40014000
 800cb1c:	00010007 	.word	0x00010007

0800cb20 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	6a1a      	ldr	r2, [r3, #32]
 800cb2e:	f241 1311 	movw	r3, #4369	; 0x1111
 800cb32:	4013      	ands	r3, r2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10f      	bne.n	800cb58 <HAL_TIM_Base_Stop+0x38>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6a1a      	ldr	r2, [r3, #32]
 800cb3e:	f240 4344 	movw	r3, #1092	; 0x444
 800cb42:	4013      	ands	r3, r2
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d107      	bne.n	800cb58 <HAL_TIM_Base_Stop+0x38>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f022 0201 	bic.w	r2, r2, #1
 800cb56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
	...

0800cb70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d001      	beq.n	800cb88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cb84:	2301      	movs	r3, #1
 800cb86:	e054      	b.n	800cc32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68da      	ldr	r2, [r3, #12]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f042 0201 	orr.w	r2, r2, #1
 800cb9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a26      	ldr	r2, [pc, #152]	; (800cc40 <HAL_TIM_Base_Start_IT+0xd0>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d022      	beq.n	800cbf0 <HAL_TIM_Base_Start_IT+0x80>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbb2:	d01d      	beq.n	800cbf0 <HAL_TIM_Base_Start_IT+0x80>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a22      	ldr	r2, [pc, #136]	; (800cc44 <HAL_TIM_Base_Start_IT+0xd4>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d018      	beq.n	800cbf0 <HAL_TIM_Base_Start_IT+0x80>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a21      	ldr	r2, [pc, #132]	; (800cc48 <HAL_TIM_Base_Start_IT+0xd8>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d013      	beq.n	800cbf0 <HAL_TIM_Base_Start_IT+0x80>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a1f      	ldr	r2, [pc, #124]	; (800cc4c <HAL_TIM_Base_Start_IT+0xdc>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d00e      	beq.n	800cbf0 <HAL_TIM_Base_Start_IT+0x80>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a1e      	ldr	r2, [pc, #120]	; (800cc50 <HAL_TIM_Base_Start_IT+0xe0>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d009      	beq.n	800cbf0 <HAL_TIM_Base_Start_IT+0x80>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a1c      	ldr	r2, [pc, #112]	; (800cc54 <HAL_TIM_Base_Start_IT+0xe4>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d004      	beq.n	800cbf0 <HAL_TIM_Base_Start_IT+0x80>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a1b      	ldr	r2, [pc, #108]	; (800cc58 <HAL_TIM_Base_Start_IT+0xe8>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d115      	bne.n	800cc1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	689a      	ldr	r2, [r3, #8]
 800cbf6:	4b19      	ldr	r3, [pc, #100]	; (800cc5c <HAL_TIM_Base_Start_IT+0xec>)
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b06      	cmp	r3, #6
 800cc00:	d015      	beq.n	800cc2e <HAL_TIM_Base_Start_IT+0xbe>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc08:	d011      	beq.n	800cc2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f042 0201 	orr.w	r2, r2, #1
 800cc18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc1a:	e008      	b.n	800cc2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f042 0201 	orr.w	r2, r2, #1
 800cc2a:	601a      	str	r2, [r3, #0]
 800cc2c:	e000      	b.n	800cc30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	40010000 	.word	0x40010000
 800cc44:	40000400 	.word	0x40000400
 800cc48:	40000800 	.word	0x40000800
 800cc4c:	40000c00 	.word	0x40000c00
 800cc50:	40010400 	.word	0x40010400
 800cc54:	40001800 	.word	0x40001800
 800cc58:	40014000 	.word	0x40014000
 800cc5c:	00010007 	.word	0x00010007

0800cc60 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d109      	bne.n	800cc88 <HAL_TIM_OC_Start_IT+0x28>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	bf14      	ite	ne
 800cc80:	2301      	movne	r3, #1
 800cc82:	2300      	moveq	r3, #0
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	e03c      	b.n	800cd02 <HAL_TIM_OC_Start_IT+0xa2>
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	2b04      	cmp	r3, #4
 800cc8c:	d109      	bne.n	800cca2 <HAL_TIM_OC_Start_IT+0x42>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	bf14      	ite	ne
 800cc9a:	2301      	movne	r3, #1
 800cc9c:	2300      	moveq	r3, #0
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	e02f      	b.n	800cd02 <HAL_TIM_OC_Start_IT+0xa2>
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	2b08      	cmp	r3, #8
 800cca6:	d109      	bne.n	800ccbc <HAL_TIM_OC_Start_IT+0x5c>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	bf14      	ite	ne
 800ccb4:	2301      	movne	r3, #1
 800ccb6:	2300      	moveq	r3, #0
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	e022      	b.n	800cd02 <HAL_TIM_OC_Start_IT+0xa2>
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	2b0c      	cmp	r3, #12
 800ccc0:	d109      	bne.n	800ccd6 <HAL_TIM_OC_Start_IT+0x76>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	bf14      	ite	ne
 800ccce:	2301      	movne	r3, #1
 800ccd0:	2300      	moveq	r3, #0
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	e015      	b.n	800cd02 <HAL_TIM_OC_Start_IT+0xa2>
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	2b10      	cmp	r3, #16
 800ccda:	d109      	bne.n	800ccf0 <HAL_TIM_OC_Start_IT+0x90>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	bf14      	ite	ne
 800cce8:	2301      	movne	r3, #1
 800ccea:	2300      	moveq	r3, #0
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	e008      	b.n	800cd02 <HAL_TIM_OC_Start_IT+0xa2>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	bf14      	ite	ne
 800ccfc:	2301      	movne	r3, #1
 800ccfe:	2300      	moveq	r3, #0
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cd06:	2301      	movs	r3, #1
 800cd08:	e0ec      	b.n	800cee4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d104      	bne.n	800cd1a <HAL_TIM_OC_Start_IT+0xba>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2202      	movs	r2, #2
 800cd14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd18:	e023      	b.n	800cd62 <HAL_TIM_OC_Start_IT+0x102>
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	d104      	bne.n	800cd2a <HAL_TIM_OC_Start_IT+0xca>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2202      	movs	r2, #2
 800cd24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd28:	e01b      	b.n	800cd62 <HAL_TIM_OC_Start_IT+0x102>
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2b08      	cmp	r3, #8
 800cd2e:	d104      	bne.n	800cd3a <HAL_TIM_OC_Start_IT+0xda>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2202      	movs	r2, #2
 800cd34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd38:	e013      	b.n	800cd62 <HAL_TIM_OC_Start_IT+0x102>
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	2b0c      	cmp	r3, #12
 800cd3e:	d104      	bne.n	800cd4a <HAL_TIM_OC_Start_IT+0xea>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2202      	movs	r2, #2
 800cd44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cd48:	e00b      	b.n	800cd62 <HAL_TIM_OC_Start_IT+0x102>
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	2b10      	cmp	r3, #16
 800cd4e:	d104      	bne.n	800cd5a <HAL_TIM_OC_Start_IT+0xfa>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2202      	movs	r2, #2
 800cd54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cd58:	e003      	b.n	800cd62 <HAL_TIM_OC_Start_IT+0x102>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2202      	movs	r2, #2
 800cd5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b0c      	cmp	r3, #12
 800cd66:	d841      	bhi.n	800cdec <HAL_TIM_OC_Start_IT+0x18c>
 800cd68:	a201      	add	r2, pc, #4	; (adr r2, 800cd70 <HAL_TIM_OC_Start_IT+0x110>)
 800cd6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6e:	bf00      	nop
 800cd70:	0800cda5 	.word	0x0800cda5
 800cd74:	0800cded 	.word	0x0800cded
 800cd78:	0800cded 	.word	0x0800cded
 800cd7c:	0800cded 	.word	0x0800cded
 800cd80:	0800cdb7 	.word	0x0800cdb7
 800cd84:	0800cded 	.word	0x0800cded
 800cd88:	0800cded 	.word	0x0800cded
 800cd8c:	0800cded 	.word	0x0800cded
 800cd90:	0800cdc9 	.word	0x0800cdc9
 800cd94:	0800cded 	.word	0x0800cded
 800cd98:	0800cded 	.word	0x0800cded
 800cd9c:	0800cded 	.word	0x0800cded
 800cda0:	0800cddb 	.word	0x0800cddb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68da      	ldr	r2, [r3, #12]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f042 0202 	orr.w	r2, r2, #2
 800cdb2:	60da      	str	r2, [r3, #12]
      break;
 800cdb4:	e01d      	b.n	800cdf2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68da      	ldr	r2, [r3, #12]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f042 0204 	orr.w	r2, r2, #4
 800cdc4:	60da      	str	r2, [r3, #12]
      break;
 800cdc6:	e014      	b.n	800cdf2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f042 0208 	orr.w	r2, r2, #8
 800cdd6:	60da      	str	r2, [r3, #12]
      break;
 800cdd8:	e00b      	b.n	800cdf2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68da      	ldr	r2, [r3, #12]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f042 0210 	orr.w	r2, r2, #16
 800cde8:	60da      	str	r2, [r3, #12]
      break;
 800cdea:	e002      	b.n	800cdf2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
 800cdee:	73fb      	strb	r3, [r7, #15]
      break;
 800cdf0:	bf00      	nop
  }

  if (status == HAL_OK)
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d174      	bne.n	800cee2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	6839      	ldr	r1, [r7, #0]
 800ce00:	4618      	mov	r0, r3
 800ce02:	f001 f943 	bl	800e08c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a38      	ldr	r2, [pc, #224]	; (800ceec <HAL_TIM_OC_Start_IT+0x28c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d013      	beq.n	800ce38 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a36      	ldr	r2, [pc, #216]	; (800cef0 <HAL_TIM_OC_Start_IT+0x290>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d00e      	beq.n	800ce38 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a35      	ldr	r2, [pc, #212]	; (800cef4 <HAL_TIM_OC_Start_IT+0x294>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d009      	beq.n	800ce38 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a33      	ldr	r2, [pc, #204]	; (800cef8 <HAL_TIM_OC_Start_IT+0x298>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d004      	beq.n	800ce38 <HAL_TIM_OC_Start_IT+0x1d8>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a32      	ldr	r2, [pc, #200]	; (800cefc <HAL_TIM_OC_Start_IT+0x29c>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d101      	bne.n	800ce3c <HAL_TIM_OC_Start_IT+0x1dc>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e000      	b.n	800ce3e <HAL_TIM_OC_Start_IT+0x1de>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d007      	beq.n	800ce52 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a25      	ldr	r2, [pc, #148]	; (800ceec <HAL_TIM_OC_Start_IT+0x28c>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d022      	beq.n	800cea2 <HAL_TIM_OC_Start_IT+0x242>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce64:	d01d      	beq.n	800cea2 <HAL_TIM_OC_Start_IT+0x242>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a25      	ldr	r2, [pc, #148]	; (800cf00 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d018      	beq.n	800cea2 <HAL_TIM_OC_Start_IT+0x242>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a23      	ldr	r2, [pc, #140]	; (800cf04 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d013      	beq.n	800cea2 <HAL_TIM_OC_Start_IT+0x242>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a22      	ldr	r2, [pc, #136]	; (800cf08 <HAL_TIM_OC_Start_IT+0x2a8>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d00e      	beq.n	800cea2 <HAL_TIM_OC_Start_IT+0x242>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a19      	ldr	r2, [pc, #100]	; (800cef0 <HAL_TIM_OC_Start_IT+0x290>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d009      	beq.n	800cea2 <HAL_TIM_OC_Start_IT+0x242>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a1e      	ldr	r2, [pc, #120]	; (800cf0c <HAL_TIM_OC_Start_IT+0x2ac>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d004      	beq.n	800cea2 <HAL_TIM_OC_Start_IT+0x242>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a15      	ldr	r2, [pc, #84]	; (800cef4 <HAL_TIM_OC_Start_IT+0x294>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d115      	bne.n	800cece <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	689a      	ldr	r2, [r3, #8]
 800cea8:	4b19      	ldr	r3, [pc, #100]	; (800cf10 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ceaa:	4013      	ands	r3, r2
 800ceac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b06      	cmp	r3, #6
 800ceb2:	d015      	beq.n	800cee0 <HAL_TIM_OC_Start_IT+0x280>
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceba:	d011      	beq.n	800cee0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f042 0201 	orr.w	r2, r2, #1
 800ceca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cecc:	e008      	b.n	800cee0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f042 0201 	orr.w	r2, r2, #1
 800cedc:	601a      	str	r2, [r3, #0]
 800cede:	e000      	b.n	800cee2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cee0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	40010000 	.word	0x40010000
 800cef0:	40010400 	.word	0x40010400
 800cef4:	40014000 	.word	0x40014000
 800cef8:	40014400 	.word	0x40014400
 800cefc:	40014800 	.word	0x40014800
 800cf00:	40000400 	.word	0x40000400
 800cf04:	40000800 	.word	0x40000800
 800cf08:	40000c00 	.word	0x40000c00
 800cf0c:	40001800 	.word	0x40001800
 800cf10:	00010007 	.word	0x00010007

0800cf14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d101      	bne.n	800cf26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e049      	b.n	800cfba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d106      	bne.n	800cf40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f841 	bl	800cfc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2202      	movs	r2, #2
 800cf44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	3304      	adds	r3, #4
 800cf50:	4619      	mov	r1, r3
 800cf52:	4610      	mov	r0, r2
 800cf54:	f000 fc80 	bl	800d858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2201      	movs	r2, #1
 800cf64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cfca:	bf00      	nop
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr
	...

0800cfd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d109      	bne.n	800cffc <HAL_TIM_PWM_Start+0x24>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	bf14      	ite	ne
 800cff4:	2301      	movne	r3, #1
 800cff6:	2300      	moveq	r3, #0
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	e03c      	b.n	800d076 <HAL_TIM_PWM_Start+0x9e>
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d109      	bne.n	800d016 <HAL_TIM_PWM_Start+0x3e>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	bf14      	ite	ne
 800d00e:	2301      	movne	r3, #1
 800d010:	2300      	moveq	r3, #0
 800d012:	b2db      	uxtb	r3, r3
 800d014:	e02f      	b.n	800d076 <HAL_TIM_PWM_Start+0x9e>
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	2b08      	cmp	r3, #8
 800d01a:	d109      	bne.n	800d030 <HAL_TIM_PWM_Start+0x58>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2b01      	cmp	r3, #1
 800d026:	bf14      	ite	ne
 800d028:	2301      	movne	r3, #1
 800d02a:	2300      	moveq	r3, #0
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	e022      	b.n	800d076 <HAL_TIM_PWM_Start+0x9e>
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b0c      	cmp	r3, #12
 800d034:	d109      	bne.n	800d04a <HAL_TIM_PWM_Start+0x72>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b01      	cmp	r3, #1
 800d040:	bf14      	ite	ne
 800d042:	2301      	movne	r3, #1
 800d044:	2300      	moveq	r3, #0
 800d046:	b2db      	uxtb	r3, r3
 800d048:	e015      	b.n	800d076 <HAL_TIM_PWM_Start+0x9e>
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b10      	cmp	r3, #16
 800d04e:	d109      	bne.n	800d064 <HAL_TIM_PWM_Start+0x8c>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d056:	b2db      	uxtb	r3, r3
 800d058:	2b01      	cmp	r3, #1
 800d05a:	bf14      	ite	ne
 800d05c:	2301      	movne	r3, #1
 800d05e:	2300      	moveq	r3, #0
 800d060:	b2db      	uxtb	r3, r3
 800d062:	e008      	b.n	800d076 <HAL_TIM_PWM_Start+0x9e>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	bf14      	ite	ne
 800d070:	2301      	movne	r3, #1
 800d072:	2300      	moveq	r3, #0
 800d074:	b2db      	uxtb	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	d001      	beq.n	800d07e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e0a1      	b.n	800d1c2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d104      	bne.n	800d08e <HAL_TIM_PWM_Start+0xb6>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2202      	movs	r2, #2
 800d088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d08c:	e023      	b.n	800d0d6 <HAL_TIM_PWM_Start+0xfe>
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	2b04      	cmp	r3, #4
 800d092:	d104      	bne.n	800d09e <HAL_TIM_PWM_Start+0xc6>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2202      	movs	r2, #2
 800d098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d09c:	e01b      	b.n	800d0d6 <HAL_TIM_PWM_Start+0xfe>
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b08      	cmp	r3, #8
 800d0a2:	d104      	bne.n	800d0ae <HAL_TIM_PWM_Start+0xd6>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0ac:	e013      	b.n	800d0d6 <HAL_TIM_PWM_Start+0xfe>
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	2b0c      	cmp	r3, #12
 800d0b2:	d104      	bne.n	800d0be <HAL_TIM_PWM_Start+0xe6>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2202      	movs	r2, #2
 800d0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0bc:	e00b      	b.n	800d0d6 <HAL_TIM_PWM_Start+0xfe>
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b10      	cmp	r3, #16
 800d0c2:	d104      	bne.n	800d0ce <HAL_TIM_PWM_Start+0xf6>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0cc:	e003      	b.n	800d0d6 <HAL_TIM_PWM_Start+0xfe>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 ffd4 	bl	800e08c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a38      	ldr	r2, [pc, #224]	; (800d1cc <HAL_TIM_PWM_Start+0x1f4>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d013      	beq.n	800d116 <HAL_TIM_PWM_Start+0x13e>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a37      	ldr	r2, [pc, #220]	; (800d1d0 <HAL_TIM_PWM_Start+0x1f8>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d00e      	beq.n	800d116 <HAL_TIM_PWM_Start+0x13e>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a35      	ldr	r2, [pc, #212]	; (800d1d4 <HAL_TIM_PWM_Start+0x1fc>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d009      	beq.n	800d116 <HAL_TIM_PWM_Start+0x13e>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a34      	ldr	r2, [pc, #208]	; (800d1d8 <HAL_TIM_PWM_Start+0x200>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d004      	beq.n	800d116 <HAL_TIM_PWM_Start+0x13e>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a32      	ldr	r2, [pc, #200]	; (800d1dc <HAL_TIM_PWM_Start+0x204>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d101      	bne.n	800d11a <HAL_TIM_PWM_Start+0x142>
 800d116:	2301      	movs	r3, #1
 800d118:	e000      	b.n	800d11c <HAL_TIM_PWM_Start+0x144>
 800d11a:	2300      	movs	r3, #0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d007      	beq.n	800d130 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d12e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a25      	ldr	r2, [pc, #148]	; (800d1cc <HAL_TIM_PWM_Start+0x1f4>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d022      	beq.n	800d180 <HAL_TIM_PWM_Start+0x1a8>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d142:	d01d      	beq.n	800d180 <HAL_TIM_PWM_Start+0x1a8>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a25      	ldr	r2, [pc, #148]	; (800d1e0 <HAL_TIM_PWM_Start+0x208>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d018      	beq.n	800d180 <HAL_TIM_PWM_Start+0x1a8>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a24      	ldr	r2, [pc, #144]	; (800d1e4 <HAL_TIM_PWM_Start+0x20c>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d013      	beq.n	800d180 <HAL_TIM_PWM_Start+0x1a8>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a22      	ldr	r2, [pc, #136]	; (800d1e8 <HAL_TIM_PWM_Start+0x210>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d00e      	beq.n	800d180 <HAL_TIM_PWM_Start+0x1a8>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4a1a      	ldr	r2, [pc, #104]	; (800d1d0 <HAL_TIM_PWM_Start+0x1f8>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d009      	beq.n	800d180 <HAL_TIM_PWM_Start+0x1a8>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a1e      	ldr	r2, [pc, #120]	; (800d1ec <HAL_TIM_PWM_Start+0x214>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d004      	beq.n	800d180 <HAL_TIM_PWM_Start+0x1a8>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a16      	ldr	r2, [pc, #88]	; (800d1d4 <HAL_TIM_PWM_Start+0x1fc>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d115      	bne.n	800d1ac <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689a      	ldr	r2, [r3, #8]
 800d186:	4b1a      	ldr	r3, [pc, #104]	; (800d1f0 <HAL_TIM_PWM_Start+0x218>)
 800d188:	4013      	ands	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b06      	cmp	r3, #6
 800d190:	d015      	beq.n	800d1be <HAL_TIM_PWM_Start+0x1e6>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d198:	d011      	beq.n	800d1be <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f042 0201 	orr.w	r2, r2, #1
 800d1a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1aa:	e008      	b.n	800d1be <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f042 0201 	orr.w	r2, r2, #1
 800d1ba:	601a      	str	r2, [r3, #0]
 800d1bc:	e000      	b.n	800d1c0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	40010000 	.word	0x40010000
 800d1d0:	40010400 	.word	0x40010400
 800d1d4:	40014000 	.word	0x40014000
 800d1d8:	40014400 	.word	0x40014400
 800d1dc:	40014800 	.word	0x40014800
 800d1e0:	40000400 	.word	0x40000400
 800d1e4:	40000800 	.word	0x40000800
 800d1e8:	40000c00 	.word	0x40000c00
 800d1ec:	40001800 	.word	0x40001800
 800d1f0:	00010007 	.word	0x00010007

0800d1f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	f003 0302 	and.w	r3, r3, #2
 800d212:	2b00      	cmp	r3, #0
 800d214:	d020      	beq.n	800d258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f003 0302 	and.w	r3, r3, #2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d01b      	beq.n	800d258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f06f 0202 	mvn.w	r2, #2
 800d228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2201      	movs	r2, #1
 800d22e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	699b      	ldr	r3, [r3, #24]
 800d236:	f003 0303 	and.w	r3, r3, #3
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d003      	beq.n	800d246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 faec 	bl	800d81c <HAL_TIM_IC_CaptureCallback>
 800d244:	e005      	b.n	800d252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7f3 fa1c 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 faef 	bl	800d830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	f003 0304 	and.w	r3, r3, #4
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d020      	beq.n	800d2a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f003 0304 	and.w	r3, r3, #4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01b      	beq.n	800d2a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f06f 0204 	mvn.w	r2, #4
 800d274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2202      	movs	r2, #2
 800d27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	699b      	ldr	r3, [r3, #24]
 800d282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d286:	2b00      	cmp	r3, #0
 800d288:	d003      	beq.n	800d292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fac6 	bl	800d81c <HAL_TIM_IC_CaptureCallback>
 800d290:	e005      	b.n	800d29e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f7f3 f9f6 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fac9 	bl	800d830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	f003 0308 	and.w	r3, r3, #8
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d020      	beq.n	800d2f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f003 0308 	and.w	r3, r3, #8
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d01b      	beq.n	800d2f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f06f 0208 	mvn.w	r2, #8
 800d2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2204      	movs	r2, #4
 800d2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	f003 0303 	and.w	r3, r3, #3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d003      	beq.n	800d2de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 faa0 	bl	800d81c <HAL_TIM_IC_CaptureCallback>
 800d2dc:	e005      	b.n	800d2ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7f3 f9d0 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 faa3 	bl	800d830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	f003 0310 	and.w	r3, r3, #16
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d020      	beq.n	800d33c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f003 0310 	and.w	r3, r3, #16
 800d300:	2b00      	cmp	r3, #0
 800d302:	d01b      	beq.n	800d33c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f06f 0210 	mvn.w	r2, #16
 800d30c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2208      	movs	r2, #8
 800d312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	69db      	ldr	r3, [r3, #28]
 800d31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d003      	beq.n	800d32a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 fa7a 	bl	800d81c <HAL_TIM_IC_CaptureCallback>
 800d328:	e005      	b.n	800d336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7f3 f9aa 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fa7d 	bl	800d830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00c      	beq.n	800d360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d007      	beq.n	800d360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f06f 0201 	mvn.w	r2, #1
 800d358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7f4 ff7c 	bl	8002258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d366:	2b00      	cmp	r3, #0
 800d368:	d104      	bne.n	800d374 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00c      	beq.n	800d38e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d007      	beq.n	800d38e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 ffbb 	bl	800e304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00c      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d007      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d3aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 ffb3 	bl	800e318 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00c      	beq.n	800d3d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d007      	beq.n	800d3d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d3ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 fa37 	bl	800d844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	f003 0320 	and.w	r3, r3, #32
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00c      	beq.n	800d3fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f003 0320 	and.w	r3, r3, #32
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d007      	beq.n	800d3fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f06f 0220 	mvn.w	r2, #32
 800d3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 ff7b 	bl	800e2f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
	...

0800d404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d101      	bne.n	800d422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d41e:	2302      	movs	r3, #2
 800d420:	e0ff      	b.n	800d622 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b14      	cmp	r3, #20
 800d42e:	f200 80f0 	bhi.w	800d612 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d432:	a201      	add	r2, pc, #4	; (adr r2, 800d438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d438:	0800d48d 	.word	0x0800d48d
 800d43c:	0800d613 	.word	0x0800d613
 800d440:	0800d613 	.word	0x0800d613
 800d444:	0800d613 	.word	0x0800d613
 800d448:	0800d4cd 	.word	0x0800d4cd
 800d44c:	0800d613 	.word	0x0800d613
 800d450:	0800d613 	.word	0x0800d613
 800d454:	0800d613 	.word	0x0800d613
 800d458:	0800d50f 	.word	0x0800d50f
 800d45c:	0800d613 	.word	0x0800d613
 800d460:	0800d613 	.word	0x0800d613
 800d464:	0800d613 	.word	0x0800d613
 800d468:	0800d54f 	.word	0x0800d54f
 800d46c:	0800d613 	.word	0x0800d613
 800d470:	0800d613 	.word	0x0800d613
 800d474:	0800d613 	.word	0x0800d613
 800d478:	0800d591 	.word	0x0800d591
 800d47c:	0800d613 	.word	0x0800d613
 800d480:	0800d613 	.word	0x0800d613
 800d484:	0800d613 	.word	0x0800d613
 800d488:	0800d5d1 	.word	0x0800d5d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	68b9      	ldr	r1, [r7, #8]
 800d492:	4618      	mov	r0, r3
 800d494:	f000 fa86 	bl	800d9a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	699a      	ldr	r2, [r3, #24]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f042 0208 	orr.w	r2, r2, #8
 800d4a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	699a      	ldr	r2, [r3, #24]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f022 0204 	bic.w	r2, r2, #4
 800d4b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	6999      	ldr	r1, [r3, #24]
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	691a      	ldr	r2, [r3, #16]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	430a      	orrs	r2, r1
 800d4c8:	619a      	str	r2, [r3, #24]
      break;
 800d4ca:	e0a5      	b.n	800d618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	68b9      	ldr	r1, [r7, #8]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f000 faf6 	bl	800dac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	699a      	ldr	r2, [r3, #24]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	699a      	ldr	r2, [r3, #24]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6999      	ldr	r1, [r3, #24]
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	021a      	lsls	r2, r3, #8
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	430a      	orrs	r2, r1
 800d50a:	619a      	str	r2, [r3, #24]
      break;
 800d50c:	e084      	b.n	800d618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	68b9      	ldr	r1, [r7, #8]
 800d514:	4618      	mov	r0, r3
 800d516:	f000 fb5f 	bl	800dbd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	69da      	ldr	r2, [r3, #28]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f042 0208 	orr.w	r2, r2, #8
 800d528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	69da      	ldr	r2, [r3, #28]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f022 0204 	bic.w	r2, r2, #4
 800d538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	69d9      	ldr	r1, [r3, #28]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	691a      	ldr	r2, [r3, #16]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	430a      	orrs	r2, r1
 800d54a:	61da      	str	r2, [r3, #28]
      break;
 800d54c:	e064      	b.n	800d618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68b9      	ldr	r1, [r7, #8]
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fbc7 	bl	800dce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	69da      	ldr	r2, [r3, #28]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	69da      	ldr	r2, [r3, #28]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	69d9      	ldr	r1, [r3, #28]
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	021a      	lsls	r2, r3, #8
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	430a      	orrs	r2, r1
 800d58c:	61da      	str	r2, [r3, #28]
      break;
 800d58e:	e043      	b.n	800d618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68b9      	ldr	r1, [r7, #8]
 800d596:	4618      	mov	r0, r3
 800d598:	f000 fc10 	bl	800ddbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f042 0208 	orr.w	r2, r2, #8
 800d5aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f022 0204 	bic.w	r2, r2, #4
 800d5ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	691a      	ldr	r2, [r3, #16]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	430a      	orrs	r2, r1
 800d5cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d5ce:	e023      	b.n	800d618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68b9      	ldr	r1, [r7, #8]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f000 fc54 	bl	800de84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d5ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	021a      	lsls	r2, r3, #8
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	430a      	orrs	r2, r1
 800d60e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d610:	e002      	b.n	800d618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d612:	2301      	movs	r3, #1
 800d614:	75fb      	strb	r3, [r7, #23]
      break;
 800d616:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d620:	7dfb      	ldrb	r3, [r7, #23]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3718      	adds	r7, #24
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop

0800d62c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d640:	2b01      	cmp	r3, #1
 800d642:	d101      	bne.n	800d648 <HAL_TIM_ConfigClockSource+0x1c>
 800d644:	2302      	movs	r3, #2
 800d646:	e0dc      	b.n	800d802 <HAL_TIM_ConfigClockSource+0x1d6>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2202      	movs	r2, #2
 800d654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	4b6a      	ldr	r3, [pc, #424]	; (800d80c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d664:	4013      	ands	r3, r2
 800d666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d66e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a64      	ldr	r2, [pc, #400]	; (800d810 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	f000 80a9 	beq.w	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d684:	4a62      	ldr	r2, [pc, #392]	; (800d810 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d686:	4293      	cmp	r3, r2
 800d688:	f200 80ae 	bhi.w	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d68c:	4a61      	ldr	r2, [pc, #388]	; (800d814 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	f000 80a1 	beq.w	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d694:	4a5f      	ldr	r2, [pc, #380]	; (800d814 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d696:	4293      	cmp	r3, r2
 800d698:	f200 80a6 	bhi.w	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d69c:	4a5e      	ldr	r2, [pc, #376]	; (800d818 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	f000 8099 	beq.w	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6a4:	4a5c      	ldr	r2, [pc, #368]	; (800d818 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	f200 809e 	bhi.w	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d6b0:	f000 8091 	beq.w	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d6b8:	f200 8096 	bhi.w	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6c0:	f000 8089 	beq.w	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d6c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6c8:	f200 808e 	bhi.w	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6d0:	d03e      	beq.n	800d750 <HAL_TIM_ConfigClockSource+0x124>
 800d6d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6d6:	f200 8087 	bhi.w	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6de:	f000 8086 	beq.w	800d7ee <HAL_TIM_ConfigClockSource+0x1c2>
 800d6e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6e6:	d87f      	bhi.n	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6e8:	2b70      	cmp	r3, #112	; 0x70
 800d6ea:	d01a      	beq.n	800d722 <HAL_TIM_ConfigClockSource+0xf6>
 800d6ec:	2b70      	cmp	r3, #112	; 0x70
 800d6ee:	d87b      	bhi.n	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6f0:	2b60      	cmp	r3, #96	; 0x60
 800d6f2:	d050      	beq.n	800d796 <HAL_TIM_ConfigClockSource+0x16a>
 800d6f4:	2b60      	cmp	r3, #96	; 0x60
 800d6f6:	d877      	bhi.n	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d6f8:	2b50      	cmp	r3, #80	; 0x50
 800d6fa:	d03c      	beq.n	800d776 <HAL_TIM_ConfigClockSource+0x14a>
 800d6fc:	2b50      	cmp	r3, #80	; 0x50
 800d6fe:	d873      	bhi.n	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d700:	2b40      	cmp	r3, #64	; 0x40
 800d702:	d058      	beq.n	800d7b6 <HAL_TIM_ConfigClockSource+0x18a>
 800d704:	2b40      	cmp	r3, #64	; 0x40
 800d706:	d86f      	bhi.n	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d708:	2b30      	cmp	r3, #48	; 0x30
 800d70a:	d064      	beq.n	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d70c:	2b30      	cmp	r3, #48	; 0x30
 800d70e:	d86b      	bhi.n	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d710:	2b20      	cmp	r3, #32
 800d712:	d060      	beq.n	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d714:	2b20      	cmp	r3, #32
 800d716:	d867      	bhi.n	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d05c      	beq.n	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d71c:	2b10      	cmp	r3, #16
 800d71e:	d05a      	beq.n	800d7d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d720:	e062      	b.n	800d7e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6818      	ldr	r0, [r3, #0]
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	6899      	ldr	r1, [r3, #8]
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	685a      	ldr	r2, [r3, #4]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	f000 fc8b 	bl	800e04c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	609a      	str	r2, [r3, #8]
      break;
 800d74e:	e04f      	b.n	800d7f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6818      	ldr	r0, [r3, #0]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	6899      	ldr	r1, [r3, #8]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	685a      	ldr	r2, [r3, #4]
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	f000 fc74 	bl	800e04c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	689a      	ldr	r2, [r3, #8]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d772:	609a      	str	r2, [r3, #8]
      break;
 800d774:	e03c      	b.n	800d7f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6818      	ldr	r0, [r3, #0]
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	6859      	ldr	r1, [r3, #4]
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	461a      	mov	r2, r3
 800d784:	f000 fbe4 	bl	800df50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2150      	movs	r1, #80	; 0x50
 800d78e:	4618      	mov	r0, r3
 800d790:	f000 fc3e 	bl	800e010 <TIM_ITRx_SetConfig>
      break;
 800d794:	e02c      	b.n	800d7f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6818      	ldr	r0, [r3, #0]
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	6859      	ldr	r1, [r3, #4]
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f000 fc03 	bl	800dfae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2160      	movs	r1, #96	; 0x60
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 fc2e 	bl	800e010 <TIM_ITRx_SetConfig>
      break;
 800d7b4:	e01c      	b.n	800d7f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6818      	ldr	r0, [r3, #0]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	6859      	ldr	r1, [r3, #4]
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	f000 fbc4 	bl	800df50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2140      	movs	r1, #64	; 0x40
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f000 fc1e 	bl	800e010 <TIM_ITRx_SetConfig>
      break;
 800d7d4:	e00c      	b.n	800d7f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4619      	mov	r1, r3
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	f000 fc15 	bl	800e010 <TIM_ITRx_SetConfig>
      break;
 800d7e6:	e003      	b.n	800d7f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ec:	e000      	b.n	800d7f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d7ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d800:	7bfb      	ldrb	r3, [r7, #15]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	ffceff88 	.word	0xffceff88
 800d810:	00100040 	.word	0x00100040
 800d814:	00100030 	.word	0x00100030
 800d818:	00100020 	.word	0x00100020

0800d81c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4a46      	ldr	r2, [pc, #280]	; (800d984 <TIM_Base_SetConfig+0x12c>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d013      	beq.n	800d898 <TIM_Base_SetConfig+0x40>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d876:	d00f      	beq.n	800d898 <TIM_Base_SetConfig+0x40>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a43      	ldr	r2, [pc, #268]	; (800d988 <TIM_Base_SetConfig+0x130>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d00b      	beq.n	800d898 <TIM_Base_SetConfig+0x40>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a42      	ldr	r2, [pc, #264]	; (800d98c <TIM_Base_SetConfig+0x134>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d007      	beq.n	800d898 <TIM_Base_SetConfig+0x40>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a41      	ldr	r2, [pc, #260]	; (800d990 <TIM_Base_SetConfig+0x138>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d003      	beq.n	800d898 <TIM_Base_SetConfig+0x40>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	4a40      	ldr	r2, [pc, #256]	; (800d994 <TIM_Base_SetConfig+0x13c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d108      	bne.n	800d8aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d89e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a35      	ldr	r2, [pc, #212]	; (800d984 <TIM_Base_SetConfig+0x12c>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d01f      	beq.n	800d8f2 <TIM_Base_SetConfig+0x9a>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8b8:	d01b      	beq.n	800d8f2 <TIM_Base_SetConfig+0x9a>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a32      	ldr	r2, [pc, #200]	; (800d988 <TIM_Base_SetConfig+0x130>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d017      	beq.n	800d8f2 <TIM_Base_SetConfig+0x9a>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a31      	ldr	r2, [pc, #196]	; (800d98c <TIM_Base_SetConfig+0x134>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d013      	beq.n	800d8f2 <TIM_Base_SetConfig+0x9a>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	4a30      	ldr	r2, [pc, #192]	; (800d990 <TIM_Base_SetConfig+0x138>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d00f      	beq.n	800d8f2 <TIM_Base_SetConfig+0x9a>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a2f      	ldr	r2, [pc, #188]	; (800d994 <TIM_Base_SetConfig+0x13c>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d00b      	beq.n	800d8f2 <TIM_Base_SetConfig+0x9a>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	4a2e      	ldr	r2, [pc, #184]	; (800d998 <TIM_Base_SetConfig+0x140>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d007      	beq.n	800d8f2 <TIM_Base_SetConfig+0x9a>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4a2d      	ldr	r2, [pc, #180]	; (800d99c <TIM_Base_SetConfig+0x144>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d003      	beq.n	800d8f2 <TIM_Base_SetConfig+0x9a>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4a2c      	ldr	r2, [pc, #176]	; (800d9a0 <TIM_Base_SetConfig+0x148>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d108      	bne.n	800d904 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	4313      	orrs	r3, r2
 800d902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	4313      	orrs	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	689a      	ldr	r2, [r3, #8]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a16      	ldr	r2, [pc, #88]	; (800d984 <TIM_Base_SetConfig+0x12c>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d00f      	beq.n	800d950 <TIM_Base_SetConfig+0xf8>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a18      	ldr	r2, [pc, #96]	; (800d994 <TIM_Base_SetConfig+0x13c>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d00b      	beq.n	800d950 <TIM_Base_SetConfig+0xf8>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a17      	ldr	r2, [pc, #92]	; (800d998 <TIM_Base_SetConfig+0x140>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d007      	beq.n	800d950 <TIM_Base_SetConfig+0xf8>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a16      	ldr	r2, [pc, #88]	; (800d99c <TIM_Base_SetConfig+0x144>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d003      	beq.n	800d950 <TIM_Base_SetConfig+0xf8>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4a15      	ldr	r2, [pc, #84]	; (800d9a0 <TIM_Base_SetConfig+0x148>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d103      	bne.n	800d958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	691a      	ldr	r2, [r3, #16]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	f003 0301 	and.w	r3, r3, #1
 800d966:	2b01      	cmp	r3, #1
 800d968:	d105      	bne.n	800d976 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	f023 0201 	bic.w	r2, r3, #1
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	611a      	str	r2, [r3, #16]
  }
}
 800d976:	bf00      	nop
 800d978:	3714      	adds	r7, #20
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	40010000 	.word	0x40010000
 800d988:	40000400 	.word	0x40000400
 800d98c:	40000800 	.word	0x40000800
 800d990:	40000c00 	.word	0x40000c00
 800d994:	40010400 	.word	0x40010400
 800d998:	40014000 	.word	0x40014000
 800d99c:	40014400 	.word	0x40014400
 800d9a0:	40014800 	.word	0x40014800

0800d9a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b087      	sub	sp, #28
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6a1b      	ldr	r3, [r3, #32]
 800d9b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	f023 0201 	bic.w	r2, r3, #1
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	699b      	ldr	r3, [r3, #24]
 800d9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	4b37      	ldr	r3, [pc, #220]	; (800daac <TIM_OC1_SetConfig+0x108>)
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f023 0303 	bic.w	r3, r3, #3
 800d9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f023 0302 	bic.w	r3, r3, #2
 800d9ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	697a      	ldr	r2, [r7, #20]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a2d      	ldr	r2, [pc, #180]	; (800dab0 <TIM_OC1_SetConfig+0x10c>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d00f      	beq.n	800da20 <TIM_OC1_SetConfig+0x7c>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a2c      	ldr	r2, [pc, #176]	; (800dab4 <TIM_OC1_SetConfig+0x110>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d00b      	beq.n	800da20 <TIM_OC1_SetConfig+0x7c>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a2b      	ldr	r2, [pc, #172]	; (800dab8 <TIM_OC1_SetConfig+0x114>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d007      	beq.n	800da20 <TIM_OC1_SetConfig+0x7c>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a2a      	ldr	r2, [pc, #168]	; (800dabc <TIM_OC1_SetConfig+0x118>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d003      	beq.n	800da20 <TIM_OC1_SetConfig+0x7c>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a29      	ldr	r2, [pc, #164]	; (800dac0 <TIM_OC1_SetConfig+0x11c>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d10c      	bne.n	800da3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	f023 0308 	bic.w	r3, r3, #8
 800da26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	697a      	ldr	r2, [r7, #20]
 800da2e:	4313      	orrs	r3, r2
 800da30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f023 0304 	bic.w	r3, r3, #4
 800da38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4a1c      	ldr	r2, [pc, #112]	; (800dab0 <TIM_OC1_SetConfig+0x10c>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d00f      	beq.n	800da62 <TIM_OC1_SetConfig+0xbe>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a1b      	ldr	r2, [pc, #108]	; (800dab4 <TIM_OC1_SetConfig+0x110>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d00b      	beq.n	800da62 <TIM_OC1_SetConfig+0xbe>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4a1a      	ldr	r2, [pc, #104]	; (800dab8 <TIM_OC1_SetConfig+0x114>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d007      	beq.n	800da62 <TIM_OC1_SetConfig+0xbe>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4a19      	ldr	r2, [pc, #100]	; (800dabc <TIM_OC1_SetConfig+0x118>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d003      	beq.n	800da62 <TIM_OC1_SetConfig+0xbe>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a18      	ldr	r2, [pc, #96]	; (800dac0 <TIM_OC1_SetConfig+0x11c>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d111      	bne.n	800da86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	695b      	ldr	r3, [r3, #20]
 800da76:	693a      	ldr	r2, [r7, #16]
 800da78:	4313      	orrs	r3, r2
 800da7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	693a      	ldr	r2, [r7, #16]
 800da82:	4313      	orrs	r3, r2
 800da84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	693a      	ldr	r2, [r7, #16]
 800da8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	685a      	ldr	r2, [r3, #4]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	697a      	ldr	r2, [r7, #20]
 800da9e:	621a      	str	r2, [r3, #32]
}
 800daa0:	bf00      	nop
 800daa2:	371c      	adds	r7, #28
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr
 800daac:	fffeff8f 	.word	0xfffeff8f
 800dab0:	40010000 	.word	0x40010000
 800dab4:	40010400 	.word	0x40010400
 800dab8:	40014000 	.word	0x40014000
 800dabc:	40014400 	.word	0x40014400
 800dac0:	40014800 	.word	0x40014800

0800dac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b087      	sub	sp, #28
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a1b      	ldr	r3, [r3, #32]
 800dad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a1b      	ldr	r3, [r3, #32]
 800dad8:	f023 0210 	bic.w	r2, r3, #16
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	4b34      	ldr	r3, [pc, #208]	; (800dbc0 <TIM_OC2_SetConfig+0xfc>)
 800daf0:	4013      	ands	r3, r2
 800daf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dafa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	021b      	lsls	r3, r3, #8
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	4313      	orrs	r3, r2
 800db06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f023 0320 	bic.w	r3, r3, #32
 800db0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	011b      	lsls	r3, r3, #4
 800db16:	697a      	ldr	r2, [r7, #20]
 800db18:	4313      	orrs	r3, r2
 800db1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4a29      	ldr	r2, [pc, #164]	; (800dbc4 <TIM_OC2_SetConfig+0x100>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d003      	beq.n	800db2c <TIM_OC2_SetConfig+0x68>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4a28      	ldr	r2, [pc, #160]	; (800dbc8 <TIM_OC2_SetConfig+0x104>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d10d      	bne.n	800db48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	011b      	lsls	r3, r3, #4
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	4313      	orrs	r3, r2
 800db3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4a1e      	ldr	r2, [pc, #120]	; (800dbc4 <TIM_OC2_SetConfig+0x100>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d00f      	beq.n	800db70 <TIM_OC2_SetConfig+0xac>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	4a1d      	ldr	r2, [pc, #116]	; (800dbc8 <TIM_OC2_SetConfig+0x104>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d00b      	beq.n	800db70 <TIM_OC2_SetConfig+0xac>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a1c      	ldr	r2, [pc, #112]	; (800dbcc <TIM_OC2_SetConfig+0x108>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d007      	beq.n	800db70 <TIM_OC2_SetConfig+0xac>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a1b      	ldr	r2, [pc, #108]	; (800dbd0 <TIM_OC2_SetConfig+0x10c>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d003      	beq.n	800db70 <TIM_OC2_SetConfig+0xac>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a1a      	ldr	r2, [pc, #104]	; (800dbd4 <TIM_OC2_SetConfig+0x110>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d113      	bne.n	800db98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	695b      	ldr	r3, [r3, #20]
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	693a      	ldr	r2, [r7, #16]
 800db88:	4313      	orrs	r3, r2
 800db8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	693a      	ldr	r2, [r7, #16]
 800db94:	4313      	orrs	r3, r2
 800db96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	685a      	ldr	r2, [r3, #4]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	697a      	ldr	r2, [r7, #20]
 800dbb0:	621a      	str	r2, [r3, #32]
}
 800dbb2:	bf00      	nop
 800dbb4:	371c      	adds	r7, #28
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop
 800dbc0:	feff8fff 	.word	0xfeff8fff
 800dbc4:	40010000 	.word	0x40010000
 800dbc8:	40010400 	.word	0x40010400
 800dbcc:	40014000 	.word	0x40014000
 800dbd0:	40014400 	.word	0x40014400
 800dbd4:	40014800 	.word	0x40014800

0800dbd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b087      	sub	sp, #28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a1b      	ldr	r3, [r3, #32]
 800dbec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	69db      	ldr	r3, [r3, #28]
 800dbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dc00:	68fa      	ldr	r2, [r7, #12]
 800dc02:	4b33      	ldr	r3, [pc, #204]	; (800dcd0 <TIM_OC3_SetConfig+0xf8>)
 800dc04:	4013      	ands	r3, r2
 800dc06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f023 0303 	bic.w	r3, r3, #3
 800dc0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68fa      	ldr	r2, [r7, #12]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	689b      	ldr	r3, [r3, #8]
 800dc26:	021b      	lsls	r3, r3, #8
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a28      	ldr	r2, [pc, #160]	; (800dcd4 <TIM_OC3_SetConfig+0xfc>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d003      	beq.n	800dc3e <TIM_OC3_SetConfig+0x66>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4a27      	ldr	r2, [pc, #156]	; (800dcd8 <TIM_OC3_SetConfig+0x100>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d10d      	bne.n	800dc5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	021b      	lsls	r3, r3, #8
 800dc4c:	697a      	ldr	r2, [r7, #20]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4a1d      	ldr	r2, [pc, #116]	; (800dcd4 <TIM_OC3_SetConfig+0xfc>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d00f      	beq.n	800dc82 <TIM_OC3_SetConfig+0xaa>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	4a1c      	ldr	r2, [pc, #112]	; (800dcd8 <TIM_OC3_SetConfig+0x100>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d00b      	beq.n	800dc82 <TIM_OC3_SetConfig+0xaa>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4a1b      	ldr	r2, [pc, #108]	; (800dcdc <TIM_OC3_SetConfig+0x104>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d007      	beq.n	800dc82 <TIM_OC3_SetConfig+0xaa>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4a1a      	ldr	r2, [pc, #104]	; (800dce0 <TIM_OC3_SetConfig+0x108>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d003      	beq.n	800dc82 <TIM_OC3_SetConfig+0xaa>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a19      	ldr	r2, [pc, #100]	; (800dce4 <TIM_OC3_SetConfig+0x10c>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d113      	bne.n	800dcaa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	695b      	ldr	r3, [r3, #20]
 800dc96:	011b      	lsls	r3, r3, #4
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	699b      	ldr	r3, [r3, #24]
 800dca2:	011b      	lsls	r3, r3, #4
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	693a      	ldr	r2, [r7, #16]
 800dcae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	68fa      	ldr	r2, [r7, #12]
 800dcb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	685a      	ldr	r2, [r3, #4]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	697a      	ldr	r2, [r7, #20]
 800dcc2:	621a      	str	r2, [r3, #32]
}
 800dcc4:	bf00      	nop
 800dcc6:	371c      	adds	r7, #28
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	fffeff8f 	.word	0xfffeff8f
 800dcd4:	40010000 	.word	0x40010000
 800dcd8:	40010400 	.word	0x40010400
 800dcdc:	40014000 	.word	0x40014000
 800dce0:	40014400 	.word	0x40014400
 800dce4:	40014800 	.word	0x40014800

0800dce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a1b      	ldr	r3, [r3, #32]
 800dcf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6a1b      	ldr	r3, [r3, #32]
 800dcfc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	69db      	ldr	r3, [r3, #28]
 800dd0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	4b24      	ldr	r3, [pc, #144]	; (800dda4 <TIM_OC4_SetConfig+0xbc>)
 800dd14:	4013      	ands	r3, r2
 800dd16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	021b      	lsls	r3, r3, #8
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dd32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	031b      	lsls	r3, r3, #12
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	4a19      	ldr	r2, [pc, #100]	; (800dda8 <TIM_OC4_SetConfig+0xc0>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d00f      	beq.n	800dd68 <TIM_OC4_SetConfig+0x80>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	4a18      	ldr	r2, [pc, #96]	; (800ddac <TIM_OC4_SetConfig+0xc4>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d00b      	beq.n	800dd68 <TIM_OC4_SetConfig+0x80>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4a17      	ldr	r2, [pc, #92]	; (800ddb0 <TIM_OC4_SetConfig+0xc8>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d007      	beq.n	800dd68 <TIM_OC4_SetConfig+0x80>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a16      	ldr	r2, [pc, #88]	; (800ddb4 <TIM_OC4_SetConfig+0xcc>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d003      	beq.n	800dd68 <TIM_OC4_SetConfig+0x80>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a15      	ldr	r2, [pc, #84]	; (800ddb8 <TIM_OC4_SetConfig+0xd0>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d109      	bne.n	800dd7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	695b      	ldr	r3, [r3, #20]
 800dd74:	019b      	lsls	r3, r3, #6
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	621a      	str	r2, [r3, #32]
}
 800dd96:	bf00      	nop
 800dd98:	371c      	adds	r7, #28
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	feff8fff 	.word	0xfeff8fff
 800dda8:	40010000 	.word	0x40010000
 800ddac:	40010400 	.word	0x40010400
 800ddb0:	40014000 	.word	0x40014000
 800ddb4:	40014400 	.word	0x40014400
 800ddb8:	40014800 	.word	0x40014800

0800ddbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b087      	sub	sp, #28
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6a1b      	ldr	r3, [r3, #32]
 800ddca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a1b      	ldr	r3, [r3, #32]
 800ddd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	4b21      	ldr	r3, [pc, #132]	; (800de6c <TIM_OC5_SetConfig+0xb0>)
 800dde8:	4013      	ands	r3, r2
 800ddea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ddfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	041b      	lsls	r3, r3, #16
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	4313      	orrs	r3, r2
 800de08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4a18      	ldr	r2, [pc, #96]	; (800de70 <TIM_OC5_SetConfig+0xb4>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d00f      	beq.n	800de32 <TIM_OC5_SetConfig+0x76>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a17      	ldr	r2, [pc, #92]	; (800de74 <TIM_OC5_SetConfig+0xb8>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d00b      	beq.n	800de32 <TIM_OC5_SetConfig+0x76>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a16      	ldr	r2, [pc, #88]	; (800de78 <TIM_OC5_SetConfig+0xbc>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d007      	beq.n	800de32 <TIM_OC5_SetConfig+0x76>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a15      	ldr	r2, [pc, #84]	; (800de7c <TIM_OC5_SetConfig+0xc0>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d003      	beq.n	800de32 <TIM_OC5_SetConfig+0x76>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a14      	ldr	r2, [pc, #80]	; (800de80 <TIM_OC5_SetConfig+0xc4>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d109      	bne.n	800de46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	695b      	ldr	r3, [r3, #20]
 800de3e:	021b      	lsls	r3, r3, #8
 800de40:	697a      	ldr	r2, [r7, #20]
 800de42:	4313      	orrs	r3, r2
 800de44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	697a      	ldr	r2, [r7, #20]
 800de4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	685a      	ldr	r2, [r3, #4]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	621a      	str	r2, [r3, #32]
}
 800de60:	bf00      	nop
 800de62:	371c      	adds	r7, #28
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr
 800de6c:	fffeff8f 	.word	0xfffeff8f
 800de70:	40010000 	.word	0x40010000
 800de74:	40010400 	.word	0x40010400
 800de78:	40014000 	.word	0x40014000
 800de7c:	40014400 	.word	0x40014400
 800de80:	40014800 	.word	0x40014800

0800de84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800de84:	b480      	push	{r7}
 800de86:	b087      	sub	sp, #28
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6a1b      	ldr	r3, [r3, #32]
 800de92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	4b22      	ldr	r3, [pc, #136]	; (800df38 <TIM_OC6_SetConfig+0xb4>)
 800deb0:	4013      	ands	r3, r2
 800deb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	021b      	lsls	r3, r3, #8
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	4313      	orrs	r3, r2
 800debe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	051b      	lsls	r3, r3, #20
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a19      	ldr	r2, [pc, #100]	; (800df3c <TIM_OC6_SetConfig+0xb8>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d00f      	beq.n	800defc <TIM_OC6_SetConfig+0x78>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a18      	ldr	r2, [pc, #96]	; (800df40 <TIM_OC6_SetConfig+0xbc>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d00b      	beq.n	800defc <TIM_OC6_SetConfig+0x78>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a17      	ldr	r2, [pc, #92]	; (800df44 <TIM_OC6_SetConfig+0xc0>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d007      	beq.n	800defc <TIM_OC6_SetConfig+0x78>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a16      	ldr	r2, [pc, #88]	; (800df48 <TIM_OC6_SetConfig+0xc4>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d003      	beq.n	800defc <TIM_OC6_SetConfig+0x78>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a15      	ldr	r2, [pc, #84]	; (800df4c <TIM_OC6_SetConfig+0xc8>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d109      	bne.n	800df10 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800df02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	695b      	ldr	r3, [r3, #20]
 800df08:	029b      	lsls	r3, r3, #10
 800df0a:	697a      	ldr	r2, [r7, #20]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	697a      	ldr	r2, [r7, #20]
 800df14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685a      	ldr	r2, [r3, #4]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	621a      	str	r2, [r3, #32]
}
 800df2a:	bf00      	nop
 800df2c:	371c      	adds	r7, #28
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	feff8fff 	.word	0xfeff8fff
 800df3c:	40010000 	.word	0x40010000
 800df40:	40010400 	.word	0x40010400
 800df44:	40014000 	.word	0x40014000
 800df48:	40014400 	.word	0x40014400
 800df4c:	40014800 	.word	0x40014800

0800df50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df50:	b480      	push	{r7}
 800df52:	b087      	sub	sp, #28
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6a1b      	ldr	r3, [r3, #32]
 800df60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6a1b      	ldr	r3, [r3, #32]
 800df66:	f023 0201 	bic.w	r2, r3, #1
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	011b      	lsls	r3, r3, #4
 800df80:	693a      	ldr	r2, [r7, #16]
 800df82:	4313      	orrs	r3, r2
 800df84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	f023 030a 	bic.w	r3, r3, #10
 800df8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	4313      	orrs	r3, r2
 800df94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	697a      	ldr	r2, [r7, #20]
 800dfa0:	621a      	str	r2, [r3, #32]
}
 800dfa2:	bf00      	nop
 800dfa4:	371c      	adds	r7, #28
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfae:	b480      	push	{r7}
 800dfb0:	b087      	sub	sp, #28
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6a1b      	ldr	r3, [r3, #32]
 800dfbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	f023 0210 	bic.w	r2, r3, #16
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	699b      	ldr	r3, [r3, #24]
 800dfd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dfd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	031b      	lsls	r3, r3, #12
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dfea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	011b      	lsls	r3, r3, #4
 800dff0:	697a      	ldr	r2, [r7, #20]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	693a      	ldr	r2, [r7, #16]
 800dffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	621a      	str	r2, [r3, #32]
}
 800e002:	bf00      	nop
 800e004:	371c      	adds	r7, #28
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
	...

0800e010 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e010:	b480      	push	{r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	689b      	ldr	r3, [r3, #8]
 800e01e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	4b09      	ldr	r3, [pc, #36]	; (800e048 <TIM_ITRx_SetConfig+0x38>)
 800e024:	4013      	ands	r3, r2
 800e026:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	4313      	orrs	r3, r2
 800e02e:	f043 0307 	orr.w	r3, r3, #7
 800e032:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	609a      	str	r2, [r3, #8]
}
 800e03a:	bf00      	nop
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	ffcfff8f 	.word	0xffcfff8f

0800e04c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b087      	sub	sp, #28
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
 800e058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	021a      	lsls	r2, r3, #8
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	431a      	orrs	r2, r3
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	4313      	orrs	r3, r2
 800e074:	697a      	ldr	r2, [r7, #20]
 800e076:	4313      	orrs	r3, r2
 800e078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	697a      	ldr	r2, [r7, #20]
 800e07e:	609a      	str	r2, [r3, #8]
}
 800e080:	bf00      	nop
 800e082:	371c      	adds	r7, #28
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b087      	sub	sp, #28
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f003 031f 	and.w	r3, r3, #31
 800e09e:	2201      	movs	r2, #1
 800e0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6a1a      	ldr	r2, [r3, #32]
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	43db      	mvns	r3, r3
 800e0ae:	401a      	ands	r2, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6a1a      	ldr	r2, [r3, #32]
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	f003 031f 	and.w	r3, r3, #31
 800e0be:	6879      	ldr	r1, [r7, #4]
 800e0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800e0c4:	431a      	orrs	r2, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	621a      	str	r2, [r3, #32]
}
 800e0ca:	bf00      	nop
 800e0cc:	371c      	adds	r7, #28
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr
	...

0800e0d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d101      	bne.n	800e0f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	e06d      	b.n	800e1cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2202      	movs	r2, #2
 800e0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a30      	ldr	r2, [pc, #192]	; (800e1d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d004      	beq.n	800e124 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a2f      	ldr	r2, [pc, #188]	; (800e1dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d108      	bne.n	800e136 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e12a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	4313      	orrs	r3, r2
 800e134:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e13c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	4313      	orrs	r3, r2
 800e146:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a20      	ldr	r2, [pc, #128]	; (800e1d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d022      	beq.n	800e1a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e162:	d01d      	beq.n	800e1a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a1d      	ldr	r2, [pc, #116]	; (800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d018      	beq.n	800e1a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a1c      	ldr	r2, [pc, #112]	; (800e1e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e174:	4293      	cmp	r3, r2
 800e176:	d013      	beq.n	800e1a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a1a      	ldr	r2, [pc, #104]	; (800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d00e      	beq.n	800e1a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	4a15      	ldr	r2, [pc, #84]	; (800e1dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d009      	beq.n	800e1a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a16      	ldr	r2, [pc, #88]	; (800e1ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d004      	beq.n	800e1a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a15      	ldr	r2, [pc, #84]	; (800e1f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d10c      	bne.n	800e1ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	68ba      	ldr	r2, [r7, #8]
 800e1b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3714      	adds	r7, #20
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	40010000 	.word	0x40010000
 800e1dc:	40010400 	.word	0x40010400
 800e1e0:	40000400 	.word	0x40000400
 800e1e4:	40000800 	.word	0x40000800
 800e1e8:	40000c00 	.word	0x40000c00
 800e1ec:	40001800 	.word	0x40001800
 800e1f0:	40014000 	.word	0x40014000

0800e1f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b085      	sub	sp, #20
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e1fe:	2300      	movs	r3, #0
 800e200:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d101      	bne.n	800e210 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e20c:	2302      	movs	r3, #2
 800e20e:	e065      	b.n	800e2dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	4313      	orrs	r3, r2
 800e224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	689b      	ldr	r3, [r3, #8]
 800e230:	4313      	orrs	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	4313      	orrs	r3, r2
 800e240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4313      	orrs	r3, r2
 800e24e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	695b      	ldr	r3, [r3, #20]
 800e268:	4313      	orrs	r3, r2
 800e26a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e276:	4313      	orrs	r3, r2
 800e278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	699b      	ldr	r3, [r3, #24]
 800e284:	041b      	lsls	r3, r3, #16
 800e286:	4313      	orrs	r3, r2
 800e288:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a16      	ldr	r2, [pc, #88]	; (800e2e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d004      	beq.n	800e29e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a14      	ldr	r2, [pc, #80]	; (800e2ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d115      	bne.n	800e2ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a8:	051b      	lsls	r3, r3, #20
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	69db      	ldr	r3, [r3, #28]
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3714      	adds	r7, #20
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr
 800e2e8:	40010000 	.word	0x40010000
 800e2ec:	40010400 	.word	0x40010400

0800e2f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2f8:	bf00      	nop
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e30c:	bf00      	nop
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e320:	bf00      	nop
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d101      	bne.n	800e33e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	e042      	b.n	800e3c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e344:	2b00      	cmp	r3, #0
 800e346:	d106      	bne.n	800e356 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7f4 fb85 	bl	8002a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2224      	movs	r2, #36	; 0x24
 800e35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f022 0201 	bic.w	r2, r2, #1
 800e36c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f001 fa44 	bl	800f804 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fcd9 	bl	800ed34 <UART_SetConfig>
 800e382:	4603      	mov	r3, r0
 800e384:	2b01      	cmp	r3, #1
 800e386:	d101      	bne.n	800e38c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	e01b      	b.n	800e3c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	685a      	ldr	r2, [r3, #4]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e39a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	689a      	ldr	r2, [r3, #8]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e3aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f042 0201 	orr.w	r2, r2, #1
 800e3ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f001 fac3 	bl	800f948 <UART_CheckIdleState>
 800e3c2:	4603      	mov	r3, r0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b08a      	sub	sp, #40	; 0x28
 800e3d0:	af02      	add	r7, sp, #8
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	603b      	str	r3, [r7, #0]
 800e3d8:	4613      	mov	r3, r2
 800e3da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3e2:	2b20      	cmp	r3, #32
 800e3e4:	d17b      	bne.n	800e4de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d002      	beq.n	800e3f2 <HAL_UART_Transmit+0x26>
 800e3ec:	88fb      	ldrh	r3, [r7, #6]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d101      	bne.n	800e3f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e074      	b.n	800e4e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2221      	movs	r2, #33	; 0x21
 800e402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e406:	f7f4 fe65 	bl	80030d4 <HAL_GetTick>
 800e40a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	88fa      	ldrh	r2, [r7, #6]
 800e410:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	88fa      	ldrh	r2, [r7, #6]
 800e418:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e424:	d108      	bne.n	800e438 <HAL_UART_Transmit+0x6c>
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	691b      	ldr	r3, [r3, #16]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d104      	bne.n	800e438 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e42e:	2300      	movs	r3, #0
 800e430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	61bb      	str	r3, [r7, #24]
 800e436:	e003      	b.n	800e440 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e43c:	2300      	movs	r3, #0
 800e43e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e440:	e030      	b.n	800e4a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	9300      	str	r3, [sp, #0]
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	2200      	movs	r2, #0
 800e44a:	2180      	movs	r1, #128	; 0x80
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	f001 fb25 	bl	800fa9c <UART_WaitOnFlagUntilTimeout>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d005      	beq.n	800e464 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2220      	movs	r2, #32
 800e45c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e460:	2303      	movs	r3, #3
 800e462:	e03d      	b.n	800e4e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d10b      	bne.n	800e482 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	881b      	ldrh	r3, [r3, #0]
 800e46e:	461a      	mov	r2, r3
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e478:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	3302      	adds	r3, #2
 800e47e:	61bb      	str	r3, [r7, #24]
 800e480:	e007      	b.n	800e492 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	781a      	ldrb	r2, [r3, #0]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e48c:	69fb      	ldr	r3, [r7, #28]
 800e48e:	3301      	adds	r3, #1
 800e490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e498:	b29b      	uxth	r3, r3
 800e49a:	3b01      	subs	r3, #1
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1c8      	bne.n	800e442 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	2140      	movs	r1, #64	; 0x40
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f001 faee 	bl	800fa9c <UART_WaitOnFlagUntilTimeout>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d005      	beq.n	800e4d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2220      	movs	r2, #32
 800e4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e4ce:	2303      	movs	r3, #3
 800e4d0:	e006      	b.n	800e4e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2220      	movs	r2, #32
 800e4d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e000      	b.n	800e4e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e4de:	2302      	movs	r3, #2
  }
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3720      	adds	r7, #32
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b08a      	sub	sp, #40	; 0x28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4fc:	2b20      	cmp	r3, #32
 800e4fe:	d137      	bne.n	800e570 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d002      	beq.n	800e50c <HAL_UART_Receive_IT+0x24>
 800e506:	88fb      	ldrh	r3, [r7, #6]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e50c:	2301      	movs	r3, #1
 800e50e:	e030      	b.n	800e572 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a18      	ldr	r2, [pc, #96]	; (800e57c <HAL_UART_Receive_IT+0x94>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d01f      	beq.n	800e560 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d018      	beq.n	800e560 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	e853 3f00 	ldrex	r3, [r3]
 800e53a:	613b      	str	r3, [r7, #16]
   return(result);
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e542:	627b      	str	r3, [r7, #36]	; 0x24
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	461a      	mov	r2, r3
 800e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54c:	623b      	str	r3, [r7, #32]
 800e54e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e550:	69f9      	ldr	r1, [r7, #28]
 800e552:	6a3a      	ldr	r2, [r7, #32]
 800e554:	e841 2300 	strex	r3, r2, [r1]
 800e558:	61bb      	str	r3, [r7, #24]
   return(result);
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1e6      	bne.n	800e52e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e560:	88fb      	ldrh	r3, [r7, #6]
 800e562:	461a      	mov	r2, r3
 800e564:	68b9      	ldr	r1, [r7, #8]
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f001 fb06 	bl	800fb78 <UART_Start_Receive_IT>
 800e56c:	4603      	mov	r3, r0
 800e56e:	e000      	b.n	800e572 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e570:	2302      	movs	r3, #2
  }
}
 800e572:	4618      	mov	r0, r3
 800e574:	3728      	adds	r7, #40	; 0x28
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	58000c00 	.word	0x58000c00

0800e580 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b0ba      	sub	sp, #232	; 0xe8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	69db      	ldr	r3, [r3, #28]
 800e58e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e5a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e5aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800e5ae:	4013      	ands	r3, r2
 800e5b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e5b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d11b      	bne.n	800e5f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5c0:	f003 0320 	and.w	r3, r3, #32
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d015      	beq.n	800e5f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e5c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5cc:	f003 0320 	and.w	r3, r3, #32
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d105      	bne.n	800e5e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d009      	beq.n	800e5f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f000 8377 	beq.w	800ecd8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	4798      	blx	r3
      }
      return;
 800e5f2:	e371      	b.n	800ecd8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e5f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f000 8123 	beq.w	800e844 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e5fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e602:	4b8d      	ldr	r3, [pc, #564]	; (800e838 <HAL_UART_IRQHandler+0x2b8>)
 800e604:	4013      	ands	r3, r2
 800e606:	2b00      	cmp	r3, #0
 800e608:	d106      	bne.n	800e618 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e60a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e60e:	4b8b      	ldr	r3, [pc, #556]	; (800e83c <HAL_UART_IRQHandler+0x2bc>)
 800e610:	4013      	ands	r3, r2
 800e612:	2b00      	cmp	r3, #0
 800e614:	f000 8116 	beq.w	800e844 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	2b00      	cmp	r3, #0
 800e622:	d011      	beq.n	800e648 <HAL_UART_IRQHandler+0xc8>
 800e624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00b      	beq.n	800e648 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2201      	movs	r2, #1
 800e636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e63e:	f043 0201 	orr.w	r2, r3, #1
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e64c:	f003 0302 	and.w	r3, r3, #2
 800e650:	2b00      	cmp	r3, #0
 800e652:	d011      	beq.n	800e678 <HAL_UART_IRQHandler+0xf8>
 800e654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e658:	f003 0301 	and.w	r3, r3, #1
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00b      	beq.n	800e678 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2202      	movs	r2, #2
 800e666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e66e:	f043 0204 	orr.w	r2, r3, #4
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e67c:	f003 0304 	and.w	r3, r3, #4
 800e680:	2b00      	cmp	r3, #0
 800e682:	d011      	beq.n	800e6a8 <HAL_UART_IRQHandler+0x128>
 800e684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e688:	f003 0301 	and.w	r3, r3, #1
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00b      	beq.n	800e6a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2204      	movs	r2, #4
 800e696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e69e:	f043 0202 	orr.w	r2, r3, #2
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ac:	f003 0308 	and.w	r3, r3, #8
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d017      	beq.n	800e6e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6b8:	f003 0320 	and.w	r3, r3, #32
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d105      	bne.n	800e6cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e6c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e6c4:	4b5c      	ldr	r3, [pc, #368]	; (800e838 <HAL_UART_IRQHandler+0x2b8>)
 800e6c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00b      	beq.n	800e6e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2208      	movs	r2, #8
 800e6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6da:	f043 0208 	orr.w	r2, r3, #8
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d012      	beq.n	800e716 <HAL_UART_IRQHandler+0x196>
 800e6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00c      	beq.n	800e716 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e70c:	f043 0220 	orr.w	r2, r3, #32
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	f000 82dd 	beq.w	800ecdc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e726:	f003 0320 	and.w	r3, r3, #32
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d013      	beq.n	800e756 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e732:	f003 0320 	and.w	r3, r3, #32
 800e736:	2b00      	cmp	r3, #0
 800e738:	d105      	bne.n	800e746 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e73a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e73e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e742:	2b00      	cmp	r3, #0
 800e744:	d007      	beq.n	800e756 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d003      	beq.n	800e756 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e75c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e76a:	2b40      	cmp	r3, #64	; 0x40
 800e76c:	d005      	beq.n	800e77a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e76e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e772:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e776:	2b00      	cmp	r3, #0
 800e778:	d054      	beq.n	800e824 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f001 fb1e 	bl	800fdbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e78a:	2b40      	cmp	r3, #64	; 0x40
 800e78c:	d146      	bne.n	800e81c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	3308      	adds	r3, #8
 800e794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e79c:	e853 3f00 	ldrex	r3, [r3]
 800e7a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e7a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e7a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3308      	adds	r3, #8
 800e7b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e7ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e7be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e7c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e7ca:	e841 2300 	strex	r3, r2, [r1]
 800e7ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e7d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1d9      	bne.n	800e78e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d017      	beq.n	800e814 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7ea:	4a15      	ldr	r2, [pc, #84]	; (800e840 <HAL_UART_IRQHandler+0x2c0>)
 800e7ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7f7 fe9d 	bl	8006534 <HAL_DMA_Abort_IT>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d019      	beq.n	800e834 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e80e:	4610      	mov	r0, r2
 800e810:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e812:	e00f      	b.n	800e834 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fa77 	bl	800ed08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e81a:	e00b      	b.n	800e834 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 fa73 	bl	800ed08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e822:	e007      	b.n	800e834 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fa6f 	bl	800ed08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e832:	e253      	b.n	800ecdc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e834:	bf00      	nop
    return;
 800e836:	e251      	b.n	800ecdc <HAL_UART_IRQHandler+0x75c>
 800e838:	10000001 	.word	0x10000001
 800e83c:	04000120 	.word	0x04000120
 800e840:	0800fe89 	.word	0x0800fe89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e848:	2b01      	cmp	r3, #1
 800e84a:	f040 81e7 	bne.w	800ec1c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e84e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e852:	f003 0310 	and.w	r3, r3, #16
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 81e0 	beq.w	800ec1c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e860:	f003 0310 	and.w	r3, r3, #16
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 81d9 	beq.w	800ec1c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2210      	movs	r2, #16
 800e870:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e87c:	2b40      	cmp	r3, #64	; 0x40
 800e87e:	f040 8151 	bne.w	800eb24 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4a96      	ldr	r2, [pc, #600]	; (800eae4 <HAL_UART_IRQHandler+0x564>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d068      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a93      	ldr	r2, [pc, #588]	; (800eae8 <HAL_UART_IRQHandler+0x568>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d061      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4a91      	ldr	r2, [pc, #580]	; (800eaec <HAL_UART_IRQHandler+0x56c>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d05a      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a8e      	ldr	r2, [pc, #568]	; (800eaf0 <HAL_UART_IRQHandler+0x570>)
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	d053      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	4a8c      	ldr	r2, [pc, #560]	; (800eaf4 <HAL_UART_IRQHandler+0x574>)
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d04c      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a89      	ldr	r2, [pc, #548]	; (800eaf8 <HAL_UART_IRQHandler+0x578>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d045      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a87      	ldr	r2, [pc, #540]	; (800eafc <HAL_UART_IRQHandler+0x57c>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d03e      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a84      	ldr	r2, [pc, #528]	; (800eb00 <HAL_UART_IRQHandler+0x580>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d037      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a82      	ldr	r2, [pc, #520]	; (800eb04 <HAL_UART_IRQHandler+0x584>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d030      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4a7f      	ldr	r2, [pc, #508]	; (800eb08 <HAL_UART_IRQHandler+0x588>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d029      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4a7d      	ldr	r2, [pc, #500]	; (800eb0c <HAL_UART_IRQHandler+0x58c>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d022      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a7a      	ldr	r2, [pc, #488]	; (800eb10 <HAL_UART_IRQHandler+0x590>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d01b      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a78      	ldr	r2, [pc, #480]	; (800eb14 <HAL_UART_IRQHandler+0x594>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d014      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a75      	ldr	r2, [pc, #468]	; (800eb18 <HAL_UART_IRQHandler+0x598>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d00d      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a73      	ldr	r2, [pc, #460]	; (800eb1c <HAL_UART_IRQHandler+0x59c>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d006      	beq.n	800e962 <HAL_UART_IRQHandler+0x3e2>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a70      	ldr	r2, [pc, #448]	; (800eb20 <HAL_UART_IRQHandler+0x5a0>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d106      	bne.n	800e970 <HAL_UART_IRQHandler+0x3f0>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	e005      	b.n	800e97c <HAL_UART_IRQHandler+0x3fc>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e984:	2b00      	cmp	r3, #0
 800e986:	f000 81ab 	beq.w	800ece0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e990:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e994:	429a      	cmp	r2, r3
 800e996:	f080 81a3 	bcs.w	800ece0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e9a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9aa:	69db      	ldr	r3, [r3, #28]
 800e9ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9b0:	f000 8087 	beq.w	800eac2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e9c0:	e853 3f00 	ldrex	r3, [r3]
 800e9c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e9c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e9cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e9de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e9e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e9ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e9ee:	e841 2300 	strex	r3, r2, [r1]
 800e9f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e9f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1da      	bne.n	800e9b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	3308      	adds	r3, #8
 800ea04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea08:	e853 3f00 	ldrex	r3, [r3]
 800ea0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ea0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea10:	f023 0301 	bic.w	r3, r3, #1
 800ea14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ea22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ea26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ea2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ea2e:	e841 2300 	strex	r3, r2, [r1]
 800ea32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ea34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d1e1      	bne.n	800e9fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	3308      	adds	r3, #8
 800ea40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea44:	e853 3f00 	ldrex	r3, [r3]
 800ea48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ea4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	3308      	adds	r3, #8
 800ea5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ea5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ea60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ea64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ea66:	e841 2300 	strex	r3, r2, [r1]
 800ea6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ea6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1e3      	bne.n	800ea3a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2220      	movs	r2, #32
 800ea76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea88:	e853 3f00 	ldrex	r3, [r3]
 800ea8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea90:	f023 0310 	bic.w	r3, r3, #16
 800ea94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eaa2:	65bb      	str	r3, [r7, #88]	; 0x58
 800eaa4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eaa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eaaa:	e841 2300 	strex	r3, r2, [r1]
 800eaae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1e4      	bne.n	800ea80 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7f7 fa1b 	bl	8005ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2202      	movs	r2, #2
 800eac6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	b29b      	uxth	r3, r3
 800eada:	4619      	mov	r1, r3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 f91d 	bl	800ed1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eae2:	e0fd      	b.n	800ece0 <HAL_UART_IRQHandler+0x760>
 800eae4:	40020010 	.word	0x40020010
 800eae8:	40020028 	.word	0x40020028
 800eaec:	40020040 	.word	0x40020040
 800eaf0:	40020058 	.word	0x40020058
 800eaf4:	40020070 	.word	0x40020070
 800eaf8:	40020088 	.word	0x40020088
 800eafc:	400200a0 	.word	0x400200a0
 800eb00:	400200b8 	.word	0x400200b8
 800eb04:	40020410 	.word	0x40020410
 800eb08:	40020428 	.word	0x40020428
 800eb0c:	40020440 	.word	0x40020440
 800eb10:	40020458 	.word	0x40020458
 800eb14:	40020470 	.word	0x40020470
 800eb18:	40020488 	.word	0x40020488
 800eb1c:	400204a0 	.word	0x400204a0
 800eb20:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	1ad3      	subs	r3, r2, r3
 800eb34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f000 80cf 	beq.w	800ece4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800eb46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f000 80ca 	beq.w	800ece4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	e853 3f00 	ldrex	r3, [r3]
 800eb5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eb5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eb72:	647b      	str	r3, [r7, #68]	; 0x44
 800eb74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb7a:	e841 2300 	strex	r3, r2, [r1]
 800eb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1e4      	bne.n	800eb50 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	3308      	adds	r3, #8
 800eb8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb90:	e853 3f00 	ldrex	r3, [r3]
 800eb94:	623b      	str	r3, [r7, #32]
   return(result);
 800eb96:	6a3a      	ldr	r2, [r7, #32]
 800eb98:	4b55      	ldr	r3, [pc, #340]	; (800ecf0 <HAL_UART_IRQHandler+0x770>)
 800eb9a:	4013      	ands	r3, r2
 800eb9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	3308      	adds	r3, #8
 800eba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ebaa:	633a      	str	r2, [r7, #48]	; 0x30
 800ebac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebb2:	e841 2300 	strex	r3, r2, [r1]
 800ebb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1e3      	bne.n	800eb86 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	e853 3f00 	ldrex	r3, [r3]
 800ebde:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f023 0310 	bic.w	r3, r3, #16
 800ebe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ebf4:	61fb      	str	r3, [r7, #28]
 800ebf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf8:	69b9      	ldr	r1, [r7, #24]
 800ebfa:	69fa      	ldr	r2, [r7, #28]
 800ebfc:	e841 2300 	strex	r3, r2, [r1]
 800ec00:	617b      	str	r3, [r7, #20]
   return(result);
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d1e4      	bne.n	800ebd2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ec0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ec12:	4619      	mov	r1, r3
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f881 	bl	800ed1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ec1a:	e063      	b.n	800ece4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ec1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00e      	beq.n	800ec46 <HAL_UART_IRQHandler+0x6c6>
 800ec28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d008      	beq.n	800ec46 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ec3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f001 fe80 	bl	8010944 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec44:	e051      	b.n	800ecea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ec46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d014      	beq.n	800ec7c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ec52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ec5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d008      	beq.n	800ec7c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d03a      	beq.n	800ece8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	4798      	blx	r3
    }
    return;
 800ec7a:	e035      	b.n	800ece8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d009      	beq.n	800ec9c <HAL_UART_IRQHandler+0x71c>
 800ec88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d003      	beq.n	800ec9c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f001 f90d 	bl	800feb4 <UART_EndTransmit_IT>
    return;
 800ec9a:	e026      	b.n	800ecea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eca0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d009      	beq.n	800ecbc <HAL_UART_IRQHandler+0x73c>
 800eca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d003      	beq.n	800ecbc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f001 fe59 	bl	801096c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ecba:	e016      	b.n	800ecea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ecbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d010      	beq.n	800ecea <HAL_UART_IRQHandler+0x76a>
 800ecc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	da0c      	bge.n	800ecea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f001 fe41 	bl	8010958 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ecd6:	e008      	b.n	800ecea <HAL_UART_IRQHandler+0x76a>
      return;
 800ecd8:	bf00      	nop
 800ecda:	e006      	b.n	800ecea <HAL_UART_IRQHandler+0x76a>
    return;
 800ecdc:	bf00      	nop
 800ecde:	e004      	b.n	800ecea <HAL_UART_IRQHandler+0x76a>
      return;
 800ece0:	bf00      	nop
 800ece2:	e002      	b.n	800ecea <HAL_UART_IRQHandler+0x76a>
      return;
 800ece4:	bf00      	nop
 800ece6:	e000      	b.n	800ecea <HAL_UART_IRQHandler+0x76a>
    return;
 800ece8:	bf00      	nop
  }
}
 800ecea:	37e8      	adds	r7, #232	; 0xe8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	effffffe 	.word	0xeffffffe

0800ecf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	460b      	mov	r3, r1
 800ed26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed38:	b092      	sub	sp, #72	; 0x48
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	689a      	ldr	r2, [r3, #8]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	691b      	ldr	r3, [r3, #16]
 800ed4c:	431a      	orrs	r2, r3
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	431a      	orrs	r2, r3
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	69db      	ldr	r3, [r3, #28]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	4bbe      	ldr	r3, [pc, #760]	; (800f05c <UART_SetConfig+0x328>)
 800ed64:	4013      	ands	r3, r2
 800ed66:	697a      	ldr	r2, [r7, #20]
 800ed68:	6812      	ldr	r2, [r2, #0]
 800ed6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed6c:	430b      	orrs	r3, r1
 800ed6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	68da      	ldr	r2, [r3, #12]
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	430a      	orrs	r2, r1
 800ed84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	699b      	ldr	r3, [r3, #24]
 800ed8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	4ab3      	ldr	r2, [pc, #716]	; (800f060 <UART_SetConfig+0x32c>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d004      	beq.n	800eda0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	6a1b      	ldr	r3, [r3, #32]
 800ed9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	689a      	ldr	r2, [r3, #8]
 800eda6:	4baf      	ldr	r3, [pc, #700]	; (800f064 <UART_SetConfig+0x330>)
 800eda8:	4013      	ands	r3, r2
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	6812      	ldr	r2, [r2, #0]
 800edae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edb0:	430b      	orrs	r3, r1
 800edb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edba:	f023 010f 	bic.w	r1, r3, #15
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	430a      	orrs	r2, r1
 800edc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4aa6      	ldr	r2, [pc, #664]	; (800f068 <UART_SetConfig+0x334>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d177      	bne.n	800eec4 <UART_SetConfig+0x190>
 800edd4:	4ba5      	ldr	r3, [pc, #660]	; (800f06c <UART_SetConfig+0x338>)
 800edd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eddc:	2b28      	cmp	r3, #40	; 0x28
 800edde:	d86d      	bhi.n	800eebc <UART_SetConfig+0x188>
 800ede0:	a201      	add	r2, pc, #4	; (adr r2, 800ede8 <UART_SetConfig+0xb4>)
 800ede2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede6:	bf00      	nop
 800ede8:	0800ee8d 	.word	0x0800ee8d
 800edec:	0800eebd 	.word	0x0800eebd
 800edf0:	0800eebd 	.word	0x0800eebd
 800edf4:	0800eebd 	.word	0x0800eebd
 800edf8:	0800eebd 	.word	0x0800eebd
 800edfc:	0800eebd 	.word	0x0800eebd
 800ee00:	0800eebd 	.word	0x0800eebd
 800ee04:	0800eebd 	.word	0x0800eebd
 800ee08:	0800ee95 	.word	0x0800ee95
 800ee0c:	0800eebd 	.word	0x0800eebd
 800ee10:	0800eebd 	.word	0x0800eebd
 800ee14:	0800eebd 	.word	0x0800eebd
 800ee18:	0800eebd 	.word	0x0800eebd
 800ee1c:	0800eebd 	.word	0x0800eebd
 800ee20:	0800eebd 	.word	0x0800eebd
 800ee24:	0800eebd 	.word	0x0800eebd
 800ee28:	0800ee9d 	.word	0x0800ee9d
 800ee2c:	0800eebd 	.word	0x0800eebd
 800ee30:	0800eebd 	.word	0x0800eebd
 800ee34:	0800eebd 	.word	0x0800eebd
 800ee38:	0800eebd 	.word	0x0800eebd
 800ee3c:	0800eebd 	.word	0x0800eebd
 800ee40:	0800eebd 	.word	0x0800eebd
 800ee44:	0800eebd 	.word	0x0800eebd
 800ee48:	0800eea5 	.word	0x0800eea5
 800ee4c:	0800eebd 	.word	0x0800eebd
 800ee50:	0800eebd 	.word	0x0800eebd
 800ee54:	0800eebd 	.word	0x0800eebd
 800ee58:	0800eebd 	.word	0x0800eebd
 800ee5c:	0800eebd 	.word	0x0800eebd
 800ee60:	0800eebd 	.word	0x0800eebd
 800ee64:	0800eebd 	.word	0x0800eebd
 800ee68:	0800eead 	.word	0x0800eead
 800ee6c:	0800eebd 	.word	0x0800eebd
 800ee70:	0800eebd 	.word	0x0800eebd
 800ee74:	0800eebd 	.word	0x0800eebd
 800ee78:	0800eebd 	.word	0x0800eebd
 800ee7c:	0800eebd 	.word	0x0800eebd
 800ee80:	0800eebd 	.word	0x0800eebd
 800ee84:	0800eebd 	.word	0x0800eebd
 800ee88:	0800eeb5 	.word	0x0800eeb5
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee92:	e222      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ee94:	2304      	movs	r3, #4
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9a:	e21e      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ee9c:	2308      	movs	r3, #8
 800ee9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eea2:	e21a      	b.n	800f2da <UART_SetConfig+0x5a6>
 800eea4:	2310      	movs	r3, #16
 800eea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeaa:	e216      	b.n	800f2da <UART_SetConfig+0x5a6>
 800eeac:	2320      	movs	r3, #32
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb2:	e212      	b.n	800f2da <UART_SetConfig+0x5a6>
 800eeb4:	2340      	movs	r3, #64	; 0x40
 800eeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeba:	e20e      	b.n	800f2da <UART_SetConfig+0x5a6>
 800eebc:	2380      	movs	r3, #128	; 0x80
 800eebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec2:	e20a      	b.n	800f2da <UART_SetConfig+0x5a6>
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a69      	ldr	r2, [pc, #420]	; (800f070 <UART_SetConfig+0x33c>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d130      	bne.n	800ef30 <UART_SetConfig+0x1fc>
 800eece:	4b67      	ldr	r3, [pc, #412]	; (800f06c <UART_SetConfig+0x338>)
 800eed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eed2:	f003 0307 	and.w	r3, r3, #7
 800eed6:	2b05      	cmp	r3, #5
 800eed8:	d826      	bhi.n	800ef28 <UART_SetConfig+0x1f4>
 800eeda:	a201      	add	r2, pc, #4	; (adr r2, 800eee0 <UART_SetConfig+0x1ac>)
 800eedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee0:	0800eef9 	.word	0x0800eef9
 800eee4:	0800ef01 	.word	0x0800ef01
 800eee8:	0800ef09 	.word	0x0800ef09
 800eeec:	0800ef11 	.word	0x0800ef11
 800eef0:	0800ef19 	.word	0x0800ef19
 800eef4:	0800ef21 	.word	0x0800ef21
 800eef8:	2300      	movs	r3, #0
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefe:	e1ec      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef00:	2304      	movs	r3, #4
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef06:	e1e8      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef08:	2308      	movs	r3, #8
 800ef0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0e:	e1e4      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef10:	2310      	movs	r3, #16
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef16:	e1e0      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef18:	2320      	movs	r3, #32
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1e:	e1dc      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef20:	2340      	movs	r3, #64	; 0x40
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e1d8      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef28:	2380      	movs	r3, #128	; 0x80
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2e:	e1d4      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	4a4f      	ldr	r2, [pc, #316]	; (800f074 <UART_SetConfig+0x340>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d130      	bne.n	800ef9c <UART_SetConfig+0x268>
 800ef3a:	4b4c      	ldr	r3, [pc, #304]	; (800f06c <UART_SetConfig+0x338>)
 800ef3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef3e:	f003 0307 	and.w	r3, r3, #7
 800ef42:	2b05      	cmp	r3, #5
 800ef44:	d826      	bhi.n	800ef94 <UART_SetConfig+0x260>
 800ef46:	a201      	add	r2, pc, #4	; (adr r2, 800ef4c <UART_SetConfig+0x218>)
 800ef48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef4c:	0800ef65 	.word	0x0800ef65
 800ef50:	0800ef6d 	.word	0x0800ef6d
 800ef54:	0800ef75 	.word	0x0800ef75
 800ef58:	0800ef7d 	.word	0x0800ef7d
 800ef5c:	0800ef85 	.word	0x0800ef85
 800ef60:	0800ef8d 	.word	0x0800ef8d
 800ef64:	2300      	movs	r3, #0
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6a:	e1b6      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef6c:	2304      	movs	r3, #4
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef72:	e1b2      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef74:	2308      	movs	r3, #8
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7a:	e1ae      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef7c:	2310      	movs	r3, #16
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef82:	e1aa      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef84:	2320      	movs	r3, #32
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8a:	e1a6      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef8c:	2340      	movs	r3, #64	; 0x40
 800ef8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef92:	e1a2      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef94:	2380      	movs	r3, #128	; 0x80
 800ef96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef9a:	e19e      	b.n	800f2da <UART_SetConfig+0x5a6>
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4a35      	ldr	r2, [pc, #212]	; (800f078 <UART_SetConfig+0x344>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d130      	bne.n	800f008 <UART_SetConfig+0x2d4>
 800efa6:	4b31      	ldr	r3, [pc, #196]	; (800f06c <UART_SetConfig+0x338>)
 800efa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efaa:	f003 0307 	and.w	r3, r3, #7
 800efae:	2b05      	cmp	r3, #5
 800efb0:	d826      	bhi.n	800f000 <UART_SetConfig+0x2cc>
 800efb2:	a201      	add	r2, pc, #4	; (adr r2, 800efb8 <UART_SetConfig+0x284>)
 800efb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb8:	0800efd1 	.word	0x0800efd1
 800efbc:	0800efd9 	.word	0x0800efd9
 800efc0:	0800efe1 	.word	0x0800efe1
 800efc4:	0800efe9 	.word	0x0800efe9
 800efc8:	0800eff1 	.word	0x0800eff1
 800efcc:	0800eff9 	.word	0x0800eff9
 800efd0:	2300      	movs	r3, #0
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd6:	e180      	b.n	800f2da <UART_SetConfig+0x5a6>
 800efd8:	2304      	movs	r3, #4
 800efda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efde:	e17c      	b.n	800f2da <UART_SetConfig+0x5a6>
 800efe0:	2308      	movs	r3, #8
 800efe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe6:	e178      	b.n	800f2da <UART_SetConfig+0x5a6>
 800efe8:	2310      	movs	r3, #16
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efee:	e174      	b.n	800f2da <UART_SetConfig+0x5a6>
 800eff0:	2320      	movs	r3, #32
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff6:	e170      	b.n	800f2da <UART_SetConfig+0x5a6>
 800eff8:	2340      	movs	r3, #64	; 0x40
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effe:	e16c      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f000:	2380      	movs	r3, #128	; 0x80
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f006:	e168      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a1b      	ldr	r2, [pc, #108]	; (800f07c <UART_SetConfig+0x348>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d142      	bne.n	800f098 <UART_SetConfig+0x364>
 800f012:	4b16      	ldr	r3, [pc, #88]	; (800f06c <UART_SetConfig+0x338>)
 800f014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f016:	f003 0307 	and.w	r3, r3, #7
 800f01a:	2b05      	cmp	r3, #5
 800f01c:	d838      	bhi.n	800f090 <UART_SetConfig+0x35c>
 800f01e:	a201      	add	r2, pc, #4	; (adr r2, 800f024 <UART_SetConfig+0x2f0>)
 800f020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f024:	0800f03d 	.word	0x0800f03d
 800f028:	0800f045 	.word	0x0800f045
 800f02c:	0800f04d 	.word	0x0800f04d
 800f030:	0800f055 	.word	0x0800f055
 800f034:	0800f081 	.word	0x0800f081
 800f038:	0800f089 	.word	0x0800f089
 800f03c:	2300      	movs	r3, #0
 800f03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f042:	e14a      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f044:	2304      	movs	r3, #4
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04a:	e146      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f04c:	2308      	movs	r3, #8
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f052:	e142      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f054:	2310      	movs	r3, #16
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e13e      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f05c:	cfff69f3 	.word	0xcfff69f3
 800f060:	58000c00 	.word	0x58000c00
 800f064:	11fff4ff 	.word	0x11fff4ff
 800f068:	40011000 	.word	0x40011000
 800f06c:	58024400 	.word	0x58024400
 800f070:	40004400 	.word	0x40004400
 800f074:	40004800 	.word	0x40004800
 800f078:	40004c00 	.word	0x40004c00
 800f07c:	40005000 	.word	0x40005000
 800f080:	2320      	movs	r3, #32
 800f082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f086:	e128      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f088:	2340      	movs	r3, #64	; 0x40
 800f08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08e:	e124      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f090:	2380      	movs	r3, #128	; 0x80
 800f092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f096:	e120      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4acb      	ldr	r2, [pc, #812]	; (800f3cc <UART_SetConfig+0x698>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d176      	bne.n	800f190 <UART_SetConfig+0x45c>
 800f0a2:	4bcb      	ldr	r3, [pc, #812]	; (800f3d0 <UART_SetConfig+0x69c>)
 800f0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f0aa:	2b28      	cmp	r3, #40	; 0x28
 800f0ac:	d86c      	bhi.n	800f188 <UART_SetConfig+0x454>
 800f0ae:	a201      	add	r2, pc, #4	; (adr r2, 800f0b4 <UART_SetConfig+0x380>)
 800f0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b4:	0800f159 	.word	0x0800f159
 800f0b8:	0800f189 	.word	0x0800f189
 800f0bc:	0800f189 	.word	0x0800f189
 800f0c0:	0800f189 	.word	0x0800f189
 800f0c4:	0800f189 	.word	0x0800f189
 800f0c8:	0800f189 	.word	0x0800f189
 800f0cc:	0800f189 	.word	0x0800f189
 800f0d0:	0800f189 	.word	0x0800f189
 800f0d4:	0800f161 	.word	0x0800f161
 800f0d8:	0800f189 	.word	0x0800f189
 800f0dc:	0800f189 	.word	0x0800f189
 800f0e0:	0800f189 	.word	0x0800f189
 800f0e4:	0800f189 	.word	0x0800f189
 800f0e8:	0800f189 	.word	0x0800f189
 800f0ec:	0800f189 	.word	0x0800f189
 800f0f0:	0800f189 	.word	0x0800f189
 800f0f4:	0800f169 	.word	0x0800f169
 800f0f8:	0800f189 	.word	0x0800f189
 800f0fc:	0800f189 	.word	0x0800f189
 800f100:	0800f189 	.word	0x0800f189
 800f104:	0800f189 	.word	0x0800f189
 800f108:	0800f189 	.word	0x0800f189
 800f10c:	0800f189 	.word	0x0800f189
 800f110:	0800f189 	.word	0x0800f189
 800f114:	0800f171 	.word	0x0800f171
 800f118:	0800f189 	.word	0x0800f189
 800f11c:	0800f189 	.word	0x0800f189
 800f120:	0800f189 	.word	0x0800f189
 800f124:	0800f189 	.word	0x0800f189
 800f128:	0800f189 	.word	0x0800f189
 800f12c:	0800f189 	.word	0x0800f189
 800f130:	0800f189 	.word	0x0800f189
 800f134:	0800f179 	.word	0x0800f179
 800f138:	0800f189 	.word	0x0800f189
 800f13c:	0800f189 	.word	0x0800f189
 800f140:	0800f189 	.word	0x0800f189
 800f144:	0800f189 	.word	0x0800f189
 800f148:	0800f189 	.word	0x0800f189
 800f14c:	0800f189 	.word	0x0800f189
 800f150:	0800f189 	.word	0x0800f189
 800f154:	0800f181 	.word	0x0800f181
 800f158:	2301      	movs	r3, #1
 800f15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15e:	e0bc      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f160:	2304      	movs	r3, #4
 800f162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f166:	e0b8      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f168:	2308      	movs	r3, #8
 800f16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16e:	e0b4      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f170:	2310      	movs	r3, #16
 800f172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f176:	e0b0      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f178:	2320      	movs	r3, #32
 800f17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17e:	e0ac      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f180:	2340      	movs	r3, #64	; 0x40
 800f182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f186:	e0a8      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f188:	2380      	movs	r3, #128	; 0x80
 800f18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f18e:	e0a4      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a8f      	ldr	r2, [pc, #572]	; (800f3d4 <UART_SetConfig+0x6a0>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d130      	bne.n	800f1fc <UART_SetConfig+0x4c8>
 800f19a:	4b8d      	ldr	r3, [pc, #564]	; (800f3d0 <UART_SetConfig+0x69c>)
 800f19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f19e:	f003 0307 	and.w	r3, r3, #7
 800f1a2:	2b05      	cmp	r3, #5
 800f1a4:	d826      	bhi.n	800f1f4 <UART_SetConfig+0x4c0>
 800f1a6:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <UART_SetConfig+0x478>)
 800f1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ac:	0800f1c5 	.word	0x0800f1c5
 800f1b0:	0800f1cd 	.word	0x0800f1cd
 800f1b4:	0800f1d5 	.word	0x0800f1d5
 800f1b8:	0800f1dd 	.word	0x0800f1dd
 800f1bc:	0800f1e5 	.word	0x0800f1e5
 800f1c0:	0800f1ed 	.word	0x0800f1ed
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ca:	e086      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f1cc:	2304      	movs	r3, #4
 800f1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d2:	e082      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f1d4:	2308      	movs	r3, #8
 800f1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1da:	e07e      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f1dc:	2310      	movs	r3, #16
 800f1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e2:	e07a      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f1e4:	2320      	movs	r3, #32
 800f1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ea:	e076      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f1ec:	2340      	movs	r3, #64	; 0x40
 800f1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1f2:	e072      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f1f4:	2380      	movs	r3, #128	; 0x80
 800f1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1fa:	e06e      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4a75      	ldr	r2, [pc, #468]	; (800f3d8 <UART_SetConfig+0x6a4>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d130      	bne.n	800f268 <UART_SetConfig+0x534>
 800f206:	4b72      	ldr	r3, [pc, #456]	; (800f3d0 <UART_SetConfig+0x69c>)
 800f208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f20a:	f003 0307 	and.w	r3, r3, #7
 800f20e:	2b05      	cmp	r3, #5
 800f210:	d826      	bhi.n	800f260 <UART_SetConfig+0x52c>
 800f212:	a201      	add	r2, pc, #4	; (adr r2, 800f218 <UART_SetConfig+0x4e4>)
 800f214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f218:	0800f231 	.word	0x0800f231
 800f21c:	0800f239 	.word	0x0800f239
 800f220:	0800f241 	.word	0x0800f241
 800f224:	0800f249 	.word	0x0800f249
 800f228:	0800f251 	.word	0x0800f251
 800f22c:	0800f259 	.word	0x0800f259
 800f230:	2300      	movs	r3, #0
 800f232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f236:	e050      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f238:	2304      	movs	r3, #4
 800f23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23e:	e04c      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f240:	2308      	movs	r3, #8
 800f242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f246:	e048      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f248:	2310      	movs	r3, #16
 800f24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24e:	e044      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f250:	2320      	movs	r3, #32
 800f252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f256:	e040      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f258:	2340      	movs	r3, #64	; 0x40
 800f25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f25e:	e03c      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f260:	2380      	movs	r3, #128	; 0x80
 800f262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f266:	e038      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4a5b      	ldr	r2, [pc, #364]	; (800f3dc <UART_SetConfig+0x6a8>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d130      	bne.n	800f2d4 <UART_SetConfig+0x5a0>
 800f272:	4b57      	ldr	r3, [pc, #348]	; (800f3d0 <UART_SetConfig+0x69c>)
 800f274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f276:	f003 0307 	and.w	r3, r3, #7
 800f27a:	2b05      	cmp	r3, #5
 800f27c:	d826      	bhi.n	800f2cc <UART_SetConfig+0x598>
 800f27e:	a201      	add	r2, pc, #4	; (adr r2, 800f284 <UART_SetConfig+0x550>)
 800f280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f284:	0800f29d 	.word	0x0800f29d
 800f288:	0800f2a5 	.word	0x0800f2a5
 800f28c:	0800f2ad 	.word	0x0800f2ad
 800f290:	0800f2b5 	.word	0x0800f2b5
 800f294:	0800f2bd 	.word	0x0800f2bd
 800f298:	0800f2c5 	.word	0x0800f2c5
 800f29c:	2302      	movs	r3, #2
 800f29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a2:	e01a      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f2a4:	2304      	movs	r3, #4
 800f2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2aa:	e016      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f2ac:	2308      	movs	r3, #8
 800f2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2b2:	e012      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f2b4:	2310      	movs	r3, #16
 800f2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ba:	e00e      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f2bc:	2320      	movs	r3, #32
 800f2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2c2:	e00a      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f2c4:	2340      	movs	r3, #64	; 0x40
 800f2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ca:	e006      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f2cc:	2380      	movs	r3, #128	; 0x80
 800f2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2d2:	e002      	b.n	800f2da <UART_SetConfig+0x5a6>
 800f2d4:	2380      	movs	r3, #128	; 0x80
 800f2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	4a3f      	ldr	r2, [pc, #252]	; (800f3dc <UART_SetConfig+0x6a8>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	f040 80f8 	bne.w	800f4d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f2e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f2ea:	2b20      	cmp	r3, #32
 800f2ec:	dc46      	bgt.n	800f37c <UART_SetConfig+0x648>
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	f2c0 8082 	blt.w	800f3f8 <UART_SetConfig+0x6c4>
 800f2f4:	3b02      	subs	r3, #2
 800f2f6:	2b1e      	cmp	r3, #30
 800f2f8:	d87e      	bhi.n	800f3f8 <UART_SetConfig+0x6c4>
 800f2fa:	a201      	add	r2, pc, #4	; (adr r2, 800f300 <UART_SetConfig+0x5cc>)
 800f2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f300:	0800f383 	.word	0x0800f383
 800f304:	0800f3f9 	.word	0x0800f3f9
 800f308:	0800f38b 	.word	0x0800f38b
 800f30c:	0800f3f9 	.word	0x0800f3f9
 800f310:	0800f3f9 	.word	0x0800f3f9
 800f314:	0800f3f9 	.word	0x0800f3f9
 800f318:	0800f39b 	.word	0x0800f39b
 800f31c:	0800f3f9 	.word	0x0800f3f9
 800f320:	0800f3f9 	.word	0x0800f3f9
 800f324:	0800f3f9 	.word	0x0800f3f9
 800f328:	0800f3f9 	.word	0x0800f3f9
 800f32c:	0800f3f9 	.word	0x0800f3f9
 800f330:	0800f3f9 	.word	0x0800f3f9
 800f334:	0800f3f9 	.word	0x0800f3f9
 800f338:	0800f3ab 	.word	0x0800f3ab
 800f33c:	0800f3f9 	.word	0x0800f3f9
 800f340:	0800f3f9 	.word	0x0800f3f9
 800f344:	0800f3f9 	.word	0x0800f3f9
 800f348:	0800f3f9 	.word	0x0800f3f9
 800f34c:	0800f3f9 	.word	0x0800f3f9
 800f350:	0800f3f9 	.word	0x0800f3f9
 800f354:	0800f3f9 	.word	0x0800f3f9
 800f358:	0800f3f9 	.word	0x0800f3f9
 800f35c:	0800f3f9 	.word	0x0800f3f9
 800f360:	0800f3f9 	.word	0x0800f3f9
 800f364:	0800f3f9 	.word	0x0800f3f9
 800f368:	0800f3f9 	.word	0x0800f3f9
 800f36c:	0800f3f9 	.word	0x0800f3f9
 800f370:	0800f3f9 	.word	0x0800f3f9
 800f374:	0800f3f9 	.word	0x0800f3f9
 800f378:	0800f3eb 	.word	0x0800f3eb
 800f37c:	2b40      	cmp	r3, #64	; 0x40
 800f37e:	d037      	beq.n	800f3f0 <UART_SetConfig+0x6bc>
 800f380:	e03a      	b.n	800f3f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f382:	f7fc f931 	bl	800b5e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f386:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f388:	e03c      	b.n	800f404 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f38a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f38e:	4618      	mov	r0, r3
 800f390:	f7fc f940 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f398:	e034      	b.n	800f404 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f39a:	f107 0318 	add.w	r3, r7, #24
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7fc fa8c 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3a8:	e02c      	b.n	800f404 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3aa:	4b09      	ldr	r3, [pc, #36]	; (800f3d0 <UART_SetConfig+0x69c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f003 0320 	and.w	r3, r3, #32
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d016      	beq.n	800f3e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3b6:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <UART_SetConfig+0x69c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	08db      	lsrs	r3, r3, #3
 800f3bc:	f003 0303 	and.w	r3, r3, #3
 800f3c0:	4a07      	ldr	r2, [pc, #28]	; (800f3e0 <UART_SetConfig+0x6ac>)
 800f3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3c8:	e01c      	b.n	800f404 <UART_SetConfig+0x6d0>
 800f3ca:	bf00      	nop
 800f3cc:	40011400 	.word	0x40011400
 800f3d0:	58024400 	.word	0x58024400
 800f3d4:	40007800 	.word	0x40007800
 800f3d8:	40007c00 	.word	0x40007c00
 800f3dc:	58000c00 	.word	0x58000c00
 800f3e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f3e4:	4b9d      	ldr	r3, [pc, #628]	; (800f65c <UART_SetConfig+0x928>)
 800f3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e8:	e00c      	b.n	800f404 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3ea:	4b9d      	ldr	r3, [pc, #628]	; (800f660 <UART_SetConfig+0x92c>)
 800f3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3ee:	e009      	b.n	800f404 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3f6:	e005      	b.n	800f404 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f402:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f406:	2b00      	cmp	r3, #0
 800f408:	f000 81de 	beq.w	800f7c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f410:	4a94      	ldr	r2, [pc, #592]	; (800f664 <UART_SetConfig+0x930>)
 800f412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f416:	461a      	mov	r2, r3
 800f418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f41a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f41e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	4613      	mov	r3, r2
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	4413      	add	r3, r2
 800f42a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d305      	bcc.n	800f43c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f438:	429a      	cmp	r2, r3
 800f43a:	d903      	bls.n	800f444 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f43c:	2301      	movs	r3, #1
 800f43e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f442:	e1c1      	b.n	800f7c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f446:	2200      	movs	r2, #0
 800f448:	60bb      	str	r3, [r7, #8]
 800f44a:	60fa      	str	r2, [r7, #12]
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f450:	4a84      	ldr	r2, [pc, #528]	; (800f664 <UART_SetConfig+0x930>)
 800f452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f456:	b29b      	uxth	r3, r3
 800f458:	2200      	movs	r2, #0
 800f45a:	603b      	str	r3, [r7, #0]
 800f45c:	607a      	str	r2, [r7, #4]
 800f45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f466:	f7f0 ff8b 	bl	8000380 <__aeabi_uldivmod>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	4610      	mov	r0, r2
 800f470:	4619      	mov	r1, r3
 800f472:	f04f 0200 	mov.w	r2, #0
 800f476:	f04f 0300 	mov.w	r3, #0
 800f47a:	020b      	lsls	r3, r1, #8
 800f47c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f480:	0202      	lsls	r2, r0, #8
 800f482:	6979      	ldr	r1, [r7, #20]
 800f484:	6849      	ldr	r1, [r1, #4]
 800f486:	0849      	lsrs	r1, r1, #1
 800f488:	2000      	movs	r0, #0
 800f48a:	460c      	mov	r4, r1
 800f48c:	4605      	mov	r5, r0
 800f48e:	eb12 0804 	adds.w	r8, r2, r4
 800f492:	eb43 0905 	adc.w	r9, r3, r5
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	469a      	mov	sl, r3
 800f49e:	4693      	mov	fp, r2
 800f4a0:	4652      	mov	r2, sl
 800f4a2:	465b      	mov	r3, fp
 800f4a4:	4640      	mov	r0, r8
 800f4a6:	4649      	mov	r1, r9
 800f4a8:	f7f0 ff6a 	bl	8000380 <__aeabi_uldivmod>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4ba:	d308      	bcc.n	800f4ce <UART_SetConfig+0x79a>
 800f4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4c2:	d204      	bcs.n	800f4ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4ca:	60da      	str	r2, [r3, #12]
 800f4cc:	e17c      	b.n	800f7c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f4d4:	e178      	b.n	800f7c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	69db      	ldr	r3, [r3, #28]
 800f4da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4de:	f040 80c5 	bne.w	800f66c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f4e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f4e6:	2b20      	cmp	r3, #32
 800f4e8:	dc48      	bgt.n	800f57c <UART_SetConfig+0x848>
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	db7b      	blt.n	800f5e6 <UART_SetConfig+0x8b2>
 800f4ee:	2b20      	cmp	r3, #32
 800f4f0:	d879      	bhi.n	800f5e6 <UART_SetConfig+0x8b2>
 800f4f2:	a201      	add	r2, pc, #4	; (adr r2, 800f4f8 <UART_SetConfig+0x7c4>)
 800f4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f8:	0800f583 	.word	0x0800f583
 800f4fc:	0800f58b 	.word	0x0800f58b
 800f500:	0800f5e7 	.word	0x0800f5e7
 800f504:	0800f5e7 	.word	0x0800f5e7
 800f508:	0800f593 	.word	0x0800f593
 800f50c:	0800f5e7 	.word	0x0800f5e7
 800f510:	0800f5e7 	.word	0x0800f5e7
 800f514:	0800f5e7 	.word	0x0800f5e7
 800f518:	0800f5a3 	.word	0x0800f5a3
 800f51c:	0800f5e7 	.word	0x0800f5e7
 800f520:	0800f5e7 	.word	0x0800f5e7
 800f524:	0800f5e7 	.word	0x0800f5e7
 800f528:	0800f5e7 	.word	0x0800f5e7
 800f52c:	0800f5e7 	.word	0x0800f5e7
 800f530:	0800f5e7 	.word	0x0800f5e7
 800f534:	0800f5e7 	.word	0x0800f5e7
 800f538:	0800f5b3 	.word	0x0800f5b3
 800f53c:	0800f5e7 	.word	0x0800f5e7
 800f540:	0800f5e7 	.word	0x0800f5e7
 800f544:	0800f5e7 	.word	0x0800f5e7
 800f548:	0800f5e7 	.word	0x0800f5e7
 800f54c:	0800f5e7 	.word	0x0800f5e7
 800f550:	0800f5e7 	.word	0x0800f5e7
 800f554:	0800f5e7 	.word	0x0800f5e7
 800f558:	0800f5e7 	.word	0x0800f5e7
 800f55c:	0800f5e7 	.word	0x0800f5e7
 800f560:	0800f5e7 	.word	0x0800f5e7
 800f564:	0800f5e7 	.word	0x0800f5e7
 800f568:	0800f5e7 	.word	0x0800f5e7
 800f56c:	0800f5e7 	.word	0x0800f5e7
 800f570:	0800f5e7 	.word	0x0800f5e7
 800f574:	0800f5e7 	.word	0x0800f5e7
 800f578:	0800f5d9 	.word	0x0800f5d9
 800f57c:	2b40      	cmp	r3, #64	; 0x40
 800f57e:	d02e      	beq.n	800f5de <UART_SetConfig+0x8aa>
 800f580:	e031      	b.n	800f5e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f582:	f7fa f839 	bl	80095f8 <HAL_RCC_GetPCLK1Freq>
 800f586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f588:	e033      	b.n	800f5f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f58a:	f7fa f84b 	bl	8009624 <HAL_RCC_GetPCLK2Freq>
 800f58e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f590:	e02f      	b.n	800f5f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f596:	4618      	mov	r0, r3
 800f598:	f7fc f83c 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5a0:	e027      	b.n	800f5f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5a2:	f107 0318 	add.w	r3, r7, #24
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fc f988 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5b0:	e01f      	b.n	800f5f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5b2:	4b2d      	ldr	r3, [pc, #180]	; (800f668 <UART_SetConfig+0x934>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f003 0320 	and.w	r3, r3, #32
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d009      	beq.n	800f5d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5be:	4b2a      	ldr	r3, [pc, #168]	; (800f668 <UART_SetConfig+0x934>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	08db      	lsrs	r3, r3, #3
 800f5c4:	f003 0303 	and.w	r3, r3, #3
 800f5c8:	4a24      	ldr	r2, [pc, #144]	; (800f65c <UART_SetConfig+0x928>)
 800f5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5d0:	e00f      	b.n	800f5f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f5d2:	4b22      	ldr	r3, [pc, #136]	; (800f65c <UART_SetConfig+0x928>)
 800f5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5d6:	e00c      	b.n	800f5f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5d8:	4b21      	ldr	r3, [pc, #132]	; (800f660 <UART_SetConfig+0x92c>)
 800f5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5dc:	e009      	b.n	800f5f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5e4:	e005      	b.n	800f5f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f5f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f000 80e7 	beq.w	800f7c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fe:	4a19      	ldr	r2, [pc, #100]	; (800f664 <UART_SetConfig+0x930>)
 800f600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f604:	461a      	mov	r2, r3
 800f606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f608:	fbb3 f3f2 	udiv	r3, r3, r2
 800f60c:	005a      	lsls	r2, r3, #1
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	085b      	lsrs	r3, r3, #1
 800f614:	441a      	add	r2, r3
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f61e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f622:	2b0f      	cmp	r3, #15
 800f624:	d916      	bls.n	800f654 <UART_SetConfig+0x920>
 800f626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f62c:	d212      	bcs.n	800f654 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f630:	b29b      	uxth	r3, r3
 800f632:	f023 030f 	bic.w	r3, r3, #15
 800f636:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63a:	085b      	lsrs	r3, r3, #1
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	f003 0307 	and.w	r3, r3, #7
 800f642:	b29a      	uxth	r2, r3
 800f644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f646:	4313      	orrs	r3, r2
 800f648:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f650:	60da      	str	r2, [r3, #12]
 800f652:	e0b9      	b.n	800f7c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f654:	2301      	movs	r3, #1
 800f656:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f65a:	e0b5      	b.n	800f7c8 <UART_SetConfig+0xa94>
 800f65c:	03d09000 	.word	0x03d09000
 800f660:	003d0900 	.word	0x003d0900
 800f664:	0801568c 	.word	0x0801568c
 800f668:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f66c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f670:	2b20      	cmp	r3, #32
 800f672:	dc49      	bgt.n	800f708 <UART_SetConfig+0x9d4>
 800f674:	2b00      	cmp	r3, #0
 800f676:	db7c      	blt.n	800f772 <UART_SetConfig+0xa3e>
 800f678:	2b20      	cmp	r3, #32
 800f67a:	d87a      	bhi.n	800f772 <UART_SetConfig+0xa3e>
 800f67c:	a201      	add	r2, pc, #4	; (adr r2, 800f684 <UART_SetConfig+0x950>)
 800f67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f682:	bf00      	nop
 800f684:	0800f70f 	.word	0x0800f70f
 800f688:	0800f717 	.word	0x0800f717
 800f68c:	0800f773 	.word	0x0800f773
 800f690:	0800f773 	.word	0x0800f773
 800f694:	0800f71f 	.word	0x0800f71f
 800f698:	0800f773 	.word	0x0800f773
 800f69c:	0800f773 	.word	0x0800f773
 800f6a0:	0800f773 	.word	0x0800f773
 800f6a4:	0800f72f 	.word	0x0800f72f
 800f6a8:	0800f773 	.word	0x0800f773
 800f6ac:	0800f773 	.word	0x0800f773
 800f6b0:	0800f773 	.word	0x0800f773
 800f6b4:	0800f773 	.word	0x0800f773
 800f6b8:	0800f773 	.word	0x0800f773
 800f6bc:	0800f773 	.word	0x0800f773
 800f6c0:	0800f773 	.word	0x0800f773
 800f6c4:	0800f73f 	.word	0x0800f73f
 800f6c8:	0800f773 	.word	0x0800f773
 800f6cc:	0800f773 	.word	0x0800f773
 800f6d0:	0800f773 	.word	0x0800f773
 800f6d4:	0800f773 	.word	0x0800f773
 800f6d8:	0800f773 	.word	0x0800f773
 800f6dc:	0800f773 	.word	0x0800f773
 800f6e0:	0800f773 	.word	0x0800f773
 800f6e4:	0800f773 	.word	0x0800f773
 800f6e8:	0800f773 	.word	0x0800f773
 800f6ec:	0800f773 	.word	0x0800f773
 800f6f0:	0800f773 	.word	0x0800f773
 800f6f4:	0800f773 	.word	0x0800f773
 800f6f8:	0800f773 	.word	0x0800f773
 800f6fc:	0800f773 	.word	0x0800f773
 800f700:	0800f773 	.word	0x0800f773
 800f704:	0800f765 	.word	0x0800f765
 800f708:	2b40      	cmp	r3, #64	; 0x40
 800f70a:	d02e      	beq.n	800f76a <UART_SetConfig+0xa36>
 800f70c:	e031      	b.n	800f772 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f70e:	f7f9 ff73 	bl	80095f8 <HAL_RCC_GetPCLK1Freq>
 800f712:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f714:	e033      	b.n	800f77e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f716:	f7f9 ff85 	bl	8009624 <HAL_RCC_GetPCLK2Freq>
 800f71a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f71c:	e02f      	b.n	800f77e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f71e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f722:	4618      	mov	r0, r3
 800f724:	f7fb ff76 	bl	800b614 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f72c:	e027      	b.n	800f77e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f72e:	f107 0318 	add.w	r3, r7, #24
 800f732:	4618      	mov	r0, r3
 800f734:	f7fc f8c2 	bl	800b8bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f73c:	e01f      	b.n	800f77e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f73e:	4b2d      	ldr	r3, [pc, #180]	; (800f7f4 <UART_SetConfig+0xac0>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f003 0320 	and.w	r3, r3, #32
 800f746:	2b00      	cmp	r3, #0
 800f748:	d009      	beq.n	800f75e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f74a:	4b2a      	ldr	r3, [pc, #168]	; (800f7f4 <UART_SetConfig+0xac0>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	08db      	lsrs	r3, r3, #3
 800f750:	f003 0303 	and.w	r3, r3, #3
 800f754:	4a28      	ldr	r2, [pc, #160]	; (800f7f8 <UART_SetConfig+0xac4>)
 800f756:	fa22 f303 	lsr.w	r3, r2, r3
 800f75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f75c:	e00f      	b.n	800f77e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f75e:	4b26      	ldr	r3, [pc, #152]	; (800f7f8 <UART_SetConfig+0xac4>)
 800f760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f762:	e00c      	b.n	800f77e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f764:	4b25      	ldr	r3, [pc, #148]	; (800f7fc <UART_SetConfig+0xac8>)
 800f766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f768:	e009      	b.n	800f77e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f76a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f770:	e005      	b.n	800f77e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f772:	2300      	movs	r3, #0
 800f774:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f776:	2301      	movs	r3, #1
 800f778:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f77c:	bf00      	nop
    }

    if (pclk != 0U)
 800f77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f780:	2b00      	cmp	r3, #0
 800f782:	d021      	beq.n	800f7c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f788:	4a1d      	ldr	r2, [pc, #116]	; (800f800 <UART_SetConfig+0xacc>)
 800f78a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f78e:	461a      	mov	r2, r3
 800f790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f792:	fbb3 f2f2 	udiv	r2, r3, r2
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	085b      	lsrs	r3, r3, #1
 800f79c:	441a      	add	r2, r3
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7aa:	2b0f      	cmp	r3, #15
 800f7ac:	d909      	bls.n	800f7c2 <UART_SetConfig+0xa8e>
 800f7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7b4:	d205      	bcs.n	800f7c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	60da      	str	r2, [r3, #12]
 800f7c0:	e002      	b.n	800f7c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f7e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3748      	adds	r7, #72	; 0x48
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f7f2:	bf00      	nop
 800f7f4:	58024400 	.word	0x58024400
 800f7f8:	03d09000 	.word	0x03d09000
 800f7fc:	003d0900 	.word	0x003d0900
 800f800:	0801568c 	.word	0x0801568c

0800f804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f810:	f003 0308 	and.w	r3, r3, #8
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00a      	beq.n	800f82e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	430a      	orrs	r2, r1
 800f82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00a      	beq.n	800f850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	430a      	orrs	r2, r1
 800f84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f854:	f003 0302 	and.w	r3, r3, #2
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d00a      	beq.n	800f872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	430a      	orrs	r2, r1
 800f870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f876:	f003 0304 	and.w	r3, r3, #4
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00a      	beq.n	800f894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	430a      	orrs	r2, r1
 800f892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f898:	f003 0310 	and.w	r3, r3, #16
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00a      	beq.n	800f8b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	430a      	orrs	r2, r1
 800f8b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ba:	f003 0320 	and.w	r3, r3, #32
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00a      	beq.n	800f8d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	430a      	orrs	r2, r1
 800f8d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d01a      	beq.n	800f91a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	430a      	orrs	r2, r1
 800f8f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f902:	d10a      	bne.n	800f91a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	430a      	orrs	r2, r1
 800f918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f922:	2b00      	cmp	r3, #0
 800f924:	d00a      	beq.n	800f93c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	430a      	orrs	r2, r1
 800f93a:	605a      	str	r2, [r3, #4]
  }
}
 800f93c:	bf00      	nop
 800f93e:	370c      	adds	r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f946:	4770      	bx	lr

0800f948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b098      	sub	sp, #96	; 0x60
 800f94c:	af02      	add	r7, sp, #8
 800f94e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f958:	f7f3 fbbc 	bl	80030d4 <HAL_GetTick>
 800f95c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f003 0308 	and.w	r3, r3, #8
 800f968:	2b08      	cmp	r3, #8
 800f96a:	d12f      	bne.n	800f9cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f96c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f974:	2200      	movs	r2, #0
 800f976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 f88e 	bl	800fa9c <UART_WaitOnFlagUntilTimeout>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d022      	beq.n	800f9cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98e:	e853 3f00 	ldrex	r3, [r3]
 800f992:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f99a:	653b      	str	r3, [r7, #80]	; 0x50
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9a4:	647b      	str	r3, [r7, #68]	; 0x44
 800f9a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f9aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9ac:	e841 2300 	strex	r3, r2, [r1]
 800f9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1e6      	bne.n	800f986 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2220      	movs	r2, #32
 800f9bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9c8:	2303      	movs	r3, #3
 800f9ca:	e063      	b.n	800fa94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f003 0304 	and.w	r3, r3, #4
 800f9d6:	2b04      	cmp	r3, #4
 800f9d8:	d149      	bne.n	800fa6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f000 f857 	bl	800fa9c <UART_WaitOnFlagUntilTimeout>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d03c      	beq.n	800fa6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	e853 3f00 	ldrex	r3, [r3]
 800fa00:	623b      	str	r3, [r7, #32]
   return(result);
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fa08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	461a      	mov	r2, r3
 800fa10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa12:	633b      	str	r3, [r7, #48]	; 0x30
 800fa14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa1a:	e841 2300 	strex	r3, r2, [r1]
 800fa1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d1e6      	bne.n	800f9f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	3308      	adds	r3, #8
 800fa2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	e853 3f00 	ldrex	r3, [r3]
 800fa34:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f023 0301 	bic.w	r3, r3, #1
 800fa3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	3308      	adds	r3, #8
 800fa44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa46:	61fa      	str	r2, [r7, #28]
 800fa48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4a:	69b9      	ldr	r1, [r7, #24]
 800fa4c:	69fa      	ldr	r2, [r7, #28]
 800fa4e:	e841 2300 	strex	r3, r2, [r1]
 800fa52:	617b      	str	r3, [r7, #20]
   return(result);
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1e5      	bne.n	800fa26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2220      	movs	r2, #32
 800fa5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa6a:	2303      	movs	r3, #3
 800fa6c:	e012      	b.n	800fa94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2220      	movs	r2, #32
 800fa72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2220      	movs	r2, #32
 800fa7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2200      	movs	r2, #0
 800fa82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2200      	movs	r2, #0
 800fa88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3758      	adds	r7, #88	; 0x58
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	60f8      	str	r0, [r7, #12]
 800faa4:	60b9      	str	r1, [r7, #8]
 800faa6:	603b      	str	r3, [r7, #0]
 800faa8:	4613      	mov	r3, r2
 800faaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800faac:	e04f      	b.n	800fb4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800faae:	69bb      	ldr	r3, [r7, #24]
 800fab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fab4:	d04b      	beq.n	800fb4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fab6:	f7f3 fb0d 	bl	80030d4 <HAL_GetTick>
 800faba:	4602      	mov	r2, r0
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	69ba      	ldr	r2, [r7, #24]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d302      	bcc.n	800facc <UART_WaitOnFlagUntilTimeout+0x30>
 800fac6:	69bb      	ldr	r3, [r7, #24]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d101      	bne.n	800fad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800facc:	2303      	movs	r3, #3
 800face:	e04e      	b.n	800fb6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f003 0304 	and.w	r3, r3, #4
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d037      	beq.n	800fb4e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	2b80      	cmp	r3, #128	; 0x80
 800fae2:	d034      	beq.n	800fb4e <UART_WaitOnFlagUntilTimeout+0xb2>
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	2b40      	cmp	r3, #64	; 0x40
 800fae8:	d031      	beq.n	800fb4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	69db      	ldr	r3, [r3, #28]
 800faf0:	f003 0308 	and.w	r3, r3, #8
 800faf4:	2b08      	cmp	r3, #8
 800faf6:	d110      	bne.n	800fb1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2208      	movs	r2, #8
 800fafe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f000 f95b 	bl	800fdbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2208      	movs	r2, #8
 800fb0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fb16:	2301      	movs	r3, #1
 800fb18:	e029      	b.n	800fb6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	69db      	ldr	r3, [r3, #28]
 800fb20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb28:	d111      	bne.n	800fb4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f000 f941 	bl	800fdbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2220      	movs	r2, #32
 800fb3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2200      	movs	r2, #0
 800fb46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fb4a:	2303      	movs	r3, #3
 800fb4c:	e00f      	b.n	800fb6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	69da      	ldr	r2, [r3, #28]
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	4013      	ands	r3, r2
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	bf0c      	ite	eq
 800fb5e:	2301      	moveq	r3, #1
 800fb60:	2300      	movne	r3, #0
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	461a      	mov	r2, r3
 800fb66:	79fb      	ldrb	r3, [r7, #7]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d0a0      	beq.n	800faae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
	...

0800fb78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b0a3      	sub	sp, #140	; 0x8c
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	4613      	mov	r3, r2
 800fb84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	68ba      	ldr	r2, [r7, #8]
 800fb8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	88fa      	ldrh	r2, [r7, #6]
 800fb90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	88fa      	ldrh	r2, [r7, #6]
 800fb98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbaa:	d10e      	bne.n	800fbca <UART_Start_Receive_IT+0x52>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d105      	bne.n	800fbc0 <UART_Start_Receive_IT+0x48>
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fbba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbbe:	e02d      	b.n	800fc1c <UART_Start_Receive_IT+0xa4>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	22ff      	movs	r2, #255	; 0xff
 800fbc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbc8:	e028      	b.n	800fc1c <UART_Start_Receive_IT+0xa4>
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d10d      	bne.n	800fbee <UART_Start_Receive_IT+0x76>
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	691b      	ldr	r3, [r3, #16]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d104      	bne.n	800fbe4 <UART_Start_Receive_IT+0x6c>
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	22ff      	movs	r2, #255	; 0xff
 800fbde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbe2:	e01b      	b.n	800fc1c <UART_Start_Receive_IT+0xa4>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	227f      	movs	r2, #127	; 0x7f
 800fbe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbec:	e016      	b.n	800fc1c <UART_Start_Receive_IT+0xa4>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	689b      	ldr	r3, [r3, #8]
 800fbf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbf6:	d10d      	bne.n	800fc14 <UART_Start_Receive_IT+0x9c>
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	691b      	ldr	r3, [r3, #16]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d104      	bne.n	800fc0a <UART_Start_Receive_IT+0x92>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	227f      	movs	r2, #127	; 0x7f
 800fc04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc08:	e008      	b.n	800fc1c <UART_Start_Receive_IT+0xa4>
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	223f      	movs	r2, #63	; 0x3f
 800fc0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc12:	e003      	b.n	800fc1c <UART_Start_Receive_IT+0xa4>
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2200      	movs	r2, #0
 800fc18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2222      	movs	r2, #34	; 0x22
 800fc28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	3308      	adds	r3, #8
 800fc32:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc36:	e853 3f00 	ldrex	r3, [r3]
 800fc3a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fc3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc3e:	f043 0301 	orr.w	r3, r3, #1
 800fc42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	3308      	adds	r3, #8
 800fc4c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fc50:	673a      	str	r2, [r7, #112]	; 0x70
 800fc52:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc54:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fc56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fc58:	e841 2300 	strex	r3, r2, [r1]
 800fc5c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fc5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d1e3      	bne.n	800fc2c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc6c:	d14f      	bne.n	800fd0e <UART_Start_Receive_IT+0x196>
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fc74:	88fa      	ldrh	r2, [r7, #6]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d349      	bcc.n	800fd0e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc82:	d107      	bne.n	800fc94 <UART_Start_Receive_IT+0x11c>
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d103      	bne.n	800fc94 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	4a47      	ldr	r2, [pc, #284]	; (800fdac <UART_Start_Receive_IT+0x234>)
 800fc90:	675a      	str	r2, [r3, #116]	; 0x74
 800fc92:	e002      	b.n	800fc9a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	4a46      	ldr	r2, [pc, #280]	; (800fdb0 <UART_Start_Receive_IT+0x238>)
 800fc98:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	691b      	ldr	r3, [r3, #16]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d01a      	beq.n	800fcd8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcaa:	e853 3f00 	ldrex	r3, [r3]
 800fcae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fcc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcc6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fcca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fccc:	e841 2300 	strex	r3, r2, [r1]
 800fcd0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fcd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d1e4      	bne.n	800fca2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	3308      	adds	r3, #8
 800fcde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce2:	e853 3f00 	ldrex	r3, [r3]
 800fce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fcee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3308      	adds	r3, #8
 800fcf6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fcf8:	64ba      	str	r2, [r7, #72]	; 0x48
 800fcfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fcfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd00:	e841 2300 	strex	r3, r2, [r1]
 800fd04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1e5      	bne.n	800fcd8 <UART_Start_Receive_IT+0x160>
 800fd0c:	e046      	b.n	800fd9c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	689b      	ldr	r3, [r3, #8]
 800fd12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd16:	d107      	bne.n	800fd28 <UART_Start_Receive_IT+0x1b0>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	691b      	ldr	r3, [r3, #16]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d103      	bne.n	800fd28 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	4a24      	ldr	r2, [pc, #144]	; (800fdb4 <UART_Start_Receive_IT+0x23c>)
 800fd24:	675a      	str	r2, [r3, #116]	; 0x74
 800fd26:	e002      	b.n	800fd2e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	4a23      	ldr	r2, [pc, #140]	; (800fdb8 <UART_Start_Receive_IT+0x240>)
 800fd2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	691b      	ldr	r3, [r3, #16]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d019      	beq.n	800fd6a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3e:	e853 3f00 	ldrex	r3, [r3]
 800fd42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fd4a:	677b      	str	r3, [r7, #116]	; 0x74
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	461a      	mov	r2, r3
 800fd52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd54:	637b      	str	r3, [r7, #52]	; 0x34
 800fd56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd5c:	e841 2300 	strex	r3, r2, [r1]
 800fd60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1e6      	bne.n	800fd36 <UART_Start_Receive_IT+0x1be>
 800fd68:	e018      	b.n	800fd9c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	e853 3f00 	ldrex	r3, [r3]
 800fd76:	613b      	str	r3, [r7, #16]
   return(result);
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	f043 0320 	orr.w	r3, r3, #32
 800fd7e:	67bb      	str	r3, [r7, #120]	; 0x78
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	461a      	mov	r2, r3
 800fd86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd88:	623b      	str	r3, [r7, #32]
 800fd8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd8c:	69f9      	ldr	r1, [r7, #28]
 800fd8e:	6a3a      	ldr	r2, [r7, #32]
 800fd90:	e841 2300 	strex	r3, r2, [r1]
 800fd94:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d1e6      	bne.n	800fd6a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fd9c:	2300      	movs	r3, #0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	378c      	adds	r7, #140	; 0x8c
 800fda2:	46bd      	mov	sp, r7
 800fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	080105dd 	.word	0x080105dd
 800fdb0:	0801027d 	.word	0x0801027d
 800fdb4:	080100c5 	.word	0x080100c5
 800fdb8:	0800ff0d 	.word	0x0800ff0d

0800fdbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b095      	sub	sp, #84	; 0x54
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdcc:	e853 3f00 	ldrex	r3, [r3]
 800fdd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fdd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	461a      	mov	r2, r3
 800fde0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fde2:	643b      	str	r3, [r7, #64]	; 0x40
 800fde4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fde8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fdea:	e841 2300 	strex	r3, r2, [r1]
 800fdee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1e6      	bne.n	800fdc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	3308      	adds	r3, #8
 800fdfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdfe:	6a3b      	ldr	r3, [r7, #32]
 800fe00:	e853 3f00 	ldrex	r3, [r3]
 800fe04:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe06:	69fa      	ldr	r2, [r7, #28]
 800fe08:	4b1e      	ldr	r3, [pc, #120]	; (800fe84 <UART_EndRxTransfer+0xc8>)
 800fe0a:	4013      	ands	r3, r2
 800fe0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	3308      	adds	r3, #8
 800fe14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe1e:	e841 2300 	strex	r3, r2, [r1]
 800fe22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1e5      	bne.n	800fdf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d118      	bne.n	800fe64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	e853 3f00 	ldrex	r3, [r3]
 800fe3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	f023 0310 	bic.w	r3, r3, #16
 800fe46:	647b      	str	r3, [r7, #68]	; 0x44
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe50:	61bb      	str	r3, [r7, #24]
 800fe52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe54:	6979      	ldr	r1, [r7, #20]
 800fe56:	69ba      	ldr	r2, [r7, #24]
 800fe58:	e841 2300 	strex	r3, r2, [r1]
 800fe5c:	613b      	str	r3, [r7, #16]
   return(result);
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1e6      	bne.n	800fe32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2220      	movs	r2, #32
 800fe68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2200      	movs	r2, #0
 800fe76:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fe78:	bf00      	nop
 800fe7a:	3754      	adds	r7, #84	; 0x54
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr
 800fe84:	effffffe 	.word	0xeffffffe

0800fe88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2200      	movs	r2, #0
 800fea2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f7fe ff2e 	bl	800ed08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800feac:	bf00      	nop
 800feae:	3710      	adds	r7, #16
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b088      	sub	sp, #32
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	e853 3f00 	ldrex	r3, [r3]
 800fec8:	60bb      	str	r3, [r7, #8]
   return(result);
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fed0:	61fb      	str	r3, [r7, #28]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	461a      	mov	r2, r3
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	61bb      	str	r3, [r7, #24]
 800fedc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fede:	6979      	ldr	r1, [r7, #20]
 800fee0:	69ba      	ldr	r2, [r7, #24]
 800fee2:	e841 2300 	strex	r3, r2, [r1]
 800fee6:	613b      	str	r3, [r7, #16]
   return(result);
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d1e6      	bne.n	800febc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2220      	movs	r2, #32
 800fef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7fe fef9 	bl	800ecf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff02:	bf00      	nop
 800ff04:	3720      	adds	r7, #32
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
	...

0800ff0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b09c      	sub	sp, #112	; 0x70
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff24:	2b22      	cmp	r3, #34	; 0x22
 800ff26:	f040 80be 	bne.w	80100a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ff34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ff38:	b2d9      	uxtb	r1, r3
 800ff3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ff3e:	b2da      	uxtb	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff44:	400a      	ands	r2, r1
 800ff46:	b2d2      	uxtb	r2, r2
 800ff48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	3b01      	subs	r3, #1
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f040 80a1 	bne.w	80100b6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff7c:	e853 3f00 	ldrex	r3, [r3]
 800ff80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff88:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	461a      	mov	r2, r3
 800ff90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff92:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff9a:	e841 2300 	strex	r3, r2, [r1]
 800ff9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ffa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1e6      	bne.n	800ff74 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	3308      	adds	r3, #8
 800ffac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb0:	e853 3f00 	ldrex	r3, [r3]
 800ffb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ffb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb8:	f023 0301 	bic.w	r3, r3, #1
 800ffbc:	667b      	str	r3, [r7, #100]	; 0x64
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	3308      	adds	r3, #8
 800ffc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ffc6:	647a      	str	r2, [r7, #68]	; 0x44
 800ffc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ffcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffce:	e841 2300 	strex	r3, r2, [r1]
 800ffd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ffd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d1e5      	bne.n	800ffa6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2220      	movs	r2, #32
 800ffde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2200      	movs	r2, #0
 800ffec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4a33      	ldr	r2, [pc, #204]	; (80100c0 <UART_RxISR_8BIT+0x1b4>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d01f      	beq.n	8010038 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010002:	2b00      	cmp	r3, #0
 8010004:	d018      	beq.n	8010038 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801000c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000e:	e853 3f00 	ldrex	r3, [r3]
 8010012:	623b      	str	r3, [r7, #32]
   return(result);
 8010014:	6a3b      	ldr	r3, [r7, #32]
 8010016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801001a:	663b      	str	r3, [r7, #96]	; 0x60
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	461a      	mov	r2, r3
 8010022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010024:	633b      	str	r3, [r7, #48]	; 0x30
 8010026:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801002a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801002c:	e841 2300 	strex	r3, r2, [r1]
 8010030:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1e6      	bne.n	8010006 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801003c:	2b01      	cmp	r3, #1
 801003e:	d12e      	bne.n	801009e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	e853 3f00 	ldrex	r3, [r3]
 8010052:	60fb      	str	r3, [r7, #12]
   return(result);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f023 0310 	bic.w	r3, r3, #16
 801005a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	461a      	mov	r2, r3
 8010062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010064:	61fb      	str	r3, [r7, #28]
 8010066:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010068:	69b9      	ldr	r1, [r7, #24]
 801006a:	69fa      	ldr	r2, [r7, #28]
 801006c:	e841 2300 	strex	r3, r2, [r1]
 8010070:	617b      	str	r3, [r7, #20]
   return(result);
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d1e6      	bne.n	8010046 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	69db      	ldr	r3, [r3, #28]
 801007e:	f003 0310 	and.w	r3, r3, #16
 8010082:	2b10      	cmp	r3, #16
 8010084:	d103      	bne.n	801008e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2210      	movs	r2, #16
 801008c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010094:	4619      	mov	r1, r3
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7fe fe40 	bl	800ed1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801009c:	e00b      	b.n	80100b6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f7f0 fb26 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80100a4:	e007      	b.n	80100b6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	699a      	ldr	r2, [r3, #24]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f042 0208 	orr.w	r2, r2, #8
 80100b4:	619a      	str	r2, [r3, #24]
}
 80100b6:	bf00      	nop
 80100b8:	3770      	adds	r7, #112	; 0x70
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	58000c00 	.word	0x58000c00

080100c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b09c      	sub	sp, #112	; 0x70
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100dc:	2b22      	cmp	r3, #34	; 0x22
 80100de:	f040 80be 	bne.w	801025e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100f0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80100f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80100f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80100fa:	4013      	ands	r3, r2
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010100:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010106:	1c9a      	adds	r2, r3, #2
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010112:	b29b      	uxth	r3, r3
 8010114:	3b01      	subs	r3, #1
 8010116:	b29a      	uxth	r2, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010124:	b29b      	uxth	r3, r3
 8010126:	2b00      	cmp	r3, #0
 8010128:	f040 80a1 	bne.w	801026e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010134:	e853 3f00 	ldrex	r3, [r3]
 8010138:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801013a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801013c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010140:	667b      	str	r3, [r7, #100]	; 0x64
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801014a:	657b      	str	r3, [r7, #84]	; 0x54
 801014c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801014e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010152:	e841 2300 	strex	r3, r2, [r1]
 8010156:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1e6      	bne.n	801012c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	3308      	adds	r3, #8
 8010164:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010168:	e853 3f00 	ldrex	r3, [r3]
 801016c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801016e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010170:	f023 0301 	bic.w	r3, r3, #1
 8010174:	663b      	str	r3, [r7, #96]	; 0x60
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3308      	adds	r3, #8
 801017c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801017e:	643a      	str	r2, [r7, #64]	; 0x40
 8010180:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010182:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010186:	e841 2300 	strex	r3, r2, [r1]
 801018a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801018c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018e:	2b00      	cmp	r3, #0
 8010190:	d1e5      	bne.n	801015e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2220      	movs	r2, #32
 8010196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	4a33      	ldr	r2, [pc, #204]	; (8010278 <UART_RxISR_16BIT+0x1b4>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d01f      	beq.n	80101f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d018      	beq.n	80101f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c4:	6a3b      	ldr	r3, [r7, #32]
 80101c6:	e853 3f00 	ldrex	r3, [r3]
 80101ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80101d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	461a      	mov	r2, r3
 80101da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80101e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101e4:	e841 2300 	strex	r3, r2, [r1]
 80101e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80101ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d1e6      	bne.n	80101be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d12e      	bne.n	8010256 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	e853 3f00 	ldrex	r3, [r3]
 801020a:	60bb      	str	r3, [r7, #8]
   return(result);
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	f023 0310 	bic.w	r3, r3, #16
 8010212:	65bb      	str	r3, [r7, #88]	; 0x58
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	461a      	mov	r2, r3
 801021a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801021c:	61bb      	str	r3, [r7, #24]
 801021e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010220:	6979      	ldr	r1, [r7, #20]
 8010222:	69ba      	ldr	r2, [r7, #24]
 8010224:	e841 2300 	strex	r3, r2, [r1]
 8010228:	613b      	str	r3, [r7, #16]
   return(result);
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d1e6      	bne.n	80101fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	69db      	ldr	r3, [r3, #28]
 8010236:	f003 0310 	and.w	r3, r3, #16
 801023a:	2b10      	cmp	r3, #16
 801023c:	d103      	bne.n	8010246 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2210      	movs	r2, #16
 8010244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801024c:	4619      	mov	r1, r3
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f7fe fd64 	bl	800ed1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010254:	e00b      	b.n	801026e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f7f0 fa4a 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 801025c:	e007      	b.n	801026e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	699a      	ldr	r2, [r3, #24]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f042 0208 	orr.w	r2, r2, #8
 801026c:	619a      	str	r2, [r3, #24]
}
 801026e:	bf00      	nop
 8010270:	3770      	adds	r7, #112	; 0x70
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	58000c00 	.word	0x58000c00

0801027c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b0ac      	sub	sp, #176	; 0xb0
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801028a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	69db      	ldr	r3, [r3, #28]
 8010294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102b2:	2b22      	cmp	r3, #34	; 0x22
 80102b4:	f040 8180 	bne.w	80105b8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80102be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80102c2:	e123      	b.n	801050c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80102ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80102d2:	b2d9      	uxtb	r1, r3
 80102d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80102d8:	b2da      	uxtb	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102de:	400a      	ands	r2, r1
 80102e0:	b2d2      	uxtb	r2, r2
 80102e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102e8:	1c5a      	adds	r2, r3, #1
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	3b01      	subs	r3, #1
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	69db      	ldr	r3, [r3, #28]
 8010306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801030a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801030e:	f003 0307 	and.w	r3, r3, #7
 8010312:	2b00      	cmp	r3, #0
 8010314:	d053      	beq.n	80103be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801031a:	f003 0301 	and.w	r3, r3, #1
 801031e:	2b00      	cmp	r3, #0
 8010320:	d011      	beq.n	8010346 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010322:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00b      	beq.n	8010346 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2201      	movs	r2, #1
 8010334:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801033c:	f043 0201 	orr.w	r2, r3, #1
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801034a:	f003 0302 	and.w	r3, r3, #2
 801034e:	2b00      	cmp	r3, #0
 8010350:	d011      	beq.n	8010376 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010356:	f003 0301 	and.w	r3, r3, #1
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00b      	beq.n	8010376 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2202      	movs	r2, #2
 8010364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801036c:	f043 0204 	orr.w	r2, r3, #4
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801037a:	f003 0304 	and.w	r3, r3, #4
 801037e:	2b00      	cmp	r3, #0
 8010380:	d011      	beq.n	80103a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010386:	f003 0301 	and.w	r3, r3, #1
 801038a:	2b00      	cmp	r3, #0
 801038c:	d00b      	beq.n	80103a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2204      	movs	r2, #4
 8010394:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801039c:	f043 0202 	orr.w	r2, r3, #2
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d006      	beq.n	80103be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f7fe fca9 	bl	800ed08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f040 80a0 	bne.w	801050c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103d4:	e853 3f00 	ldrex	r3, [r3]
 80103d8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80103da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	461a      	mov	r2, r3
 80103ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80103f0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80103f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80103f6:	e841 2300 	strex	r3, r2, [r1]
 80103fa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80103fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1e4      	bne.n	80103cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3308      	adds	r3, #8
 8010408:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801040a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801040c:	e853 3f00 	ldrex	r3, [r3]
 8010410:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010414:	4b6e      	ldr	r3, [pc, #440]	; (80105d0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010416:	4013      	ands	r3, r2
 8010418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	3308      	adds	r3, #8
 8010422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010426:	66ba      	str	r2, [r7, #104]	; 0x68
 8010428:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801042a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801042c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801042e:	e841 2300 	strex	r3, r2, [r1]
 8010432:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1e3      	bne.n	8010402 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2220      	movs	r2, #32
 801043e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	4a60      	ldr	r2, [pc, #384]	; (80105d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010454:	4293      	cmp	r3, r2
 8010456:	d021      	beq.n	801049c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010462:	2b00      	cmp	r3, #0
 8010464:	d01a      	beq.n	801049c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801046e:	e853 3f00 	ldrex	r3, [r3]
 8010472:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010476:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801047a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	461a      	mov	r2, r3
 8010484:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010488:	657b      	str	r3, [r7, #84]	; 0x54
 801048a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801048e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010490:	e841 2300 	strex	r3, r2, [r1]
 8010494:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010498:	2b00      	cmp	r3, #0
 801049a:	d1e4      	bne.n	8010466 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d130      	bne.n	8010506 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104b2:	e853 3f00 	ldrex	r3, [r3]
 80104b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80104b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ba:	f023 0310 	bic.w	r3, r3, #16
 80104be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	461a      	mov	r2, r3
 80104c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80104cc:	643b      	str	r3, [r7, #64]	; 0x40
 80104ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80104d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80104d4:	e841 2300 	strex	r3, r2, [r1]
 80104d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80104da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d1e4      	bne.n	80104aa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	69db      	ldr	r3, [r3, #28]
 80104e6:	f003 0310 	and.w	r3, r3, #16
 80104ea:	2b10      	cmp	r3, #16
 80104ec:	d103      	bne.n	80104f6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2210      	movs	r2, #16
 80104f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80104fc:	4619      	mov	r1, r3
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f7fe fc0c 	bl	800ed1c <HAL_UARTEx_RxEventCallback>
 8010504:	e002      	b.n	801050c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f7f0 f8f2 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801050c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010510:	2b00      	cmp	r3, #0
 8010512:	d006      	beq.n	8010522 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010518:	f003 0320 	and.w	r3, r3, #32
 801051c:	2b00      	cmp	r3, #0
 801051e:	f47f aed1 	bne.w	80102c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010528:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801052c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010530:	2b00      	cmp	r3, #0
 8010532:	d049      	beq.n	80105c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801053a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801053e:	429a      	cmp	r2, r3
 8010540:	d242      	bcs.n	80105c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	3308      	adds	r3, #8
 8010548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	e853 3f00 	ldrex	r3, [r3]
 8010550:	61fb      	str	r3, [r7, #28]
   return(result);
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	3308      	adds	r3, #8
 8010562:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010568:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801056a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801056c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801056e:	e841 2300 	strex	r3, r2, [r1]
 8010572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1e3      	bne.n	8010542 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4a16      	ldr	r2, [pc, #88]	; (80105d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801057e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	e853 3f00 	ldrex	r3, [r3]
 801058c:	60bb      	str	r3, [r7, #8]
   return(result);
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	f043 0320 	orr.w	r3, r3, #32
 8010594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	461a      	mov	r2, r3
 801059e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80105a2:	61bb      	str	r3, [r7, #24]
 80105a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a6:	6979      	ldr	r1, [r7, #20]
 80105a8:	69ba      	ldr	r2, [r7, #24]
 80105aa:	e841 2300 	strex	r3, r2, [r1]
 80105ae:	613b      	str	r3, [r7, #16]
   return(result);
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1e4      	bne.n	8010580 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80105b6:	e007      	b.n	80105c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	699a      	ldr	r2, [r3, #24]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f042 0208 	orr.w	r2, r2, #8
 80105c6:	619a      	str	r2, [r3, #24]
}
 80105c8:	bf00      	nop
 80105ca:	37b0      	adds	r7, #176	; 0xb0
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	effffffe 	.word	0xeffffffe
 80105d4:	58000c00 	.word	0x58000c00
 80105d8:	0800ff0d 	.word	0x0800ff0d

080105dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b0ae      	sub	sp, #184	; 0xb8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	69db      	ldr	r3, [r3, #28]
 80105f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010612:	2b22      	cmp	r3, #34	; 0x22
 8010614:	f040 8184 	bne.w	8010920 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801061e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010622:	e127      	b.n	8010874 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801062a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010636:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801063a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801063e:	4013      	ands	r3, r2
 8010640:	b29a      	uxth	r2, r3
 8010642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010646:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801064c:	1c9a      	adds	r2, r3, #2
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010658:	b29b      	uxth	r3, r3
 801065a:	3b01      	subs	r3, #1
 801065c:	b29a      	uxth	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	69db      	ldr	r3, [r3, #28]
 801066a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801066e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010672:	f003 0307 	and.w	r3, r3, #7
 8010676:	2b00      	cmp	r3, #0
 8010678:	d053      	beq.n	8010722 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801067a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801067e:	f003 0301 	and.w	r3, r3, #1
 8010682:	2b00      	cmp	r3, #0
 8010684:	d011      	beq.n	80106aa <UART_RxISR_16BIT_FIFOEN+0xce>
 8010686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801068a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00b      	beq.n	80106aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2201      	movs	r2, #1
 8010698:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106a0:	f043 0201 	orr.w	r2, r3, #1
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80106aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106ae:	f003 0302 	and.w	r3, r3, #2
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d011      	beq.n	80106da <UART_RxISR_16BIT_FIFOEN+0xfe>
 80106b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80106ba:	f003 0301 	and.w	r3, r3, #1
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00b      	beq.n	80106da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	2202      	movs	r2, #2
 80106c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106d0:	f043 0204 	orr.w	r2, r3, #4
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80106da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106de:	f003 0304 	and.w	r3, r3, #4
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d011      	beq.n	801070a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80106e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80106ea:	f003 0301 	and.w	r3, r3, #1
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00b      	beq.n	801070a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2204      	movs	r2, #4
 80106f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010700:	f043 0202 	orr.w	r2, r3, #2
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010710:	2b00      	cmp	r3, #0
 8010712:	d006      	beq.n	8010722 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7fe faf7 	bl	800ed08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2200      	movs	r2, #0
 801071e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010728:	b29b      	uxth	r3, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	f040 80a2 	bne.w	8010874 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010738:	e853 3f00 	ldrex	r3, [r3]
 801073c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801073e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	461a      	mov	r2, r3
 801074e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010756:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010758:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801075a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801075e:	e841 2300 	strex	r3, r2, [r1]
 8010762:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1e2      	bne.n	8010730 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3308      	adds	r3, #8
 8010770:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010774:	e853 3f00 	ldrex	r3, [r3]
 8010778:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801077a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801077c:	4b6e      	ldr	r3, [pc, #440]	; (8010938 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801077e:	4013      	ands	r3, r2
 8010780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	3308      	adds	r3, #8
 801078a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801078e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010790:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010792:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010794:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010796:	e841 2300 	strex	r3, r2, [r1]
 801079a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801079c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1e3      	bne.n	801076a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2220      	movs	r2, #32
 80107a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a60      	ldr	r2, [pc, #384]	; (801093c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d021      	beq.n	8010804 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d01a      	beq.n	8010804 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d6:	e853 3f00 	ldrex	r3, [r3]
 80107da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80107dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80107e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	461a      	mov	r2, r3
 80107ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80107f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80107f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107f8:	e841 2300 	strex	r3, r2, [r1]
 80107fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80107fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1e4      	bne.n	80107ce <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010808:	2b01      	cmp	r3, #1
 801080a:	d130      	bne.n	801086e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2200      	movs	r2, #0
 8010810:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081a:	e853 3f00 	ldrex	r3, [r3]
 801081e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010822:	f023 0310 	bic.w	r3, r3, #16
 8010826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	461a      	mov	r2, r3
 8010830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010834:	647b      	str	r3, [r7, #68]	; 0x44
 8010836:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801083a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801083c:	e841 2300 	strex	r3, r2, [r1]
 8010840:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1e4      	bne.n	8010812 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	69db      	ldr	r3, [r3, #28]
 801084e:	f003 0310 	and.w	r3, r3, #16
 8010852:	2b10      	cmp	r3, #16
 8010854:	d103      	bne.n	801085e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2210      	movs	r2, #16
 801085c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010864:	4619      	mov	r1, r3
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f7fe fa58 	bl	800ed1c <HAL_UARTEx_RxEventCallback>
 801086c:	e002      	b.n	8010874 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7ef ff3e 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010874:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010878:	2b00      	cmp	r3, #0
 801087a:	d006      	beq.n	801088a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801087c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010880:	f003 0320 	and.w	r3, r3, #32
 8010884:	2b00      	cmp	r3, #0
 8010886:	f47f aecd 	bne.w	8010624 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010890:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010894:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010898:	2b00      	cmp	r3, #0
 801089a:	d049      	beq.n	8010930 <UART_RxISR_16BIT_FIFOEN+0x354>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d242      	bcs.n	8010930 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	3308      	adds	r3, #8
 80108b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b4:	e853 3f00 	ldrex	r3, [r3]
 80108b8:	623b      	str	r3, [r7, #32]
   return(result);
 80108ba:	6a3b      	ldr	r3, [r7, #32]
 80108bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80108c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	3308      	adds	r3, #8
 80108ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80108ce:	633a      	str	r2, [r7, #48]	; 0x30
 80108d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108d6:	e841 2300 	strex	r3, r2, [r1]
 80108da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80108dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1e3      	bne.n	80108aa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4a16      	ldr	r2, [pc, #88]	; (8010940 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80108e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	e853 3f00 	ldrex	r3, [r3]
 80108f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f043 0320 	orr.w	r3, r3, #32
 80108fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	461a      	mov	r2, r3
 8010906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801090a:	61fb      	str	r3, [r7, #28]
 801090c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801090e:	69b9      	ldr	r1, [r7, #24]
 8010910:	69fa      	ldr	r2, [r7, #28]
 8010912:	e841 2300 	strex	r3, r2, [r1]
 8010916:	617b      	str	r3, [r7, #20]
   return(result);
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1e4      	bne.n	80108e8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801091e:	e007      	b.n	8010930 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	699a      	ldr	r2, [r3, #24]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f042 0208 	orr.w	r2, r2, #8
 801092e:	619a      	str	r2, [r3, #24]
}
 8010930:	bf00      	nop
 8010932:	37b8      	adds	r7, #184	; 0xb8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	effffffe 	.word	0xeffffffe
 801093c:	58000c00 	.word	0x58000c00
 8010940:	080100c5 	.word	0x080100c5

08010944 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801094c:	bf00      	nop
 801094e:	370c      	adds	r7, #12
 8010950:	46bd      	mov	sp, r7
 8010952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010956:	4770      	bx	lr

08010958 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010960:	bf00      	nop
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010974:	bf00      	nop
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010980:	b480      	push	{r7}
 8010982:	b085      	sub	sp, #20
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801098e:	2b01      	cmp	r3, #1
 8010990:	d101      	bne.n	8010996 <HAL_UARTEx_DisableFifoMode+0x16>
 8010992:	2302      	movs	r3, #2
 8010994:	e027      	b.n	80109e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2201      	movs	r2, #1
 801099a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2224      	movs	r2, #36	; 0x24
 80109a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f022 0201 	bic.w	r2, r2, #1
 80109bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80109c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2200      	movs	r2, #0
 80109ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	68fa      	ldr	r2, [r7, #12]
 80109d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2220      	movs	r2, #32
 80109d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3714      	adds	r7, #20
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr

080109f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109f2:	b580      	push	{r7, lr}
 80109f4:	b084      	sub	sp, #16
 80109f6:	af00      	add	r7, sp, #0
 80109f8:	6078      	str	r0, [r7, #4]
 80109fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d101      	bne.n	8010a0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010a06:	2302      	movs	r3, #2
 8010a08:	e02d      	b.n	8010a66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2224      	movs	r2, #36	; 0x24
 8010a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f022 0201 	bic.w	r2, r2, #1
 8010a30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	689b      	ldr	r3, [r3, #8]
 8010a38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	683a      	ldr	r2, [r7, #0]
 8010a42:	430a      	orrs	r2, r1
 8010a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 f850 	bl	8010aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2220      	movs	r2, #32
 8010a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a64:	2300      	movs	r3, #0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3710      	adds	r7, #16
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}

08010a6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a6e:	b580      	push	{r7, lr}
 8010a70:	b084      	sub	sp, #16
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	6078      	str	r0, [r7, #4]
 8010a76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d101      	bne.n	8010a86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a82:	2302      	movs	r3, #2
 8010a84:	e02d      	b.n	8010ae2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2201      	movs	r2, #1
 8010a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2224      	movs	r2, #36	; 0x24
 8010a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f022 0201 	bic.w	r2, r2, #1
 8010aac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	689b      	ldr	r3, [r3, #8]
 8010ab4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	430a      	orrs	r2, r1
 8010ac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 f812 	bl	8010aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2220      	movs	r2, #32
 8010ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
	...

08010aec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b085      	sub	sp, #20
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d108      	bne.n	8010b0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2201      	movs	r2, #1
 8010b00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b0c:	e031      	b.n	8010b72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010b0e:	2310      	movs	r3, #16
 8010b10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010b12:	2310      	movs	r3, #16
 8010b14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	0e5b      	lsrs	r3, r3, #25
 8010b1e:	b2db      	uxtb	r3, r3
 8010b20:	f003 0307 	and.w	r3, r3, #7
 8010b24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	0f5b      	lsrs	r3, r3, #29
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	f003 0307 	and.w	r3, r3, #7
 8010b34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b36:	7bbb      	ldrb	r3, [r7, #14]
 8010b38:	7b3a      	ldrb	r2, [r7, #12]
 8010b3a:	4911      	ldr	r1, [pc, #68]	; (8010b80 <UARTEx_SetNbDataToProcess+0x94>)
 8010b3c:	5c8a      	ldrb	r2, [r1, r2]
 8010b3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b42:	7b3a      	ldrb	r2, [r7, #12]
 8010b44:	490f      	ldr	r1, [pc, #60]	; (8010b84 <UARTEx_SetNbDataToProcess+0x98>)
 8010b46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b48:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b54:	7bfb      	ldrb	r3, [r7, #15]
 8010b56:	7b7a      	ldrb	r2, [r7, #13]
 8010b58:	4909      	ldr	r1, [pc, #36]	; (8010b80 <UARTEx_SetNbDataToProcess+0x94>)
 8010b5a:	5c8a      	ldrb	r2, [r1, r2]
 8010b5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b60:	7b7a      	ldrb	r2, [r7, #13]
 8010b62:	4908      	ldr	r1, [pc, #32]	; (8010b84 <UARTEx_SetNbDataToProcess+0x98>)
 8010b64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b66:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010b72:	bf00      	nop
 8010b74:	3714      	adds	r7, #20
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop
 8010b80:	080156a4 	.word	0x080156a4
 8010b84:	080156ac 	.word	0x080156ac

08010b88 <__NVIC_SetPriority>:
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	4603      	mov	r3, r0
 8010b90:	6039      	str	r1, [r7, #0]
 8010b92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	db0a      	blt.n	8010bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	b2da      	uxtb	r2, r3
 8010ba0:	490c      	ldr	r1, [pc, #48]	; (8010bd4 <__NVIC_SetPriority+0x4c>)
 8010ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ba6:	0112      	lsls	r2, r2, #4
 8010ba8:	b2d2      	uxtb	r2, r2
 8010baa:	440b      	add	r3, r1
 8010bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010bb0:	e00a      	b.n	8010bc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	b2da      	uxtb	r2, r3
 8010bb6:	4908      	ldr	r1, [pc, #32]	; (8010bd8 <__NVIC_SetPriority+0x50>)
 8010bb8:	88fb      	ldrh	r3, [r7, #6]
 8010bba:	f003 030f 	and.w	r3, r3, #15
 8010bbe:	3b04      	subs	r3, #4
 8010bc0:	0112      	lsls	r2, r2, #4
 8010bc2:	b2d2      	uxtb	r2, r2
 8010bc4:	440b      	add	r3, r1
 8010bc6:	761a      	strb	r2, [r3, #24]
}
 8010bc8:	bf00      	nop
 8010bca:	370c      	adds	r7, #12
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	e000e100 	.word	0xe000e100
 8010bd8:	e000ed00 	.word	0xe000ed00

08010bdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010be0:	4b05      	ldr	r3, [pc, #20]	; (8010bf8 <SysTick_Handler+0x1c>)
 8010be2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010be4:	f002 fada 	bl	801319c <xTaskGetSchedulerState>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d001      	beq.n	8010bf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010bee:	f003 f8fb 	bl	8013de8 <xPortSysTickHandler>
  }
}
 8010bf2:	bf00      	nop
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	e000e010 	.word	0xe000e010

08010bfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010c00:	2100      	movs	r1, #0
 8010c02:	f06f 0004 	mvn.w	r0, #4
 8010c06:	f7ff ffbf 	bl	8010b88 <__NVIC_SetPriority>
#endif
}
 8010c0a:	bf00      	nop
 8010c0c:	bd80      	pop	{r7, pc}
	...

08010c10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010c10:	b480      	push	{r7}
 8010c12:	b083      	sub	sp, #12
 8010c14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c16:	f3ef 8305 	mrs	r3, IPSR
 8010c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8010c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d003      	beq.n	8010c2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010c22:	f06f 0305 	mvn.w	r3, #5
 8010c26:	607b      	str	r3, [r7, #4]
 8010c28:	e00c      	b.n	8010c44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010c2a:	4b0a      	ldr	r3, [pc, #40]	; (8010c54 <osKernelInitialize+0x44>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d105      	bne.n	8010c3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010c32:	4b08      	ldr	r3, [pc, #32]	; (8010c54 <osKernelInitialize+0x44>)
 8010c34:	2201      	movs	r2, #1
 8010c36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	607b      	str	r3, [r7, #4]
 8010c3c:	e002      	b.n	8010c44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010c44:	687b      	ldr	r3, [r7, #4]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	2400077c 	.word	0x2400077c

08010c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c5e:	f3ef 8305 	mrs	r3, IPSR
 8010c62:	603b      	str	r3, [r7, #0]
  return(result);
 8010c64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d003      	beq.n	8010c72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8010c6a:	f06f 0305 	mvn.w	r3, #5
 8010c6e:	607b      	str	r3, [r7, #4]
 8010c70:	e010      	b.n	8010c94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010c72:	4b0b      	ldr	r3, [pc, #44]	; (8010ca0 <osKernelStart+0x48>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2b01      	cmp	r3, #1
 8010c78:	d109      	bne.n	8010c8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010c7a:	f7ff ffbf 	bl	8010bfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010c7e:	4b08      	ldr	r3, [pc, #32]	; (8010ca0 <osKernelStart+0x48>)
 8010c80:	2202      	movs	r2, #2
 8010c82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010c84:	f001 fda4 	bl	80127d0 <vTaskStartScheduler>
      stat = osOK;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	607b      	str	r3, [r7, #4]
 8010c8c:	e002      	b.n	8010c94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010c94:	687b      	ldr	r3, [r7, #4]
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3708      	adds	r7, #8
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	2400077c 	.word	0x2400077c

08010ca4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b08e      	sub	sp, #56	; 0x38
 8010ca8:	af04      	add	r7, sp, #16
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cb4:	f3ef 8305 	mrs	r3, IPSR
 8010cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8010cba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d17e      	bne.n	8010dbe <osThreadNew+0x11a>
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d07b      	beq.n	8010dbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010cc6:	2380      	movs	r3, #128	; 0x80
 8010cc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010cca:	2318      	movs	r3, #24
 8010ccc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d045      	beq.n	8010d6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d002      	beq.n	8010cec <osThreadNew+0x48>
        name = attr->name;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	699b      	ldr	r3, [r3, #24]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	699b      	ldr	r3, [r3, #24]
 8010cf8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010cfa:	69fb      	ldr	r3, [r7, #28]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d008      	beq.n	8010d12 <osThreadNew+0x6e>
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	2b38      	cmp	r3, #56	; 0x38
 8010d04:	d805      	bhi.n	8010d12 <osThreadNew+0x6e>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	f003 0301 	and.w	r3, r3, #1
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <osThreadNew+0x72>
        return (NULL);
 8010d12:	2300      	movs	r3, #0
 8010d14:	e054      	b.n	8010dc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	695b      	ldr	r3, [r3, #20]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d003      	beq.n	8010d26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	695b      	ldr	r3, [r3, #20]
 8010d22:	089b      	lsrs	r3, r3, #2
 8010d24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00e      	beq.n	8010d4c <osThreadNew+0xa8>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	2b5b      	cmp	r3, #91	; 0x5b
 8010d34:	d90a      	bls.n	8010d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d006      	beq.n	8010d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	695b      	ldr	r3, [r3, #20]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d002      	beq.n	8010d4c <osThreadNew+0xa8>
        mem = 1;
 8010d46:	2301      	movs	r3, #1
 8010d48:	61bb      	str	r3, [r7, #24]
 8010d4a:	e010      	b.n	8010d6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	689b      	ldr	r3, [r3, #8]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d10c      	bne.n	8010d6e <osThreadNew+0xca>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d108      	bne.n	8010d6e <osThreadNew+0xca>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	691b      	ldr	r3, [r3, #16]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d104      	bne.n	8010d6e <osThreadNew+0xca>
          mem = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	61bb      	str	r3, [r7, #24]
 8010d68:	e001      	b.n	8010d6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010d6e:	69bb      	ldr	r3, [r7, #24]
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d110      	bne.n	8010d96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010d7c:	9202      	str	r2, [sp, #8]
 8010d7e:	9301      	str	r3, [sp, #4]
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	9300      	str	r3, [sp, #0]
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	6a3a      	ldr	r2, [r7, #32]
 8010d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f001 fb4a 	bl	8012424 <xTaskCreateStatic>
 8010d90:	4603      	mov	r3, r0
 8010d92:	613b      	str	r3, [r7, #16]
 8010d94:	e013      	b.n	8010dbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d110      	bne.n	8010dbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010d9c:	6a3b      	ldr	r3, [r7, #32]
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	f107 0310 	add.w	r3, r7, #16
 8010da4:	9301      	str	r3, [sp, #4]
 8010da6:	69fb      	ldr	r3, [r7, #28]
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	f001 fb95 	bl	80124de <xTaskCreate>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d001      	beq.n	8010dbe <osThreadNew+0x11a>
            hTask = NULL;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010dbe:	693b      	ldr	r3, [r7, #16]
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3728      	adds	r7, #40	; 0x28
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8010dc8:	b480      	push	{r7}
 8010dca:	b083      	sub	sp, #12
 8010dcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dce:	f3ef 8305 	mrs	r3, IPSR
 8010dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8010dd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d003      	beq.n	8010de2 <osThreadYield+0x1a>
    stat = osErrorISR;
 8010dda:	f06f 0305 	mvn.w	r3, #5
 8010dde:	607b      	str	r3, [r7, #4]
 8010de0:	e009      	b.n	8010df6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8010de2:	2300      	movs	r3, #0
 8010de4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8010de6:	4b07      	ldr	r3, [pc, #28]	; (8010e04 <osThreadYield+0x3c>)
 8010de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dec:	601a      	str	r2, [r3, #0]
 8010dee:	f3bf 8f4f 	dsb	sy
 8010df2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8010df6:	687b      	ldr	r3, [r7, #4]
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	370c      	adds	r7, #12
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr
 8010e04:	e000ed04 	.word	0xe000ed04

08010e08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e10:	f3ef 8305 	mrs	r3, IPSR
 8010e14:	60bb      	str	r3, [r7, #8]
  return(result);
 8010e16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d003      	beq.n	8010e24 <osDelay+0x1c>
    stat = osErrorISR;
 8010e1c:	f06f 0305 	mvn.w	r3, #5
 8010e20:	60fb      	str	r3, [r7, #12]
 8010e22:	e007      	b.n	8010e34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010e24:	2300      	movs	r3, #0
 8010e26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d002      	beq.n	8010e34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f001 fc9a 	bl	8012768 <vTaskDelay>
    }
  }

  return (stat);
 8010e34:	68fb      	ldr	r3, [r7, #12]
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3710      	adds	r7, #16
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8010e3e:	b580      	push	{r7, lr}
 8010e40:	b086      	sub	sp, #24
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8010e46:	2300      	movs	r3, #0
 8010e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e4a:	f3ef 8305 	mrs	r3, IPSR
 8010e4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e50:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d12d      	bne.n	8010eb2 <osEventFlagsNew+0x74>
    mem = -1;
 8010e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e5a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d015      	beq.n	8010e8e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	689b      	ldr	r3, [r3, #8]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d006      	beq.n	8010e78 <osEventFlagsNew+0x3a>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	2b1f      	cmp	r3, #31
 8010e70:	d902      	bls.n	8010e78 <osEventFlagsNew+0x3a>
        mem = 1;
 8010e72:	2301      	movs	r3, #1
 8010e74:	613b      	str	r3, [r7, #16]
 8010e76:	e00c      	b.n	8010e92 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	689b      	ldr	r3, [r3, #8]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d108      	bne.n	8010e92 <osEventFlagsNew+0x54>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d104      	bne.n	8010e92 <osEventFlagsNew+0x54>
          mem = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	613b      	str	r3, [r7, #16]
 8010e8c:	e001      	b.n	8010e92 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d106      	bne.n	8010ea6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	689b      	ldr	r3, [r3, #8]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f000 fa3d 	bl	801131c <xEventGroupCreateStatic>
 8010ea2:	6178      	str	r0, [r7, #20]
 8010ea4:	e005      	b.n	8010eb2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d102      	bne.n	8010eb2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8010eac:	f000 fa6d 	bl	801138a <xEventGroupCreate>
 8010eb0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010eb2:	697b      	ldr	r3, [r7, #20]
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3718      	adds	r7, #24
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b086      	sub	sp, #24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d004      	beq.n	8010eda <osEventFlagsSet+0x1e>
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d003      	beq.n	8010ee2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8010eda:	f06f 0303 	mvn.w	r3, #3
 8010ede:	617b      	str	r3, [r7, #20]
 8010ee0:	e028      	b.n	8010f34 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ee2:	f3ef 8305 	mrs	r3, IPSR
 8010ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d01d      	beq.n	8010f2a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8010ef2:	f107 0308 	add.w	r3, r7, #8
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	6839      	ldr	r1, [r7, #0]
 8010efa:	6938      	ldr	r0, [r7, #16]
 8010efc:	f000 fbe8 	bl	80116d0 <xEventGroupSetBitsFromISR>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d103      	bne.n	8010f0e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8010f06:	f06f 0302 	mvn.w	r3, #2
 8010f0a:	617b      	str	r3, [r7, #20]
 8010f0c:	e012      	b.n	8010f34 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00d      	beq.n	8010f34 <osEventFlagsSet+0x78>
 8010f18:	4b09      	ldr	r3, [pc, #36]	; (8010f40 <osEventFlagsSet+0x84>)
 8010f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f1e:	601a      	str	r2, [r3, #0]
 8010f20:	f3bf 8f4f 	dsb	sy
 8010f24:	f3bf 8f6f 	isb	sy
 8010f28:	e004      	b.n	8010f34 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8010f2a:	6839      	ldr	r1, [r7, #0]
 8010f2c:	6938      	ldr	r0, [r7, #16]
 8010f2e:	f000 fb15 	bl	801155c <xEventGroupSetBits>
 8010f32:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010f34:	697b      	ldr	r3, [r7, #20]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3718      	adds	r7, #24
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	e000ed04 	.word	0xe000ed04

08010f44 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b08c      	sub	sp, #48	; 0x30
 8010f48:	af02      	add	r7, sp, #8
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	607a      	str	r2, [r7, #4]
 8010f50:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d004      	beq.n	8010f66 <osEventFlagsWait+0x22>
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d003      	beq.n	8010f6e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8010f66:	f06f 0303 	mvn.w	r3, #3
 8010f6a:	61fb      	str	r3, [r7, #28]
 8010f6c:	e04b      	b.n	8011006 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f6e:	f3ef 8305 	mrs	r3, IPSR
 8010f72:	617b      	str	r3, [r7, #20]
  return(result);
 8010f74:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d003      	beq.n	8010f82 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8010f7a:	f06f 0305 	mvn.w	r3, #5
 8010f7e:	61fb      	str	r3, [r7, #28]
 8010f80:	e041      	b.n	8011006 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f003 0301 	and.w	r3, r3, #1
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d002      	beq.n	8010f92 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8010f90:	e001      	b.n	8010f96 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8010f92:	2300      	movs	r3, #0
 8010f94:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f003 0302 	and.w	r3, r3, #2
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d002      	beq.n	8010fa6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	623b      	str	r3, [r7, #32]
 8010fa4:	e001      	b.n	8010faa <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	9300      	str	r3, [sp, #0]
 8010fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb0:	6a3a      	ldr	r2, [r7, #32]
 8010fb2:	68b9      	ldr	r1, [r7, #8]
 8010fb4:	69b8      	ldr	r0, [r7, #24]
 8010fb6:	f000 fa03 	bl	80113c0 <xEventGroupWaitBits>
 8010fba:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f003 0301 	and.w	r3, r3, #1
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d010      	beq.n	8010fe8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	4013      	ands	r3, r2
 8010fcc:	68ba      	ldr	r2, [r7, #8]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d019      	beq.n	8011006 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d003      	beq.n	8010fe0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8010fd8:	f06f 0301 	mvn.w	r3, #1
 8010fdc:	61fb      	str	r3, [r7, #28]
 8010fde:	e012      	b.n	8011006 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010fe0:	f06f 0302 	mvn.w	r3, #2
 8010fe4:	61fb      	str	r3, [r7, #28]
 8010fe6:	e00e      	b.n	8011006 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8010fe8:	68ba      	ldr	r2, [r7, #8]
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	4013      	ands	r3, r2
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d109      	bne.n	8011006 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d003      	beq.n	8011000 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8010ff8:	f06f 0301 	mvn.w	r3, #1
 8010ffc:	61fb      	str	r3, [r7, #28]
 8010ffe:	e002      	b.n	8011006 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011000:	f06f 0302 	mvn.w	r3, #2
 8011004:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8011006:	69fb      	ldr	r3, [r7, #28]
}
 8011008:	4618      	mov	r0, r3
 801100a:	3728      	adds	r7, #40	; 0x28
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}

08011010 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011010:	b580      	push	{r7, lr}
 8011012:	b08a      	sub	sp, #40	; 0x28
 8011014:	af02      	add	r7, sp, #8
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801101c:	2300      	movs	r3, #0
 801101e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011020:	f3ef 8305 	mrs	r3, IPSR
 8011024:	613b      	str	r3, [r7, #16]
  return(result);
 8011026:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011028:	2b00      	cmp	r3, #0
 801102a:	d15f      	bne.n	80110ec <osMessageQueueNew+0xdc>
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d05c      	beq.n	80110ec <osMessageQueueNew+0xdc>
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d059      	beq.n	80110ec <osMessageQueueNew+0xdc>
    mem = -1;
 8011038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801103c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d029      	beq.n	8011098 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d012      	beq.n	8011072 <osMessageQueueNew+0x62>
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	2b4f      	cmp	r3, #79	; 0x4f
 8011052:	d90e      	bls.n	8011072 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011058:	2b00      	cmp	r3, #0
 801105a:	d00a      	beq.n	8011072 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	695a      	ldr	r2, [r3, #20]
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	68b9      	ldr	r1, [r7, #8]
 8011064:	fb01 f303 	mul.w	r3, r1, r3
 8011068:	429a      	cmp	r2, r3
 801106a:	d302      	bcc.n	8011072 <osMessageQueueNew+0x62>
        mem = 1;
 801106c:	2301      	movs	r3, #1
 801106e:	61bb      	str	r3, [r7, #24]
 8011070:	e014      	b.n	801109c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	689b      	ldr	r3, [r3, #8]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d110      	bne.n	801109c <osMessageQueueNew+0x8c>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d10c      	bne.n	801109c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011086:	2b00      	cmp	r3, #0
 8011088:	d108      	bne.n	801109c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	695b      	ldr	r3, [r3, #20]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d104      	bne.n	801109c <osMessageQueueNew+0x8c>
          mem = 0;
 8011092:	2300      	movs	r3, #0
 8011094:	61bb      	str	r3, [r7, #24]
 8011096:	e001      	b.n	801109c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011098:	2300      	movs	r3, #0
 801109a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d10b      	bne.n	80110ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	691a      	ldr	r2, [r3, #16]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	689b      	ldr	r3, [r3, #8]
 80110aa:	2100      	movs	r1, #0
 80110ac:	9100      	str	r1, [sp, #0]
 80110ae:	68b9      	ldr	r1, [r7, #8]
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f000 fc3d 	bl	8011930 <xQueueGenericCreateStatic>
 80110b6:	61f8      	str	r0, [r7, #28]
 80110b8:	e008      	b.n	80110cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d105      	bne.n	80110cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80110c0:	2200      	movs	r2, #0
 80110c2:	68b9      	ldr	r1, [r7, #8]
 80110c4:	68f8      	ldr	r0, [r7, #12]
 80110c6:	f000 fcab 	bl	8011a20 <xQueueGenericCreate>
 80110ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00c      	beq.n	80110ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d003      	beq.n	80110e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	617b      	str	r3, [r7, #20]
 80110de:	e001      	b.n	80110e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80110e0:	2300      	movs	r3, #0
 80110e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80110e4:	6979      	ldr	r1, [r7, #20]
 80110e6:	69f8      	ldr	r0, [r7, #28]
 80110e8:	f001 f93e 	bl	8012368 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80110ec:	69fb      	ldr	r3, [r7, #28]
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3720      	adds	r7, #32
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
	...

080110f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b088      	sub	sp, #32
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	603b      	str	r3, [r7, #0]
 8011104:	4613      	mov	r3, r2
 8011106:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801110c:	2300      	movs	r3, #0
 801110e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011110:	f3ef 8305 	mrs	r3, IPSR
 8011114:	617b      	str	r3, [r7, #20]
  return(result);
 8011116:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011118:	2b00      	cmp	r3, #0
 801111a:	d028      	beq.n	801116e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801111c:	69bb      	ldr	r3, [r7, #24]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d005      	beq.n	801112e <osMessageQueuePut+0x36>
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d002      	beq.n	801112e <osMessageQueuePut+0x36>
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d003      	beq.n	8011136 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801112e:	f06f 0303 	mvn.w	r3, #3
 8011132:	61fb      	str	r3, [r7, #28]
 8011134:	e038      	b.n	80111a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011136:	2300      	movs	r3, #0
 8011138:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801113a:	f107 0210 	add.w	r2, r7, #16
 801113e:	2300      	movs	r3, #0
 8011140:	68b9      	ldr	r1, [r7, #8]
 8011142:	69b8      	ldr	r0, [r7, #24]
 8011144:	f000 fdc8 	bl	8011cd8 <xQueueGenericSendFromISR>
 8011148:	4603      	mov	r3, r0
 801114a:	2b01      	cmp	r3, #1
 801114c:	d003      	beq.n	8011156 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801114e:	f06f 0302 	mvn.w	r3, #2
 8011152:	61fb      	str	r3, [r7, #28]
 8011154:	e028      	b.n	80111a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d025      	beq.n	80111a8 <osMessageQueuePut+0xb0>
 801115c:	4b15      	ldr	r3, [pc, #84]	; (80111b4 <osMessageQueuePut+0xbc>)
 801115e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011162:	601a      	str	r2, [r3, #0]
 8011164:	f3bf 8f4f 	dsb	sy
 8011168:	f3bf 8f6f 	isb	sy
 801116c:	e01c      	b.n	80111a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <osMessageQueuePut+0x82>
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d103      	bne.n	8011182 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801117a:	f06f 0303 	mvn.w	r3, #3
 801117e:	61fb      	str	r3, [r7, #28]
 8011180:	e012      	b.n	80111a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011182:	2300      	movs	r3, #0
 8011184:	683a      	ldr	r2, [r7, #0]
 8011186:	68b9      	ldr	r1, [r7, #8]
 8011188:	69b8      	ldr	r0, [r7, #24]
 801118a:	f000 fca7 	bl	8011adc <xQueueGenericSend>
 801118e:	4603      	mov	r3, r0
 8011190:	2b01      	cmp	r3, #1
 8011192:	d009      	beq.n	80111a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d003      	beq.n	80111a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801119a:	f06f 0301 	mvn.w	r3, #1
 801119e:	61fb      	str	r3, [r7, #28]
 80111a0:	e002      	b.n	80111a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80111a2:	f06f 0302 	mvn.w	r3, #2
 80111a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80111a8:	69fb      	ldr	r3, [r7, #28]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3720      	adds	r7, #32
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	e000ed04 	.word	0xe000ed04

080111b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b088      	sub	sp, #32
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
 80111c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80111ca:	2300      	movs	r3, #0
 80111cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111ce:	f3ef 8305 	mrs	r3, IPSR
 80111d2:	617b      	str	r3, [r7, #20]
  return(result);
 80111d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d028      	beq.n	801122c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d005      	beq.n	80111ec <osMessageQueueGet+0x34>
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d002      	beq.n	80111ec <osMessageQueueGet+0x34>
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d003      	beq.n	80111f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80111ec:	f06f 0303 	mvn.w	r3, #3
 80111f0:	61fb      	str	r3, [r7, #28]
 80111f2:	e037      	b.n	8011264 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80111f4:	2300      	movs	r3, #0
 80111f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80111f8:	f107 0310 	add.w	r3, r7, #16
 80111fc:	461a      	mov	r2, r3
 80111fe:	68b9      	ldr	r1, [r7, #8]
 8011200:	69b8      	ldr	r0, [r7, #24]
 8011202:	f000 fee5 	bl	8011fd0 <xQueueReceiveFromISR>
 8011206:	4603      	mov	r3, r0
 8011208:	2b01      	cmp	r3, #1
 801120a:	d003      	beq.n	8011214 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801120c:	f06f 0302 	mvn.w	r3, #2
 8011210:	61fb      	str	r3, [r7, #28]
 8011212:	e027      	b.n	8011264 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d024      	beq.n	8011264 <osMessageQueueGet+0xac>
 801121a:	4b15      	ldr	r3, [pc, #84]	; (8011270 <osMessageQueueGet+0xb8>)
 801121c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011220:	601a      	str	r2, [r3, #0]
 8011222:	f3bf 8f4f 	dsb	sy
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	e01b      	b.n	8011264 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801122c:	69bb      	ldr	r3, [r7, #24]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d002      	beq.n	8011238 <osMessageQueueGet+0x80>
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d103      	bne.n	8011240 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011238:	f06f 0303 	mvn.w	r3, #3
 801123c:	61fb      	str	r3, [r7, #28]
 801123e:	e011      	b.n	8011264 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	68b9      	ldr	r1, [r7, #8]
 8011244:	69b8      	ldr	r0, [r7, #24]
 8011246:	f000 fde3 	bl	8011e10 <xQueueReceive>
 801124a:	4603      	mov	r3, r0
 801124c:	2b01      	cmp	r3, #1
 801124e:	d009      	beq.n	8011264 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d003      	beq.n	801125e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011256:	f06f 0301 	mvn.w	r3, #1
 801125a:	61fb      	str	r3, [r7, #28]
 801125c:	e002      	b.n	8011264 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801125e:	f06f 0302 	mvn.w	r3, #2
 8011262:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011264:	69fb      	ldr	r3, [r7, #28]
}
 8011266:	4618      	mov	r0, r3
 8011268:	3720      	adds	r7, #32
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	e000ed04 	.word	0xe000ed04

08011274 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8011274:	b580      	push	{r7, lr}
 8011276:	b086      	sub	sp, #24
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d102      	bne.n	801128c <osMessageQueueGetCount+0x18>
    count = 0U;
 8011286:	2300      	movs	r3, #0
 8011288:	617b      	str	r3, [r7, #20]
 801128a:	e00e      	b.n	80112aa <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801128c:	f3ef 8305 	mrs	r3, IPSR
 8011290:	60fb      	str	r3, [r7, #12]
  return(result);
 8011292:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011294:	2b00      	cmp	r3, #0
 8011296:	d004      	beq.n	80112a2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8011298:	6938      	ldr	r0, [r7, #16]
 801129a:	f000 ff37 	bl	801210c <uxQueueMessagesWaitingFromISR>
 801129e:	6178      	str	r0, [r7, #20]
 80112a0:	e003      	b.n	80112aa <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80112a2:	6938      	ldr	r0, [r7, #16]
 80112a4:	f000 ff14 	bl	80120d0 <uxQueueMessagesWaiting>
 80112a8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80112aa:	697b      	ldr	r3, [r7, #20]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3718      	adds	r7, #24
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80112b4:	b480      	push	{r7}
 80112b6:	b085      	sub	sp, #20
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	60f8      	str	r0, [r7, #12]
 80112bc:	60b9      	str	r1, [r7, #8]
 80112be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	4a07      	ldr	r2, [pc, #28]	; (80112e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80112c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	4a06      	ldr	r2, [pc, #24]	; (80112e4 <vApplicationGetIdleTaskMemory+0x30>)
 80112ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2280      	movs	r2, #128	; 0x80
 80112d0:	601a      	str	r2, [r3, #0]
}
 80112d2:	bf00      	nop
 80112d4:	3714      	adds	r7, #20
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop
 80112e0:	24000780 	.word	0x24000780
 80112e4:	240007dc 	.word	0x240007dc

080112e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	60b9      	str	r1, [r7, #8]
 80112f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	4a07      	ldr	r2, [pc, #28]	; (8011314 <vApplicationGetTimerTaskMemory+0x2c>)
 80112f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	4a06      	ldr	r2, [pc, #24]	; (8011318 <vApplicationGetTimerTaskMemory+0x30>)
 80112fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011306:	601a      	str	r2, [r3, #0]
}
 8011308:	bf00      	nop
 801130a:	3714      	adds	r7, #20
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr
 8011314:	240009dc 	.word	0x240009dc
 8011318:	24000a38 	.word	0x24000a38

0801131c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 801131c:	b580      	push	{r7, lr}
 801131e:	b086      	sub	sp, #24
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d10a      	bne.n	8011340 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801133c:	bf00      	nop
 801133e:	e7fe      	b.n	801133e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011340:	2320      	movs	r3, #32
 8011342:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	2b20      	cmp	r3, #32
 8011348:	d00a      	beq.n	8011360 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	60fb      	str	r3, [r7, #12]
}
 801135c:	bf00      	nop
 801135e:	e7fe      	b.n	801135e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00a      	beq.n	8011380 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	2200      	movs	r2, #0
 801136e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	3304      	adds	r3, #4
 8011374:	4618      	mov	r0, r3
 8011376:	f000 f9bf 	bl	80116f8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	2201      	movs	r2, #1
 801137e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011380:	697b      	ldr	r3, [r7, #20]
	}
 8011382:	4618      	mov	r0, r3
 8011384:	3718      	adds	r7, #24
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}

0801138a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801138a:	b580      	push	{r7, lr}
 801138c:	b082      	sub	sp, #8
 801138e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011390:	2020      	movs	r0, #32
 8011392:	f002 fdb9 	bl	8013f08 <pvPortMalloc>
 8011396:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00a      	beq.n	80113b4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	3304      	adds	r3, #4
 80113a8:	4618      	mov	r0, r3
 80113aa:	f000 f9a5 	bl	80116f8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2200      	movs	r2, #0
 80113b2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80113b4:	687b      	ldr	r3, [r7, #4]
	}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3708      	adds	r7, #8
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
	...

080113c0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b090      	sub	sp, #64	; 0x40
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80113d2:	2300      	movs	r3, #0
 80113d4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80113d6:	2300      	movs	r3, #0
 80113d8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d10a      	bne.n	80113f6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80113e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e4:	f383 8811 	msr	BASEPRI, r3
 80113e8:	f3bf 8f6f 	isb	sy
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	623b      	str	r3, [r7, #32]
}
 80113f2:	bf00      	nop
 80113f4:	e7fe      	b.n	80113f4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d00a      	beq.n	8011416 <xEventGroupWaitBits+0x56>
	__asm volatile
 8011400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011404:	f383 8811 	msr	BASEPRI, r3
 8011408:	f3bf 8f6f 	isb	sy
 801140c:	f3bf 8f4f 	dsb	sy
 8011410:	61fb      	str	r3, [r7, #28]
}
 8011412:	bf00      	nop
 8011414:	e7fe      	b.n	8011414 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d10a      	bne.n	8011432 <xEventGroupWaitBits+0x72>
	__asm volatile
 801141c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011420:	f383 8811 	msr	BASEPRI, r3
 8011424:	f3bf 8f6f 	isb	sy
 8011428:	f3bf 8f4f 	dsb	sy
 801142c:	61bb      	str	r3, [r7, #24]
}
 801142e:	bf00      	nop
 8011430:	e7fe      	b.n	8011430 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011432:	f001 feb3 	bl	801319c <xTaskGetSchedulerState>
 8011436:	4603      	mov	r3, r0
 8011438:	2b00      	cmp	r3, #0
 801143a:	d102      	bne.n	8011442 <xEventGroupWaitBits+0x82>
 801143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801143e:	2b00      	cmp	r3, #0
 8011440:	d101      	bne.n	8011446 <xEventGroupWaitBits+0x86>
 8011442:	2301      	movs	r3, #1
 8011444:	e000      	b.n	8011448 <xEventGroupWaitBits+0x88>
 8011446:	2300      	movs	r3, #0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d10a      	bne.n	8011462 <xEventGroupWaitBits+0xa2>
	__asm volatile
 801144c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011450:	f383 8811 	msr	BASEPRI, r3
 8011454:	f3bf 8f6f 	isb	sy
 8011458:	f3bf 8f4f 	dsb	sy
 801145c:	617b      	str	r3, [r7, #20]
}
 801145e:	bf00      	nop
 8011460:	e7fe      	b.n	8011460 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011462:	f001 fa1b 	bl	801289c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801146c:	683a      	ldr	r2, [r7, #0]
 801146e:	68b9      	ldr	r1, [r7, #8]
 8011470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011472:	f000 f90b 	bl	801168c <prvTestWaitCondition>
 8011476:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801147a:	2b00      	cmp	r3, #0
 801147c:	d00e      	beq.n	801149c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011480:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011482:	2300      	movs	r3, #0
 8011484:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d028      	beq.n	80114de <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801148e:	681a      	ldr	r2, [r3, #0]
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	43db      	mvns	r3, r3
 8011494:	401a      	ands	r2, r3
 8011496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011498:	601a      	str	r2, [r3, #0]
 801149a:	e020      	b.n	80114de <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801149c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d104      	bne.n	80114ac <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80114a6:	2301      	movs	r3, #1
 80114a8:	633b      	str	r3, [r7, #48]	; 0x30
 80114aa:	e018      	b.n	80114de <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d003      	beq.n	80114ba <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80114b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80114b8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d003      	beq.n	80114c8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80114c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80114c6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80114c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ca:	1d18      	adds	r0, r3, #4
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d0:	4313      	orrs	r3, r2
 80114d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114d4:	4619      	mov	r1, r3
 80114d6:	f001 fbd9 	bl	8012c8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80114da:	2300      	movs	r3, #0
 80114dc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80114de:	f001 f9eb 	bl	80128b8 <xTaskResumeAll>
 80114e2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80114e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d031      	beq.n	801154e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80114ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d107      	bne.n	8011500 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80114f0:	4b19      	ldr	r3, [pc, #100]	; (8011558 <xEventGroupWaitBits+0x198>)
 80114f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114f6:	601a      	str	r2, [r3, #0]
 80114f8:	f3bf 8f4f 	dsb	sy
 80114fc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011500:	f001 fed8 	bl	80132b4 <uxTaskResetEventItemValue>
 8011504:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801150c:	2b00      	cmp	r3, #0
 801150e:	d11a      	bne.n	8011546 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011510:	f002 fbd8 	bl	8013cc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801151a:	683a      	ldr	r2, [r7, #0]
 801151c:	68b9      	ldr	r1, [r7, #8]
 801151e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011520:	f000 f8b4 	bl	801168c <prvTestWaitCondition>
 8011524:	4603      	mov	r3, r0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d009      	beq.n	801153e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d006      	beq.n	801153e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	43db      	mvns	r3, r3
 8011538:	401a      	ands	r2, r3
 801153a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801153c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801153e:	2301      	movs	r3, #1
 8011540:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011542:	f002 fbef 	bl	8013d24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801154c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801154e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011550:	4618      	mov	r0, r3
 8011552:	3740      	adds	r7, #64	; 0x40
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	e000ed04 	.word	0xe000ed04

0801155c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b08e      	sub	sp, #56	; 0x38
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011566:	2300      	movs	r3, #0
 8011568:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801156e:	2300      	movs	r3, #0
 8011570:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d10a      	bne.n	801158e <xEventGroupSetBits+0x32>
	__asm volatile
 8011578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157c:	f383 8811 	msr	BASEPRI, r3
 8011580:	f3bf 8f6f 	isb	sy
 8011584:	f3bf 8f4f 	dsb	sy
 8011588:	613b      	str	r3, [r7, #16]
}
 801158a:	bf00      	nop
 801158c:	e7fe      	b.n	801158c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011594:	2b00      	cmp	r3, #0
 8011596:	d00a      	beq.n	80115ae <xEventGroupSetBits+0x52>
	__asm volatile
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	60fb      	str	r3, [r7, #12]
}
 80115aa:	bf00      	nop
 80115ac:	e7fe      	b.n	80115ac <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80115ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b0:	3304      	adds	r3, #4
 80115b2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b6:	3308      	adds	r3, #8
 80115b8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80115ba:	f001 f96f 	bl	801289c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80115be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c0:	68db      	ldr	r3, [r3, #12]
 80115c2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80115c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c6:	681a      	ldr	r2, [r3, #0]
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	431a      	orrs	r2, r3
 80115cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ce:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80115d0:	e03c      	b.n	801164c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80115d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80115d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80115de:	2300      	movs	r3, #0
 80115e0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80115e2:	69bb      	ldr	r3, [r7, #24]
 80115e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80115e8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80115f0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d108      	bne.n	801160e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80115fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	4013      	ands	r3, r2
 8011604:	2b00      	cmp	r3, #0
 8011606:	d00b      	beq.n	8011620 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011608:	2301      	movs	r3, #1
 801160a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801160c:	e008      	b.n	8011620 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	4013      	ands	r3, r2
 8011616:	69ba      	ldr	r2, [r7, #24]
 8011618:	429a      	cmp	r2, r3
 801161a:	d101      	bne.n	8011620 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801161c:	2301      	movs	r3, #1
 801161e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	2b00      	cmp	r3, #0
 8011624:	d010      	beq.n	8011648 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801162c:	2b00      	cmp	r3, #0
 801162e:	d003      	beq.n	8011638 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011632:	69bb      	ldr	r3, [r7, #24]
 8011634:	4313      	orrs	r3, r2
 8011636:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011640:	4619      	mov	r1, r3
 8011642:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011644:	f001 fbee 	bl	8012e24 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801164c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801164e:	6a3b      	ldr	r3, [r7, #32]
 8011650:	429a      	cmp	r2, r3
 8011652:	d1be      	bne.n	80115d2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011656:	681a      	ldr	r2, [r3, #0]
 8011658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165a:	43db      	mvns	r3, r3
 801165c:	401a      	ands	r2, r3
 801165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011660:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011662:	f001 f929 	bl	80128b8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011668:	681b      	ldr	r3, [r3, #0]
}
 801166a:	4618      	mov	r0, r3
 801166c:	3738      	adds	r7, #56	; 0x38
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}

08011672 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011672:	b580      	push	{r7, lr}
 8011674:	b082      	sub	sp, #8
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
 801167a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801167c:	6839      	ldr	r1, [r7, #0]
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f7ff ff6c 	bl	801155c <xEventGroupSetBits>
}
 8011684:	bf00      	nop
 8011686:	3708      	adds	r7, #8
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}

0801168c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801168c:	b480      	push	{r7}
 801168e:	b087      	sub	sp, #28
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011698:	2300      	movs	r3, #0
 801169a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d107      	bne.n	80116b2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	4013      	ands	r3, r2
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d00a      	beq.n	80116c2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80116ac:	2301      	movs	r3, #1
 80116ae:	617b      	str	r3, [r7, #20]
 80116b0:	e007      	b.n	80116c2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80116b2:	68fa      	ldr	r2, [r7, #12]
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	4013      	ands	r3, r2
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d101      	bne.n	80116c2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80116be:	2301      	movs	r3, #1
 80116c0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80116c2:	697b      	ldr	r3, [r7, #20]
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	371c      	adds	r7, #28
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b086      	sub	sp, #24
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	68ba      	ldr	r2, [r7, #8]
 80116e0:	68f9      	ldr	r1, [r7, #12]
 80116e2:	4804      	ldr	r0, [pc, #16]	; (80116f4 <xEventGroupSetBitsFromISR+0x24>)
 80116e4:	f002 f9a0 	bl	8013a28 <xTimerPendFunctionCallFromISR>
 80116e8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80116ea:	697b      	ldr	r3, [r7, #20]
	}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3718      	adds	r7, #24
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	08011673 	.word	0x08011673

080116f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80116f8:	b480      	push	{r7}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f103 0208 	add.w	r2, r3, #8
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f103 0208 	add.w	r2, r3, #8
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f103 0208 	add.w	r2, r3, #8
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801172c:	bf00      	nop
 801172e:	370c      	adds	r7, #12
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2200      	movs	r2, #0
 8011744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011746:	bf00      	nop
 8011748:	370c      	adds	r7, #12
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr

08011752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011752:	b480      	push	{r7}
 8011754:	b085      	sub	sp, #20
 8011756:	af00      	add	r7, sp, #0
 8011758:	6078      	str	r0, [r7, #4]
 801175a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	689a      	ldr	r2, [r3, #8]
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	689b      	ldr	r3, [r3, #8]
 8011774:	683a      	ldr	r2, [r7, #0]
 8011776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	683a      	ldr	r2, [r7, #0]
 801177c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	1c5a      	adds	r2, r3, #1
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	601a      	str	r2, [r3, #0]
}
 801178e:	bf00      	nop
 8011790:	3714      	adds	r7, #20
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr

0801179a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801179a:	b480      	push	{r7}
 801179c:	b085      	sub	sp, #20
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
 80117a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117b0:	d103      	bne.n	80117ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	691b      	ldr	r3, [r3, #16]
 80117b6:	60fb      	str	r3, [r7, #12]
 80117b8:	e00c      	b.n	80117d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	3308      	adds	r3, #8
 80117be:	60fb      	str	r3, [r7, #12]
 80117c0:	e002      	b.n	80117c8 <vListInsert+0x2e>
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	60fb      	str	r3, [r7, #12]
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	68ba      	ldr	r2, [r7, #8]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d2f6      	bcs.n	80117c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	685a      	ldr	r2, [r3, #4]
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	685b      	ldr	r3, [r3, #4]
 80117e0:	683a      	ldr	r2, [r7, #0]
 80117e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	68fa      	ldr	r2, [r7, #12]
 80117e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	683a      	ldr	r2, [r7, #0]
 80117ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	687a      	ldr	r2, [r7, #4]
 80117f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	1c5a      	adds	r2, r3, #1
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	601a      	str	r2, [r3, #0]
}
 8011800:	bf00      	nop
 8011802:	3714      	adds	r7, #20
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr

0801180c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801180c:	b480      	push	{r7}
 801180e:	b085      	sub	sp, #20
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	691b      	ldr	r3, [r3, #16]
 8011818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	687a      	ldr	r2, [r7, #4]
 8011820:	6892      	ldr	r2, [r2, #8]
 8011822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	6852      	ldr	r2, [r2, #4]
 801182c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	429a      	cmp	r2, r3
 8011836:	d103      	bne.n	8011840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	689a      	ldr	r2, [r3, #8]
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	1e5a      	subs	r2, r3, #1
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	681b      	ldr	r3, [r3, #0]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3714      	adds	r7, #20
 8011858:	46bd      	mov	sp, r7
 801185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185e:	4770      	bx	lr

08011860 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d10a      	bne.n	801188a <xQueueGenericReset+0x2a>
	__asm volatile
 8011874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011878:	f383 8811 	msr	BASEPRI, r3
 801187c:	f3bf 8f6f 	isb	sy
 8011880:	f3bf 8f4f 	dsb	sy
 8011884:	60bb      	str	r3, [r7, #8]
}
 8011886:	bf00      	nop
 8011888:	e7fe      	b.n	8011888 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801188a:	f002 fa1b 	bl	8013cc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011896:	68f9      	ldr	r1, [r7, #12]
 8011898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801189a:	fb01 f303 	mul.w	r3, r1, r3
 801189e:	441a      	add	r2, r3
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2200      	movs	r2, #0
 80118a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118ba:	3b01      	subs	r3, #1
 80118bc:	68f9      	ldr	r1, [r7, #12]
 80118be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80118c0:	fb01 f303 	mul.w	r3, r1, r3
 80118c4:	441a      	add	r2, r3
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	22ff      	movs	r2, #255	; 0xff
 80118ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	22ff      	movs	r2, #255	; 0xff
 80118d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d114      	bne.n	801190a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	691b      	ldr	r3, [r3, #16]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d01a      	beq.n	801191e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	3310      	adds	r3, #16
 80118ec:	4618      	mov	r0, r3
 80118ee:	f001 fa35 	bl	8012d5c <xTaskRemoveFromEventList>
 80118f2:	4603      	mov	r3, r0
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d012      	beq.n	801191e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80118f8:	4b0c      	ldr	r3, [pc, #48]	; (801192c <xQueueGenericReset+0xcc>)
 80118fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118fe:	601a      	str	r2, [r3, #0]
 8011900:	f3bf 8f4f 	dsb	sy
 8011904:	f3bf 8f6f 	isb	sy
 8011908:	e009      	b.n	801191e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	3310      	adds	r3, #16
 801190e:	4618      	mov	r0, r3
 8011910:	f7ff fef2 	bl	80116f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	3324      	adds	r3, #36	; 0x24
 8011918:	4618      	mov	r0, r3
 801191a:	f7ff feed 	bl	80116f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801191e:	f002 fa01 	bl	8013d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011922:	2301      	movs	r3, #1
}
 8011924:	4618      	mov	r0, r3
 8011926:	3710      	adds	r7, #16
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	e000ed04 	.word	0xe000ed04

08011930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011930:	b580      	push	{r7, lr}
 8011932:	b08e      	sub	sp, #56	; 0x38
 8011934:	af02      	add	r7, sp, #8
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	60b9      	str	r1, [r7, #8]
 801193a:	607a      	str	r2, [r7, #4]
 801193c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d10a      	bne.n	801195a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011948:	f383 8811 	msr	BASEPRI, r3
 801194c:	f3bf 8f6f 	isb	sy
 8011950:	f3bf 8f4f 	dsb	sy
 8011954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011956:	bf00      	nop
 8011958:	e7fe      	b.n	8011958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d10a      	bne.n	8011976 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011964:	f383 8811 	msr	BASEPRI, r3
 8011968:	f3bf 8f6f 	isb	sy
 801196c:	f3bf 8f4f 	dsb	sy
 8011970:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011972:	bf00      	nop
 8011974:	e7fe      	b.n	8011974 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <xQueueGenericCreateStatic+0x52>
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <xQueueGenericCreateStatic+0x56>
 8011982:	2301      	movs	r3, #1
 8011984:	e000      	b.n	8011988 <xQueueGenericCreateStatic+0x58>
 8011986:	2300      	movs	r3, #0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d10a      	bne.n	80119a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801198c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011990:	f383 8811 	msr	BASEPRI, r3
 8011994:	f3bf 8f6f 	isb	sy
 8011998:	f3bf 8f4f 	dsb	sy
 801199c:	623b      	str	r3, [r7, #32]
}
 801199e:	bf00      	nop
 80119a0:	e7fe      	b.n	80119a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d102      	bne.n	80119ae <xQueueGenericCreateStatic+0x7e>
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d101      	bne.n	80119b2 <xQueueGenericCreateStatic+0x82>
 80119ae:	2301      	movs	r3, #1
 80119b0:	e000      	b.n	80119b4 <xQueueGenericCreateStatic+0x84>
 80119b2:	2300      	movs	r3, #0
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d10a      	bne.n	80119ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80119b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119bc:	f383 8811 	msr	BASEPRI, r3
 80119c0:	f3bf 8f6f 	isb	sy
 80119c4:	f3bf 8f4f 	dsb	sy
 80119c8:	61fb      	str	r3, [r7, #28]
}
 80119ca:	bf00      	nop
 80119cc:	e7fe      	b.n	80119cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80119ce:	2350      	movs	r3, #80	; 0x50
 80119d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	2b50      	cmp	r3, #80	; 0x50
 80119d6:	d00a      	beq.n	80119ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80119d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119dc:	f383 8811 	msr	BASEPRI, r3
 80119e0:	f3bf 8f6f 	isb	sy
 80119e4:	f3bf 8f4f 	dsb	sy
 80119e8:	61bb      	str	r3, [r7, #24]
}
 80119ea:	bf00      	nop
 80119ec:	e7fe      	b.n	80119ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80119ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d00d      	beq.n	8011a16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80119fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fc:	2201      	movs	r2, #1
 80119fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	68b9      	ldr	r1, [r7, #8]
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f000 f83f 	bl	8011a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3730      	adds	r7, #48	; 0x30
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b08a      	sub	sp, #40	; 0x28
 8011a24:	af02      	add	r7, sp, #8
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d10a      	bne.n	8011a4a <xQueueGenericCreate+0x2a>
	__asm volatile
 8011a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a38:	f383 8811 	msr	BASEPRI, r3
 8011a3c:	f3bf 8f6f 	isb	sy
 8011a40:	f3bf 8f4f 	dsb	sy
 8011a44:	613b      	str	r3, [r7, #16]
}
 8011a46:	bf00      	nop
 8011a48:	e7fe      	b.n	8011a48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	68ba      	ldr	r2, [r7, #8]
 8011a4e:	fb02 f303 	mul.w	r3, r2, r3
 8011a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	3350      	adds	r3, #80	; 0x50
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f002 fa55 	bl	8013f08 <pvPortMalloc>
 8011a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d011      	beq.n	8011a8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a6a:	697b      	ldr	r3, [r7, #20]
 8011a6c:	3350      	adds	r3, #80	; 0x50
 8011a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	2200      	movs	r2, #0
 8011a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a78:	79fa      	ldrb	r2, [r7, #7]
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	9300      	str	r3, [sp, #0]
 8011a7e:	4613      	mov	r3, r2
 8011a80:	697a      	ldr	r2, [r7, #20]
 8011a82:	68b9      	ldr	r1, [r7, #8]
 8011a84:	68f8      	ldr	r0, [r7, #12]
 8011a86:	f000 f805 	bl	8011a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3720      	adds	r7, #32
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
 8011aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d103      	bne.n	8011ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011aa8:	69bb      	ldr	r3, [r7, #24]
 8011aaa:	69ba      	ldr	r2, [r7, #24]
 8011aac:	601a      	str	r2, [r3, #0]
 8011aae:	e002      	b.n	8011ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	68fa      	ldr	r2, [r7, #12]
 8011aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	69b8      	ldr	r0, [r7, #24]
 8011ac6:	f7ff fecb 	bl	8011860 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	78fa      	ldrb	r2, [r7, #3]
 8011ace:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011ad2:	bf00      	nop
 8011ad4:	3710      	adds	r7, #16
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
	...

08011adc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b08e      	sub	sp, #56	; 0x38
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
 8011ae8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011aea:	2300      	movs	r3, #0
 8011aec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d10a      	bne.n	8011b0e <xQueueGenericSend+0x32>
	__asm volatile
 8011af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afc:	f383 8811 	msr	BASEPRI, r3
 8011b00:	f3bf 8f6f 	isb	sy
 8011b04:	f3bf 8f4f 	dsb	sy
 8011b08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011b0a:	bf00      	nop
 8011b0c:	e7fe      	b.n	8011b0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d103      	bne.n	8011b1c <xQueueGenericSend+0x40>
 8011b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d101      	bne.n	8011b20 <xQueueGenericSend+0x44>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e000      	b.n	8011b22 <xQueueGenericSend+0x46>
 8011b20:	2300      	movs	r3, #0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d10a      	bne.n	8011b3c <xQueueGenericSend+0x60>
	__asm volatile
 8011b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2a:	f383 8811 	msr	BASEPRI, r3
 8011b2e:	f3bf 8f6f 	isb	sy
 8011b32:	f3bf 8f4f 	dsb	sy
 8011b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011b38:	bf00      	nop
 8011b3a:	e7fe      	b.n	8011b3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	2b02      	cmp	r3, #2
 8011b40:	d103      	bne.n	8011b4a <xQueueGenericSend+0x6e>
 8011b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d101      	bne.n	8011b4e <xQueueGenericSend+0x72>
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	e000      	b.n	8011b50 <xQueueGenericSend+0x74>
 8011b4e:	2300      	movs	r3, #0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d10a      	bne.n	8011b6a <xQueueGenericSend+0x8e>
	__asm volatile
 8011b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b58:	f383 8811 	msr	BASEPRI, r3
 8011b5c:	f3bf 8f6f 	isb	sy
 8011b60:	f3bf 8f4f 	dsb	sy
 8011b64:	623b      	str	r3, [r7, #32]
}
 8011b66:	bf00      	nop
 8011b68:	e7fe      	b.n	8011b68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b6a:	f001 fb17 	bl	801319c <xTaskGetSchedulerState>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d102      	bne.n	8011b7a <xQueueGenericSend+0x9e>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d101      	bne.n	8011b7e <xQueueGenericSend+0xa2>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e000      	b.n	8011b80 <xQueueGenericSend+0xa4>
 8011b7e:	2300      	movs	r3, #0
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d10a      	bne.n	8011b9a <xQueueGenericSend+0xbe>
	__asm volatile
 8011b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b88:	f383 8811 	msr	BASEPRI, r3
 8011b8c:	f3bf 8f6f 	isb	sy
 8011b90:	f3bf 8f4f 	dsb	sy
 8011b94:	61fb      	str	r3, [r7, #28]
}
 8011b96:	bf00      	nop
 8011b98:	e7fe      	b.n	8011b98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b9a:	f002 f893 	bl	8013cc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d302      	bcc.n	8011bb0 <xQueueGenericSend+0xd4>
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	2b02      	cmp	r3, #2
 8011bae:	d129      	bne.n	8011c04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011bb0:	683a      	ldr	r2, [r7, #0]
 8011bb2:	68b9      	ldr	r1, [r7, #8]
 8011bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bb6:	f000 fac7 	bl	8012148 <prvCopyDataToQueue>
 8011bba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d010      	beq.n	8011be6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc6:	3324      	adds	r3, #36	; 0x24
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f001 f8c7 	bl	8012d5c <xTaskRemoveFromEventList>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d013      	beq.n	8011bfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011bd4:	4b3f      	ldr	r3, [pc, #252]	; (8011cd4 <xQueueGenericSend+0x1f8>)
 8011bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bda:	601a      	str	r2, [r3, #0]
 8011bdc:	f3bf 8f4f 	dsb	sy
 8011be0:	f3bf 8f6f 	isb	sy
 8011be4:	e00a      	b.n	8011bfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d007      	beq.n	8011bfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011bec:	4b39      	ldr	r3, [pc, #228]	; (8011cd4 <xQueueGenericSend+0x1f8>)
 8011bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bf2:	601a      	str	r2, [r3, #0]
 8011bf4:	f3bf 8f4f 	dsb	sy
 8011bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011bfc:	f002 f892 	bl	8013d24 <vPortExitCritical>
				return pdPASS;
 8011c00:	2301      	movs	r3, #1
 8011c02:	e063      	b.n	8011ccc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d103      	bne.n	8011c12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011c0a:	f002 f88b 	bl	8013d24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	e05c      	b.n	8011ccc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d106      	bne.n	8011c26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c18:	f107 0314 	add.w	r3, r7, #20
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f001 f963 	bl	8012ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c22:	2301      	movs	r3, #1
 8011c24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c26:	f002 f87d 	bl	8013d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c2a:	f000 fe37 	bl	801289c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c2e:	f002 f849 	bl	8013cc4 <vPortEnterCritical>
 8011c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c38:	b25b      	sxtb	r3, r3
 8011c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c3e:	d103      	bne.n	8011c48 <xQueueGenericSend+0x16c>
 8011c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c42:	2200      	movs	r2, #0
 8011c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c4e:	b25b      	sxtb	r3, r3
 8011c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c54:	d103      	bne.n	8011c5e <xQueueGenericSend+0x182>
 8011c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c5e:	f002 f861 	bl	8013d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c62:	1d3a      	adds	r2, r7, #4
 8011c64:	f107 0314 	add.w	r3, r7, #20
 8011c68:	4611      	mov	r1, r2
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f001 f952 	bl	8012f14 <xTaskCheckForTimeOut>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d124      	bne.n	8011cc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c78:	f000 fb5e 	bl	8012338 <prvIsQueueFull>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d018      	beq.n	8011cb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c84:	3310      	adds	r3, #16
 8011c86:	687a      	ldr	r2, [r7, #4]
 8011c88:	4611      	mov	r1, r2
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f000 ffda 	bl	8012c44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c92:	f000 fae9 	bl	8012268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011c96:	f000 fe0f 	bl	80128b8 <xTaskResumeAll>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f47f af7c 	bne.w	8011b9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011ca2:	4b0c      	ldr	r3, [pc, #48]	; (8011cd4 <xQueueGenericSend+0x1f8>)
 8011ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	f3bf 8f4f 	dsb	sy
 8011cae:	f3bf 8f6f 	isb	sy
 8011cb2:	e772      	b.n	8011b9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cb6:	f000 fad7 	bl	8012268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011cba:	f000 fdfd 	bl	80128b8 <xTaskResumeAll>
 8011cbe:	e76c      	b.n	8011b9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cc2:	f000 fad1 	bl	8012268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011cc6:	f000 fdf7 	bl	80128b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011cca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3738      	adds	r7, #56	; 0x38
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}
 8011cd4:	e000ed04 	.word	0xe000ed04

08011cd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b090      	sub	sp, #64	; 0x40
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	60f8      	str	r0, [r7, #12]
 8011ce0:	60b9      	str	r1, [r7, #8]
 8011ce2:	607a      	str	r2, [r7, #4]
 8011ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d10a      	bne.n	8011d06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011d02:	bf00      	nop
 8011d04:	e7fe      	b.n	8011d04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d103      	bne.n	8011d14 <xQueueGenericSendFromISR+0x3c>
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d101      	bne.n	8011d18 <xQueueGenericSendFromISR+0x40>
 8011d14:	2301      	movs	r3, #1
 8011d16:	e000      	b.n	8011d1a <xQueueGenericSendFromISR+0x42>
 8011d18:	2300      	movs	r3, #0
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d10a      	bne.n	8011d34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d22:	f383 8811 	msr	BASEPRI, r3
 8011d26:	f3bf 8f6f 	isb	sy
 8011d2a:	f3bf 8f4f 	dsb	sy
 8011d2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011d30:	bf00      	nop
 8011d32:	e7fe      	b.n	8011d32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	2b02      	cmp	r3, #2
 8011d38:	d103      	bne.n	8011d42 <xQueueGenericSendFromISR+0x6a>
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d3e:	2b01      	cmp	r3, #1
 8011d40:	d101      	bne.n	8011d46 <xQueueGenericSendFromISR+0x6e>
 8011d42:	2301      	movs	r3, #1
 8011d44:	e000      	b.n	8011d48 <xQueueGenericSendFromISR+0x70>
 8011d46:	2300      	movs	r3, #0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d10a      	bne.n	8011d62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	623b      	str	r3, [r7, #32]
}
 8011d5e:	bf00      	nop
 8011d60:	e7fe      	b.n	8011d60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d62:	f002 f891 	bl	8013e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011d66:	f3ef 8211 	mrs	r2, BASEPRI
 8011d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6e:	f383 8811 	msr	BASEPRI, r3
 8011d72:	f3bf 8f6f 	isb	sy
 8011d76:	f3bf 8f4f 	dsb	sy
 8011d7a:	61fa      	str	r2, [r7, #28]
 8011d7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011d7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d302      	bcc.n	8011d94 <xQueueGenericSendFromISR+0xbc>
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	2b02      	cmp	r3, #2
 8011d92:	d12f      	bne.n	8011df4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011da2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011da4:	683a      	ldr	r2, [r7, #0]
 8011da6:	68b9      	ldr	r1, [r7, #8]
 8011da8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011daa:	f000 f9cd 	bl	8012148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011dae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011db6:	d112      	bne.n	8011dde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d016      	beq.n	8011dee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc2:	3324      	adds	r3, #36	; 0x24
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f000 ffc9 	bl	8012d5c <xTaskRemoveFromEventList>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00e      	beq.n	8011dee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d00b      	beq.n	8011dee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2201      	movs	r2, #1
 8011dda:	601a      	str	r2, [r3, #0]
 8011ddc:	e007      	b.n	8011dee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011dde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011de2:	3301      	adds	r3, #1
 8011de4:	b2db      	uxtb	r3, r3
 8011de6:	b25a      	sxtb	r2, r3
 8011de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011dee:	2301      	movs	r3, #1
 8011df0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011df2:	e001      	b.n	8011df8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011df4:	2300      	movs	r3, #0
 8011df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011e02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3740      	adds	r7, #64	; 0x40
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
	...

08011e10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b08c      	sub	sp, #48	; 0x30
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d10a      	bne.n	8011e40 <xQueueReceive+0x30>
	__asm volatile
 8011e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2e:	f383 8811 	msr	BASEPRI, r3
 8011e32:	f3bf 8f6f 	isb	sy
 8011e36:	f3bf 8f4f 	dsb	sy
 8011e3a:	623b      	str	r3, [r7, #32]
}
 8011e3c:	bf00      	nop
 8011e3e:	e7fe      	b.n	8011e3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d103      	bne.n	8011e4e <xQueueReceive+0x3e>
 8011e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d101      	bne.n	8011e52 <xQueueReceive+0x42>
 8011e4e:	2301      	movs	r3, #1
 8011e50:	e000      	b.n	8011e54 <xQueueReceive+0x44>
 8011e52:	2300      	movs	r3, #0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d10a      	bne.n	8011e6e <xQueueReceive+0x5e>
	__asm volatile
 8011e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e5c:	f383 8811 	msr	BASEPRI, r3
 8011e60:	f3bf 8f6f 	isb	sy
 8011e64:	f3bf 8f4f 	dsb	sy
 8011e68:	61fb      	str	r3, [r7, #28]
}
 8011e6a:	bf00      	nop
 8011e6c:	e7fe      	b.n	8011e6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e6e:	f001 f995 	bl	801319c <xTaskGetSchedulerState>
 8011e72:	4603      	mov	r3, r0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d102      	bne.n	8011e7e <xQueueReceive+0x6e>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d101      	bne.n	8011e82 <xQueueReceive+0x72>
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e000      	b.n	8011e84 <xQueueReceive+0x74>
 8011e82:	2300      	movs	r3, #0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d10a      	bne.n	8011e9e <xQueueReceive+0x8e>
	__asm volatile
 8011e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8c:	f383 8811 	msr	BASEPRI, r3
 8011e90:	f3bf 8f6f 	isb	sy
 8011e94:	f3bf 8f4f 	dsb	sy
 8011e98:	61bb      	str	r3, [r7, #24]
}
 8011e9a:	bf00      	nop
 8011e9c:	e7fe      	b.n	8011e9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e9e:	f001 ff11 	bl	8013cc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ea6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d01f      	beq.n	8011eee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011eae:	68b9      	ldr	r1, [r7, #8]
 8011eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eb2:	f000 f9b3 	bl	801221c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb8:	1e5a      	subs	r2, r3, #1
 8011eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec0:	691b      	ldr	r3, [r3, #16]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d00f      	beq.n	8011ee6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec8:	3310      	adds	r3, #16
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f000 ff46 	bl	8012d5c <xTaskRemoveFromEventList>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d007      	beq.n	8011ee6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011ed6:	4b3d      	ldr	r3, [pc, #244]	; (8011fcc <xQueueReceive+0x1bc>)
 8011ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011edc:	601a      	str	r2, [r3, #0]
 8011ede:	f3bf 8f4f 	dsb	sy
 8011ee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011ee6:	f001 ff1d 	bl	8013d24 <vPortExitCritical>
				return pdPASS;
 8011eea:	2301      	movs	r3, #1
 8011eec:	e069      	b.n	8011fc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d103      	bne.n	8011efc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011ef4:	f001 ff16 	bl	8013d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	e062      	b.n	8011fc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d106      	bne.n	8011f10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f02:	f107 0310 	add.w	r3, r7, #16
 8011f06:	4618      	mov	r0, r3
 8011f08:	f000 ffee 	bl	8012ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f10:	f001 ff08 	bl	8013d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f14:	f000 fcc2 	bl	801289c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f18:	f001 fed4 	bl	8013cc4 <vPortEnterCritical>
 8011f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f22:	b25b      	sxtb	r3, r3
 8011f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f28:	d103      	bne.n	8011f32 <xQueueReceive+0x122>
 8011f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f38:	b25b      	sxtb	r3, r3
 8011f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f3e:	d103      	bne.n	8011f48 <xQueueReceive+0x138>
 8011f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f42:	2200      	movs	r2, #0
 8011f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f48:	f001 feec 	bl	8013d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f4c:	1d3a      	adds	r2, r7, #4
 8011f4e:	f107 0310 	add.w	r3, r7, #16
 8011f52:	4611      	mov	r1, r2
 8011f54:	4618      	mov	r0, r3
 8011f56:	f000 ffdd 	bl	8012f14 <xTaskCheckForTimeOut>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d123      	bne.n	8011fa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f62:	f000 f9d3 	bl	801230c <prvIsQueueEmpty>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d017      	beq.n	8011f9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6e:	3324      	adds	r3, #36	; 0x24
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	4611      	mov	r1, r2
 8011f74:	4618      	mov	r0, r3
 8011f76:	f000 fe65 	bl	8012c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f7c:	f000 f974 	bl	8012268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011f80:	f000 fc9a 	bl	80128b8 <xTaskResumeAll>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d189      	bne.n	8011e9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011f8a:	4b10      	ldr	r3, [pc, #64]	; (8011fcc <xQueueReceive+0x1bc>)
 8011f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f90:	601a      	str	r2, [r3, #0]
 8011f92:	f3bf 8f4f 	dsb	sy
 8011f96:	f3bf 8f6f 	isb	sy
 8011f9a:	e780      	b.n	8011e9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f9e:	f000 f963 	bl	8012268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011fa2:	f000 fc89 	bl	80128b8 <xTaskResumeAll>
 8011fa6:	e77a      	b.n	8011e9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011faa:	f000 f95d 	bl	8012268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011fae:	f000 fc83 	bl	80128b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fb4:	f000 f9aa 	bl	801230c <prvIsQueueEmpty>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	f43f af6f 	beq.w	8011e9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011fc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3730      	adds	r7, #48	; 0x30
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	e000ed04 	.word	0xe000ed04

08011fd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b08e      	sub	sp, #56	; 0x38
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d10a      	bne.n	8011ffc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fea:	f383 8811 	msr	BASEPRI, r3
 8011fee:	f3bf 8f6f 	isb	sy
 8011ff2:	f3bf 8f4f 	dsb	sy
 8011ff6:	623b      	str	r3, [r7, #32]
}
 8011ff8:	bf00      	nop
 8011ffa:	e7fe      	b.n	8011ffa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d103      	bne.n	801200a <xQueueReceiveFromISR+0x3a>
 8012002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012006:	2b00      	cmp	r3, #0
 8012008:	d101      	bne.n	801200e <xQueueReceiveFromISR+0x3e>
 801200a:	2301      	movs	r3, #1
 801200c:	e000      	b.n	8012010 <xQueueReceiveFromISR+0x40>
 801200e:	2300      	movs	r3, #0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d10a      	bne.n	801202a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	61fb      	str	r3, [r7, #28]
}
 8012026:	bf00      	nop
 8012028:	e7fe      	b.n	8012028 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801202a:	f001 ff2d 	bl	8013e88 <vPortValidateInterruptPriority>
	__asm volatile
 801202e:	f3ef 8211 	mrs	r2, BASEPRI
 8012032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	61ba      	str	r2, [r7, #24]
 8012044:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012046:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012048:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801204e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012052:	2b00      	cmp	r3, #0
 8012054:	d02f      	beq.n	80120b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801205c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012060:	68b9      	ldr	r1, [r7, #8]
 8012062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012064:	f000 f8da 	bl	801221c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206a:	1e5a      	subs	r2, r3, #1
 801206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012078:	d112      	bne.n	80120a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207c:	691b      	ldr	r3, [r3, #16]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d016      	beq.n	80120b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012084:	3310      	adds	r3, #16
 8012086:	4618      	mov	r0, r3
 8012088:	f000 fe68 	bl	8012d5c <xTaskRemoveFromEventList>
 801208c:	4603      	mov	r3, r0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d00e      	beq.n	80120b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d00b      	beq.n	80120b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2201      	movs	r2, #1
 801209c:	601a      	str	r2, [r3, #0]
 801209e:	e007      	b.n	80120b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80120a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120a4:	3301      	adds	r3, #1
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	b25a      	sxtb	r2, r3
 80120aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80120b0:	2301      	movs	r3, #1
 80120b2:	637b      	str	r3, [r7, #52]	; 0x34
 80120b4:	e001      	b.n	80120ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80120b6:	2300      	movs	r3, #0
 80120b8:	637b      	str	r3, [r7, #52]	; 0x34
 80120ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	f383 8811 	msr	BASEPRI, r3
}
 80120c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80120c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3738      	adds	r7, #56	; 0x38
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d10a      	bne.n	80120f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80120de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e2:	f383 8811 	msr	BASEPRI, r3
 80120e6:	f3bf 8f6f 	isb	sy
 80120ea:	f3bf 8f4f 	dsb	sy
 80120ee:	60bb      	str	r3, [r7, #8]
}
 80120f0:	bf00      	nop
 80120f2:	e7fe      	b.n	80120f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80120f4:	f001 fde6 	bl	8013cc4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80120fe:	f001 fe11 	bl	8013d24 <vPortExitCritical>

	return uxReturn;
 8012102:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012104:	4618      	mov	r0, r3
 8012106:	3710      	adds	r7, #16
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801210c:	b480      	push	{r7}
 801210e:	b087      	sub	sp, #28
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10a      	bne.n	8012134 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	60fb      	str	r3, [r7, #12]
}
 8012130:	bf00      	nop
 8012132:	e7fe      	b.n	8012132 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012138:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801213a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801213c:	4618      	mov	r0, r3
 801213e:	371c      	adds	r7, #28
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr

08012148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b086      	sub	sp, #24
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012154:	2300      	movs	r3, #0
 8012156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801215c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012162:	2b00      	cmp	r3, #0
 8012164:	d10d      	bne.n	8012182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d14d      	bne.n	801220a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	689b      	ldr	r3, [r3, #8]
 8012172:	4618      	mov	r0, r3
 8012174:	f001 f830 	bl	80131d8 <xTaskPriorityDisinherit>
 8012178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2200      	movs	r2, #0
 801217e:	609a      	str	r2, [r3, #8]
 8012180:	e043      	b.n	801220a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d119      	bne.n	80121bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	6858      	ldr	r0, [r3, #4]
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012190:	461a      	mov	r2, r3
 8012192:	68b9      	ldr	r1, [r7, #8]
 8012194:	f002 f8dc 	bl	8014350 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	685a      	ldr	r2, [r3, #4]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121a0:	441a      	add	r2, r3
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	685a      	ldr	r2, [r3, #4]
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	689b      	ldr	r3, [r3, #8]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d32b      	bcc.n	801220a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	681a      	ldr	r2, [r3, #0]
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	605a      	str	r2, [r3, #4]
 80121ba:	e026      	b.n	801220a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	68d8      	ldr	r0, [r3, #12]
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121c4:	461a      	mov	r2, r3
 80121c6:	68b9      	ldr	r1, [r7, #8]
 80121c8:	f002 f8c2 	bl	8014350 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	68da      	ldr	r2, [r3, #12]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121d4:	425b      	negs	r3, r3
 80121d6:	441a      	add	r2, r3
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	68da      	ldr	r2, [r3, #12]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d207      	bcs.n	80121f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	689a      	ldr	r2, [r3, #8]
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121f0:	425b      	negs	r3, r3
 80121f2:	441a      	add	r2, r3
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2b02      	cmp	r3, #2
 80121fc:	d105      	bne.n	801220a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d002      	beq.n	801220a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	3b01      	subs	r3, #1
 8012208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	1c5a      	adds	r2, r3, #1
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012212:	697b      	ldr	r3, [r7, #20]
}
 8012214:	4618      	mov	r0, r3
 8012216:	3718      	adds	r7, #24
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801222a:	2b00      	cmp	r3, #0
 801222c:	d018      	beq.n	8012260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	68da      	ldr	r2, [r3, #12]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012236:	441a      	add	r2, r3
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	68da      	ldr	r2, [r3, #12]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	689b      	ldr	r3, [r3, #8]
 8012244:	429a      	cmp	r2, r3
 8012246:	d303      	bcc.n	8012250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681a      	ldr	r2, [r3, #0]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	68d9      	ldr	r1, [r3, #12]
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012258:	461a      	mov	r2, r3
 801225a:	6838      	ldr	r0, [r7, #0]
 801225c:	f002 f878 	bl	8014350 <memcpy>
	}
}
 8012260:	bf00      	nop
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012270:	f001 fd28 	bl	8013cc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801227a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801227c:	e011      	b.n	80122a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012282:	2b00      	cmp	r3, #0
 8012284:	d012      	beq.n	80122ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	3324      	adds	r3, #36	; 0x24
 801228a:	4618      	mov	r0, r3
 801228c:	f000 fd66 	bl	8012d5c <xTaskRemoveFromEventList>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d001      	beq.n	801229a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012296:	f000 fe9f 	bl	8012fd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801229a:	7bfb      	ldrb	r3, [r7, #15]
 801229c:	3b01      	subs	r3, #1
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80122a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	dce9      	bgt.n	801227e <prvUnlockQueue+0x16>
 80122aa:	e000      	b.n	80122ae <prvUnlockQueue+0x46>
					break;
 80122ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	22ff      	movs	r2, #255	; 0xff
 80122b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80122b6:	f001 fd35 	bl	8013d24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80122ba:	f001 fd03 	bl	8013cc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80122c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80122c6:	e011      	b.n	80122ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	691b      	ldr	r3, [r3, #16]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d012      	beq.n	80122f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	3310      	adds	r3, #16
 80122d4:	4618      	mov	r0, r3
 80122d6:	f000 fd41 	bl	8012d5c <xTaskRemoveFromEventList>
 80122da:	4603      	mov	r3, r0
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d001      	beq.n	80122e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80122e0:	f000 fe7a 	bl	8012fd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80122e4:	7bbb      	ldrb	r3, [r7, #14]
 80122e6:	3b01      	subs	r3, #1
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80122ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	dce9      	bgt.n	80122c8 <prvUnlockQueue+0x60>
 80122f4:	e000      	b.n	80122f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80122f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	22ff      	movs	r2, #255	; 0xff
 80122fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012300:	f001 fd10 	bl	8013d24 <vPortExitCritical>
}
 8012304:	bf00      	nop
 8012306:	3710      	adds	r7, #16
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b084      	sub	sp, #16
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012314:	f001 fcd6 	bl	8013cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801231c:	2b00      	cmp	r3, #0
 801231e:	d102      	bne.n	8012326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012320:	2301      	movs	r3, #1
 8012322:	60fb      	str	r3, [r7, #12]
 8012324:	e001      	b.n	801232a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012326:	2300      	movs	r3, #0
 8012328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801232a:	f001 fcfb 	bl	8013d24 <vPortExitCritical>

	return xReturn;
 801232e:	68fb      	ldr	r3, [r7, #12]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3710      	adds	r7, #16
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012340:	f001 fcc0 	bl	8013cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801234c:	429a      	cmp	r2, r3
 801234e:	d102      	bne.n	8012356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012350:	2301      	movs	r3, #1
 8012352:	60fb      	str	r3, [r7, #12]
 8012354:	e001      	b.n	801235a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012356:	2300      	movs	r3, #0
 8012358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801235a:	f001 fce3 	bl	8013d24 <vPortExitCritical>

	return xReturn;
 801235e:	68fb      	ldr	r3, [r7, #12]
}
 8012360:	4618      	mov	r0, r3
 8012362:	3710      	adds	r7, #16
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012368:	b480      	push	{r7}
 801236a:	b085      	sub	sp, #20
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012372:	2300      	movs	r3, #0
 8012374:	60fb      	str	r3, [r7, #12]
 8012376:	e014      	b.n	80123a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012378:	4a0f      	ldr	r2, [pc, #60]	; (80123b8 <vQueueAddToRegistry+0x50>)
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d10b      	bne.n	801239c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012384:	490c      	ldr	r1, [pc, #48]	; (80123b8 <vQueueAddToRegistry+0x50>)
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	683a      	ldr	r2, [r7, #0]
 801238a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801238e:	4a0a      	ldr	r2, [pc, #40]	; (80123b8 <vQueueAddToRegistry+0x50>)
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	00db      	lsls	r3, r3, #3
 8012394:	4413      	add	r3, r2
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801239a:	e006      	b.n	80123aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	3301      	adds	r3, #1
 80123a0:	60fb      	str	r3, [r7, #12]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2b07      	cmp	r3, #7
 80123a6:	d9e7      	bls.n	8012378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80123a8:	bf00      	nop
 80123aa:	bf00      	nop
 80123ac:	3714      	adds	r7, #20
 80123ae:	46bd      	mov	sp, r7
 80123b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b4:	4770      	bx	lr
 80123b6:	bf00      	nop
 80123b8:	24000e38 	.word	0x24000e38

080123bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80123cc:	f001 fc7a 	bl	8013cc4 <vPortEnterCritical>
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123d6:	b25b      	sxtb	r3, r3
 80123d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123dc:	d103      	bne.n	80123e6 <vQueueWaitForMessageRestricted+0x2a>
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	2200      	movs	r2, #0
 80123e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123ec:	b25b      	sxtb	r3, r3
 80123ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123f2:	d103      	bne.n	80123fc <vQueueWaitForMessageRestricted+0x40>
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	2200      	movs	r2, #0
 80123f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123fc:	f001 fc92 	bl	8013d24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012404:	2b00      	cmp	r3, #0
 8012406:	d106      	bne.n	8012416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	3324      	adds	r3, #36	; 0x24
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	68b9      	ldr	r1, [r7, #8]
 8012410:	4618      	mov	r0, r3
 8012412:	f000 fc77 	bl	8012d04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012416:	6978      	ldr	r0, [r7, #20]
 8012418:	f7ff ff26 	bl	8012268 <prvUnlockQueue>
	}
 801241c:	bf00      	nop
 801241e:	3718      	adds	r7, #24
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012424:	b580      	push	{r7, lr}
 8012426:	b08e      	sub	sp, #56	; 0x38
 8012428:	af04      	add	r7, sp, #16
 801242a:	60f8      	str	r0, [r7, #12]
 801242c:	60b9      	str	r1, [r7, #8]
 801242e:	607a      	str	r2, [r7, #4]
 8012430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10a      	bne.n	801244e <xTaskCreateStatic+0x2a>
	__asm volatile
 8012438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801243c:	f383 8811 	msr	BASEPRI, r3
 8012440:	f3bf 8f6f 	isb	sy
 8012444:	f3bf 8f4f 	dsb	sy
 8012448:	623b      	str	r3, [r7, #32]
}
 801244a:	bf00      	nop
 801244c:	e7fe      	b.n	801244c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012450:	2b00      	cmp	r3, #0
 8012452:	d10a      	bne.n	801246a <xTaskCreateStatic+0x46>
	__asm volatile
 8012454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	61fb      	str	r3, [r7, #28]
}
 8012466:	bf00      	nop
 8012468:	e7fe      	b.n	8012468 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801246a:	235c      	movs	r3, #92	; 0x5c
 801246c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	2b5c      	cmp	r3, #92	; 0x5c
 8012472:	d00a      	beq.n	801248a <xTaskCreateStatic+0x66>
	__asm volatile
 8012474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012478:	f383 8811 	msr	BASEPRI, r3
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	f3bf 8f4f 	dsb	sy
 8012484:	61bb      	str	r3, [r7, #24]
}
 8012486:	bf00      	nop
 8012488:	e7fe      	b.n	8012488 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801248a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248e:	2b00      	cmp	r3, #0
 8012490:	d01e      	beq.n	80124d0 <xTaskCreateStatic+0xac>
 8012492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012494:	2b00      	cmp	r3, #0
 8012496:	d01b      	beq.n	80124d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801249a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80124a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a4:	2202      	movs	r2, #2
 80124a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80124aa:	2300      	movs	r3, #0
 80124ac:	9303      	str	r3, [sp, #12]
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	9302      	str	r3, [sp, #8]
 80124b2:	f107 0314 	add.w	r3, r7, #20
 80124b6:	9301      	str	r3, [sp, #4]
 80124b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	687a      	ldr	r2, [r7, #4]
 80124c0:	68b9      	ldr	r1, [r7, #8]
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f000 f850 	bl	8012568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80124c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124ca:	f000 f8dd 	bl	8012688 <prvAddNewTaskToReadyList>
 80124ce:	e001      	b.n	80124d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80124d0:	2300      	movs	r3, #0
 80124d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80124d4:	697b      	ldr	r3, [r7, #20]
	}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3728      	adds	r7, #40	; 0x28
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80124de:	b580      	push	{r7, lr}
 80124e0:	b08c      	sub	sp, #48	; 0x30
 80124e2:	af04      	add	r7, sp, #16
 80124e4:	60f8      	str	r0, [r7, #12]
 80124e6:	60b9      	str	r1, [r7, #8]
 80124e8:	603b      	str	r3, [r7, #0]
 80124ea:	4613      	mov	r3, r2
 80124ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80124ee:	88fb      	ldrh	r3, [r7, #6]
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	4618      	mov	r0, r3
 80124f4:	f001 fd08 	bl	8013f08 <pvPortMalloc>
 80124f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d00e      	beq.n	801251e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012500:	205c      	movs	r0, #92	; 0x5c
 8012502:	f001 fd01 	bl	8013f08 <pvPortMalloc>
 8012506:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d003      	beq.n	8012516 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	697a      	ldr	r2, [r7, #20]
 8012512:	631a      	str	r2, [r3, #48]	; 0x30
 8012514:	e005      	b.n	8012522 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012516:	6978      	ldr	r0, [r7, #20]
 8012518:	f001 fdc2 	bl	80140a0 <vPortFree>
 801251c:	e001      	b.n	8012522 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801251e:	2300      	movs	r3, #0
 8012520:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d017      	beq.n	8012558 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	2200      	movs	r2, #0
 801252c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012530:	88fa      	ldrh	r2, [r7, #6]
 8012532:	2300      	movs	r3, #0
 8012534:	9303      	str	r3, [sp, #12]
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	9302      	str	r3, [sp, #8]
 801253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253c:	9301      	str	r3, [sp, #4]
 801253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	68b9      	ldr	r1, [r7, #8]
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f000 f80e 	bl	8012568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801254c:	69f8      	ldr	r0, [r7, #28]
 801254e:	f000 f89b 	bl	8012688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012552:	2301      	movs	r3, #1
 8012554:	61bb      	str	r3, [r7, #24]
 8012556:	e002      	b.n	801255e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801255c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801255e:	69bb      	ldr	r3, [r7, #24]
	}
 8012560:	4618      	mov	r0, r3
 8012562:	3720      	adds	r7, #32
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b088      	sub	sp, #32
 801256c:	af00      	add	r7, sp, #0
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	60b9      	str	r1, [r7, #8]
 8012572:	607a      	str	r2, [r7, #4]
 8012574:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012578:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	461a      	mov	r2, r3
 8012580:	21a5      	movs	r1, #165	; 0xa5
 8012582:	f001 fef3 	bl	801436c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801258a:	6879      	ldr	r1, [r7, #4]
 801258c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012590:	440b      	add	r3, r1
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	4413      	add	r3, r2
 8012596:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	f023 0307 	bic.w	r3, r3, #7
 801259e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	f003 0307 	and.w	r3, r3, #7
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d00a      	beq.n	80125c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80125aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ae:	f383 8811 	msr	BASEPRI, r3
 80125b2:	f3bf 8f6f 	isb	sy
 80125b6:	f3bf 8f4f 	dsb	sy
 80125ba:	617b      	str	r3, [r7, #20]
}
 80125bc:	bf00      	nop
 80125be:	e7fe      	b.n	80125be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d01f      	beq.n	8012606 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80125c6:	2300      	movs	r3, #0
 80125c8:	61fb      	str	r3, [r7, #28]
 80125ca:	e012      	b.n	80125f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80125cc:	68ba      	ldr	r2, [r7, #8]
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	4413      	add	r3, r2
 80125d2:	7819      	ldrb	r1, [r3, #0]
 80125d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	4413      	add	r3, r2
 80125da:	3334      	adds	r3, #52	; 0x34
 80125dc:	460a      	mov	r2, r1
 80125de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80125e0:	68ba      	ldr	r2, [r7, #8]
 80125e2:	69fb      	ldr	r3, [r7, #28]
 80125e4:	4413      	add	r3, r2
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d006      	beq.n	80125fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	3301      	adds	r3, #1
 80125f0:	61fb      	str	r3, [r7, #28]
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	2b0f      	cmp	r3, #15
 80125f6:	d9e9      	bls.n	80125cc <prvInitialiseNewTask+0x64>
 80125f8:	e000      	b.n	80125fc <prvInitialiseNewTask+0x94>
			{
				break;
 80125fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80125fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fe:	2200      	movs	r2, #0
 8012600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012604:	e003      	b.n	801260e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012608:	2200      	movs	r2, #0
 801260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012610:	2b37      	cmp	r3, #55	; 0x37
 8012612:	d901      	bls.n	8012618 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012614:	2337      	movs	r3, #55	; 0x37
 8012616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801261c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012622:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012626:	2200      	movs	r2, #0
 8012628:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262c:	3304      	adds	r3, #4
 801262e:	4618      	mov	r0, r3
 8012630:	f7ff f882 	bl	8011738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012636:	3318      	adds	r3, #24
 8012638:	4618      	mov	r0, r3
 801263a:	f7ff f87d 	bl	8011738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012646:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012656:	2200      	movs	r2, #0
 8012658:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265c:	2200      	movs	r2, #0
 801265e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012662:	683a      	ldr	r2, [r7, #0]
 8012664:	68f9      	ldr	r1, [r7, #12]
 8012666:	69b8      	ldr	r0, [r7, #24]
 8012668:	f001 f9fe 	bl	8013a68 <pxPortInitialiseStack>
 801266c:	4602      	mov	r2, r0
 801266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012670:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012674:	2b00      	cmp	r3, #0
 8012676:	d002      	beq.n	801267e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801267c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801267e:	bf00      	nop
 8012680:	3720      	adds	r7, #32
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
	...

08012688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012690:	f001 fb18 	bl	8013cc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012694:	4b2d      	ldr	r3, [pc, #180]	; (801274c <prvAddNewTaskToReadyList+0xc4>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	3301      	adds	r3, #1
 801269a:	4a2c      	ldr	r2, [pc, #176]	; (801274c <prvAddNewTaskToReadyList+0xc4>)
 801269c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801269e:	4b2c      	ldr	r3, [pc, #176]	; (8012750 <prvAddNewTaskToReadyList+0xc8>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d109      	bne.n	80126ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80126a6:	4a2a      	ldr	r2, [pc, #168]	; (8012750 <prvAddNewTaskToReadyList+0xc8>)
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80126ac:	4b27      	ldr	r3, [pc, #156]	; (801274c <prvAddNewTaskToReadyList+0xc4>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d110      	bne.n	80126d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80126b4:	f000 fcb4 	bl	8013020 <prvInitialiseTaskLists>
 80126b8:	e00d      	b.n	80126d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80126ba:	4b26      	ldr	r3, [pc, #152]	; (8012754 <prvAddNewTaskToReadyList+0xcc>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d109      	bne.n	80126d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80126c2:	4b23      	ldr	r3, [pc, #140]	; (8012750 <prvAddNewTaskToReadyList+0xc8>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d802      	bhi.n	80126d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80126d0:	4a1f      	ldr	r2, [pc, #124]	; (8012750 <prvAddNewTaskToReadyList+0xc8>)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80126d6:	4b20      	ldr	r3, [pc, #128]	; (8012758 <prvAddNewTaskToReadyList+0xd0>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	3301      	adds	r3, #1
 80126dc:	4a1e      	ldr	r2, [pc, #120]	; (8012758 <prvAddNewTaskToReadyList+0xd0>)
 80126de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80126e0:	4b1d      	ldr	r3, [pc, #116]	; (8012758 <prvAddNewTaskToReadyList+0xd0>)
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126ec:	4b1b      	ldr	r3, [pc, #108]	; (801275c <prvAddNewTaskToReadyList+0xd4>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d903      	bls.n	80126fc <prvAddNewTaskToReadyList+0x74>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f8:	4a18      	ldr	r2, [pc, #96]	; (801275c <prvAddNewTaskToReadyList+0xd4>)
 80126fa:	6013      	str	r3, [r2, #0]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012700:	4613      	mov	r3, r2
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	4413      	add	r3, r2
 8012706:	009b      	lsls	r3, r3, #2
 8012708:	4a15      	ldr	r2, [pc, #84]	; (8012760 <prvAddNewTaskToReadyList+0xd8>)
 801270a:	441a      	add	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	3304      	adds	r3, #4
 8012710:	4619      	mov	r1, r3
 8012712:	4610      	mov	r0, r2
 8012714:	f7ff f81d 	bl	8011752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012718:	f001 fb04 	bl	8013d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801271c:	4b0d      	ldr	r3, [pc, #52]	; (8012754 <prvAddNewTaskToReadyList+0xcc>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00e      	beq.n	8012742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012724:	4b0a      	ldr	r3, [pc, #40]	; (8012750 <prvAddNewTaskToReadyList+0xc8>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801272e:	429a      	cmp	r2, r3
 8012730:	d207      	bcs.n	8012742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012732:	4b0c      	ldr	r3, [pc, #48]	; (8012764 <prvAddNewTaskToReadyList+0xdc>)
 8012734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012738:	601a      	str	r2, [r3, #0]
 801273a:	f3bf 8f4f 	dsb	sy
 801273e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012742:	bf00      	nop
 8012744:	3708      	adds	r7, #8
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	2400134c 	.word	0x2400134c
 8012750:	24000e78 	.word	0x24000e78
 8012754:	24001358 	.word	0x24001358
 8012758:	24001368 	.word	0x24001368
 801275c:	24001354 	.word	0x24001354
 8012760:	24000e7c 	.word	0x24000e7c
 8012764:	e000ed04 	.word	0xe000ed04

08012768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012770:	2300      	movs	r3, #0
 8012772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d017      	beq.n	80127aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801277a:	4b13      	ldr	r3, [pc, #76]	; (80127c8 <vTaskDelay+0x60>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00a      	beq.n	8012798 <vTaskDelay+0x30>
	__asm volatile
 8012782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012786:	f383 8811 	msr	BASEPRI, r3
 801278a:	f3bf 8f6f 	isb	sy
 801278e:	f3bf 8f4f 	dsb	sy
 8012792:	60bb      	str	r3, [r7, #8]
}
 8012794:	bf00      	nop
 8012796:	e7fe      	b.n	8012796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012798:	f000 f880 	bl	801289c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801279c:	2100      	movs	r1, #0
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f000 fda0 	bl	80132e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80127a4:	f000 f888 	bl	80128b8 <xTaskResumeAll>
 80127a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d107      	bne.n	80127c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80127b0:	4b06      	ldr	r3, [pc, #24]	; (80127cc <vTaskDelay+0x64>)
 80127b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127b6:	601a      	str	r2, [r3, #0]
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80127c0:	bf00      	nop
 80127c2:	3710      	adds	r7, #16
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}
 80127c8:	24001374 	.word	0x24001374
 80127cc:	e000ed04 	.word	0xe000ed04

080127d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b08a      	sub	sp, #40	; 0x28
 80127d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80127d6:	2300      	movs	r3, #0
 80127d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80127da:	2300      	movs	r3, #0
 80127dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80127de:	463a      	mov	r2, r7
 80127e0:	1d39      	adds	r1, r7, #4
 80127e2:	f107 0308 	add.w	r3, r7, #8
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fe fd64 	bl	80112b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80127ec:	6839      	ldr	r1, [r7, #0]
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	68ba      	ldr	r2, [r7, #8]
 80127f2:	9202      	str	r2, [sp, #8]
 80127f4:	9301      	str	r3, [sp, #4]
 80127f6:	2300      	movs	r3, #0
 80127f8:	9300      	str	r3, [sp, #0]
 80127fa:	2300      	movs	r3, #0
 80127fc:	460a      	mov	r2, r1
 80127fe:	4921      	ldr	r1, [pc, #132]	; (8012884 <vTaskStartScheduler+0xb4>)
 8012800:	4821      	ldr	r0, [pc, #132]	; (8012888 <vTaskStartScheduler+0xb8>)
 8012802:	f7ff fe0f 	bl	8012424 <xTaskCreateStatic>
 8012806:	4603      	mov	r3, r0
 8012808:	4a20      	ldr	r2, [pc, #128]	; (801288c <vTaskStartScheduler+0xbc>)
 801280a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801280c:	4b1f      	ldr	r3, [pc, #124]	; (801288c <vTaskStartScheduler+0xbc>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d002      	beq.n	801281a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012814:	2301      	movs	r3, #1
 8012816:	617b      	str	r3, [r7, #20]
 8012818:	e001      	b.n	801281e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801281a:	2300      	movs	r3, #0
 801281c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	2b01      	cmp	r3, #1
 8012822:	d102      	bne.n	801282a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012824:	f000 fdb2 	bl	801338c <xTimerCreateTimerTask>
 8012828:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	2b01      	cmp	r3, #1
 801282e:	d116      	bne.n	801285e <vTaskStartScheduler+0x8e>
	__asm volatile
 8012830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012834:	f383 8811 	msr	BASEPRI, r3
 8012838:	f3bf 8f6f 	isb	sy
 801283c:	f3bf 8f4f 	dsb	sy
 8012840:	613b      	str	r3, [r7, #16]
}
 8012842:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012844:	4b12      	ldr	r3, [pc, #72]	; (8012890 <vTaskStartScheduler+0xc0>)
 8012846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801284a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801284c:	4b11      	ldr	r3, [pc, #68]	; (8012894 <vTaskStartScheduler+0xc4>)
 801284e:	2201      	movs	r2, #1
 8012850:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012852:	4b11      	ldr	r3, [pc, #68]	; (8012898 <vTaskStartScheduler+0xc8>)
 8012854:	2200      	movs	r2, #0
 8012856:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012858:	f001 f992 	bl	8013b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801285c:	e00e      	b.n	801287c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012864:	d10a      	bne.n	801287c <vTaskStartScheduler+0xac>
	__asm volatile
 8012866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286a:	f383 8811 	msr	BASEPRI, r3
 801286e:	f3bf 8f6f 	isb	sy
 8012872:	f3bf 8f4f 	dsb	sy
 8012876:	60fb      	str	r3, [r7, #12]
}
 8012878:	bf00      	nop
 801287a:	e7fe      	b.n	801287a <vTaskStartScheduler+0xaa>
}
 801287c:	bf00      	nop
 801287e:	3718      	adds	r7, #24
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	080155a8 	.word	0x080155a8
 8012888:	08012ff1 	.word	0x08012ff1
 801288c:	24001370 	.word	0x24001370
 8012890:	2400136c 	.word	0x2400136c
 8012894:	24001358 	.word	0x24001358
 8012898:	24001350 	.word	0x24001350

0801289c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801289c:	b480      	push	{r7}
 801289e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80128a0:	4b04      	ldr	r3, [pc, #16]	; (80128b4 <vTaskSuspendAll+0x18>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	3301      	adds	r3, #1
 80128a6:	4a03      	ldr	r2, [pc, #12]	; (80128b4 <vTaskSuspendAll+0x18>)
 80128a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80128aa:	bf00      	nop
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr
 80128b4:	24001374 	.word	0x24001374

080128b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80128be:	2300      	movs	r3, #0
 80128c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80128c2:	2300      	movs	r3, #0
 80128c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80128c6:	4b42      	ldr	r3, [pc, #264]	; (80129d0 <xTaskResumeAll+0x118>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d10a      	bne.n	80128e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80128ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d2:	f383 8811 	msr	BASEPRI, r3
 80128d6:	f3bf 8f6f 	isb	sy
 80128da:	f3bf 8f4f 	dsb	sy
 80128de:	603b      	str	r3, [r7, #0]
}
 80128e0:	bf00      	nop
 80128e2:	e7fe      	b.n	80128e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80128e4:	f001 f9ee 	bl	8013cc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80128e8:	4b39      	ldr	r3, [pc, #228]	; (80129d0 <xTaskResumeAll+0x118>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	3b01      	subs	r3, #1
 80128ee:	4a38      	ldr	r2, [pc, #224]	; (80129d0 <xTaskResumeAll+0x118>)
 80128f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80128f2:	4b37      	ldr	r3, [pc, #220]	; (80129d0 <xTaskResumeAll+0x118>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d162      	bne.n	80129c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80128fa:	4b36      	ldr	r3, [pc, #216]	; (80129d4 <xTaskResumeAll+0x11c>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d05e      	beq.n	80129c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012902:	e02f      	b.n	8012964 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012904:	4b34      	ldr	r3, [pc, #208]	; (80129d8 <xTaskResumeAll+0x120>)
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	68db      	ldr	r3, [r3, #12]
 801290a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	3318      	adds	r3, #24
 8012910:	4618      	mov	r0, r3
 8012912:	f7fe ff7b 	bl	801180c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	3304      	adds	r3, #4
 801291a:	4618      	mov	r0, r3
 801291c:	f7fe ff76 	bl	801180c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012924:	4b2d      	ldr	r3, [pc, #180]	; (80129dc <xTaskResumeAll+0x124>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	429a      	cmp	r2, r3
 801292a:	d903      	bls.n	8012934 <xTaskResumeAll+0x7c>
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012930:	4a2a      	ldr	r2, [pc, #168]	; (80129dc <xTaskResumeAll+0x124>)
 8012932:	6013      	str	r3, [r2, #0]
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012938:	4613      	mov	r3, r2
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	4413      	add	r3, r2
 801293e:	009b      	lsls	r3, r3, #2
 8012940:	4a27      	ldr	r2, [pc, #156]	; (80129e0 <xTaskResumeAll+0x128>)
 8012942:	441a      	add	r2, r3
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	3304      	adds	r3, #4
 8012948:	4619      	mov	r1, r3
 801294a:	4610      	mov	r0, r2
 801294c:	f7fe ff01 	bl	8011752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012954:	4b23      	ldr	r3, [pc, #140]	; (80129e4 <xTaskResumeAll+0x12c>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801295a:	429a      	cmp	r2, r3
 801295c:	d302      	bcc.n	8012964 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801295e:	4b22      	ldr	r3, [pc, #136]	; (80129e8 <xTaskResumeAll+0x130>)
 8012960:	2201      	movs	r2, #1
 8012962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012964:	4b1c      	ldr	r3, [pc, #112]	; (80129d8 <xTaskResumeAll+0x120>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d1cb      	bne.n	8012904 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d001      	beq.n	8012976 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012972:	f000 fbf3 	bl	801315c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012976:	4b1d      	ldr	r3, [pc, #116]	; (80129ec <xTaskResumeAll+0x134>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d010      	beq.n	80129a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012982:	f000 f847 	bl	8012a14 <xTaskIncrementTick>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d002      	beq.n	8012992 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801298c:	4b16      	ldr	r3, [pc, #88]	; (80129e8 <xTaskResumeAll+0x130>)
 801298e:	2201      	movs	r2, #1
 8012990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	3b01      	subs	r3, #1
 8012996:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d1f1      	bne.n	8012982 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801299e:	4b13      	ldr	r3, [pc, #76]	; (80129ec <xTaskResumeAll+0x134>)
 80129a0:	2200      	movs	r2, #0
 80129a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80129a4:	4b10      	ldr	r3, [pc, #64]	; (80129e8 <xTaskResumeAll+0x130>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d009      	beq.n	80129c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80129ac:	2301      	movs	r3, #1
 80129ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80129b0:	4b0f      	ldr	r3, [pc, #60]	; (80129f0 <xTaskResumeAll+0x138>)
 80129b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129b6:	601a      	str	r2, [r3, #0]
 80129b8:	f3bf 8f4f 	dsb	sy
 80129bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80129c0:	f001 f9b0 	bl	8013d24 <vPortExitCritical>

	return xAlreadyYielded;
 80129c4:	68bb      	ldr	r3, [r7, #8]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3710      	adds	r7, #16
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	24001374 	.word	0x24001374
 80129d4:	2400134c 	.word	0x2400134c
 80129d8:	2400130c 	.word	0x2400130c
 80129dc:	24001354 	.word	0x24001354
 80129e0:	24000e7c 	.word	0x24000e7c
 80129e4:	24000e78 	.word	0x24000e78
 80129e8:	24001360 	.word	0x24001360
 80129ec:	2400135c 	.word	0x2400135c
 80129f0:	e000ed04 	.word	0xe000ed04

080129f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80129fa:	4b05      	ldr	r3, [pc, #20]	; (8012a10 <xTaskGetTickCount+0x1c>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012a00:	687b      	ldr	r3, [r7, #4]
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	370c      	adds	r7, #12
 8012a06:	46bd      	mov	sp, r7
 8012a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop
 8012a10:	24001350 	.word	0x24001350

08012a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b086      	sub	sp, #24
 8012a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a1e:	4b4f      	ldr	r3, [pc, #316]	; (8012b5c <xTaskIncrementTick+0x148>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	f040 808f 	bne.w	8012b46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012a28:	4b4d      	ldr	r3, [pc, #308]	; (8012b60 <xTaskIncrementTick+0x14c>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012a30:	4a4b      	ldr	r2, [pc, #300]	; (8012b60 <xTaskIncrementTick+0x14c>)
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d120      	bne.n	8012a7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012a3c:	4b49      	ldr	r3, [pc, #292]	; (8012b64 <xTaskIncrementTick+0x150>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d00a      	beq.n	8012a5c <xTaskIncrementTick+0x48>
	__asm volatile
 8012a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4a:	f383 8811 	msr	BASEPRI, r3
 8012a4e:	f3bf 8f6f 	isb	sy
 8012a52:	f3bf 8f4f 	dsb	sy
 8012a56:	603b      	str	r3, [r7, #0]
}
 8012a58:	bf00      	nop
 8012a5a:	e7fe      	b.n	8012a5a <xTaskIncrementTick+0x46>
 8012a5c:	4b41      	ldr	r3, [pc, #260]	; (8012b64 <xTaskIncrementTick+0x150>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	60fb      	str	r3, [r7, #12]
 8012a62:	4b41      	ldr	r3, [pc, #260]	; (8012b68 <xTaskIncrementTick+0x154>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	4a3f      	ldr	r2, [pc, #252]	; (8012b64 <xTaskIncrementTick+0x150>)
 8012a68:	6013      	str	r3, [r2, #0]
 8012a6a:	4a3f      	ldr	r2, [pc, #252]	; (8012b68 <xTaskIncrementTick+0x154>)
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	6013      	str	r3, [r2, #0]
 8012a70:	4b3e      	ldr	r3, [pc, #248]	; (8012b6c <xTaskIncrementTick+0x158>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	3301      	adds	r3, #1
 8012a76:	4a3d      	ldr	r2, [pc, #244]	; (8012b6c <xTaskIncrementTick+0x158>)
 8012a78:	6013      	str	r3, [r2, #0]
 8012a7a:	f000 fb6f 	bl	801315c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012a7e:	4b3c      	ldr	r3, [pc, #240]	; (8012b70 <xTaskIncrementTick+0x15c>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	693a      	ldr	r2, [r7, #16]
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d349      	bcc.n	8012b1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a88:	4b36      	ldr	r3, [pc, #216]	; (8012b64 <xTaskIncrementTick+0x150>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d104      	bne.n	8012a9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a92:	4b37      	ldr	r3, [pc, #220]	; (8012b70 <xTaskIncrementTick+0x15c>)
 8012a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a98:	601a      	str	r2, [r3, #0]
					break;
 8012a9a:	e03f      	b.n	8012b1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a9c:	4b31      	ldr	r3, [pc, #196]	; (8012b64 <xTaskIncrementTick+0x150>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	68db      	ldr	r3, [r3, #12]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012aac:	693a      	ldr	r2, [r7, #16]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d203      	bcs.n	8012abc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012ab4:	4a2e      	ldr	r2, [pc, #184]	; (8012b70 <xTaskIncrementTick+0x15c>)
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012aba:	e02f      	b.n	8012b1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	3304      	adds	r3, #4
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7fe fea3 	bl	801180c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d004      	beq.n	8012ad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	3318      	adds	r3, #24
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7fe fe9a 	bl	801180c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012adc:	4b25      	ldr	r3, [pc, #148]	; (8012b74 <xTaskIncrementTick+0x160>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d903      	bls.n	8012aec <xTaskIncrementTick+0xd8>
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae8:	4a22      	ldr	r2, [pc, #136]	; (8012b74 <xTaskIncrementTick+0x160>)
 8012aea:	6013      	str	r3, [r2, #0]
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012af0:	4613      	mov	r3, r2
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	4413      	add	r3, r2
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	4a1f      	ldr	r2, [pc, #124]	; (8012b78 <xTaskIncrementTick+0x164>)
 8012afa:	441a      	add	r2, r3
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	3304      	adds	r3, #4
 8012b00:	4619      	mov	r1, r3
 8012b02:	4610      	mov	r0, r2
 8012b04:	f7fe fe25 	bl	8011752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b0c:	4b1b      	ldr	r3, [pc, #108]	; (8012b7c <xTaskIncrementTick+0x168>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d3b8      	bcc.n	8012a88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012b16:	2301      	movs	r3, #1
 8012b18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b1a:	e7b5      	b.n	8012a88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012b1c:	4b17      	ldr	r3, [pc, #92]	; (8012b7c <xTaskIncrementTick+0x168>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b22:	4915      	ldr	r1, [pc, #84]	; (8012b78 <xTaskIncrementTick+0x164>)
 8012b24:	4613      	mov	r3, r2
 8012b26:	009b      	lsls	r3, r3, #2
 8012b28:	4413      	add	r3, r2
 8012b2a:	009b      	lsls	r3, r3, #2
 8012b2c:	440b      	add	r3, r1
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2b01      	cmp	r3, #1
 8012b32:	d901      	bls.n	8012b38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012b34:	2301      	movs	r3, #1
 8012b36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012b38:	4b11      	ldr	r3, [pc, #68]	; (8012b80 <xTaskIncrementTick+0x16c>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d007      	beq.n	8012b50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012b40:	2301      	movs	r3, #1
 8012b42:	617b      	str	r3, [r7, #20]
 8012b44:	e004      	b.n	8012b50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012b46:	4b0f      	ldr	r3, [pc, #60]	; (8012b84 <xTaskIncrementTick+0x170>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	4a0d      	ldr	r2, [pc, #52]	; (8012b84 <xTaskIncrementTick+0x170>)
 8012b4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012b50:	697b      	ldr	r3, [r7, #20]
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3718      	adds	r7, #24
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	24001374 	.word	0x24001374
 8012b60:	24001350 	.word	0x24001350
 8012b64:	24001304 	.word	0x24001304
 8012b68:	24001308 	.word	0x24001308
 8012b6c:	24001364 	.word	0x24001364
 8012b70:	2400136c 	.word	0x2400136c
 8012b74:	24001354 	.word	0x24001354
 8012b78:	24000e7c 	.word	0x24000e7c
 8012b7c:	24000e78 	.word	0x24000e78
 8012b80:	24001360 	.word	0x24001360
 8012b84:	2400135c 	.word	0x2400135c

08012b88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b085      	sub	sp, #20
 8012b8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012b8e:	4b28      	ldr	r3, [pc, #160]	; (8012c30 <vTaskSwitchContext+0xa8>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d003      	beq.n	8012b9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012b96:	4b27      	ldr	r3, [pc, #156]	; (8012c34 <vTaskSwitchContext+0xac>)
 8012b98:	2201      	movs	r2, #1
 8012b9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012b9c:	e041      	b.n	8012c22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012b9e:	4b25      	ldr	r3, [pc, #148]	; (8012c34 <vTaskSwitchContext+0xac>)
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ba4:	4b24      	ldr	r3, [pc, #144]	; (8012c38 <vTaskSwitchContext+0xb0>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	60fb      	str	r3, [r7, #12]
 8012baa:	e010      	b.n	8012bce <vTaskSwitchContext+0x46>
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d10a      	bne.n	8012bc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8012bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb6:	f383 8811 	msr	BASEPRI, r3
 8012bba:	f3bf 8f6f 	isb	sy
 8012bbe:	f3bf 8f4f 	dsb	sy
 8012bc2:	607b      	str	r3, [r7, #4]
}
 8012bc4:	bf00      	nop
 8012bc6:	e7fe      	b.n	8012bc6 <vTaskSwitchContext+0x3e>
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	60fb      	str	r3, [r7, #12]
 8012bce:	491b      	ldr	r1, [pc, #108]	; (8012c3c <vTaskSwitchContext+0xb4>)
 8012bd0:	68fa      	ldr	r2, [r7, #12]
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	4413      	add	r3, r2
 8012bd8:	009b      	lsls	r3, r3, #2
 8012bda:	440b      	add	r3, r1
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d0e4      	beq.n	8012bac <vTaskSwitchContext+0x24>
 8012be2:	68fa      	ldr	r2, [r7, #12]
 8012be4:	4613      	mov	r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	4413      	add	r3, r2
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	4a13      	ldr	r2, [pc, #76]	; (8012c3c <vTaskSwitchContext+0xb4>)
 8012bee:	4413      	add	r3, r2
 8012bf0:	60bb      	str	r3, [r7, #8]
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	685a      	ldr	r2, [r3, #4]
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	605a      	str	r2, [r3, #4]
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	685a      	ldr	r2, [r3, #4]
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	3308      	adds	r3, #8
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d104      	bne.n	8012c12 <vTaskSwitchContext+0x8a>
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	685a      	ldr	r2, [r3, #4]
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	605a      	str	r2, [r3, #4]
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	68db      	ldr	r3, [r3, #12]
 8012c18:	4a09      	ldr	r2, [pc, #36]	; (8012c40 <vTaskSwitchContext+0xb8>)
 8012c1a:	6013      	str	r3, [r2, #0]
 8012c1c:	4a06      	ldr	r2, [pc, #24]	; (8012c38 <vTaskSwitchContext+0xb0>)
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	6013      	str	r3, [r2, #0]
}
 8012c22:	bf00      	nop
 8012c24:	3714      	adds	r7, #20
 8012c26:	46bd      	mov	sp, r7
 8012c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2c:	4770      	bx	lr
 8012c2e:	bf00      	nop
 8012c30:	24001374 	.word	0x24001374
 8012c34:	24001360 	.word	0x24001360
 8012c38:	24001354 	.word	0x24001354
 8012c3c:	24000e7c 	.word	0x24000e7c
 8012c40:	24000e78 	.word	0x24000e78

08012c44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b084      	sub	sp, #16
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d10a      	bne.n	8012c6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c58:	f383 8811 	msr	BASEPRI, r3
 8012c5c:	f3bf 8f6f 	isb	sy
 8012c60:	f3bf 8f4f 	dsb	sy
 8012c64:	60fb      	str	r3, [r7, #12]
}
 8012c66:	bf00      	nop
 8012c68:	e7fe      	b.n	8012c68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c6a:	4b07      	ldr	r3, [pc, #28]	; (8012c88 <vTaskPlaceOnEventList+0x44>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	3318      	adds	r3, #24
 8012c70:	4619      	mov	r1, r3
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f7fe fd91 	bl	801179a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012c78:	2101      	movs	r1, #1
 8012c7a:	6838      	ldr	r0, [r7, #0]
 8012c7c:	f000 fb32 	bl	80132e4 <prvAddCurrentTaskToDelayedList>
}
 8012c80:	bf00      	nop
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	24000e78 	.word	0x24000e78

08012c8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d10a      	bne.n	8012cb4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	617b      	str	r3, [r7, #20]
}
 8012cb0:	bf00      	nop
 8012cb2:	e7fe      	b.n	8012cb2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8012cb4:	4b11      	ldr	r3, [pc, #68]	; (8012cfc <vTaskPlaceOnUnorderedEventList+0x70>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d10a      	bne.n	8012cd2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc0:	f383 8811 	msr	BASEPRI, r3
 8012cc4:	f3bf 8f6f 	isb	sy
 8012cc8:	f3bf 8f4f 	dsb	sy
 8012ccc:	613b      	str	r3, [r7, #16]
}
 8012cce:	bf00      	nop
 8012cd0:	e7fe      	b.n	8012cd0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012cd2:	4b0b      	ldr	r3, [pc, #44]	; (8012d00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	68ba      	ldr	r2, [r7, #8]
 8012cd8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012cdc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012cde:	4b08      	ldr	r3, [pc, #32]	; (8012d00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	3318      	adds	r3, #24
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	68f8      	ldr	r0, [r7, #12]
 8012ce8:	f7fe fd33 	bl	8011752 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012cec:	2101      	movs	r1, #1
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 faf8 	bl	80132e4 <prvAddCurrentTaskToDelayedList>
}
 8012cf4:	bf00      	nop
 8012cf6:	3718      	adds	r7, #24
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	24001374 	.word	0x24001374
 8012d00:	24000e78 	.word	0x24000e78

08012d04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b086      	sub	sp, #24
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	60f8      	str	r0, [r7, #12]
 8012d0c:	60b9      	str	r1, [r7, #8]
 8012d0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d10a      	bne.n	8012d2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1a:	f383 8811 	msr	BASEPRI, r3
 8012d1e:	f3bf 8f6f 	isb	sy
 8012d22:	f3bf 8f4f 	dsb	sy
 8012d26:	617b      	str	r3, [r7, #20]
}
 8012d28:	bf00      	nop
 8012d2a:	e7fe      	b.n	8012d2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012d2c:	4b0a      	ldr	r3, [pc, #40]	; (8012d58 <vTaskPlaceOnEventListRestricted+0x54>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	3318      	adds	r3, #24
 8012d32:	4619      	mov	r1, r3
 8012d34:	68f8      	ldr	r0, [r7, #12]
 8012d36:	f7fe fd0c 	bl	8011752 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d002      	beq.n	8012d46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012d46:	6879      	ldr	r1, [r7, #4]
 8012d48:	68b8      	ldr	r0, [r7, #8]
 8012d4a:	f000 facb 	bl	80132e4 <prvAddCurrentTaskToDelayedList>
	}
 8012d4e:	bf00      	nop
 8012d50:	3718      	adds	r7, #24
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	24000e78 	.word	0x24000e78

08012d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b086      	sub	sp, #24
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d10a      	bne.n	8012d88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d76:	f383 8811 	msr	BASEPRI, r3
 8012d7a:	f3bf 8f6f 	isb	sy
 8012d7e:	f3bf 8f4f 	dsb	sy
 8012d82:	60fb      	str	r3, [r7, #12]
}
 8012d84:	bf00      	nop
 8012d86:	e7fe      	b.n	8012d86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	3318      	adds	r3, #24
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7fe fd3d 	bl	801180c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d92:	4b1e      	ldr	r3, [pc, #120]	; (8012e0c <xTaskRemoveFromEventList+0xb0>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d11d      	bne.n	8012dd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	3304      	adds	r3, #4
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7fe fd34 	bl	801180c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012da8:	4b19      	ldr	r3, [pc, #100]	; (8012e10 <xTaskRemoveFromEventList+0xb4>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d903      	bls.n	8012db8 <xTaskRemoveFromEventList+0x5c>
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012db4:	4a16      	ldr	r2, [pc, #88]	; (8012e10 <xTaskRemoveFromEventList+0xb4>)
 8012db6:	6013      	str	r3, [r2, #0]
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dbc:	4613      	mov	r3, r2
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	4413      	add	r3, r2
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	4a13      	ldr	r2, [pc, #76]	; (8012e14 <xTaskRemoveFromEventList+0xb8>)
 8012dc6:	441a      	add	r2, r3
 8012dc8:	693b      	ldr	r3, [r7, #16]
 8012dca:	3304      	adds	r3, #4
 8012dcc:	4619      	mov	r1, r3
 8012dce:	4610      	mov	r0, r2
 8012dd0:	f7fe fcbf 	bl	8011752 <vListInsertEnd>
 8012dd4:	e005      	b.n	8012de2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	3318      	adds	r3, #24
 8012dda:	4619      	mov	r1, r3
 8012ddc:	480e      	ldr	r0, [pc, #56]	; (8012e18 <xTaskRemoveFromEventList+0xbc>)
 8012dde:	f7fe fcb8 	bl	8011752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012de6:	4b0d      	ldr	r3, [pc, #52]	; (8012e1c <xTaskRemoveFromEventList+0xc0>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d905      	bls.n	8012dfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012df0:	2301      	movs	r3, #1
 8012df2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012df4:	4b0a      	ldr	r3, [pc, #40]	; (8012e20 <xTaskRemoveFromEventList+0xc4>)
 8012df6:	2201      	movs	r2, #1
 8012df8:	601a      	str	r2, [r3, #0]
 8012dfa:	e001      	b.n	8012e00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012e00:	697b      	ldr	r3, [r7, #20]
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3718      	adds	r7, #24
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	24001374 	.word	0x24001374
 8012e10:	24001354 	.word	0x24001354
 8012e14:	24000e7c 	.word	0x24000e7c
 8012e18:	2400130c 	.word	0x2400130c
 8012e1c:	24000e78 	.word	0x24000e78
 8012e20:	24001360 	.word	0x24001360

08012e24 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b086      	sub	sp, #24
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8012e2e:	4b29      	ldr	r3, [pc, #164]	; (8012ed4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d10a      	bne.n	8012e4c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e3a:	f383 8811 	msr	BASEPRI, r3
 8012e3e:	f3bf 8f6f 	isb	sy
 8012e42:	f3bf 8f4f 	dsb	sy
 8012e46:	613b      	str	r3, [r7, #16]
}
 8012e48:	bf00      	nop
 8012e4a:	e7fe      	b.n	8012e4a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d10a      	bne.n	8012e78 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e66:	f383 8811 	msr	BASEPRI, r3
 8012e6a:	f3bf 8f6f 	isb	sy
 8012e6e:	f3bf 8f4f 	dsb	sy
 8012e72:	60fb      	str	r3, [r7, #12]
}
 8012e74:	bf00      	nop
 8012e76:	e7fe      	b.n	8012e76 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7fe fcc7 	bl	801180c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	3304      	adds	r3, #4
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fe fcc2 	bl	801180c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e8c:	4b12      	ldr	r3, [pc, #72]	; (8012ed8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d903      	bls.n	8012e9c <vTaskRemoveFromUnorderedEventList+0x78>
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e98:	4a0f      	ldr	r2, [pc, #60]	; (8012ed8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012e9a:	6013      	str	r3, [r2, #0]
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea0:	4613      	mov	r3, r2
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	4413      	add	r3, r2
 8012ea6:	009b      	lsls	r3, r3, #2
 8012ea8:	4a0c      	ldr	r2, [pc, #48]	; (8012edc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8012eaa:	441a      	add	r2, r3
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	3304      	adds	r3, #4
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	4610      	mov	r0, r2
 8012eb4:	f7fe fc4d 	bl	8011752 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ebc:	4b08      	ldr	r3, [pc, #32]	; (8012ee0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d902      	bls.n	8012ecc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8012ec6:	4b07      	ldr	r3, [pc, #28]	; (8012ee4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012ec8:	2201      	movs	r2, #1
 8012eca:	601a      	str	r2, [r3, #0]
	}
}
 8012ecc:	bf00      	nop
 8012ece:	3718      	adds	r7, #24
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	24001374 	.word	0x24001374
 8012ed8:	24001354 	.word	0x24001354
 8012edc:	24000e7c 	.word	0x24000e7c
 8012ee0:	24000e78 	.word	0x24000e78
 8012ee4:	24001360 	.word	0x24001360

08012ee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b083      	sub	sp, #12
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012ef0:	4b06      	ldr	r3, [pc, #24]	; (8012f0c <vTaskInternalSetTimeOutState+0x24>)
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012ef8:	4b05      	ldr	r3, [pc, #20]	; (8012f10 <vTaskInternalSetTimeOutState+0x28>)
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	605a      	str	r2, [r3, #4]
}
 8012f00:	bf00      	nop
 8012f02:	370c      	adds	r7, #12
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr
 8012f0c:	24001364 	.word	0x24001364
 8012f10:	24001350 	.word	0x24001350

08012f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b088      	sub	sp, #32
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d10a      	bne.n	8012f3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f28:	f383 8811 	msr	BASEPRI, r3
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	613b      	str	r3, [r7, #16]
}
 8012f36:	bf00      	nop
 8012f38:	e7fe      	b.n	8012f38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d10a      	bne.n	8012f56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f44:	f383 8811 	msr	BASEPRI, r3
 8012f48:	f3bf 8f6f 	isb	sy
 8012f4c:	f3bf 8f4f 	dsb	sy
 8012f50:	60fb      	str	r3, [r7, #12]
}
 8012f52:	bf00      	nop
 8012f54:	e7fe      	b.n	8012f54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012f56:	f000 feb5 	bl	8013cc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012f5a:	4b1d      	ldr	r3, [pc, #116]	; (8012fd0 <xTaskCheckForTimeOut+0xbc>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	69ba      	ldr	r2, [r7, #24]
 8012f66:	1ad3      	subs	r3, r2, r3
 8012f68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f72:	d102      	bne.n	8012f7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012f74:	2300      	movs	r3, #0
 8012f76:	61fb      	str	r3, [r7, #28]
 8012f78:	e023      	b.n	8012fc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	4b15      	ldr	r3, [pc, #84]	; (8012fd4 <xTaskCheckForTimeOut+0xc0>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d007      	beq.n	8012f96 <xTaskCheckForTimeOut+0x82>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	69ba      	ldr	r2, [r7, #24]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d302      	bcc.n	8012f96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012f90:	2301      	movs	r3, #1
 8012f92:	61fb      	str	r3, [r7, #28]
 8012f94:	e015      	b.n	8012fc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	697a      	ldr	r2, [r7, #20]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d20b      	bcs.n	8012fb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	1ad2      	subs	r2, r2, r3
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f7ff ff9b 	bl	8012ee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	61fb      	str	r3, [r7, #28]
 8012fb6:	e004      	b.n	8012fc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012fc2:	f000 feaf 	bl	8013d24 <vPortExitCritical>

	return xReturn;
 8012fc6:	69fb      	ldr	r3, [r7, #28]
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	3720      	adds	r7, #32
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	24001350 	.word	0x24001350
 8012fd4:	24001364 	.word	0x24001364

08012fd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012fd8:	b480      	push	{r7}
 8012fda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012fdc:	4b03      	ldr	r3, [pc, #12]	; (8012fec <vTaskMissedYield+0x14>)
 8012fde:	2201      	movs	r2, #1
 8012fe0:	601a      	str	r2, [r3, #0]
}
 8012fe2:	bf00      	nop
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fea:	4770      	bx	lr
 8012fec:	24001360 	.word	0x24001360

08012ff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012ff8:	f000 f852 	bl	80130a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012ffc:	4b06      	ldr	r3, [pc, #24]	; (8013018 <prvIdleTask+0x28>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	2b01      	cmp	r3, #1
 8013002:	d9f9      	bls.n	8012ff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013004:	4b05      	ldr	r3, [pc, #20]	; (801301c <prvIdleTask+0x2c>)
 8013006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801300a:	601a      	str	r2, [r3, #0]
 801300c:	f3bf 8f4f 	dsb	sy
 8013010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013014:	e7f0      	b.n	8012ff8 <prvIdleTask+0x8>
 8013016:	bf00      	nop
 8013018:	24000e7c 	.word	0x24000e7c
 801301c:	e000ed04 	.word	0xe000ed04

08013020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013026:	2300      	movs	r3, #0
 8013028:	607b      	str	r3, [r7, #4]
 801302a:	e00c      	b.n	8013046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801302c:	687a      	ldr	r2, [r7, #4]
 801302e:	4613      	mov	r3, r2
 8013030:	009b      	lsls	r3, r3, #2
 8013032:	4413      	add	r3, r2
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	4a12      	ldr	r2, [pc, #72]	; (8013080 <prvInitialiseTaskLists+0x60>)
 8013038:	4413      	add	r3, r2
 801303a:	4618      	mov	r0, r3
 801303c:	f7fe fb5c 	bl	80116f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	3301      	adds	r3, #1
 8013044:	607b      	str	r3, [r7, #4]
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2b37      	cmp	r3, #55	; 0x37
 801304a:	d9ef      	bls.n	801302c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801304c:	480d      	ldr	r0, [pc, #52]	; (8013084 <prvInitialiseTaskLists+0x64>)
 801304e:	f7fe fb53 	bl	80116f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013052:	480d      	ldr	r0, [pc, #52]	; (8013088 <prvInitialiseTaskLists+0x68>)
 8013054:	f7fe fb50 	bl	80116f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013058:	480c      	ldr	r0, [pc, #48]	; (801308c <prvInitialiseTaskLists+0x6c>)
 801305a:	f7fe fb4d 	bl	80116f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801305e:	480c      	ldr	r0, [pc, #48]	; (8013090 <prvInitialiseTaskLists+0x70>)
 8013060:	f7fe fb4a 	bl	80116f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013064:	480b      	ldr	r0, [pc, #44]	; (8013094 <prvInitialiseTaskLists+0x74>)
 8013066:	f7fe fb47 	bl	80116f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801306a:	4b0b      	ldr	r3, [pc, #44]	; (8013098 <prvInitialiseTaskLists+0x78>)
 801306c:	4a05      	ldr	r2, [pc, #20]	; (8013084 <prvInitialiseTaskLists+0x64>)
 801306e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013070:	4b0a      	ldr	r3, [pc, #40]	; (801309c <prvInitialiseTaskLists+0x7c>)
 8013072:	4a05      	ldr	r2, [pc, #20]	; (8013088 <prvInitialiseTaskLists+0x68>)
 8013074:	601a      	str	r2, [r3, #0]
}
 8013076:	bf00      	nop
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	24000e7c 	.word	0x24000e7c
 8013084:	240012dc 	.word	0x240012dc
 8013088:	240012f0 	.word	0x240012f0
 801308c:	2400130c 	.word	0x2400130c
 8013090:	24001320 	.word	0x24001320
 8013094:	24001338 	.word	0x24001338
 8013098:	24001304 	.word	0x24001304
 801309c:	24001308 	.word	0x24001308

080130a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80130a6:	e019      	b.n	80130dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80130a8:	f000 fe0c 	bl	8013cc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130ac:	4b10      	ldr	r3, [pc, #64]	; (80130f0 <prvCheckTasksWaitingTermination+0x50>)
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	68db      	ldr	r3, [r3, #12]
 80130b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	3304      	adds	r3, #4
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fe fba7 	bl	801180c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80130be:	4b0d      	ldr	r3, [pc, #52]	; (80130f4 <prvCheckTasksWaitingTermination+0x54>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	3b01      	subs	r3, #1
 80130c4:	4a0b      	ldr	r2, [pc, #44]	; (80130f4 <prvCheckTasksWaitingTermination+0x54>)
 80130c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80130c8:	4b0b      	ldr	r3, [pc, #44]	; (80130f8 <prvCheckTasksWaitingTermination+0x58>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	3b01      	subs	r3, #1
 80130ce:	4a0a      	ldr	r2, [pc, #40]	; (80130f8 <prvCheckTasksWaitingTermination+0x58>)
 80130d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80130d2:	f000 fe27 	bl	8013d24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f000 f810 	bl	80130fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80130dc:	4b06      	ldr	r3, [pc, #24]	; (80130f8 <prvCheckTasksWaitingTermination+0x58>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d1e1      	bne.n	80130a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80130e4:	bf00      	nop
 80130e6:	bf00      	nop
 80130e8:	3708      	adds	r7, #8
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	24001320 	.word	0x24001320
 80130f4:	2400134c 	.word	0x2400134c
 80130f8:	24001334 	.word	0x24001334

080130fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801310a:	2b00      	cmp	r3, #0
 801310c:	d108      	bne.n	8013120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013112:	4618      	mov	r0, r3
 8013114:	f000 ffc4 	bl	80140a0 <vPortFree>
				vPortFree( pxTCB );
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f000 ffc1 	bl	80140a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801311e:	e018      	b.n	8013152 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013126:	2b01      	cmp	r3, #1
 8013128:	d103      	bne.n	8013132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f000 ffb8 	bl	80140a0 <vPortFree>
	}
 8013130:	e00f      	b.n	8013152 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013138:	2b02      	cmp	r3, #2
 801313a:	d00a      	beq.n	8013152 <prvDeleteTCB+0x56>
	__asm volatile
 801313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013140:	f383 8811 	msr	BASEPRI, r3
 8013144:	f3bf 8f6f 	isb	sy
 8013148:	f3bf 8f4f 	dsb	sy
 801314c:	60fb      	str	r3, [r7, #12]
}
 801314e:	bf00      	nop
 8013150:	e7fe      	b.n	8013150 <prvDeleteTCB+0x54>
	}
 8013152:	bf00      	nop
 8013154:	3710      	adds	r7, #16
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
	...

0801315c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801315c:	b480      	push	{r7}
 801315e:	b083      	sub	sp, #12
 8013160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013162:	4b0c      	ldr	r3, [pc, #48]	; (8013194 <prvResetNextTaskUnblockTime+0x38>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d104      	bne.n	8013176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801316c:	4b0a      	ldr	r3, [pc, #40]	; (8013198 <prvResetNextTaskUnblockTime+0x3c>)
 801316e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013174:	e008      	b.n	8013188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013176:	4b07      	ldr	r3, [pc, #28]	; (8013194 <prvResetNextTaskUnblockTime+0x38>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	68db      	ldr	r3, [r3, #12]
 801317c:	68db      	ldr	r3, [r3, #12]
 801317e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	4a04      	ldr	r2, [pc, #16]	; (8013198 <prvResetNextTaskUnblockTime+0x3c>)
 8013186:	6013      	str	r3, [r2, #0]
}
 8013188:	bf00      	nop
 801318a:	370c      	adds	r7, #12
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr
 8013194:	24001304 	.word	0x24001304
 8013198:	2400136c 	.word	0x2400136c

0801319c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80131a2:	4b0b      	ldr	r3, [pc, #44]	; (80131d0 <xTaskGetSchedulerState+0x34>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d102      	bne.n	80131b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80131aa:	2301      	movs	r3, #1
 80131ac:	607b      	str	r3, [r7, #4]
 80131ae:	e008      	b.n	80131c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131b0:	4b08      	ldr	r3, [pc, #32]	; (80131d4 <xTaskGetSchedulerState+0x38>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d102      	bne.n	80131be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80131b8:	2302      	movs	r3, #2
 80131ba:	607b      	str	r3, [r7, #4]
 80131bc:	e001      	b.n	80131c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80131be:	2300      	movs	r3, #0
 80131c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80131c2:	687b      	ldr	r3, [r7, #4]
	}
 80131c4:	4618      	mov	r0, r3
 80131c6:	370c      	adds	r7, #12
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr
 80131d0:	24001358 	.word	0x24001358
 80131d4:	24001374 	.word	0x24001374

080131d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b086      	sub	sp, #24
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80131e4:	2300      	movs	r3, #0
 80131e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d056      	beq.n	801329c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80131ee:	4b2e      	ldr	r3, [pc, #184]	; (80132a8 <xTaskPriorityDisinherit+0xd0>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	693a      	ldr	r2, [r7, #16]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d00a      	beq.n	801320e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80131f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fc:	f383 8811 	msr	BASEPRI, r3
 8013200:	f3bf 8f6f 	isb	sy
 8013204:	f3bf 8f4f 	dsb	sy
 8013208:	60fb      	str	r3, [r7, #12]
}
 801320a:	bf00      	nop
 801320c:	e7fe      	b.n	801320c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013212:	2b00      	cmp	r3, #0
 8013214:	d10a      	bne.n	801322c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801321a:	f383 8811 	msr	BASEPRI, r3
 801321e:	f3bf 8f6f 	isb	sy
 8013222:	f3bf 8f4f 	dsb	sy
 8013226:	60bb      	str	r3, [r7, #8]
}
 8013228:	bf00      	nop
 801322a:	e7fe      	b.n	801322a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013230:	1e5a      	subs	r2, r3, #1
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801323e:	429a      	cmp	r2, r3
 8013240:	d02c      	beq.n	801329c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013242:	693b      	ldr	r3, [r7, #16]
 8013244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013246:	2b00      	cmp	r3, #0
 8013248:	d128      	bne.n	801329c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	3304      	adds	r3, #4
 801324e:	4618      	mov	r0, r3
 8013250:	f7fe fadc 	bl	801180c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013258:	693b      	ldr	r3, [r7, #16]
 801325a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801326c:	4b0f      	ldr	r3, [pc, #60]	; (80132ac <xTaskPriorityDisinherit+0xd4>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	429a      	cmp	r2, r3
 8013272:	d903      	bls.n	801327c <xTaskPriorityDisinherit+0xa4>
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013278:	4a0c      	ldr	r2, [pc, #48]	; (80132ac <xTaskPriorityDisinherit+0xd4>)
 801327a:	6013      	str	r3, [r2, #0]
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013280:	4613      	mov	r3, r2
 8013282:	009b      	lsls	r3, r3, #2
 8013284:	4413      	add	r3, r2
 8013286:	009b      	lsls	r3, r3, #2
 8013288:	4a09      	ldr	r2, [pc, #36]	; (80132b0 <xTaskPriorityDisinherit+0xd8>)
 801328a:	441a      	add	r2, r3
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	3304      	adds	r3, #4
 8013290:	4619      	mov	r1, r3
 8013292:	4610      	mov	r0, r2
 8013294:	f7fe fa5d 	bl	8011752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013298:	2301      	movs	r3, #1
 801329a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801329c:	697b      	ldr	r3, [r7, #20]
	}
 801329e:	4618      	mov	r0, r3
 80132a0:	3718      	adds	r7, #24
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	24000e78 	.word	0x24000e78
 80132ac:	24001354 	.word	0x24001354
 80132b0:	24000e7c 	.word	0x24000e7c

080132b4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80132b4:	b480      	push	{r7}
 80132b6:	b083      	sub	sp, #12
 80132b8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80132ba:	4b09      	ldr	r3, [pc, #36]	; (80132e0 <uxTaskResetEventItemValue+0x2c>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	699b      	ldr	r3, [r3, #24]
 80132c0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132c2:	4b07      	ldr	r3, [pc, #28]	; (80132e0 <uxTaskResetEventItemValue+0x2c>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132c8:	4b05      	ldr	r3, [pc, #20]	; (80132e0 <uxTaskResetEventItemValue+0x2c>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80132d0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80132d2:	687b      	ldr	r3, [r7, #4]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	370c      	adds	r7, #12
 80132d8:	46bd      	mov	sp, r7
 80132da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132de:	4770      	bx	lr
 80132e0:	24000e78 	.word	0x24000e78

080132e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80132ee:	4b21      	ldr	r3, [pc, #132]	; (8013374 <prvAddCurrentTaskToDelayedList+0x90>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132f4:	4b20      	ldr	r3, [pc, #128]	; (8013378 <prvAddCurrentTaskToDelayedList+0x94>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	3304      	adds	r3, #4
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7fe fa86 	bl	801180c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013306:	d10a      	bne.n	801331e <prvAddCurrentTaskToDelayedList+0x3a>
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d007      	beq.n	801331e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801330e:	4b1a      	ldr	r3, [pc, #104]	; (8013378 <prvAddCurrentTaskToDelayedList+0x94>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	3304      	adds	r3, #4
 8013314:	4619      	mov	r1, r3
 8013316:	4819      	ldr	r0, [pc, #100]	; (801337c <prvAddCurrentTaskToDelayedList+0x98>)
 8013318:	f7fe fa1b 	bl	8011752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801331c:	e026      	b.n	801336c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801331e:	68fa      	ldr	r2, [r7, #12]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	4413      	add	r3, r2
 8013324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013326:	4b14      	ldr	r3, [pc, #80]	; (8013378 <prvAddCurrentTaskToDelayedList+0x94>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	68ba      	ldr	r2, [r7, #8]
 801332c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801332e:	68ba      	ldr	r2, [r7, #8]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	429a      	cmp	r2, r3
 8013334:	d209      	bcs.n	801334a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013336:	4b12      	ldr	r3, [pc, #72]	; (8013380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013338:	681a      	ldr	r2, [r3, #0]
 801333a:	4b0f      	ldr	r3, [pc, #60]	; (8013378 <prvAddCurrentTaskToDelayedList+0x94>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	3304      	adds	r3, #4
 8013340:	4619      	mov	r1, r3
 8013342:	4610      	mov	r0, r2
 8013344:	f7fe fa29 	bl	801179a <vListInsert>
}
 8013348:	e010      	b.n	801336c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801334a:	4b0e      	ldr	r3, [pc, #56]	; (8013384 <prvAddCurrentTaskToDelayedList+0xa0>)
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	4b0a      	ldr	r3, [pc, #40]	; (8013378 <prvAddCurrentTaskToDelayedList+0x94>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	3304      	adds	r3, #4
 8013354:	4619      	mov	r1, r3
 8013356:	4610      	mov	r0, r2
 8013358:	f7fe fa1f 	bl	801179a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801335c:	4b0a      	ldr	r3, [pc, #40]	; (8013388 <prvAddCurrentTaskToDelayedList+0xa4>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	68ba      	ldr	r2, [r7, #8]
 8013362:	429a      	cmp	r2, r3
 8013364:	d202      	bcs.n	801336c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013366:	4a08      	ldr	r2, [pc, #32]	; (8013388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	6013      	str	r3, [r2, #0]
}
 801336c:	bf00      	nop
 801336e:	3710      	adds	r7, #16
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	24001350 	.word	0x24001350
 8013378:	24000e78 	.word	0x24000e78
 801337c:	24001338 	.word	0x24001338
 8013380:	24001308 	.word	0x24001308
 8013384:	24001304 	.word	0x24001304
 8013388:	2400136c 	.word	0x2400136c

0801338c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b08a      	sub	sp, #40	; 0x28
 8013390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013392:	2300      	movs	r3, #0
 8013394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013396:	f000 fb07 	bl	80139a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801339a:	4b1c      	ldr	r3, [pc, #112]	; (801340c <xTimerCreateTimerTask+0x80>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d021      	beq.n	80133e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80133a2:	2300      	movs	r3, #0
 80133a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80133a6:	2300      	movs	r3, #0
 80133a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80133aa:	1d3a      	adds	r2, r7, #4
 80133ac:	f107 0108 	add.w	r1, r7, #8
 80133b0:	f107 030c 	add.w	r3, r7, #12
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7fd ff97 	bl	80112e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80133ba:	6879      	ldr	r1, [r7, #4]
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	68fa      	ldr	r2, [r7, #12]
 80133c0:	9202      	str	r2, [sp, #8]
 80133c2:	9301      	str	r3, [sp, #4]
 80133c4:	2302      	movs	r3, #2
 80133c6:	9300      	str	r3, [sp, #0]
 80133c8:	2300      	movs	r3, #0
 80133ca:	460a      	mov	r2, r1
 80133cc:	4910      	ldr	r1, [pc, #64]	; (8013410 <xTimerCreateTimerTask+0x84>)
 80133ce:	4811      	ldr	r0, [pc, #68]	; (8013414 <xTimerCreateTimerTask+0x88>)
 80133d0:	f7ff f828 	bl	8012424 <xTaskCreateStatic>
 80133d4:	4603      	mov	r3, r0
 80133d6:	4a10      	ldr	r2, [pc, #64]	; (8013418 <xTimerCreateTimerTask+0x8c>)
 80133d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80133da:	4b0f      	ldr	r3, [pc, #60]	; (8013418 <xTimerCreateTimerTask+0x8c>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d001      	beq.n	80133e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80133e2:	2301      	movs	r3, #1
 80133e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d10a      	bne.n	8013402 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80133ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133f0:	f383 8811 	msr	BASEPRI, r3
 80133f4:	f3bf 8f6f 	isb	sy
 80133f8:	f3bf 8f4f 	dsb	sy
 80133fc:	613b      	str	r3, [r7, #16]
}
 80133fe:	bf00      	nop
 8013400:	e7fe      	b.n	8013400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013402:	697b      	ldr	r3, [r7, #20]
}
 8013404:	4618      	mov	r0, r3
 8013406:	3718      	adds	r7, #24
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	240013a8 	.word	0x240013a8
 8013410:	080155b0 	.word	0x080155b0
 8013414:	08013551 	.word	0x08013551
 8013418:	240013ac 	.word	0x240013ac

0801341c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b08a      	sub	sp, #40	; 0x28
 8013420:	af00      	add	r7, sp, #0
 8013422:	60f8      	str	r0, [r7, #12]
 8013424:	60b9      	str	r1, [r7, #8]
 8013426:	607a      	str	r2, [r7, #4]
 8013428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801342a:	2300      	movs	r3, #0
 801342c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d10a      	bne.n	801344a <xTimerGenericCommand+0x2e>
	__asm volatile
 8013434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013438:	f383 8811 	msr	BASEPRI, r3
 801343c:	f3bf 8f6f 	isb	sy
 8013440:	f3bf 8f4f 	dsb	sy
 8013444:	623b      	str	r3, [r7, #32]
}
 8013446:	bf00      	nop
 8013448:	e7fe      	b.n	8013448 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801344a:	4b1a      	ldr	r3, [pc, #104]	; (80134b4 <xTimerGenericCommand+0x98>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d02a      	beq.n	80134a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	2b05      	cmp	r3, #5
 8013462:	dc18      	bgt.n	8013496 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013464:	f7ff fe9a 	bl	801319c <xTaskGetSchedulerState>
 8013468:	4603      	mov	r3, r0
 801346a:	2b02      	cmp	r3, #2
 801346c:	d109      	bne.n	8013482 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801346e:	4b11      	ldr	r3, [pc, #68]	; (80134b4 <xTimerGenericCommand+0x98>)
 8013470:	6818      	ldr	r0, [r3, #0]
 8013472:	f107 0110 	add.w	r1, r7, #16
 8013476:	2300      	movs	r3, #0
 8013478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801347a:	f7fe fb2f 	bl	8011adc <xQueueGenericSend>
 801347e:	6278      	str	r0, [r7, #36]	; 0x24
 8013480:	e012      	b.n	80134a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013482:	4b0c      	ldr	r3, [pc, #48]	; (80134b4 <xTimerGenericCommand+0x98>)
 8013484:	6818      	ldr	r0, [r3, #0]
 8013486:	f107 0110 	add.w	r1, r7, #16
 801348a:	2300      	movs	r3, #0
 801348c:	2200      	movs	r2, #0
 801348e:	f7fe fb25 	bl	8011adc <xQueueGenericSend>
 8013492:	6278      	str	r0, [r7, #36]	; 0x24
 8013494:	e008      	b.n	80134a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013496:	4b07      	ldr	r3, [pc, #28]	; (80134b4 <xTimerGenericCommand+0x98>)
 8013498:	6818      	ldr	r0, [r3, #0]
 801349a:	f107 0110 	add.w	r1, r7, #16
 801349e:	2300      	movs	r3, #0
 80134a0:	683a      	ldr	r2, [r7, #0]
 80134a2:	f7fe fc19 	bl	8011cd8 <xQueueGenericSendFromISR>
 80134a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80134a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3728      	adds	r7, #40	; 0x28
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	240013a8 	.word	0x240013a8

080134b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b088      	sub	sp, #32
 80134bc:	af02      	add	r7, sp, #8
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134c2:	4b22      	ldr	r3, [pc, #136]	; (801354c <prvProcessExpiredTimer+0x94>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	68db      	ldr	r3, [r3, #12]
 80134c8:	68db      	ldr	r3, [r3, #12]
 80134ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	3304      	adds	r3, #4
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7fe f99b 	bl	801180c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134dc:	f003 0304 	and.w	r3, r3, #4
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d022      	beq.n	801352a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	699a      	ldr	r2, [r3, #24]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	18d1      	adds	r1, r2, r3
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	683a      	ldr	r2, [r7, #0]
 80134f0:	6978      	ldr	r0, [r7, #20]
 80134f2:	f000 f8d1 	bl	8013698 <prvInsertTimerInActiveList>
 80134f6:	4603      	mov	r3, r0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d01f      	beq.n	801353c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80134fc:	2300      	movs	r3, #0
 80134fe:	9300      	str	r3, [sp, #0]
 8013500:	2300      	movs	r3, #0
 8013502:	687a      	ldr	r2, [r7, #4]
 8013504:	2100      	movs	r1, #0
 8013506:	6978      	ldr	r0, [r7, #20]
 8013508:	f7ff ff88 	bl	801341c <xTimerGenericCommand>
 801350c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d113      	bne.n	801353c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013518:	f383 8811 	msr	BASEPRI, r3
 801351c:	f3bf 8f6f 	isb	sy
 8013520:	f3bf 8f4f 	dsb	sy
 8013524:	60fb      	str	r3, [r7, #12]
}
 8013526:	bf00      	nop
 8013528:	e7fe      	b.n	8013528 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013530:	f023 0301 	bic.w	r3, r3, #1
 8013534:	b2da      	uxtb	r2, r3
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	6a1b      	ldr	r3, [r3, #32]
 8013540:	6978      	ldr	r0, [r7, #20]
 8013542:	4798      	blx	r3
}
 8013544:	bf00      	nop
 8013546:	3718      	adds	r7, #24
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	240013a0 	.word	0x240013a0

08013550 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b084      	sub	sp, #16
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013558:	f107 0308 	add.w	r3, r7, #8
 801355c:	4618      	mov	r0, r3
 801355e:	f000 f857 	bl	8013610 <prvGetNextExpireTime>
 8013562:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	4619      	mov	r1, r3
 8013568:	68f8      	ldr	r0, [r7, #12]
 801356a:	f000 f803 	bl	8013574 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801356e:	f000 f8d5 	bl	801371c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013572:	e7f1      	b.n	8013558 <prvTimerTask+0x8>

08013574 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801357e:	f7ff f98d 	bl	801289c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013582:	f107 0308 	add.w	r3, r7, #8
 8013586:	4618      	mov	r0, r3
 8013588:	f000 f866 	bl	8013658 <prvSampleTimeNow>
 801358c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d130      	bne.n	80135f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d10a      	bne.n	80135b0 <prvProcessTimerOrBlockTask+0x3c>
 801359a:	687a      	ldr	r2, [r7, #4]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	429a      	cmp	r2, r3
 80135a0:	d806      	bhi.n	80135b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80135a2:	f7ff f989 	bl	80128b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80135a6:	68f9      	ldr	r1, [r7, #12]
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff ff85 	bl	80134b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80135ae:	e024      	b.n	80135fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d008      	beq.n	80135c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80135b6:	4b13      	ldr	r3, [pc, #76]	; (8013604 <prvProcessTimerOrBlockTask+0x90>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d101      	bne.n	80135c4 <prvProcessTimerOrBlockTask+0x50>
 80135c0:	2301      	movs	r3, #1
 80135c2:	e000      	b.n	80135c6 <prvProcessTimerOrBlockTask+0x52>
 80135c4:	2300      	movs	r3, #0
 80135c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80135c8:	4b0f      	ldr	r3, [pc, #60]	; (8013608 <prvProcessTimerOrBlockTask+0x94>)
 80135ca:	6818      	ldr	r0, [r3, #0]
 80135cc:	687a      	ldr	r2, [r7, #4]
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	1ad3      	subs	r3, r2, r3
 80135d2:	683a      	ldr	r2, [r7, #0]
 80135d4:	4619      	mov	r1, r3
 80135d6:	f7fe fef1 	bl	80123bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80135da:	f7ff f96d 	bl	80128b8 <xTaskResumeAll>
 80135de:	4603      	mov	r3, r0
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d10a      	bne.n	80135fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80135e4:	4b09      	ldr	r3, [pc, #36]	; (801360c <prvProcessTimerOrBlockTask+0x98>)
 80135e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135ea:	601a      	str	r2, [r3, #0]
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	f3bf 8f6f 	isb	sy
}
 80135f4:	e001      	b.n	80135fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80135f6:	f7ff f95f 	bl	80128b8 <xTaskResumeAll>
}
 80135fa:	bf00      	nop
 80135fc:	3710      	adds	r7, #16
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	240013a4 	.word	0x240013a4
 8013608:	240013a8 	.word	0x240013a8
 801360c:	e000ed04 	.word	0xe000ed04

08013610 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013610:	b480      	push	{r7}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013618:	4b0e      	ldr	r3, [pc, #56]	; (8013654 <prvGetNextExpireTime+0x44>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d101      	bne.n	8013626 <prvGetNextExpireTime+0x16>
 8013622:	2201      	movs	r2, #1
 8013624:	e000      	b.n	8013628 <prvGetNextExpireTime+0x18>
 8013626:	2200      	movs	r2, #0
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d105      	bne.n	8013640 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013634:	4b07      	ldr	r3, [pc, #28]	; (8013654 <prvGetNextExpireTime+0x44>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	60fb      	str	r3, [r7, #12]
 801363e:	e001      	b.n	8013644 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013640:	2300      	movs	r3, #0
 8013642:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013644:	68fb      	ldr	r3, [r7, #12]
}
 8013646:	4618      	mov	r0, r3
 8013648:	3714      	adds	r7, #20
 801364a:	46bd      	mov	sp, r7
 801364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013650:	4770      	bx	lr
 8013652:	bf00      	nop
 8013654:	240013a0 	.word	0x240013a0

08013658 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b084      	sub	sp, #16
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013660:	f7ff f9c8 	bl	80129f4 <xTaskGetTickCount>
 8013664:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013666:	4b0b      	ldr	r3, [pc, #44]	; (8013694 <prvSampleTimeNow+0x3c>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	68fa      	ldr	r2, [r7, #12]
 801366c:	429a      	cmp	r2, r3
 801366e:	d205      	bcs.n	801367c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013670:	f000 f936 	bl	80138e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2201      	movs	r2, #1
 8013678:	601a      	str	r2, [r3, #0]
 801367a:	e002      	b.n	8013682 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2200      	movs	r2, #0
 8013680:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013682:	4a04      	ldr	r2, [pc, #16]	; (8013694 <prvSampleTimeNow+0x3c>)
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013688:	68fb      	ldr	r3, [r7, #12]
}
 801368a:	4618      	mov	r0, r3
 801368c:	3710      	adds	r7, #16
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	240013b0 	.word	0x240013b0

08013698 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
 80136a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80136a6:	2300      	movs	r3, #0
 80136a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	68ba      	ldr	r2, [r7, #8]
 80136ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	68fa      	ldr	r2, [r7, #12]
 80136b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80136b6:	68ba      	ldr	r2, [r7, #8]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d812      	bhi.n	80136e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136be:	687a      	ldr	r2, [r7, #4]
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	1ad2      	subs	r2, r2, r3
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	699b      	ldr	r3, [r3, #24]
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d302      	bcc.n	80136d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80136cc:	2301      	movs	r3, #1
 80136ce:	617b      	str	r3, [r7, #20]
 80136d0:	e01b      	b.n	801370a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80136d2:	4b10      	ldr	r3, [pc, #64]	; (8013714 <prvInsertTimerInActiveList+0x7c>)
 80136d4:	681a      	ldr	r2, [r3, #0]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	3304      	adds	r3, #4
 80136da:	4619      	mov	r1, r3
 80136dc:	4610      	mov	r0, r2
 80136de:	f7fe f85c 	bl	801179a <vListInsert>
 80136e2:	e012      	b.n	801370a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d206      	bcs.n	80136fa <prvInsertTimerInActiveList+0x62>
 80136ec:	68ba      	ldr	r2, [r7, #8]
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d302      	bcc.n	80136fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80136f4:	2301      	movs	r3, #1
 80136f6:	617b      	str	r3, [r7, #20]
 80136f8:	e007      	b.n	801370a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80136fa:	4b07      	ldr	r3, [pc, #28]	; (8013718 <prvInsertTimerInActiveList+0x80>)
 80136fc:	681a      	ldr	r2, [r3, #0]
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	3304      	adds	r3, #4
 8013702:	4619      	mov	r1, r3
 8013704:	4610      	mov	r0, r2
 8013706:	f7fe f848 	bl	801179a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801370a:	697b      	ldr	r3, [r7, #20]
}
 801370c:	4618      	mov	r0, r3
 801370e:	3718      	adds	r7, #24
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}
 8013714:	240013a4 	.word	0x240013a4
 8013718:	240013a0 	.word	0x240013a0

0801371c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b08e      	sub	sp, #56	; 0x38
 8013720:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013722:	e0ca      	b.n	80138ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2b00      	cmp	r3, #0
 8013728:	da18      	bge.n	801375c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801372a:	1d3b      	adds	r3, r7, #4
 801372c:	3304      	adds	r3, #4
 801372e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013732:	2b00      	cmp	r3, #0
 8013734:	d10a      	bne.n	801374c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373a:	f383 8811 	msr	BASEPRI, r3
 801373e:	f3bf 8f6f 	isb	sy
 8013742:	f3bf 8f4f 	dsb	sy
 8013746:	61fb      	str	r3, [r7, #28]
}
 8013748:	bf00      	nop
 801374a:	e7fe      	b.n	801374a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013752:	6850      	ldr	r0, [r2, #4]
 8013754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013756:	6892      	ldr	r2, [r2, #8]
 8013758:	4611      	mov	r1, r2
 801375a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	2b00      	cmp	r3, #0
 8013760:	f2c0 80aa 	blt.w	80138b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801376a:	695b      	ldr	r3, [r3, #20]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d004      	beq.n	801377a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013772:	3304      	adds	r3, #4
 8013774:	4618      	mov	r0, r3
 8013776:	f7fe f849 	bl	801180c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801377a:	463b      	mov	r3, r7
 801377c:	4618      	mov	r0, r3
 801377e:	f7ff ff6b 	bl	8013658 <prvSampleTimeNow>
 8013782:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b09      	cmp	r3, #9
 8013788:	f200 8097 	bhi.w	80138ba <prvProcessReceivedCommands+0x19e>
 801378c:	a201      	add	r2, pc, #4	; (adr r2, 8013794 <prvProcessReceivedCommands+0x78>)
 801378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013792:	bf00      	nop
 8013794:	080137bd 	.word	0x080137bd
 8013798:	080137bd 	.word	0x080137bd
 801379c:	080137bd 	.word	0x080137bd
 80137a0:	08013831 	.word	0x08013831
 80137a4:	08013845 	.word	0x08013845
 80137a8:	0801388f 	.word	0x0801388f
 80137ac:	080137bd 	.word	0x080137bd
 80137b0:	080137bd 	.word	0x080137bd
 80137b4:	08013831 	.word	0x08013831
 80137b8:	08013845 	.word	0x08013845
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80137bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137c2:	f043 0301 	orr.w	r3, r3, #1
 80137c6:	b2da      	uxtb	r2, r3
 80137c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80137ce:	68ba      	ldr	r2, [r7, #8]
 80137d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d2:	699b      	ldr	r3, [r3, #24]
 80137d4:	18d1      	adds	r1, r2, r3
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137dc:	f7ff ff5c 	bl	8013698 <prvInsertTimerInActiveList>
 80137e0:	4603      	mov	r3, r0
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d069      	beq.n	80138ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80137e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e8:	6a1b      	ldr	r3, [r3, #32]
 80137ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80137ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137f4:	f003 0304 	and.w	r3, r3, #4
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d05e      	beq.n	80138ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80137fc:	68ba      	ldr	r2, [r7, #8]
 80137fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013800:	699b      	ldr	r3, [r3, #24]
 8013802:	441a      	add	r2, r3
 8013804:	2300      	movs	r3, #0
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	2300      	movs	r3, #0
 801380a:	2100      	movs	r1, #0
 801380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801380e:	f7ff fe05 	bl	801341c <xTimerGenericCommand>
 8013812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013814:	6a3b      	ldr	r3, [r7, #32]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d14f      	bne.n	80138ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381e:	f383 8811 	msr	BASEPRI, r3
 8013822:	f3bf 8f6f 	isb	sy
 8013826:	f3bf 8f4f 	dsb	sy
 801382a:	61bb      	str	r3, [r7, #24]
}
 801382c:	bf00      	nop
 801382e:	e7fe      	b.n	801382e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013836:	f023 0301 	bic.w	r3, r3, #1
 801383a:	b2da      	uxtb	r2, r3
 801383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013842:	e03a      	b.n	80138ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801384a:	f043 0301 	orr.w	r3, r3, #1
 801384e:	b2da      	uxtb	r2, r3
 8013850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013856:	68ba      	ldr	r2, [r7, #8]
 8013858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385e:	699b      	ldr	r3, [r3, #24]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d10a      	bne.n	801387a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013868:	f383 8811 	msr	BASEPRI, r3
 801386c:	f3bf 8f6f 	isb	sy
 8013870:	f3bf 8f4f 	dsb	sy
 8013874:	617b      	str	r3, [r7, #20]
}
 8013876:	bf00      	nop
 8013878:	e7fe      	b.n	8013878 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387c:	699a      	ldr	r2, [r3, #24]
 801387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013880:	18d1      	adds	r1, r2, r3
 8013882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013888:	f7ff ff06 	bl	8013698 <prvInsertTimerInActiveList>
					break;
 801388c:	e015      	b.n	80138ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013894:	f003 0302 	and.w	r3, r3, #2
 8013898:	2b00      	cmp	r3, #0
 801389a:	d103      	bne.n	80138a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801389c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801389e:	f000 fbff 	bl	80140a0 <vPortFree>
 80138a2:	e00a      	b.n	80138ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80138a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80138aa:	f023 0301 	bic.w	r3, r3, #1
 80138ae:	b2da      	uxtb	r2, r3
 80138b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80138b6:	e000      	b.n	80138ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80138b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80138ba:	4b08      	ldr	r3, [pc, #32]	; (80138dc <prvProcessReceivedCommands+0x1c0>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	1d39      	adds	r1, r7, #4
 80138c0:	2200      	movs	r2, #0
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fe faa4 	bl	8011e10 <xQueueReceive>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f47f af2a 	bne.w	8013724 <prvProcessReceivedCommands+0x8>
	}
}
 80138d0:	bf00      	nop
 80138d2:	bf00      	nop
 80138d4:	3730      	adds	r7, #48	; 0x30
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	240013a8 	.word	0x240013a8

080138e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b088      	sub	sp, #32
 80138e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80138e6:	e048      	b.n	801397a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80138e8:	4b2d      	ldr	r3, [pc, #180]	; (80139a0 <prvSwitchTimerLists+0xc0>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	68db      	ldr	r3, [r3, #12]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138f2:	4b2b      	ldr	r3, [pc, #172]	; (80139a0 <prvSwitchTimerLists+0xc0>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	3304      	adds	r3, #4
 8013900:	4618      	mov	r0, r3
 8013902:	f7fd ff83 	bl	801180c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	6a1b      	ldr	r3, [r3, #32]
 801390a:	68f8      	ldr	r0, [r7, #12]
 801390c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013914:	f003 0304 	and.w	r3, r3, #4
 8013918:	2b00      	cmp	r3, #0
 801391a:	d02e      	beq.n	801397a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	699b      	ldr	r3, [r3, #24]
 8013920:	693a      	ldr	r2, [r7, #16]
 8013922:	4413      	add	r3, r2
 8013924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013926:	68ba      	ldr	r2, [r7, #8]
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	429a      	cmp	r2, r3
 801392c:	d90e      	bls.n	801394c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	68fa      	ldr	r2, [r7, #12]
 8013938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801393a:	4b19      	ldr	r3, [pc, #100]	; (80139a0 <prvSwitchTimerLists+0xc0>)
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	3304      	adds	r3, #4
 8013942:	4619      	mov	r1, r3
 8013944:	4610      	mov	r0, r2
 8013946:	f7fd ff28 	bl	801179a <vListInsert>
 801394a:	e016      	b.n	801397a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801394c:	2300      	movs	r3, #0
 801394e:	9300      	str	r3, [sp, #0]
 8013950:	2300      	movs	r3, #0
 8013952:	693a      	ldr	r2, [r7, #16]
 8013954:	2100      	movs	r1, #0
 8013956:	68f8      	ldr	r0, [r7, #12]
 8013958:	f7ff fd60 	bl	801341c <xTimerGenericCommand>
 801395c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d10a      	bne.n	801397a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013968:	f383 8811 	msr	BASEPRI, r3
 801396c:	f3bf 8f6f 	isb	sy
 8013970:	f3bf 8f4f 	dsb	sy
 8013974:	603b      	str	r3, [r7, #0]
}
 8013976:	bf00      	nop
 8013978:	e7fe      	b.n	8013978 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801397a:	4b09      	ldr	r3, [pc, #36]	; (80139a0 <prvSwitchTimerLists+0xc0>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d1b1      	bne.n	80138e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013984:	4b06      	ldr	r3, [pc, #24]	; (80139a0 <prvSwitchTimerLists+0xc0>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801398a:	4b06      	ldr	r3, [pc, #24]	; (80139a4 <prvSwitchTimerLists+0xc4>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	4a04      	ldr	r2, [pc, #16]	; (80139a0 <prvSwitchTimerLists+0xc0>)
 8013990:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013992:	4a04      	ldr	r2, [pc, #16]	; (80139a4 <prvSwitchTimerLists+0xc4>)
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	6013      	str	r3, [r2, #0]
}
 8013998:	bf00      	nop
 801399a:	3718      	adds	r7, #24
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	240013a0 	.word	0x240013a0
 80139a4:	240013a4 	.word	0x240013a4

080139a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80139ae:	f000 f989 	bl	8013cc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80139b2:	4b15      	ldr	r3, [pc, #84]	; (8013a08 <prvCheckForValidListAndQueue+0x60>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d120      	bne.n	80139fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80139ba:	4814      	ldr	r0, [pc, #80]	; (8013a0c <prvCheckForValidListAndQueue+0x64>)
 80139bc:	f7fd fe9c 	bl	80116f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80139c0:	4813      	ldr	r0, [pc, #76]	; (8013a10 <prvCheckForValidListAndQueue+0x68>)
 80139c2:	f7fd fe99 	bl	80116f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80139c6:	4b13      	ldr	r3, [pc, #76]	; (8013a14 <prvCheckForValidListAndQueue+0x6c>)
 80139c8:	4a10      	ldr	r2, [pc, #64]	; (8013a0c <prvCheckForValidListAndQueue+0x64>)
 80139ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80139cc:	4b12      	ldr	r3, [pc, #72]	; (8013a18 <prvCheckForValidListAndQueue+0x70>)
 80139ce:	4a10      	ldr	r2, [pc, #64]	; (8013a10 <prvCheckForValidListAndQueue+0x68>)
 80139d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80139d2:	2300      	movs	r3, #0
 80139d4:	9300      	str	r3, [sp, #0]
 80139d6:	4b11      	ldr	r3, [pc, #68]	; (8013a1c <prvCheckForValidListAndQueue+0x74>)
 80139d8:	4a11      	ldr	r2, [pc, #68]	; (8013a20 <prvCheckForValidListAndQueue+0x78>)
 80139da:	2110      	movs	r1, #16
 80139dc:	200a      	movs	r0, #10
 80139de:	f7fd ffa7 	bl	8011930 <xQueueGenericCreateStatic>
 80139e2:	4603      	mov	r3, r0
 80139e4:	4a08      	ldr	r2, [pc, #32]	; (8013a08 <prvCheckForValidListAndQueue+0x60>)
 80139e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80139e8:	4b07      	ldr	r3, [pc, #28]	; (8013a08 <prvCheckForValidListAndQueue+0x60>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d005      	beq.n	80139fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80139f0:	4b05      	ldr	r3, [pc, #20]	; (8013a08 <prvCheckForValidListAndQueue+0x60>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	490b      	ldr	r1, [pc, #44]	; (8013a24 <prvCheckForValidListAndQueue+0x7c>)
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7fe fcb6 	bl	8012368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80139fc:	f000 f992 	bl	8013d24 <vPortExitCritical>
}
 8013a00:	bf00      	nop
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	240013a8 	.word	0x240013a8
 8013a0c:	24001378 	.word	0x24001378
 8013a10:	2400138c 	.word	0x2400138c
 8013a14:	240013a0 	.word	0x240013a0
 8013a18:	240013a4 	.word	0x240013a4
 8013a1c:	24001454 	.word	0x24001454
 8013a20:	240013b4 	.word	0x240013b4
 8013a24:	080155b8 	.word	0x080155b8

08013a28 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b08a      	sub	sp, #40	; 0x28
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	607a      	str	r2, [r7, #4]
 8013a34:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8013a36:	f06f 0301 	mvn.w	r3, #1
 8013a3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013a48:	4b06      	ldr	r3, [pc, #24]	; (8013a64 <xTimerPendFunctionCallFromISR+0x3c>)
 8013a4a:	6818      	ldr	r0, [r3, #0]
 8013a4c:	f107 0114 	add.w	r1, r7, #20
 8013a50:	2300      	movs	r3, #0
 8013a52:	683a      	ldr	r2, [r7, #0]
 8013a54:	f7fe f940 	bl	8011cd8 <xQueueGenericSendFromISR>
 8013a58:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8013a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3728      	adds	r7, #40	; 0x28
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	240013a8 	.word	0x240013a8

08013a68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b085      	sub	sp, #20
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	3b04      	subs	r3, #4
 8013a78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	3b04      	subs	r3, #4
 8013a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	f023 0201 	bic.w	r2, r3, #1
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	3b04      	subs	r3, #4
 8013a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013a98:	4a0c      	ldr	r2, [pc, #48]	; (8013acc <pxPortInitialiseStack+0x64>)
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	3b14      	subs	r3, #20
 8013aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013aa4:	687a      	ldr	r2, [r7, #4]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	3b04      	subs	r3, #4
 8013aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f06f 0202 	mvn.w	r2, #2
 8013ab6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	3b20      	subs	r3, #32
 8013abc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013abe:	68fb      	ldr	r3, [r7, #12]
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3714      	adds	r7, #20
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aca:	4770      	bx	lr
 8013acc:	08013ad1 	.word	0x08013ad1

08013ad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b085      	sub	sp, #20
 8013ad4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013ada:	4b12      	ldr	r3, [pc, #72]	; (8013b24 <prvTaskExitError+0x54>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ae2:	d00a      	beq.n	8013afa <prvTaskExitError+0x2a>
	__asm volatile
 8013ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae8:	f383 8811 	msr	BASEPRI, r3
 8013aec:	f3bf 8f6f 	isb	sy
 8013af0:	f3bf 8f4f 	dsb	sy
 8013af4:	60fb      	str	r3, [r7, #12]
}
 8013af6:	bf00      	nop
 8013af8:	e7fe      	b.n	8013af8 <prvTaskExitError+0x28>
	__asm volatile
 8013afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013afe:	f383 8811 	msr	BASEPRI, r3
 8013b02:	f3bf 8f6f 	isb	sy
 8013b06:	f3bf 8f4f 	dsb	sy
 8013b0a:	60bb      	str	r3, [r7, #8]
}
 8013b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013b0e:	bf00      	nop
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d0fc      	beq.n	8013b10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013b16:	bf00      	nop
 8013b18:	bf00      	nop
 8013b1a:	3714      	adds	r7, #20
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b22:	4770      	bx	lr
 8013b24:	24000098 	.word	0x24000098
	...

08013b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013b30:	4b07      	ldr	r3, [pc, #28]	; (8013b50 <pxCurrentTCBConst2>)
 8013b32:	6819      	ldr	r1, [r3, #0]
 8013b34:	6808      	ldr	r0, [r1, #0]
 8013b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b3a:	f380 8809 	msr	PSP, r0
 8013b3e:	f3bf 8f6f 	isb	sy
 8013b42:	f04f 0000 	mov.w	r0, #0
 8013b46:	f380 8811 	msr	BASEPRI, r0
 8013b4a:	4770      	bx	lr
 8013b4c:	f3af 8000 	nop.w

08013b50 <pxCurrentTCBConst2>:
 8013b50:	24000e78 	.word	0x24000e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013b54:	bf00      	nop
 8013b56:	bf00      	nop

08013b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013b58:	4808      	ldr	r0, [pc, #32]	; (8013b7c <prvPortStartFirstTask+0x24>)
 8013b5a:	6800      	ldr	r0, [r0, #0]
 8013b5c:	6800      	ldr	r0, [r0, #0]
 8013b5e:	f380 8808 	msr	MSP, r0
 8013b62:	f04f 0000 	mov.w	r0, #0
 8013b66:	f380 8814 	msr	CONTROL, r0
 8013b6a:	b662      	cpsie	i
 8013b6c:	b661      	cpsie	f
 8013b6e:	f3bf 8f4f 	dsb	sy
 8013b72:	f3bf 8f6f 	isb	sy
 8013b76:	df00      	svc	0
 8013b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013b7a:	bf00      	nop
 8013b7c:	e000ed08 	.word	0xe000ed08

08013b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b086      	sub	sp, #24
 8013b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013b86:	4b46      	ldr	r3, [pc, #280]	; (8013ca0 <xPortStartScheduler+0x120>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	4a46      	ldr	r2, [pc, #280]	; (8013ca4 <xPortStartScheduler+0x124>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d10a      	bne.n	8013ba6 <xPortStartScheduler+0x26>
	__asm volatile
 8013b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b94:	f383 8811 	msr	BASEPRI, r3
 8013b98:	f3bf 8f6f 	isb	sy
 8013b9c:	f3bf 8f4f 	dsb	sy
 8013ba0:	613b      	str	r3, [r7, #16]
}
 8013ba2:	bf00      	nop
 8013ba4:	e7fe      	b.n	8013ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013ba6:	4b3e      	ldr	r3, [pc, #248]	; (8013ca0 <xPortStartScheduler+0x120>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4a3f      	ldr	r2, [pc, #252]	; (8013ca8 <xPortStartScheduler+0x128>)
 8013bac:	4293      	cmp	r3, r2
 8013bae:	d10a      	bne.n	8013bc6 <xPortStartScheduler+0x46>
	__asm volatile
 8013bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bb4:	f383 8811 	msr	BASEPRI, r3
 8013bb8:	f3bf 8f6f 	isb	sy
 8013bbc:	f3bf 8f4f 	dsb	sy
 8013bc0:	60fb      	str	r3, [r7, #12]
}
 8013bc2:	bf00      	nop
 8013bc4:	e7fe      	b.n	8013bc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013bc6:	4b39      	ldr	r3, [pc, #228]	; (8013cac <xPortStartScheduler+0x12c>)
 8013bc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	22ff      	movs	r2, #255	; 0xff
 8013bd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013be0:	78fb      	ldrb	r3, [r7, #3]
 8013be2:	b2db      	uxtb	r3, r3
 8013be4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013be8:	b2da      	uxtb	r2, r3
 8013bea:	4b31      	ldr	r3, [pc, #196]	; (8013cb0 <xPortStartScheduler+0x130>)
 8013bec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013bee:	4b31      	ldr	r3, [pc, #196]	; (8013cb4 <xPortStartScheduler+0x134>)
 8013bf0:	2207      	movs	r2, #7
 8013bf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013bf4:	e009      	b.n	8013c0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013bf6:	4b2f      	ldr	r3, [pc, #188]	; (8013cb4 <xPortStartScheduler+0x134>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	3b01      	subs	r3, #1
 8013bfc:	4a2d      	ldr	r2, [pc, #180]	; (8013cb4 <xPortStartScheduler+0x134>)
 8013bfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013c00:	78fb      	ldrb	r3, [r7, #3]
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	005b      	lsls	r3, r3, #1
 8013c06:	b2db      	uxtb	r3, r3
 8013c08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013c0a:	78fb      	ldrb	r3, [r7, #3]
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c12:	2b80      	cmp	r3, #128	; 0x80
 8013c14:	d0ef      	beq.n	8013bf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013c16:	4b27      	ldr	r3, [pc, #156]	; (8013cb4 <xPortStartScheduler+0x134>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	f1c3 0307 	rsb	r3, r3, #7
 8013c1e:	2b04      	cmp	r3, #4
 8013c20:	d00a      	beq.n	8013c38 <xPortStartScheduler+0xb8>
	__asm volatile
 8013c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c26:	f383 8811 	msr	BASEPRI, r3
 8013c2a:	f3bf 8f6f 	isb	sy
 8013c2e:	f3bf 8f4f 	dsb	sy
 8013c32:	60bb      	str	r3, [r7, #8]
}
 8013c34:	bf00      	nop
 8013c36:	e7fe      	b.n	8013c36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013c38:	4b1e      	ldr	r3, [pc, #120]	; (8013cb4 <xPortStartScheduler+0x134>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	021b      	lsls	r3, r3, #8
 8013c3e:	4a1d      	ldr	r2, [pc, #116]	; (8013cb4 <xPortStartScheduler+0x134>)
 8013c40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013c42:	4b1c      	ldr	r3, [pc, #112]	; (8013cb4 <xPortStartScheduler+0x134>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013c4a:	4a1a      	ldr	r2, [pc, #104]	; (8013cb4 <xPortStartScheduler+0x134>)
 8013c4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	b2da      	uxtb	r2, r3
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013c56:	4b18      	ldr	r3, [pc, #96]	; (8013cb8 <xPortStartScheduler+0x138>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	4a17      	ldr	r2, [pc, #92]	; (8013cb8 <xPortStartScheduler+0x138>)
 8013c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013c60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013c62:	4b15      	ldr	r3, [pc, #84]	; (8013cb8 <xPortStartScheduler+0x138>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	4a14      	ldr	r2, [pc, #80]	; (8013cb8 <xPortStartScheduler+0x138>)
 8013c68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013c6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013c6e:	f000 f8dd 	bl	8013e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013c72:	4b12      	ldr	r3, [pc, #72]	; (8013cbc <xPortStartScheduler+0x13c>)
 8013c74:	2200      	movs	r2, #0
 8013c76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013c78:	f000 f8fc 	bl	8013e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013c7c:	4b10      	ldr	r3, [pc, #64]	; (8013cc0 <xPortStartScheduler+0x140>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	4a0f      	ldr	r2, [pc, #60]	; (8013cc0 <xPortStartScheduler+0x140>)
 8013c82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013c86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013c88:	f7ff ff66 	bl	8013b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013c8c:	f7fe ff7c 	bl	8012b88 <vTaskSwitchContext>
	prvTaskExitError();
 8013c90:	f7ff ff1e 	bl	8013ad0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013c94:	2300      	movs	r3, #0
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3718      	adds	r7, #24
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	e000ed00 	.word	0xe000ed00
 8013ca4:	410fc271 	.word	0x410fc271
 8013ca8:	410fc270 	.word	0x410fc270
 8013cac:	e000e400 	.word	0xe000e400
 8013cb0:	240014a4 	.word	0x240014a4
 8013cb4:	240014a8 	.word	0x240014a8
 8013cb8:	e000ed20 	.word	0xe000ed20
 8013cbc:	24000098 	.word	0x24000098
 8013cc0:	e000ef34 	.word	0xe000ef34

08013cc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
	__asm volatile
 8013cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cce:	f383 8811 	msr	BASEPRI, r3
 8013cd2:	f3bf 8f6f 	isb	sy
 8013cd6:	f3bf 8f4f 	dsb	sy
 8013cda:	607b      	str	r3, [r7, #4]
}
 8013cdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013cde:	4b0f      	ldr	r3, [pc, #60]	; (8013d1c <vPortEnterCritical+0x58>)
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	4a0d      	ldr	r2, [pc, #52]	; (8013d1c <vPortEnterCritical+0x58>)
 8013ce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013ce8:	4b0c      	ldr	r3, [pc, #48]	; (8013d1c <vPortEnterCritical+0x58>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	2b01      	cmp	r3, #1
 8013cee:	d10f      	bne.n	8013d10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013cf0:	4b0b      	ldr	r3, [pc, #44]	; (8013d20 <vPortEnterCritical+0x5c>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	b2db      	uxtb	r3, r3
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d00a      	beq.n	8013d10 <vPortEnterCritical+0x4c>
	__asm volatile
 8013cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cfe:	f383 8811 	msr	BASEPRI, r3
 8013d02:	f3bf 8f6f 	isb	sy
 8013d06:	f3bf 8f4f 	dsb	sy
 8013d0a:	603b      	str	r3, [r7, #0]
}
 8013d0c:	bf00      	nop
 8013d0e:	e7fe      	b.n	8013d0e <vPortEnterCritical+0x4a>
	}
}
 8013d10:	bf00      	nop
 8013d12:	370c      	adds	r7, #12
 8013d14:	46bd      	mov	sp, r7
 8013d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1a:	4770      	bx	lr
 8013d1c:	24000098 	.word	0x24000098
 8013d20:	e000ed04 	.word	0xe000ed04

08013d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013d2a:	4b12      	ldr	r3, [pc, #72]	; (8013d74 <vPortExitCritical+0x50>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d10a      	bne.n	8013d48 <vPortExitCritical+0x24>
	__asm volatile
 8013d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d36:	f383 8811 	msr	BASEPRI, r3
 8013d3a:	f3bf 8f6f 	isb	sy
 8013d3e:	f3bf 8f4f 	dsb	sy
 8013d42:	607b      	str	r3, [r7, #4]
}
 8013d44:	bf00      	nop
 8013d46:	e7fe      	b.n	8013d46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013d48:	4b0a      	ldr	r3, [pc, #40]	; (8013d74 <vPortExitCritical+0x50>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	3b01      	subs	r3, #1
 8013d4e:	4a09      	ldr	r2, [pc, #36]	; (8013d74 <vPortExitCritical+0x50>)
 8013d50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013d52:	4b08      	ldr	r3, [pc, #32]	; (8013d74 <vPortExitCritical+0x50>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d105      	bne.n	8013d66 <vPortExitCritical+0x42>
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013d5e:	683b      	ldr	r3, [r7, #0]
 8013d60:	f383 8811 	msr	BASEPRI, r3
}
 8013d64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013d66:	bf00      	nop
 8013d68:	370c      	adds	r7, #12
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d70:	4770      	bx	lr
 8013d72:	bf00      	nop
 8013d74:	24000098 	.word	0x24000098
	...

08013d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013d80:	f3ef 8009 	mrs	r0, PSP
 8013d84:	f3bf 8f6f 	isb	sy
 8013d88:	4b15      	ldr	r3, [pc, #84]	; (8013de0 <pxCurrentTCBConst>)
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	f01e 0f10 	tst.w	lr, #16
 8013d90:	bf08      	it	eq
 8013d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d9a:	6010      	str	r0, [r2, #0]
 8013d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013da4:	f380 8811 	msr	BASEPRI, r0
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	f3bf 8f6f 	isb	sy
 8013db0:	f7fe feea 	bl	8012b88 <vTaskSwitchContext>
 8013db4:	f04f 0000 	mov.w	r0, #0
 8013db8:	f380 8811 	msr	BASEPRI, r0
 8013dbc:	bc09      	pop	{r0, r3}
 8013dbe:	6819      	ldr	r1, [r3, #0]
 8013dc0:	6808      	ldr	r0, [r1, #0]
 8013dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc6:	f01e 0f10 	tst.w	lr, #16
 8013dca:	bf08      	it	eq
 8013dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013dd0:	f380 8809 	msr	PSP, r0
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop
 8013ddc:	f3af 8000 	nop.w

08013de0 <pxCurrentTCBConst>:
 8013de0:	24000e78 	.word	0x24000e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013de4:	bf00      	nop
 8013de6:	bf00      	nop

08013de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
	__asm volatile
 8013dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013df2:	f383 8811 	msr	BASEPRI, r3
 8013df6:	f3bf 8f6f 	isb	sy
 8013dfa:	f3bf 8f4f 	dsb	sy
 8013dfe:	607b      	str	r3, [r7, #4]
}
 8013e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013e02:	f7fe fe07 	bl	8012a14 <xTaskIncrementTick>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d003      	beq.n	8013e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013e0c:	4b06      	ldr	r3, [pc, #24]	; (8013e28 <xPortSysTickHandler+0x40>)
 8013e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e12:	601a      	str	r2, [r3, #0]
 8013e14:	2300      	movs	r3, #0
 8013e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	f383 8811 	msr	BASEPRI, r3
}
 8013e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013e20:	bf00      	nop
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	e000ed04 	.word	0xe000ed04

08013e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013e30:	4b0b      	ldr	r3, [pc, #44]	; (8013e60 <vPortSetupTimerInterrupt+0x34>)
 8013e32:	2200      	movs	r2, #0
 8013e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013e36:	4b0b      	ldr	r3, [pc, #44]	; (8013e64 <vPortSetupTimerInterrupt+0x38>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013e3c:	4b0a      	ldr	r3, [pc, #40]	; (8013e68 <vPortSetupTimerInterrupt+0x3c>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	4a0a      	ldr	r2, [pc, #40]	; (8013e6c <vPortSetupTimerInterrupt+0x40>)
 8013e42:	fba2 2303 	umull	r2, r3, r2, r3
 8013e46:	099b      	lsrs	r3, r3, #6
 8013e48:	4a09      	ldr	r2, [pc, #36]	; (8013e70 <vPortSetupTimerInterrupt+0x44>)
 8013e4a:	3b01      	subs	r3, #1
 8013e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013e4e:	4b04      	ldr	r3, [pc, #16]	; (8013e60 <vPortSetupTimerInterrupt+0x34>)
 8013e50:	2207      	movs	r2, #7
 8013e52:	601a      	str	r2, [r3, #0]
}
 8013e54:	bf00      	nop
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	e000e010 	.word	0xe000e010
 8013e64:	e000e018 	.word	0xe000e018
 8013e68:	24000088 	.word	0x24000088
 8013e6c:	10624dd3 	.word	0x10624dd3
 8013e70:	e000e014 	.word	0xe000e014

08013e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013e74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013e84 <vPortEnableVFP+0x10>
 8013e78:	6801      	ldr	r1, [r0, #0]
 8013e7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013e7e:	6001      	str	r1, [r0, #0]
 8013e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013e82:	bf00      	nop
 8013e84:	e000ed88 	.word	0xe000ed88

08013e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013e88:	b480      	push	{r7}
 8013e8a:	b085      	sub	sp, #20
 8013e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013e8e:	f3ef 8305 	mrs	r3, IPSR
 8013e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	2b0f      	cmp	r3, #15
 8013e98:	d914      	bls.n	8013ec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013e9a:	4a17      	ldr	r2, [pc, #92]	; (8013ef8 <vPortValidateInterruptPriority+0x70>)
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	4413      	add	r3, r2
 8013ea0:	781b      	ldrb	r3, [r3, #0]
 8013ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013ea4:	4b15      	ldr	r3, [pc, #84]	; (8013efc <vPortValidateInterruptPriority+0x74>)
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	7afa      	ldrb	r2, [r7, #11]
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d20a      	bcs.n	8013ec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb2:	f383 8811 	msr	BASEPRI, r3
 8013eb6:	f3bf 8f6f 	isb	sy
 8013eba:	f3bf 8f4f 	dsb	sy
 8013ebe:	607b      	str	r3, [r7, #4]
}
 8013ec0:	bf00      	nop
 8013ec2:	e7fe      	b.n	8013ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013ec4:	4b0e      	ldr	r3, [pc, #56]	; (8013f00 <vPortValidateInterruptPriority+0x78>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013ecc:	4b0d      	ldr	r3, [pc, #52]	; (8013f04 <vPortValidateInterruptPriority+0x7c>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d90a      	bls.n	8013eea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed8:	f383 8811 	msr	BASEPRI, r3
 8013edc:	f3bf 8f6f 	isb	sy
 8013ee0:	f3bf 8f4f 	dsb	sy
 8013ee4:	603b      	str	r3, [r7, #0]
}
 8013ee6:	bf00      	nop
 8013ee8:	e7fe      	b.n	8013ee8 <vPortValidateInterruptPriority+0x60>
	}
 8013eea:	bf00      	nop
 8013eec:	3714      	adds	r7, #20
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef4:	4770      	bx	lr
 8013ef6:	bf00      	nop
 8013ef8:	e000e3f0 	.word	0xe000e3f0
 8013efc:	240014a4 	.word	0x240014a4
 8013f00:	e000ed0c 	.word	0xe000ed0c
 8013f04:	240014a8 	.word	0x240014a8

08013f08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b08a      	sub	sp, #40	; 0x28
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013f10:	2300      	movs	r3, #0
 8013f12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013f14:	f7fe fcc2 	bl	801289c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013f18:	4b5b      	ldr	r3, [pc, #364]	; (8014088 <pvPortMalloc+0x180>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d101      	bne.n	8013f24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013f20:	f000 f920 	bl	8014164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013f24:	4b59      	ldr	r3, [pc, #356]	; (801408c <pvPortMalloc+0x184>)
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	4013      	ands	r3, r2
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	f040 8093 	bne.w	8014058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d01d      	beq.n	8013f74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013f38:	2208      	movs	r2, #8
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	4413      	add	r3, r2
 8013f3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f003 0307 	and.w	r3, r3, #7
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d014      	beq.n	8013f74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f023 0307 	bic.w	r3, r3, #7
 8013f50:	3308      	adds	r3, #8
 8013f52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f003 0307 	and.w	r3, r3, #7
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d00a      	beq.n	8013f74 <pvPortMalloc+0x6c>
	__asm volatile
 8013f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f62:	f383 8811 	msr	BASEPRI, r3
 8013f66:	f3bf 8f6f 	isb	sy
 8013f6a:	f3bf 8f4f 	dsb	sy
 8013f6e:	617b      	str	r3, [r7, #20]
}
 8013f70:	bf00      	nop
 8013f72:	e7fe      	b.n	8013f72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d06e      	beq.n	8014058 <pvPortMalloc+0x150>
 8013f7a:	4b45      	ldr	r3, [pc, #276]	; (8014090 <pvPortMalloc+0x188>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d869      	bhi.n	8014058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013f84:	4b43      	ldr	r3, [pc, #268]	; (8014094 <pvPortMalloc+0x18c>)
 8013f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013f88:	4b42      	ldr	r3, [pc, #264]	; (8014094 <pvPortMalloc+0x18c>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013f8e:	e004      	b.n	8013f9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d903      	bls.n	8013fac <pvPortMalloc+0xa4>
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d1f1      	bne.n	8013f90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013fac:	4b36      	ldr	r3, [pc, #216]	; (8014088 <pvPortMalloc+0x180>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d050      	beq.n	8014058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013fb6:	6a3b      	ldr	r3, [r7, #32]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	2208      	movs	r2, #8
 8013fbc:	4413      	add	r3, r2
 8013fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc2:	681a      	ldr	r2, [r3, #0]
 8013fc4:	6a3b      	ldr	r3, [r7, #32]
 8013fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fca:	685a      	ldr	r2, [r3, #4]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	1ad2      	subs	r2, r2, r3
 8013fd0:	2308      	movs	r3, #8
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	429a      	cmp	r2, r3
 8013fd6:	d91f      	bls.n	8014018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4413      	add	r3, r2
 8013fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013fe0:	69bb      	ldr	r3, [r7, #24]
 8013fe2:	f003 0307 	and.w	r3, r3, #7
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00a      	beq.n	8014000 <pvPortMalloc+0xf8>
	__asm volatile
 8013fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fee:	f383 8811 	msr	BASEPRI, r3
 8013ff2:	f3bf 8f6f 	isb	sy
 8013ff6:	f3bf 8f4f 	dsb	sy
 8013ffa:	613b      	str	r3, [r7, #16]
}
 8013ffc:	bf00      	nop
 8013ffe:	e7fe      	b.n	8013ffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	685a      	ldr	r2, [r3, #4]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	1ad2      	subs	r2, r2, r3
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400e:	687a      	ldr	r2, [r7, #4]
 8014010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014012:	69b8      	ldr	r0, [r7, #24]
 8014014:	f000 f908 	bl	8014228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014018:	4b1d      	ldr	r3, [pc, #116]	; (8014090 <pvPortMalloc+0x188>)
 801401a:	681a      	ldr	r2, [r3, #0]
 801401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	4a1b      	ldr	r2, [pc, #108]	; (8014090 <pvPortMalloc+0x188>)
 8014024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014026:	4b1a      	ldr	r3, [pc, #104]	; (8014090 <pvPortMalloc+0x188>)
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	4b1b      	ldr	r3, [pc, #108]	; (8014098 <pvPortMalloc+0x190>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	429a      	cmp	r2, r3
 8014030:	d203      	bcs.n	801403a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014032:	4b17      	ldr	r3, [pc, #92]	; (8014090 <pvPortMalloc+0x188>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	4a18      	ldr	r2, [pc, #96]	; (8014098 <pvPortMalloc+0x190>)
 8014038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801403c:	685a      	ldr	r2, [r3, #4]
 801403e:	4b13      	ldr	r3, [pc, #76]	; (801408c <pvPortMalloc+0x184>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	431a      	orrs	r2, r3
 8014044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404a:	2200      	movs	r2, #0
 801404c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801404e:	4b13      	ldr	r3, [pc, #76]	; (801409c <pvPortMalloc+0x194>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	3301      	adds	r3, #1
 8014054:	4a11      	ldr	r2, [pc, #68]	; (801409c <pvPortMalloc+0x194>)
 8014056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014058:	f7fe fc2e 	bl	80128b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801405c:	69fb      	ldr	r3, [r7, #28]
 801405e:	f003 0307 	and.w	r3, r3, #7
 8014062:	2b00      	cmp	r3, #0
 8014064:	d00a      	beq.n	801407c <pvPortMalloc+0x174>
	__asm volatile
 8014066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801406a:	f383 8811 	msr	BASEPRI, r3
 801406e:	f3bf 8f6f 	isb	sy
 8014072:	f3bf 8f4f 	dsb	sy
 8014076:	60fb      	str	r3, [r7, #12]
}
 8014078:	bf00      	nop
 801407a:	e7fe      	b.n	801407a <pvPortMalloc+0x172>
	return pvReturn;
 801407c:	69fb      	ldr	r3, [r7, #28]
}
 801407e:	4618      	mov	r0, r3
 8014080:	3728      	adds	r7, #40	; 0x28
 8014082:	46bd      	mov	sp, r7
 8014084:	bd80      	pop	{r7, pc}
 8014086:	bf00      	nop
 8014088:	240050b4 	.word	0x240050b4
 801408c:	240050c8 	.word	0x240050c8
 8014090:	240050b8 	.word	0x240050b8
 8014094:	240050ac 	.word	0x240050ac
 8014098:	240050bc 	.word	0x240050bc
 801409c:	240050c0 	.word	0x240050c0

080140a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b086      	sub	sp, #24
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d04d      	beq.n	801414e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80140b2:	2308      	movs	r3, #8
 80140b4:	425b      	negs	r3, r3
 80140b6:	697a      	ldr	r2, [r7, #20]
 80140b8:	4413      	add	r3, r2
 80140ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	685a      	ldr	r2, [r3, #4]
 80140c4:	4b24      	ldr	r3, [pc, #144]	; (8014158 <vPortFree+0xb8>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	4013      	ands	r3, r2
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d10a      	bne.n	80140e4 <vPortFree+0x44>
	__asm volatile
 80140ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d2:	f383 8811 	msr	BASEPRI, r3
 80140d6:	f3bf 8f6f 	isb	sy
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	60fb      	str	r3, [r7, #12]
}
 80140e0:	bf00      	nop
 80140e2:	e7fe      	b.n	80140e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d00a      	beq.n	8014102 <vPortFree+0x62>
	__asm volatile
 80140ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140f0:	f383 8811 	msr	BASEPRI, r3
 80140f4:	f3bf 8f6f 	isb	sy
 80140f8:	f3bf 8f4f 	dsb	sy
 80140fc:	60bb      	str	r3, [r7, #8]
}
 80140fe:	bf00      	nop
 8014100:	e7fe      	b.n	8014100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	685a      	ldr	r2, [r3, #4]
 8014106:	4b14      	ldr	r3, [pc, #80]	; (8014158 <vPortFree+0xb8>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	4013      	ands	r3, r2
 801410c:	2b00      	cmp	r3, #0
 801410e:	d01e      	beq.n	801414e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d11a      	bne.n	801414e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	685a      	ldr	r2, [r3, #4]
 801411c:	4b0e      	ldr	r3, [pc, #56]	; (8014158 <vPortFree+0xb8>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	43db      	mvns	r3, r3
 8014122:	401a      	ands	r2, r3
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014128:	f7fe fbb8 	bl	801289c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801412c:	693b      	ldr	r3, [r7, #16]
 801412e:	685a      	ldr	r2, [r3, #4]
 8014130:	4b0a      	ldr	r3, [pc, #40]	; (801415c <vPortFree+0xbc>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	4413      	add	r3, r2
 8014136:	4a09      	ldr	r2, [pc, #36]	; (801415c <vPortFree+0xbc>)
 8014138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801413a:	6938      	ldr	r0, [r7, #16]
 801413c:	f000 f874 	bl	8014228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014140:	4b07      	ldr	r3, [pc, #28]	; (8014160 <vPortFree+0xc0>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	3301      	adds	r3, #1
 8014146:	4a06      	ldr	r2, [pc, #24]	; (8014160 <vPortFree+0xc0>)
 8014148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801414a:	f7fe fbb5 	bl	80128b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801414e:	bf00      	nop
 8014150:	3718      	adds	r7, #24
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
 8014156:	bf00      	nop
 8014158:	240050c8 	.word	0x240050c8
 801415c:	240050b8 	.word	0x240050b8
 8014160:	240050c4 	.word	0x240050c4

08014164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014164:	b480      	push	{r7}
 8014166:	b085      	sub	sp, #20
 8014168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801416a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801416e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014170:	4b27      	ldr	r3, [pc, #156]	; (8014210 <prvHeapInit+0xac>)
 8014172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	f003 0307 	and.w	r3, r3, #7
 801417a:	2b00      	cmp	r3, #0
 801417c:	d00c      	beq.n	8014198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	3307      	adds	r3, #7
 8014182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	f023 0307 	bic.w	r3, r3, #7
 801418a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801418c:	68ba      	ldr	r2, [r7, #8]
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	1ad3      	subs	r3, r2, r3
 8014192:	4a1f      	ldr	r2, [pc, #124]	; (8014210 <prvHeapInit+0xac>)
 8014194:	4413      	add	r3, r2
 8014196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801419c:	4a1d      	ldr	r2, [pc, #116]	; (8014214 <prvHeapInit+0xb0>)
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80141a2:	4b1c      	ldr	r3, [pc, #112]	; (8014214 <prvHeapInit+0xb0>)
 80141a4:	2200      	movs	r2, #0
 80141a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	68ba      	ldr	r2, [r7, #8]
 80141ac:	4413      	add	r3, r2
 80141ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80141b0:	2208      	movs	r2, #8
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	1a9b      	subs	r3, r3, r2
 80141b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	f023 0307 	bic.w	r3, r3, #7
 80141be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	4a15      	ldr	r2, [pc, #84]	; (8014218 <prvHeapInit+0xb4>)
 80141c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80141c6:	4b14      	ldr	r3, [pc, #80]	; (8014218 <prvHeapInit+0xb4>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2200      	movs	r2, #0
 80141cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80141ce:	4b12      	ldr	r3, [pc, #72]	; (8014218 <prvHeapInit+0xb4>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	2200      	movs	r2, #0
 80141d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	68fa      	ldr	r2, [r7, #12]
 80141de:	1ad2      	subs	r2, r2, r3
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80141e4:	4b0c      	ldr	r3, [pc, #48]	; (8014218 <prvHeapInit+0xb4>)
 80141e6:	681a      	ldr	r2, [r3, #0]
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	685b      	ldr	r3, [r3, #4]
 80141f0:	4a0a      	ldr	r2, [pc, #40]	; (801421c <prvHeapInit+0xb8>)
 80141f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	4a09      	ldr	r2, [pc, #36]	; (8014220 <prvHeapInit+0xbc>)
 80141fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80141fc:	4b09      	ldr	r3, [pc, #36]	; (8014224 <prvHeapInit+0xc0>)
 80141fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014202:	601a      	str	r2, [r3, #0]
}
 8014204:	bf00      	nop
 8014206:	3714      	adds	r7, #20
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr
 8014210:	240014ac 	.word	0x240014ac
 8014214:	240050ac 	.word	0x240050ac
 8014218:	240050b4 	.word	0x240050b4
 801421c:	240050bc 	.word	0x240050bc
 8014220:	240050b8 	.word	0x240050b8
 8014224:	240050c8 	.word	0x240050c8

08014228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014228:	b480      	push	{r7}
 801422a:	b085      	sub	sp, #20
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014230:	4b28      	ldr	r3, [pc, #160]	; (80142d4 <prvInsertBlockIntoFreeList+0xac>)
 8014232:	60fb      	str	r3, [r7, #12]
 8014234:	e002      	b.n	801423c <prvInsertBlockIntoFreeList+0x14>
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	60fb      	str	r3, [r7, #12]
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	687a      	ldr	r2, [r7, #4]
 8014242:	429a      	cmp	r2, r3
 8014244:	d8f7      	bhi.n	8014236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	685b      	ldr	r3, [r3, #4]
 801424e:	68ba      	ldr	r2, [r7, #8]
 8014250:	4413      	add	r3, r2
 8014252:	687a      	ldr	r2, [r7, #4]
 8014254:	429a      	cmp	r2, r3
 8014256:	d108      	bne.n	801426a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	685a      	ldr	r2, [r3, #4]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	441a      	add	r2, r3
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	68ba      	ldr	r2, [r7, #8]
 8014274:	441a      	add	r2, r3
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	429a      	cmp	r2, r3
 801427c:	d118      	bne.n	80142b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	4b15      	ldr	r3, [pc, #84]	; (80142d8 <prvInsertBlockIntoFreeList+0xb0>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	429a      	cmp	r2, r3
 8014288:	d00d      	beq.n	80142a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	685a      	ldr	r2, [r3, #4]
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	685b      	ldr	r3, [r3, #4]
 8014294:	441a      	add	r2, r3
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	681a      	ldr	r2, [r3, #0]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	601a      	str	r2, [r3, #0]
 80142a4:	e008      	b.n	80142b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80142a6:	4b0c      	ldr	r3, [pc, #48]	; (80142d8 <prvInsertBlockIntoFreeList+0xb0>)
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	601a      	str	r2, [r3, #0]
 80142ae:	e003      	b.n	80142b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80142b8:	68fa      	ldr	r2, [r7, #12]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d002      	beq.n	80142c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	687a      	ldr	r2, [r7, #4]
 80142c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142c6:	bf00      	nop
 80142c8:	3714      	adds	r7, #20
 80142ca:	46bd      	mov	sp, r7
 80142cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d0:	4770      	bx	lr
 80142d2:	bf00      	nop
 80142d4:	240050ac 	.word	0x240050ac
 80142d8:	240050b4 	.word	0x240050b4

080142dc <__errno>:
 80142dc:	4b01      	ldr	r3, [pc, #4]	; (80142e4 <__errno+0x8>)
 80142de:	6818      	ldr	r0, [r3, #0]
 80142e0:	4770      	bx	lr
 80142e2:	bf00      	nop
 80142e4:	2400009c 	.word	0x2400009c

080142e8 <__libc_init_array>:
 80142e8:	b570      	push	{r4, r5, r6, lr}
 80142ea:	4d0d      	ldr	r5, [pc, #52]	; (8014320 <__libc_init_array+0x38>)
 80142ec:	4c0d      	ldr	r4, [pc, #52]	; (8014324 <__libc_init_array+0x3c>)
 80142ee:	1b64      	subs	r4, r4, r5
 80142f0:	10a4      	asrs	r4, r4, #2
 80142f2:	2600      	movs	r6, #0
 80142f4:	42a6      	cmp	r6, r4
 80142f6:	d109      	bne.n	801430c <__libc_init_array+0x24>
 80142f8:	4d0b      	ldr	r5, [pc, #44]	; (8014328 <__libc_init_array+0x40>)
 80142fa:	4c0c      	ldr	r4, [pc, #48]	; (801432c <__libc_init_array+0x44>)
 80142fc:	f001 f842 	bl	8015384 <_init>
 8014300:	1b64      	subs	r4, r4, r5
 8014302:	10a4      	asrs	r4, r4, #2
 8014304:	2600      	movs	r6, #0
 8014306:	42a6      	cmp	r6, r4
 8014308:	d105      	bne.n	8014316 <__libc_init_array+0x2e>
 801430a:	bd70      	pop	{r4, r5, r6, pc}
 801430c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014310:	4798      	blx	r3
 8014312:	3601      	adds	r6, #1
 8014314:	e7ee      	b.n	80142f4 <__libc_init_array+0xc>
 8014316:	f855 3b04 	ldr.w	r3, [r5], #4
 801431a:	4798      	blx	r3
 801431c:	3601      	adds	r6, #1
 801431e:	e7f2      	b.n	8014306 <__libc_init_array+0x1e>
 8014320:	08015754 	.word	0x08015754
 8014324:	08015754 	.word	0x08015754
 8014328:	08015754 	.word	0x08015754
 801432c:	08015758 	.word	0x08015758

08014330 <malloc>:
 8014330:	4b02      	ldr	r3, [pc, #8]	; (801433c <malloc+0xc>)
 8014332:	4601      	mov	r1, r0
 8014334:	6818      	ldr	r0, [r3, #0]
 8014336:	f000 b88d 	b.w	8014454 <_malloc_r>
 801433a:	bf00      	nop
 801433c:	2400009c 	.word	0x2400009c

08014340 <free>:
 8014340:	4b02      	ldr	r3, [pc, #8]	; (801434c <free+0xc>)
 8014342:	4601      	mov	r1, r0
 8014344:	6818      	ldr	r0, [r3, #0]
 8014346:	f000 b819 	b.w	801437c <_free_r>
 801434a:	bf00      	nop
 801434c:	2400009c 	.word	0x2400009c

08014350 <memcpy>:
 8014350:	440a      	add	r2, r1
 8014352:	4291      	cmp	r1, r2
 8014354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014358:	d100      	bne.n	801435c <memcpy+0xc>
 801435a:	4770      	bx	lr
 801435c:	b510      	push	{r4, lr}
 801435e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014366:	4291      	cmp	r1, r2
 8014368:	d1f9      	bne.n	801435e <memcpy+0xe>
 801436a:	bd10      	pop	{r4, pc}

0801436c <memset>:
 801436c:	4402      	add	r2, r0
 801436e:	4603      	mov	r3, r0
 8014370:	4293      	cmp	r3, r2
 8014372:	d100      	bne.n	8014376 <memset+0xa>
 8014374:	4770      	bx	lr
 8014376:	f803 1b01 	strb.w	r1, [r3], #1
 801437a:	e7f9      	b.n	8014370 <memset+0x4>

0801437c <_free_r>:
 801437c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801437e:	2900      	cmp	r1, #0
 8014380:	d044      	beq.n	801440c <_free_r+0x90>
 8014382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014386:	9001      	str	r0, [sp, #4]
 8014388:	2b00      	cmp	r3, #0
 801438a:	f1a1 0404 	sub.w	r4, r1, #4
 801438e:	bfb8      	it	lt
 8014390:	18e4      	addlt	r4, r4, r3
 8014392:	f000 fc51 	bl	8014c38 <__malloc_lock>
 8014396:	4a1e      	ldr	r2, [pc, #120]	; (8014410 <_free_r+0x94>)
 8014398:	9801      	ldr	r0, [sp, #4]
 801439a:	6813      	ldr	r3, [r2, #0]
 801439c:	b933      	cbnz	r3, 80143ac <_free_r+0x30>
 801439e:	6063      	str	r3, [r4, #4]
 80143a0:	6014      	str	r4, [r2, #0]
 80143a2:	b003      	add	sp, #12
 80143a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143a8:	f000 bc4c 	b.w	8014c44 <__malloc_unlock>
 80143ac:	42a3      	cmp	r3, r4
 80143ae:	d908      	bls.n	80143c2 <_free_r+0x46>
 80143b0:	6825      	ldr	r5, [r4, #0]
 80143b2:	1961      	adds	r1, r4, r5
 80143b4:	428b      	cmp	r3, r1
 80143b6:	bf01      	itttt	eq
 80143b8:	6819      	ldreq	r1, [r3, #0]
 80143ba:	685b      	ldreq	r3, [r3, #4]
 80143bc:	1949      	addeq	r1, r1, r5
 80143be:	6021      	streq	r1, [r4, #0]
 80143c0:	e7ed      	b.n	801439e <_free_r+0x22>
 80143c2:	461a      	mov	r2, r3
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	b10b      	cbz	r3, 80143cc <_free_r+0x50>
 80143c8:	42a3      	cmp	r3, r4
 80143ca:	d9fa      	bls.n	80143c2 <_free_r+0x46>
 80143cc:	6811      	ldr	r1, [r2, #0]
 80143ce:	1855      	adds	r5, r2, r1
 80143d0:	42a5      	cmp	r5, r4
 80143d2:	d10b      	bne.n	80143ec <_free_r+0x70>
 80143d4:	6824      	ldr	r4, [r4, #0]
 80143d6:	4421      	add	r1, r4
 80143d8:	1854      	adds	r4, r2, r1
 80143da:	42a3      	cmp	r3, r4
 80143dc:	6011      	str	r1, [r2, #0]
 80143de:	d1e0      	bne.n	80143a2 <_free_r+0x26>
 80143e0:	681c      	ldr	r4, [r3, #0]
 80143e2:	685b      	ldr	r3, [r3, #4]
 80143e4:	6053      	str	r3, [r2, #4]
 80143e6:	4421      	add	r1, r4
 80143e8:	6011      	str	r1, [r2, #0]
 80143ea:	e7da      	b.n	80143a2 <_free_r+0x26>
 80143ec:	d902      	bls.n	80143f4 <_free_r+0x78>
 80143ee:	230c      	movs	r3, #12
 80143f0:	6003      	str	r3, [r0, #0]
 80143f2:	e7d6      	b.n	80143a2 <_free_r+0x26>
 80143f4:	6825      	ldr	r5, [r4, #0]
 80143f6:	1961      	adds	r1, r4, r5
 80143f8:	428b      	cmp	r3, r1
 80143fa:	bf04      	itt	eq
 80143fc:	6819      	ldreq	r1, [r3, #0]
 80143fe:	685b      	ldreq	r3, [r3, #4]
 8014400:	6063      	str	r3, [r4, #4]
 8014402:	bf04      	itt	eq
 8014404:	1949      	addeq	r1, r1, r5
 8014406:	6021      	streq	r1, [r4, #0]
 8014408:	6054      	str	r4, [r2, #4]
 801440a:	e7ca      	b.n	80143a2 <_free_r+0x26>
 801440c:	b003      	add	sp, #12
 801440e:	bd30      	pop	{r4, r5, pc}
 8014410:	240050cc 	.word	0x240050cc

08014414 <sbrk_aligned>:
 8014414:	b570      	push	{r4, r5, r6, lr}
 8014416:	4e0e      	ldr	r6, [pc, #56]	; (8014450 <sbrk_aligned+0x3c>)
 8014418:	460c      	mov	r4, r1
 801441a:	6831      	ldr	r1, [r6, #0]
 801441c:	4605      	mov	r5, r0
 801441e:	b911      	cbnz	r1, 8014426 <sbrk_aligned+0x12>
 8014420:	f000 f91a 	bl	8014658 <_sbrk_r>
 8014424:	6030      	str	r0, [r6, #0]
 8014426:	4621      	mov	r1, r4
 8014428:	4628      	mov	r0, r5
 801442a:	f000 f915 	bl	8014658 <_sbrk_r>
 801442e:	1c43      	adds	r3, r0, #1
 8014430:	d00a      	beq.n	8014448 <sbrk_aligned+0x34>
 8014432:	1cc4      	adds	r4, r0, #3
 8014434:	f024 0403 	bic.w	r4, r4, #3
 8014438:	42a0      	cmp	r0, r4
 801443a:	d007      	beq.n	801444c <sbrk_aligned+0x38>
 801443c:	1a21      	subs	r1, r4, r0
 801443e:	4628      	mov	r0, r5
 8014440:	f000 f90a 	bl	8014658 <_sbrk_r>
 8014444:	3001      	adds	r0, #1
 8014446:	d101      	bne.n	801444c <sbrk_aligned+0x38>
 8014448:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801444c:	4620      	mov	r0, r4
 801444e:	bd70      	pop	{r4, r5, r6, pc}
 8014450:	240050d0 	.word	0x240050d0

08014454 <_malloc_r>:
 8014454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014458:	1ccd      	adds	r5, r1, #3
 801445a:	f025 0503 	bic.w	r5, r5, #3
 801445e:	3508      	adds	r5, #8
 8014460:	2d0c      	cmp	r5, #12
 8014462:	bf38      	it	cc
 8014464:	250c      	movcc	r5, #12
 8014466:	2d00      	cmp	r5, #0
 8014468:	4607      	mov	r7, r0
 801446a:	db01      	blt.n	8014470 <_malloc_r+0x1c>
 801446c:	42a9      	cmp	r1, r5
 801446e:	d905      	bls.n	801447c <_malloc_r+0x28>
 8014470:	230c      	movs	r3, #12
 8014472:	603b      	str	r3, [r7, #0]
 8014474:	2600      	movs	r6, #0
 8014476:	4630      	mov	r0, r6
 8014478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801447c:	4e2e      	ldr	r6, [pc, #184]	; (8014538 <_malloc_r+0xe4>)
 801447e:	f000 fbdb 	bl	8014c38 <__malloc_lock>
 8014482:	6833      	ldr	r3, [r6, #0]
 8014484:	461c      	mov	r4, r3
 8014486:	bb34      	cbnz	r4, 80144d6 <_malloc_r+0x82>
 8014488:	4629      	mov	r1, r5
 801448a:	4638      	mov	r0, r7
 801448c:	f7ff ffc2 	bl	8014414 <sbrk_aligned>
 8014490:	1c43      	adds	r3, r0, #1
 8014492:	4604      	mov	r4, r0
 8014494:	d14d      	bne.n	8014532 <_malloc_r+0xde>
 8014496:	6834      	ldr	r4, [r6, #0]
 8014498:	4626      	mov	r6, r4
 801449a:	2e00      	cmp	r6, #0
 801449c:	d140      	bne.n	8014520 <_malloc_r+0xcc>
 801449e:	6823      	ldr	r3, [r4, #0]
 80144a0:	4631      	mov	r1, r6
 80144a2:	4638      	mov	r0, r7
 80144a4:	eb04 0803 	add.w	r8, r4, r3
 80144a8:	f000 f8d6 	bl	8014658 <_sbrk_r>
 80144ac:	4580      	cmp	r8, r0
 80144ae:	d13a      	bne.n	8014526 <_malloc_r+0xd2>
 80144b0:	6821      	ldr	r1, [r4, #0]
 80144b2:	3503      	adds	r5, #3
 80144b4:	1a6d      	subs	r5, r5, r1
 80144b6:	f025 0503 	bic.w	r5, r5, #3
 80144ba:	3508      	adds	r5, #8
 80144bc:	2d0c      	cmp	r5, #12
 80144be:	bf38      	it	cc
 80144c0:	250c      	movcc	r5, #12
 80144c2:	4629      	mov	r1, r5
 80144c4:	4638      	mov	r0, r7
 80144c6:	f7ff ffa5 	bl	8014414 <sbrk_aligned>
 80144ca:	3001      	adds	r0, #1
 80144cc:	d02b      	beq.n	8014526 <_malloc_r+0xd2>
 80144ce:	6823      	ldr	r3, [r4, #0]
 80144d0:	442b      	add	r3, r5
 80144d2:	6023      	str	r3, [r4, #0]
 80144d4:	e00e      	b.n	80144f4 <_malloc_r+0xa0>
 80144d6:	6822      	ldr	r2, [r4, #0]
 80144d8:	1b52      	subs	r2, r2, r5
 80144da:	d41e      	bmi.n	801451a <_malloc_r+0xc6>
 80144dc:	2a0b      	cmp	r2, #11
 80144de:	d916      	bls.n	801450e <_malloc_r+0xba>
 80144e0:	1961      	adds	r1, r4, r5
 80144e2:	42a3      	cmp	r3, r4
 80144e4:	6025      	str	r5, [r4, #0]
 80144e6:	bf18      	it	ne
 80144e8:	6059      	strne	r1, [r3, #4]
 80144ea:	6863      	ldr	r3, [r4, #4]
 80144ec:	bf08      	it	eq
 80144ee:	6031      	streq	r1, [r6, #0]
 80144f0:	5162      	str	r2, [r4, r5]
 80144f2:	604b      	str	r3, [r1, #4]
 80144f4:	4638      	mov	r0, r7
 80144f6:	f104 060b 	add.w	r6, r4, #11
 80144fa:	f000 fba3 	bl	8014c44 <__malloc_unlock>
 80144fe:	f026 0607 	bic.w	r6, r6, #7
 8014502:	1d23      	adds	r3, r4, #4
 8014504:	1af2      	subs	r2, r6, r3
 8014506:	d0b6      	beq.n	8014476 <_malloc_r+0x22>
 8014508:	1b9b      	subs	r3, r3, r6
 801450a:	50a3      	str	r3, [r4, r2]
 801450c:	e7b3      	b.n	8014476 <_malloc_r+0x22>
 801450e:	6862      	ldr	r2, [r4, #4]
 8014510:	42a3      	cmp	r3, r4
 8014512:	bf0c      	ite	eq
 8014514:	6032      	streq	r2, [r6, #0]
 8014516:	605a      	strne	r2, [r3, #4]
 8014518:	e7ec      	b.n	80144f4 <_malloc_r+0xa0>
 801451a:	4623      	mov	r3, r4
 801451c:	6864      	ldr	r4, [r4, #4]
 801451e:	e7b2      	b.n	8014486 <_malloc_r+0x32>
 8014520:	4634      	mov	r4, r6
 8014522:	6876      	ldr	r6, [r6, #4]
 8014524:	e7b9      	b.n	801449a <_malloc_r+0x46>
 8014526:	230c      	movs	r3, #12
 8014528:	603b      	str	r3, [r7, #0]
 801452a:	4638      	mov	r0, r7
 801452c:	f000 fb8a 	bl	8014c44 <__malloc_unlock>
 8014530:	e7a1      	b.n	8014476 <_malloc_r+0x22>
 8014532:	6025      	str	r5, [r4, #0]
 8014534:	e7de      	b.n	80144f4 <_malloc_r+0xa0>
 8014536:	bf00      	nop
 8014538:	240050cc 	.word	0x240050cc

0801453c <iprintf>:
 801453c:	b40f      	push	{r0, r1, r2, r3}
 801453e:	4b0a      	ldr	r3, [pc, #40]	; (8014568 <iprintf+0x2c>)
 8014540:	b513      	push	{r0, r1, r4, lr}
 8014542:	681c      	ldr	r4, [r3, #0]
 8014544:	b124      	cbz	r4, 8014550 <iprintf+0x14>
 8014546:	69a3      	ldr	r3, [r4, #24]
 8014548:	b913      	cbnz	r3, 8014550 <iprintf+0x14>
 801454a:	4620      	mov	r0, r4
 801454c:	f000 fa6e 	bl	8014a2c <__sinit>
 8014550:	ab05      	add	r3, sp, #20
 8014552:	9a04      	ldr	r2, [sp, #16]
 8014554:	68a1      	ldr	r1, [r4, #8]
 8014556:	9301      	str	r3, [sp, #4]
 8014558:	4620      	mov	r0, r4
 801455a:	f000 fba3 	bl	8014ca4 <_vfiprintf_r>
 801455e:	b002      	add	sp, #8
 8014560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014564:	b004      	add	sp, #16
 8014566:	4770      	bx	lr
 8014568:	2400009c 	.word	0x2400009c

0801456c <_puts_r>:
 801456c:	b570      	push	{r4, r5, r6, lr}
 801456e:	460e      	mov	r6, r1
 8014570:	4605      	mov	r5, r0
 8014572:	b118      	cbz	r0, 801457c <_puts_r+0x10>
 8014574:	6983      	ldr	r3, [r0, #24]
 8014576:	b90b      	cbnz	r3, 801457c <_puts_r+0x10>
 8014578:	f000 fa58 	bl	8014a2c <__sinit>
 801457c:	69ab      	ldr	r3, [r5, #24]
 801457e:	68ac      	ldr	r4, [r5, #8]
 8014580:	b913      	cbnz	r3, 8014588 <_puts_r+0x1c>
 8014582:	4628      	mov	r0, r5
 8014584:	f000 fa52 	bl	8014a2c <__sinit>
 8014588:	4b2c      	ldr	r3, [pc, #176]	; (801463c <_puts_r+0xd0>)
 801458a:	429c      	cmp	r4, r3
 801458c:	d120      	bne.n	80145d0 <_puts_r+0x64>
 801458e:	686c      	ldr	r4, [r5, #4]
 8014590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014592:	07db      	lsls	r3, r3, #31
 8014594:	d405      	bmi.n	80145a2 <_puts_r+0x36>
 8014596:	89a3      	ldrh	r3, [r4, #12]
 8014598:	0598      	lsls	r0, r3, #22
 801459a:	d402      	bmi.n	80145a2 <_puts_r+0x36>
 801459c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801459e:	f000 fae3 	bl	8014b68 <__retarget_lock_acquire_recursive>
 80145a2:	89a3      	ldrh	r3, [r4, #12]
 80145a4:	0719      	lsls	r1, r3, #28
 80145a6:	d51d      	bpl.n	80145e4 <_puts_r+0x78>
 80145a8:	6923      	ldr	r3, [r4, #16]
 80145aa:	b1db      	cbz	r3, 80145e4 <_puts_r+0x78>
 80145ac:	3e01      	subs	r6, #1
 80145ae:	68a3      	ldr	r3, [r4, #8]
 80145b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80145b4:	3b01      	subs	r3, #1
 80145b6:	60a3      	str	r3, [r4, #8]
 80145b8:	bb39      	cbnz	r1, 801460a <_puts_r+0x9e>
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	da38      	bge.n	8014630 <_puts_r+0xc4>
 80145be:	4622      	mov	r2, r4
 80145c0:	210a      	movs	r1, #10
 80145c2:	4628      	mov	r0, r5
 80145c4:	f000 f858 	bl	8014678 <__swbuf_r>
 80145c8:	3001      	adds	r0, #1
 80145ca:	d011      	beq.n	80145f0 <_puts_r+0x84>
 80145cc:	250a      	movs	r5, #10
 80145ce:	e011      	b.n	80145f4 <_puts_r+0x88>
 80145d0:	4b1b      	ldr	r3, [pc, #108]	; (8014640 <_puts_r+0xd4>)
 80145d2:	429c      	cmp	r4, r3
 80145d4:	d101      	bne.n	80145da <_puts_r+0x6e>
 80145d6:	68ac      	ldr	r4, [r5, #8]
 80145d8:	e7da      	b.n	8014590 <_puts_r+0x24>
 80145da:	4b1a      	ldr	r3, [pc, #104]	; (8014644 <_puts_r+0xd8>)
 80145dc:	429c      	cmp	r4, r3
 80145de:	bf08      	it	eq
 80145e0:	68ec      	ldreq	r4, [r5, #12]
 80145e2:	e7d5      	b.n	8014590 <_puts_r+0x24>
 80145e4:	4621      	mov	r1, r4
 80145e6:	4628      	mov	r0, r5
 80145e8:	f000 f898 	bl	801471c <__swsetup_r>
 80145ec:	2800      	cmp	r0, #0
 80145ee:	d0dd      	beq.n	80145ac <_puts_r+0x40>
 80145f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80145f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145f6:	07da      	lsls	r2, r3, #31
 80145f8:	d405      	bmi.n	8014606 <_puts_r+0x9a>
 80145fa:	89a3      	ldrh	r3, [r4, #12]
 80145fc:	059b      	lsls	r3, r3, #22
 80145fe:	d402      	bmi.n	8014606 <_puts_r+0x9a>
 8014600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014602:	f000 fab2 	bl	8014b6a <__retarget_lock_release_recursive>
 8014606:	4628      	mov	r0, r5
 8014608:	bd70      	pop	{r4, r5, r6, pc}
 801460a:	2b00      	cmp	r3, #0
 801460c:	da04      	bge.n	8014618 <_puts_r+0xac>
 801460e:	69a2      	ldr	r2, [r4, #24]
 8014610:	429a      	cmp	r2, r3
 8014612:	dc06      	bgt.n	8014622 <_puts_r+0xb6>
 8014614:	290a      	cmp	r1, #10
 8014616:	d004      	beq.n	8014622 <_puts_r+0xb6>
 8014618:	6823      	ldr	r3, [r4, #0]
 801461a:	1c5a      	adds	r2, r3, #1
 801461c:	6022      	str	r2, [r4, #0]
 801461e:	7019      	strb	r1, [r3, #0]
 8014620:	e7c5      	b.n	80145ae <_puts_r+0x42>
 8014622:	4622      	mov	r2, r4
 8014624:	4628      	mov	r0, r5
 8014626:	f000 f827 	bl	8014678 <__swbuf_r>
 801462a:	3001      	adds	r0, #1
 801462c:	d1bf      	bne.n	80145ae <_puts_r+0x42>
 801462e:	e7df      	b.n	80145f0 <_puts_r+0x84>
 8014630:	6823      	ldr	r3, [r4, #0]
 8014632:	250a      	movs	r5, #10
 8014634:	1c5a      	adds	r2, r3, #1
 8014636:	6022      	str	r2, [r4, #0]
 8014638:	701d      	strb	r5, [r3, #0]
 801463a:	e7db      	b.n	80145f4 <_puts_r+0x88>
 801463c:	080156d8 	.word	0x080156d8
 8014640:	080156f8 	.word	0x080156f8
 8014644:	080156b8 	.word	0x080156b8

08014648 <puts>:
 8014648:	4b02      	ldr	r3, [pc, #8]	; (8014654 <puts+0xc>)
 801464a:	4601      	mov	r1, r0
 801464c:	6818      	ldr	r0, [r3, #0]
 801464e:	f7ff bf8d 	b.w	801456c <_puts_r>
 8014652:	bf00      	nop
 8014654:	2400009c 	.word	0x2400009c

08014658 <_sbrk_r>:
 8014658:	b538      	push	{r3, r4, r5, lr}
 801465a:	4d06      	ldr	r5, [pc, #24]	; (8014674 <_sbrk_r+0x1c>)
 801465c:	2300      	movs	r3, #0
 801465e:	4604      	mov	r4, r0
 8014660:	4608      	mov	r0, r1
 8014662:	602b      	str	r3, [r5, #0]
 8014664:	f7ee fbfe 	bl	8002e64 <_sbrk>
 8014668:	1c43      	adds	r3, r0, #1
 801466a:	d102      	bne.n	8014672 <_sbrk_r+0x1a>
 801466c:	682b      	ldr	r3, [r5, #0]
 801466e:	b103      	cbz	r3, 8014672 <_sbrk_r+0x1a>
 8014670:	6023      	str	r3, [r4, #0]
 8014672:	bd38      	pop	{r3, r4, r5, pc}
 8014674:	240050d8 	.word	0x240050d8

08014678 <__swbuf_r>:
 8014678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801467a:	460e      	mov	r6, r1
 801467c:	4614      	mov	r4, r2
 801467e:	4605      	mov	r5, r0
 8014680:	b118      	cbz	r0, 801468a <__swbuf_r+0x12>
 8014682:	6983      	ldr	r3, [r0, #24]
 8014684:	b90b      	cbnz	r3, 801468a <__swbuf_r+0x12>
 8014686:	f000 f9d1 	bl	8014a2c <__sinit>
 801468a:	4b21      	ldr	r3, [pc, #132]	; (8014710 <__swbuf_r+0x98>)
 801468c:	429c      	cmp	r4, r3
 801468e:	d12b      	bne.n	80146e8 <__swbuf_r+0x70>
 8014690:	686c      	ldr	r4, [r5, #4]
 8014692:	69a3      	ldr	r3, [r4, #24]
 8014694:	60a3      	str	r3, [r4, #8]
 8014696:	89a3      	ldrh	r3, [r4, #12]
 8014698:	071a      	lsls	r2, r3, #28
 801469a:	d52f      	bpl.n	80146fc <__swbuf_r+0x84>
 801469c:	6923      	ldr	r3, [r4, #16]
 801469e:	b36b      	cbz	r3, 80146fc <__swbuf_r+0x84>
 80146a0:	6923      	ldr	r3, [r4, #16]
 80146a2:	6820      	ldr	r0, [r4, #0]
 80146a4:	1ac0      	subs	r0, r0, r3
 80146a6:	6963      	ldr	r3, [r4, #20]
 80146a8:	b2f6      	uxtb	r6, r6
 80146aa:	4283      	cmp	r3, r0
 80146ac:	4637      	mov	r7, r6
 80146ae:	dc04      	bgt.n	80146ba <__swbuf_r+0x42>
 80146b0:	4621      	mov	r1, r4
 80146b2:	4628      	mov	r0, r5
 80146b4:	f000 f926 	bl	8014904 <_fflush_r>
 80146b8:	bb30      	cbnz	r0, 8014708 <__swbuf_r+0x90>
 80146ba:	68a3      	ldr	r3, [r4, #8]
 80146bc:	3b01      	subs	r3, #1
 80146be:	60a3      	str	r3, [r4, #8]
 80146c0:	6823      	ldr	r3, [r4, #0]
 80146c2:	1c5a      	adds	r2, r3, #1
 80146c4:	6022      	str	r2, [r4, #0]
 80146c6:	701e      	strb	r6, [r3, #0]
 80146c8:	6963      	ldr	r3, [r4, #20]
 80146ca:	3001      	adds	r0, #1
 80146cc:	4283      	cmp	r3, r0
 80146ce:	d004      	beq.n	80146da <__swbuf_r+0x62>
 80146d0:	89a3      	ldrh	r3, [r4, #12]
 80146d2:	07db      	lsls	r3, r3, #31
 80146d4:	d506      	bpl.n	80146e4 <__swbuf_r+0x6c>
 80146d6:	2e0a      	cmp	r6, #10
 80146d8:	d104      	bne.n	80146e4 <__swbuf_r+0x6c>
 80146da:	4621      	mov	r1, r4
 80146dc:	4628      	mov	r0, r5
 80146de:	f000 f911 	bl	8014904 <_fflush_r>
 80146e2:	b988      	cbnz	r0, 8014708 <__swbuf_r+0x90>
 80146e4:	4638      	mov	r0, r7
 80146e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146e8:	4b0a      	ldr	r3, [pc, #40]	; (8014714 <__swbuf_r+0x9c>)
 80146ea:	429c      	cmp	r4, r3
 80146ec:	d101      	bne.n	80146f2 <__swbuf_r+0x7a>
 80146ee:	68ac      	ldr	r4, [r5, #8]
 80146f0:	e7cf      	b.n	8014692 <__swbuf_r+0x1a>
 80146f2:	4b09      	ldr	r3, [pc, #36]	; (8014718 <__swbuf_r+0xa0>)
 80146f4:	429c      	cmp	r4, r3
 80146f6:	bf08      	it	eq
 80146f8:	68ec      	ldreq	r4, [r5, #12]
 80146fa:	e7ca      	b.n	8014692 <__swbuf_r+0x1a>
 80146fc:	4621      	mov	r1, r4
 80146fe:	4628      	mov	r0, r5
 8014700:	f000 f80c 	bl	801471c <__swsetup_r>
 8014704:	2800      	cmp	r0, #0
 8014706:	d0cb      	beq.n	80146a0 <__swbuf_r+0x28>
 8014708:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801470c:	e7ea      	b.n	80146e4 <__swbuf_r+0x6c>
 801470e:	bf00      	nop
 8014710:	080156d8 	.word	0x080156d8
 8014714:	080156f8 	.word	0x080156f8
 8014718:	080156b8 	.word	0x080156b8

0801471c <__swsetup_r>:
 801471c:	4b32      	ldr	r3, [pc, #200]	; (80147e8 <__swsetup_r+0xcc>)
 801471e:	b570      	push	{r4, r5, r6, lr}
 8014720:	681d      	ldr	r5, [r3, #0]
 8014722:	4606      	mov	r6, r0
 8014724:	460c      	mov	r4, r1
 8014726:	b125      	cbz	r5, 8014732 <__swsetup_r+0x16>
 8014728:	69ab      	ldr	r3, [r5, #24]
 801472a:	b913      	cbnz	r3, 8014732 <__swsetup_r+0x16>
 801472c:	4628      	mov	r0, r5
 801472e:	f000 f97d 	bl	8014a2c <__sinit>
 8014732:	4b2e      	ldr	r3, [pc, #184]	; (80147ec <__swsetup_r+0xd0>)
 8014734:	429c      	cmp	r4, r3
 8014736:	d10f      	bne.n	8014758 <__swsetup_r+0x3c>
 8014738:	686c      	ldr	r4, [r5, #4]
 801473a:	89a3      	ldrh	r3, [r4, #12]
 801473c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014740:	0719      	lsls	r1, r3, #28
 8014742:	d42c      	bmi.n	801479e <__swsetup_r+0x82>
 8014744:	06dd      	lsls	r5, r3, #27
 8014746:	d411      	bmi.n	801476c <__swsetup_r+0x50>
 8014748:	2309      	movs	r3, #9
 801474a:	6033      	str	r3, [r6, #0]
 801474c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014750:	81a3      	strh	r3, [r4, #12]
 8014752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014756:	e03e      	b.n	80147d6 <__swsetup_r+0xba>
 8014758:	4b25      	ldr	r3, [pc, #148]	; (80147f0 <__swsetup_r+0xd4>)
 801475a:	429c      	cmp	r4, r3
 801475c:	d101      	bne.n	8014762 <__swsetup_r+0x46>
 801475e:	68ac      	ldr	r4, [r5, #8]
 8014760:	e7eb      	b.n	801473a <__swsetup_r+0x1e>
 8014762:	4b24      	ldr	r3, [pc, #144]	; (80147f4 <__swsetup_r+0xd8>)
 8014764:	429c      	cmp	r4, r3
 8014766:	bf08      	it	eq
 8014768:	68ec      	ldreq	r4, [r5, #12]
 801476a:	e7e6      	b.n	801473a <__swsetup_r+0x1e>
 801476c:	0758      	lsls	r0, r3, #29
 801476e:	d512      	bpl.n	8014796 <__swsetup_r+0x7a>
 8014770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014772:	b141      	cbz	r1, 8014786 <__swsetup_r+0x6a>
 8014774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014778:	4299      	cmp	r1, r3
 801477a:	d002      	beq.n	8014782 <__swsetup_r+0x66>
 801477c:	4630      	mov	r0, r6
 801477e:	f7ff fdfd 	bl	801437c <_free_r>
 8014782:	2300      	movs	r3, #0
 8014784:	6363      	str	r3, [r4, #52]	; 0x34
 8014786:	89a3      	ldrh	r3, [r4, #12]
 8014788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801478c:	81a3      	strh	r3, [r4, #12]
 801478e:	2300      	movs	r3, #0
 8014790:	6063      	str	r3, [r4, #4]
 8014792:	6923      	ldr	r3, [r4, #16]
 8014794:	6023      	str	r3, [r4, #0]
 8014796:	89a3      	ldrh	r3, [r4, #12]
 8014798:	f043 0308 	orr.w	r3, r3, #8
 801479c:	81a3      	strh	r3, [r4, #12]
 801479e:	6923      	ldr	r3, [r4, #16]
 80147a0:	b94b      	cbnz	r3, 80147b6 <__swsetup_r+0x9a>
 80147a2:	89a3      	ldrh	r3, [r4, #12]
 80147a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80147a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147ac:	d003      	beq.n	80147b6 <__swsetup_r+0x9a>
 80147ae:	4621      	mov	r1, r4
 80147b0:	4630      	mov	r0, r6
 80147b2:	f000 fa01 	bl	8014bb8 <__smakebuf_r>
 80147b6:	89a0      	ldrh	r0, [r4, #12]
 80147b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80147bc:	f010 0301 	ands.w	r3, r0, #1
 80147c0:	d00a      	beq.n	80147d8 <__swsetup_r+0xbc>
 80147c2:	2300      	movs	r3, #0
 80147c4:	60a3      	str	r3, [r4, #8]
 80147c6:	6963      	ldr	r3, [r4, #20]
 80147c8:	425b      	negs	r3, r3
 80147ca:	61a3      	str	r3, [r4, #24]
 80147cc:	6923      	ldr	r3, [r4, #16]
 80147ce:	b943      	cbnz	r3, 80147e2 <__swsetup_r+0xc6>
 80147d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80147d4:	d1ba      	bne.n	801474c <__swsetup_r+0x30>
 80147d6:	bd70      	pop	{r4, r5, r6, pc}
 80147d8:	0781      	lsls	r1, r0, #30
 80147da:	bf58      	it	pl
 80147dc:	6963      	ldrpl	r3, [r4, #20]
 80147de:	60a3      	str	r3, [r4, #8]
 80147e0:	e7f4      	b.n	80147cc <__swsetup_r+0xb0>
 80147e2:	2000      	movs	r0, #0
 80147e4:	e7f7      	b.n	80147d6 <__swsetup_r+0xba>
 80147e6:	bf00      	nop
 80147e8:	2400009c 	.word	0x2400009c
 80147ec:	080156d8 	.word	0x080156d8
 80147f0:	080156f8 	.word	0x080156f8
 80147f4:	080156b8 	.word	0x080156b8

080147f8 <__sflush_r>:
 80147f8:	898a      	ldrh	r2, [r1, #12]
 80147fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147fe:	4605      	mov	r5, r0
 8014800:	0710      	lsls	r0, r2, #28
 8014802:	460c      	mov	r4, r1
 8014804:	d458      	bmi.n	80148b8 <__sflush_r+0xc0>
 8014806:	684b      	ldr	r3, [r1, #4]
 8014808:	2b00      	cmp	r3, #0
 801480a:	dc05      	bgt.n	8014818 <__sflush_r+0x20>
 801480c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801480e:	2b00      	cmp	r3, #0
 8014810:	dc02      	bgt.n	8014818 <__sflush_r+0x20>
 8014812:	2000      	movs	r0, #0
 8014814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801481a:	2e00      	cmp	r6, #0
 801481c:	d0f9      	beq.n	8014812 <__sflush_r+0x1a>
 801481e:	2300      	movs	r3, #0
 8014820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014824:	682f      	ldr	r7, [r5, #0]
 8014826:	602b      	str	r3, [r5, #0]
 8014828:	d032      	beq.n	8014890 <__sflush_r+0x98>
 801482a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801482c:	89a3      	ldrh	r3, [r4, #12]
 801482e:	075a      	lsls	r2, r3, #29
 8014830:	d505      	bpl.n	801483e <__sflush_r+0x46>
 8014832:	6863      	ldr	r3, [r4, #4]
 8014834:	1ac0      	subs	r0, r0, r3
 8014836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014838:	b10b      	cbz	r3, 801483e <__sflush_r+0x46>
 801483a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801483c:	1ac0      	subs	r0, r0, r3
 801483e:	2300      	movs	r3, #0
 8014840:	4602      	mov	r2, r0
 8014842:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014844:	6a21      	ldr	r1, [r4, #32]
 8014846:	4628      	mov	r0, r5
 8014848:	47b0      	blx	r6
 801484a:	1c43      	adds	r3, r0, #1
 801484c:	89a3      	ldrh	r3, [r4, #12]
 801484e:	d106      	bne.n	801485e <__sflush_r+0x66>
 8014850:	6829      	ldr	r1, [r5, #0]
 8014852:	291d      	cmp	r1, #29
 8014854:	d82c      	bhi.n	80148b0 <__sflush_r+0xb8>
 8014856:	4a2a      	ldr	r2, [pc, #168]	; (8014900 <__sflush_r+0x108>)
 8014858:	40ca      	lsrs	r2, r1
 801485a:	07d6      	lsls	r6, r2, #31
 801485c:	d528      	bpl.n	80148b0 <__sflush_r+0xb8>
 801485e:	2200      	movs	r2, #0
 8014860:	6062      	str	r2, [r4, #4]
 8014862:	04d9      	lsls	r1, r3, #19
 8014864:	6922      	ldr	r2, [r4, #16]
 8014866:	6022      	str	r2, [r4, #0]
 8014868:	d504      	bpl.n	8014874 <__sflush_r+0x7c>
 801486a:	1c42      	adds	r2, r0, #1
 801486c:	d101      	bne.n	8014872 <__sflush_r+0x7a>
 801486e:	682b      	ldr	r3, [r5, #0]
 8014870:	b903      	cbnz	r3, 8014874 <__sflush_r+0x7c>
 8014872:	6560      	str	r0, [r4, #84]	; 0x54
 8014874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014876:	602f      	str	r7, [r5, #0]
 8014878:	2900      	cmp	r1, #0
 801487a:	d0ca      	beq.n	8014812 <__sflush_r+0x1a>
 801487c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014880:	4299      	cmp	r1, r3
 8014882:	d002      	beq.n	801488a <__sflush_r+0x92>
 8014884:	4628      	mov	r0, r5
 8014886:	f7ff fd79 	bl	801437c <_free_r>
 801488a:	2000      	movs	r0, #0
 801488c:	6360      	str	r0, [r4, #52]	; 0x34
 801488e:	e7c1      	b.n	8014814 <__sflush_r+0x1c>
 8014890:	6a21      	ldr	r1, [r4, #32]
 8014892:	2301      	movs	r3, #1
 8014894:	4628      	mov	r0, r5
 8014896:	47b0      	blx	r6
 8014898:	1c41      	adds	r1, r0, #1
 801489a:	d1c7      	bne.n	801482c <__sflush_r+0x34>
 801489c:	682b      	ldr	r3, [r5, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d0c4      	beq.n	801482c <__sflush_r+0x34>
 80148a2:	2b1d      	cmp	r3, #29
 80148a4:	d001      	beq.n	80148aa <__sflush_r+0xb2>
 80148a6:	2b16      	cmp	r3, #22
 80148a8:	d101      	bne.n	80148ae <__sflush_r+0xb6>
 80148aa:	602f      	str	r7, [r5, #0]
 80148ac:	e7b1      	b.n	8014812 <__sflush_r+0x1a>
 80148ae:	89a3      	ldrh	r3, [r4, #12]
 80148b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148b4:	81a3      	strh	r3, [r4, #12]
 80148b6:	e7ad      	b.n	8014814 <__sflush_r+0x1c>
 80148b8:	690f      	ldr	r7, [r1, #16]
 80148ba:	2f00      	cmp	r7, #0
 80148bc:	d0a9      	beq.n	8014812 <__sflush_r+0x1a>
 80148be:	0793      	lsls	r3, r2, #30
 80148c0:	680e      	ldr	r6, [r1, #0]
 80148c2:	bf08      	it	eq
 80148c4:	694b      	ldreq	r3, [r1, #20]
 80148c6:	600f      	str	r7, [r1, #0]
 80148c8:	bf18      	it	ne
 80148ca:	2300      	movne	r3, #0
 80148cc:	eba6 0807 	sub.w	r8, r6, r7
 80148d0:	608b      	str	r3, [r1, #8]
 80148d2:	f1b8 0f00 	cmp.w	r8, #0
 80148d6:	dd9c      	ble.n	8014812 <__sflush_r+0x1a>
 80148d8:	6a21      	ldr	r1, [r4, #32]
 80148da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80148dc:	4643      	mov	r3, r8
 80148de:	463a      	mov	r2, r7
 80148e0:	4628      	mov	r0, r5
 80148e2:	47b0      	blx	r6
 80148e4:	2800      	cmp	r0, #0
 80148e6:	dc06      	bgt.n	80148f6 <__sflush_r+0xfe>
 80148e8:	89a3      	ldrh	r3, [r4, #12]
 80148ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148ee:	81a3      	strh	r3, [r4, #12]
 80148f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148f4:	e78e      	b.n	8014814 <__sflush_r+0x1c>
 80148f6:	4407      	add	r7, r0
 80148f8:	eba8 0800 	sub.w	r8, r8, r0
 80148fc:	e7e9      	b.n	80148d2 <__sflush_r+0xda>
 80148fe:	bf00      	nop
 8014900:	20400001 	.word	0x20400001

08014904 <_fflush_r>:
 8014904:	b538      	push	{r3, r4, r5, lr}
 8014906:	690b      	ldr	r3, [r1, #16]
 8014908:	4605      	mov	r5, r0
 801490a:	460c      	mov	r4, r1
 801490c:	b913      	cbnz	r3, 8014914 <_fflush_r+0x10>
 801490e:	2500      	movs	r5, #0
 8014910:	4628      	mov	r0, r5
 8014912:	bd38      	pop	{r3, r4, r5, pc}
 8014914:	b118      	cbz	r0, 801491e <_fflush_r+0x1a>
 8014916:	6983      	ldr	r3, [r0, #24]
 8014918:	b90b      	cbnz	r3, 801491e <_fflush_r+0x1a>
 801491a:	f000 f887 	bl	8014a2c <__sinit>
 801491e:	4b14      	ldr	r3, [pc, #80]	; (8014970 <_fflush_r+0x6c>)
 8014920:	429c      	cmp	r4, r3
 8014922:	d11b      	bne.n	801495c <_fflush_r+0x58>
 8014924:	686c      	ldr	r4, [r5, #4]
 8014926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d0ef      	beq.n	801490e <_fflush_r+0xa>
 801492e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014930:	07d0      	lsls	r0, r2, #31
 8014932:	d404      	bmi.n	801493e <_fflush_r+0x3a>
 8014934:	0599      	lsls	r1, r3, #22
 8014936:	d402      	bmi.n	801493e <_fflush_r+0x3a>
 8014938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801493a:	f000 f915 	bl	8014b68 <__retarget_lock_acquire_recursive>
 801493e:	4628      	mov	r0, r5
 8014940:	4621      	mov	r1, r4
 8014942:	f7ff ff59 	bl	80147f8 <__sflush_r>
 8014946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014948:	07da      	lsls	r2, r3, #31
 801494a:	4605      	mov	r5, r0
 801494c:	d4e0      	bmi.n	8014910 <_fflush_r+0xc>
 801494e:	89a3      	ldrh	r3, [r4, #12]
 8014950:	059b      	lsls	r3, r3, #22
 8014952:	d4dd      	bmi.n	8014910 <_fflush_r+0xc>
 8014954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014956:	f000 f908 	bl	8014b6a <__retarget_lock_release_recursive>
 801495a:	e7d9      	b.n	8014910 <_fflush_r+0xc>
 801495c:	4b05      	ldr	r3, [pc, #20]	; (8014974 <_fflush_r+0x70>)
 801495e:	429c      	cmp	r4, r3
 8014960:	d101      	bne.n	8014966 <_fflush_r+0x62>
 8014962:	68ac      	ldr	r4, [r5, #8]
 8014964:	e7df      	b.n	8014926 <_fflush_r+0x22>
 8014966:	4b04      	ldr	r3, [pc, #16]	; (8014978 <_fflush_r+0x74>)
 8014968:	429c      	cmp	r4, r3
 801496a:	bf08      	it	eq
 801496c:	68ec      	ldreq	r4, [r5, #12]
 801496e:	e7da      	b.n	8014926 <_fflush_r+0x22>
 8014970:	080156d8 	.word	0x080156d8
 8014974:	080156f8 	.word	0x080156f8
 8014978:	080156b8 	.word	0x080156b8

0801497c <std>:
 801497c:	2300      	movs	r3, #0
 801497e:	b510      	push	{r4, lr}
 8014980:	4604      	mov	r4, r0
 8014982:	e9c0 3300 	strd	r3, r3, [r0]
 8014986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801498a:	6083      	str	r3, [r0, #8]
 801498c:	8181      	strh	r1, [r0, #12]
 801498e:	6643      	str	r3, [r0, #100]	; 0x64
 8014990:	81c2      	strh	r2, [r0, #14]
 8014992:	6183      	str	r3, [r0, #24]
 8014994:	4619      	mov	r1, r3
 8014996:	2208      	movs	r2, #8
 8014998:	305c      	adds	r0, #92	; 0x5c
 801499a:	f7ff fce7 	bl	801436c <memset>
 801499e:	4b05      	ldr	r3, [pc, #20]	; (80149b4 <std+0x38>)
 80149a0:	6263      	str	r3, [r4, #36]	; 0x24
 80149a2:	4b05      	ldr	r3, [pc, #20]	; (80149b8 <std+0x3c>)
 80149a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80149a6:	4b05      	ldr	r3, [pc, #20]	; (80149bc <std+0x40>)
 80149a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80149aa:	4b05      	ldr	r3, [pc, #20]	; (80149c0 <std+0x44>)
 80149ac:	6224      	str	r4, [r4, #32]
 80149ae:	6323      	str	r3, [r4, #48]	; 0x30
 80149b0:	bd10      	pop	{r4, pc}
 80149b2:	bf00      	nop
 80149b4:	0801522d 	.word	0x0801522d
 80149b8:	0801524f 	.word	0x0801524f
 80149bc:	08015287 	.word	0x08015287
 80149c0:	080152ab 	.word	0x080152ab

080149c4 <_cleanup_r>:
 80149c4:	4901      	ldr	r1, [pc, #4]	; (80149cc <_cleanup_r+0x8>)
 80149c6:	f000 b8af 	b.w	8014b28 <_fwalk_reent>
 80149ca:	bf00      	nop
 80149cc:	08014905 	.word	0x08014905

080149d0 <__sfmoreglue>:
 80149d0:	b570      	push	{r4, r5, r6, lr}
 80149d2:	2268      	movs	r2, #104	; 0x68
 80149d4:	1e4d      	subs	r5, r1, #1
 80149d6:	4355      	muls	r5, r2
 80149d8:	460e      	mov	r6, r1
 80149da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80149de:	f7ff fd39 	bl	8014454 <_malloc_r>
 80149e2:	4604      	mov	r4, r0
 80149e4:	b140      	cbz	r0, 80149f8 <__sfmoreglue+0x28>
 80149e6:	2100      	movs	r1, #0
 80149e8:	e9c0 1600 	strd	r1, r6, [r0]
 80149ec:	300c      	adds	r0, #12
 80149ee:	60a0      	str	r0, [r4, #8]
 80149f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80149f4:	f7ff fcba 	bl	801436c <memset>
 80149f8:	4620      	mov	r0, r4
 80149fa:	bd70      	pop	{r4, r5, r6, pc}

080149fc <__sfp_lock_acquire>:
 80149fc:	4801      	ldr	r0, [pc, #4]	; (8014a04 <__sfp_lock_acquire+0x8>)
 80149fe:	f000 b8b3 	b.w	8014b68 <__retarget_lock_acquire_recursive>
 8014a02:	bf00      	nop
 8014a04:	240050d5 	.word	0x240050d5

08014a08 <__sfp_lock_release>:
 8014a08:	4801      	ldr	r0, [pc, #4]	; (8014a10 <__sfp_lock_release+0x8>)
 8014a0a:	f000 b8ae 	b.w	8014b6a <__retarget_lock_release_recursive>
 8014a0e:	bf00      	nop
 8014a10:	240050d5 	.word	0x240050d5

08014a14 <__sinit_lock_acquire>:
 8014a14:	4801      	ldr	r0, [pc, #4]	; (8014a1c <__sinit_lock_acquire+0x8>)
 8014a16:	f000 b8a7 	b.w	8014b68 <__retarget_lock_acquire_recursive>
 8014a1a:	bf00      	nop
 8014a1c:	240050d6 	.word	0x240050d6

08014a20 <__sinit_lock_release>:
 8014a20:	4801      	ldr	r0, [pc, #4]	; (8014a28 <__sinit_lock_release+0x8>)
 8014a22:	f000 b8a2 	b.w	8014b6a <__retarget_lock_release_recursive>
 8014a26:	bf00      	nop
 8014a28:	240050d6 	.word	0x240050d6

08014a2c <__sinit>:
 8014a2c:	b510      	push	{r4, lr}
 8014a2e:	4604      	mov	r4, r0
 8014a30:	f7ff fff0 	bl	8014a14 <__sinit_lock_acquire>
 8014a34:	69a3      	ldr	r3, [r4, #24]
 8014a36:	b11b      	cbz	r3, 8014a40 <__sinit+0x14>
 8014a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a3c:	f7ff bff0 	b.w	8014a20 <__sinit_lock_release>
 8014a40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014a44:	6523      	str	r3, [r4, #80]	; 0x50
 8014a46:	4b13      	ldr	r3, [pc, #76]	; (8014a94 <__sinit+0x68>)
 8014a48:	4a13      	ldr	r2, [pc, #76]	; (8014a98 <__sinit+0x6c>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8014a4e:	42a3      	cmp	r3, r4
 8014a50:	bf04      	itt	eq
 8014a52:	2301      	moveq	r3, #1
 8014a54:	61a3      	streq	r3, [r4, #24]
 8014a56:	4620      	mov	r0, r4
 8014a58:	f000 f820 	bl	8014a9c <__sfp>
 8014a5c:	6060      	str	r0, [r4, #4]
 8014a5e:	4620      	mov	r0, r4
 8014a60:	f000 f81c 	bl	8014a9c <__sfp>
 8014a64:	60a0      	str	r0, [r4, #8]
 8014a66:	4620      	mov	r0, r4
 8014a68:	f000 f818 	bl	8014a9c <__sfp>
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	60e0      	str	r0, [r4, #12]
 8014a70:	2104      	movs	r1, #4
 8014a72:	6860      	ldr	r0, [r4, #4]
 8014a74:	f7ff ff82 	bl	801497c <std>
 8014a78:	68a0      	ldr	r0, [r4, #8]
 8014a7a:	2201      	movs	r2, #1
 8014a7c:	2109      	movs	r1, #9
 8014a7e:	f7ff ff7d 	bl	801497c <std>
 8014a82:	68e0      	ldr	r0, [r4, #12]
 8014a84:	2202      	movs	r2, #2
 8014a86:	2112      	movs	r1, #18
 8014a88:	f7ff ff78 	bl	801497c <std>
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	61a3      	str	r3, [r4, #24]
 8014a90:	e7d2      	b.n	8014a38 <__sinit+0xc>
 8014a92:	bf00      	nop
 8014a94:	080156b4 	.word	0x080156b4
 8014a98:	080149c5 	.word	0x080149c5

08014a9c <__sfp>:
 8014a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a9e:	4607      	mov	r7, r0
 8014aa0:	f7ff ffac 	bl	80149fc <__sfp_lock_acquire>
 8014aa4:	4b1e      	ldr	r3, [pc, #120]	; (8014b20 <__sfp+0x84>)
 8014aa6:	681e      	ldr	r6, [r3, #0]
 8014aa8:	69b3      	ldr	r3, [r6, #24]
 8014aaa:	b913      	cbnz	r3, 8014ab2 <__sfp+0x16>
 8014aac:	4630      	mov	r0, r6
 8014aae:	f7ff ffbd 	bl	8014a2c <__sinit>
 8014ab2:	3648      	adds	r6, #72	; 0x48
 8014ab4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014ab8:	3b01      	subs	r3, #1
 8014aba:	d503      	bpl.n	8014ac4 <__sfp+0x28>
 8014abc:	6833      	ldr	r3, [r6, #0]
 8014abe:	b30b      	cbz	r3, 8014b04 <__sfp+0x68>
 8014ac0:	6836      	ldr	r6, [r6, #0]
 8014ac2:	e7f7      	b.n	8014ab4 <__sfp+0x18>
 8014ac4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014ac8:	b9d5      	cbnz	r5, 8014b00 <__sfp+0x64>
 8014aca:	4b16      	ldr	r3, [pc, #88]	; (8014b24 <__sfp+0x88>)
 8014acc:	60e3      	str	r3, [r4, #12]
 8014ace:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014ad2:	6665      	str	r5, [r4, #100]	; 0x64
 8014ad4:	f000 f847 	bl	8014b66 <__retarget_lock_init_recursive>
 8014ad8:	f7ff ff96 	bl	8014a08 <__sfp_lock_release>
 8014adc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014ae0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014ae4:	6025      	str	r5, [r4, #0]
 8014ae6:	61a5      	str	r5, [r4, #24]
 8014ae8:	2208      	movs	r2, #8
 8014aea:	4629      	mov	r1, r5
 8014aec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014af0:	f7ff fc3c 	bl	801436c <memset>
 8014af4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014af8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014afc:	4620      	mov	r0, r4
 8014afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b00:	3468      	adds	r4, #104	; 0x68
 8014b02:	e7d9      	b.n	8014ab8 <__sfp+0x1c>
 8014b04:	2104      	movs	r1, #4
 8014b06:	4638      	mov	r0, r7
 8014b08:	f7ff ff62 	bl	80149d0 <__sfmoreglue>
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	6030      	str	r0, [r6, #0]
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d1d5      	bne.n	8014ac0 <__sfp+0x24>
 8014b14:	f7ff ff78 	bl	8014a08 <__sfp_lock_release>
 8014b18:	230c      	movs	r3, #12
 8014b1a:	603b      	str	r3, [r7, #0]
 8014b1c:	e7ee      	b.n	8014afc <__sfp+0x60>
 8014b1e:	bf00      	nop
 8014b20:	080156b4 	.word	0x080156b4
 8014b24:	ffff0001 	.word	0xffff0001

08014b28 <_fwalk_reent>:
 8014b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b2c:	4606      	mov	r6, r0
 8014b2e:	4688      	mov	r8, r1
 8014b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014b34:	2700      	movs	r7, #0
 8014b36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b3a:	f1b9 0901 	subs.w	r9, r9, #1
 8014b3e:	d505      	bpl.n	8014b4c <_fwalk_reent+0x24>
 8014b40:	6824      	ldr	r4, [r4, #0]
 8014b42:	2c00      	cmp	r4, #0
 8014b44:	d1f7      	bne.n	8014b36 <_fwalk_reent+0xe>
 8014b46:	4638      	mov	r0, r7
 8014b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b4c:	89ab      	ldrh	r3, [r5, #12]
 8014b4e:	2b01      	cmp	r3, #1
 8014b50:	d907      	bls.n	8014b62 <_fwalk_reent+0x3a>
 8014b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b56:	3301      	adds	r3, #1
 8014b58:	d003      	beq.n	8014b62 <_fwalk_reent+0x3a>
 8014b5a:	4629      	mov	r1, r5
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	47c0      	blx	r8
 8014b60:	4307      	orrs	r7, r0
 8014b62:	3568      	adds	r5, #104	; 0x68
 8014b64:	e7e9      	b.n	8014b3a <_fwalk_reent+0x12>

08014b66 <__retarget_lock_init_recursive>:
 8014b66:	4770      	bx	lr

08014b68 <__retarget_lock_acquire_recursive>:
 8014b68:	4770      	bx	lr

08014b6a <__retarget_lock_release_recursive>:
 8014b6a:	4770      	bx	lr

08014b6c <__swhatbuf_r>:
 8014b6c:	b570      	push	{r4, r5, r6, lr}
 8014b6e:	460e      	mov	r6, r1
 8014b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b74:	2900      	cmp	r1, #0
 8014b76:	b096      	sub	sp, #88	; 0x58
 8014b78:	4614      	mov	r4, r2
 8014b7a:	461d      	mov	r5, r3
 8014b7c:	da08      	bge.n	8014b90 <__swhatbuf_r+0x24>
 8014b7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014b82:	2200      	movs	r2, #0
 8014b84:	602a      	str	r2, [r5, #0]
 8014b86:	061a      	lsls	r2, r3, #24
 8014b88:	d410      	bmi.n	8014bac <__swhatbuf_r+0x40>
 8014b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b8e:	e00e      	b.n	8014bae <__swhatbuf_r+0x42>
 8014b90:	466a      	mov	r2, sp
 8014b92:	f000 fbb1 	bl	80152f8 <_fstat_r>
 8014b96:	2800      	cmp	r0, #0
 8014b98:	dbf1      	blt.n	8014b7e <__swhatbuf_r+0x12>
 8014b9a:	9a01      	ldr	r2, [sp, #4]
 8014b9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014ba0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014ba4:	425a      	negs	r2, r3
 8014ba6:	415a      	adcs	r2, r3
 8014ba8:	602a      	str	r2, [r5, #0]
 8014baa:	e7ee      	b.n	8014b8a <__swhatbuf_r+0x1e>
 8014bac:	2340      	movs	r3, #64	; 0x40
 8014bae:	2000      	movs	r0, #0
 8014bb0:	6023      	str	r3, [r4, #0]
 8014bb2:	b016      	add	sp, #88	; 0x58
 8014bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08014bb8 <__smakebuf_r>:
 8014bb8:	898b      	ldrh	r3, [r1, #12]
 8014bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014bbc:	079d      	lsls	r5, r3, #30
 8014bbe:	4606      	mov	r6, r0
 8014bc0:	460c      	mov	r4, r1
 8014bc2:	d507      	bpl.n	8014bd4 <__smakebuf_r+0x1c>
 8014bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014bc8:	6023      	str	r3, [r4, #0]
 8014bca:	6123      	str	r3, [r4, #16]
 8014bcc:	2301      	movs	r3, #1
 8014bce:	6163      	str	r3, [r4, #20]
 8014bd0:	b002      	add	sp, #8
 8014bd2:	bd70      	pop	{r4, r5, r6, pc}
 8014bd4:	ab01      	add	r3, sp, #4
 8014bd6:	466a      	mov	r2, sp
 8014bd8:	f7ff ffc8 	bl	8014b6c <__swhatbuf_r>
 8014bdc:	9900      	ldr	r1, [sp, #0]
 8014bde:	4605      	mov	r5, r0
 8014be0:	4630      	mov	r0, r6
 8014be2:	f7ff fc37 	bl	8014454 <_malloc_r>
 8014be6:	b948      	cbnz	r0, 8014bfc <__smakebuf_r+0x44>
 8014be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bec:	059a      	lsls	r2, r3, #22
 8014bee:	d4ef      	bmi.n	8014bd0 <__smakebuf_r+0x18>
 8014bf0:	f023 0303 	bic.w	r3, r3, #3
 8014bf4:	f043 0302 	orr.w	r3, r3, #2
 8014bf8:	81a3      	strh	r3, [r4, #12]
 8014bfa:	e7e3      	b.n	8014bc4 <__smakebuf_r+0xc>
 8014bfc:	4b0d      	ldr	r3, [pc, #52]	; (8014c34 <__smakebuf_r+0x7c>)
 8014bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c00:	89a3      	ldrh	r3, [r4, #12]
 8014c02:	6020      	str	r0, [r4, #0]
 8014c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c08:	81a3      	strh	r3, [r4, #12]
 8014c0a:	9b00      	ldr	r3, [sp, #0]
 8014c0c:	6163      	str	r3, [r4, #20]
 8014c0e:	9b01      	ldr	r3, [sp, #4]
 8014c10:	6120      	str	r0, [r4, #16]
 8014c12:	b15b      	cbz	r3, 8014c2c <__smakebuf_r+0x74>
 8014c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c18:	4630      	mov	r0, r6
 8014c1a:	f000 fb7f 	bl	801531c <_isatty_r>
 8014c1e:	b128      	cbz	r0, 8014c2c <__smakebuf_r+0x74>
 8014c20:	89a3      	ldrh	r3, [r4, #12]
 8014c22:	f023 0303 	bic.w	r3, r3, #3
 8014c26:	f043 0301 	orr.w	r3, r3, #1
 8014c2a:	81a3      	strh	r3, [r4, #12]
 8014c2c:	89a0      	ldrh	r0, [r4, #12]
 8014c2e:	4305      	orrs	r5, r0
 8014c30:	81a5      	strh	r5, [r4, #12]
 8014c32:	e7cd      	b.n	8014bd0 <__smakebuf_r+0x18>
 8014c34:	080149c5 	.word	0x080149c5

08014c38 <__malloc_lock>:
 8014c38:	4801      	ldr	r0, [pc, #4]	; (8014c40 <__malloc_lock+0x8>)
 8014c3a:	f7ff bf95 	b.w	8014b68 <__retarget_lock_acquire_recursive>
 8014c3e:	bf00      	nop
 8014c40:	240050d4 	.word	0x240050d4

08014c44 <__malloc_unlock>:
 8014c44:	4801      	ldr	r0, [pc, #4]	; (8014c4c <__malloc_unlock+0x8>)
 8014c46:	f7ff bf90 	b.w	8014b6a <__retarget_lock_release_recursive>
 8014c4a:	bf00      	nop
 8014c4c:	240050d4 	.word	0x240050d4

08014c50 <__sfputc_r>:
 8014c50:	6893      	ldr	r3, [r2, #8]
 8014c52:	3b01      	subs	r3, #1
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	b410      	push	{r4}
 8014c58:	6093      	str	r3, [r2, #8]
 8014c5a:	da08      	bge.n	8014c6e <__sfputc_r+0x1e>
 8014c5c:	6994      	ldr	r4, [r2, #24]
 8014c5e:	42a3      	cmp	r3, r4
 8014c60:	db01      	blt.n	8014c66 <__sfputc_r+0x16>
 8014c62:	290a      	cmp	r1, #10
 8014c64:	d103      	bne.n	8014c6e <__sfputc_r+0x1e>
 8014c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c6a:	f7ff bd05 	b.w	8014678 <__swbuf_r>
 8014c6e:	6813      	ldr	r3, [r2, #0]
 8014c70:	1c58      	adds	r0, r3, #1
 8014c72:	6010      	str	r0, [r2, #0]
 8014c74:	7019      	strb	r1, [r3, #0]
 8014c76:	4608      	mov	r0, r1
 8014c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c7c:	4770      	bx	lr

08014c7e <__sfputs_r>:
 8014c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c80:	4606      	mov	r6, r0
 8014c82:	460f      	mov	r7, r1
 8014c84:	4614      	mov	r4, r2
 8014c86:	18d5      	adds	r5, r2, r3
 8014c88:	42ac      	cmp	r4, r5
 8014c8a:	d101      	bne.n	8014c90 <__sfputs_r+0x12>
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	e007      	b.n	8014ca0 <__sfputs_r+0x22>
 8014c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c94:	463a      	mov	r2, r7
 8014c96:	4630      	mov	r0, r6
 8014c98:	f7ff ffda 	bl	8014c50 <__sfputc_r>
 8014c9c:	1c43      	adds	r3, r0, #1
 8014c9e:	d1f3      	bne.n	8014c88 <__sfputs_r+0xa>
 8014ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ca4 <_vfiprintf_r>:
 8014ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca8:	460d      	mov	r5, r1
 8014caa:	b09d      	sub	sp, #116	; 0x74
 8014cac:	4614      	mov	r4, r2
 8014cae:	4698      	mov	r8, r3
 8014cb0:	4606      	mov	r6, r0
 8014cb2:	b118      	cbz	r0, 8014cbc <_vfiprintf_r+0x18>
 8014cb4:	6983      	ldr	r3, [r0, #24]
 8014cb6:	b90b      	cbnz	r3, 8014cbc <_vfiprintf_r+0x18>
 8014cb8:	f7ff feb8 	bl	8014a2c <__sinit>
 8014cbc:	4b89      	ldr	r3, [pc, #548]	; (8014ee4 <_vfiprintf_r+0x240>)
 8014cbe:	429d      	cmp	r5, r3
 8014cc0:	d11b      	bne.n	8014cfa <_vfiprintf_r+0x56>
 8014cc2:	6875      	ldr	r5, [r6, #4]
 8014cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014cc6:	07d9      	lsls	r1, r3, #31
 8014cc8:	d405      	bmi.n	8014cd6 <_vfiprintf_r+0x32>
 8014cca:	89ab      	ldrh	r3, [r5, #12]
 8014ccc:	059a      	lsls	r2, r3, #22
 8014cce:	d402      	bmi.n	8014cd6 <_vfiprintf_r+0x32>
 8014cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cd2:	f7ff ff49 	bl	8014b68 <__retarget_lock_acquire_recursive>
 8014cd6:	89ab      	ldrh	r3, [r5, #12]
 8014cd8:	071b      	lsls	r3, r3, #28
 8014cda:	d501      	bpl.n	8014ce0 <_vfiprintf_r+0x3c>
 8014cdc:	692b      	ldr	r3, [r5, #16]
 8014cde:	b9eb      	cbnz	r3, 8014d1c <_vfiprintf_r+0x78>
 8014ce0:	4629      	mov	r1, r5
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	f7ff fd1a 	bl	801471c <__swsetup_r>
 8014ce8:	b1c0      	cbz	r0, 8014d1c <_vfiprintf_r+0x78>
 8014cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014cec:	07dc      	lsls	r4, r3, #31
 8014cee:	d50e      	bpl.n	8014d0e <_vfiprintf_r+0x6a>
 8014cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014cf4:	b01d      	add	sp, #116	; 0x74
 8014cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cfa:	4b7b      	ldr	r3, [pc, #492]	; (8014ee8 <_vfiprintf_r+0x244>)
 8014cfc:	429d      	cmp	r5, r3
 8014cfe:	d101      	bne.n	8014d04 <_vfiprintf_r+0x60>
 8014d00:	68b5      	ldr	r5, [r6, #8]
 8014d02:	e7df      	b.n	8014cc4 <_vfiprintf_r+0x20>
 8014d04:	4b79      	ldr	r3, [pc, #484]	; (8014eec <_vfiprintf_r+0x248>)
 8014d06:	429d      	cmp	r5, r3
 8014d08:	bf08      	it	eq
 8014d0a:	68f5      	ldreq	r5, [r6, #12]
 8014d0c:	e7da      	b.n	8014cc4 <_vfiprintf_r+0x20>
 8014d0e:	89ab      	ldrh	r3, [r5, #12]
 8014d10:	0598      	lsls	r0, r3, #22
 8014d12:	d4ed      	bmi.n	8014cf0 <_vfiprintf_r+0x4c>
 8014d14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d16:	f7ff ff28 	bl	8014b6a <__retarget_lock_release_recursive>
 8014d1a:	e7e9      	b.n	8014cf0 <_vfiprintf_r+0x4c>
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d20:	2320      	movs	r3, #32
 8014d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d2a:	2330      	movs	r3, #48	; 0x30
 8014d2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014ef0 <_vfiprintf_r+0x24c>
 8014d30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d34:	f04f 0901 	mov.w	r9, #1
 8014d38:	4623      	mov	r3, r4
 8014d3a:	469a      	mov	sl, r3
 8014d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d40:	b10a      	cbz	r2, 8014d46 <_vfiprintf_r+0xa2>
 8014d42:	2a25      	cmp	r2, #37	; 0x25
 8014d44:	d1f9      	bne.n	8014d3a <_vfiprintf_r+0x96>
 8014d46:	ebba 0b04 	subs.w	fp, sl, r4
 8014d4a:	d00b      	beq.n	8014d64 <_vfiprintf_r+0xc0>
 8014d4c:	465b      	mov	r3, fp
 8014d4e:	4622      	mov	r2, r4
 8014d50:	4629      	mov	r1, r5
 8014d52:	4630      	mov	r0, r6
 8014d54:	f7ff ff93 	bl	8014c7e <__sfputs_r>
 8014d58:	3001      	adds	r0, #1
 8014d5a:	f000 80aa 	beq.w	8014eb2 <_vfiprintf_r+0x20e>
 8014d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d60:	445a      	add	r2, fp
 8014d62:	9209      	str	r2, [sp, #36]	; 0x24
 8014d64:	f89a 3000 	ldrb.w	r3, [sl]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f000 80a2 	beq.w	8014eb2 <_vfiprintf_r+0x20e>
 8014d6e:	2300      	movs	r3, #0
 8014d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d78:	f10a 0a01 	add.w	sl, sl, #1
 8014d7c:	9304      	str	r3, [sp, #16]
 8014d7e:	9307      	str	r3, [sp, #28]
 8014d80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d84:	931a      	str	r3, [sp, #104]	; 0x68
 8014d86:	4654      	mov	r4, sl
 8014d88:	2205      	movs	r2, #5
 8014d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d8e:	4858      	ldr	r0, [pc, #352]	; (8014ef0 <_vfiprintf_r+0x24c>)
 8014d90:	f7eb faa6 	bl	80002e0 <memchr>
 8014d94:	9a04      	ldr	r2, [sp, #16]
 8014d96:	b9d8      	cbnz	r0, 8014dd0 <_vfiprintf_r+0x12c>
 8014d98:	06d1      	lsls	r1, r2, #27
 8014d9a:	bf44      	itt	mi
 8014d9c:	2320      	movmi	r3, #32
 8014d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014da2:	0713      	lsls	r3, r2, #28
 8014da4:	bf44      	itt	mi
 8014da6:	232b      	movmi	r3, #43	; 0x2b
 8014da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014dac:	f89a 3000 	ldrb.w	r3, [sl]
 8014db0:	2b2a      	cmp	r3, #42	; 0x2a
 8014db2:	d015      	beq.n	8014de0 <_vfiprintf_r+0x13c>
 8014db4:	9a07      	ldr	r2, [sp, #28]
 8014db6:	4654      	mov	r4, sl
 8014db8:	2000      	movs	r0, #0
 8014dba:	f04f 0c0a 	mov.w	ip, #10
 8014dbe:	4621      	mov	r1, r4
 8014dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014dc4:	3b30      	subs	r3, #48	; 0x30
 8014dc6:	2b09      	cmp	r3, #9
 8014dc8:	d94e      	bls.n	8014e68 <_vfiprintf_r+0x1c4>
 8014dca:	b1b0      	cbz	r0, 8014dfa <_vfiprintf_r+0x156>
 8014dcc:	9207      	str	r2, [sp, #28]
 8014dce:	e014      	b.n	8014dfa <_vfiprintf_r+0x156>
 8014dd0:	eba0 0308 	sub.w	r3, r0, r8
 8014dd4:	fa09 f303 	lsl.w	r3, r9, r3
 8014dd8:	4313      	orrs	r3, r2
 8014dda:	9304      	str	r3, [sp, #16]
 8014ddc:	46a2      	mov	sl, r4
 8014dde:	e7d2      	b.n	8014d86 <_vfiprintf_r+0xe2>
 8014de0:	9b03      	ldr	r3, [sp, #12]
 8014de2:	1d19      	adds	r1, r3, #4
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	9103      	str	r1, [sp, #12]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	bfbb      	ittet	lt
 8014dec:	425b      	neglt	r3, r3
 8014dee:	f042 0202 	orrlt.w	r2, r2, #2
 8014df2:	9307      	strge	r3, [sp, #28]
 8014df4:	9307      	strlt	r3, [sp, #28]
 8014df6:	bfb8      	it	lt
 8014df8:	9204      	strlt	r2, [sp, #16]
 8014dfa:	7823      	ldrb	r3, [r4, #0]
 8014dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8014dfe:	d10c      	bne.n	8014e1a <_vfiprintf_r+0x176>
 8014e00:	7863      	ldrb	r3, [r4, #1]
 8014e02:	2b2a      	cmp	r3, #42	; 0x2a
 8014e04:	d135      	bne.n	8014e72 <_vfiprintf_r+0x1ce>
 8014e06:	9b03      	ldr	r3, [sp, #12]
 8014e08:	1d1a      	adds	r2, r3, #4
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	9203      	str	r2, [sp, #12]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	bfb8      	it	lt
 8014e12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014e16:	3402      	adds	r4, #2
 8014e18:	9305      	str	r3, [sp, #20]
 8014e1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014f00 <_vfiprintf_r+0x25c>
 8014e1e:	7821      	ldrb	r1, [r4, #0]
 8014e20:	2203      	movs	r2, #3
 8014e22:	4650      	mov	r0, sl
 8014e24:	f7eb fa5c 	bl	80002e0 <memchr>
 8014e28:	b140      	cbz	r0, 8014e3c <_vfiprintf_r+0x198>
 8014e2a:	2340      	movs	r3, #64	; 0x40
 8014e2c:	eba0 000a 	sub.w	r0, r0, sl
 8014e30:	fa03 f000 	lsl.w	r0, r3, r0
 8014e34:	9b04      	ldr	r3, [sp, #16]
 8014e36:	4303      	orrs	r3, r0
 8014e38:	3401      	adds	r4, #1
 8014e3a:	9304      	str	r3, [sp, #16]
 8014e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e40:	482c      	ldr	r0, [pc, #176]	; (8014ef4 <_vfiprintf_r+0x250>)
 8014e42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e46:	2206      	movs	r2, #6
 8014e48:	f7eb fa4a 	bl	80002e0 <memchr>
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	d03f      	beq.n	8014ed0 <_vfiprintf_r+0x22c>
 8014e50:	4b29      	ldr	r3, [pc, #164]	; (8014ef8 <_vfiprintf_r+0x254>)
 8014e52:	bb1b      	cbnz	r3, 8014e9c <_vfiprintf_r+0x1f8>
 8014e54:	9b03      	ldr	r3, [sp, #12]
 8014e56:	3307      	adds	r3, #7
 8014e58:	f023 0307 	bic.w	r3, r3, #7
 8014e5c:	3308      	adds	r3, #8
 8014e5e:	9303      	str	r3, [sp, #12]
 8014e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e62:	443b      	add	r3, r7
 8014e64:	9309      	str	r3, [sp, #36]	; 0x24
 8014e66:	e767      	b.n	8014d38 <_vfiprintf_r+0x94>
 8014e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e6c:	460c      	mov	r4, r1
 8014e6e:	2001      	movs	r0, #1
 8014e70:	e7a5      	b.n	8014dbe <_vfiprintf_r+0x11a>
 8014e72:	2300      	movs	r3, #0
 8014e74:	3401      	adds	r4, #1
 8014e76:	9305      	str	r3, [sp, #20]
 8014e78:	4619      	mov	r1, r3
 8014e7a:	f04f 0c0a 	mov.w	ip, #10
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e84:	3a30      	subs	r2, #48	; 0x30
 8014e86:	2a09      	cmp	r2, #9
 8014e88:	d903      	bls.n	8014e92 <_vfiprintf_r+0x1ee>
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d0c5      	beq.n	8014e1a <_vfiprintf_r+0x176>
 8014e8e:	9105      	str	r1, [sp, #20]
 8014e90:	e7c3      	b.n	8014e1a <_vfiprintf_r+0x176>
 8014e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e96:	4604      	mov	r4, r0
 8014e98:	2301      	movs	r3, #1
 8014e9a:	e7f0      	b.n	8014e7e <_vfiprintf_r+0x1da>
 8014e9c:	ab03      	add	r3, sp, #12
 8014e9e:	9300      	str	r3, [sp, #0]
 8014ea0:	462a      	mov	r2, r5
 8014ea2:	4b16      	ldr	r3, [pc, #88]	; (8014efc <_vfiprintf_r+0x258>)
 8014ea4:	a904      	add	r1, sp, #16
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	f3af 8000 	nop.w
 8014eac:	4607      	mov	r7, r0
 8014eae:	1c78      	adds	r0, r7, #1
 8014eb0:	d1d6      	bne.n	8014e60 <_vfiprintf_r+0x1bc>
 8014eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014eb4:	07d9      	lsls	r1, r3, #31
 8014eb6:	d405      	bmi.n	8014ec4 <_vfiprintf_r+0x220>
 8014eb8:	89ab      	ldrh	r3, [r5, #12]
 8014eba:	059a      	lsls	r2, r3, #22
 8014ebc:	d402      	bmi.n	8014ec4 <_vfiprintf_r+0x220>
 8014ebe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ec0:	f7ff fe53 	bl	8014b6a <__retarget_lock_release_recursive>
 8014ec4:	89ab      	ldrh	r3, [r5, #12]
 8014ec6:	065b      	lsls	r3, r3, #25
 8014ec8:	f53f af12 	bmi.w	8014cf0 <_vfiprintf_r+0x4c>
 8014ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ece:	e711      	b.n	8014cf4 <_vfiprintf_r+0x50>
 8014ed0:	ab03      	add	r3, sp, #12
 8014ed2:	9300      	str	r3, [sp, #0]
 8014ed4:	462a      	mov	r2, r5
 8014ed6:	4b09      	ldr	r3, [pc, #36]	; (8014efc <_vfiprintf_r+0x258>)
 8014ed8:	a904      	add	r1, sp, #16
 8014eda:	4630      	mov	r0, r6
 8014edc:	f000 f880 	bl	8014fe0 <_printf_i>
 8014ee0:	e7e4      	b.n	8014eac <_vfiprintf_r+0x208>
 8014ee2:	bf00      	nop
 8014ee4:	080156d8 	.word	0x080156d8
 8014ee8:	080156f8 	.word	0x080156f8
 8014eec:	080156b8 	.word	0x080156b8
 8014ef0:	08015718 	.word	0x08015718
 8014ef4:	08015722 	.word	0x08015722
 8014ef8:	00000000 	.word	0x00000000
 8014efc:	08014c7f 	.word	0x08014c7f
 8014f00:	0801571e 	.word	0x0801571e

08014f04 <_printf_common>:
 8014f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f08:	4616      	mov	r6, r2
 8014f0a:	4699      	mov	r9, r3
 8014f0c:	688a      	ldr	r2, [r1, #8]
 8014f0e:	690b      	ldr	r3, [r1, #16]
 8014f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f14:	4293      	cmp	r3, r2
 8014f16:	bfb8      	it	lt
 8014f18:	4613      	movlt	r3, r2
 8014f1a:	6033      	str	r3, [r6, #0]
 8014f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f20:	4607      	mov	r7, r0
 8014f22:	460c      	mov	r4, r1
 8014f24:	b10a      	cbz	r2, 8014f2a <_printf_common+0x26>
 8014f26:	3301      	adds	r3, #1
 8014f28:	6033      	str	r3, [r6, #0]
 8014f2a:	6823      	ldr	r3, [r4, #0]
 8014f2c:	0699      	lsls	r1, r3, #26
 8014f2e:	bf42      	ittt	mi
 8014f30:	6833      	ldrmi	r3, [r6, #0]
 8014f32:	3302      	addmi	r3, #2
 8014f34:	6033      	strmi	r3, [r6, #0]
 8014f36:	6825      	ldr	r5, [r4, #0]
 8014f38:	f015 0506 	ands.w	r5, r5, #6
 8014f3c:	d106      	bne.n	8014f4c <_printf_common+0x48>
 8014f3e:	f104 0a19 	add.w	sl, r4, #25
 8014f42:	68e3      	ldr	r3, [r4, #12]
 8014f44:	6832      	ldr	r2, [r6, #0]
 8014f46:	1a9b      	subs	r3, r3, r2
 8014f48:	42ab      	cmp	r3, r5
 8014f4a:	dc26      	bgt.n	8014f9a <_printf_common+0x96>
 8014f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f50:	1e13      	subs	r3, r2, #0
 8014f52:	6822      	ldr	r2, [r4, #0]
 8014f54:	bf18      	it	ne
 8014f56:	2301      	movne	r3, #1
 8014f58:	0692      	lsls	r2, r2, #26
 8014f5a:	d42b      	bmi.n	8014fb4 <_printf_common+0xb0>
 8014f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f60:	4649      	mov	r1, r9
 8014f62:	4638      	mov	r0, r7
 8014f64:	47c0      	blx	r8
 8014f66:	3001      	adds	r0, #1
 8014f68:	d01e      	beq.n	8014fa8 <_printf_common+0xa4>
 8014f6a:	6823      	ldr	r3, [r4, #0]
 8014f6c:	68e5      	ldr	r5, [r4, #12]
 8014f6e:	6832      	ldr	r2, [r6, #0]
 8014f70:	f003 0306 	and.w	r3, r3, #6
 8014f74:	2b04      	cmp	r3, #4
 8014f76:	bf08      	it	eq
 8014f78:	1aad      	subeq	r5, r5, r2
 8014f7a:	68a3      	ldr	r3, [r4, #8]
 8014f7c:	6922      	ldr	r2, [r4, #16]
 8014f7e:	bf0c      	ite	eq
 8014f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f84:	2500      	movne	r5, #0
 8014f86:	4293      	cmp	r3, r2
 8014f88:	bfc4      	itt	gt
 8014f8a:	1a9b      	subgt	r3, r3, r2
 8014f8c:	18ed      	addgt	r5, r5, r3
 8014f8e:	2600      	movs	r6, #0
 8014f90:	341a      	adds	r4, #26
 8014f92:	42b5      	cmp	r5, r6
 8014f94:	d11a      	bne.n	8014fcc <_printf_common+0xc8>
 8014f96:	2000      	movs	r0, #0
 8014f98:	e008      	b.n	8014fac <_printf_common+0xa8>
 8014f9a:	2301      	movs	r3, #1
 8014f9c:	4652      	mov	r2, sl
 8014f9e:	4649      	mov	r1, r9
 8014fa0:	4638      	mov	r0, r7
 8014fa2:	47c0      	blx	r8
 8014fa4:	3001      	adds	r0, #1
 8014fa6:	d103      	bne.n	8014fb0 <_printf_common+0xac>
 8014fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fb0:	3501      	adds	r5, #1
 8014fb2:	e7c6      	b.n	8014f42 <_printf_common+0x3e>
 8014fb4:	18e1      	adds	r1, r4, r3
 8014fb6:	1c5a      	adds	r2, r3, #1
 8014fb8:	2030      	movs	r0, #48	; 0x30
 8014fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014fbe:	4422      	add	r2, r4
 8014fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014fc8:	3302      	adds	r3, #2
 8014fca:	e7c7      	b.n	8014f5c <_printf_common+0x58>
 8014fcc:	2301      	movs	r3, #1
 8014fce:	4622      	mov	r2, r4
 8014fd0:	4649      	mov	r1, r9
 8014fd2:	4638      	mov	r0, r7
 8014fd4:	47c0      	blx	r8
 8014fd6:	3001      	adds	r0, #1
 8014fd8:	d0e6      	beq.n	8014fa8 <_printf_common+0xa4>
 8014fda:	3601      	adds	r6, #1
 8014fdc:	e7d9      	b.n	8014f92 <_printf_common+0x8e>
	...

08014fe0 <_printf_i>:
 8014fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fe4:	7e0f      	ldrb	r7, [r1, #24]
 8014fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014fe8:	2f78      	cmp	r7, #120	; 0x78
 8014fea:	4691      	mov	r9, r2
 8014fec:	4680      	mov	r8, r0
 8014fee:	460c      	mov	r4, r1
 8014ff0:	469a      	mov	sl, r3
 8014ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014ff6:	d807      	bhi.n	8015008 <_printf_i+0x28>
 8014ff8:	2f62      	cmp	r7, #98	; 0x62
 8014ffa:	d80a      	bhi.n	8015012 <_printf_i+0x32>
 8014ffc:	2f00      	cmp	r7, #0
 8014ffe:	f000 80d8 	beq.w	80151b2 <_printf_i+0x1d2>
 8015002:	2f58      	cmp	r7, #88	; 0x58
 8015004:	f000 80a3 	beq.w	801514e <_printf_i+0x16e>
 8015008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801500c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015010:	e03a      	b.n	8015088 <_printf_i+0xa8>
 8015012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015016:	2b15      	cmp	r3, #21
 8015018:	d8f6      	bhi.n	8015008 <_printf_i+0x28>
 801501a:	a101      	add	r1, pc, #4	; (adr r1, 8015020 <_printf_i+0x40>)
 801501c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015020:	08015079 	.word	0x08015079
 8015024:	0801508d 	.word	0x0801508d
 8015028:	08015009 	.word	0x08015009
 801502c:	08015009 	.word	0x08015009
 8015030:	08015009 	.word	0x08015009
 8015034:	08015009 	.word	0x08015009
 8015038:	0801508d 	.word	0x0801508d
 801503c:	08015009 	.word	0x08015009
 8015040:	08015009 	.word	0x08015009
 8015044:	08015009 	.word	0x08015009
 8015048:	08015009 	.word	0x08015009
 801504c:	08015199 	.word	0x08015199
 8015050:	080150bd 	.word	0x080150bd
 8015054:	0801517b 	.word	0x0801517b
 8015058:	08015009 	.word	0x08015009
 801505c:	08015009 	.word	0x08015009
 8015060:	080151bb 	.word	0x080151bb
 8015064:	08015009 	.word	0x08015009
 8015068:	080150bd 	.word	0x080150bd
 801506c:	08015009 	.word	0x08015009
 8015070:	08015009 	.word	0x08015009
 8015074:	08015183 	.word	0x08015183
 8015078:	682b      	ldr	r3, [r5, #0]
 801507a:	1d1a      	adds	r2, r3, #4
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	602a      	str	r2, [r5, #0]
 8015080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015088:	2301      	movs	r3, #1
 801508a:	e0a3      	b.n	80151d4 <_printf_i+0x1f4>
 801508c:	6820      	ldr	r0, [r4, #0]
 801508e:	6829      	ldr	r1, [r5, #0]
 8015090:	0606      	lsls	r6, r0, #24
 8015092:	f101 0304 	add.w	r3, r1, #4
 8015096:	d50a      	bpl.n	80150ae <_printf_i+0xce>
 8015098:	680e      	ldr	r6, [r1, #0]
 801509a:	602b      	str	r3, [r5, #0]
 801509c:	2e00      	cmp	r6, #0
 801509e:	da03      	bge.n	80150a8 <_printf_i+0xc8>
 80150a0:	232d      	movs	r3, #45	; 0x2d
 80150a2:	4276      	negs	r6, r6
 80150a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150a8:	485e      	ldr	r0, [pc, #376]	; (8015224 <_printf_i+0x244>)
 80150aa:	230a      	movs	r3, #10
 80150ac:	e019      	b.n	80150e2 <_printf_i+0x102>
 80150ae:	680e      	ldr	r6, [r1, #0]
 80150b0:	602b      	str	r3, [r5, #0]
 80150b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80150b6:	bf18      	it	ne
 80150b8:	b236      	sxthne	r6, r6
 80150ba:	e7ef      	b.n	801509c <_printf_i+0xbc>
 80150bc:	682b      	ldr	r3, [r5, #0]
 80150be:	6820      	ldr	r0, [r4, #0]
 80150c0:	1d19      	adds	r1, r3, #4
 80150c2:	6029      	str	r1, [r5, #0]
 80150c4:	0601      	lsls	r1, r0, #24
 80150c6:	d501      	bpl.n	80150cc <_printf_i+0xec>
 80150c8:	681e      	ldr	r6, [r3, #0]
 80150ca:	e002      	b.n	80150d2 <_printf_i+0xf2>
 80150cc:	0646      	lsls	r6, r0, #25
 80150ce:	d5fb      	bpl.n	80150c8 <_printf_i+0xe8>
 80150d0:	881e      	ldrh	r6, [r3, #0]
 80150d2:	4854      	ldr	r0, [pc, #336]	; (8015224 <_printf_i+0x244>)
 80150d4:	2f6f      	cmp	r7, #111	; 0x6f
 80150d6:	bf0c      	ite	eq
 80150d8:	2308      	moveq	r3, #8
 80150da:	230a      	movne	r3, #10
 80150dc:	2100      	movs	r1, #0
 80150de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150e2:	6865      	ldr	r5, [r4, #4]
 80150e4:	60a5      	str	r5, [r4, #8]
 80150e6:	2d00      	cmp	r5, #0
 80150e8:	bfa2      	ittt	ge
 80150ea:	6821      	ldrge	r1, [r4, #0]
 80150ec:	f021 0104 	bicge.w	r1, r1, #4
 80150f0:	6021      	strge	r1, [r4, #0]
 80150f2:	b90e      	cbnz	r6, 80150f8 <_printf_i+0x118>
 80150f4:	2d00      	cmp	r5, #0
 80150f6:	d04d      	beq.n	8015194 <_printf_i+0x1b4>
 80150f8:	4615      	mov	r5, r2
 80150fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80150fe:	fb03 6711 	mls	r7, r3, r1, r6
 8015102:	5dc7      	ldrb	r7, [r0, r7]
 8015104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015108:	4637      	mov	r7, r6
 801510a:	42bb      	cmp	r3, r7
 801510c:	460e      	mov	r6, r1
 801510e:	d9f4      	bls.n	80150fa <_printf_i+0x11a>
 8015110:	2b08      	cmp	r3, #8
 8015112:	d10b      	bne.n	801512c <_printf_i+0x14c>
 8015114:	6823      	ldr	r3, [r4, #0]
 8015116:	07de      	lsls	r6, r3, #31
 8015118:	d508      	bpl.n	801512c <_printf_i+0x14c>
 801511a:	6923      	ldr	r3, [r4, #16]
 801511c:	6861      	ldr	r1, [r4, #4]
 801511e:	4299      	cmp	r1, r3
 8015120:	bfde      	ittt	le
 8015122:	2330      	movle	r3, #48	; 0x30
 8015124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015128:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801512c:	1b52      	subs	r2, r2, r5
 801512e:	6122      	str	r2, [r4, #16]
 8015130:	f8cd a000 	str.w	sl, [sp]
 8015134:	464b      	mov	r3, r9
 8015136:	aa03      	add	r2, sp, #12
 8015138:	4621      	mov	r1, r4
 801513a:	4640      	mov	r0, r8
 801513c:	f7ff fee2 	bl	8014f04 <_printf_common>
 8015140:	3001      	adds	r0, #1
 8015142:	d14c      	bne.n	80151de <_printf_i+0x1fe>
 8015144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015148:	b004      	add	sp, #16
 801514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801514e:	4835      	ldr	r0, [pc, #212]	; (8015224 <_printf_i+0x244>)
 8015150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015154:	6829      	ldr	r1, [r5, #0]
 8015156:	6823      	ldr	r3, [r4, #0]
 8015158:	f851 6b04 	ldr.w	r6, [r1], #4
 801515c:	6029      	str	r1, [r5, #0]
 801515e:	061d      	lsls	r5, r3, #24
 8015160:	d514      	bpl.n	801518c <_printf_i+0x1ac>
 8015162:	07df      	lsls	r7, r3, #31
 8015164:	bf44      	itt	mi
 8015166:	f043 0320 	orrmi.w	r3, r3, #32
 801516a:	6023      	strmi	r3, [r4, #0]
 801516c:	b91e      	cbnz	r6, 8015176 <_printf_i+0x196>
 801516e:	6823      	ldr	r3, [r4, #0]
 8015170:	f023 0320 	bic.w	r3, r3, #32
 8015174:	6023      	str	r3, [r4, #0]
 8015176:	2310      	movs	r3, #16
 8015178:	e7b0      	b.n	80150dc <_printf_i+0xfc>
 801517a:	6823      	ldr	r3, [r4, #0]
 801517c:	f043 0320 	orr.w	r3, r3, #32
 8015180:	6023      	str	r3, [r4, #0]
 8015182:	2378      	movs	r3, #120	; 0x78
 8015184:	4828      	ldr	r0, [pc, #160]	; (8015228 <_printf_i+0x248>)
 8015186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801518a:	e7e3      	b.n	8015154 <_printf_i+0x174>
 801518c:	0659      	lsls	r1, r3, #25
 801518e:	bf48      	it	mi
 8015190:	b2b6      	uxthmi	r6, r6
 8015192:	e7e6      	b.n	8015162 <_printf_i+0x182>
 8015194:	4615      	mov	r5, r2
 8015196:	e7bb      	b.n	8015110 <_printf_i+0x130>
 8015198:	682b      	ldr	r3, [r5, #0]
 801519a:	6826      	ldr	r6, [r4, #0]
 801519c:	6961      	ldr	r1, [r4, #20]
 801519e:	1d18      	adds	r0, r3, #4
 80151a0:	6028      	str	r0, [r5, #0]
 80151a2:	0635      	lsls	r5, r6, #24
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	d501      	bpl.n	80151ac <_printf_i+0x1cc>
 80151a8:	6019      	str	r1, [r3, #0]
 80151aa:	e002      	b.n	80151b2 <_printf_i+0x1d2>
 80151ac:	0670      	lsls	r0, r6, #25
 80151ae:	d5fb      	bpl.n	80151a8 <_printf_i+0x1c8>
 80151b0:	8019      	strh	r1, [r3, #0]
 80151b2:	2300      	movs	r3, #0
 80151b4:	6123      	str	r3, [r4, #16]
 80151b6:	4615      	mov	r5, r2
 80151b8:	e7ba      	b.n	8015130 <_printf_i+0x150>
 80151ba:	682b      	ldr	r3, [r5, #0]
 80151bc:	1d1a      	adds	r2, r3, #4
 80151be:	602a      	str	r2, [r5, #0]
 80151c0:	681d      	ldr	r5, [r3, #0]
 80151c2:	6862      	ldr	r2, [r4, #4]
 80151c4:	2100      	movs	r1, #0
 80151c6:	4628      	mov	r0, r5
 80151c8:	f7eb f88a 	bl	80002e0 <memchr>
 80151cc:	b108      	cbz	r0, 80151d2 <_printf_i+0x1f2>
 80151ce:	1b40      	subs	r0, r0, r5
 80151d0:	6060      	str	r0, [r4, #4]
 80151d2:	6863      	ldr	r3, [r4, #4]
 80151d4:	6123      	str	r3, [r4, #16]
 80151d6:	2300      	movs	r3, #0
 80151d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151dc:	e7a8      	b.n	8015130 <_printf_i+0x150>
 80151de:	6923      	ldr	r3, [r4, #16]
 80151e0:	462a      	mov	r2, r5
 80151e2:	4649      	mov	r1, r9
 80151e4:	4640      	mov	r0, r8
 80151e6:	47d0      	blx	sl
 80151e8:	3001      	adds	r0, #1
 80151ea:	d0ab      	beq.n	8015144 <_printf_i+0x164>
 80151ec:	6823      	ldr	r3, [r4, #0]
 80151ee:	079b      	lsls	r3, r3, #30
 80151f0:	d413      	bmi.n	801521a <_printf_i+0x23a>
 80151f2:	68e0      	ldr	r0, [r4, #12]
 80151f4:	9b03      	ldr	r3, [sp, #12]
 80151f6:	4298      	cmp	r0, r3
 80151f8:	bfb8      	it	lt
 80151fa:	4618      	movlt	r0, r3
 80151fc:	e7a4      	b.n	8015148 <_printf_i+0x168>
 80151fe:	2301      	movs	r3, #1
 8015200:	4632      	mov	r2, r6
 8015202:	4649      	mov	r1, r9
 8015204:	4640      	mov	r0, r8
 8015206:	47d0      	blx	sl
 8015208:	3001      	adds	r0, #1
 801520a:	d09b      	beq.n	8015144 <_printf_i+0x164>
 801520c:	3501      	adds	r5, #1
 801520e:	68e3      	ldr	r3, [r4, #12]
 8015210:	9903      	ldr	r1, [sp, #12]
 8015212:	1a5b      	subs	r3, r3, r1
 8015214:	42ab      	cmp	r3, r5
 8015216:	dcf2      	bgt.n	80151fe <_printf_i+0x21e>
 8015218:	e7eb      	b.n	80151f2 <_printf_i+0x212>
 801521a:	2500      	movs	r5, #0
 801521c:	f104 0619 	add.w	r6, r4, #25
 8015220:	e7f5      	b.n	801520e <_printf_i+0x22e>
 8015222:	bf00      	nop
 8015224:	08015729 	.word	0x08015729
 8015228:	0801573a 	.word	0x0801573a

0801522c <__sread>:
 801522c:	b510      	push	{r4, lr}
 801522e:	460c      	mov	r4, r1
 8015230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015234:	f000 f894 	bl	8015360 <_read_r>
 8015238:	2800      	cmp	r0, #0
 801523a:	bfab      	itete	ge
 801523c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801523e:	89a3      	ldrhlt	r3, [r4, #12]
 8015240:	181b      	addge	r3, r3, r0
 8015242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015246:	bfac      	ite	ge
 8015248:	6563      	strge	r3, [r4, #84]	; 0x54
 801524a:	81a3      	strhlt	r3, [r4, #12]
 801524c:	bd10      	pop	{r4, pc}

0801524e <__swrite>:
 801524e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015252:	461f      	mov	r7, r3
 8015254:	898b      	ldrh	r3, [r1, #12]
 8015256:	05db      	lsls	r3, r3, #23
 8015258:	4605      	mov	r5, r0
 801525a:	460c      	mov	r4, r1
 801525c:	4616      	mov	r6, r2
 801525e:	d505      	bpl.n	801526c <__swrite+0x1e>
 8015260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015264:	2302      	movs	r3, #2
 8015266:	2200      	movs	r2, #0
 8015268:	f000 f868 	bl	801533c <_lseek_r>
 801526c:	89a3      	ldrh	r3, [r4, #12]
 801526e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015272:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015276:	81a3      	strh	r3, [r4, #12]
 8015278:	4632      	mov	r2, r6
 801527a:	463b      	mov	r3, r7
 801527c:	4628      	mov	r0, r5
 801527e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015282:	f000 b817 	b.w	80152b4 <_write_r>

08015286 <__sseek>:
 8015286:	b510      	push	{r4, lr}
 8015288:	460c      	mov	r4, r1
 801528a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801528e:	f000 f855 	bl	801533c <_lseek_r>
 8015292:	1c43      	adds	r3, r0, #1
 8015294:	89a3      	ldrh	r3, [r4, #12]
 8015296:	bf15      	itete	ne
 8015298:	6560      	strne	r0, [r4, #84]	; 0x54
 801529a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801529e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80152a2:	81a3      	strheq	r3, [r4, #12]
 80152a4:	bf18      	it	ne
 80152a6:	81a3      	strhne	r3, [r4, #12]
 80152a8:	bd10      	pop	{r4, pc}

080152aa <__sclose>:
 80152aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152ae:	f000 b813 	b.w	80152d8 <_close_r>
	...

080152b4 <_write_r>:
 80152b4:	b538      	push	{r3, r4, r5, lr}
 80152b6:	4d07      	ldr	r5, [pc, #28]	; (80152d4 <_write_r+0x20>)
 80152b8:	4604      	mov	r4, r0
 80152ba:	4608      	mov	r0, r1
 80152bc:	4611      	mov	r1, r2
 80152be:	2200      	movs	r2, #0
 80152c0:	602a      	str	r2, [r5, #0]
 80152c2:	461a      	mov	r2, r3
 80152c4:	f7ed fd7d 	bl	8002dc2 <_write>
 80152c8:	1c43      	adds	r3, r0, #1
 80152ca:	d102      	bne.n	80152d2 <_write_r+0x1e>
 80152cc:	682b      	ldr	r3, [r5, #0]
 80152ce:	b103      	cbz	r3, 80152d2 <_write_r+0x1e>
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	bd38      	pop	{r3, r4, r5, pc}
 80152d4:	240050d8 	.word	0x240050d8

080152d8 <_close_r>:
 80152d8:	b538      	push	{r3, r4, r5, lr}
 80152da:	4d06      	ldr	r5, [pc, #24]	; (80152f4 <_close_r+0x1c>)
 80152dc:	2300      	movs	r3, #0
 80152de:	4604      	mov	r4, r0
 80152e0:	4608      	mov	r0, r1
 80152e2:	602b      	str	r3, [r5, #0]
 80152e4:	f7ed fd89 	bl	8002dfa <_close>
 80152e8:	1c43      	adds	r3, r0, #1
 80152ea:	d102      	bne.n	80152f2 <_close_r+0x1a>
 80152ec:	682b      	ldr	r3, [r5, #0]
 80152ee:	b103      	cbz	r3, 80152f2 <_close_r+0x1a>
 80152f0:	6023      	str	r3, [r4, #0]
 80152f2:	bd38      	pop	{r3, r4, r5, pc}
 80152f4:	240050d8 	.word	0x240050d8

080152f8 <_fstat_r>:
 80152f8:	b538      	push	{r3, r4, r5, lr}
 80152fa:	4d07      	ldr	r5, [pc, #28]	; (8015318 <_fstat_r+0x20>)
 80152fc:	2300      	movs	r3, #0
 80152fe:	4604      	mov	r4, r0
 8015300:	4608      	mov	r0, r1
 8015302:	4611      	mov	r1, r2
 8015304:	602b      	str	r3, [r5, #0]
 8015306:	f7ed fd84 	bl	8002e12 <_fstat>
 801530a:	1c43      	adds	r3, r0, #1
 801530c:	d102      	bne.n	8015314 <_fstat_r+0x1c>
 801530e:	682b      	ldr	r3, [r5, #0]
 8015310:	b103      	cbz	r3, 8015314 <_fstat_r+0x1c>
 8015312:	6023      	str	r3, [r4, #0]
 8015314:	bd38      	pop	{r3, r4, r5, pc}
 8015316:	bf00      	nop
 8015318:	240050d8 	.word	0x240050d8

0801531c <_isatty_r>:
 801531c:	b538      	push	{r3, r4, r5, lr}
 801531e:	4d06      	ldr	r5, [pc, #24]	; (8015338 <_isatty_r+0x1c>)
 8015320:	2300      	movs	r3, #0
 8015322:	4604      	mov	r4, r0
 8015324:	4608      	mov	r0, r1
 8015326:	602b      	str	r3, [r5, #0]
 8015328:	f7ed fd83 	bl	8002e32 <_isatty>
 801532c:	1c43      	adds	r3, r0, #1
 801532e:	d102      	bne.n	8015336 <_isatty_r+0x1a>
 8015330:	682b      	ldr	r3, [r5, #0]
 8015332:	b103      	cbz	r3, 8015336 <_isatty_r+0x1a>
 8015334:	6023      	str	r3, [r4, #0]
 8015336:	bd38      	pop	{r3, r4, r5, pc}
 8015338:	240050d8 	.word	0x240050d8

0801533c <_lseek_r>:
 801533c:	b538      	push	{r3, r4, r5, lr}
 801533e:	4d07      	ldr	r5, [pc, #28]	; (801535c <_lseek_r+0x20>)
 8015340:	4604      	mov	r4, r0
 8015342:	4608      	mov	r0, r1
 8015344:	4611      	mov	r1, r2
 8015346:	2200      	movs	r2, #0
 8015348:	602a      	str	r2, [r5, #0]
 801534a:	461a      	mov	r2, r3
 801534c:	f7ed fd7c 	bl	8002e48 <_lseek>
 8015350:	1c43      	adds	r3, r0, #1
 8015352:	d102      	bne.n	801535a <_lseek_r+0x1e>
 8015354:	682b      	ldr	r3, [r5, #0]
 8015356:	b103      	cbz	r3, 801535a <_lseek_r+0x1e>
 8015358:	6023      	str	r3, [r4, #0]
 801535a:	bd38      	pop	{r3, r4, r5, pc}
 801535c:	240050d8 	.word	0x240050d8

08015360 <_read_r>:
 8015360:	b538      	push	{r3, r4, r5, lr}
 8015362:	4d07      	ldr	r5, [pc, #28]	; (8015380 <_read_r+0x20>)
 8015364:	4604      	mov	r4, r0
 8015366:	4608      	mov	r0, r1
 8015368:	4611      	mov	r1, r2
 801536a:	2200      	movs	r2, #0
 801536c:	602a      	str	r2, [r5, #0]
 801536e:	461a      	mov	r2, r3
 8015370:	f7ed fd0a 	bl	8002d88 <_read>
 8015374:	1c43      	adds	r3, r0, #1
 8015376:	d102      	bne.n	801537e <_read_r+0x1e>
 8015378:	682b      	ldr	r3, [r5, #0]
 801537a:	b103      	cbz	r3, 801537e <_read_r+0x1e>
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	bd38      	pop	{r3, r4, r5, pc}
 8015380:	240050d8 	.word	0x240050d8

08015384 <_init>:
 8015384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015386:	bf00      	nop
 8015388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801538a:	bc08      	pop	{r3}
 801538c:	469e      	mov	lr, r3
 801538e:	4770      	bx	lr

08015390 <_fini>:
 8015390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015392:	bf00      	nop
 8015394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015396:	bc08      	pop	{r3}
 8015398:	469e      	mov	lr, r3
 801539a:	4770      	bx	lr
