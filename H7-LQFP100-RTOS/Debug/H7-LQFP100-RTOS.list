
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc48  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0800fee8  0800fee8  0001fee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010130  08010130  00020130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010138  08010138  00020138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801013c  0801013c  0002013c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08010140  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fa0  24000014  08010154  00030014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004fb4  08010154  00034fb4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000345fb  00000000  00000000  00030042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005fd2  00000000  00000000  0006463d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002588  00000000  00000000  0006a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002320  00000000  00000000  0006cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000403fe  00000000  00000000  0006eeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000346e2  00000000  00000000  000af2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00191c17  00000000  00000000  000e3998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002755af  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009f64  00000000  00000000  00275600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fed0 	.word	0x0800fed0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800fed0 	.word	0x0800fed0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f001 ff93 	bl	8002594 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f000 fe72 	bl	800135c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f002 fdb6 	bl	80031f4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f000 fe65 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f002 f90f 	bl	80028d8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f000 fe4c 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f002 f901 	bl	80028d8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f000 fe3e 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f002 f8f3 	bl	80028d8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f000 fe30 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f002 f8e5 	bl	80028d8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f000 fe22 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f002 f8d6 	bl	80028d8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f000 fe13 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f002 f8c7 	bl	80028d8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f000 fe04 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f002 f8b8 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f000 fdf5 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f002 f8a9 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f000 fde6 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f002 f89a 	bl	80028d8 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f000 fdd7 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f002 f88b 	bl	80028d8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f000 fdc8 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f002 f87c 	bl	80028d8 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f000 fdb9 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	24000030 	.word	0x24000030
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f001 fe7b 	bl	8002594 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f000 fd5a 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f002 f804 	bl	80028d8 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f000 fd41 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f001 fff6 	bl	80028d8 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f000 fd33 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f001 ffe8 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f000 fd25 	bl	800135c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f001 ffda 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f000 fd17 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000094 	.word	0x24000094
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f005 f9ac 	bl	8005d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f005 f9a0 	bl	8005d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f005 f994 	bl	8005d58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f002 ff49 	bl	800390c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f000 fc6c 	bl	800135c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f001 fbb6 	bl	8002250 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f001 fbb0 	bl	8002250 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f002 fee9 	bl	800390c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f000 fc0c 	bl	800135c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240000f8 	.word	0x240000f8
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	24000170 	.word	0x24000170
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00f f997 	bl	800fec0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f002 fce9 	bl	8003570 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f000 fbda 	bl	800135c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f002 fd56 	bl	8003674 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f000 fbc5 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240001e8 	.word	0x240001e8
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f005 f87f 	bl	8005d58 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f002 fe34 	bl	800390c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f000 fb57 	bl	800135c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f002 fc2e 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f002 fc45 	bl	8003554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240001fc 	.word	0x240001fc
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f002 fc05 	bl	8003520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f002 fc1c 	bl	8003554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f002 fbfd 	bl	8003520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f002 fc14 	bl	8003554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f002 fbf5 	bl	8003520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f002 fc0c 	bl	8003554 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f002 fbed 	bl	8003520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f002 fc04 	bl	8003554 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <MX_FREERTOS_Init+0xa8>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4828      	ldr	r0, [pc, #160]	; (8000e14 <MX_FREERTOS_Init+0xac>)
 8000d72:	f00c fb61 	bl	800d438 <osThreadNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <MX_FREERTOS_Init+0xb0>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <MX_FREERTOS_Init+0xb4>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <MX_FREERTOS_Init+0xb8>)
 8000d82:	f00c fb59 	bl	800d438 <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <MX_FREERTOS_Init+0xbc>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <MX_FREERTOS_Init+0xc0>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_FREERTOS_Init+0xc4>)
 8000d92:	f00c fb51 	bl	800d438 <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <MX_FREERTOS_Init+0xc8>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000d9c:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <MX_FREERTOS_Init+0xcc>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4825      	ldr	r0, [pc, #148]	; (8000e38 <MX_FREERTOS_Init+0xd0>)
 8000da2:	f00c fb49 	bl	800d438 <osThreadNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <MX_FREERTOS_Init+0xd4>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dac:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <MX_FREERTOS_Init+0xd8>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4824      	ldr	r0, [pc, #144]	; (8000e44 <MX_FREERTOS_Init+0xdc>)
 8000db2:	f00c fb41 	bl	800d438 <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <MX_FREERTOS_Init+0xe0>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_FREERTOS_Init+0xe4>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4823      	ldr	r0, [pc, #140]	; (8000e50 <MX_FREERTOS_Init+0xe8>)
 8000dc2:	f00c fb39 	bl	800d438 <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <MX_FREERTOS_Init+0xec>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_FREERTOS_Init+0xf0>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_FREERTOS_Init+0xf4>)
 8000dd2:	f00c fb31 	bl	800d438 <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <MX_FREERTOS_Init+0xf8>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_FREERTOS_Init+0xfc>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4821      	ldr	r0, [pc, #132]	; (8000e68 <MX_FREERTOS_Init+0x100>)
 8000de2:	f00c fb29 	bl	800d438 <osThreadNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <MX_FREERTOS_Init+0x104>)
 8000dea:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <MX_FREERTOS_Init+0x108>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_FREERTOS_Init+0x10c>)
 8000df2:	f00c fb21 	bl	800d438 <osThreadNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <MX_FREERTOS_Init+0x110>)
 8000dfa:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <MX_FREERTOS_Init+0x114>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_FREERTOS_Init+0x118>)
 8000e02:	f00c fb19 	bl	800d438 <osThreadNew>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <MX_FREERTOS_Init+0x11c>)
 8000e0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	0800ff88 	.word	0x0800ff88
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	24000274 	.word	0x24000274
 8000e1c:	0800ffac 	.word	0x0800ffac
 8000e20:	08000e99 	.word	0x08000e99
 8000e24:	24000278 	.word	0x24000278
 8000e28:	0800ffd0 	.word	0x0800ffd0
 8000e2c:	08000ea9 	.word	0x08000ea9
 8000e30:	2400027c 	.word	0x2400027c
 8000e34:	0800fff4 	.word	0x0800fff4
 8000e38:	08000eb9 	.word	0x08000eb9
 8000e3c:	24000280 	.word	0x24000280
 8000e40:	08010018 	.word	0x08010018
 8000e44:	08000ec9 	.word	0x08000ec9
 8000e48:	24000284 	.word	0x24000284
 8000e4c:	0801003c 	.word	0x0801003c
 8000e50:	08000ed9 	.word	0x08000ed9
 8000e54:	24000288 	.word	0x24000288
 8000e58:	08010060 	.word	0x08010060
 8000e5c:	08000ee9 	.word	0x08000ee9
 8000e60:	2400028c 	.word	0x2400028c
 8000e64:	08010084 	.word	0x08010084
 8000e68:	08000ef9 	.word	0x08000ef9
 8000e6c:	24000290 	.word	0x24000290
 8000e70:	080100a8 	.word	0x080100a8
 8000e74:	08000f09 	.word	0x08000f09
 8000e78:	24000294 	.word	0x24000294
 8000e7c:	080100cc 	.word	0x080100cc
 8000e80:	08000f19 	.word	0x08000f19
 8000e84:	24000298 	.word	0x24000298

08000e88 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f00c fb63 	bl	800d55c <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <PMT_init+0x8>

08000e98 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f00c fb5b 	bl	800d55c <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <ERPA_init+0x8>

08000ea8 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f00c fb53 	bl	800d55c <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <HK_init+0x8>

08000eb8 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f00c fb4b 	bl	800d55c <osDelay>
 8000ec6:	e7fb      	b.n	8000ec0 <AUTOINIT_init+0x8>

08000ec8 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f00c fb43 	bl	800d55c <osDelay>
 8000ed6:	e7fb      	b.n	8000ed0 <AUTODEINIT_init+0x8>

08000ed8 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	for (;;) {
		osDelay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f00c fb3b 	bl	800d55c <osDelay>
 8000ee6:	e7fb      	b.n	8000ee0 <UART_TX_init+0x8>

08000ee8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	for (;;) {
		osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f00c fb33 	bl	800d55c <osDelay>
 8000ef6:	e7fb      	b.n	8000ef0 <Voltage_Monitor_init+0x8>

08000ef8 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f00c fb2b 	bl	800d55c <osDelay>
 8000f06:	e7fb      	b.n	8000f00 <STOP_init+0x8>

08000f08 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f00c fb23 	bl	800d55c <osDelay>
 8000f16:	e7fb      	b.n	8000f10 <Science_init+0x8>

08000f18 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f00c fb1b 	bl	800d55c <osDelay>
 8000f26:	e7fb      	b.n	8000f20 <Idle_init+0x8>

08000f28 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	4a32      	ldr	r2, [pc, #200]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fbe:	f005 f87b 	bl	80060b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2164      	movs	r1, #100	; 0x64
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000fc8:	f005 f876 	bl	80060b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fcc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8000fd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fe6:	f004 feb7 	bl	8005d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0xf0>)
 8001002:	f004 fea9 	bl	8005d58 <HAL_GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58020400 	.word	0x58020400

0800101c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_I2C1_Init+0x78>)
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <MX_I2C1_Init+0x7c>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C1_Init+0x78>)
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <MX_I2C1_Init+0x80>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_I2C1_Init+0x78>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C1_Init+0x78>)
 8001034:	2201      	movs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_I2C1_Init+0x78>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C1_Init+0x78>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_I2C1_Init+0x78>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_I2C1_Init+0x78>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <MX_I2C1_Init+0x78>)
 8001058:	f005 f848 	bl	80060ec <HAL_I2C_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001062:	f000 f97b 	bl	800135c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <MX_I2C1_Init+0x78>)
 800106a:	f005 f8db 	bl	8006224 <HAL_I2CEx_ConfigAnalogFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001074:	f000 f972 	bl	800135c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_I2C1_Init+0x78>)
 800107c:	f005 f91d 	bl	80062ba <HAL_I2CEx_ConfigDigitalFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 f969 	bl	800135c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800108a:	2001      	movs	r0, #1
 800108c:	f005 f962 	bl	8006354 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2400029c 	.word	0x2400029c
 8001098:	40005400 	.word	0x40005400
 800109c:	0020081f 	.word	0x0020081f

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	; 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	22c0      	movs	r2, #192	; 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00e fefd 	bl	800fec0 <memset>
  if(i2cHandle->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_I2C_MspInit+0xc8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d146      	bne.n	800115e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	f04f 0208 	mov.w	r2, #8
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f006 f9ba 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f000 f933 	bl	800135c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_I2C_MspInit+0xcc>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_I2C_MspInit+0xcc>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <HAL_I2C_MspInit+0xd0>)
 800113c:	f004 fe0c 	bl	8005d58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	37e8      	adds	r7, #232	; 0xe8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40005400 	.word	0x40005400
 800116c:	58024400 	.word	0x58024400
 8001170:	58020400 	.word	0x58020400

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f001 f802 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 f826 	bl	80011cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001180:	f000 f8a4 	bl	80012cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f7ff fed0 	bl	8000f28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001188:	f7ff fdae 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 800118c:	f000 fdb2 	bl	8001cf4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001190:	f000 fede 	bl	8001f50 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001194:	f7ff ff42 	bl	800101c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001198:	f000 f9d0 	bl	800153c <MX_SPI2_Init>
  MX_TIM2_Init();
 800119c:	f000 fd34 	bl	8001c08 <MX_TIM2_Init>
  MX_TIM1_Init();
 80011a0:	f000 fc84 	bl	8001aac <MX_TIM1_Init>
  MX_ADC3_Init();
 80011a4:	f7ff fb40 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80011a8:	f7ff fa1c 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80011ac:	f7ff fce8 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80011b0:	f000 f96c 	bl	800148c <MX_SPI1_Init>
  MX_RTC_Init();
 80011b4:	f000 f8d8 	bl	8001368 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 80011b8:	f000 f8b7 	bl	800132a <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011bc:	f00c f8f2 	bl	800d3a4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80011c0:	f7ff fdd2 	bl	8000d68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011c4:	f00c f912 	bl	800d3ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80011c8:	e7fe      	b.n	80011c8 <main+0x54>
	...

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09c      	sub	sp, #112	; 0x70
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	224c      	movs	r2, #76	; 0x4c
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f00e fe70 	bl	800fec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00e fe6a 	bl	800fec0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011ec:	2002      	movs	r0, #2
 80011ee:	f005 f8d5 	bl	800639c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <SystemClock_Config+0xf8>)
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <SystemClock_Config+0xf8>)
 80011fc:	f023 0301 	bic.w	r3, r3, #1
 8001200:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <SystemClock_Config+0xf8>)
 8001204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <SystemClock_Config+0xfc>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001214:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <SystemClock_Config+0xfc>)
 8001216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <SystemClock_Config+0xfc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001228:	bf00      	nop
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <SystemClock_Config+0xfc>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001236:	d1f8      	bne.n	800122a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001238:	2303      	movs	r3, #3
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800123c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001242:	2309      	movs	r3, #9
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124a:	2302      	movs	r3, #2
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124e:	2302      	movs	r3, #2
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001252:	2304      	movs	r3, #4
 8001254:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001256:	2320      	movs	r3, #32
 8001258:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800125a:	2304      	movs	r3, #4
 800125c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125e:	2304      	movs	r3, #4
 8001260:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001262:	2302      	movs	r3, #2
 8001264:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001266:	2308      	movs	r3, #8
 8001268:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800126a:	2300      	movs	r3, #0
 800126c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	4618      	mov	r0, r3
 8001278:	f005 f8ca 	bl	8006410 <HAL_RCC_OscConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001282:	f000 f86b 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001286:	233f      	movs	r3, #63	; 0x3f
 8001288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128a:	2303      	movs	r3, #3
 800128c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2101      	movs	r1, #1
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 fd0a 	bl	8006cc4 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012b6:	f000 f851 	bl	800135c <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3770      	adds	r7, #112	; 0x70
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	58000400 	.word	0x58000400
 80012c8:	58024800 	.word	0x58024800

080012cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b0      	sub	sp, #192	; 0xc0
 80012d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	22c0      	movs	r2, #192	; 0xc0
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f00e fdf1 	bl	800fec0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80012ea:	2304      	movs	r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 80012ee:	2320      	movs	r3, #32
 80012f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80012f2:	2308      	movs	r3, #8
 80012f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80012f6:	2304      	movs	r3, #4
 80012f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4618      	mov	r0, r3
 8001314:	f006 f8a4 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800131e:	f000 f81d 	bl	800135c <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	37c0      	adds	r7, #192	; 0xc0
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800134a:	f000 ff55 	bl	80021f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40001000 	.word	0x40001000

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_RTC_Init+0xb4>)
 8001382:	4a27      	ldr	r2, [pc, #156]	; (8001420 <MX_RTC_Init+0xb8>)
 8001384:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <MX_RTC_Init+0xb4>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <MX_RTC_Init+0xb4>)
 800138e:	2263      	movs	r2, #99	; 0x63
 8001390:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <MX_RTC_Init+0xb4>)
 8001394:	f242 720f 	movw	r2, #9999	; 0x270f
 8001398:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_RTC_Init+0xb4>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_RTC_Init+0xb4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_RTC_Init+0xb4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_RTC_Init+0xb4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013b2:	481a      	ldr	r0, [pc, #104]	; (800141c <MX_RTC_Init+0xb4>)
 80013b4:	f008 fd52 	bl	8009e5c <HAL_RTC_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80013be:	f7ff ffcd 	bl	800135c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	480f      	ldr	r0, [pc, #60]	; (800141c <MX_RTC_Init+0xb4>)
 80013de:	f008 fdbf 	bl	8009f60 <HAL_RTC_SetTime>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80013e8:	f7ff ffb8 	bl	800135c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013ec:	2301      	movs	r3, #1
 80013ee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80013f0:	2301      	movs	r3, #1
 80013f2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_RTC_Init+0xb4>)
 8001404:	f008 fe4a 	bl	800a09c <HAL_RTC_SetDate>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800140e:	f7ff ffa5 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	240002f0 	.word	0x240002f0
 8001420:	58004000 	.word	0x58004000

08001424 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0b2      	sub	sp, #200	; 0xc8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	22c0      	movs	r2, #192	; 0xc0
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f00e fd43 	bl	800fec0 <memset>
  if(rtcHandle->Instance==RTC)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_RTC_MspInit+0x5c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d118      	bne.n	8001476 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001444:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_RTC_MspInit+0x60>)
 8001452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	4618      	mov	r0, r3
 800145c:	f006 f800 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8001466:	f7ff ff79 	bl	800135c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_RTC_MspInit+0x64>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146e:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_RTC_MspInit+0x64>)
 8001470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001474:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001476:	bf00      	nop
 8001478:	37c8      	adds	r7, #200	; 0xc8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	58004000 	.word	0x58004000
 8001484:	00019300 	.word	0x00019300
 8001488:	58024400 	.word	0x58024400

0800148c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MX_SPI1_Init+0xa8>)
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <MX_SPI1_Init+0xac>)
 8001494:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <MX_SPI1_Init+0xa8>)
 8001498:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800149c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014a8:	220f      	movs	r2, #15
 80014aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014c2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80014c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_SPI1_Init+0xa8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_SPI1_Init+0xa8>)
 8001502:	2200      	movs	r2, #0
 8001504:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_SPI1_Init+0xa8>)
 8001508:	2200      	movs	r2, #0
 800150a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_SPI1_Init+0xa8>)
 800150e:	2200      	movs	r2, #0
 8001510:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_SPI1_Init+0xa8>)
 8001514:	2200      	movs	r2, #0
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_SPI1_Init+0xa8>)
 800151a:	2200      	movs	r2, #0
 800151c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_SPI1_Init+0xa8>)
 8001520:	f008 fefa 	bl	800a318 <HAL_SPI_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800152a:	f7ff ff17 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	24000314 	.word	0x24000314
 8001538:	40013000 	.word	0x40013000

0800153c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001542:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <MX_SPI2_Init+0xac>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001548:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800154c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800154e:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001550:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001554:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001558:	220f      	movs	r2, #15
 800155a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <MX_SPI2_Init+0xa8>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <MX_SPI2_Init+0xa8>)
 800156a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800156e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001572:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001576:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_SPI2_Init+0xa8>)
 800157a:	2200      	movs	r2, #0
 800157c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001586:	2200      	movs	r2, #0
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_SPI2_Init+0xa8>)
 800158c:	2200      	movs	r2, #0
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_SPI2_Init+0xa8>)
 8001592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_SPI2_Init+0xa8>)
 800159a:	2200      	movs	r2, #0
 800159c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_SPI2_Init+0xa8>)
 80015d0:	f008 fea2 	bl	800a318 <HAL_SPI_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80015da:	f7ff febf 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2400039c 	.word	0x2400039c
 80015e8:	40003800 	.word	0x40003800

080015ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b0bc      	sub	sp, #240	; 0xf0
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	22c0      	movs	r2, #192	; 0xc0
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f00e fc57 	bl	800fec0 <memset>
  if(spiHandle->Instance==SPI1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <HAL_SPI_MspInit+0x15c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d145      	bne.n	80016a8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800161c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001628:	2300      	movs	r3, #0
 800162a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162c:	f107 0318 	add.w	r3, r7, #24
 8001630:	4618      	mov	r0, r3
 8001632:	f005 ff15 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800163c:	f7ff fe8e 	bl	800135c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001640:	4b42      	ldr	r3, [pc, #264]	; (800174c <HAL_SPI_MspInit+0x160>)
 8001642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001646:	4a41      	ldr	r2, [pc, #260]	; (800174c <HAL_SPI_MspInit+0x160>)
 8001648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800164c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001650:	4b3e      	ldr	r3, [pc, #248]	; (800174c <HAL_SPI_MspInit+0x160>)
 8001652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	4b3b      	ldr	r3, [pc, #236]	; (800174c <HAL_SPI_MspInit+0x160>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001664:	4a39      	ldr	r2, [pc, #228]	; (800174c <HAL_SPI_MspInit+0x160>)
 8001666:	f043 0302 	orr.w	r3, r3, #2
 800166a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_SPI_MspInit+0x160>)
 8001670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800167c:	2318      	movs	r3, #24
 800167e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001694:	2305      	movs	r3, #5
 8001696:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800169e:	4619      	mov	r1, r3
 80016a0:	482b      	ldr	r0, [pc, #172]	; (8001750 <HAL_SPI_MspInit+0x164>)
 80016a2:	f004 fb59 	bl	8005d58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016a6:	e04a      	b.n	800173e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a29      	ldr	r2, [pc, #164]	; (8001754 <HAL_SPI_MspInit+0x168>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d145      	bne.n	800173e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80016b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016be:	2300      	movs	r3, #0
 80016c0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 feca 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80016d2:	f7ff fe43 	bl	800135c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_SPI_MspInit+0x160>)
 80016d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_SPI_MspInit+0x160>)
 80016de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_SPI_MspInit+0x160>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_SPI_MspInit+0x160>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_SPI_MspInit+0x160>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_SPI_MspInit+0x160>)
 8001706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001712:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800172c:	2305      	movs	r3, #5
 800172e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_SPI_MspInit+0x164>)
 800173a:	f004 fb0d 	bl	8005d58 <HAL_GPIO_Init>
}
 800173e:	bf00      	nop
 8001740:	37f0      	adds	r7, #240	; 0xf0
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40013000 	.word	0x40013000
 800174c:	58024400 	.word	0x58024400
 8001750:	58020400 	.word	0x58020400
 8001754:	40003800 	.word	0x40003800

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_MspInit+0x38>)
 8001760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_MspInit+0x38>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_MspInit+0x38>)
 8001770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	210f      	movs	r1, #15
 8001780:	f06f 0001 	mvn.w	r0, #1
 8001784:	f001 fecc 	bl	8003520 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	58024400 	.word	0x58024400

08001794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b090      	sub	sp, #64	; 0x40
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	d827      	bhi.n	80017f2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80017a2:	2200      	movs	r2, #0
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	2036      	movs	r0, #54	; 0x36
 80017a8:	f001 feba 	bl	8003520 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ac:	2036      	movs	r0, #54	; 0x36
 80017ae:	f001 fed1 	bl	8003554 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80017b2:	4a29      	ldr	r2, [pc, #164]	; (8001858 <HAL_InitTick+0xc4>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_InitTick+0xc8>)
 80017ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017be:	4a27      	ldr	r2, [pc, #156]	; (800185c <HAL_InitTick+0xc8>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_InitTick+0xc8>)
 80017ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d6:	f107 0210 	add.w	r2, r7, #16
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f005 fdfb 	bl	80073dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d106      	bne.n	80017fe <HAL_InitTick+0x6a>
 80017f0:	e001      	b.n	80017f6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e02b      	b.n	800184e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017f6:	f005 fdc5 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
 80017fa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80017fc:	e004      	b.n	8001808 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017fe:	f005 fdc1 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
 8001802:	4603      	mov	r3, r0
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800180a:	4a15      	ldr	r2, [pc, #84]	; (8001860 <HAL_InitTick+0xcc>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	0c9b      	lsrs	r3, r3, #18
 8001812:	3b01      	subs	r3, #1
 8001814:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_InitTick+0xd0>)
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <HAL_InitTick+0xd4>)
 800181a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_InitTick+0xd0>)
 800181e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001822:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001824:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_InitTick+0xd0>)
 8001826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001828:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_InitTick+0xd0>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_InitTick+0xd0>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_InitTick+0xd0>)
 8001838:	f008 fead 	bl	800a596 <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d104      	bne.n	800184c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <HAL_InitTick+0xd0>)
 8001844:	f008 fefe 	bl	800a644 <HAL_TIM_Base_Start_IT>
 8001848:	4603      	mov	r3, r0
 800184a:	e000      	b.n	800184e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	3740      	adds	r7, #64	; 0x40
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24000008 	.word	0x24000008
 800185c:	58024400 	.word	0x58024400
 8001860:	431bde83 	.word	0x431bde83
 8001864:	24000424 	.word	0x24000424
 8001868:	40001000 	.word	0x40001000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA1_Stream0_IRQHandler+0x10>)
 800189e:	f003 f8f5 	bl	8004a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	240000f8 	.word	0x240000f8

080018ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <DMA1_Stream1_IRQHandler+0x10>)
 80018b2:	f003 f8eb 	bl	8004a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	24000170 	.word	0x24000170

080018c0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <DMA1_Stream2_IRQHandler+0x10>)
 80018c6:	f003 f8e1 	bl	8004a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	240005e8 	.word	0x240005e8

080018d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA1_Stream5_IRQHandler+0x10>)
 80018da:	f003 f8d7 	bl	8004a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	240001fc 	.word	0x240001fc

080018e8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM1_BRK_IRQHandler+0x10>)
 80018ee:	f008 ff82 	bl	800a7f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	24000470 	.word	0x24000470

080018fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <TIM1_UP_IRQHandler+0x10>)
 8001902:	f008 ff78 	bl	800a7f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	24000470 	.word	0x24000470

08001910 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001916:	f008 ff6e 	bl	800a7f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24000470 	.word	0x24000470

08001924 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <TIM1_CC_IRQHandler+0x10>)
 800192a:	f008 ff64 	bl	800a7f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	24000470 	.word	0x24000470

08001938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <TIM2_IRQHandler+0x10>)
 800193e:	f008 ff5a 	bl	800a7f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	240004bc 	.word	0x240004bc

0800194c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM3_IRQHandler+0x10>)
 8001952:	f008 ff50 	bl	800a7f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	24000508 	.word	0x24000508

08001960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <USART1_IRQHandler+0x10>)
 8001966:	f00a f815 	bl	800b994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	24000554 	.word	0x24000554

08001974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <TIM6_DAC_IRQHandler+0x20>)
 800197a:	791b      	ldrb	r3, [r3, #4]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <TIM6_DAC_IRQHandler+0x20>)
 8001984:	f001 fe16 	bl	80035b4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <TIM6_DAC_IRQHandler+0x24>)
 800198a:	f008 ff34 	bl	800a7f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	240001e8 	.word	0x240001e8
 8001998:	24000424 	.word	0x24000424

0800199c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80019a0:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <SystemInit+0xe4>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a36      	ldr	r2, [pc, #216]	; (8001a80 <SystemInit+0xe4>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <SystemInit+0xe8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	2b06      	cmp	r3, #6
 80019ba:	d807      	bhi.n	80019cc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <SystemInit+0xe8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 030f 	bic.w	r3, r3, #15
 80019c4:	4a2f      	ldr	r2, [pc, #188]	; (8001a84 <SystemInit+0xe8>)
 80019c6:	f043 0307 	orr.w	r3, r3, #7
 80019ca:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <SystemInit+0xec>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <SystemInit+0xec>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <SystemInit+0xec>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <SystemInit+0xec>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4929      	ldr	r1, [pc, #164]	; (8001a88 <SystemInit+0xec>)
 80019e4:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <SystemInit+0xf0>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <SystemInit+0xe8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <SystemInit+0xe8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 030f 	bic.w	r3, r3, #15
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <SystemInit+0xe8>)
 8001a00:	f043 0307 	orr.w	r3, r3, #7
 8001a04:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <SystemInit+0xec>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <SystemInit+0xec>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <SystemInit+0xec>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <SystemInit+0xec>)
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <SystemInit+0xf4>)
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <SystemInit+0xec>)
 8001a20:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <SystemInit+0xf8>)
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <SystemInit+0xec>)
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <SystemInit+0xfc>)
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <SystemInit+0xec>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <SystemInit+0xec>)
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <SystemInit+0xfc>)
 8001a34:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <SystemInit+0xec>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <SystemInit+0xec>)
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <SystemInit+0xfc>)
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <SystemInit+0xec>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <SystemInit+0xec>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <SystemInit+0xec>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <SystemInit+0xec>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <SystemInit+0x100>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <SystemInit+0x104>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a66:	d202      	bcs.n	8001a6e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <SystemInit+0x108>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <SystemInit+0x10c>)
 8001a70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00
 8001a84:	52002000 	.word	0x52002000
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a90:	02020200 	.word	0x02020200
 8001a94:	01ff0000 	.word	0x01ff0000
 8001a98:	01010280 	.word	0x01010280
 8001a9c:	5c001000 	.word	0x5c001000
 8001aa0:	ffff0000 	.word	0xffff0000
 8001aa4:	51008108 	.word	0x51008108
 8001aa8:	52004000 	.word	0x52004000

08001aac <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09a      	sub	sp, #104	; 0x68
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
 8001adc:	615a      	str	r2, [r3, #20]
 8001ade:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	222c      	movs	r2, #44	; 0x2c
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00e f9ea 	bl	800fec0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aec:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001aee:	4a45      	ldr	r2, [pc, #276]	; (8001c04 <MX_TIM1_Init+0x158>)
 8001af0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001af4:	2231      	movs	r2, #49	; 0x31
 8001af6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b00:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001b04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b0c:	4b3c      	ldr	r3, [pc, #240]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b18:	4839      	ldr	r0, [pc, #228]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b1a:	f008 fd3c 	bl	800a596 <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001b24:	f7ff fc1a 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b32:	4619      	mov	r1, r3
 8001b34:	4832      	ldr	r0, [pc, #200]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b36:	f009 f879 	bl	800ac2c <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b40:	f7ff fc0c 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b44:	482e      	ldr	r0, [pc, #184]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b46:	f008 fdf5 	bl	800a734 <HAL_TIM_PWM_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001b50:	f7ff fc04 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b64:	4619      	mov	r1, r3
 8001b66:	4826      	ldr	r0, [pc, #152]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b68:	f009 fd9a 	bl	800b6a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001b72:	f7ff fbf3 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b76:	2360      	movs	r3, #96	; 0x60
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001b7a:	f240 13df 	movw	r3, #479	; 0x1df
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4818      	ldr	r0, [pc, #96]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001b9e:	f008 ff31 	bl	800aa04 <HAL_TIM_PWM_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ba8:	f7ff fbd8 	bl	800135c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001be2:	f009 fdeb 	bl	800b7bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001bec:	f7ff fbb6 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM1_Init+0x154>)
 8001bf2:	f000 f949 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 8001bf6:	bf00      	nop
 8001bf8:	3768      	adds	r7, #104	; 0x68
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	24000470 	.word	0x24000470
 8001c04:	40010000 	.word	0x40010000

08001c08 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08e      	sub	sp, #56	; 0x38
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c28:	463b      	mov	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c44:	2231      	movs	r2, #49	; 0x31
 8001c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c50:	f640 4234 	movw	r2, #3124	; 0xc34
 8001c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c5c:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c64:	f008 fc97 	bl	800a596 <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c6e:	f7ff fb75 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481c      	ldr	r0, [pc, #112]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c80:	f008 ffd4 	bl	800ac2c <HAL_TIM_ConfigClockSource>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c8a:	f7ff fb67 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c8e:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001c90:	f008 fd50 	bl	800a734 <HAL_TIM_PWM_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c9a:	f7ff fb5f 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4810      	ldr	r0, [pc, #64]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001cae:	f009 fcf7 	bl	800b6a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001cb8:	f7ff fb50 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbc:	2360      	movs	r3, #96	; 0x60
 8001cbe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001cd4:	f008 fe96 	bl	800aa04 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cde:	f7ff fb3d 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <MX_TIM2_Init+0xe8>)
 8001ce4:	f000 f8d0 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 8001ce8:	bf00      	nop
 8001cea:	3738      	adds	r7, #56	; 0x38
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	240004bc 	.word	0x240004bc

08001cf4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <MX_TIM3_Init+0x98>)
 8001d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d1a:	2263      	movs	r2, #99	; 0x63
 8001d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d26:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d38:	4813      	ldr	r0, [pc, #76]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d3a:	f008 fc2c 	bl	800a596 <HAL_TIM_Base_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d44:	f7ff fb0a 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d4e:	f107 0310 	add.w	r3, r7, #16
 8001d52:	4619      	mov	r1, r3
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d56:	f008 ff69 	bl	800ac2c <HAL_TIM_ConfigClockSource>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d60:	f7ff fafc 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_TIM3_Init+0x94>)
 8001d72:	f009 fc95 	bl	800b6a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d7c:	f7ff faee 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	24000508 	.word	0x24000508
 8001d8c:	40000400 	.word	0x40000400

08001d90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a37      	ldr	r2, [pc, #220]	; (8001e7c <HAL_TIM_Base_MspInit+0xec>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d12f      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da8:	4a35      	ldr	r2, [pc, #212]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001db2:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2105      	movs	r1, #5
 8001dc4:	2018      	movs	r0, #24
 8001dc6:	f001 fbab 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001dca:	2018      	movs	r0, #24
 8001dcc:	f001 fbc2 	bl	8003554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2105      	movs	r1, #5
 8001dd4:	2019      	movs	r0, #25
 8001dd6:	f001 fba3 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001dda:	2019      	movs	r0, #25
 8001ddc:	f001 fbba 	bl	8003554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2105      	movs	r1, #5
 8001de4:	201a      	movs	r0, #26
 8001de6:	f001 fb9b 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001dea:	201a      	movs	r0, #26
 8001dec:	f001 fbb2 	bl	8003554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2105      	movs	r1, #5
 8001df4:	201b      	movs	r0, #27
 8001df6:	f001 fb93 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001dfa:	201b      	movs	r0, #27
 8001dfc:	f001 fbaa 	bl	8003554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e00:	e038      	b.n	8001e74 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d117      	bne.n	8001e3c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e12:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001e1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	201c      	movs	r0, #28
 8001e30:	f001 fb76 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e34:	201c      	movs	r0, #28
 8001e36:	f001 fb8d 	bl	8003554 <HAL_NVIC_EnableIRQ>
}
 8001e3a:	e01b      	b.n	8001e74 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_TIM_Base_MspInit+0xf4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d116      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_TIM_Base_MspInit+0xf0>)
 8001e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2105      	movs	r1, #5
 8001e68:	201d      	movs	r0, #29
 8001e6a:	f001 fb59 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e6e:	201d      	movs	r0, #29
 8001e70:	f001 fb70 	bl	8003554 <HAL_NVIC_EnableIRQ>
}
 8001e74:	bf00      	nop
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	58024400 	.word	0x58024400
 8001e84:	40000400 	.word	0x40000400

08001e88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <HAL_TIM_MspPostInit+0xb8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d120      	bne.n	8001eec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_TIM_MspPostInit+0xbc>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_TIM_MspPostInit+0xbc>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_TIM_MspPostInit+0xbc>)
 8001ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4818      	ldr	r0, [pc, #96]	; (8001f48 <HAL_TIM_MspPostInit+0xc0>)
 8001ee6:	f003 ff37 	bl	8005d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001eea:	e024      	b.n	8001f36 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef4:	d11f      	bne.n	8001f36 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_TIM_MspPostInit+0xbc>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efc:	4a11      	ldr	r2, [pc, #68]	; (8001f44 <HAL_TIM_MspPostInit+0xbc>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_TIM_MspPostInit+0xbc>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f26:	2301      	movs	r3, #1
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4806      	ldr	r0, [pc, #24]	; (8001f4c <HAL_TIM_MspPostInit+0xc4>)
 8001f32:	f003 ff11 	bl	8005d58 <HAL_GPIO_Init>
}
 8001f36:	bf00      	nop
 8001f38:	3728      	adds	r7, #40	; 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40010000 	.word	0x40010000
 8001f44:	58024400 	.word	0x58024400
 8001f48:	58020000 	.word	0x58020000
 8001f4c:	58020400 	.word	0x58020400

08001f50 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <MX_USART1_UART_Init+0x94>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f5c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f98:	4811      	ldr	r0, [pc, #68]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f9a:	f009 fcab 	bl	800b8f4 <HAL_UART_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fa4:	f7ff f9da 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001fac:	f00b f8ec 	bl	800d188 <HAL_UARTEx_SetTxFifoThreshold>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001fb6:	f7ff f9d1 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001fbe:	f00b f921 	bl	800d204 <HAL_UARTEx_SetRxFifoThreshold>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001fc8:	f7ff f9c8 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001fce:	f00b f8a2 	bl	800d116 <HAL_UARTEx_DisableFifoMode>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001fd8:	f7ff f9c0 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	24000554 	.word	0x24000554
 8001fe4:	40011000 	.word	0x40011000

08001fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0ba      	sub	sp, #232	; 0xe8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	22c0      	movs	r2, #192	; 0xc0
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f00d ff59 	bl	800fec0 <memset>
  if(uartHandle->Instance==USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a41      	ldr	r2, [pc, #260]	; (8002118 <HAL_UART_MspInit+0x130>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d17b      	bne.n	8002110 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002018:	f04f 0201 	mov.w	r2, #1
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8002024:	2318      	movs	r3, #24
 8002026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4618      	mov	r0, r3
 8002030:	f005 fa16 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800203a:	f7ff f98f 	bl	800135c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800203e:	4b37      	ldr	r3, [pc, #220]	; (800211c <HAL_UART_MspInit+0x134>)
 8002040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002044:	4a35      	ldr	r2, [pc, #212]	; (800211c <HAL_UART_MspInit+0x134>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <HAL_UART_MspInit+0x134>)
 8002050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_UART_MspInit+0x134>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	4a2e      	ldr	r2, [pc, #184]	; (800211c <HAL_UART_MspInit+0x134>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800206c:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_UART_MspInit+0x134>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800207a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800207e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002094:	2307      	movs	r3, #7
 8002096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800209e:	4619      	mov	r1, r3
 80020a0:	481f      	ldr	r0, [pc, #124]	; (8002120 <HAL_UART_MspInit+0x138>)
 80020a2:	f003 fe59 	bl	8005d58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020a8:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_UART_MspInit+0x140>)
 80020aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020ae:	222a      	movs	r2, #42	; 0x2a
 80020b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020b4:	2240      	movs	r2, #64	; 0x40
 80020b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020e4:	480f      	ldr	r0, [pc, #60]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020e6:	f001 fc11 	bl	800390c <HAL_DMA_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80020f0:	f7ff f934 	bl	800135c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_UART_MspInit+0x13c>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2105      	movs	r1, #5
 8002104:	2025      	movs	r0, #37	; 0x25
 8002106:	f001 fa0b 	bl	8003520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800210a:	2025      	movs	r0, #37	; 0x25
 800210c:	f001 fa22 	bl	8003554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002110:	bf00      	nop
 8002112:	37e8      	adds	r7, #232	; 0xe8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40011000 	.word	0x40011000
 800211c:	58024400 	.word	0x58024400
 8002120:	58020000 	.word	0x58020000
 8002124:	240005e8 	.word	0x240005e8
 8002128:	40020040 	.word	0x40020040

0800212c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800212c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002164 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002130:	f7ff fc34 	bl	800199c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002134:	480c      	ldr	r0, [pc, #48]	; (8002168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215a:	f00d fe7f 	bl	800fe5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215e:	f7ff f809 	bl	8001174 <main>
  bx  lr
 8002162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002164:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002168:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800216c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002170:	08010140 	.word	0x08010140
  ldr r2, =_sbss
 8002174:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8002178:	24004fb4 	.word	0x24004fb4

0800217c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC3_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002186:	2003      	movs	r0, #3
 8002188:	f001 f9bf 	bl	800350a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800218c:	f004 ff50 	bl	8007030 <HAL_RCC_GetSysClockFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_Init+0x68>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	4913      	ldr	r1, [pc, #76]	; (80021ec <HAL_Init+0x6c>)
 800219e:	5ccb      	ldrb	r3, [r1, r3]
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
 80021a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_Init+0x68>)
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_Init+0x6c>)
 80021b4:	5cd3      	ldrb	r3, [r2, r3]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_Init+0x70>)
 80021c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021c4:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_Init+0x74>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ca:	2005      	movs	r0, #5
 80021cc:	f7ff fae2 	bl	8001794 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e002      	b.n	80021e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021da:	f7ff fabd 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	58024400 	.word	0x58024400
 80021ec:	080100f0 	.word	0x080100f0
 80021f0:	24000004 	.word	0x24000004
 80021f4:	24000000 	.word	0x24000000

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	2400000c 	.word	0x2400000c
 800221c:	24000660 	.word	0x24000660

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	24000660 	.word	0x24000660

08002238 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <HAL_GetREVID+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0c1b      	lsrs	r3, r3, #16
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	5c001000 	.word	0x5c001000

08002250 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	43db      	mvns	r3, r3
 8002262:	401a      	ands	r2, r3
 8002264:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	58000400 	.word	0x58000400

0800227c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	609a      	str	r2, [r3, #8]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3360      	adds	r3, #96	; 0x60
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002318:	bf00      	nop
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	431a      	orrs	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	611a      	str	r2, [r3, #16]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002356:	b480      	push	{r7}
 8002358:	b087      	sub	sp, #28
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3360      	adds	r3, #96	; 0x60
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	431a      	orrs	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	601a      	str	r2, [r3, #0]
  }
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3330      	adds	r3, #48	; 0x30
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	4413      	add	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	211f      	movs	r1, #31
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0e9b      	lsrs	r3, r3, #26
 80023c4:	f003 011f 	and.w	r1, r3, #31
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	431a      	orrs	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3314      	adds	r3, #20
 80023f4:	461a      	mov	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	0e5b      	lsrs	r3, r3, #25
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	0d1b      	lsrs	r3, r3, #20
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2107      	movs	r1, #7
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	0d1b      	lsrs	r3, r3, #20
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	431a      	orrs	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800242e:	bf00      	nop
 8002430:	371c      	adds	r7, #28
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002454:	43db      	mvns	r3, r3
 8002456:	401a      	ands	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0318 	and.w	r3, r3, #24
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002460:	40d9      	lsrs	r1, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	400b      	ands	r3, r1
 8002466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800246a:	431a      	orrs	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	000fffff 	.word	0x000fffff

08002484 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6093      	str	r3, [r2, #8]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	5fffffc0 	.word	0x5fffffc0

080024a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80024de:	4013      	ands	r3, r2
 80024e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	6fffffc0 	.word	0x6fffffc0

080024f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800250c:	d101      	bne.n	8002512 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <LL_ADC_IsEnabled+0x18>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <LL_ADC_IsEnabled+0x1a>
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	d101      	bne.n	800255e <LL_ADC_REG_IsConversionOngoing+0x18>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b08      	cmp	r3, #8
 800257e:	d101      	bne.n	8002584 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e18f      	b.n	80028ce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe f9c5 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff67 	bl	80024a8 <LL_ADC_IsDeepPowerDownEnabled>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff4d 	bl	8002484 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff82 	bl	80024f8 <LL_ADC_IsInternalRegulatorEnabled>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d114      	bne.n	8002624 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff66 	bl	80024d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002604:	4b87      	ldr	r3, [pc, #540]	; (8002824 <HAL_ADC_Init+0x290>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	4a87      	ldr	r2, [pc, #540]	; (8002828 <HAL_ADC_Init+0x294>)
 800260c:	fba2 2303 	umull	r2, r3, r2, r3
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	3301      	adds	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002616:	e002      	b.n	800261e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3b01      	subs	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f9      	bne.n	8002618 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff65 	bl	80024f8 <LL_ADC_IsInternalRegulatorEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f043 0210 	orr.w	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff76 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 800265a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	f040 8129 	bne.w	80028bc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 8125 	bne.w	80028bc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800267a:	f043 0202 	orr.w	r2, r3, #2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff4a 	bl	8002520 <LL_ADC_IsEnabled>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d136      	bne.n	8002700 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_ADC_Init+0x298>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d004      	beq.n	80026a6 <HAL_ADC_Init+0x112>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a63      	ldr	r2, [pc, #396]	; (8002830 <HAL_ADC_Init+0x29c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d10e      	bne.n	80026c4 <HAL_ADC_Init+0x130>
 80026a6:	4861      	ldr	r0, [pc, #388]	; (800282c <HAL_ADC_Init+0x298>)
 80026a8:	f7ff ff3a 	bl	8002520 <LL_ADC_IsEnabled>
 80026ac:	4604      	mov	r4, r0
 80026ae:	4860      	ldr	r0, [pc, #384]	; (8002830 <HAL_ADC_Init+0x29c>)
 80026b0:	f7ff ff36 	bl	8002520 <LL_ADC_IsEnabled>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4323      	orrs	r3, r4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e008      	b.n	80026d6 <HAL_ADC_Init+0x142>
 80026c4:	485b      	ldr	r0, [pc, #364]	; (8002834 <HAL_ADC_Init+0x2a0>)
 80026c6:	f7ff ff2b 	bl	8002520 <LL_ADC_IsEnabled>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d012      	beq.n	8002700 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a53      	ldr	r2, [pc, #332]	; (800282c <HAL_ADC_Init+0x298>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d004      	beq.n	80026ee <HAL_ADC_Init+0x15a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_ADC_Init+0x29c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_Init+0x15e>
 80026ee:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_ADC_Init+0x2a4>)
 80026f0:	e000      	b.n	80026f4 <HAL_ADC_Init+0x160>
 80026f2:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_ADC_Init+0x2a8>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f7ff fdbe 	bl	800227c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002700:	f7ff fd9a 	bl	8002238 <HAL_GetREVID>
 8002704:	4603      	mov	r3, r0
 8002706:	f241 0203 	movw	r2, #4099	; 0x1003
 800270a:	4293      	cmp	r3, r2
 800270c:	d914      	bls.n	8002738 <HAL_ADC_Init+0x1a4>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b10      	cmp	r3, #16
 8002714:	d110      	bne.n	8002738 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7d5b      	ldrb	r3, [r3, #21]
 800271a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002720:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002726:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7f1b      	ldrb	r3, [r3, #28]
 800272c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800272e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002730:	f043 030c 	orr.w	r3, r3, #12
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	e00d      	b.n	8002754 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7d5b      	ldrb	r3, [r3, #21]
 800273c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002742:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002748:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7f1b      	ldrb	r3, [r3, #28]
 800274e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7f1b      	ldrb	r3, [r3, #28]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	3b01      	subs	r3, #1
 8002762:	045b      	lsls	r3, r3, #17
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <HAL_ADC_Init+0x2ac>)
 800278e:	4013      	ands	r3, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	430b      	orrs	r3, r1
 8002798:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fed1 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 80027a4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fede 	bl	800256c <LL_ADC_INJ_IsConversionOngoing>
 80027b0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d15f      	bne.n	8002878 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d15c      	bne.n	8002878 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7d1b      	ldrb	r3, [r3, #20]
 80027c2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_ADC_Init+0x2b0>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	430b      	orrs	r3, r1
 80027de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d130      	bne.n	800284c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_ADC_Init+0x2b4>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027fe:	3a01      	subs	r2, #1
 8002800:	0411      	lsls	r1, r2, #16
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002812:	430a      	orrs	r2, r1
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	611a      	str	r2, [r3, #16]
 8002820:	e01c      	b.n	800285c <HAL_ADC_Init+0x2c8>
 8002822:	bf00      	nop
 8002824:	24000000 	.word	0x24000000
 8002828:	053e2d63 	.word	0x053e2d63
 800282c:	40022000 	.word	0x40022000
 8002830:	40022100 	.word	0x40022100
 8002834:	58026000 	.word	0x58026000
 8002838:	40022300 	.word	0x40022300
 800283c:	58026300 	.word	0x58026300
 8002840:	fff0c003 	.word	0xfff0c003
 8002844:	ffffbffc 	.word	0xffffbffc
 8002848:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fb8c 	bl	8002f90 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10c      	bne.n	800289a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f023 010f 	bic.w	r1, r3, #15
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	1e5a      	subs	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
 8002898:	e007      	b.n	80028aa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 020f 	bic.w	r2, r2, #15
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
 80028ba:	e007      	b.n	80028cc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0210 	orr.w	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd90      	pop	{r4, r7, pc}
 80028d6:	bf00      	nop

080028d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b0a1      	sub	sp, #132	; 0x84
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_ADC_ConfigChannel+0x1b0>)
 80028f2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x2a>
 80028fe:	2302      	movs	r3, #2
 8002900:	e32e      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x688>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fe19 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 8313 	bne.w	8002f42 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db2c      	blt.n	800297e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800292c:	2b00      	cmp	r3, #0
 800292e:	d108      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x6a>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2201      	movs	r2, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	e016      	b.n	8002970 <HAL_ADC_ConfigChannel+0x98>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002952:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002954:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e003      	b.n	8002966 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800295e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2201      	movs	r2, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	69d1      	ldr	r1, [r2, #28]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	430b      	orrs	r3, r1
 800297c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	f7ff fcfe 	bl	800238c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fdd6 	bl	8002546 <LL_ADC_REG_IsConversionOngoing>
 800299a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fde3 	bl	800256c <LL_ADC_INJ_IsConversionOngoing>
 80029a6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80b8 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 80b4 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	461a      	mov	r2, r3
 80029c6:	f7ff fd0d 	bl	80023e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_ADC_ConfigChannel+0x1b4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80029d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d6:	d10b      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x118>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	e01d      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x154>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x13e>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	e00a      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x154>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	089b      	lsrs	r3, r3, #2
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d02c      	beq.n	8002a90 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6919      	ldr	r1, [r3, #16]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a44:	f7ff fc4e 	bl	80022e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6919      	ldr	r1, [r3, #16]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	7e5b      	ldrb	r3, [r3, #25]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d102      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x186>
 8002a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x188>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	461a      	mov	r2, r3
 8002a62:	f7ff fc78 	bl	8002356 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6919      	ldr	r1, [r3, #16]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	7e1b      	ldrb	r3, [r3, #24]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d102      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1a4>
 8002a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a7a:	e000      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1a6>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f7ff fc50 	bl	8002324 <LL_ADC_SetDataRightShift>
 8002a84:	e04c      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x248>
 8002a86:	bf00      	nop
 8002a88:	47ff0000 	.word	0x47ff0000
 8002a8c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	069b      	lsls	r3, r3, #26
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d107      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ab2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	069b      	lsls	r3, r3, #26
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ad6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ade:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	069b      	lsls	r3, r3, #26
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002afa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	069b      	lsls	r3, r3, #26
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d107      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b1e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fcfb 	bl	8002520 <LL_ADC_IsEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 8211 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f7ff fc7c 	bl	800243c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4aa1      	ldr	r2, [pc, #644]	; (8002dd0 <HAL_ADC_ConfigChannel+0x4f8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	f040 812e 	bne.w	8002dac <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x2a0>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	3301      	adds	r3, #1
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	e019      	b.n	8002bac <HAL_ADC_ConfigChannel+0x2d4>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e003      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	2b09      	cmp	r3, #9
 8002ba4:	bf94      	ite	ls
 8002ba6:	2301      	movls	r3, #1
 8002ba8:	2300      	movhi	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d079      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x2f4>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	069b      	lsls	r3, r3, #26
 8002bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bca:	e015      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x320>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bdc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e003      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	069b      	lsls	r3, r3, #26
 8002bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x340>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	e017      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x370>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	ea42 0103 	orr.w	r1, r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x396>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	051b      	lsls	r3, r3, #20
 8002c6c:	e018      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x3c8>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e003      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	e07e      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x3e8>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	069b      	lsls	r3, r3, #26
 8002cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cbe:	e015      	b.n	8002cec <HAL_ADC_ConfigChannel+0x414>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002cd8:	2320      	movs	r3, #32
 8002cda:	e003      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	069b      	lsls	r3, r3, #26
 8002ce8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x434>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	e017      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x464>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	61bb      	str	r3, [r7, #24]
  return result;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e003      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10d      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x490>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	3301      	adds	r3, #1
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b1e      	subs	r3, #30
 8002d60:	051b      	lsls	r3, r3, #20
 8002d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d66:	e01b      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x4c8>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	60fb      	str	r3, [r7, #12]
  return result;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e003      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f003 021f 	and.w	r2, r3, #31
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	3b1e      	subs	r3, #30
 8002d9a:	051b      	lsls	r3, r3, #20
 8002d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002da0:	430b      	orrs	r3, r1
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	6892      	ldr	r2, [r2, #8]
 8002da6:	4619      	mov	r1, r3
 8002da8:	f7ff fb1c 	bl	80023e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f280 80cf 	bge.w	8002f54 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a06      	ldr	r2, [pc, #24]	; (8002dd4 <HAL_ADC_ConfigChannel+0x4fc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_ConfigChannel+0x4f2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_ADC_ConfigChannel+0x500>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10a      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x508>
 8002dca:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <HAL_ADC_ConfigChannel+0x504>)
 8002dcc:	e009      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x50a>
 8002dce:	bf00      	nop
 8002dd0:	47ff0000 	.word	0x47ff0000
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40022100 	.word	0x40022100
 8002ddc:	40022300 	.word	0x40022300
 8002de0:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <HAL_ADC_ConfigChannel+0x690>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fa70 	bl	80022c8 <LL_ADC_GetCommonPathInternalCh>
 8002de8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a5f      	ldr	r2, [pc, #380]	; (8002f6c <HAL_ADC_ConfigChannel+0x694>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d004      	beq.n	8002dfe <HAL_ADC_ConfigChannel+0x526>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a5d      	ldr	r2, [pc, #372]	; (8002f70 <HAL_ADC_ConfigChannel+0x698>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10e      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x544>
 8002dfe:	485b      	ldr	r0, [pc, #364]	; (8002f6c <HAL_ADC_ConfigChannel+0x694>)
 8002e00:	f7ff fb8e 	bl	8002520 <LL_ADC_IsEnabled>
 8002e04:	4604      	mov	r4, r0
 8002e06:	485a      	ldr	r0, [pc, #360]	; (8002f70 <HAL_ADC_ConfigChannel+0x698>)
 8002e08:	f7ff fb8a 	bl	8002520 <LL_ADC_IsEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4323      	orrs	r3, r4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e008      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x556>
 8002e1c:	4855      	ldr	r0, [pc, #340]	; (8002f74 <HAL_ADC_ConfigChannel+0x69c>)
 8002e1e:	f7ff fb7f 	bl	8002520 <LL_ADC_IsEnabled>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d07d      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <HAL_ADC_ConfigChannel+0x6a0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d130      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x5c6>
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d12b      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a4a      	ldr	r2, [pc, #296]	; (8002f74 <HAL_ADC_ConfigChannel+0x69c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	f040 8081 	bne.w	8002f54 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a45      	ldr	r2, [pc, #276]	; (8002f6c <HAL_ADC_ConfigChannel+0x694>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_ConfigChannel+0x58e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a43      	ldr	r2, [pc, #268]	; (8002f70 <HAL_ADC_ConfigChannel+0x698>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x592>
 8002e66:	4a45      	ldr	r2, [pc, #276]	; (8002f7c <HAL_ADC_ConfigChannel+0x6a4>)
 8002e68:	e000      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x594>
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_ADC_ConfigChannel+0x690>)
 8002e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7ff fa14 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_ADC_ConfigChannel+0x6a8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	4a40      	ldr	r2, [pc, #256]	; (8002f84 <HAL_ADC_ConfigChannel+0x6ac>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	3301      	adds	r3, #1
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e8e:	e002      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f9      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e9c:	e05a      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a39      	ldr	r2, [pc, #228]	; (8002f88 <HAL_ADC_ConfigChannel+0x6b0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d11e      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x60e>
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d119      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_ADC_ConfigChannel+0x69c>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d14b      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <HAL_ADC_ConfigChannel+0x694>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x5f8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a29      	ldr	r2, [pc, #164]	; (8002f70 <HAL_ADC_ConfigChannel+0x698>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x5fc>
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_ADC_ConfigChannel+0x6a4>)
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x5fe>
 8002ed4:	4a24      	ldr	r2, [pc, #144]	; (8002f68 <HAL_ADC_ConfigChannel+0x690>)
 8002ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f7ff f9df 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ee4:	e036      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <HAL_ADC_ConfigChannel+0x6b4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d131      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x67c>
 8002ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d12c      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_ADC_ConfigChannel+0x69c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d127      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <HAL_ADC_ConfigChannel+0x694>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_ADC_ConfigChannel+0x640>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <HAL_ADC_ConfigChannel+0x698>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x644>
 8002f18:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_ADC_ConfigChannel+0x6a4>)
 8002f1a:	e000      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x646>
 8002f1c:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <HAL_ADC_ConfigChannel+0x690>)
 8002f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f7ff f9bb 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
 8002f2c:	e012      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f40:	e008      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3784      	adds	r7, #132	; 0x84
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	58026300 	.word	0x58026300
 8002f6c:	40022000 	.word	0x40022000
 8002f70:	40022100 	.word	0x40022100
 8002f74:	58026000 	.word	0x58026000
 8002f78:	cb840000 	.word	0xcb840000
 8002f7c:	40022300 	.word	0x40022300
 8002f80:	24000000 	.word	0x24000000
 8002f84:	053e2d63 	.word	0x053e2d63
 8002f88:	c7520000 	.word	0xc7520000
 8002f8c:	cfb80000 	.word	0xcfb80000

08002f90 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a7a      	ldr	r2, [pc, #488]	; (8003188 <ADC_ConfigureBoostMode+0x1f8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <ADC_ConfigureBoostMode+0x1c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a79      	ldr	r2, [pc, #484]	; (800318c <ADC_ConfigureBoostMode+0x1fc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d109      	bne.n	8002fc0 <ADC_ConfigureBoostMode+0x30>
 8002fac:	4b78      	ldr	r3, [pc, #480]	; (8003190 <ADC_ConfigureBoostMode+0x200>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf14      	ite	ne
 8002fb8:	2301      	movne	r3, #1
 8002fba:	2300      	moveq	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e008      	b.n	8002fd2 <ADC_ConfigureBoostMode+0x42>
 8002fc0:	4b74      	ldr	r3, [pc, #464]	; (8003194 <ADC_ConfigureBoostMode+0x204>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01c      	beq.n	8003010 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002fd6:	f004 f9a5 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 8002fda:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fe4:	d010      	beq.n	8003008 <ADC_ConfigureBoostMode+0x78>
 8002fe6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fea:	d873      	bhi.n	80030d4 <ADC_ConfigureBoostMode+0x144>
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d002      	beq.n	8002ff8 <ADC_ConfigureBoostMode+0x68>
 8002ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff6:	d16d      	bne.n	80030d4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	60fb      	str	r3, [r7, #12]
        break;
 8003006:	e068      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	60fb      	str	r3, [r7, #12]
        break;
 800300e:	e064      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003010:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	f005 fc2c 	bl	8008874 <HAL_RCCEx_GetPeriphCLKFreq>
 800301c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003026:	d051      	beq.n	80030cc <ADC_ConfigureBoostMode+0x13c>
 8003028:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800302c:	d854      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 800302e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003032:	d047      	beq.n	80030c4 <ADC_ConfigureBoostMode+0x134>
 8003034:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003038:	d84e      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 800303a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800303e:	d03d      	beq.n	80030bc <ADC_ConfigureBoostMode+0x12c>
 8003040:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003044:	d848      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 8003046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800304a:	d033      	beq.n	80030b4 <ADC_ConfigureBoostMode+0x124>
 800304c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003050:	d842      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 8003052:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003056:	d029      	beq.n	80030ac <ADC_ConfigureBoostMode+0x11c>
 8003058:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800305c:	d83c      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 800305e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003062:	d01a      	beq.n	800309a <ADC_ConfigureBoostMode+0x10a>
 8003064:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003068:	d836      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 800306a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800306e:	d014      	beq.n	800309a <ADC_ConfigureBoostMode+0x10a>
 8003070:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003074:	d830      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 8003076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307a:	d00e      	beq.n	800309a <ADC_ConfigureBoostMode+0x10a>
 800307c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003080:	d82a      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 8003082:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003086:	d008      	beq.n	800309a <ADC_ConfigureBoostMode+0x10a>
 8003088:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800308c:	d824      	bhi.n	80030d8 <ADC_ConfigureBoostMode+0x148>
 800308e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003092:	d002      	beq.n	800309a <ADC_ConfigureBoostMode+0x10a>
 8003094:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003098:	d11e      	bne.n	80030d8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a8:	60fb      	str	r3, [r7, #12]
        break;
 80030aa:	e016      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
        break;
 80030b2:	e012      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	60fb      	str	r3, [r7, #12]
        break;
 80030ba:	e00e      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	60fb      	str	r3, [r7, #12]
        break;
 80030c2:	e00a      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	09db      	lsrs	r3, r3, #7
 80030c8:	60fb      	str	r3, [r7, #12]
        break;
 80030ca:	e006      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	60fb      	str	r3, [r7, #12]
        break;
 80030d2:	e002      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
        break;
 80030d4:	bf00      	nop
 80030d6:	e000      	b.n	80030da <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80030d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80030da:	f7ff f8ad 	bl	8002238 <HAL_GetREVID>
 80030de:	4603      	mov	r3, r0
 80030e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d815      	bhi.n	8003114 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <ADC_ConfigureBoostMode+0x208>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d908      	bls.n	8003102 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003100:	e03e      	b.n	8003180 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	609a      	str	r2, [r3, #8]
}
 8003112:	e035      	b.n	8003180 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a1f      	ldr	r2, [pc, #124]	; (800319c <ADC_ConfigureBoostMode+0x20c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d808      	bhi.n	8003134 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003130:	609a      	str	r2, [r3, #8]
}
 8003132:	e025      	b.n	8003180 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <ADC_ConfigureBoostMode+0x210>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d80a      	bhi.n	8003152 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314e:	609a      	str	r2, [r3, #8]
}
 8003150:	e016      	b.n	8003180 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <ADC_ConfigureBoostMode+0x214>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d80a      	bhi.n	8003170 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316c:	609a      	str	r2, [r3, #8]
}
 800316e:	e007      	b.n	8003180 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800317e:	609a      	str	r2, [r3, #8]
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40022000 	.word	0x40022000
 800318c:	40022100 	.word	0x40022100
 8003190:	40022300 	.word	0x40022300
 8003194:	58026300 	.word	0x58026300
 8003198:	01312d00 	.word	0x01312d00
 800319c:	005f5e10 	.word	0x005f5e10
 80031a0:	00bebc20 	.word	0x00bebc20
 80031a4:	017d7840 	.word	0x017d7840

080031a8 <LL_ADC_IsEnabled>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <LL_ADC_IsEnabled+0x18>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <LL_ADC_IsEnabled+0x1a>
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <LL_ADC_REG_IsConversionOngoing>:
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d101      	bne.n	80031e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b09f      	sub	sp, #124	; 0x7c
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800320e:	2302      	movs	r3, #2
 8003210:	e0be      	b.n	8003390 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800321a:	2300      	movs	r3, #0
 800321c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800321e:	2300      	movs	r3, #0
 8003220:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d102      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800322c:	4b5b      	ldr	r3, [pc, #364]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	e001      	b.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e09d      	b.n	8003390 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff ffb9 	bl	80031ce <LL_ADC_REG_IsConversionOngoing>
 800325c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ffb3 	bl	80031ce <LL_ADC_REG_IsConversionOngoing>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d17f      	bne.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800326e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003270:	2b00      	cmp	r3, #0
 8003272:	d17c      	bne.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a47      	ldr	r2, [pc, #284]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a46      	ldr	r2, [pc, #280]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003288:	4b45      	ldr	r3, [pc, #276]	; (80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800328a:	e000      	b.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800328c:	4b45      	ldr	r3, [pc, #276]	; (80033a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800328e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d039      	beq.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a3a      	ldr	r2, [pc, #232]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d004      	beq.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10e      	bne.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032be:	4836      	ldr	r0, [pc, #216]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032c0:	f7ff ff72 	bl	80031a8 <LL_ADC_IsEnabled>
 80032c4:	4604      	mov	r4, r0
 80032c6:	4835      	ldr	r0, [pc, #212]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032c8:	f7ff ff6e 	bl	80031a8 <LL_ADC_IsEnabled>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4323      	orrs	r3, r4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e008      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80032dc:	4832      	ldr	r0, [pc, #200]	; (80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80032de:	f7ff ff63 	bl	80031a8 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d047      	beq.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	4b2d      	ldr	r3, [pc, #180]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	6811      	ldr	r1, [r2, #0]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	6892      	ldr	r2, [r2, #8]
 8003302:	430a      	orrs	r2, r1
 8003304:	431a      	orrs	r2, r3
 8003306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003308:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800330a:	e03a      	b.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800330c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1d      	ldr	r2, [pc, #116]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10e      	bne.n	800334a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800332c:	481a      	ldr	r0, [pc, #104]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800332e:	f7ff ff3b 	bl	80031a8 <LL_ADC_IsEnabled>
 8003332:	4604      	mov	r4, r0
 8003334:	4819      	ldr	r0, [pc, #100]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003336:	f7ff ff37 	bl	80031a8 <LL_ADC_IsEnabled>
 800333a:	4603      	mov	r3, r0
 800333c:	4323      	orrs	r3, r4
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	e008      	b.n	800335c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800334a:	4817      	ldr	r0, [pc, #92]	; (80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800334c:	f7ff ff2c 	bl	80031a8 <LL_ADC_IsEnabled>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d010      	beq.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003366:	4013      	ands	r3, r2
 8003368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800336a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800336c:	e009      	b.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003380:	e000      	b.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003382:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800338c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003390:	4618      	mov	r0, r3
 8003392:	377c      	adds	r7, #124	; 0x7c
 8003394:	46bd      	mov	sp, r7
 8003396:	bd90      	pop	{r4, r7, pc}
 8003398:	40022000 	.word	0x40022000
 800339c:	40022100 	.word	0x40022100
 80033a0:	40022300 	.word	0x40022300
 80033a4:	58026300 	.word	0x58026300
 80033a8:	58026000 	.word	0x58026000
 80033ac:	fffff0e0 	.word	0xfffff0e0

080033b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <__NVIC_SetPriorityGrouping+0x40>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <__NVIC_SetPriorityGrouping+0x44>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <__NVIC_SetPriorityGrouping+0x40>)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60d3      	str	r3, [r2, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00
 80033f4:	05fa0000 	.word	0x05fa0000

080033f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <__NVIC_GetPriorityGrouping+0x18>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	f003 0307 	and.w	r3, r3, #7
}
 8003406:	4618      	mov	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800341e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003422:	2b00      	cmp	r3, #0
 8003424:	db0b      	blt.n	800343e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	4907      	ldr	r1, [pc, #28]	; (800344c <__NVIC_EnableIRQ+0x38>)
 800342e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2001      	movs	r0, #1
 8003436:	fa00 f202 	lsl.w	r2, r0, r2
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e100 	.word	0xe000e100

08003450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800345c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003460:	2b00      	cmp	r3, #0
 8003462:	db0a      	blt.n	800347a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	490c      	ldr	r1, [pc, #48]	; (800349c <__NVIC_SetPriority+0x4c>)
 800346a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	440b      	add	r3, r1
 8003474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003478:	e00a      	b.n	8003490 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	4908      	ldr	r1, [pc, #32]	; (80034a0 <__NVIC_SetPriority+0x50>)
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	3b04      	subs	r3, #4
 8003488:	0112      	lsls	r2, r2, #4
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	440b      	add	r3, r1
 800348e:	761a      	strb	r2, [r3, #24]
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	; 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f1c3 0307 	rsb	r3, r3, #7
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf28      	it	cs
 80034c2:	2304      	movcs	r3, #4
 80034c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3304      	adds	r3, #4
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <NVIC_EncodePriority+0x30>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3b03      	subs	r3, #3
 80034d2:	e000      	b.n	80034d6 <NVIC_EncodePriority+0x32>
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	401a      	ands	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43d9      	mvns	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	4313      	orrs	r3, r2
         );
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3724      	adds	r7, #36	; 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff4c 	bl	80033b0 <__NVIC_SetPriorityGrouping>
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800352e:	f7ff ff63 	bl	80033f8 <__NVIC_GetPriorityGrouping>
 8003532:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f7ff ffb3 	bl	80034a4 <NVIC_EncodePriority>
 800353e:	4602      	mov	r2, r0
 8003540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff82 	bl	8003450 <__NVIC_SetPriority>
}
 800354c:	bf00      	nop
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800355e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff56 	bl	8003414 <__NVIC_EnableIRQ>
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e014      	b.n	80035ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	791b      	ldrb	r3, [r3, #4]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fb26 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01d      	beq.n	8003612 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d018      	beq.n	8003612 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f043 0201 	orr.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800360a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f827 	bl	8003660 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01d      	beq.n	8003658 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d018      	beq.n	8003658 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2204      	movs	r2, #4
 800362a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003640:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003650:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f950 	bl	80038f8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_DAC_ConfigChannel+0x1e>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e12a      	b.n	80038ec <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	795b      	ldrb	r3, [r3, #5]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_DAC_ConfigChannel+0x2e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e124      	b.n	80038ec <HAL_DAC_ConfigChannel+0x278>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2202      	movs	r2, #2
 80036ac:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d17a      	bne.n	80037ac <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80036b6:	f7fe fdb3 	bl	8002220 <HAL_GetTick>
 80036ba:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d13d      	bne.n	800373e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036c2:	e018      	b.n	80036f6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036c4:	f7fe fdac 	bl	8002220 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d911      	bls.n	80036f6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d8:	4b86      	ldr	r3, [pc, #536]	; (80038f4 <HAL_DAC_ConfigChannel+0x280>)
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f043 0208 	orr.w	r2, r3, #8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2203      	movs	r2, #3
 80036f0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0fa      	b.n	80038ec <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fc:	4b7d      	ldr	r3, [pc, #500]	; (80038f4 <HAL_DAC_ConfigChannel+0x280>)
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1df      	bne.n	80036c4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	6992      	ldr	r2, [r2, #24]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
 800370e:	e020      	b.n	8003752 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003710:	f7fe fd86 	bl	8002220 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d90f      	bls.n	800373e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	da0a      	bge.n	800373e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f043 0208 	orr.w	r2, r3, #8
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2203      	movs	r2, #3
 8003738:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0d6      	b.n	80038ec <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003744:	2b00      	cmp	r3, #0
 8003746:	dbe3      	blt.n	8003710 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	6992      	ldr	r2, [r2, #24]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	ea02 0103 	and.w	r1, r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	21ff      	movs	r1, #255	; 0xff
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	ea02 0103 	and.w	r1, r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	6a1a      	ldr	r2, [r3, #32]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	409a      	lsls	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d11d      	bne.n	80037f0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	221f      	movs	r2, #31
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2207      	movs	r2, #7
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d102      	bne.n	800381a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8003814:	2300      	movs	r3, #0
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
 8003818:	e00f      	b.n	800383a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d102      	bne.n	8003828 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003822:	2301      	movs	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
 8003826:	e008      	b.n	800383a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003830:	2301      	movs	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
 8003834:	e001      	b.n	800383a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003836:	2300      	movs	r3, #0
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	4313      	orrs	r3, r2
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43da      	mvns	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	400a      	ands	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	22c0      	movs	r2, #192	; 0xc0
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	400a      	ands	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80038e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3728      	adds	r7, #40	; 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20008000 	.word	0x20008000

080038f8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003914:	f7fe fc84 	bl	8002220 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e316      	b.n	8003f52 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a66      	ldr	r2, [pc, #408]	; (8003ac4 <HAL_DMA_Init+0x1b8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d04a      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a65      	ldr	r2, [pc, #404]	; (8003ac8 <HAL_DMA_Init+0x1bc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d045      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a63      	ldr	r2, [pc, #396]	; (8003acc <HAL_DMA_Init+0x1c0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d040      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a62      	ldr	r2, [pc, #392]	; (8003ad0 <HAL_DMA_Init+0x1c4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d03b      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a60      	ldr	r2, [pc, #384]	; (8003ad4 <HAL_DMA_Init+0x1c8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d036      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5f      	ldr	r2, [pc, #380]	; (8003ad8 <HAL_DMA_Init+0x1cc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d031      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5d      	ldr	r2, [pc, #372]	; (8003adc <HAL_DMA_Init+0x1d0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02c      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a5c      	ldr	r2, [pc, #368]	; (8003ae0 <HAL_DMA_Init+0x1d4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d027      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5a      	ldr	r2, [pc, #360]	; (8003ae4 <HAL_DMA_Init+0x1d8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d022      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a59      	ldr	r2, [pc, #356]	; (8003ae8 <HAL_DMA_Init+0x1dc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d01d      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a57      	ldr	r2, [pc, #348]	; (8003aec <HAL_DMA_Init+0x1e0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d018      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a56      	ldr	r2, [pc, #344]	; (8003af0 <HAL_DMA_Init+0x1e4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a54      	ldr	r2, [pc, #336]	; (8003af4 <HAL_DMA_Init+0x1e8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d00e      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a53      	ldr	r2, [pc, #332]	; (8003af8 <HAL_DMA_Init+0x1ec>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d009      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a51      	ldr	r2, [pc, #324]	; (8003afc <HAL_DMA_Init+0x1f0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_DMA_Init+0xb8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_DMA_Init+0x1f4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d101      	bne.n	80039c8 <HAL_DMA_Init+0xbc>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_DMA_Init+0xbe>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 813b 	beq.w	8003c46 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <HAL_DMA_Init+0x1b8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04a      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a36      	ldr	r2, [pc, #216]	; (8003ac8 <HAL_DMA_Init+0x1bc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d045      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a34      	ldr	r2, [pc, #208]	; (8003acc <HAL_DMA_Init+0x1c0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d040      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <HAL_DMA_Init+0x1c4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d03b      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <HAL_DMA_Init+0x1c8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d036      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <HAL_DMA_Init+0x1cc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d031      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <HAL_DMA_Init+0x1d0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d02c      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <HAL_DMA_Init+0x1d4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d027      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2b      	ldr	r2, [pc, #172]	; (8003ae4 <HAL_DMA_Init+0x1d8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <HAL_DMA_Init+0x1dc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d01d      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a28      	ldr	r2, [pc, #160]	; (8003aec <HAL_DMA_Init+0x1e0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a27      	ldr	r2, [pc, #156]	; (8003af0 <HAL_DMA_Init+0x1e4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a25      	ldr	r2, [pc, #148]	; (8003af4 <HAL_DMA_Init+0x1e8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a24      	ldr	r2, [pc, #144]	; (8003af8 <HAL_DMA_Init+0x1ec>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a22      	ldr	r2, [pc, #136]	; (8003afc <HAL_DMA_Init+0x1f0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_DMA_Init+0x174>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <HAL_DMA_Init+0x1f4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d108      	bne.n	8003a92 <HAL_DMA_Init+0x186>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e007      	b.n	8003aa2 <HAL_DMA_Init+0x196>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003aa2:	e02f      	b.n	8003b04 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aa4:	f7fe fbbc 	bl	8002220 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d928      	bls.n	8003b04 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2203      	movs	r2, #3
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e246      	b.n	8003f52 <HAL_DMA_Init+0x646>
 8003ac4:	40020010 	.word	0x40020010
 8003ac8:	40020028 	.word	0x40020028
 8003acc:	40020040 	.word	0x40020040
 8003ad0:	40020058 	.word	0x40020058
 8003ad4:	40020070 	.word	0x40020070
 8003ad8:	40020088 	.word	0x40020088
 8003adc:	400200a0 	.word	0x400200a0
 8003ae0:	400200b8 	.word	0x400200b8
 8003ae4:	40020410 	.word	0x40020410
 8003ae8:	40020428 	.word	0x40020428
 8003aec:	40020440 	.word	0x40020440
 8003af0:	40020458 	.word	0x40020458
 8003af4:	40020470 	.word	0x40020470
 8003af8:	40020488 	.word	0x40020488
 8003afc:	400204a0 	.word	0x400204a0
 8003b00:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1c8      	bne.n	8003aa4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4b83      	ldr	r3, [pc, #524]	; (8003d2c <HAL_DMA_Init+0x420>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b36:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b42:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d107      	bne.n	8003b68 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4313      	orrs	r3, r2
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003b68:	4b71      	ldr	r3, [pc, #452]	; (8003d30 <HAL_DMA_Init+0x424>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b71      	ldr	r3, [pc, #452]	; (8003d34 <HAL_DMA_Init+0x428>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b74:	d328      	bcc.n	8003bc8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b28      	cmp	r3, #40	; 0x28
 8003b7c:	d903      	bls.n	8003b86 <HAL_DMA_Init+0x27a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b2e      	cmp	r3, #46	; 0x2e
 8003b84:	d917      	bls.n	8003bb6 <HAL_DMA_Init+0x2aa>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b8c:	d903      	bls.n	8003b96 <HAL_DMA_Init+0x28a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b42      	cmp	r3, #66	; 0x42
 8003b94:	d90f      	bls.n	8003bb6 <HAL_DMA_Init+0x2aa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b46      	cmp	r3, #70	; 0x46
 8003b9c:	d903      	bls.n	8003ba6 <HAL_DMA_Init+0x29a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b48      	cmp	r3, #72	; 0x48
 8003ba4:	d907      	bls.n	8003bb6 <HAL_DMA_Init+0x2aa>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b4e      	cmp	r3, #78	; 0x4e
 8003bac:	d905      	bls.n	8003bba <HAL_DMA_Init+0x2ae>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b52      	cmp	r3, #82	; 0x52
 8003bb4:	d801      	bhi.n	8003bba <HAL_DMA_Init+0x2ae>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_DMA_Init+0x2b0>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d117      	bne.n	8003c22 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00e      	beq.n	8003c22 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f001 ff1d 	bl	8005a44 <DMA_CheckFifoParam>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2240      	movs	r2, #64	; 0x40
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e197      	b.n	8003f52 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 fe58 	bl	80058e0 <DMA_CalcBaseAndBitshift>
 8003c30:	4603      	mov	r3, r0
 8003c32:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	223f      	movs	r2, #63	; 0x3f
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	e0cd      	b.n	8003de2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a3b      	ldr	r2, [pc, #236]	; (8003d38 <HAL_DMA_Init+0x42c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <HAL_DMA_Init+0x38a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a39      	ldr	r2, [pc, #228]	; (8003d3c <HAL_DMA_Init+0x430>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01d      	beq.n	8003c96 <HAL_DMA_Init+0x38a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a38      	ldr	r2, [pc, #224]	; (8003d40 <HAL_DMA_Init+0x434>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_DMA_Init+0x38a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a36      	ldr	r2, [pc, #216]	; (8003d44 <HAL_DMA_Init+0x438>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_DMA_Init+0x38a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a35      	ldr	r2, [pc, #212]	; (8003d48 <HAL_DMA_Init+0x43c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_DMA_Init+0x38a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a33      	ldr	r2, [pc, #204]	; (8003d4c <HAL_DMA_Init+0x440>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_DMA_Init+0x38a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a32      	ldr	r2, [pc, #200]	; (8003d50 <HAL_DMA_Init+0x444>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_DMA_Init+0x38a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <HAL_DMA_Init+0x448>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_DMA_Init+0x38e>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_DMA_Init+0x390>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8097 	beq.w	8003dd0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a24      	ldr	r2, [pc, #144]	; (8003d38 <HAL_DMA_Init+0x42c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d021      	beq.n	8003cf0 <HAL_DMA_Init+0x3e4>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a22      	ldr	r2, [pc, #136]	; (8003d3c <HAL_DMA_Init+0x430>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01c      	beq.n	8003cf0 <HAL_DMA_Init+0x3e4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a21      	ldr	r2, [pc, #132]	; (8003d40 <HAL_DMA_Init+0x434>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d017      	beq.n	8003cf0 <HAL_DMA_Init+0x3e4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <HAL_DMA_Init+0x438>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d012      	beq.n	8003cf0 <HAL_DMA_Init+0x3e4>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <HAL_DMA_Init+0x43c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_DMA_Init+0x3e4>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HAL_DMA_Init+0x440>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d008      	beq.n	8003cf0 <HAL_DMA_Init+0x3e4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <HAL_DMA_Init+0x444>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <HAL_DMA_Init+0x3e4>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <HAL_DMA_Init+0x448>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <HAL_DMA_Init+0x44c>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d020      	beq.n	8003d5c <HAL_DMA_Init+0x450>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	d102      	bne.n	8003d28 <HAL_DMA_Init+0x41c>
 8003d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d26:	e01a      	b.n	8003d5e <HAL_DMA_Init+0x452>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e018      	b.n	8003d5e <HAL_DMA_Init+0x452>
 8003d2c:	fe10803f 	.word	0xfe10803f
 8003d30:	5c001000 	.word	0x5c001000
 8003d34:	ffff0000 	.word	0xffff0000
 8003d38:	58025408 	.word	0x58025408
 8003d3c:	5802541c 	.word	0x5802541c
 8003d40:	58025430 	.word	0x58025430
 8003d44:	58025444 	.word	0x58025444
 8003d48:	58025458 	.word	0x58025458
 8003d4c:	5802546c 	.word	0x5802546c
 8003d50:	58025480 	.word	0x58025480
 8003d54:	58025494 	.word	0x58025494
 8003d58:	fffe000f 	.word	0xfffe000f
 8003d5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68d2      	ldr	r2, [r2, #12]
 8003d62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	4b6e      	ldr	r3, [pc, #440]	; (8003f5c <HAL_DMA_Init+0x650>)
 8003da4:	4413      	add	r3, r2
 8003da6:	4a6e      	ldr	r2, [pc, #440]	; (8003f60 <HAL_DMA_Init+0x654>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	009a      	lsls	r2, r3, #2
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 fd93 	bl	80058e0 <DMA_CalcBaseAndBitshift>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	e008      	b.n	8003de2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0b7      	b.n	8003f52 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a5f      	ldr	r2, [pc, #380]	; (8003f64 <HAL_DMA_Init+0x658>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d072      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5d      	ldr	r2, [pc, #372]	; (8003f68 <HAL_DMA_Init+0x65c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d06d      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a5c      	ldr	r2, [pc, #368]	; (8003f6c <HAL_DMA_Init+0x660>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d068      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5a      	ldr	r2, [pc, #360]	; (8003f70 <HAL_DMA_Init+0x664>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d063      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a59      	ldr	r2, [pc, #356]	; (8003f74 <HAL_DMA_Init+0x668>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d05e      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a57      	ldr	r2, [pc, #348]	; (8003f78 <HAL_DMA_Init+0x66c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d059      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a56      	ldr	r2, [pc, #344]	; (8003f7c <HAL_DMA_Init+0x670>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d054      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a54      	ldr	r2, [pc, #336]	; (8003f80 <HAL_DMA_Init+0x674>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04f      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a53      	ldr	r2, [pc, #332]	; (8003f84 <HAL_DMA_Init+0x678>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04a      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a51      	ldr	r2, [pc, #324]	; (8003f88 <HAL_DMA_Init+0x67c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d045      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a50      	ldr	r2, [pc, #320]	; (8003f8c <HAL_DMA_Init+0x680>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d040      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a4e      	ldr	r2, [pc, #312]	; (8003f90 <HAL_DMA_Init+0x684>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d03b      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a4d      	ldr	r2, [pc, #308]	; (8003f94 <HAL_DMA_Init+0x688>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d036      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a4b      	ldr	r2, [pc, #300]	; (8003f98 <HAL_DMA_Init+0x68c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_DMA_Init+0x690>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d02c      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a48      	ldr	r2, [pc, #288]	; (8003fa0 <HAL_DMA_Init+0x694>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d027      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a47      	ldr	r2, [pc, #284]	; (8003fa4 <HAL_DMA_Init+0x698>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a45      	ldr	r2, [pc, #276]	; (8003fa8 <HAL_DMA_Init+0x69c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a44      	ldr	r2, [pc, #272]	; (8003fac <HAL_DMA_Init+0x6a0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <HAL_DMA_Init+0x6a4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a41      	ldr	r2, [pc, #260]	; (8003fb4 <HAL_DMA_Init+0x6a8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <HAL_DMA_Init+0x6ac>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3e      	ldr	r2, [pc, #248]	; (8003fbc <HAL_DMA_Init+0x6b0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_Init+0x5c6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <HAL_DMA_Init+0x6b4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_Init+0x5ca>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_DMA_Init+0x5cc>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d032      	beq.n	8003f42 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f001 fe2d 	bl	8005b3c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d102      	bne.n	8003ef0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d010      	beq.n	8003f30 <HAL_DMA_Init+0x624>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d80c      	bhi.n	8003f30 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f001 feaa 	bl	8005c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	e008      	b.n	8003f42 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	a7fdabf8 	.word	0xa7fdabf8
 8003f60:	cccccccd 	.word	0xcccccccd
 8003f64:	40020010 	.word	0x40020010
 8003f68:	40020028 	.word	0x40020028
 8003f6c:	40020040 	.word	0x40020040
 8003f70:	40020058 	.word	0x40020058
 8003f74:	40020070 	.word	0x40020070
 8003f78:	40020088 	.word	0x40020088
 8003f7c:	400200a0 	.word	0x400200a0
 8003f80:	400200b8 	.word	0x400200b8
 8003f84:	40020410 	.word	0x40020410
 8003f88:	40020428 	.word	0x40020428
 8003f8c:	40020440 	.word	0x40020440
 8003f90:	40020458 	.word	0x40020458
 8003f94:	40020470 	.word	0x40020470
 8003f98:	40020488 	.word	0x40020488
 8003f9c:	400204a0 	.word	0x400204a0
 8003fa0:	400204b8 	.word	0x400204b8
 8003fa4:	58025408 	.word	0x58025408
 8003fa8:	5802541c 	.word	0x5802541c
 8003fac:	58025430 	.word	0x58025430
 8003fb0:	58025444 	.word	0x58025444
 8003fb4:	58025458 	.word	0x58025458
 8003fb8:	5802546c 	.word	0x5802546c
 8003fbc:	58025480 	.word	0x58025480
 8003fc0:	58025494 	.word	0x58025494

08003fc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003fcc:	f7fe f928 	bl	8002220 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e2dc      	b.n	8004596 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d008      	beq.n	8003ffa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e2cd      	b.n	8004596 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a76      	ldr	r2, [pc, #472]	; (80041d8 <HAL_DMA_Abort+0x214>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d04a      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a74      	ldr	r2, [pc, #464]	; (80041dc <HAL_DMA_Abort+0x218>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d045      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a73      	ldr	r2, [pc, #460]	; (80041e0 <HAL_DMA_Abort+0x21c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d040      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a71      	ldr	r2, [pc, #452]	; (80041e4 <HAL_DMA_Abort+0x220>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d03b      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a70      	ldr	r2, [pc, #448]	; (80041e8 <HAL_DMA_Abort+0x224>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d036      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a6e      	ldr	r2, [pc, #440]	; (80041ec <HAL_DMA_Abort+0x228>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d031      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6d      	ldr	r2, [pc, #436]	; (80041f0 <HAL_DMA_Abort+0x22c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d02c      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a6b      	ldr	r2, [pc, #428]	; (80041f4 <HAL_DMA_Abort+0x230>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d027      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6a      	ldr	r2, [pc, #424]	; (80041f8 <HAL_DMA_Abort+0x234>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d022      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a68      	ldr	r2, [pc, #416]	; (80041fc <HAL_DMA_Abort+0x238>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01d      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a67      	ldr	r2, [pc, #412]	; (8004200 <HAL_DMA_Abort+0x23c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d018      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a65      	ldr	r2, [pc, #404]	; (8004204 <HAL_DMA_Abort+0x240>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a64      	ldr	r2, [pc, #400]	; (8004208 <HAL_DMA_Abort+0x244>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a62      	ldr	r2, [pc, #392]	; (800420c <HAL_DMA_Abort+0x248>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a61      	ldr	r2, [pc, #388]	; (8004210 <HAL_DMA_Abort+0x24c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_DMA_Abort+0xd6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a5f      	ldr	r2, [pc, #380]	; (8004214 <HAL_DMA_Abort+0x250>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_DMA_Abort+0xda>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_DMA_Abort+0xdc>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 021e 	bic.w	r2, r2, #30
 80040b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e00a      	b.n	80040e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 020e 	bic.w	r2, r2, #14
 80040da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <HAL_DMA_Abort+0x214>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d072      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a3a      	ldr	r2, [pc, #232]	; (80041dc <HAL_DMA_Abort+0x218>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d06d      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a39      	ldr	r2, [pc, #228]	; (80041e0 <HAL_DMA_Abort+0x21c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d068      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a37      	ldr	r2, [pc, #220]	; (80041e4 <HAL_DMA_Abort+0x220>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d063      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a36      	ldr	r2, [pc, #216]	; (80041e8 <HAL_DMA_Abort+0x224>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d05e      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a34      	ldr	r2, [pc, #208]	; (80041ec <HAL_DMA_Abort+0x228>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d059      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a33      	ldr	r2, [pc, #204]	; (80041f0 <HAL_DMA_Abort+0x22c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d054      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a31      	ldr	r2, [pc, #196]	; (80041f4 <HAL_DMA_Abort+0x230>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d04f      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a30      	ldr	r2, [pc, #192]	; (80041f8 <HAL_DMA_Abort+0x234>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d04a      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2e      	ldr	r2, [pc, #184]	; (80041fc <HAL_DMA_Abort+0x238>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d045      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2d      	ldr	r2, [pc, #180]	; (8004200 <HAL_DMA_Abort+0x23c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d040      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2b      	ldr	r2, [pc, #172]	; (8004204 <HAL_DMA_Abort+0x240>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d03b      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2a      	ldr	r2, [pc, #168]	; (8004208 <HAL_DMA_Abort+0x244>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d036      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a28      	ldr	r2, [pc, #160]	; (800420c <HAL_DMA_Abort+0x248>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d031      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a27      	ldr	r2, [pc, #156]	; (8004210 <HAL_DMA_Abort+0x24c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d02c      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a25      	ldr	r2, [pc, #148]	; (8004214 <HAL_DMA_Abort+0x250>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d027      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a24      	ldr	r2, [pc, #144]	; (8004218 <HAL_DMA_Abort+0x254>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <HAL_DMA_Abort+0x258>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01d      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <HAL_DMA_Abort+0x25c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <HAL_DMA_Abort+0x260>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <HAL_DMA_Abort+0x264>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1c      	ldr	r2, [pc, #112]	; (800422c <HAL_DMA_Abort+0x268>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_DMA_Abort+0x26c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_DMA_Abort+0x20e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <HAL_DMA_Abort+0x270>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d132      	bne.n	8004238 <HAL_DMA_Abort+0x274>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e031      	b.n	800423a <HAL_DMA_Abort+0x276>
 80041d6:	bf00      	nop
 80041d8:	40020010 	.word	0x40020010
 80041dc:	40020028 	.word	0x40020028
 80041e0:	40020040 	.word	0x40020040
 80041e4:	40020058 	.word	0x40020058
 80041e8:	40020070 	.word	0x40020070
 80041ec:	40020088 	.word	0x40020088
 80041f0:	400200a0 	.word	0x400200a0
 80041f4:	400200b8 	.word	0x400200b8
 80041f8:	40020410 	.word	0x40020410
 80041fc:	40020428 	.word	0x40020428
 8004200:	40020440 	.word	0x40020440
 8004204:	40020458 	.word	0x40020458
 8004208:	40020470 	.word	0x40020470
 800420c:	40020488 	.word	0x40020488
 8004210:	400204a0 	.word	0x400204a0
 8004214:	400204b8 	.word	0x400204b8
 8004218:	58025408 	.word	0x58025408
 800421c:	5802541c 	.word	0x5802541c
 8004220:	58025430 	.word	0x58025430
 8004224:	58025444 	.word	0x58025444
 8004228:	58025458 	.word	0x58025458
 800422c:	5802546c 	.word	0x5802546c
 8004230:	58025480 	.word	0x58025480
 8004234:	58025494 	.word	0x58025494
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6d      	ldr	r2, [pc, #436]	; (8004408 <HAL_DMA_Abort+0x444>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d04a      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6b      	ldr	r2, [pc, #428]	; (800440c <HAL_DMA_Abort+0x448>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d045      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6a      	ldr	r2, [pc, #424]	; (8004410 <HAL_DMA_Abort+0x44c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d040      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a68      	ldr	r2, [pc, #416]	; (8004414 <HAL_DMA_Abort+0x450>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03b      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a67      	ldr	r2, [pc, #412]	; (8004418 <HAL_DMA_Abort+0x454>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d036      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a65      	ldr	r2, [pc, #404]	; (800441c <HAL_DMA_Abort+0x458>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d031      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a64      	ldr	r2, [pc, #400]	; (8004420 <HAL_DMA_Abort+0x45c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d02c      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a62      	ldr	r2, [pc, #392]	; (8004424 <HAL_DMA_Abort+0x460>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d027      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a61      	ldr	r2, [pc, #388]	; (8004428 <HAL_DMA_Abort+0x464>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5f      	ldr	r2, [pc, #380]	; (800442c <HAL_DMA_Abort+0x468>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a5e      	ldr	r2, [pc, #376]	; (8004430 <HAL_DMA_Abort+0x46c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5c      	ldr	r2, [pc, #368]	; (8004434 <HAL_DMA_Abort+0x470>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a5b      	ldr	r2, [pc, #364]	; (8004438 <HAL_DMA_Abort+0x474>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a59      	ldr	r2, [pc, #356]	; (800443c <HAL_DMA_Abort+0x478>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a58      	ldr	r2, [pc, #352]	; (8004440 <HAL_DMA_Abort+0x47c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_DMA_Abort+0x32a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a56      	ldr	r2, [pc, #344]	; (8004444 <HAL_DMA_Abort+0x480>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d108      	bne.n	8004300 <HAL_DMA_Abort+0x33c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e007      	b.n	8004310 <HAL_DMA_Abort+0x34c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004310:	e013      	b.n	800433a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004312:	f7fd ff85 	bl	8002220 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b05      	cmp	r3, #5
 800431e:	d90c      	bls.n	800433a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e12d      	b.n	8004596 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e5      	bne.n	8004312 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <HAL_DMA_Abort+0x444>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d04a      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2d      	ldr	r2, [pc, #180]	; (800440c <HAL_DMA_Abort+0x448>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d045      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2c      	ldr	r2, [pc, #176]	; (8004410 <HAL_DMA_Abort+0x44c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d040      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <HAL_DMA_Abort+0x450>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d03b      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a29      	ldr	r2, [pc, #164]	; (8004418 <HAL_DMA_Abort+0x454>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d036      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a27      	ldr	r2, [pc, #156]	; (800441c <HAL_DMA_Abort+0x458>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d031      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a26      	ldr	r2, [pc, #152]	; (8004420 <HAL_DMA_Abort+0x45c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d02c      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a24      	ldr	r2, [pc, #144]	; (8004424 <HAL_DMA_Abort+0x460>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d027      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a23      	ldr	r2, [pc, #140]	; (8004428 <HAL_DMA_Abort+0x464>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a21      	ldr	r2, [pc, #132]	; (800442c <HAL_DMA_Abort+0x468>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d01d      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a20      	ldr	r2, [pc, #128]	; (8004430 <HAL_DMA_Abort+0x46c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_DMA_Abort+0x470>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <HAL_DMA_Abort+0x474>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_DMA_Abort+0x478>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <HAL_DMA_Abort+0x47c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_DMA_Abort+0x422>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a18      	ldr	r2, [pc, #96]	; (8004444 <HAL_DMA_Abort+0x480>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_DMA_Abort+0x426>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_DMA_Abort+0x428>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02b      	beq.n	8004448 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	223f      	movs	r2, #63	; 0x3f
 8004400:	409a      	lsls	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]
 8004406:	e02a      	b.n	800445e <HAL_DMA_Abort+0x49a>
 8004408:	40020010 	.word	0x40020010
 800440c:	40020028 	.word	0x40020028
 8004410:	40020040 	.word	0x40020040
 8004414:	40020058 	.word	0x40020058
 8004418:	40020070 	.word	0x40020070
 800441c:	40020088 	.word	0x40020088
 8004420:	400200a0 	.word	0x400200a0
 8004424:	400200b8 	.word	0x400200b8
 8004428:	40020410 	.word	0x40020410
 800442c:	40020428 	.word	0x40020428
 8004430:	40020440 	.word	0x40020440
 8004434:	40020458 	.word	0x40020458
 8004438:	40020470 	.word	0x40020470
 800443c:	40020488 	.word	0x40020488
 8004440:	400204a0 	.word	0x400204a0
 8004444:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004452:	f003 031f 	and.w	r3, r3, #31
 8004456:	2201      	movs	r2, #1
 8004458:	409a      	lsls	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a4f      	ldr	r2, [pc, #316]	; (80045a0 <HAL_DMA_Abort+0x5dc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d072      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a4d      	ldr	r2, [pc, #308]	; (80045a4 <HAL_DMA_Abort+0x5e0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d06d      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4c      	ldr	r2, [pc, #304]	; (80045a8 <HAL_DMA_Abort+0x5e4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d068      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a4a      	ldr	r2, [pc, #296]	; (80045ac <HAL_DMA_Abort+0x5e8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d063      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a49      	ldr	r2, [pc, #292]	; (80045b0 <HAL_DMA_Abort+0x5ec>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d05e      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a47      	ldr	r2, [pc, #284]	; (80045b4 <HAL_DMA_Abort+0x5f0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d059      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a46      	ldr	r2, [pc, #280]	; (80045b8 <HAL_DMA_Abort+0x5f4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d054      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a44      	ldr	r2, [pc, #272]	; (80045bc <HAL_DMA_Abort+0x5f8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d04f      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a43      	ldr	r2, [pc, #268]	; (80045c0 <HAL_DMA_Abort+0x5fc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d04a      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a41      	ldr	r2, [pc, #260]	; (80045c4 <HAL_DMA_Abort+0x600>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d045      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a40      	ldr	r2, [pc, #256]	; (80045c8 <HAL_DMA_Abort+0x604>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d040      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3e      	ldr	r2, [pc, #248]	; (80045cc <HAL_DMA_Abort+0x608>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d03b      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a3d      	ldr	r2, [pc, #244]	; (80045d0 <HAL_DMA_Abort+0x60c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d036      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <HAL_DMA_Abort+0x610>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d031      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a3a      	ldr	r2, [pc, #232]	; (80045d8 <HAL_DMA_Abort+0x614>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d02c      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a38      	ldr	r2, [pc, #224]	; (80045dc <HAL_DMA_Abort+0x618>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d027      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a37      	ldr	r2, [pc, #220]	; (80045e0 <HAL_DMA_Abort+0x61c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a35      	ldr	r2, [pc, #212]	; (80045e4 <HAL_DMA_Abort+0x620>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d01d      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a34      	ldr	r2, [pc, #208]	; (80045e8 <HAL_DMA_Abort+0x624>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a32      	ldr	r2, [pc, #200]	; (80045ec <HAL_DMA_Abort+0x628>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a31      	ldr	r2, [pc, #196]	; (80045f0 <HAL_DMA_Abort+0x62c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <HAL_DMA_Abort+0x630>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a2e      	ldr	r2, [pc, #184]	; (80045f8 <HAL_DMA_Abort+0x634>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_DMA_Abort+0x58a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2c      	ldr	r2, [pc, #176]	; (80045fc <HAL_DMA_Abort+0x638>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <HAL_DMA_Abort+0x58e>
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_DMA_Abort+0x590>
 8004552:	2300      	movs	r3, #0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004560:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004578:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004582:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40020010 	.word	0x40020010
 80045a4:	40020028 	.word	0x40020028
 80045a8:	40020040 	.word	0x40020040
 80045ac:	40020058 	.word	0x40020058
 80045b0:	40020070 	.word	0x40020070
 80045b4:	40020088 	.word	0x40020088
 80045b8:	400200a0 	.word	0x400200a0
 80045bc:	400200b8 	.word	0x400200b8
 80045c0:	40020410 	.word	0x40020410
 80045c4:	40020428 	.word	0x40020428
 80045c8:	40020440 	.word	0x40020440
 80045cc:	40020458 	.word	0x40020458
 80045d0:	40020470 	.word	0x40020470
 80045d4:	40020488 	.word	0x40020488
 80045d8:	400204a0 	.word	0x400204a0
 80045dc:	400204b8 	.word	0x400204b8
 80045e0:	58025408 	.word	0x58025408
 80045e4:	5802541c 	.word	0x5802541c
 80045e8:	58025430 	.word	0x58025430
 80045ec:	58025444 	.word	0x58025444
 80045f0:	58025458 	.word	0x58025458
 80045f4:	5802546c 	.word	0x5802546c
 80045f8:	58025480 	.word	0x58025480
 80045fc:	58025494 	.word	0x58025494

08004600 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e237      	b.n	8004a82 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d004      	beq.n	8004628 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e22c      	b.n	8004a82 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a5c      	ldr	r2, [pc, #368]	; (80047a0 <HAL_DMA_Abort_IT+0x1a0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04a      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a5b      	ldr	r2, [pc, #364]	; (80047a4 <HAL_DMA_Abort_IT+0x1a4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d045      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a59      	ldr	r2, [pc, #356]	; (80047a8 <HAL_DMA_Abort_IT+0x1a8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d040      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a58      	ldr	r2, [pc, #352]	; (80047ac <HAL_DMA_Abort_IT+0x1ac>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d03b      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a56      	ldr	r2, [pc, #344]	; (80047b0 <HAL_DMA_Abort_IT+0x1b0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d036      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a55      	ldr	r2, [pc, #340]	; (80047b4 <HAL_DMA_Abort_IT+0x1b4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d031      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a53      	ldr	r2, [pc, #332]	; (80047b8 <HAL_DMA_Abort_IT+0x1b8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02c      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a52      	ldr	r2, [pc, #328]	; (80047bc <HAL_DMA_Abort_IT+0x1bc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d027      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a50      	ldr	r2, [pc, #320]	; (80047c0 <HAL_DMA_Abort_IT+0x1c0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a4f      	ldr	r2, [pc, #316]	; (80047c4 <HAL_DMA_Abort_IT+0x1c4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01d      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a4d      	ldr	r2, [pc, #308]	; (80047c8 <HAL_DMA_Abort_IT+0x1c8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a4c      	ldr	r2, [pc, #304]	; (80047cc <HAL_DMA_Abort_IT+0x1cc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <HAL_DMA_Abort_IT+0x1d0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a49      	ldr	r2, [pc, #292]	; (80047d4 <HAL_DMA_Abort_IT+0x1d4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a47      	ldr	r2, [pc, #284]	; (80047d8 <HAL_DMA_Abort_IT+0x1d8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_DMA_Abort_IT+0xc8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a46      	ldr	r2, [pc, #280]	; (80047dc <HAL_DMA_Abort_IT+0x1dc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_DMA_Abort_IT+0xcc>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_DMA_Abort_IT+0xce>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8086 	beq.w	80047e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2204      	movs	r2, #4
 80046d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2f      	ldr	r2, [pc, #188]	; (80047a0 <HAL_DMA_Abort_IT+0x1a0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d04a      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2e      	ldr	r2, [pc, #184]	; (80047a4 <HAL_DMA_Abort_IT+0x1a4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d045      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <HAL_DMA_Abort_IT+0x1a8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d040      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a2b      	ldr	r2, [pc, #172]	; (80047ac <HAL_DMA_Abort_IT+0x1ac>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d03b      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a29      	ldr	r2, [pc, #164]	; (80047b0 <HAL_DMA_Abort_IT+0x1b0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d036      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <HAL_DMA_Abort_IT+0x1b4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d031      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a26      	ldr	r2, [pc, #152]	; (80047b8 <HAL_DMA_Abort_IT+0x1b8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d02c      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a25      	ldr	r2, [pc, #148]	; (80047bc <HAL_DMA_Abort_IT+0x1bc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d027      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a23      	ldr	r2, [pc, #140]	; (80047c0 <HAL_DMA_Abort_IT+0x1c0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d022      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <HAL_DMA_Abort_IT+0x1c4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d01d      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a20      	ldr	r2, [pc, #128]	; (80047c8 <HAL_DMA_Abort_IT+0x1c8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d018      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_DMA_Abort_IT+0x1cc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <HAL_DMA_Abort_IT+0x1d0>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00e      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <HAL_DMA_Abort_IT+0x1d4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <HAL_DMA_Abort_IT+0x1d8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_DMA_Abort_IT+0x17c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_DMA_Abort_IT+0x1dc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d108      	bne.n	800478e <HAL_DMA_Abort_IT+0x18e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e178      	b.n	8004a80 <HAL_DMA_Abort_IT+0x480>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e16f      	b.n	8004a80 <HAL_DMA_Abort_IT+0x480>
 80047a0:	40020010 	.word	0x40020010
 80047a4:	40020028 	.word	0x40020028
 80047a8:	40020040 	.word	0x40020040
 80047ac:	40020058 	.word	0x40020058
 80047b0:	40020070 	.word	0x40020070
 80047b4:	40020088 	.word	0x40020088
 80047b8:	400200a0 	.word	0x400200a0
 80047bc:	400200b8 	.word	0x400200b8
 80047c0:	40020410 	.word	0x40020410
 80047c4:	40020428 	.word	0x40020428
 80047c8:	40020440 	.word	0x40020440
 80047cc:	40020458 	.word	0x40020458
 80047d0:	40020470 	.word	0x40020470
 80047d4:	40020488 	.word	0x40020488
 80047d8:	400204a0 	.word	0x400204a0
 80047dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 020e 	bic.w	r2, r2, #14
 80047ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a6c      	ldr	r2, [pc, #432]	; (80049a8 <HAL_DMA_Abort_IT+0x3a8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d04a      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a6b      	ldr	r2, [pc, #428]	; (80049ac <HAL_DMA_Abort_IT+0x3ac>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d045      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a69      	ldr	r2, [pc, #420]	; (80049b0 <HAL_DMA_Abort_IT+0x3b0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d040      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a68      	ldr	r2, [pc, #416]	; (80049b4 <HAL_DMA_Abort_IT+0x3b4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d03b      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a66      	ldr	r2, [pc, #408]	; (80049b8 <HAL_DMA_Abort_IT+0x3b8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d036      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a65      	ldr	r2, [pc, #404]	; (80049bc <HAL_DMA_Abort_IT+0x3bc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d031      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a63      	ldr	r2, [pc, #396]	; (80049c0 <HAL_DMA_Abort_IT+0x3c0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d02c      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a62      	ldr	r2, [pc, #392]	; (80049c4 <HAL_DMA_Abort_IT+0x3c4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d027      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a60      	ldr	r2, [pc, #384]	; (80049c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d022      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <HAL_DMA_Abort_IT+0x3cc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d01d      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a5d      	ldr	r2, [pc, #372]	; (80049d0 <HAL_DMA_Abort_IT+0x3d0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d018      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a5c      	ldr	r2, [pc, #368]	; (80049d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a5a      	ldr	r2, [pc, #360]	; (80049d8 <HAL_DMA_Abort_IT+0x3d8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00e      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a59      	ldr	r2, [pc, #356]	; (80049dc <HAL_DMA_Abort_IT+0x3dc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d009      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a57      	ldr	r2, [pc, #348]	; (80049e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_DMA_Abort_IT+0x290>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a56      	ldr	r2, [pc, #344]	; (80049e4 <HAL_DMA_Abort_IT+0x3e4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <HAL_DMA_Abort_IT+0x2a2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e007      	b.n	80048b2 <HAL_DMA_Abort_IT+0x2b2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3c      	ldr	r2, [pc, #240]	; (80049a8 <HAL_DMA_Abort_IT+0x3a8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d072      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3a      	ldr	r2, [pc, #232]	; (80049ac <HAL_DMA_Abort_IT+0x3ac>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d06d      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a39      	ldr	r2, [pc, #228]	; (80049b0 <HAL_DMA_Abort_IT+0x3b0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d068      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a37      	ldr	r2, [pc, #220]	; (80049b4 <HAL_DMA_Abort_IT+0x3b4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d063      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a36      	ldr	r2, [pc, #216]	; (80049b8 <HAL_DMA_Abort_IT+0x3b8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d05e      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a34      	ldr	r2, [pc, #208]	; (80049bc <HAL_DMA_Abort_IT+0x3bc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d059      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a33      	ldr	r2, [pc, #204]	; (80049c0 <HAL_DMA_Abort_IT+0x3c0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d054      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <HAL_DMA_Abort_IT+0x3c4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d04f      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a30      	ldr	r2, [pc, #192]	; (80049c8 <HAL_DMA_Abort_IT+0x3c8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d04a      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <HAL_DMA_Abort_IT+0x3cc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d045      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2d      	ldr	r2, [pc, #180]	; (80049d0 <HAL_DMA_Abort_IT+0x3d0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d040      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2b      	ldr	r2, [pc, #172]	; (80049d4 <HAL_DMA_Abort_IT+0x3d4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d03b      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2a      	ldr	r2, [pc, #168]	; (80049d8 <HAL_DMA_Abort_IT+0x3d8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d036      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a28      	ldr	r2, [pc, #160]	; (80049dc <HAL_DMA_Abort_IT+0x3dc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d031      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <HAL_DMA_Abort_IT+0x3e0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d02c      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a25      	ldr	r2, [pc, #148]	; (80049e4 <HAL_DMA_Abort_IT+0x3e4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d027      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a24      	ldr	r2, [pc, #144]	; (80049e8 <HAL_DMA_Abort_IT+0x3e8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a22      	ldr	r2, [pc, #136]	; (80049ec <HAL_DMA_Abort_IT+0x3ec>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01d      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <HAL_DMA_Abort_IT+0x3f0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <HAL_DMA_Abort_IT+0x3f4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d013      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_DMA_Abort_IT+0x3f8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1c      	ldr	r2, [pc, #112]	; (80049fc <HAL_DMA_Abort_IT+0x3fc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_DMA_Abort_IT+0x400>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x3a2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <HAL_DMA_Abort_IT+0x404>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d132      	bne.n	8004a08 <HAL_DMA_Abort_IT+0x408>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e031      	b.n	8004a0a <HAL_DMA_Abort_IT+0x40a>
 80049a6:	bf00      	nop
 80049a8:	40020010 	.word	0x40020010
 80049ac:	40020028 	.word	0x40020028
 80049b0:	40020040 	.word	0x40020040
 80049b4:	40020058 	.word	0x40020058
 80049b8:	40020070 	.word	0x40020070
 80049bc:	40020088 	.word	0x40020088
 80049c0:	400200a0 	.word	0x400200a0
 80049c4:	400200b8 	.word	0x400200b8
 80049c8:	40020410 	.word	0x40020410
 80049cc:	40020428 	.word	0x40020428
 80049d0:	40020440 	.word	0x40020440
 80049d4:	40020458 	.word	0x40020458
 80049d8:	40020470 	.word	0x40020470
 80049dc:	40020488 	.word	0x40020488
 80049e0:	400204a0 	.word	0x400204a0
 80049e4:	400204b8 	.word	0x400204b8
 80049e8:	58025408 	.word	0x58025408
 80049ec:	5802541c 	.word	0x5802541c
 80049f0:	58025430 	.word	0x58025430
 80049f4:	58025444 	.word	0x58025444
 80049f8:	58025458 	.word	0x58025458
 80049fc:	5802546c 	.word	0x5802546c
 8004a00:	58025480 	.word	0x58025480
 8004a04:	58025494 	.word	0x58025494
 8004a08:	2300      	movs	r3, #0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d028      	beq.n	8004a60 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop

08004a8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a98:	4b67      	ldr	r3, [pc, #412]	; (8004c38 <HAL_DMA_IRQHandler+0x1ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a67      	ldr	r2, [pc, #412]	; (8004c3c <HAL_DMA_IRQHandler+0x1b0>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0a9b      	lsrs	r3, r3, #10
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a5f      	ldr	r2, [pc, #380]	; (8004c40 <HAL_DMA_IRQHandler+0x1b4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d04a      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a5d      	ldr	r2, [pc, #372]	; (8004c44 <HAL_DMA_IRQHandler+0x1b8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d045      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a5c      	ldr	r2, [pc, #368]	; (8004c48 <HAL_DMA_IRQHandler+0x1bc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d040      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a5a      	ldr	r2, [pc, #360]	; (8004c4c <HAL_DMA_IRQHandler+0x1c0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d03b      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a59      	ldr	r2, [pc, #356]	; (8004c50 <HAL_DMA_IRQHandler+0x1c4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d036      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a57      	ldr	r2, [pc, #348]	; (8004c54 <HAL_DMA_IRQHandler+0x1c8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d031      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a56      	ldr	r2, [pc, #344]	; (8004c58 <HAL_DMA_IRQHandler+0x1cc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d02c      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a54      	ldr	r2, [pc, #336]	; (8004c5c <HAL_DMA_IRQHandler+0x1d0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d027      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a53      	ldr	r2, [pc, #332]	; (8004c60 <HAL_DMA_IRQHandler+0x1d4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d022      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a51      	ldr	r2, [pc, #324]	; (8004c64 <HAL_DMA_IRQHandler+0x1d8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01d      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a50      	ldr	r2, [pc, #320]	; (8004c68 <HAL_DMA_IRQHandler+0x1dc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d018      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a4e      	ldr	r2, [pc, #312]	; (8004c6c <HAL_DMA_IRQHandler+0x1e0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a4d      	ldr	r2, [pc, #308]	; (8004c70 <HAL_DMA_IRQHandler+0x1e4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a4b      	ldr	r2, [pc, #300]	; (8004c74 <HAL_DMA_IRQHandler+0x1e8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a4a      	ldr	r2, [pc, #296]	; (8004c78 <HAL_DMA_IRQHandler+0x1ec>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_DMA_IRQHandler+0xd2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a48      	ldr	r2, [pc, #288]	; (8004c7c <HAL_DMA_IRQHandler+0x1f0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d101      	bne.n	8004b62 <HAL_DMA_IRQHandler+0xd6>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_DMA_IRQHandler+0xd8>
 8004b62:	2300      	movs	r3, #0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 842b 	beq.w	80053c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2208      	movs	r2, #8
 8004b74:	409a      	lsls	r2, r3
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 80a2 	beq.w	8004cc4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2e      	ldr	r2, [pc, #184]	; (8004c40 <HAL_DMA_IRQHandler+0x1b4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d04a      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <HAL_DMA_IRQHandler+0x1b8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d045      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2b      	ldr	r2, [pc, #172]	; (8004c48 <HAL_DMA_IRQHandler+0x1bc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d040      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <HAL_DMA_IRQHandler+0x1c0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d03b      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <HAL_DMA_IRQHandler+0x1c4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d036      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a27      	ldr	r2, [pc, #156]	; (8004c54 <HAL_DMA_IRQHandler+0x1c8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d031      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a25      	ldr	r2, [pc, #148]	; (8004c58 <HAL_DMA_IRQHandler+0x1cc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d02c      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <HAL_DMA_IRQHandler+0x1d0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d027      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <HAL_DMA_IRQHandler+0x1d4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d022      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <HAL_DMA_IRQHandler+0x1d8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d01d      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <HAL_DMA_IRQHandler+0x1dc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d018      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <HAL_DMA_IRQHandler+0x1e0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	; (8004c70 <HAL_DMA_IRQHandler+0x1e4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_DMA_IRQHandler+0x1e8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <HAL_DMA_IRQHandler+0x1ec>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x194>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <HAL_DMA_IRQHandler+0x1f0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d12f      	bne.n	8004c80 <HAL_DMA_IRQHandler+0x1f4>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf14      	ite	ne
 8004c2e:	2301      	movne	r3, #1
 8004c30:	2300      	moveq	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e02e      	b.n	8004c94 <HAL_DMA_IRQHandler+0x208>
 8004c36:	bf00      	nop
 8004c38:	24000000 	.word	0x24000000
 8004c3c:	1b4e81b5 	.word	0x1b4e81b5
 8004c40:	40020010 	.word	0x40020010
 8004c44:	40020028 	.word	0x40020028
 8004c48:	40020040 	.word	0x40020040
 8004c4c:	40020058 	.word	0x40020058
 8004c50:	40020070 	.word	0x40020070
 8004c54:	40020088 	.word	0x40020088
 8004c58:	400200a0 	.word	0x400200a0
 8004c5c:	400200b8 	.word	0x400200b8
 8004c60:	40020410 	.word	0x40020410
 8004c64:	40020428 	.word	0x40020428
 8004c68:	40020440 	.word	0x40020440
 8004c6c:	40020458 	.word	0x40020458
 8004c70:	40020470 	.word	0x40020470
 8004c74:	40020488 	.word	0x40020488
 8004c78:	400204a0 	.word	0x400204a0
 8004c7c:	400204b8 	.word	0x400204b8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	bf14      	ite	ne
 8004c8e:	2301      	movne	r3, #1
 8004c90:	2300      	moveq	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d015      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	f043 0201 	orr.w	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d06e      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a69      	ldr	r2, [pc, #420]	; (8004e84 <HAL_DMA_IRQHandler+0x3f8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d04a      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a67      	ldr	r2, [pc, #412]	; (8004e88 <HAL_DMA_IRQHandler+0x3fc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d045      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a66      	ldr	r2, [pc, #408]	; (8004e8c <HAL_DMA_IRQHandler+0x400>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d040      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a64      	ldr	r2, [pc, #400]	; (8004e90 <HAL_DMA_IRQHandler+0x404>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d03b      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a63      	ldr	r2, [pc, #396]	; (8004e94 <HAL_DMA_IRQHandler+0x408>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d036      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a61      	ldr	r2, [pc, #388]	; (8004e98 <HAL_DMA_IRQHandler+0x40c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d031      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a60      	ldr	r2, [pc, #384]	; (8004e9c <HAL_DMA_IRQHandler+0x410>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d02c      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5e      	ldr	r2, [pc, #376]	; (8004ea0 <HAL_DMA_IRQHandler+0x414>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d027      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a5d      	ldr	r2, [pc, #372]	; (8004ea4 <HAL_DMA_IRQHandler+0x418>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d022      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a5b      	ldr	r2, [pc, #364]	; (8004ea8 <HAL_DMA_IRQHandler+0x41c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01d      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a5a      	ldr	r2, [pc, #360]	; (8004eac <HAL_DMA_IRQHandler+0x420>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d018      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a58      	ldr	r2, [pc, #352]	; (8004eb0 <HAL_DMA_IRQHandler+0x424>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a57      	ldr	r2, [pc, #348]	; (8004eb4 <HAL_DMA_IRQHandler+0x428>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a55      	ldr	r2, [pc, #340]	; (8004eb8 <HAL_DMA_IRQHandler+0x42c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a54      	ldr	r2, [pc, #336]	; (8004ebc <HAL_DMA_IRQHandler+0x430>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x2ee>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a52      	ldr	r2, [pc, #328]	; (8004ec0 <HAL_DMA_IRQHandler+0x434>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d10a      	bne.n	8004d90 <HAL_DMA_IRQHandler+0x304>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e003      	b.n	8004d98 <HAL_DMA_IRQHandler+0x30c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2201      	movs	r2, #1
 8004da6:	409a      	lsls	r2, r3
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	f043 0202 	orr.w	r2, r3, #2
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 808f 	beq.w	8004eec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <HAL_DMA_IRQHandler+0x3f8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d04a      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <HAL_DMA_IRQHandler+0x3fc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d045      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a29      	ldr	r2, [pc, #164]	; (8004e8c <HAL_DMA_IRQHandler+0x400>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d040      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a27      	ldr	r2, [pc, #156]	; (8004e90 <HAL_DMA_IRQHandler+0x404>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d03b      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a26      	ldr	r2, [pc, #152]	; (8004e94 <HAL_DMA_IRQHandler+0x408>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d036      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a24      	ldr	r2, [pc, #144]	; (8004e98 <HAL_DMA_IRQHandler+0x40c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d031      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <HAL_DMA_IRQHandler+0x410>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d02c      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a21      	ldr	r2, [pc, #132]	; (8004ea0 <HAL_DMA_IRQHandler+0x414>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d027      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a20      	ldr	r2, [pc, #128]	; (8004ea4 <HAL_DMA_IRQHandler+0x418>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <HAL_DMA_IRQHandler+0x41c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01d      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <HAL_DMA_IRQHandler+0x420>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <HAL_DMA_IRQHandler+0x424>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <HAL_DMA_IRQHandler+0x428>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_DMA_IRQHandler+0x42c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HAL_DMA_IRQHandler+0x430>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x3e2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_DMA_IRQHandler+0x434>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d12a      	bne.n	8004ec4 <HAL_DMA_IRQHandler+0x438>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e023      	b.n	8004ecc <HAL_DMA_IRQHandler+0x440>
 8004e84:	40020010 	.word	0x40020010
 8004e88:	40020028 	.word	0x40020028
 8004e8c:	40020040 	.word	0x40020040
 8004e90:	40020058 	.word	0x40020058
 8004e94:	40020070 	.word	0x40020070
 8004e98:	40020088 	.word	0x40020088
 8004e9c:	400200a0 	.word	0x400200a0
 8004ea0:	400200b8 	.word	0x400200b8
 8004ea4:	40020410 	.word	0x40020410
 8004ea8:	40020428 	.word	0x40020428
 8004eac:	40020440 	.word	0x40020440
 8004eb0:	40020458 	.word	0x40020458
 8004eb4:	40020470 	.word	0x40020470
 8004eb8:	40020488 	.word	0x40020488
 8004ebc:	400204a0 	.word	0x400204a0
 8004ec0:	400204b8 	.word	0x400204b8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00d      	beq.n	8004eec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2204      	movs	r2, #4
 8004eda:	409a      	lsls	r2, r3
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f043 0204 	orr.w	r2, r3, #4
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80a6 	beq.w	800504e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a85      	ldr	r2, [pc, #532]	; (800511c <HAL_DMA_IRQHandler+0x690>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d04a      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a83      	ldr	r2, [pc, #524]	; (8005120 <HAL_DMA_IRQHandler+0x694>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d045      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a82      	ldr	r2, [pc, #520]	; (8005124 <HAL_DMA_IRQHandler+0x698>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d040      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a80      	ldr	r2, [pc, #512]	; (8005128 <HAL_DMA_IRQHandler+0x69c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d03b      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a7f      	ldr	r2, [pc, #508]	; (800512c <HAL_DMA_IRQHandler+0x6a0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d036      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a7d      	ldr	r2, [pc, #500]	; (8005130 <HAL_DMA_IRQHandler+0x6a4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d031      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a7c      	ldr	r2, [pc, #496]	; (8005134 <HAL_DMA_IRQHandler+0x6a8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d02c      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a7a      	ldr	r2, [pc, #488]	; (8005138 <HAL_DMA_IRQHandler+0x6ac>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d027      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a79      	ldr	r2, [pc, #484]	; (800513c <HAL_DMA_IRQHandler+0x6b0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d022      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a77      	ldr	r2, [pc, #476]	; (8005140 <HAL_DMA_IRQHandler+0x6b4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01d      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a76      	ldr	r2, [pc, #472]	; (8005144 <HAL_DMA_IRQHandler+0x6b8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d018      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a74      	ldr	r2, [pc, #464]	; (8005148 <HAL_DMA_IRQHandler+0x6bc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a73      	ldr	r2, [pc, #460]	; (800514c <HAL_DMA_IRQHandler+0x6c0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a71      	ldr	r2, [pc, #452]	; (8005150 <HAL_DMA_IRQHandler+0x6c4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a70      	ldr	r2, [pc, #448]	; (8005154 <HAL_DMA_IRQHandler+0x6c8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x516>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a6e      	ldr	r2, [pc, #440]	; (8005158 <HAL_DMA_IRQHandler+0x6cc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_DMA_IRQHandler+0x52c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e009      	b.n	8004fcc <HAL_DMA_IRQHandler+0x540>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d03e      	beq.n	800504e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	2210      	movs	r2, #16
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d108      	bne.n	800500e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	d024      	beq.n	800504e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
 800500c:	e01f      	b.n	800504e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01b      	beq.n	800504e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
 800501e:	e016      	b.n	800504e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0208 	bic.w	r2, r2, #8
 800503c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2220      	movs	r2, #32
 8005058:	409a      	lsls	r2, r3
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8110 	beq.w	8005284 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2c      	ldr	r2, [pc, #176]	; (800511c <HAL_DMA_IRQHandler+0x690>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d04a      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <HAL_DMA_IRQHandler+0x694>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d045      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_DMA_IRQHandler+0x698>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d040      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a28      	ldr	r2, [pc, #160]	; (8005128 <HAL_DMA_IRQHandler+0x69c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d03b      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a26      	ldr	r2, [pc, #152]	; (800512c <HAL_DMA_IRQHandler+0x6a0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d036      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a25      	ldr	r2, [pc, #148]	; (8005130 <HAL_DMA_IRQHandler+0x6a4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d031      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_DMA_IRQHandler+0x6a8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02c      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a22      	ldr	r2, [pc, #136]	; (8005138 <HAL_DMA_IRQHandler+0x6ac>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d027      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a20      	ldr	r2, [pc, #128]	; (800513c <HAL_DMA_IRQHandler+0x6b0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d022      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <HAL_DMA_IRQHandler+0x6b4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d01d      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <HAL_DMA_IRQHandler+0x6b8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d018      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_DMA_IRQHandler+0x6bc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1a      	ldr	r2, [pc, #104]	; (800514c <HAL_DMA_IRQHandler+0x6c0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_DMA_IRQHandler+0x6c4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a17      	ldr	r2, [pc, #92]	; (8005154 <HAL_DMA_IRQHandler+0x6c8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_DMA_IRQHandler+0x678>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a16      	ldr	r2, [pc, #88]	; (8005158 <HAL_DMA_IRQHandler+0x6cc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d12b      	bne.n	800515c <HAL_DMA_IRQHandler+0x6d0>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	e02a      	b.n	8005170 <HAL_DMA_IRQHandler+0x6e4>
 800511a:	bf00      	nop
 800511c:	40020010 	.word	0x40020010
 8005120:	40020028 	.word	0x40020028
 8005124:	40020040 	.word	0x40020040
 8005128:	40020058 	.word	0x40020058
 800512c:	40020070 	.word	0x40020070
 8005130:	40020088 	.word	0x40020088
 8005134:	400200a0 	.word	0x400200a0
 8005138:	400200b8 	.word	0x400200b8
 800513c:	40020410 	.word	0x40020410
 8005140:	40020428 	.word	0x40020428
 8005144:	40020440 	.word	0x40020440
 8005148:	40020458 	.word	0x40020458
 800514c:	40020470 	.word	0x40020470
 8005150:	40020488 	.word	0x40020488
 8005154:	400204a0 	.word	0x400204a0
 8005158:	400204b8 	.word	0x400204b8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf14      	ite	ne
 800516a:	2301      	movne	r3, #1
 800516c:	2300      	moveq	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8087 	beq.w	8005284 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	2220      	movs	r2, #32
 8005180:	409a      	lsls	r2, r3
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b04      	cmp	r3, #4
 8005190:	d139      	bne.n	8005206 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0216 	bic.w	r2, r2, #22
 80051a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <HAL_DMA_IRQHandler+0x736>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0208 	bic.w	r2, r2, #8
 80051d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	223f      	movs	r2, #63	; 0x3f
 80051dc:	409a      	lsls	r2, r3
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 834a 	beq.w	8005890 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
          }
          return;
 8005204:	e344      	b.n	8005890 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d018      	beq.n	8005246 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d108      	bne.n	8005234 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	2b00      	cmp	r3, #0
 8005228:	d02c      	beq.n	8005284 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
 8005232:	e027      	b.n	8005284 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d023      	beq.n	8005284 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4798      	blx	r3
 8005244:	e01e      	b.n	8005284 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10f      	bne.n	8005274 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0210 	bic.w	r2, r2, #16
 8005262:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8306 	beq.w	800589a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8088 	beq.w	80053ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2204      	movs	r2, #4
 80052a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7a      	ldr	r2, [pc, #488]	; (8005494 <HAL_DMA_IRQHandler+0xa08>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d04a      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a79      	ldr	r2, [pc, #484]	; (8005498 <HAL_DMA_IRQHandler+0xa0c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d045      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a77      	ldr	r2, [pc, #476]	; (800549c <HAL_DMA_IRQHandler+0xa10>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d040      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a76      	ldr	r2, [pc, #472]	; (80054a0 <HAL_DMA_IRQHandler+0xa14>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d03b      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a74      	ldr	r2, [pc, #464]	; (80054a4 <HAL_DMA_IRQHandler+0xa18>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d036      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a73      	ldr	r2, [pc, #460]	; (80054a8 <HAL_DMA_IRQHandler+0xa1c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d031      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a71      	ldr	r2, [pc, #452]	; (80054ac <HAL_DMA_IRQHandler+0xa20>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d02c      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a70      	ldr	r2, [pc, #448]	; (80054b0 <HAL_DMA_IRQHandler+0xa24>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d027      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a6e      	ldr	r2, [pc, #440]	; (80054b4 <HAL_DMA_IRQHandler+0xa28>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d022      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a6d      	ldr	r2, [pc, #436]	; (80054b8 <HAL_DMA_IRQHandler+0xa2c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d01d      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6b      	ldr	r2, [pc, #428]	; (80054bc <HAL_DMA_IRQHandler+0xa30>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d018      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a6a      	ldr	r2, [pc, #424]	; (80054c0 <HAL_DMA_IRQHandler+0xa34>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a68      	ldr	r2, [pc, #416]	; (80054c4 <HAL_DMA_IRQHandler+0xa38>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00e      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a67      	ldr	r2, [pc, #412]	; (80054c8 <HAL_DMA_IRQHandler+0xa3c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d009      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a65      	ldr	r2, [pc, #404]	; (80054cc <HAL_DMA_IRQHandler+0xa40>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <HAL_DMA_IRQHandler+0x8b8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a64      	ldr	r2, [pc, #400]	; (80054d0 <HAL_DMA_IRQHandler+0xa44>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d108      	bne.n	8005356 <HAL_DMA_IRQHandler+0x8ca>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e007      	b.n	8005366 <HAL_DMA_IRQHandler+0x8da>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0201 	bic.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536e:	429a      	cmp	r2, r3
 8005370:	d307      	bcc.n	8005382 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f2      	bne.n	8005366 <HAL_DMA_IRQHandler+0x8da>
 8005380:	e000      	b.n	8005384 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005382:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2203      	movs	r2, #3
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800539a:	e003      	b.n	80053a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8272 	beq.w	800589a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	4798      	blx	r3
 80053be:	e26c      	b.n	800589a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a43      	ldr	r2, [pc, #268]	; (80054d4 <HAL_DMA_IRQHandler+0xa48>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d022      	beq.n	8005410 <HAL_DMA_IRQHandler+0x984>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a42      	ldr	r2, [pc, #264]	; (80054d8 <HAL_DMA_IRQHandler+0xa4c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d01d      	beq.n	8005410 <HAL_DMA_IRQHandler+0x984>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a40      	ldr	r2, [pc, #256]	; (80054dc <HAL_DMA_IRQHandler+0xa50>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d018      	beq.n	8005410 <HAL_DMA_IRQHandler+0x984>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a3f      	ldr	r2, [pc, #252]	; (80054e0 <HAL_DMA_IRQHandler+0xa54>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <HAL_DMA_IRQHandler+0x984>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3d      	ldr	r2, [pc, #244]	; (80054e4 <HAL_DMA_IRQHandler+0xa58>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00e      	beq.n	8005410 <HAL_DMA_IRQHandler+0x984>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a3c      	ldr	r2, [pc, #240]	; (80054e8 <HAL_DMA_IRQHandler+0xa5c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d009      	beq.n	8005410 <HAL_DMA_IRQHandler+0x984>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <HAL_DMA_IRQHandler+0xa60>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d004      	beq.n	8005410 <HAL_DMA_IRQHandler+0x984>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a39      	ldr	r2, [pc, #228]	; (80054f0 <HAL_DMA_IRQHandler+0xa64>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d101      	bne.n	8005414 <HAL_DMA_IRQHandler+0x988>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_DMA_IRQHandler+0x98a>
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 823f 	beq.w	800589a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	2204      	movs	r2, #4
 800542e:	409a      	lsls	r2, r3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80cd 	beq.w	80055d4 <HAL_DMA_IRQHandler+0xb48>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80c7 	beq.w	80055d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	2204      	movs	r2, #4
 8005450:	409a      	lsls	r2, r3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d049      	beq.n	80054f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d109      	bne.n	800547e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8210 	beq.w	8005894 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800547c:	e20a      	b.n	8005894 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8206 	beq.w	8005894 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005490:	e200      	b.n	8005894 <HAL_DMA_IRQHandler+0xe08>
 8005492:	bf00      	nop
 8005494:	40020010 	.word	0x40020010
 8005498:	40020028 	.word	0x40020028
 800549c:	40020040 	.word	0x40020040
 80054a0:	40020058 	.word	0x40020058
 80054a4:	40020070 	.word	0x40020070
 80054a8:	40020088 	.word	0x40020088
 80054ac:	400200a0 	.word	0x400200a0
 80054b0:	400200b8 	.word	0x400200b8
 80054b4:	40020410 	.word	0x40020410
 80054b8:	40020428 	.word	0x40020428
 80054bc:	40020440 	.word	0x40020440
 80054c0:	40020458 	.word	0x40020458
 80054c4:	40020470 	.word	0x40020470
 80054c8:	40020488 	.word	0x40020488
 80054cc:	400204a0 	.word	0x400204a0
 80054d0:	400204b8 	.word	0x400204b8
 80054d4:	58025408 	.word	0x58025408
 80054d8:	5802541c 	.word	0x5802541c
 80054dc:	58025430 	.word	0x58025430
 80054e0:	58025444 	.word	0x58025444
 80054e4:	58025458 	.word	0x58025458
 80054e8:	5802546c 	.word	0x5802546c
 80054ec:	58025480 	.word	0x58025480
 80054f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d160      	bne.n	80055c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7f      	ldr	r2, [pc, #508]	; (8005700 <HAL_DMA_IRQHandler+0xc74>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d04a      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a7d      	ldr	r2, [pc, #500]	; (8005704 <HAL_DMA_IRQHandler+0xc78>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d045      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7c      	ldr	r2, [pc, #496]	; (8005708 <HAL_DMA_IRQHandler+0xc7c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d040      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a7a      	ldr	r2, [pc, #488]	; (800570c <HAL_DMA_IRQHandler+0xc80>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d03b      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a79      	ldr	r2, [pc, #484]	; (8005710 <HAL_DMA_IRQHandler+0xc84>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d036      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a77      	ldr	r2, [pc, #476]	; (8005714 <HAL_DMA_IRQHandler+0xc88>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d031      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a76      	ldr	r2, [pc, #472]	; (8005718 <HAL_DMA_IRQHandler+0xc8c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d02c      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a74      	ldr	r2, [pc, #464]	; (800571c <HAL_DMA_IRQHandler+0xc90>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d027      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a73      	ldr	r2, [pc, #460]	; (8005720 <HAL_DMA_IRQHandler+0xc94>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d022      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a71      	ldr	r2, [pc, #452]	; (8005724 <HAL_DMA_IRQHandler+0xc98>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01d      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a70      	ldr	r2, [pc, #448]	; (8005728 <HAL_DMA_IRQHandler+0xc9c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d018      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a6e      	ldr	r2, [pc, #440]	; (800572c <HAL_DMA_IRQHandler+0xca0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a6d      	ldr	r2, [pc, #436]	; (8005730 <HAL_DMA_IRQHandler+0xca4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a6b      	ldr	r2, [pc, #428]	; (8005734 <HAL_DMA_IRQHandler+0xca8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d009      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a6a      	ldr	r2, [pc, #424]	; (8005738 <HAL_DMA_IRQHandler+0xcac>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_DMA_IRQHandler+0xb12>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a68      	ldr	r2, [pc, #416]	; (800573c <HAL_DMA_IRQHandler+0xcb0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d108      	bne.n	80055b0 <HAL_DMA_IRQHandler+0xb24>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0208 	bic.w	r2, r2, #8
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e007      	b.n	80055c0 <HAL_DMA_IRQHandler+0xb34>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0204 	bic.w	r2, r2, #4
 80055be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8165 	beq.w	8005894 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055d2:	e15f      	b.n	8005894 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2202      	movs	r2, #2
 80055de:	409a      	lsls	r2, r3
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80c5 	beq.w	8005774 <HAL_DMA_IRQHandler+0xce8>
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80bf 	beq.w	8005774 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2202      	movs	r2, #2
 8005600:	409a      	lsls	r2, r3
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d018      	beq.n	8005642 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 813a 	beq.w	8005898 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800562c:	e134      	b.n	8005898 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8130 	beq.w	8005898 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005640:	e12a      	b.n	8005898 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 8089 	bne.w	8005760 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <HAL_DMA_IRQHandler+0xc74>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d04a      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a29      	ldr	r2, [pc, #164]	; (8005704 <HAL_DMA_IRQHandler+0xc78>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d045      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a28      	ldr	r2, [pc, #160]	; (8005708 <HAL_DMA_IRQHandler+0xc7c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d040      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a26      	ldr	r2, [pc, #152]	; (800570c <HAL_DMA_IRQHandler+0xc80>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d03b      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a25      	ldr	r2, [pc, #148]	; (8005710 <HAL_DMA_IRQHandler+0xc84>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d036      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a23      	ldr	r2, [pc, #140]	; (8005714 <HAL_DMA_IRQHandler+0xc88>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d031      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a22      	ldr	r2, [pc, #136]	; (8005718 <HAL_DMA_IRQHandler+0xc8c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d02c      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a20      	ldr	r2, [pc, #128]	; (800571c <HAL_DMA_IRQHandler+0xc90>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d027      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1f      	ldr	r2, [pc, #124]	; (8005720 <HAL_DMA_IRQHandler+0xc94>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d022      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <HAL_DMA_IRQHandler+0xc98>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01d      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <HAL_DMA_IRQHandler+0xc9c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d018      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1a      	ldr	r2, [pc, #104]	; (800572c <HAL_DMA_IRQHandler+0xca0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a19      	ldr	r2, [pc, #100]	; (8005730 <HAL_DMA_IRQHandler+0xca4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a17      	ldr	r2, [pc, #92]	; (8005734 <HAL_DMA_IRQHandler+0xca8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a16      	ldr	r2, [pc, #88]	; (8005738 <HAL_DMA_IRQHandler+0xcac>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_DMA_IRQHandler+0xc62>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a14      	ldr	r2, [pc, #80]	; (800573c <HAL_DMA_IRQHandler+0xcb0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d128      	bne.n	8005740 <HAL_DMA_IRQHandler+0xcb4>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0214 	bic.w	r2, r2, #20
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e027      	b.n	8005750 <HAL_DMA_IRQHandler+0xcc4>
 8005700:	40020010 	.word	0x40020010
 8005704:	40020028 	.word	0x40020028
 8005708:	40020040 	.word	0x40020040
 800570c:	40020058 	.word	0x40020058
 8005710:	40020070 	.word	0x40020070
 8005714:	40020088 	.word	0x40020088
 8005718:	400200a0 	.word	0x400200a0
 800571c:	400200b8 	.word	0x400200b8
 8005720:	40020410 	.word	0x40020410
 8005724:	40020428 	.word	0x40020428
 8005728:	40020440 	.word	0x40020440
 800572c:	40020458 	.word	0x40020458
 8005730:	40020470 	.word	0x40020470
 8005734:	40020488 	.word	0x40020488
 8005738:	400204a0 	.word	0x400204a0
 800573c:	400204b8 	.word	0x400204b8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 020a 	bic.w	r2, r2, #10
 800574e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8097 	beq.w	8005898 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005772:	e091      	b.n	8005898 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2208      	movs	r2, #8
 800577e:	409a      	lsls	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8088 	beq.w	800589a <HAL_DMA_IRQHandler+0xe0e>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8082 	beq.w	800589a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a41      	ldr	r2, [pc, #260]	; (80058a0 <HAL_DMA_IRQHandler+0xe14>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d04a      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a3f      	ldr	r2, [pc, #252]	; (80058a4 <HAL_DMA_IRQHandler+0xe18>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d045      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a3e      	ldr	r2, [pc, #248]	; (80058a8 <HAL_DMA_IRQHandler+0xe1c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d040      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a3c      	ldr	r2, [pc, #240]	; (80058ac <HAL_DMA_IRQHandler+0xe20>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d03b      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3b      	ldr	r2, [pc, #236]	; (80058b0 <HAL_DMA_IRQHandler+0xe24>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d036      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a39      	ldr	r2, [pc, #228]	; (80058b4 <HAL_DMA_IRQHandler+0xe28>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d031      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a38      	ldr	r2, [pc, #224]	; (80058b8 <HAL_DMA_IRQHandler+0xe2c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d02c      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a36      	ldr	r2, [pc, #216]	; (80058bc <HAL_DMA_IRQHandler+0xe30>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d027      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a35      	ldr	r2, [pc, #212]	; (80058c0 <HAL_DMA_IRQHandler+0xe34>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a33      	ldr	r2, [pc, #204]	; (80058c4 <HAL_DMA_IRQHandler+0xe38>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d01d      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a32      	ldr	r2, [pc, #200]	; (80058c8 <HAL_DMA_IRQHandler+0xe3c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a30      	ldr	r2, [pc, #192]	; (80058cc <HAL_DMA_IRQHandler+0xe40>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2f      	ldr	r2, [pc, #188]	; (80058d0 <HAL_DMA_IRQHandler+0xe44>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a2d      	ldr	r2, [pc, #180]	; (80058d4 <HAL_DMA_IRQHandler+0xe48>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a2c      	ldr	r2, [pc, #176]	; (80058d8 <HAL_DMA_IRQHandler+0xe4c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_DMA_IRQHandler+0xdaa>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <HAL_DMA_IRQHandler+0xe50>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <HAL_DMA_IRQHandler+0xdbc>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 021c 	bic.w	r2, r2, #28
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e007      	b.n	8005858 <HAL_DMA_IRQHandler+0xdcc>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 020e 	bic.w	r2, r2, #14
 8005856:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2201      	movs	r2, #1
 8005862:	409a      	lsls	r2, r3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d009      	beq.n	800589a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
 800588e:	e004      	b.n	800589a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005890:	bf00      	nop
 8005892:	e002      	b.n	800589a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005898:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800589a:	3728      	adds	r7, #40	; 0x28
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40020010 	.word	0x40020010
 80058a4:	40020028 	.word	0x40020028
 80058a8:	40020040 	.word	0x40020040
 80058ac:	40020058 	.word	0x40020058
 80058b0:	40020070 	.word	0x40020070
 80058b4:	40020088 	.word	0x40020088
 80058b8:	400200a0 	.word	0x400200a0
 80058bc:	400200b8 	.word	0x400200b8
 80058c0:	40020410 	.word	0x40020410
 80058c4:	40020428 	.word	0x40020428
 80058c8:	40020440 	.word	0x40020440
 80058cc:	40020458 	.word	0x40020458
 80058d0:	40020470 	.word	0x40020470
 80058d4:	40020488 	.word	0x40020488
 80058d8:	400204a0 	.word	0x400204a0
 80058dc:	400204b8 	.word	0x400204b8

080058e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a42      	ldr	r2, [pc, #264]	; (80059f8 <DMA_CalcBaseAndBitshift+0x118>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d04a      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a41      	ldr	r2, [pc, #260]	; (80059fc <DMA_CalcBaseAndBitshift+0x11c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d045      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3f      	ldr	r2, [pc, #252]	; (8005a00 <DMA_CalcBaseAndBitshift+0x120>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d040      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3e      	ldr	r2, [pc, #248]	; (8005a04 <DMA_CalcBaseAndBitshift+0x124>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d03b      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a3c      	ldr	r2, [pc, #240]	; (8005a08 <DMA_CalcBaseAndBitshift+0x128>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d036      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a3b      	ldr	r2, [pc, #236]	; (8005a0c <DMA_CalcBaseAndBitshift+0x12c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d031      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a39      	ldr	r2, [pc, #228]	; (8005a10 <DMA_CalcBaseAndBitshift+0x130>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d02c      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a38      	ldr	r2, [pc, #224]	; (8005a14 <DMA_CalcBaseAndBitshift+0x134>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d027      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a36      	ldr	r2, [pc, #216]	; (8005a18 <DMA_CalcBaseAndBitshift+0x138>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a35      	ldr	r2, [pc, #212]	; (8005a1c <DMA_CalcBaseAndBitshift+0x13c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d01d      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <DMA_CalcBaseAndBitshift+0x140>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a32      	ldr	r2, [pc, #200]	; (8005a24 <DMA_CalcBaseAndBitshift+0x144>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <DMA_CalcBaseAndBitshift+0x148>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a2f      	ldr	r2, [pc, #188]	; (8005a2c <DMA_CalcBaseAndBitshift+0x14c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a2d      	ldr	r2, [pc, #180]	; (8005a30 <DMA_CalcBaseAndBitshift+0x150>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <DMA_CalcBaseAndBitshift+0xa8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2c      	ldr	r2, [pc, #176]	; (8005a34 <DMA_CalcBaseAndBitshift+0x154>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d101      	bne.n	800598c <DMA_CalcBaseAndBitshift+0xac>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <DMA_CalcBaseAndBitshift+0xae>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d024      	beq.n	80059dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	3b10      	subs	r3, #16
 800599a:	4a27      	ldr	r2, [pc, #156]	; (8005a38 <DMA_CalcBaseAndBitshift+0x158>)
 800599c:	fba2 2303 	umull	r2, r3, r2, r3
 80059a0:	091b      	lsrs	r3, r3, #4
 80059a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <DMA_CalcBaseAndBitshift+0x15c>)
 80059ac:	5cd3      	ldrb	r3, [r2, r3]
 80059ae:	461a      	mov	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d908      	bls.n	80059cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	4b1f      	ldr	r3, [pc, #124]	; (8005a40 <DMA_CalcBaseAndBitshift+0x160>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	1d1a      	adds	r2, r3, #4
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	659a      	str	r2, [r3, #88]	; 0x58
 80059ca:	e00d      	b.n	80059e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <DMA_CalcBaseAndBitshift+0x160>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6593      	str	r3, [r2, #88]	; 0x58
 80059da:	e005      	b.n	80059e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40020010 	.word	0x40020010
 80059fc:	40020028 	.word	0x40020028
 8005a00:	40020040 	.word	0x40020040
 8005a04:	40020058 	.word	0x40020058
 8005a08:	40020070 	.word	0x40020070
 8005a0c:	40020088 	.word	0x40020088
 8005a10:	400200a0 	.word	0x400200a0
 8005a14:	400200b8 	.word	0x400200b8
 8005a18:	40020410 	.word	0x40020410
 8005a1c:	40020428 	.word	0x40020428
 8005a20:	40020440 	.word	0x40020440
 8005a24:	40020458 	.word	0x40020458
 8005a28:	40020470 	.word	0x40020470
 8005a2c:	40020488 	.word	0x40020488
 8005a30:	400204a0 	.word	0x400204a0
 8005a34:	400204b8 	.word	0x400204b8
 8005a38:	aaaaaaab 	.word	0xaaaaaaab
 8005a3c:	08010100 	.word	0x08010100
 8005a40:	fffffc00 	.word	0xfffffc00

08005a44 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d120      	bne.n	8005a9a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d858      	bhi.n	8005b12 <DMA_CheckFifoParam+0xce>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <DMA_CheckFifoParam+0x24>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a79 	.word	0x08005a79
 8005a6c:	08005a8b 	.word	0x08005a8b
 8005a70:	08005a79 	.word	0x08005a79
 8005a74:	08005b13 	.word	0x08005b13
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d048      	beq.n	8005b16 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a88:	e045      	b.n	8005b16 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a92:	d142      	bne.n	8005b1a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a98:	e03f      	b.n	8005b1a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa2:	d123      	bne.n	8005aec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d838      	bhi.n	8005b1e <DMA_CheckFifoParam+0xda>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <DMA_CheckFifoParam+0x70>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005acb 	.word	0x08005acb
 8005abc:	08005ac5 	.word	0x08005ac5
 8005ac0:	08005add 	.word	0x08005add
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
        break;
 8005ac8:	e030      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d025      	beq.n	8005b22 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ada:	e022      	b.n	8005b22 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ae4:	d11f      	bne.n	8005b26 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aea:	e01c      	b.n	8005b26 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d902      	bls.n	8005afa <DMA_CheckFifoParam+0xb6>
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d003      	beq.n	8005b00 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005af8:	e018      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	73fb      	strb	r3, [r7, #15]
        break;
 8005afe:	e015      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8005b10:	e00b      	b.n	8005b2a <DMA_CheckFifoParam+0xe6>
        break;
 8005b12:	bf00      	nop
 8005b14:	e00a      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
        break;
 8005b16:	bf00      	nop
 8005b18:	e008      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
        break;
 8005b1a:	bf00      	nop
 8005b1c:	e006      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
        break;
 8005b1e:	bf00      	nop
 8005b20:	e004      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
        break;
 8005b22:	bf00      	nop
 8005b24:	e002      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
        break;
 8005b26:	bf00      	nop
 8005b28:	e000      	b.n	8005b2c <DMA_CheckFifoParam+0xe8>
    break;
 8005b2a:	bf00      	nop
    }
  }

  return status;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop

08005b3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a38      	ldr	r2, [pc, #224]	; (8005c30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a36      	ldr	r2, [pc, #216]	; (8005c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a35      	ldr	r2, [pc, #212]	; (8005c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a33      	ldr	r2, [pc, #204]	; (8005c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a32      	ldr	r2, [pc, #200]	; (8005c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a30      	ldr	r2, [pc, #192]	; (8005c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2d      	ldr	r2, [pc, #180]	; (8005c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01a      	beq.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	3b08      	subs	r3, #8
 8005bac:	4a28      	ldr	r2, [pc, #160]	; (8005c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a24      	ldr	r2, [pc, #144]	; (8005c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005bc8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	409a      	lsls	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005bd8:	e024      	b.n	8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	3b10      	subs	r3, #16
 8005be2:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d806      	bhi.n	8005c02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4a1b      	ldr	r2, [pc, #108]	; (8005c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d902      	bls.n	8005c02 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005c14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	58025408 	.word	0x58025408
 8005c34:	5802541c 	.word	0x5802541c
 8005c38:	58025430 	.word	0x58025430
 8005c3c:	58025444 	.word	0x58025444
 8005c40:	58025458 	.word	0x58025458
 8005c44:	5802546c 	.word	0x5802546c
 8005c48:	58025480 	.word	0x58025480
 8005c4c:	58025494 	.word	0x58025494
 8005c50:	cccccccd 	.word	0xcccccccd
 8005c54:	16009600 	.word	0x16009600
 8005c58:	58025880 	.word	0x58025880
 8005c5c:	aaaaaaab 	.word	0xaaaaaaab
 8005c60:	400204b8 	.word	0x400204b8
 8005c64:	4002040f 	.word	0x4002040f
 8005c68:	10008200 	.word	0x10008200
 8005c6c:	40020880 	.word	0x40020880

08005c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d04a      	beq.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d847      	bhi.n	8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d022      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d01d      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d018      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d013      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00e      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d009      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d004      	beq.n	8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d101      	bne.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005cf8:	671a      	str	r2, [r3, #112]	; 0x70
 8005cfa:	e009      	b.n	8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	461a      	mov	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005d0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	2201      	movs	r2, #1
 8005d16:	409a      	lsls	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	58025408 	.word	0x58025408
 8005d2c:	5802541c 	.word	0x5802541c
 8005d30:	58025430 	.word	0x58025430
 8005d34:	58025444 	.word	0x58025444
 8005d38:	58025458 	.word	0x58025458
 8005d3c:	5802546c 	.word	0x5802546c
 8005d40:	58025480 	.word	0x58025480
 8005d44:	58025494 	.word	0x58025494
 8005d48:	1600963f 	.word	0x1600963f
 8005d4c:	58025940 	.word	0x58025940
 8005d50:	1000823f 	.word	0x1000823f
 8005d54:	40020940 	.word	0x40020940

08005d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b089      	sub	sp, #36	; 0x24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d66:	4b89      	ldr	r3, [pc, #548]	; (8005f8c <HAL_GPIO_Init+0x234>)
 8005d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d6a:	e194      	b.n	8006096 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	2101      	movs	r1, #1
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	fa01 f303 	lsl.w	r3, r1, r3
 8005d78:	4013      	ands	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8186 	beq.w	8006090 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d005      	beq.n	8005d9c <HAL_GPIO_Init+0x44>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d130      	bne.n	8005dfe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	2203      	movs	r2, #3
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	4013      	ands	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4013      	ands	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	091b      	lsrs	r3, r3, #4
 8005de8:	f003 0201 	and.w	r2, r3, #1
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d017      	beq.n	8005e3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	2203      	movs	r2, #3
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d123      	bne.n	8005e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	08da      	lsrs	r2, r3, #3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3208      	adds	r2, #8
 8005e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	220f      	movs	r2, #15
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	08da      	lsrs	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3208      	adds	r2, #8
 8005e88:	69b9      	ldr	r1, [r7, #24]
 8005e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	2203      	movs	r2, #3
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0203 	and.w	r2, r3, #3
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80e0 	beq.w	8006090 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ed0:	4b2f      	ldr	r3, [pc, #188]	; (8005f90 <HAL_GPIO_Init+0x238>)
 8005ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ed6:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <HAL_GPIO_Init+0x238>)
 8005ed8:	f043 0302 	orr.w	r3, r3, #2
 8005edc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ee0:	4b2b      	ldr	r3, [pc, #172]	; (8005f90 <HAL_GPIO_Init+0x238>)
 8005ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eee:	4a29      	ldr	r2, [pc, #164]	; (8005f94 <HAL_GPIO_Init+0x23c>)
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	089b      	lsrs	r3, r3, #2
 8005ef4:	3302      	adds	r3, #2
 8005ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	220f      	movs	r2, #15
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <HAL_GPIO_Init+0x240>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d052      	beq.n	8005fc0 <HAL_GPIO_Init+0x268>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <HAL_GPIO_Init+0x244>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d031      	beq.n	8005f86 <HAL_GPIO_Init+0x22e>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <HAL_GPIO_Init+0x248>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d02b      	beq.n	8005f82 <HAL_GPIO_Init+0x22a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <HAL_GPIO_Init+0x24c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d025      	beq.n	8005f7e <HAL_GPIO_Init+0x226>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1c      	ldr	r2, [pc, #112]	; (8005fa8 <HAL_GPIO_Init+0x250>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d01f      	beq.n	8005f7a <HAL_GPIO_Init+0x222>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <HAL_GPIO_Init+0x254>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d019      	beq.n	8005f76 <HAL_GPIO_Init+0x21e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1a      	ldr	r2, [pc, #104]	; (8005fb0 <HAL_GPIO_Init+0x258>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <HAL_GPIO_Init+0x21a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a19      	ldr	r2, [pc, #100]	; (8005fb4 <HAL_GPIO_Init+0x25c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00d      	beq.n	8005f6e <HAL_GPIO_Init+0x216>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <HAL_GPIO_Init+0x260>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d007      	beq.n	8005f6a <HAL_GPIO_Init+0x212>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <HAL_GPIO_Init+0x264>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d101      	bne.n	8005f66 <HAL_GPIO_Init+0x20e>
 8005f62:	2309      	movs	r3, #9
 8005f64:	e02d      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f66:	230a      	movs	r3, #10
 8005f68:	e02b      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	e029      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f6e:	2307      	movs	r3, #7
 8005f70:	e027      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f72:	2306      	movs	r3, #6
 8005f74:	e025      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f76:	2305      	movs	r3, #5
 8005f78:	e023      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	e021      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e01f      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e01d      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e01b      	b.n	8005fc2 <HAL_GPIO_Init+0x26a>
 8005f8a:	bf00      	nop
 8005f8c:	58000080 	.word	0x58000080
 8005f90:	58024400 	.word	0x58024400
 8005f94:	58000400 	.word	0x58000400
 8005f98:	58020000 	.word	0x58020000
 8005f9c:	58020400 	.word	0x58020400
 8005fa0:	58020800 	.word	0x58020800
 8005fa4:	58020c00 	.word	0x58020c00
 8005fa8:	58021000 	.word	0x58021000
 8005fac:	58021400 	.word	0x58021400
 8005fb0:	58021800 	.word	0x58021800
 8005fb4:	58021c00 	.word	0x58021c00
 8005fb8:	58022000 	.word	0x58022000
 8005fbc:	58022400 	.word	0x58022400
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	f002 0203 	and.w	r2, r2, #3
 8005fc8:	0092      	lsls	r2, r2, #2
 8005fca:	4093      	lsls	r3, r2
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fd2:	4938      	ldr	r1, [pc, #224]	; (80060b4 <HAL_GPIO_Init+0x35c>)
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	089b      	lsrs	r3, r3, #2
 8005fd8:	3302      	adds	r3, #2
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	43db      	mvns	r3, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800600e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	43db      	mvns	r3, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4013      	ands	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3301      	adds	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f47f ae63 	bne.w	8005d6c <HAL_GPIO_Init+0x14>
  }
}
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	3724      	adds	r7, #36	; 0x24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	58000400 	.word	0x58000400

080060b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	807b      	strh	r3, [r7, #2]
 80060c4:	4613      	mov	r3, r2
 80060c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060c8:	787b      	ldrb	r3, [r7, #1]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ce:	887a      	ldrh	r2, [r7, #2]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060d4:	e003      	b.n	80060de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	041a      	lsls	r2, r3, #16
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	619a      	str	r2, [r3, #24]
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e08b      	b.n	8006216 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fa ffc4 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2224      	movs	r2, #36	; 0x24
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0201 	bic.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800613c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800614c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d107      	bne.n	8006166 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006162:	609a      	str	r2, [r3, #8]
 8006164:	e006      	b.n	8006174 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006172:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d108      	bne.n	800618e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	e007      	b.n	800619e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800619c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6859      	ldr	r1, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <HAL_I2C_Init+0x134>)
 80061aa:	430b      	orrs	r3, r1
 80061ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69d9      	ldr	r1, [r3, #28]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1a      	ldr	r2, [r3, #32]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	02008000 	.word	0x02008000

08006224 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b20      	cmp	r3, #32
 8006238:	d138      	bne.n	80062ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006244:	2302      	movs	r3, #2
 8006246:	e032      	b.n	80062ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2224      	movs	r2, #36	; 0x24
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006276:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e000      	b.n	80062ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062ac:	2302      	movs	r3, #2
  }
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b085      	sub	sp, #20
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d139      	bne.n	8006344 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062da:	2302      	movs	r3, #2
 80062dc:	e033      	b.n	8006346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2224      	movs	r2, #36	; 0x24
 80062ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800630c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	e000      	b.n	8006346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
  }
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800635c:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800635e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006362:	4a0c      	ldr	r2, [pc, #48]	; (8006394 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8006364:	f043 0302 	orr.w	r3, r3, #2
 8006368:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800636c:	4b09      	ldr	r3, [pc, #36]	; (8006394 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800636e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800637a:	4b07      	ldr	r3, [pc, #28]	; (8006398 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	4906      	ldr	r1, [pc, #24]	; (8006398 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4313      	orrs	r3, r2
 8006384:	604b      	str	r3, [r1, #4]
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	58024400 	.word	0x58024400
 8006398:	58000400 	.word	0x58000400

0800639c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80063a4:	4b19      	ldr	r3, [pc, #100]	; (800640c <HAL_PWREx_ConfigSupply+0x70>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d00a      	beq.n	80063c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80063b0:	4b16      	ldr	r3, [pc, #88]	; (800640c <HAL_PWREx_ConfigSupply+0x70>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d001      	beq.n	80063c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e01f      	b.n	8006402 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e01d      	b.n	8006402 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80063c6:	4b11      	ldr	r3, [pc, #68]	; (800640c <HAL_PWREx_ConfigSupply+0x70>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f023 0207 	bic.w	r2, r3, #7
 80063ce:	490f      	ldr	r1, [pc, #60]	; (800640c <HAL_PWREx_ConfigSupply+0x70>)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80063d6:	f7fb ff23 	bl	8002220 <HAL_GetTick>
 80063da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063dc:	e009      	b.n	80063f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063de:	f7fb ff1f 	bl	8002220 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063ec:	d901      	bls.n	80063f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e007      	b.n	8006402 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80063f2:	4b06      	ldr	r3, [pc, #24]	; (800640c <HAL_PWREx_ConfigSupply+0x70>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fe:	d1ee      	bne.n	80063de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	58024800 	.word	0x58024800

08006410 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08c      	sub	sp, #48	; 0x30
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d102      	bne.n	8006424 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	f000 bc48 	b.w	8006cb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8088 	beq.w	8006542 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006432:	4b99      	ldr	r3, [pc, #612]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800643c:	4b96      	ldr	r3, [pc, #600]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2b10      	cmp	r3, #16
 8006446:	d007      	beq.n	8006458 <HAL_RCC_OscConfig+0x48>
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	2b18      	cmp	r3, #24
 800644c:	d111      	bne.n	8006472 <HAL_RCC_OscConfig+0x62>
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	f003 0303 	and.w	r3, r3, #3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d10c      	bne.n	8006472 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	4b8f      	ldr	r3, [pc, #572]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d06d      	beq.n	8006540 <HAL_RCC_OscConfig+0x130>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d169      	bne.n	8006540 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f000 bc21 	b.w	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647a:	d106      	bne.n	800648a <HAL_RCC_OscConfig+0x7a>
 800647c:	4b86      	ldr	r3, [pc, #536]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a85      	ldr	r2, [pc, #532]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	e02e      	b.n	80064e8 <HAL_RCC_OscConfig+0xd8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0x9c>
 8006492:	4b81      	ldr	r3, [pc, #516]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a80      	ldr	r2, [pc, #512]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4b7e      	ldr	r3, [pc, #504]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a7d      	ldr	r2, [pc, #500]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e01d      	b.n	80064e8 <HAL_RCC_OscConfig+0xd8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCC_OscConfig+0xc0>
 80064b6:	4b78      	ldr	r3, [pc, #480]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a77      	ldr	r2, [pc, #476]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4b75      	ldr	r3, [pc, #468]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a74      	ldr	r2, [pc, #464]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	e00b      	b.n	80064e8 <HAL_RCC_OscConfig+0xd8>
 80064d0:	4b71      	ldr	r3, [pc, #452]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a70      	ldr	r2, [pc, #448]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	4b6e      	ldr	r3, [pc, #440]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a6d      	ldr	r2, [pc, #436]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80064e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d013      	beq.n	8006518 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f0:	f7fb fe96 	bl	8002220 <HAL_GetTick>
 80064f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f8:	f7fb fe92 	bl	8002220 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b64      	cmp	r3, #100	; 0x64
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e3d4      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800650a:	4b63      	ldr	r3, [pc, #396]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0xe8>
 8006516:	e014      	b.n	8006542 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006518:	f7fb fe82 	bl	8002220 <HAL_GetTick>
 800651c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006520:	f7fb fe7e 	bl	8002220 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b64      	cmp	r3, #100	; 0x64
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e3c0      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006532:	4b59      	ldr	r3, [pc, #356]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f0      	bne.n	8006520 <HAL_RCC_OscConfig+0x110>
 800653e:	e000      	b.n	8006542 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80ca 	beq.w	80066e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006550:	4b51      	ldr	r3, [pc, #324]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006558:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800655a:	4b4f      	ldr	r3, [pc, #316]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <HAL_RCC_OscConfig+0x166>
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	2b18      	cmp	r3, #24
 800656a:	d156      	bne.n	800661a <HAL_RCC_OscConfig+0x20a>
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d151      	bne.n	800661a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006576:	4b48      	ldr	r3, [pc, #288]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_RCC_OscConfig+0x17e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e392      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800658e:	4b42      	ldr	r3, [pc, #264]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 0219 	bic.w	r2, r3, #25
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	493f      	ldr	r1, [pc, #252]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 800659c:	4313      	orrs	r3, r2
 800659e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a0:	f7fb fe3e 	bl	8002220 <HAL_GetTick>
 80065a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a8:	f7fb fe3a 	bl	8002220 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e37c      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ba:	4b37      	ldr	r3, [pc, #220]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f0      	beq.n	80065a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065c6:	f7fb fe37 	bl	8002238 <HAL_GetREVID>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d817      	bhi.n	8006604 <HAL_RCC_OscConfig+0x1f4>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b40      	cmp	r3, #64	; 0x40
 80065da:	d108      	bne.n	80065ee <HAL_RCC_OscConfig+0x1de>
 80065dc:	4b2e      	ldr	r3, [pc, #184]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065e4:	4a2c      	ldr	r2, [pc, #176]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80065e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065ec:	e07a      	b.n	80066e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ee:	4b2a      	ldr	r3, [pc, #168]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	031b      	lsls	r3, r3, #12
 80065fc:	4926      	ldr	r1, [pc, #152]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006602:	e06f      	b.n	80066e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006604:	4b24      	ldr	r3, [pc, #144]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	061b      	lsls	r3, r3, #24
 8006612:	4921      	ldr	r1, [pc, #132]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006614:	4313      	orrs	r3, r2
 8006616:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006618:	e064      	b.n	80066e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d047      	beq.n	80066b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006622:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 0219 	bic.w	r2, r3, #25
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	491a      	ldr	r1, [pc, #104]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006630:	4313      	orrs	r3, r2
 8006632:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fb fdf4 	bl	8002220 <HAL_GetTick>
 8006638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800663c:	f7fb fdf0 	bl	8002220 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e332      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800664e:	4b12      	ldr	r3, [pc, #72]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665a:	f7fb fded 	bl	8002238 <HAL_GetREVID>
 800665e:	4603      	mov	r3, r0
 8006660:	f241 0203 	movw	r2, #4099	; 0x1003
 8006664:	4293      	cmp	r3, r2
 8006666:	d819      	bhi.n	800669c <HAL_RCC_OscConfig+0x28c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d108      	bne.n	8006682 <HAL_RCC_OscConfig+0x272>
 8006670:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006678:	4a07      	ldr	r2, [pc, #28]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 800667a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800667e:	6053      	str	r3, [r2, #4]
 8006680:	e030      	b.n	80066e4 <HAL_RCC_OscConfig+0x2d4>
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	031b      	lsls	r3, r3, #12
 8006690:	4901      	ldr	r1, [pc, #4]	; (8006698 <HAL_RCC_OscConfig+0x288>)
 8006692:	4313      	orrs	r3, r2
 8006694:	604b      	str	r3, [r1, #4]
 8006696:	e025      	b.n	80066e4 <HAL_RCC_OscConfig+0x2d4>
 8006698:	58024400 	.word	0x58024400
 800669c:	4b9a      	ldr	r3, [pc, #616]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	061b      	lsls	r3, r3, #24
 80066aa:	4997      	ldr	r1, [pc, #604]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	604b      	str	r3, [r1, #4]
 80066b0:	e018      	b.n	80066e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066b2:	4b95      	ldr	r3, [pc, #596]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a94      	ldr	r2, [pc, #592]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fb fdaf 	bl	8002220 <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c6:	f7fb fdab 	bl	8002220 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e2ed      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066d8:	4b8b      	ldr	r3, [pc, #556]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f0      	bne.n	80066c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80a9 	beq.w	8006844 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066f2:	4b85      	ldr	r3, [pc, #532]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066fc:	4b82      	ldr	r3, [pc, #520]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d007      	beq.n	8006718 <HAL_RCC_OscConfig+0x308>
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b18      	cmp	r3, #24
 800670c:	d13a      	bne.n	8006784 <HAL_RCC_OscConfig+0x374>
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	2b01      	cmp	r3, #1
 8006716:	d135      	bne.n	8006784 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006718:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_RCC_OscConfig+0x320>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	2b80      	cmp	r3, #128	; 0x80
 800672a:	d001      	beq.n	8006730 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e2c1      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006730:	f7fb fd82 	bl	8002238 <HAL_GetREVID>
 8006734:	4603      	mov	r3, r0
 8006736:	f241 0203 	movw	r2, #4099	; 0x1003
 800673a:	4293      	cmp	r3, r2
 800673c:	d817      	bhi.n	800676e <HAL_RCC_OscConfig+0x35e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	2b20      	cmp	r3, #32
 8006744:	d108      	bne.n	8006758 <HAL_RCC_OscConfig+0x348>
 8006746:	4b70      	ldr	r3, [pc, #448]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800674e:	4a6e      	ldr	r2, [pc, #440]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006754:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006756:	e075      	b.n	8006844 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006758:	4b6b      	ldr	r3, [pc, #428]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	069b      	lsls	r3, r3, #26
 8006766:	4968      	ldr	r1, [pc, #416]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006768:	4313      	orrs	r3, r2
 800676a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800676c:	e06a      	b.n	8006844 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800676e:	4b66      	ldr	r3, [pc, #408]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	061b      	lsls	r3, r3, #24
 800677c:	4962      	ldr	r1, [pc, #392]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800677e:	4313      	orrs	r3, r2
 8006780:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006782:	e05f      	b.n	8006844 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d042      	beq.n	8006812 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800678c:	4b5e      	ldr	r3, [pc, #376]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a5d      	ldr	r2, [pc, #372]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fb fd42 	bl	8002220 <HAL_GetTick>
 800679c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067a0:	f7fb fd3e 	bl	8002220 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e280      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067b2:	4b55      	ldr	r3, [pc, #340]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0f0      	beq.n	80067a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067be:	f7fb fd3b 	bl	8002238 <HAL_GetREVID>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d817      	bhi.n	80067fc <HAL_RCC_OscConfig+0x3ec>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d108      	bne.n	80067e6 <HAL_RCC_OscConfig+0x3d6>
 80067d4:	4b4c      	ldr	r3, [pc, #304]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80067dc:	4a4a      	ldr	r2, [pc, #296]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80067de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e2:	6053      	str	r3, [r2, #4]
 80067e4:	e02e      	b.n	8006844 <HAL_RCC_OscConfig+0x434>
 80067e6:	4b48      	ldr	r3, [pc, #288]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	069b      	lsls	r3, r3, #26
 80067f4:	4944      	ldr	r1, [pc, #272]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	604b      	str	r3, [r1, #4]
 80067fa:	e023      	b.n	8006844 <HAL_RCC_OscConfig+0x434>
 80067fc:	4b42      	ldr	r3, [pc, #264]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	061b      	lsls	r3, r3, #24
 800680a:	493f      	ldr	r1, [pc, #252]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800680c:	4313      	orrs	r3, r2
 800680e:	60cb      	str	r3, [r1, #12]
 8006810:	e018      	b.n	8006844 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006812:	4b3d      	ldr	r3, [pc, #244]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a3c      	ldr	r2, [pc, #240]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800681c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681e:	f7fb fcff 	bl	8002220 <HAL_GetTick>
 8006822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006824:	e008      	b.n	8006838 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006826:	f7fb fcfb 	bl	8002220 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e23d      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006838:	4b33      	ldr	r3, [pc, #204]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1f0      	bne.n	8006826 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d036      	beq.n	80068be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d019      	beq.n	800688c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006858:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800685a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685c:	4a2a      	ldr	r2, [pc, #168]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006864:	f7fb fcdc 	bl	8002220 <HAL_GetTick>
 8006868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800686c:	f7fb fcd8 	bl	8002220 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e21a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800687e:	4b22      	ldr	r3, [pc, #136]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x45c>
 800688a:	e018      	b.n	80068be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688c:	4b1e      	ldr	r3, [pc, #120]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 800688e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006890:	4a1d      	ldr	r2, [pc, #116]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006898:	f7fb fcc2 	bl	8002220 <HAL_GetTick>
 800689c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a0:	f7fb fcbe 	bl	8002220 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e200      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80068b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f0      	bne.n	80068a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d039      	beq.n	800693e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01c      	beq.n	800690c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80068d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068de:	f7fb fc9f 	bl	8002220 <HAL_GetTick>
 80068e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068e6:	f7fb fc9b 	bl	8002220 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e1dd      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068f8:	4b03      	ldr	r3, [pc, #12]	; (8006908 <HAL_RCC_OscConfig+0x4f8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <HAL_RCC_OscConfig+0x4d6>
 8006904:	e01b      	b.n	800693e <HAL_RCC_OscConfig+0x52e>
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800690c:	4b9b      	ldr	r3, [pc, #620]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a9a      	ldr	r2, [pc, #616]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006916:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006918:	f7fb fc82 	bl	8002220 <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006920:	f7fb fc7e 	bl	8002220 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e1c0      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006932:	4b92      	ldr	r3, [pc, #584]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f0      	bne.n	8006920 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8081 	beq.w	8006a4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800694c:	4b8c      	ldr	r3, [pc, #560]	; (8006b80 <HAL_RCC_OscConfig+0x770>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a8b      	ldr	r2, [pc, #556]	; (8006b80 <HAL_RCC_OscConfig+0x770>)
 8006952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006956:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006958:	f7fb fc62 	bl	8002220 <HAL_GetTick>
 800695c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006960:	f7fb fc5e 	bl	8002220 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b64      	cmp	r3, #100	; 0x64
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e1a0      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006972:	4b83      	ldr	r3, [pc, #524]	; (8006b80 <HAL_RCC_OscConfig+0x770>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0f0      	beq.n	8006960 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d106      	bne.n	8006994 <HAL_RCC_OscConfig+0x584>
 8006986:	4b7d      	ldr	r3, [pc, #500]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	4a7c      	ldr	r2, [pc, #496]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	6713      	str	r3, [r2, #112]	; 0x70
 8006992:	e02d      	b.n	80069f0 <HAL_RCC_OscConfig+0x5e0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10c      	bne.n	80069b6 <HAL_RCC_OscConfig+0x5a6>
 800699c:	4b77      	ldr	r3, [pc, #476]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a0:	4a76      	ldr	r2, [pc, #472]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069a2:	f023 0301 	bic.w	r3, r3, #1
 80069a6:	6713      	str	r3, [r2, #112]	; 0x70
 80069a8:	4b74      	ldr	r3, [pc, #464]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4a73      	ldr	r2, [pc, #460]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069ae:	f023 0304 	bic.w	r3, r3, #4
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70
 80069b4:	e01c      	b.n	80069f0 <HAL_RCC_OscConfig+0x5e0>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d10c      	bne.n	80069d8 <HAL_RCC_OscConfig+0x5c8>
 80069be:	4b6f      	ldr	r3, [pc, #444]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	4a6e      	ldr	r2, [pc, #440]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069c4:	f043 0304 	orr.w	r3, r3, #4
 80069c8:	6713      	str	r3, [r2, #112]	; 0x70
 80069ca:	4b6c      	ldr	r3, [pc, #432]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	4a6b      	ldr	r2, [pc, #428]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	6713      	str	r3, [r2, #112]	; 0x70
 80069d6:	e00b      	b.n	80069f0 <HAL_RCC_OscConfig+0x5e0>
 80069d8:	4b68      	ldr	r3, [pc, #416]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069dc:	4a67      	ldr	r2, [pc, #412]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	6713      	str	r3, [r2, #112]	; 0x70
 80069e4:	4b65      	ldr	r3, [pc, #404]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	4a64      	ldr	r2, [pc, #400]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 80069ea:	f023 0304 	bic.w	r3, r3, #4
 80069ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d015      	beq.n	8006a24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f8:	f7fb fc12 	bl	8002220 <HAL_GetTick>
 80069fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069fe:	e00a      	b.n	8006a16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a00:	f7fb fc0e 	bl	8002220 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e14e      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a16:	4b59      	ldr	r3, [pc, #356]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0ee      	beq.n	8006a00 <HAL_RCC_OscConfig+0x5f0>
 8006a22:	e014      	b.n	8006a4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a24:	f7fb fbfc 	bl	8002220 <HAL_GetTick>
 8006a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a2a:	e00a      	b.n	8006a42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a2c:	f7fb fbf8 	bl	8002220 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e138      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a42:	4b4e      	ldr	r3, [pc, #312]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1ee      	bne.n	8006a2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 812d 	beq.w	8006cb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a58:	4b48      	ldr	r3, [pc, #288]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a60:	2b18      	cmp	r3, #24
 8006a62:	f000 80bd 	beq.w	8006be0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	f040 809e 	bne.w	8006bac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a70:	4b42      	ldr	r3, [pc, #264]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a41      	ldr	r2, [pc, #260]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7c:	f7fb fbd0 	bl	8002220 <HAL_GetTick>
 8006a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a84:	f7fb fbcc 	bl	8002220 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e10e      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1f0      	bne.n	8006a84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aa2:	4b36      	ldr	r3, [pc, #216]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aa6:	4b37      	ldr	r3, [pc, #220]	; (8006b84 <HAL_RCC_OscConfig+0x774>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ab2:	0112      	lsls	r2, r2, #4
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	4931      	ldr	r1, [pc, #196]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	628b      	str	r3, [r1, #40]	; 0x28
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aca:	3b01      	subs	r3, #1
 8006acc:	025b      	lsls	r3, r3, #9
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	041b      	lsls	r3, r3, #16
 8006ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	061b      	lsls	r3, r3, #24
 8006ae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006aec:	4923      	ldr	r1, [pc, #140]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006af2:	4b22      	ldr	r3, [pc, #136]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	4a21      	ldr	r2, [pc, #132]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006afe:	4b1f      	ldr	r3, [pc, #124]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b02:	4b21      	ldr	r3, [pc, #132]	; (8006b88 <HAL_RCC_OscConfig+0x778>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b0a:	00d2      	lsls	r2, r2, #3
 8006b0c:	491b      	ldr	r1, [pc, #108]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b12:	4b1a      	ldr	r3, [pc, #104]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	f023 020c 	bic.w	r2, r3, #12
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	4917      	ldr	r1, [pc, #92]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b24:	4b15      	ldr	r3, [pc, #84]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	f023 0202 	bic.w	r2, r3, #2
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b30:	4912      	ldr	r1, [pc, #72]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	4a10      	ldr	r2, [pc, #64]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b42:	4b0e      	ldr	r3, [pc, #56]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b52:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	4a07      	ldr	r2, [pc, #28]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a04      	ldr	r2, [pc, #16]	; (8006b7c <HAL_RCC_OscConfig+0x76c>)
 8006b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b72:	f7fb fb55 	bl	8002220 <HAL_GetTick>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b78:	e011      	b.n	8006b9e <HAL_RCC_OscConfig+0x78e>
 8006b7a:	bf00      	nop
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	58024800 	.word	0x58024800
 8006b84:	fffffc0c 	.word	0xfffffc0c
 8006b88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8c:	f7fb fb48 	bl	8002220 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e08a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b9e:	4b47      	ldr	r3, [pc, #284]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0f0      	beq.n	8006b8c <HAL_RCC_OscConfig+0x77c>
 8006baa:	e082      	b.n	8006cb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bac:	4b43      	ldr	r3, [pc, #268]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a42      	ldr	r2, [pc, #264]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fb fb32 	bl	8002220 <HAL_GetTick>
 8006bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc0:	f7fb fb2e 	bl	8002220 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e070      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bd2:	4b3a      	ldr	r3, [pc, #232]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1f0      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x7b0>
 8006bde:	e068      	b.n	8006cb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006be0:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006be6:	4b35      	ldr	r3, [pc, #212]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d031      	beq.n	8006c58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f003 0203 	and.w	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d12a      	bne.n	8006c58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d122      	bne.n	8006c58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d11a      	bne.n	8006c58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	0a5b      	lsrs	r3, r3, #9
 8006c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d111      	bne.n	8006c58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d108      	bne.n	8006c58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d001      	beq.n	8006c5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e02b      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c5c:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d01f      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c72:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	4a11      	ldr	r2, [pc, #68]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c7e:	f7fb facf 	bl	8002220 <HAL_GetTick>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c84:	bf00      	nop
 8006c86:	f7fb facb 	bl	8002220 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d0f9      	beq.n	8006c86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <HAL_RCC_OscConfig+0x8b0>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c9e:	00d2      	lsls	r2, r2, #3
 8006ca0:	4906      	ldr	r1, [pc, #24]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <HAL_RCC_OscConfig+0x8ac>)
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3730      	adds	r7, #48	; 0x30
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	ffff0007 	.word	0xffff0007

08006cc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e19c      	b.n	8007012 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cd8:	4b8a      	ldr	r3, [pc, #552]	; (8006f04 <HAL_RCC_ClockConfig+0x240>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d910      	bls.n	8006d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce6:	4b87      	ldr	r3, [pc, #540]	; (8006f04 <HAL_RCC_ClockConfig+0x240>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 020f 	bic.w	r2, r3, #15
 8006cee:	4985      	ldr	r1, [pc, #532]	; (8006f04 <HAL_RCC_ClockConfig+0x240>)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf6:	4b83      	ldr	r3, [pc, #524]	; (8006f04 <HAL_RCC_ClockConfig+0x240>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e184      	b.n	8007012 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d010      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	4b7b      	ldr	r3, [pc, #492]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d908      	bls.n	8006d36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d24:	4b78      	ldr	r3, [pc, #480]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	4975      	ldr	r1, [pc, #468]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d010      	beq.n	8006d64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695a      	ldr	r2, [r3, #20]
 8006d46:	4b70      	ldr	r3, [pc, #448]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d908      	bls.n	8006d64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d52:	4b6d      	ldr	r3, [pc, #436]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	496a      	ldr	r1, [pc, #424]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d010      	beq.n	8006d92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	4b64      	ldr	r3, [pc, #400]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d908      	bls.n	8006d92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d80:	4b61      	ldr	r3, [pc, #388]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	495e      	ldr	r1, [pc, #376]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d010      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69da      	ldr	r2, [r3, #28]
 8006da2:	4b59      	ldr	r3, [pc, #356]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d908      	bls.n	8006dc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006dae:	4b56      	ldr	r3, [pc, #344]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4953      	ldr	r1, [pc, #332]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	4b4d      	ldr	r3, [pc, #308]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d908      	bls.n	8006dee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ddc:	4b4a      	ldr	r3, [pc, #296]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	f023 020f 	bic.w	r2, r3, #15
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4947      	ldr	r1, [pc, #284]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d055      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dfa:	4b43      	ldr	r3, [pc, #268]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4940      	ldr	r1, [pc, #256]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d107      	bne.n	8006e24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e14:	4b3c      	ldr	r3, [pc, #240]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d121      	bne.n	8006e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0f6      	b.n	8007012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d107      	bne.n	8006e3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e2c:	4b36      	ldr	r3, [pc, #216]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d115      	bne.n	8006e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e0ea      	b.n	8007012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d107      	bne.n	8006e54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e44:	4b30      	ldr	r3, [pc, #192]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d109      	bne.n	8006e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0de      	b.n	8007012 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e54:	4b2c      	ldr	r3, [pc, #176]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0d6      	b.n	8007012 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e64:	4b28      	ldr	r3, [pc, #160]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f023 0207 	bic.w	r2, r3, #7
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	4925      	ldr	r1, [pc, #148]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e76:	f7fb f9d3 	bl	8002220 <HAL_GetTick>
 8006e7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e7c:	e00a      	b.n	8006e94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e7e:	f7fb f9cf 	bl	8002220 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e0be      	b.n	8007012 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e94:	4b1c      	ldr	r3, [pc, #112]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d1eb      	bne.n	8006e7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d010      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d208      	bcs.n	8006ed4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ec2:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f023 020f 	bic.w	r2, r3, #15
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	490e      	ldr	r1, [pc, #56]	; (8006f08 <HAL_RCC_ClockConfig+0x244>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <HAL_RCC_ClockConfig+0x240>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d214      	bcs.n	8006f0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee2:	4b08      	ldr	r3, [pc, #32]	; (8006f04 <HAL_RCC_ClockConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f023 020f 	bic.w	r2, r3, #15
 8006eea:	4906      	ldr	r1, [pc, #24]	; (8006f04 <HAL_RCC_ClockConfig+0x240>)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef2:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <HAL_RCC_ClockConfig+0x240>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d005      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e086      	b.n	8007012 <HAL_RCC_ClockConfig+0x34e>
 8006f04:	52002000 	.word	0x52002000
 8006f08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d010      	beq.n	8006f3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	4b3f      	ldr	r3, [pc, #252]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d208      	bcs.n	8006f3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f28:	4b3c      	ldr	r3, [pc, #240]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	4939      	ldr	r1, [pc, #228]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d010      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695a      	ldr	r2, [r3, #20]
 8006f4a:	4b34      	ldr	r3, [pc, #208]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d208      	bcs.n	8006f68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f56:	4b31      	ldr	r3, [pc, #196]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	492e      	ldr	r1, [pc, #184]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d010      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699a      	ldr	r2, [r3, #24]
 8006f78:	4b28      	ldr	r3, [pc, #160]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d208      	bcs.n	8006f96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f84:	4b25      	ldr	r3, [pc, #148]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	4922      	ldr	r1, [pc, #136]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d010      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69da      	ldr	r2, [r3, #28]
 8006fa6:	4b1d      	ldr	r3, [pc, #116]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d208      	bcs.n	8006fc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006fb2:	4b1a      	ldr	r3, [pc, #104]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	4917      	ldr	r1, [pc, #92]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fc4:	f000 f834 	bl	8007030 <HAL_RCC_GetSysClockFreq>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b14      	ldr	r3, [pc, #80]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	4912      	ldr	r1, [pc, #72]	; (8007020 <HAL_RCC_ClockConfig+0x35c>)
 8006fd6:	5ccb      	ldrb	r3, [r1, r3]
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fe2:	4b0e      	ldr	r3, [pc, #56]	; (800701c <HAL_RCC_ClockConfig+0x358>)
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	4a0d      	ldr	r2, [pc, #52]	; (8007020 <HAL_RCC_ClockConfig+0x35c>)
 8006fec:	5cd3      	ldrb	r3, [r2, r3]
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff8:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <HAL_RCC_ClockConfig+0x360>)
 8006ffa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ffc:	4a0a      	ldr	r2, [pc, #40]	; (8007028 <HAL_RCC_ClockConfig+0x364>)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007002:	4b0a      	ldr	r3, [pc, #40]	; (800702c <HAL_RCC_ClockConfig+0x368>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f7fa fbc4 	bl	8001794 <HAL_InitTick>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	58024400 	.word	0x58024400
 8007020:	080100f0 	.word	0x080100f0
 8007024:	24000004 	.word	0x24000004
 8007028:	24000000 	.word	0x24000000
 800702c:	24000008 	.word	0x24000008

08007030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007030:	b480      	push	{r7}
 8007032:	b089      	sub	sp, #36	; 0x24
 8007034:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007036:	4bb3      	ldr	r3, [pc, #716]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800703e:	2b18      	cmp	r3, #24
 8007040:	f200 8155 	bhi.w	80072ee <HAL_RCC_GetSysClockFreq+0x2be>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	080070b1 	.word	0x080070b1
 8007050:	080072ef 	.word	0x080072ef
 8007054:	080072ef 	.word	0x080072ef
 8007058:	080072ef 	.word	0x080072ef
 800705c:	080072ef 	.word	0x080072ef
 8007060:	080072ef 	.word	0x080072ef
 8007064:	080072ef 	.word	0x080072ef
 8007068:	080072ef 	.word	0x080072ef
 800706c:	080070d7 	.word	0x080070d7
 8007070:	080072ef 	.word	0x080072ef
 8007074:	080072ef 	.word	0x080072ef
 8007078:	080072ef 	.word	0x080072ef
 800707c:	080072ef 	.word	0x080072ef
 8007080:	080072ef 	.word	0x080072ef
 8007084:	080072ef 	.word	0x080072ef
 8007088:	080072ef 	.word	0x080072ef
 800708c:	080070dd 	.word	0x080070dd
 8007090:	080072ef 	.word	0x080072ef
 8007094:	080072ef 	.word	0x080072ef
 8007098:	080072ef 	.word	0x080072ef
 800709c:	080072ef 	.word	0x080072ef
 80070a0:	080072ef 	.word	0x080072ef
 80070a4:	080072ef 	.word	0x080072ef
 80070a8:	080072ef 	.word	0x080072ef
 80070ac:	080070e3 	.word	0x080070e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b0:	4b94      	ldr	r3, [pc, #592]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070bc:	4b91      	ldr	r3, [pc, #580]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	08db      	lsrs	r3, r3, #3
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	4a90      	ldr	r2, [pc, #576]	; (8007308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80070ce:	e111      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070d0:	4b8d      	ldr	r3, [pc, #564]	; (8007308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070d2:	61bb      	str	r3, [r7, #24]
      break;
 80070d4:	e10e      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80070d6:	4b8d      	ldr	r3, [pc, #564]	; (800730c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070d8:	61bb      	str	r3, [r7, #24]
      break;
 80070da:	e10b      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80070dc:	4b8c      	ldr	r3, [pc, #560]	; (8007310 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80070de:	61bb      	str	r3, [r7, #24]
      break;
 80070e0:	e108      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070e2:	4b88      	ldr	r3, [pc, #544]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80070ec:	4b85      	ldr	r3, [pc, #532]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	091b      	lsrs	r3, r3, #4
 80070f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80070f8:	4b82      	ldr	r3, [pc, #520]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007102:	4b80      	ldr	r3, [pc, #512]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	08db      	lsrs	r3, r3, #3
 8007108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	fb02 f303 	mul.w	r3, r2, r3
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80e1 	beq.w	80072e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b02      	cmp	r3, #2
 800712a:	f000 8083 	beq.w	8007234 <HAL_RCC_GetSysClockFreq+0x204>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b02      	cmp	r3, #2
 8007132:	f200 80a1 	bhi.w	8007278 <HAL_RCC_GetSysClockFreq+0x248>
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x114>
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d056      	beq.n	80071f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007142:	e099      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007144:	4b6f      	ldr	r3, [pc, #444]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b00      	cmp	r3, #0
 800714e:	d02d      	beq.n	80071ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007150:	4b6c      	ldr	r3, [pc, #432]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	4a6b      	ldr	r2, [pc, #428]	; (8007308 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
 8007160:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717a:	4b62      	ldr	r3, [pc, #392]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718a:	ed97 6a02 	vldr	s12, [r7, #8]
 800718e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007314 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80071aa:	e087      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007318 <HAL_RCC_GetSysClockFreq+0x2e8>
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	4b51      	ldr	r3, [pc, #324]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80071d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007314 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071ee:	e065      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800731c <HAL_RCC_GetSysClockFreq+0x2ec>
 80071fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007202:	4b40      	ldr	r3, [pc, #256]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007212:	ed97 6a02 	vldr	s12, [r7, #8]
 8007216:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007314 <HAL_RCC_GetSysClockFreq+0x2e4>
 800721a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007232:	e043      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007320 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007246:	4b2f      	ldr	r3, [pc, #188]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007256:	ed97 6a02 	vldr	s12, [r7, #8]
 800725a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007314 <HAL_RCC_GetSysClockFreq+0x2e4>
 800725e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800726a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007272:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007276:	e021      	b.n	80072bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	eddf 6a26 	vldr	s13, [pc, #152]	; 800731c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800728a:	4b1e      	ldr	r3, [pc, #120]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800729a:	ed97 6a02 	vldr	s12, [r7, #8]
 800729e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007314 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80072bc:	4b11      	ldr	r3, [pc, #68]	; (8007304 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	0a5b      	lsrs	r3, r3, #9
 80072c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c6:	3301      	adds	r3, #1
 80072c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e0:	ee17 3a90 	vmov	r3, s15
 80072e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80072e6:	e005      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61bb      	str	r3, [r7, #24]
      break;
 80072ec:	e002      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80072f0:	61bb      	str	r3, [r7, #24]
      break;
 80072f2:	bf00      	nop
  }

  return sysclockfreq;
 80072f4:	69bb      	ldr	r3, [r7, #24]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3724      	adds	r7, #36	; 0x24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	58024400 	.word	0x58024400
 8007308:	03d09000 	.word	0x03d09000
 800730c:	003d0900 	.word	0x003d0900
 8007310:	017d7840 	.word	0x017d7840
 8007314:	46000000 	.word	0x46000000
 8007318:	4c742400 	.word	0x4c742400
 800731c:	4a742400 	.word	0x4a742400
 8007320:	4bbebc20 	.word	0x4bbebc20

08007324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800732a:	f7ff fe81 	bl	8007030 <HAL_RCC_GetSysClockFreq>
 800732e:	4602      	mov	r2, r0
 8007330:	4b10      	ldr	r3, [pc, #64]	; (8007374 <HAL_RCC_GetHCLKFreq+0x50>)
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	0a1b      	lsrs	r3, r3, #8
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	490f      	ldr	r1, [pc, #60]	; (8007378 <HAL_RCC_GetHCLKFreq+0x54>)
 800733c:	5ccb      	ldrb	r3, [r1, r3]
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	fa22 f303 	lsr.w	r3, r2, r3
 8007346:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <HAL_RCC_GetHCLKFreq+0x50>)
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	4a09      	ldr	r2, [pc, #36]	; (8007378 <HAL_RCC_GetHCLKFreq+0x54>)
 8007352:	5cd3      	ldrb	r3, [r2, r3]
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	fa22 f303 	lsr.w	r3, r2, r3
 800735e:	4a07      	ldr	r2, [pc, #28]	; (800737c <HAL_RCC_GetHCLKFreq+0x58>)
 8007360:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007362:	4a07      	ldr	r2, [pc, #28]	; (8007380 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007368:	4b04      	ldr	r3, [pc, #16]	; (800737c <HAL_RCC_GetHCLKFreq+0x58>)
 800736a:	681b      	ldr	r3, [r3, #0]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	58024400 	.word	0x58024400
 8007378:	080100f0 	.word	0x080100f0
 800737c:	24000004 	.word	0x24000004
 8007380:	24000000 	.word	0x24000000

08007384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007388:	f7ff ffcc 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 800738c:	4602      	mov	r2, r0
 800738e:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	091b      	lsrs	r3, r3, #4
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	4904      	ldr	r1, [pc, #16]	; (80073ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800739a:	5ccb      	ldrb	r3, [r1, r3]
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	58024400 	.word	0x58024400
 80073ac:	080100f0 	.word	0x080100f0

080073b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80073b4:	f7ff ffb6 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	0a1b      	lsrs	r3, r3, #8
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	4904      	ldr	r1, [pc, #16]	; (80073d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	58024400 	.word	0x58024400
 80073d8:	080100f0 	.word	0x080100f0

080073dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	223f      	movs	r2, #63	; 0x3f
 80073ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073ec:	4b1a      	ldr	r3, [pc, #104]	; (8007458 <HAL_RCC_GetClockConfig+0x7c>)
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f003 0207 	and.w	r2, r3, #7
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80073f8:	4b17      	ldr	r3, [pc, #92]	; (8007458 <HAL_RCC_GetClockConfig+0x7c>)
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007404:	4b14      	ldr	r3, [pc, #80]	; (8007458 <HAL_RCC_GetClockConfig+0x7c>)
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f003 020f 	and.w	r2, r3, #15
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007410:	4b11      	ldr	r3, [pc, #68]	; (8007458 <HAL_RCC_GetClockConfig+0x7c>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <HAL_RCC_GetClockConfig+0x7c>)
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <HAL_RCC_GetClockConfig+0x7c>)
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007434:	4b08      	ldr	r3, [pc, #32]	; (8007458 <HAL_RCC_GetClockConfig+0x7c>)
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <HAL_RCC_GetClockConfig+0x80>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 020f 	and.w	r2, r3, #15
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	601a      	str	r2, [r3, #0]
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	58024400 	.word	0x58024400
 800745c:	52002000 	.word	0x52002000

08007460 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007464:	b0ca      	sub	sp, #296	; 0x128
 8007466:	af00      	add	r7, sp, #0
 8007468:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007472:	2300      	movs	r3, #0
 8007474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007484:	2500      	movs	r5, #0
 8007486:	ea54 0305 	orrs.w	r3, r4, r5
 800748a:	d049      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007496:	d02f      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800749c:	d828      	bhi.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800749e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074a2:	d01a      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80074a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074a8:	d822      	bhi.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80074ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074b2:	d007      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074b4:	e01c      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b6:	4bb8      	ldr	r3, [pc, #736]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	4ab7      	ldr	r2, [pc, #732]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80074c2:	e01a      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c8:	3308      	adds	r3, #8
 80074ca:	2102      	movs	r1, #2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f002 fb61 	bl	8009b94 <RCCEx_PLL2_Config>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80074d8:	e00f      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074de:	3328      	adds	r3, #40	; 0x28
 80074e0:	2102      	movs	r1, #2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f002 fc08 	bl	8009cf8 <RCCEx_PLL3_Config>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80074ee:	e004      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074f6:	e000      	b.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80074f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10a      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007502:	4ba5      	ldr	r3, [pc, #660]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007506:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007510:	4aa1      	ldr	r2, [pc, #644]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007512:	430b      	orrs	r3, r1
 8007514:	6513      	str	r3, [r2, #80]	; 0x50
 8007516:	e003      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800751c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800752c:	f04f 0900 	mov.w	r9, #0
 8007530:	ea58 0309 	orrs.w	r3, r8, r9
 8007534:	d047      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753c:	2b04      	cmp	r3, #4
 800753e:	d82a      	bhi.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	0800755d 	.word	0x0800755d
 800754c:	0800756b 	.word	0x0800756b
 8007550:	08007581 	.word	0x08007581
 8007554:	0800759f 	.word	0x0800759f
 8007558:	0800759f 	.word	0x0800759f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800755c:	4b8e      	ldr	r3, [pc, #568]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	4a8d      	ldr	r2, [pc, #564]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007568:	e01a      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756e:	3308      	adds	r3, #8
 8007570:	2100      	movs	r1, #0
 8007572:	4618      	mov	r0, r3
 8007574:	f002 fb0e 	bl	8009b94 <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800757e:	e00f      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007584:	3328      	adds	r3, #40	; 0x28
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f002 fbb5 	bl	8009cf8 <RCCEx_PLL3_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007594:	e004      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800759c:	e000      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800759e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075a8:	4b7b      	ldr	r3, [pc, #492]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	f023 0107 	bic.w	r1, r3, #7
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	4a78      	ldr	r2, [pc, #480]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b8:	430b      	orrs	r3, r1
 80075ba:	6513      	str	r3, [r2, #80]	; 0x50
 80075bc:	e003      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80075d2:	f04f 0b00 	mov.w	fp, #0
 80075d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80075da:	d04c      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e6:	d030      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80075e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ec:	d829      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80075ee:	2bc0      	cmp	r3, #192	; 0xc0
 80075f0:	d02d      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80075f2:	2bc0      	cmp	r3, #192	; 0xc0
 80075f4:	d825      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d018      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80075fa:	2b80      	cmp	r3, #128	; 0x80
 80075fc:	d821      	bhi.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d007      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007606:	e01c      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007608:	4b63      	ldr	r3, [pc, #396]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	4a62      	ldr	r2, [pc, #392]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800760e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007612:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007614:	e01c      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761a:	3308      	adds	r3, #8
 800761c:	2100      	movs	r1, #0
 800761e:	4618      	mov	r0, r3
 8007620:	f002 fab8 	bl	8009b94 <RCCEx_PLL2_Config>
 8007624:	4603      	mov	r3, r0
 8007626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800762a:	e011      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800762c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007630:	3328      	adds	r3, #40	; 0x28
 8007632:	2100      	movs	r1, #0
 8007634:	4618      	mov	r0, r3
 8007636:	f002 fb5f 	bl	8009cf8 <RCCEx_PLL3_Config>
 800763a:	4603      	mov	r3, r0
 800763c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007640:	e006      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007648:	e002      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800764a:	bf00      	nop
 800764c:	e000      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800764e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007658:	4b4f      	ldr	r3, [pc, #316]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800765a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007666:	4a4c      	ldr	r2, [pc, #304]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007668:	430b      	orrs	r3, r1
 800766a:	6513      	str	r3, [r2, #80]	; 0x50
 800766c:	e003      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007682:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007686:	2300      	movs	r3, #0
 8007688:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800768c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007690:	460b      	mov	r3, r1
 8007692:	4313      	orrs	r3, r2
 8007694:	d053      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800769e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076a2:	d035      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80076a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076a8:	d82e      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076ae:	d031      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80076b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076b4:	d828      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ba:	d01a      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80076bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076c0:	d822      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80076c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076ca:	d007      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80076cc:	e01c      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ce:	4b32      	ldr	r3, [pc, #200]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	4a31      	ldr	r2, [pc, #196]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076da:	e01c      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e0:	3308      	adds	r3, #8
 80076e2:	2100      	movs	r1, #0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f002 fa55 	bl	8009b94 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80076f0:	e011      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f6:	3328      	adds	r3, #40	; 0x28
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f002 fafc 	bl	8009cf8 <RCCEx_PLL3_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007706:	e006      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800770e:	e002      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800771e:	4b1e      	ldr	r3, [pc, #120]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007722:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800772a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800772e:	4a1a      	ldr	r2, [pc, #104]	; (8007798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007730:	430b      	orrs	r3, r1
 8007732:	6593      	str	r3, [r2, #88]	; 0x58
 8007734:	e003      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800773a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800773e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800774a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007754:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007758:	460b      	mov	r3, r1
 800775a:	4313      	orrs	r3, r2
 800775c:	d056      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007762:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007766:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800776a:	d038      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800776c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007770:	d831      	bhi.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007772:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007776:	d034      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007778:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800777c:	d82b      	bhi.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800777e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007782:	d01d      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007788:	d825      	bhi.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d006      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800778e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007792:	d00a      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007794:	e01f      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007796:	bf00      	nop
 8007798:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800779c:	4ba2      	ldr	r3, [pc, #648]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	4aa1      	ldr	r2, [pc, #644]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077a8:	e01c      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ae:	3308      	adds	r3, #8
 80077b0:	2100      	movs	r1, #0
 80077b2:	4618      	mov	r0, r3
 80077b4:	f002 f9ee 	bl	8009b94 <RCCEx_PLL2_Config>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077be:	e011      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c4:	3328      	adds	r3, #40	; 0x28
 80077c6:	2100      	movs	r1, #0
 80077c8:	4618      	mov	r0, r3
 80077ca:	f002 fa95 	bl	8009cf8 <RCCEx_PLL3_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077d4:	e006      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077dc:	e002      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80077de:	bf00      	nop
 80077e0:	e000      	b.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80077e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10b      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80077ec:	4b8e      	ldr	r3, [pc, #568]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80077f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077fc:	4a8a      	ldr	r2, [pc, #552]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077fe:	430b      	orrs	r3, r1
 8007800:	6593      	str	r3, [r2, #88]	; 0x58
 8007802:	e003      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007808:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800781c:	2300      	movs	r3, #0
 800781e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007822:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007826:	460b      	mov	r3, r1
 8007828:	4313      	orrs	r3, r2
 800782a:	d03a      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800782c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007832:	2b30      	cmp	r3, #48	; 0x30
 8007834:	d01f      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007836:	2b30      	cmp	r3, #48	; 0x30
 8007838:	d819      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800783a:	2b20      	cmp	r3, #32
 800783c:	d00c      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800783e:	2b20      	cmp	r3, #32
 8007840:	d815      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d019      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007846:	2b10      	cmp	r3, #16
 8007848:	d111      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800784a:	4b77      	ldr	r3, [pc, #476]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	4a76      	ldr	r2, [pc, #472]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007856:	e011      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785c:	3308      	adds	r3, #8
 800785e:	2102      	movs	r1, #2
 8007860:	4618      	mov	r0, r3
 8007862:	f002 f997 	bl	8009b94 <RCCEx_PLL2_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800786c:	e006      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007874:	e002      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007876:	bf00      	nop
 8007878:	e000      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800787a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007884:	4b68      	ldr	r3, [pc, #416]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007888:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007892:	4a65      	ldr	r2, [pc, #404]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007894:	430b      	orrs	r3, r1
 8007896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007898:	e003      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800789e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80078ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80078b2:	2300      	movs	r3, #0
 80078b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80078b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80078bc:	460b      	mov	r3, r1
 80078be:	4313      	orrs	r3, r2
 80078c0:	d051      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80078c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078cc:	d035      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80078ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078d2:	d82e      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80078d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078d8:	d031      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80078da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078de:	d828      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80078e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e4:	d01a      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ea:	d822      	bhi.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80078f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f4:	d007      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80078f6:	e01c      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f8:	4b4b      	ldr	r3, [pc, #300]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	4a4a      	ldr	r2, [pc, #296]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007904:	e01c      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790a:	3308      	adds	r3, #8
 800790c:	2100      	movs	r1, #0
 800790e:	4618      	mov	r0, r3
 8007910:	f002 f940 	bl	8009b94 <RCCEx_PLL2_Config>
 8007914:	4603      	mov	r3, r0
 8007916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800791a:	e011      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007920:	3328      	adds	r3, #40	; 0x28
 8007922:	2100      	movs	r1, #0
 8007924:	4618      	mov	r0, r3
 8007926:	f002 f9e7 	bl	8009cf8 <RCCEx_PLL3_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007930:	e006      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007938:	e002      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800793a:	bf00      	nop
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800793e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10a      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007948:	4b37      	ldr	r3, [pc, #220]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800794a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007956:	4a34      	ldr	r2, [pc, #208]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007958:	430b      	orrs	r3, r1
 800795a:	6513      	str	r3, [r2, #80]	; 0x50
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007962:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007976:	2300      	movs	r3, #0
 8007978:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800797c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007980:	460b      	mov	r3, r1
 8007982:	4313      	orrs	r3, r2
 8007984:	d056      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800798c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007990:	d033      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007996:	d82c      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800799c:	d02f      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800799e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079a2:	d826      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079a8:	d02b      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80079aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079ae:	d820      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b4:	d012      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80079b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ba:	d81a      	bhi.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d022      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80079c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c4:	d115      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ca:	3308      	adds	r3, #8
 80079cc:	2101      	movs	r1, #1
 80079ce:	4618      	mov	r0, r3
 80079d0:	f002 f8e0 	bl	8009b94 <RCCEx_PLL2_Config>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80079da:	e015      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e0:	3328      	adds	r3, #40	; 0x28
 80079e2:	2101      	movs	r1, #1
 80079e4:	4618      	mov	r0, r3
 80079e6:	f002 f987 	bl	8009cf8 <RCCEx_PLL3_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80079f0:	e00a      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079f8:	e006      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80079fa:	bf00      	nop
 80079fc:	e004      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80079fe:	bf00      	nop
 8007a00:	e002      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10d      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a10:	4b05      	ldr	r3, [pc, #20]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a1e:	4a02      	ldr	r2, [pc, #8]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6513      	str	r3, [r2, #80]	; 0x50
 8007a24:	e006      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a44:	2300      	movs	r3, #0
 8007a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4313      	orrs	r3, r2
 8007a52:	d055      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a60:	d033      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a66:	d82c      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6c:	d02f      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a72:	d826      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a78:	d02b      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007a7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a7e:	d820      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a84:	d012      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a8a:	d81a      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d022      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a94:	d115      	bne.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f002 f878 	bl	8009b94 <RCCEx_PLL2_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007aaa:	e015      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab0:	3328      	adds	r3, #40	; 0x28
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f002 f91f 	bl	8009cf8 <RCCEx_PLL3_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007ac0:	e00a      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ac8:	e006      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007aca:	bf00      	nop
 8007acc:	e004      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ace:	bf00      	nop
 8007ad0:	e002      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ad2:	bf00      	nop
 8007ad4:	e000      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ae0:	4ba3      	ldr	r3, [pc, #652]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007af0:	4a9f      	ldr	r2, [pc, #636]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af2:	430b      	orrs	r3, r1
 8007af4:	6593      	str	r3, [r2, #88]	; 0x58
 8007af6:	e003      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007afc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b10:	2300      	movs	r3, #0
 8007b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d037      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b2a:	d00e      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b30:	d816      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d018      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b3a:	d111      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b3c:	4b8c      	ldr	r3, [pc, #560]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	4a8b      	ldr	r2, [pc, #556]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b48:	e00f      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b4e:	3308      	adds	r3, #8
 8007b50:	2101      	movs	r1, #1
 8007b52:	4618      	mov	r0, r3
 8007b54:	f002 f81e 	bl	8009b94 <RCCEx_PLL2_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007b5e:	e004      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b72:	4b7f      	ldr	r3, [pc, #508]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b80:	4a7b      	ldr	r2, [pc, #492]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b82:	430b      	orrs	r3, r1
 8007b84:	6513      	str	r3, [r2, #80]	; 0x50
 8007b86:	e003      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ba6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007baa:	460b      	mov	r3, r1
 8007bac:	4313      	orrs	r3, r2
 8007bae:	d039      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d81c      	bhi.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bfd 	.word	0x08007bfd
 8007bc4:	08007bd1 	.word	0x08007bd1
 8007bc8:	08007bdf 	.word	0x08007bdf
 8007bcc:	08007bfd 	.word	0x08007bfd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd0:	4b67      	ldr	r3, [pc, #412]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	4a66      	ldr	r2, [pc, #408]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007bdc:	e00f      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be2:	3308      	adds	r3, #8
 8007be4:	2102      	movs	r1, #2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 ffd4 	bl	8009b94 <RCCEx_PLL2_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007bf2:	e004      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bfa:	e000      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c06:	4b5a      	ldr	r3, [pc, #360]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0a:	f023 0103 	bic.w	r1, r3, #3
 8007c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c14:	4a56      	ldr	r2, [pc, #344]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c16:	430b      	orrs	r3, r1
 8007c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007c30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c34:	2300      	movs	r3, #0
 8007c36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f000 809f 	beq.w	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c46:	4b4b      	ldr	r3, [pc, #300]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a4a      	ldr	r2, [pc, #296]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c52:	f7fa fae5 	bl	8002220 <HAL_GetTick>
 8007c56:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c5a:	e00b      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5c:	f7fa fae0 	bl	8002220 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b64      	cmp	r3, #100	; 0x64
 8007c6a:	d903      	bls.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c72:	e005      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c74:	4b3f      	ldr	r3, [pc, #252]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0ed      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007c80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d179      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c88:	4b39      	ldr	r3, [pc, #228]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c94:	4053      	eors	r3, r2
 8007c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d015      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c9e:	4b34      	ldr	r3, [pc, #208]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007caa:	4b31      	ldr	r3, [pc, #196]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	4a30      	ldr	r2, [pc, #192]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cb4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cb6:	4b2e      	ldr	r3, [pc, #184]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cba:	4a2d      	ldr	r2, [pc, #180]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007cc2:	4a2b      	ldr	r2, [pc, #172]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007cc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd6:	d118      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd8:	f7fa faa2 	bl	8002220 <HAL_GetTick>
 8007cdc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ce0:	e00d      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce2:	f7fa fa9d 	bl	8002220 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007cec:	1ad2      	subs	r2, r2, r3
 8007cee:	f241 3388 	movw	r3, #5000	; 0x1388
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d903      	bls.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007cfc:	e005      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cfe:	4b1c      	ldr	r3, [pc, #112]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0eb      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d129      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d22:	d10e      	bne.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007d24:	4b12      	ldr	r3, [pc, #72]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d34:	091a      	lsrs	r2, r3, #4
 8007d36:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	4a0d      	ldr	r2, [pc, #52]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6113      	str	r3, [r2, #16]
 8007d40:	e005      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	4a0a      	ldr	r2, [pc, #40]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d4c:	6113      	str	r3, [r2, #16]
 8007d4e:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d5e:	4a04      	ldr	r2, [pc, #16]	; (8007d70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6713      	str	r3, [r2, #112]	; 0x70
 8007d64:	e00e      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007d6e:	e009      	b.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007d70:	58024400 	.word	0x58024400
 8007d74:	58024800 	.word	0x58024800
 8007d78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f002 0301 	and.w	r3, r2, #1
 8007d90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d94:	2300      	movs	r3, #0
 8007d96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f000 8089 	beq.w	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dac:	2b28      	cmp	r3, #40	; 0x28
 8007dae:	d86b      	bhi.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007db0:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db6:	bf00      	nop
 8007db8:	08007e91 	.word	0x08007e91
 8007dbc:	08007e89 	.word	0x08007e89
 8007dc0:	08007e89 	.word	0x08007e89
 8007dc4:	08007e89 	.word	0x08007e89
 8007dc8:	08007e89 	.word	0x08007e89
 8007dcc:	08007e89 	.word	0x08007e89
 8007dd0:	08007e89 	.word	0x08007e89
 8007dd4:	08007e89 	.word	0x08007e89
 8007dd8:	08007e5d 	.word	0x08007e5d
 8007ddc:	08007e89 	.word	0x08007e89
 8007de0:	08007e89 	.word	0x08007e89
 8007de4:	08007e89 	.word	0x08007e89
 8007de8:	08007e89 	.word	0x08007e89
 8007dec:	08007e89 	.word	0x08007e89
 8007df0:	08007e89 	.word	0x08007e89
 8007df4:	08007e89 	.word	0x08007e89
 8007df8:	08007e73 	.word	0x08007e73
 8007dfc:	08007e89 	.word	0x08007e89
 8007e00:	08007e89 	.word	0x08007e89
 8007e04:	08007e89 	.word	0x08007e89
 8007e08:	08007e89 	.word	0x08007e89
 8007e0c:	08007e89 	.word	0x08007e89
 8007e10:	08007e89 	.word	0x08007e89
 8007e14:	08007e89 	.word	0x08007e89
 8007e18:	08007e91 	.word	0x08007e91
 8007e1c:	08007e89 	.word	0x08007e89
 8007e20:	08007e89 	.word	0x08007e89
 8007e24:	08007e89 	.word	0x08007e89
 8007e28:	08007e89 	.word	0x08007e89
 8007e2c:	08007e89 	.word	0x08007e89
 8007e30:	08007e89 	.word	0x08007e89
 8007e34:	08007e89 	.word	0x08007e89
 8007e38:	08007e91 	.word	0x08007e91
 8007e3c:	08007e89 	.word	0x08007e89
 8007e40:	08007e89 	.word	0x08007e89
 8007e44:	08007e89 	.word	0x08007e89
 8007e48:	08007e89 	.word	0x08007e89
 8007e4c:	08007e89 	.word	0x08007e89
 8007e50:	08007e89 	.word	0x08007e89
 8007e54:	08007e89 	.word	0x08007e89
 8007e58:	08007e91 	.word	0x08007e91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e60:	3308      	adds	r3, #8
 8007e62:	2101      	movs	r1, #1
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 fe95 	bl	8009b94 <RCCEx_PLL2_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e70:	e00f      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e76:	3328      	adds	r3, #40	; 0x28
 8007e78:	2101      	movs	r1, #1
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 ff3c 	bl	8009cf8 <RCCEx_PLL3_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007e86:	e004      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e8e:	e000      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e9a:	4bbf      	ldr	r3, [pc, #764]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea8:	4abb      	ldr	r2, [pc, #748]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	6553      	str	r3, [r2, #84]	; 0x54
 8007eae:	e003      	b.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f002 0302 	and.w	r3, r2, #2
 8007ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ece:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	d041      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d824      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007ee2:	a201      	add	r2, pc, #4	; (adr r2, 8007ee8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f35 	.word	0x08007f35
 8007eec:	08007f01 	.word	0x08007f01
 8007ef0:	08007f17 	.word	0x08007f17
 8007ef4:	08007f35 	.word	0x08007f35
 8007ef8:	08007f35 	.word	0x08007f35
 8007efc:	08007f35 	.word	0x08007f35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f04:	3308      	adds	r3, #8
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 fe43 	bl	8009b94 <RCCEx_PLL2_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f14:	e00f      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f1a:	3328      	adds	r3, #40	; 0x28
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 feea 	bl	8009cf8 <RCCEx_PLL3_Config>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007f2a:	e004      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f32:	e000      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007f3e:	4b96      	ldr	r3, [pc, #600]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f42:	f023 0107 	bic.w	r1, r3, #7
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f4c:	4a92      	ldr	r2, [pc, #584]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	6553      	str	r3, [r2, #84]	; 0x54
 8007f52:	e003      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f002 0304 	and.w	r3, r2, #4
 8007f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d044      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f84:	2b05      	cmp	r3, #5
 8007f86:	d825      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007f88:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fdd 	.word	0x08007fdd
 8007f94:	08007fa9 	.word	0x08007fa9
 8007f98:	08007fbf 	.word	0x08007fbf
 8007f9c:	08007fdd 	.word	0x08007fdd
 8007fa0:	08007fdd 	.word	0x08007fdd
 8007fa4:	08007fdd 	.word	0x08007fdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fac:	3308      	adds	r3, #8
 8007fae:	2101      	movs	r1, #1
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 fdef 	bl	8009b94 <RCCEx_PLL2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007fbc:	e00f      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc2:	3328      	adds	r3, #40	; 0x28
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fe96 	bl	8009cf8 <RCCEx_PLL3_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007fd2:	e004      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fda:	e000      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fe6:	4b6c      	ldr	r3, [pc, #432]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fea:	f023 0107 	bic.w	r1, r3, #7
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ff6:	4a68      	ldr	r2, [pc, #416]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8007ffc:	e003      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f002 0320 	and.w	r3, r2, #32
 8008012:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008016:	2300      	movs	r3, #0
 8008018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800801c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008020:	460b      	mov	r3, r1
 8008022:	4313      	orrs	r3, r2
 8008024:	d055      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008032:	d033      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008038:	d82c      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803e:	d02f      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008044:	d826      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800804a:	d02b      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800804c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008050:	d820      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008056:	d012      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805c:	d81a      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d022      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008066:	d115      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806c:	3308      	adds	r3, #8
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f001 fd8f 	bl	8009b94 <RCCEx_PLL2_Config>
 8008076:	4603      	mov	r3, r0
 8008078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800807c:	e015      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008082:	3328      	adds	r3, #40	; 0x28
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fe36 	bl	8009cf8 <RCCEx_PLL3_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008092:	e00a      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800809a:	e006      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800809c:	bf00      	nop
 800809e:	e004      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080a0:	bf00      	nop
 80080a2:	e002      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80080a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080b2:	4b39      	ldr	r3, [pc, #228]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c2:	4a35      	ldr	r2, [pc, #212]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080c4:	430b      	orrs	r3, r1
 80080c6:	6553      	str	r3, [r2, #84]	; 0x54
 80080c8:	e003      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80080d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80080de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080e2:	2300      	movs	r3, #0
 80080e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80080e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80080ec:	460b      	mov	r3, r1
 80080ee:	4313      	orrs	r3, r2
 80080f0:	d058      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80080f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80080fe:	d033      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008100:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008104:	d82c      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810a:	d02f      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008110:	d826      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008116:	d02b      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008118:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800811c:	d820      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800811e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008122:	d012      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008128:	d81a      	bhi.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d022      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800812e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008132:	d115      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008138:	3308      	adds	r3, #8
 800813a:	2100      	movs	r1, #0
 800813c:	4618      	mov	r0, r3
 800813e:	f001 fd29 	bl	8009b94 <RCCEx_PLL2_Config>
 8008142:	4603      	mov	r3, r0
 8008144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008148:	e015      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800814a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800814e:	3328      	adds	r3, #40	; 0x28
 8008150:	2102      	movs	r1, #2
 8008152:	4618      	mov	r0, r3
 8008154:	f001 fdd0 	bl	8009cf8 <RCCEx_PLL3_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800815e:	e00a      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008166:	e006      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008168:	bf00      	nop
 800816a:	e004      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800816c:	bf00      	nop
 800816e:	e002      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10e      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800817e:	4b06      	ldr	r3, [pc, #24]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008182:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800818e:	4a02      	ldr	r2, [pc, #8]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6593      	str	r3, [r2, #88]	; 0x58
 8008194:	e006      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80081b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081b4:	2300      	movs	r3, #0
 80081b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80081be:	460b      	mov	r3, r1
 80081c0:	4313      	orrs	r3, r2
 80081c2:	d055      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081d0:	d033      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80081d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081d6:	d82c      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80081d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081dc:	d02f      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80081de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081e2:	d826      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80081e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081e8:	d02b      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80081ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80081ee:	d820      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80081f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081f4:	d012      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80081f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081fa:	d81a      	bhi.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d022      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008204:	d115      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820a:	3308      	adds	r3, #8
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fcc0 	bl	8009b94 <RCCEx_PLL2_Config>
 8008214:	4603      	mov	r3, r0
 8008216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800821a:	e015      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800821c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008220:	3328      	adds	r3, #40	; 0x28
 8008222:	2102      	movs	r1, #2
 8008224:	4618      	mov	r0, r3
 8008226:	f001 fd67 	bl	8009cf8 <RCCEx_PLL3_Config>
 800822a:	4603      	mov	r3, r0
 800822c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008230:	e00a      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008238:	e006      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800823a:	bf00      	nop
 800823c:	e004      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800823e:	bf00      	nop
 8008240:	e002      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008242:	bf00      	nop
 8008244:	e000      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008248:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10b      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008250:	4ba1      	ldr	r3, [pc, #644]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008254:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800825c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008260:	4a9d      	ldr	r2, [pc, #628]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008262:	430b      	orrs	r3, r1
 8008264:	6593      	str	r3, [r2, #88]	; 0x58
 8008266:	e003      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800826c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	f002 0308 	and.w	r3, r2, #8
 800827c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008280:	2300      	movs	r3, #0
 8008282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008286:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800828a:	460b      	mov	r3, r1
 800828c:	4313      	orrs	r3, r2
 800828e:	d01e      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829c:	d10c      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a2:	3328      	adds	r3, #40	; 0x28
 80082a4:	2102      	movs	r1, #2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 fd26 	bl	8009cf8 <RCCEx_PLL3_Config>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80082b8:	4b87      	ldr	r3, [pc, #540]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082c8:	4a83      	ldr	r2, [pc, #524]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ca:	430b      	orrs	r3, r1
 80082cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f002 0310 	and.w	r3, r2, #16
 80082da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082de:	2300      	movs	r3, #0
 80082e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80082e8:	460b      	mov	r3, r1
 80082ea:	4313      	orrs	r3, r2
 80082ec:	d01e      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fa:	d10c      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008300:	3328      	adds	r3, #40	; 0x28
 8008302:	2102      	movs	r1, #2
 8008304:	4618      	mov	r0, r3
 8008306:	f001 fcf7 	bl	8009cf8 <RCCEx_PLL3_Config>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008316:	4b70      	ldr	r3, [pc, #448]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008326:	4a6c      	ldr	r2, [pc, #432]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008328:	430b      	orrs	r3, r1
 800832a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800833c:	2300      	movs	r3, #0
 800833e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008342:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008346:	460b      	mov	r3, r1
 8008348:	4313      	orrs	r3, r2
 800834a:	d03e      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800834c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008350:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008358:	d022      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800835a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800835e:	d81b      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008368:	d00b      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800836a:	e015      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800836c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008370:	3308      	adds	r3, #8
 8008372:	2100      	movs	r1, #0
 8008374:	4618      	mov	r0, r3
 8008376:	f001 fc0d 	bl	8009b94 <RCCEx_PLL2_Config>
 800837a:	4603      	mov	r3, r0
 800837c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008380:	e00f      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008386:	3328      	adds	r3, #40	; 0x28
 8008388:	2102      	movs	r1, #2
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fcb4 	bl	8009cf8 <RCCEx_PLL3_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008396:	e004      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800839e:	e000      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80083a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10b      	bne.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083aa:	4b4b      	ldr	r3, [pc, #300]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80083b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083ba:	4a47      	ldr	r2, [pc, #284]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083bc:	430b      	orrs	r3, r1
 80083be:	6593      	str	r3, [r2, #88]	; 0x58
 80083c0:	e003      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80083d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80083d8:	2300      	movs	r3, #0
 80083da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80083e0:	460b      	mov	r3, r1
 80083e2:	4313      	orrs	r3, r2
 80083e4:	d03b      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083f2:	d01f      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80083f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083f8:	d818      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80083fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083fe:	d003      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008404:	d007      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008406:	e011      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008408:	4b33      	ldr	r3, [pc, #204]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	4a32      	ldr	r2, [pc, #200]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800840e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008414:	e00f      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841a:	3328      	adds	r3, #40	; 0x28
 800841c:	2101      	movs	r1, #1
 800841e:	4618      	mov	r0, r3
 8008420:	f001 fc6a 	bl	8009cf8 <RCCEx_PLL3_Config>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800842a:	e004      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008432:	e000      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10b      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800843e:	4b26      	ldr	r3, [pc, #152]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008442:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800844a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844e:	4a22      	ldr	r2, [pc, #136]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008450:	430b      	orrs	r3, r1
 8008452:	6553      	str	r3, [r2, #84]	; 0x54
 8008454:	e003      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008456:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800845a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800845e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800846a:	673b      	str	r3, [r7, #112]	; 0x70
 800846c:	2300      	movs	r3, #0
 800846e:	677b      	str	r3, [r7, #116]	; 0x74
 8008470:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008474:	460b      	mov	r3, r1
 8008476:	4313      	orrs	r3, r2
 8008478:	d034      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800847e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008488:	d007      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800848a:	e011      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800848c:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	4a11      	ldr	r2, [pc, #68]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008498:	e00e      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800849a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849e:	3308      	adds	r3, #8
 80084a0:	2102      	movs	r1, #2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fb76 	bl	8009b94 <RCCEx_PLL2_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80084ae:	e003      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10d      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ce:	4a02      	ldr	r2, [pc, #8]	; (80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084d0:	430b      	orrs	r3, r1
 80084d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084d4:	e006      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80084d6:	bf00      	nop
 80084d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80084e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80084f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80084f2:	2300      	movs	r3, #0
 80084f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80084fa:	460b      	mov	r3, r1
 80084fc:	4313      	orrs	r3, r2
 80084fe:	d00c      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008504:	3328      	adds	r3, #40	; 0x28
 8008506:	2102      	movs	r1, #2
 8008508:	4618      	mov	r0, r3
 800850a:	f001 fbf5 	bl	8009cf8 <RCCEx_PLL3_Config>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008526:	663b      	str	r3, [r7, #96]	; 0x60
 8008528:	2300      	movs	r3, #0
 800852a:	667b      	str	r3, [r7, #100]	; 0x64
 800852c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008530:	460b      	mov	r3, r1
 8008532:	4313      	orrs	r3, r2
 8008534:	d038      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800853e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008542:	d018      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008548:	d811      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800854a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800854e:	d014      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008554:	d80b      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d011      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800855a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800855e:	d106      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008560:	4bc3      	ldr	r3, [pc, #780]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	4ac2      	ldr	r2, [pc, #776]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800856a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800856c:	e008      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008574:	e004      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008576:	bf00      	nop
 8008578:	e002      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800857a:	bf00      	nop
 800857c:	e000      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800857e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008588:	4bb9      	ldr	r3, [pc, #740]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800858a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008598:	4ab5      	ldr	r2, [pc, #724]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800859a:	430b      	orrs	r3, r1
 800859c:	6553      	str	r3, [r2, #84]	; 0x54
 800859e:	e003      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80085b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80085b6:	2300      	movs	r3, #0
 80085b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80085be:	460b      	mov	r3, r1
 80085c0:	4313      	orrs	r3, r2
 80085c2:	d009      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80085c4:	4baa      	ldr	r3, [pc, #680]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80085cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d2:	4aa7      	ldr	r2, [pc, #668]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085d4:	430b      	orrs	r3, r1
 80085d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80085d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80085e4:	653b      	str	r3, [r7, #80]	; 0x50
 80085e6:	2300      	movs	r3, #0
 80085e8:	657b      	str	r3, [r7, #84]	; 0x54
 80085ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80085ee:	460b      	mov	r3, r1
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d00a      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80085f4:	4b9e      	ldr	r3, [pc, #632]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008604:	4a9a      	ldr	r2, [pc, #616]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008606:	430b      	orrs	r3, r1
 8008608:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008616:	64bb      	str	r3, [r7, #72]	; 0x48
 8008618:	2300      	movs	r3, #0
 800861a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800861c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008620:	460b      	mov	r3, r1
 8008622:	4313      	orrs	r3, r2
 8008624:	d009      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008626:	4b92      	ldr	r3, [pc, #584]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800862a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800862e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008634:	4a8e      	ldr	r2, [pc, #568]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008636:	430b      	orrs	r3, r1
 8008638:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800863a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008646:	643b      	str	r3, [r7, #64]	; 0x40
 8008648:	2300      	movs	r3, #0
 800864a:	647b      	str	r3, [r7, #68]	; 0x44
 800864c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008650:	460b      	mov	r3, r1
 8008652:	4313      	orrs	r3, r2
 8008654:	d00e      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008656:	4b86      	ldr	r3, [pc, #536]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	4a85      	ldr	r2, [pc, #532]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800865c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008660:	6113      	str	r3, [r2, #16]
 8008662:	4b83      	ldr	r3, [pc, #524]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008664:	6919      	ldr	r1, [r3, #16]
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800866e:	4a80      	ldr	r2, [pc, #512]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008670:	430b      	orrs	r3, r1
 8008672:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008680:	63bb      	str	r3, [r7, #56]	; 0x38
 8008682:	2300      	movs	r3, #0
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008686:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800868a:	460b      	mov	r3, r1
 800868c:	4313      	orrs	r3, r2
 800868e:	d009      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008690:	4b77      	ldr	r3, [pc, #476]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008694:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869e:	4a74      	ldr	r2, [pc, #464]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086a0:	430b      	orrs	r3, r1
 80086a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80086b0:	633b      	str	r3, [r7, #48]	; 0x30
 80086b2:	2300      	movs	r3, #0
 80086b4:	637b      	str	r3, [r7, #52]	; 0x34
 80086b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80086ba:	460b      	mov	r3, r1
 80086bc:	4313      	orrs	r3, r2
 80086be:	d00a      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086c0:	4b6b      	ldr	r3, [pc, #428]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80086c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086d0:	4a67      	ldr	r2, [pc, #412]	; (8008870 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086d2:	430b      	orrs	r3, r1
 80086d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80086d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	2100      	movs	r1, #0
 80086e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80086ec:	460b      	mov	r3, r1
 80086ee:	4313      	orrs	r3, r2
 80086f0:	d011      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f6:	3308      	adds	r3, #8
 80086f8:	2100      	movs	r1, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 fa4a 	bl	8009b94 <RCCEx_PLL2_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	2100      	movs	r1, #0
 8008720:	6239      	str	r1, [r7, #32]
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
 8008728:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800872c:	460b      	mov	r3, r1
 800872e:	4313      	orrs	r3, r2
 8008730:	d011      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008736:	3308      	adds	r3, #8
 8008738:	2101      	movs	r1, #1
 800873a:	4618      	mov	r0, r3
 800873c:	f001 fa2a 	bl	8009b94 <RCCEx_PLL2_Config>
 8008740:	4603      	mov	r3, r0
 8008742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	2100      	movs	r1, #0
 8008760:	61b9      	str	r1, [r7, #24]
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800876c:	460b      	mov	r3, r1
 800876e:	4313      	orrs	r3, r2
 8008770:	d011      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008776:	3308      	adds	r3, #8
 8008778:	2102      	movs	r1, #2
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fa0a 	bl	8009b94 <RCCEx_PLL2_Config>
 8008780:	4603      	mov	r3, r0
 8008782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	2100      	movs	r1, #0
 80087a0:	6139      	str	r1, [r7, #16]
 80087a2:	f003 0308 	and.w	r3, r3, #8
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80087ac:	460b      	mov	r3, r1
 80087ae:	4313      	orrs	r3, r2
 80087b0:	d011      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b6:	3328      	adds	r3, #40	; 0x28
 80087b8:	2100      	movs	r1, #0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fa9c 	bl	8009cf8 <RCCEx_PLL3_Config>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80087c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	2100      	movs	r1, #0
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	f003 0310 	and.w	r3, r3, #16
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80087ec:	460b      	mov	r3, r1
 80087ee:	4313      	orrs	r3, r2
 80087f0:	d011      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f6:	3328      	adds	r3, #40	; 0x28
 80087f8:	2101      	movs	r1, #1
 80087fa:	4618      	mov	r0, r3
 80087fc:	f001 fa7c 	bl	8009cf8 <RCCEx_PLL3_Config>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008812:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	2100      	movs	r1, #0
 8008820:	6039      	str	r1, [r7, #0]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	607b      	str	r3, [r7, #4]
 8008828:	e9d7 1200 	ldrd	r1, r2, [r7]
 800882c:	460b      	mov	r3, r1
 800882e:	4313      	orrs	r3, r2
 8008830:	d011      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008836:	3328      	adds	r3, #40	; 0x28
 8008838:	2102      	movs	r1, #2
 800883a:	4618      	mov	r0, r3
 800883c:	f001 fa5c 	bl	8009cf8 <RCCEx_PLL3_Config>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800884e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008856:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	e000      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
}
 8008864:	4618      	mov	r0, r3
 8008866:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800886a:	46bd      	mov	sp, r7
 800886c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008870:	58024400 	.word	0x58024400

08008874 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b090      	sub	sp, #64	; 0x40
 8008878:	af00      	add	r7, sp, #0
 800887a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800887e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008882:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008886:	430b      	orrs	r3, r1
 8008888:	f040 8094 	bne.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800888c:	4b9e      	ldr	r3, [pc, #632]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800888e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	2b04      	cmp	r3, #4
 800889a:	f200 8087 	bhi.w	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800889e:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088b9 	.word	0x080088b9
 80088a8:	080088e1 	.word	0x080088e1
 80088ac:	08008909 	.word	0x08008909
 80088b0:	080089a5 	.word	0x080089a5
 80088b4:	08008931 	.word	0x08008931
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088b8:	4b93      	ldr	r3, [pc, #588]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088c4:	d108      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 f810 	bl	80098f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d4:	f000 bd45 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088dc:	f000 bd41 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e0:	4b89      	ldr	r3, [pc, #548]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088ec:	d108      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ee:	f107 0318 	add.w	r3, r7, #24
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 fd54 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fc:	f000 bd31 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008904:	f000 bd2d 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008908:	4b7f      	ldr	r3, [pc, #508]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008914:	d108      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008916:	f107 030c 	add.w	r3, r7, #12
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fe94 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008924:	f000 bd1d 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892c:	f000 bd19 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008930:	4b75      	ldr	r3, [pc, #468]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008938:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800893a:	4b73      	ldr	r3, [pc, #460]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b04      	cmp	r3, #4
 8008944:	d10c      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008948:	2b00      	cmp	r3, #0
 800894a:	d109      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894c:	4b6e      	ldr	r3, [pc, #440]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	08db      	lsrs	r3, r3, #3
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	4a6d      	ldr	r2, [pc, #436]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800895e:	e01f      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008960:	4b69      	ldr	r3, [pc, #420]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800896c:	d106      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800896e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008974:	d102      	bne.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008976:	4b66      	ldr	r3, [pc, #408]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800897a:	e011      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800897c:	4b62      	ldr	r3, [pc, #392]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008988:	d106      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800898a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008990:	d102      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008992:	4b60      	ldr	r3, [pc, #384]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008996:	e003      	b.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800899c:	f000 bce1 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089a0:	f000 bcdf 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089a4:	4b5c      	ldr	r3, [pc, #368]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089a8:	f000 bcdb 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089b0:	f000 bcd7 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80089b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80089bc:	430b      	orrs	r3, r1
 80089be:	f040 80ad 	bne.w	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80089c2:	4b51      	ldr	r3, [pc, #324]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80089ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d2:	d056      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089da:	f200 8090 	bhi.w	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	2bc0      	cmp	r3, #192	; 0xc0
 80089e2:	f000 8088 	beq.w	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	2bc0      	cmp	r3, #192	; 0xc0
 80089ea:	f200 8088 	bhi.w	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	2b80      	cmp	r3, #128	; 0x80
 80089f2:	d032      	beq.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	2b80      	cmp	r3, #128	; 0x80
 80089f8:	f200 8081 	bhi.w	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	2b40      	cmp	r3, #64	; 0x40
 8008a06:	d014      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008a08:	e079      	b.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a0a:	4b3f      	ldr	r3, [pc, #252]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a16:	d108      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 ff67 	bl	80098f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a26:	f000 bc9c 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a2e:	f000 bc98 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a32:	4b35      	ldr	r3, [pc, #212]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a3e:	d108      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a40:	f107 0318 	add.w	r3, r7, #24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fcab 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a4e:	f000 bc88 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a56:	f000 bc84 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a5a:	4b2b      	ldr	r3, [pc, #172]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a66:	d108      	bne.n	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a68:	f107 030c 	add.w	r3, r7, #12
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fdeb 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a76:	f000 bc74 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a7e:	f000 bc70 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a82:	4b21      	ldr	r3, [pc, #132]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a8c:	4b1e      	ldr	r3, [pc, #120]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d10c      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	08db      	lsrs	r3, r3, #3
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	4a18      	ldr	r2, [pc, #96]	; (8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab0:	e01f      	b.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ab2:	4b15      	ldr	r3, [pc, #84]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008abe:	d106      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ac6:	d102      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ac8:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008acc:	e011      	b.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ace:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ada:	d106      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae2:	d102      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ae4:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae8:	e003      	b.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008aee:	f000 bc38 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008af2:	f000 bc36 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008af6:	4b08      	ldr	r3, [pc, #32]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008afa:	f000 bc32 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b02:	f000 bc2e 	b.w	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b06:	bf00      	nop
 8008b08:	58024400 	.word	0x58024400
 8008b0c:	03d09000 	.word	0x03d09000
 8008b10:	003d0900 	.word	0x003d0900
 8008b14:	017d7840 	.word	0x017d7840
 8008b18:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b20:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008b24:	430b      	orrs	r3, r1
 8008b26:	f040 809c 	bne.w	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008b2a:	4b9e      	ldr	r3, [pc, #632]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008b32:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b3a:	d054      	beq.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b42:	f200 808b 	bhi.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b4c:	f000 8083 	beq.w	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b56:	f200 8081 	bhi.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b60:	d02f      	beq.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b68:	d878      	bhi.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b76:	d012      	beq.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008b78:	e070      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b7a:	4b8a      	ldr	r3, [pc, #552]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b86:	d107      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 feaf 	bl	80098f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b96:	e3e4      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b9c:	e3e1      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b9e:	4b81      	ldr	r3, [pc, #516]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008baa:	d107      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bac:	f107 0318 	add.w	r3, r7, #24
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fbf5 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bba:	e3d2      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc0:	e3cf      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bc2:	4b78      	ldr	r3, [pc, #480]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bce:	d107      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bd0:	f107 030c 	add.w	r3, r7, #12
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fd37 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bde:	e3c0      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008be4:	e3bd      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008be6:	4b6f      	ldr	r3, [pc, #444]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bf0:	4b6c      	ldr	r3, [pc, #432]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d10c      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c02:	4b68      	ldr	r3, [pc, #416]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	08db      	lsrs	r3, r3, #3
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	4a66      	ldr	r2, [pc, #408]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c14:	e01e      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c16:	4b63      	ldr	r3, [pc, #396]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c22:	d106      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c2a:	d102      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c2c:	4b5f      	ldr	r3, [pc, #380]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c30:	e010      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c32:	4b5c      	ldr	r3, [pc, #368]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c3e:	d106      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c46:	d102      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c48:	4b59      	ldr	r3, [pc, #356]	; (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c4c:	e002      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c52:	e386      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c54:	e385      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c56:	4b57      	ldr	r3, [pc, #348]	; (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c5a:	e382      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c60:	e37f      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c66:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	f040 80a7 	bne.w	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008c70:	4b4c      	ldr	r3, [pc, #304]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c74:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008c78:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c80:	d055      	beq.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c88:	f200 8096 	bhi.w	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c92:	f000 8084 	beq.w	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c9c:	f200 808c 	bhi.w	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ca6:	d030      	beq.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cae:	f200 8083 	bhi.w	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d004      	beq.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cbe:	d012      	beq.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008cc0:	e07a      	b.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cc2:	4b38      	ldr	r3, [pc, #224]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cce:	d107      	bne.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 fe0b 	bl	80098f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cde:	e340      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ce4:	e33d      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ce6:	4b2f      	ldr	r3, [pc, #188]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cf2:	d107      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cf4:	f107 0318 	add.w	r3, r7, #24
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fb51 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d02:	e32e      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d08:	e32b      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d0a:	4b26      	ldr	r3, [pc, #152]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d16:	d107      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d18:	f107 030c 	add.w	r3, r7, #12
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 fc93 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d26:	e31c      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d2c:	e319      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d2e:	4b1d      	ldr	r3, [pc, #116]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d38:	4b1a      	ldr	r3, [pc, #104]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	d10c      	bne.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d109      	bne.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d4a:	4b16      	ldr	r3, [pc, #88]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	08db      	lsrs	r3, r3, #3
 8008d50:	f003 0303 	and.w	r3, r3, #3
 8008d54:	4a14      	ldr	r2, [pc, #80]	; (8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008d56:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5c:	e01e      	b.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d5e:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6a:	d106      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d72:	d102      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d74:	4b0d      	ldr	r3, [pc, #52]	; (8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d78:	e010      	b.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d86:	d106      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d8e:	d102      	bne.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d94:	e002      	b.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d9a:	e2e2      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d9c:	e2e1      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d9e:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008da2:	e2de      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008da4:	58024400 	.word	0x58024400
 8008da8:	03d09000 	.word	0x03d09000
 8008dac:	003d0900 	.word	0x003d0900
 8008db0:	017d7840 	.word	0x017d7840
 8008db4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dbc:	e2d1      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	f040 809c 	bne.w	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008dcc:	4b93      	ldr	r3, [pc, #588]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ddc:	d054      	beq.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008de4:	f200 808b 	bhi.w	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dee:	f000 8083 	beq.w	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008df8:	f200 8081 	bhi.w	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e02:	d02f      	beq.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e0a:	d878      	bhi.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d004      	beq.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e18:	d012      	beq.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008e1a:	e070      	b.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e1c:	4b7f      	ldr	r3, [pc, #508]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e28:	d107      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fd5e 	bl	80098f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e38:	e293      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e3e:	e290      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e40:	4b76      	ldr	r3, [pc, #472]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e4c:	d107      	bne.n	8008e5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e4e:	f107 0318 	add.w	r3, r7, #24
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 faa4 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e5c:	e281      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e62:	e27e      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e64:	4b6d      	ldr	r3, [pc, #436]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e70:	d107      	bne.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e72:	f107 030c 	add.w	r3, r7, #12
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fbe6 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e80:	e26f      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e86:	e26c      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e88:	4b64      	ldr	r3, [pc, #400]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e90:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e92:	4b62      	ldr	r3, [pc, #392]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d10c      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d109      	bne.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ea4:	4b5d      	ldr	r3, [pc, #372]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	08db      	lsrs	r3, r3, #3
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	4a5c      	ldr	r2, [pc, #368]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb6:	e01e      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008eb8:	4b58      	ldr	r3, [pc, #352]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec4:	d106      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ecc:	d102      	bne.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ece:	4b55      	ldr	r3, [pc, #340]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed2:	e010      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ed4:	4b51      	ldr	r3, [pc, #324]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee0:	d106      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee8:	d102      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008eea:	4b4f      	ldr	r3, [pc, #316]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eee:	e002      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008ef4:	e235      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ef6:	e234      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ef8:	4b4c      	ldr	r3, [pc, #304]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008efc:	e231      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f02:	e22e      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f08:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	f040 808f 	bne.w	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008f12:	4b42      	ldr	r3, [pc, #264]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f16:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008f1a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f22:	d06b      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f2a:	d874      	bhi.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f32:	d056      	beq.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f3a:	d86c      	bhi.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f42:	d03b      	beq.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f4a:	d864      	bhi.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f52:	d021      	beq.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f5a:	d85c      	bhi.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d004      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f68:	d004      	beq.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008f6a:	e054      	b.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008f6c:	f7fe fa0a 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
 8008f70:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f72:	e1f6      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f74:	4b29      	ldr	r3, [pc, #164]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f80:	d107      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f82:	f107 0318 	add.w	r3, r7, #24
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fa0a 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f90:	e1e7      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f96:	e1e4      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f98:	4b20      	ldr	r3, [pc, #128]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa4:	d107      	bne.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fa6:	f107 030c 	add.w	r3, r7, #12
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fb4c 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fb4:	e1d5      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fba:	e1d2      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fbc:	4b17      	ldr	r3, [pc, #92]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0304 	and.w	r3, r3, #4
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d109      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fc8:	4b14      	ldr	r3, [pc, #80]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	08db      	lsrs	r3, r3, #3
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	4a13      	ldr	r2, [pc, #76]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fda:	e1c2      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe0:	e1bf      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008fe2:	4b0e      	ldr	r3, [pc, #56]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fee:	d102      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff4:	e1b5      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ffa:	e1b2      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ffc:	4b07      	ldr	r3, [pc, #28]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009008:	d102      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800900a:	4b07      	ldr	r3, [pc, #28]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800900e:	e1a8      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009014:	e1a5      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800901a:	e1a2      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800901c:	58024400 	.word	0x58024400
 8009020:	03d09000 	.word	0x03d09000
 8009024:	003d0900 	.word	0x003d0900
 8009028:	017d7840 	.word	0x017d7840
 800902c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009034:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009038:	430b      	orrs	r3, r1
 800903a:	d173      	bne.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800903c:	4b9c      	ldr	r3, [pc, #624]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800903e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009044:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800904c:	d02f      	beq.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800904e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009054:	d863      	bhi.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009062:	d012      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009064:	e05b      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009066:	4b92      	ldr	r3, [pc, #584]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800906e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009072:	d107      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009074:	f107 0318 	add.w	r3, r7, #24
 8009078:	4618      	mov	r0, r3
 800907a:	f000 f991 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009082:	e16e      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009088:	e16b      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800908a:	4b89      	ldr	r3, [pc, #548]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009096:	d107      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009098:	f107 030c 	add.w	r3, r7, #12
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fad3 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090a6:	e15c      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ac:	e159      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090ae:	4b80      	ldr	r3, [pc, #512]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090b8:	4b7d      	ldr	r3, [pc, #500]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0304 	and.w	r3, r3, #4
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d10c      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80090c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d109      	bne.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090ca:	4b79      	ldr	r3, [pc, #484]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	08db      	lsrs	r3, r3, #3
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	4a77      	ldr	r2, [pc, #476]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80090d6:	fa22 f303 	lsr.w	r3, r2, r3
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090dc:	e01e      	b.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090de:	4b74      	ldr	r3, [pc, #464]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ea:	d106      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80090ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090f2:	d102      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80090f4:	4b70      	ldr	r3, [pc, #448]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80090f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090f8:	e010      	b.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090fa:	4b6d      	ldr	r3, [pc, #436]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009106:	d106      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800910e:	d102      	bne.n	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009110:	4b6a      	ldr	r3, [pc, #424]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009114:	e002      	b.n	800911c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800911a:	e122      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800911c:	e121      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009122:	e11e      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009128:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800912c:	430b      	orrs	r3, r1
 800912e:	d133      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009130:	4b5f      	ldr	r3, [pc, #380]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009138:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	2b00      	cmp	r3, #0
 800913e:	d004      	beq.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009146:	d012      	beq.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009148:	e023      	b.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800914a:	4b59      	ldr	r3, [pc, #356]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009156:	d107      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800915c:	4618      	mov	r0, r3
 800915e:	f000 fbc7 	bl	80098f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009166:	e0fc      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800916c:	e0f9      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800916e:	4b50      	ldr	r3, [pc, #320]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800917a:	d107      	bne.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917c:	f107 0318 	add.w	r3, r7, #24
 8009180:	4618      	mov	r0, r3
 8009182:	f000 f90d 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800918a:	e0ea      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009190:	e0e7      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009196:	e0e4      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800919c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80091a0:	430b      	orrs	r3, r1
 80091a2:	f040 808d 	bne.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80091a6:	4b42      	ldr	r3, [pc, #264]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80091a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80091ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80091b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091b6:	d06b      	beq.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091be:	d874      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c6:	d056      	beq.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ce:	d86c      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091d6:	d03b      	beq.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091de:	d864      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e6:	d021      	beq.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ee:	d85c      	bhi.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091fc:	d004      	beq.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80091fe:	e054      	b.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009200:	f000 f8b8 	bl	8009374 <HAL_RCCEx_GetD3PCLK1Freq>
 8009204:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009206:	e0ac      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009208:	4b29      	ldr	r3, [pc, #164]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009214:	d107      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009216:	f107 0318 	add.w	r3, r7, #24
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f8c0 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009224:	e09d      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800922a:	e09a      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800922c:	4b20      	ldr	r3, [pc, #128]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009238:	d107      	bne.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800923a:	f107 030c 	add.w	r3, r7, #12
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fa02 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009248:	e08b      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800924e:	e088      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b04      	cmp	r3, #4
 800925a:	d109      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800925c:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	08db      	lsrs	r3, r3, #3
 8009262:	f003 0303 	and.w	r3, r3, #3
 8009266:	4a13      	ldr	r2, [pc, #76]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009268:	fa22 f303 	lsr.w	r3, r2, r3
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800926e:	e078      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009274:	e075      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009276:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009282:	d102      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009288:	e06b      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800928e:	e068      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800929c:	d102      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800929e:	4b07      	ldr	r3, [pc, #28]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a2:	e05e      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a8:	e05b      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ae:	e058      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092b0:	58024400 	.word	0x58024400
 80092b4:	03d09000 	.word	0x03d09000
 80092b8:	003d0900 	.word	0x003d0900
 80092bc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80092c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80092c8:	430b      	orrs	r3, r1
 80092ca:	d148      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80092cc:	4b27      	ldr	r3, [pc, #156]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80092ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092dc:	d02a      	beq.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e4:	d838      	bhi.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092f2:	d00d      	beq.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80092f4:	e030      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092f6:	4b1d      	ldr	r3, [pc, #116]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009302:	d102      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009304:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009308:	e02b      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800930e:	e028      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009310:	4b16      	ldr	r3, [pc, #88]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009318:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800931c:	d107      	bne.n	800932e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800931e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fae4 	bl	80098f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800932c:	e019      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009332:	e016      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009334:	4b0d      	ldr	r3, [pc, #52]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800933c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009340:	d107      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009342:	f107 0318 	add.w	r3, r7, #24
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f82a 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009350:	e007      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009356:	e004      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800935c:	e001      	b.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009364:	4618      	mov	r0, r3
 8009366:	3740      	adds	r7, #64	; 0x40
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	58024400 	.word	0x58024400
 8009370:	017d7840 	.word	0x017d7840

08009374 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009378:	f7fd ffd4 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 800937c:	4602      	mov	r2, r0
 800937e:	4b06      	ldr	r3, [pc, #24]	; (8009398 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	091b      	lsrs	r3, r3, #4
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	4904      	ldr	r1, [pc, #16]	; (800939c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800938a:	5ccb      	ldrb	r3, [r1, r3]
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009394:	4618      	mov	r0, r3
 8009396:	bd80      	pop	{r7, pc}
 8009398:	58024400 	.word	0x58024400
 800939c:	080100f0 	.word	0x080100f0

080093a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b089      	sub	sp, #36	; 0x24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093a8:	4ba1      	ldr	r3, [pc, #644]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ac:	f003 0303 	and.w	r3, r3, #3
 80093b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80093b2:	4b9f      	ldr	r3, [pc, #636]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	0b1b      	lsrs	r3, r3, #12
 80093b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80093be:	4b9c      	ldr	r3, [pc, #624]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c2:	091b      	lsrs	r3, r3, #4
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80093ca:	4b99      	ldr	r3, [pc, #612]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ce:	08db      	lsrs	r3, r3, #3
 80093d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	fb02 f303 	mul.w	r3, r2, r3
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 8111 	beq.w	8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	f000 8083 	beq.w	80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	f200 80a1 	bhi.w	8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d056      	beq.n	80094b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800940a:	e099      	b.n	8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800940c:	4b88      	ldr	r3, [pc, #544]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d02d      	beq.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009418:	4b85      	ldr	r3, [pc, #532]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	08db      	lsrs	r3, r3, #3
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	4a84      	ldr	r2, [pc, #528]	; (8009634 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009424:	fa22 f303 	lsr.w	r3, r2, r3
 8009428:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009442:	4b7b      	ldr	r3, [pc, #492]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009452:	ed97 6a03 	vldr	s12, [r7, #12]
 8009456:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800945a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009472:	e087      	b.n	8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800963c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009486:	4b6a      	ldr	r3, [pc, #424]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948e:	ee07 3a90 	vmov	s15, r3
 8009492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009496:	ed97 6a03 	vldr	s12, [r7, #12]
 800949a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800949e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094b6:	e065      	b.n	8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ca:	4b59      	ldr	r3, [pc, #356]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d2:	ee07 3a90 	vmov	s15, r3
 80094d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094da:	ed97 6a03 	vldr	s12, [r7, #12]
 80094de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094fa:	e043      	b.n	8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009506:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009644 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800950a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800950e:	4b48      	ldr	r3, [pc, #288]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009522:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800952a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800952e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800953a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800953e:	e021      	b.n	8009584 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800954e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009552:	4b37      	ldr	r3, [pc, #220]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955a:	ee07 3a90 	vmov	s15, r3
 800955e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009562:	ed97 6a03 	vldr	s12, [r7, #12]
 8009566:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800956a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800957a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009582:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009584:	4b2a      	ldr	r3, [pc, #168]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	0a5b      	lsrs	r3, r3, #9
 800958a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800959a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800959e:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095aa:	ee17 2a90 	vmov	r2, s15
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80095b2:	4b1f      	ldr	r3, [pc, #124]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b6:	0c1b      	lsrs	r3, r3, #16
 80095b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80095d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d8:	ee17 2a90 	vmov	r2, s15
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80095e0:	4b13      	ldr	r3, [pc, #76]	; (8009630 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e4:	0e1b      	lsrs	r3, r3, #24
 80095e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80095fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009606:	ee17 2a90 	vmov	r2, s15
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800960e:	e008      	b.n	8009622 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	609a      	str	r2, [r3, #8]
}
 8009622:	bf00      	nop
 8009624:	3724      	adds	r7, #36	; 0x24
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	58024400 	.word	0x58024400
 8009634:	03d09000 	.word	0x03d09000
 8009638:	46000000 	.word	0x46000000
 800963c:	4c742400 	.word	0x4c742400
 8009640:	4a742400 	.word	0x4a742400
 8009644:	4bbebc20 	.word	0x4bbebc20

08009648 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009648:	b480      	push	{r7}
 800964a:	b089      	sub	sp, #36	; 0x24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009650:	4ba1      	ldr	r3, [pc, #644]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800965a:	4b9f      	ldr	r3, [pc, #636]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	0d1b      	lsrs	r3, r3, #20
 8009660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009664:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009666:	4b9c      	ldr	r3, [pc, #624]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009672:	4b99      	ldr	r3, [pc, #612]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009676:	08db      	lsrs	r3, r3, #3
 8009678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	fb02 f303 	mul.w	r3, r2, r3
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 8111 	beq.w	80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	2b02      	cmp	r3, #2
 800969a:	f000 8083 	beq.w	80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800969e:	69bb      	ldr	r3, [r7, #24]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	f200 80a1 	bhi.w	80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d056      	beq.n	8009760 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80096b2:	e099      	b.n	80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096b4:	4b88      	ldr	r3, [pc, #544]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d02d      	beq.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096c0:	4b85      	ldr	r3, [pc, #532]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	08db      	lsrs	r3, r3, #3
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	4a84      	ldr	r2, [pc, #528]	; (80098dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80096cc:	fa22 f303 	lsr.w	r3, r2, r3
 80096d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	ee07 3a90 	vmov	s15, r3
 80096d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ea:	4b7b      	ldr	r3, [pc, #492]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80098e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800970e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009716:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800971a:	e087      	b.n	800982c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80098e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800972a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800972e:	4b6a      	ldr	r3, [pc, #424]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009742:	eddf 5a67 	vldr	s11, [pc, #412]	; 80098e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800974e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800975e:	e065      	b.n	800982c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800976e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009772:	4b59      	ldr	r3, [pc, #356]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009782:	ed97 6a03 	vldr	s12, [r7, #12]
 8009786:	eddf 5a56 	vldr	s11, [pc, #344]	; 80098e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800978a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800978e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800979e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097a2:	e043      	b.n	800982c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80098ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80097b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097b6:	4b48      	ldr	r3, [pc, #288]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80098e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097e6:	e021      	b.n	800982c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097fa:	4b37      	ldr	r3, [pc, #220]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980a:	ed97 6a03 	vldr	s12, [r7, #12]
 800980e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800981a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800981e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800982a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800982c:	4b2a      	ldr	r3, [pc, #168]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800982e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009830:	0a5b      	lsrs	r3, r3, #9
 8009832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009836:	ee07 3a90 	vmov	s15, r3
 800983a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009846:	edd7 6a07 	vldr	s13, [r7, #28]
 800984a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800984e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009852:	ee17 2a90 	vmov	r2, s15
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800985a:	4b1f      	ldr	r3, [pc, #124]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800985c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985e:	0c1b      	lsrs	r3, r3, #16
 8009860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009874:	edd7 6a07 	vldr	s13, [r7, #28]
 8009878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800987c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009880:	ee17 2a90 	vmov	r2, s15
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009888:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	0e1b      	lsrs	r3, r3, #24
 800988e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009892:	ee07 3a90 	vmov	s15, r3
 8009896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800989e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80098a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ae:	ee17 2a90 	vmov	r2, s15
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80098b6:	e008      	b.n	80098ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	609a      	str	r2, [r3, #8]
}
 80098ca:	bf00      	nop
 80098cc:	3724      	adds	r7, #36	; 0x24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	58024400 	.word	0x58024400
 80098dc:	03d09000 	.word	0x03d09000
 80098e0:	46000000 	.word	0x46000000
 80098e4:	4c742400 	.word	0x4c742400
 80098e8:	4a742400 	.word	0x4a742400
 80098ec:	4bbebc20 	.word	0x4bbebc20

080098f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b089      	sub	sp, #36	; 0x24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098f8:	4ba0      	ldr	r3, [pc, #640]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fc:	f003 0303 	and.w	r3, r3, #3
 8009900:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009902:	4b9e      	ldr	r3, [pc, #632]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009906:	091b      	lsrs	r3, r3, #4
 8009908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800990c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800990e:	4b9b      	ldr	r3, [pc, #620]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009918:	4b98      	ldr	r3, [pc, #608]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800991a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991c:	08db      	lsrs	r3, r3, #3
 800991e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	fb02 f303 	mul.w	r3, r2, r3
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009930:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 8111 	beq.w	8009b5e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	2b02      	cmp	r3, #2
 8009940:	f000 8083 	beq.w	8009a4a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	2b02      	cmp	r3, #2
 8009948:	f200 80a1 	bhi.w	8009a8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d056      	beq.n	8009a06 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009958:	e099      	b.n	8009a8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800995a:	4b88      	ldr	r3, [pc, #544]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d02d      	beq.n	80099c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009966:	4b85      	ldr	r3, [pc, #532]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	08db      	lsrs	r3, r3, #3
 800996c:	f003 0303 	and.w	r3, r3, #3
 8009970:	4a83      	ldr	r2, [pc, #524]	; (8009b80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009972:	fa22 f303 	lsr.w	r3, r2, r3
 8009976:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	ee07 3a90 	vmov	s15, r3
 8009988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009990:	4b7a      	ldr	r3, [pc, #488]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009998:	ee07 3a90 	vmov	s15, r3
 800999c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009b84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80099c0:	e087      	b.n	8009ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80099d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d4:	4b69      	ldr	r3, [pc, #420]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099dc:	ee07 3a90 	vmov	s15, r3
 80099e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80099e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009b84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a04:	e065      	b.n	8009ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	ee07 3a90 	vmov	s15, r3
 8009a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009b8c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a18:	4b58      	ldr	r3, [pc, #352]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a20:	ee07 3a90 	vmov	s15, r3
 8009a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a28:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009b84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a48:	e043      	b.n	8009ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	ee07 3a90 	vmov	s15, r3
 8009a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a5c:	4b47      	ldr	r3, [pc, #284]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a64:	ee07 3a90 	vmov	s15, r3
 8009a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009b84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a8c:	e021      	b.n	8009ad2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	ee07 3a90 	vmov	s15, r3
 8009a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a98:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009b88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa0:	4b36      	ldr	r3, [pc, #216]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aa8:	ee07 3a90 	vmov	s15, r3
 8009aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ab4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009b84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009acc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ad0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009ad2:	4b2a      	ldr	r3, [pc, #168]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad6:	0a5b      	lsrs	r3, r3, #9
 8009ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009adc:	ee07 3a90 	vmov	s15, r3
 8009ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8009af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af8:	ee17 2a90 	vmov	r2, s15
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009b00:	4b1e      	ldr	r3, [pc, #120]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b04:	0c1b      	lsrs	r3, r3, #16
 8009b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b26:	ee17 2a90 	vmov	r2, s15
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009b2e:	4b13      	ldr	r3, [pc, #76]	; (8009b7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b32:	0e1b      	lsrs	r3, r3, #24
 8009b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b54:	ee17 2a90 	vmov	r2, s15
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009b5c:	e008      	b.n	8009b70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	609a      	str	r2, [r3, #8]
}
 8009b70:	bf00      	nop
 8009b72:	3724      	adds	r7, #36	; 0x24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	58024400 	.word	0x58024400
 8009b80:	03d09000 	.word	0x03d09000
 8009b84:	46000000 	.word	0x46000000
 8009b88:	4c742400 	.word	0x4c742400
 8009b8c:	4a742400 	.word	0x4a742400
 8009b90:	4bbebc20 	.word	0x4bbebc20

08009b94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ba2:	4b53      	ldr	r3, [pc, #332]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	f003 0303 	and.w	r3, r3, #3
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d101      	bne.n	8009bb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e099      	b.n	8009ce6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009bb2:	4b4f      	ldr	r3, [pc, #316]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a4e      	ldr	r2, [pc, #312]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009bb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bbe:	f7f8 fb2f 	bl	8002220 <HAL_GetTick>
 8009bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bc4:	e008      	b.n	8009bd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bc6:	f7f8 fb2b 	bl	8002220 <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d901      	bls.n	8009bd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e086      	b.n	8009ce6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bd8:	4b45      	ldr	r3, [pc, #276]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1f0      	bne.n	8009bc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009be4:	4b42      	ldr	r3, [pc, #264]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	031b      	lsls	r3, r3, #12
 8009bf2:	493f      	ldr	r1, [pc, #252]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	628b      	str	r3, [r1, #40]	; 0x28
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	025b      	lsls	r3, r3, #9
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	041b      	lsls	r3, r3, #16
 8009c16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	061b      	lsls	r3, r3, #24
 8009c24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c28:	4931      	ldr	r1, [pc, #196]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c2e:	4b30      	ldr	r3, [pc, #192]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	492d      	ldr	r1, [pc, #180]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c40:	4b2b      	ldr	r3, [pc, #172]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	f023 0220 	bic.w	r2, r3, #32
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	4928      	ldr	r1, [pc, #160]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c52:	4b27      	ldr	r3, [pc, #156]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	4a26      	ldr	r2, [pc, #152]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c58:	f023 0310 	bic.w	r3, r3, #16
 8009c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c5e:	4b24      	ldr	r3, [pc, #144]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c62:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <RCCEx_PLL2_Config+0x160>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	69d2      	ldr	r2, [r2, #28]
 8009c6a:	00d2      	lsls	r2, r2, #3
 8009c6c:	4920      	ldr	r1, [pc, #128]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c72:	4b1f      	ldr	r3, [pc, #124]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	4a1e      	ldr	r2, [pc, #120]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c78:	f043 0310 	orr.w	r3, r3, #16
 8009c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d106      	bne.n	8009c92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c84:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	4a19      	ldr	r2, [pc, #100]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c90:	e00f      	b.n	8009cb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d106      	bne.n	8009ca6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c98:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ca4:	e005      	b.n	8009cb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	4a11      	ldr	r2, [pc, #68]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a0e      	ldr	r2, [pc, #56]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009cb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cbe:	f7f8 faaf 	bl	8002220 <HAL_GetTick>
 8009cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cc4:	e008      	b.n	8009cd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009cc6:	f7f8 faab 	bl	8002220 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d901      	bls.n	8009cd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e006      	b.n	8009ce6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <RCCEx_PLL2_Config+0x15c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0f0      	beq.n	8009cc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	58024400 	.word	0x58024400
 8009cf4:	ffff0007 	.word	0xffff0007

08009cf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d06:	4b53      	ldr	r3, [pc, #332]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d101      	bne.n	8009d16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e099      	b.n	8009e4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d16:	4b4f      	ldr	r3, [pc, #316]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a4e      	ldr	r2, [pc, #312]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d22:	f7f8 fa7d 	bl	8002220 <HAL_GetTick>
 8009d26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d28:	e008      	b.n	8009d3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d2a:	f7f8 fa79 	bl	8002220 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d901      	bls.n	8009d3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e086      	b.n	8009e4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d3c:	4b45      	ldr	r3, [pc, #276]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1f0      	bne.n	8009d2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d48:	4b42      	ldr	r3, [pc, #264]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	051b      	lsls	r3, r3, #20
 8009d56:	493f      	ldr	r1, [pc, #252]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	628b      	str	r3, [r1, #40]	; 0x28
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	3b01      	subs	r3, #1
 8009d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	025b      	lsls	r3, r3, #9
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	431a      	orrs	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	041b      	lsls	r3, r3, #16
 8009d7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	061b      	lsls	r3, r3, #24
 8009d88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d8c:	4931      	ldr	r1, [pc, #196]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d92:	4b30      	ldr	r3, [pc, #192]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	492d      	ldr	r1, [pc, #180]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009da4:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	4928      	ldr	r1, [pc, #160]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009db6:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	4a26      	ldr	r2, [pc, #152]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009dc2:	4b24      	ldr	r3, [pc, #144]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dc6:	4b24      	ldr	r3, [pc, #144]	; (8009e58 <RCCEx_PLL3_Config+0x160>)
 8009dc8:	4013      	ands	r3, r2
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	69d2      	ldr	r2, [r2, #28]
 8009dce:	00d2      	lsls	r2, r2, #3
 8009dd0:	4920      	ldr	r1, [pc, #128]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009dd6:	4b1f      	ldr	r3, [pc, #124]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dda:	4a1e      	ldr	r2, [pc, #120]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d106      	bne.n	8009df6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009de8:	4b1a      	ldr	r3, [pc, #104]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dec:	4a19      	ldr	r2, [pc, #100]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009dee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009df4:	e00f      	b.n	8009e16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d106      	bne.n	8009e0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009dfc:	4b15      	ldr	r3, [pc, #84]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	4a14      	ldr	r2, [pc, #80]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009e02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e08:	e005      	b.n	8009e16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e0a:	4b12      	ldr	r3, [pc, #72]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0e:	4a11      	ldr	r2, [pc, #68]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e16:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a0e      	ldr	r2, [pc, #56]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e22:	f7f8 f9fd 	bl	8002220 <HAL_GetTick>
 8009e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e28:	e008      	b.n	8009e3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e2a:	f7f8 f9f9 	bl	8002220 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d901      	bls.n	8009e3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e006      	b.n	8009e4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <RCCEx_PLL3_Config+0x15c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0f0      	beq.n	8009e2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	58024400 	.word	0x58024400
 8009e58:	ffff0007 	.word	0xffff0007

08009e5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d071      	beq.n	8009f52 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d106      	bne.n	8009e88 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7f7 face 	bl	8001424 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f003 0310 	and.w	r3, r3, #16
 8009e9a:	2b10      	cmp	r3, #16
 8009e9c:	d050      	beq.n	8009f40 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	22ca      	movs	r2, #202	; 0xca
 8009ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2253      	movs	r2, #83	; 0x53
 8009eac:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f9a0 	bl	800a1f4 <RTC_EnterInitMode>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d124      	bne.n	8009f08 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6899      	ldr	r1, [r3, #8]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	4b24      	ldr	r3, [pc, #144]	; (8009f5c <HAL_RTC_Init+0x100>)
 8009eca:	400b      	ands	r3, r1
 8009ecc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6899      	ldr	r1, [r3, #8]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	431a      	orrs	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	430a      	orrs	r2, r1
 8009eea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	0419      	lsls	r1, r3, #16
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	68da      	ldr	r2, [r3, #12]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f9ac 	bl	800a25c <RTC_ExitInitMode>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d113      	bne.n	8009f36 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f022 0203 	bic.w	r2, r2, #3
 8009f1c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	69da      	ldr	r2, [r3, #28]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	22ff      	movs	r2, #255	; 0xff
 8009f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8009f3e:	e001      	b.n	8009f44 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d103      	bne.n	8009f52 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	ff8fffbf 	.word	0xff8fffbf

08009f60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d101      	bne.n	8009f7a <HAL_RTC_SetTime+0x1a>
 8009f76:	2302      	movs	r3, #2
 8009f78:	e089      	b.n	800a08e <HAL_RTC_SetTime+0x12e>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2202      	movs	r2, #2
 8009f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	22ca      	movs	r2, #202	; 0xca
 8009f90:	625a      	str	r2, [r3, #36]	; 0x24
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2253      	movs	r2, #83	; 0x53
 8009f98:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 f92a 	bl	800a1f4 <RTC_EnterInitMode>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009fa4:	7cfb      	ldrb	r3, [r7, #19]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d161      	bne.n	800a06e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d126      	bne.n	8009ffe <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d102      	bne.n	8009fc4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 f985 	bl	800a2d8 <RTC_ByteToBcd2>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 f97e 	bl	800a2d8 <RTC_ByteToBcd2>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009fe0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	789b      	ldrb	r3, [r3, #2]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f976 	bl	800a2d8 <RTC_ByteToBcd2>
 8009fec:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009fee:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	78db      	ldrb	r3, [r3, #3]
 8009ff6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	e018      	b.n	800a030 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d102      	bne.n	800a012 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2200      	movs	r2, #0
 800a010:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	785b      	ldrb	r3, [r3, #1]
 800a01c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a01e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a024:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	78db      	ldrb	r3, [r3, #3]
 800a02a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a02c:	4313      	orrs	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	6979      	ldr	r1, [r7, #20]
 800a036:	4b18      	ldr	r3, [pc, #96]	; (800a098 <HAL_RTC_SetTime+0x138>)
 800a038:	400b      	ands	r3, r1
 800a03a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a04a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6899      	ldr	r1, [r3, #8]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	431a      	orrs	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	430a      	orrs	r2, r1
 800a062:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f8f9 	bl	800a25c <RTC_ExitInitMode>
 800a06a:	4603      	mov	r3, r0
 800a06c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	22ff      	movs	r2, #255	; 0xff
 800a074:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a076:	7cfb      	ldrb	r3, [r7, #19]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a08c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	371c      	adds	r7, #28
 800a092:	46bd      	mov	sp, r7
 800a094:	bd90      	pop	{r4, r7, pc}
 800a096:	bf00      	nop
 800a098:	007f7f7f 	.word	0x007f7f7f

0800a09c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a09c:	b590      	push	{r4, r7, lr}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d101      	bne.n	800a0b6 <HAL_RTC_SetDate+0x1a>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e073      	b.n	800a19e <HAL_RTC_SetDate+0x102>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10e      	bne.n	800a0ea <HAL_RTC_SetDate+0x4e>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	785b      	ldrb	r3, [r3, #1]
 800a0d0:	f003 0310 	and.w	r3, r3, #16
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d008      	beq.n	800a0ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	785b      	ldrb	r3, [r3, #1]
 800a0dc:	f023 0310 	bic.w	r3, r3, #16
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	330a      	adds	r3, #10
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d11c      	bne.n	800a12a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	78db      	ldrb	r3, [r3, #3]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 f8ef 	bl	800a2d8 <RTC_ByteToBcd2>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f8e8 	bl	800a2d8 <RTC_ByteToBcd2>
 800a108:	4603      	mov	r3, r0
 800a10a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a10c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	789b      	ldrb	r3, [r3, #2]
 800a112:	4618      	mov	r0, r3
 800a114:	f000 f8e0 	bl	800a2d8 <RTC_ByteToBcd2>
 800a118:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a11a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]
 800a128:	e00e      	b.n	800a148 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	78db      	ldrb	r3, [r3, #3]
 800a12e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	785b      	ldrb	r3, [r3, #1]
 800a134:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a136:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a13c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a144:	4313      	orrs	r3, r2
 800a146:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	22ca      	movs	r2, #202	; 0xca
 800a14e:	625a      	str	r2, [r3, #36]	; 0x24
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2253      	movs	r2, #83	; 0x53
 800a156:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f84b 	bl	800a1f4 <RTC_EnterInitMode>
 800a15e:	4603      	mov	r3, r0
 800a160:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a162:	7cfb      	ldrb	r3, [r7, #19]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10a      	bne.n	800a17e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	6979      	ldr	r1, [r7, #20]
 800a16e:	4b0e      	ldr	r3, [pc, #56]	; (800a1a8 <HAL_RTC_SetDate+0x10c>)
 800a170:	400b      	ands	r3, r1
 800a172:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f871 	bl	800a25c <RTC_ExitInitMode>
 800a17a:	4603      	mov	r3, r0
 800a17c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	22ff      	movs	r2, #255	; 0xff
 800a184:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a186:	7cfb      	ldrb	r3, [r7, #19]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d103      	bne.n	800a194 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a19c:	7cfb      	ldrb	r3, [r7, #19]


}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd90      	pop	{r4, r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	00ffff3f 	.word	0x00ffff3f

0800a1ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a0d      	ldr	r2, [pc, #52]	; (800a1f0 <HAL_RTC_WaitForSynchro+0x44>)
 800a1ba:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a1bc:	f7f8 f830 	bl	8002220 <HAL_GetTick>
 800a1c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1c2:	e009      	b.n	800a1d8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1c4:	f7f8 f82c 	bl	8002220 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1d2:	d901      	bls.n	800a1d8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e007      	b.n	800a1e8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	f003 0320 	and.w	r3, r3, #32
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0ee      	beq.n	800a1c4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	0003ff5f 	.word	0x0003ff5f

0800a1f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d120      	bne.n	800a250 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a216:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a218:	f7f8 f802 	bl	8002220 <HAL_GetTick>
 800a21c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a21e:	e00d      	b.n	800a23c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a220:	f7f7 fffe 	bl	8002220 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a22e:	d905      	bls.n	800a23c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2203      	movs	r2, #3
 800a238:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a246:	2b00      	cmp	r3, #0
 800a248:	d102      	bne.n	800a250 <RTC_EnterInitMode+0x5c>
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d1e7      	bne.n	800a220 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a250:	7bfb      	ldrb	r3, [r7, #15]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a268:	4b1a      	ldr	r3, [pc, #104]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	4a19      	ldr	r2, [pc, #100]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a26e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a272:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a274:	4b17      	ldr	r3, [pc, #92]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10c      	bne.n	800a29a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff ff93 	bl	800a1ac <HAL_RTC_WaitForSynchro>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01e      	beq.n	800a2ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2203      	movs	r2, #3
 800a290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a294:	2303      	movs	r3, #3
 800a296:	73fb      	strb	r3, [r7, #15]
 800a298:	e017      	b.n	800a2ca <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a29a:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	4a0d      	ldr	r2, [pc, #52]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a2a0:	f023 0320 	bic.w	r3, r3, #32
 800a2a4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff ff80 	bl	800a1ac <HAL_RTC_WaitForSynchro>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2203      	movs	r2, #3
 800a2b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a2be:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	4a04      	ldr	r2, [pc, #16]	; (800a2d4 <RTC_ExitInitMode+0x78>)
 800a2c4:	f043 0320 	orr.w	r3, r3, #32
 800a2c8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	58004000 	.word	0x58004000

0800a2d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a2ea:	e005      	b.n	800a2f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	3b0a      	subs	r3, #10
 800a2f6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a2f8:	7afb      	ldrb	r3, [r7, #11]
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	d8f6      	bhi.n	800a2ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	b2da      	uxtb	r2, r3
 800a306:	7afb      	ldrb	r3, [r7, #11]
 800a308:	4313      	orrs	r3, r2
 800a30a:	b2db      	uxtb	r3, r3
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e10f      	b.n	800a54a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a87      	ldr	r2, [pc, #540]	; (800a554 <HAL_SPI_Init+0x23c>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d00f      	beq.n	800a35a <HAL_SPI_Init+0x42>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a86      	ldr	r2, [pc, #536]	; (800a558 <HAL_SPI_Init+0x240>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00a      	beq.n	800a35a <HAL_SPI_Init+0x42>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a84      	ldr	r2, [pc, #528]	; (800a55c <HAL_SPI_Init+0x244>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d005      	beq.n	800a35a <HAL_SPI_Init+0x42>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	2b0f      	cmp	r3, #15
 800a354:	d901      	bls.n	800a35a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e0f7      	b.n	800a54a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f900 	bl	800a560 <SPI_GetPacketSize>
 800a360:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a7b      	ldr	r2, [pc, #492]	; (800a554 <HAL_SPI_Init+0x23c>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d00c      	beq.n	800a386 <HAL_SPI_Init+0x6e>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a79      	ldr	r2, [pc, #484]	; (800a558 <HAL_SPI_Init+0x240>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d007      	beq.n	800a386 <HAL_SPI_Init+0x6e>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a78      	ldr	r2, [pc, #480]	; (800a55c <HAL_SPI_Init+0x244>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d002      	beq.n	800a386 <HAL_SPI_Init+0x6e>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b08      	cmp	r3, #8
 800a384:	d811      	bhi.n	800a3aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a38a:	4a72      	ldr	r2, [pc, #456]	; (800a554 <HAL_SPI_Init+0x23c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d009      	beq.n	800a3a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a70      	ldr	r2, [pc, #448]	; (800a558 <HAL_SPI_Init+0x240>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d004      	beq.n	800a3a4 <HAL_SPI_Init+0x8c>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a6f      	ldr	r2, [pc, #444]	; (800a55c <HAL_SPI_Init+0x244>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d104      	bne.n	800a3ae <HAL_SPI_Init+0x96>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b10      	cmp	r3, #16
 800a3a8:	d901      	bls.n	800a3ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e0cd      	b.n	800a54a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7f7 f912 	bl	80015ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f022 0201 	bic.w	r2, r2, #1
 800a3de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a3ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3f4:	d119      	bne.n	800a42a <HAL_SPI_Init+0x112>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3fe:	d103      	bne.n	800a408 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a404:	2b00      	cmp	r3, #0
 800a406:	d008      	beq.n	800a41a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10c      	bne.n	800a42a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a418:	d107      	bne.n	800a42a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a428:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00f      	beq.n	800a456 <HAL_SPI_Init+0x13e>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	2b06      	cmp	r3, #6
 800a43c:	d90b      	bls.n	800a456 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	e007      	b.n	800a466 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a464:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	69da      	ldr	r2, [r3, #28]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	431a      	orrs	r2, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a478:	ea42 0103 	orr.w	r1, r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	430a      	orrs	r2, r1
 800a486:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	431a      	orrs	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	431a      	orrs	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	431a      	orrs	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c6:	ea42 0103 	orr.w	r1, r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d113      	bne.n	800a506 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a504:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0201 	bic.w	r2, r2, #1
 800a514:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	430a      	orrs	r2, r1
 800a536:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	40013000 	.word	0x40013000
 800a558:	40003800 	.word	0x40003800
 800a55c:	40003c00 	.word	0x40003c00

0800a560 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a56c:	095b      	lsrs	r3, r3, #5
 800a56e:	3301      	adds	r3, #1
 800a570:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	3301      	adds	r3, #1
 800a578:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	3307      	adds	r3, #7
 800a57e:	08db      	lsrs	r3, r3, #3
 800a580:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	fb02 f303 	mul.w	r3, r2, r3
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d101      	bne.n	800a5a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e049      	b.n	800a63c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d106      	bne.n	800a5c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7f7 fbe7 	bl	8001d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	f000 fc49 	bl	800ae6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b01      	cmp	r3, #1
 800a656:	d001      	beq.n	800a65c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	e054      	b.n	800a706 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f042 0201 	orr.w	r2, r2, #1
 800a672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a26      	ldr	r2, [pc, #152]	; (800a714 <HAL_TIM_Base_Start_IT+0xd0>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d022      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a686:	d01d      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a22      	ldr	r2, [pc, #136]	; (800a718 <HAL_TIM_Base_Start_IT+0xd4>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d018      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a21      	ldr	r2, [pc, #132]	; (800a71c <HAL_TIM_Base_Start_IT+0xd8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d013      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a1f      	ldr	r2, [pc, #124]	; (800a720 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00e      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a1e      	ldr	r2, [pc, #120]	; (800a724 <HAL_TIM_Base_Start_IT+0xe0>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d009      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a1c      	ldr	r2, [pc, #112]	; (800a728 <HAL_TIM_Base_Start_IT+0xe4>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d004      	beq.n	800a6c4 <HAL_TIM_Base_Start_IT+0x80>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a1b      	ldr	r2, [pc, #108]	; (800a72c <HAL_TIM_Base_Start_IT+0xe8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d115      	bne.n	800a6f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	4b19      	ldr	r3, [pc, #100]	; (800a730 <HAL_TIM_Base_Start_IT+0xec>)
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b06      	cmp	r3, #6
 800a6d4:	d015      	beq.n	800a702 <HAL_TIM_Base_Start_IT+0xbe>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6dc:	d011      	beq.n	800a702 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f042 0201 	orr.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6ee:	e008      	b.n	800a702 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0201 	orr.w	r2, r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	e000      	b.n	800a704 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3714      	adds	r7, #20
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	40010000 	.word	0x40010000
 800a718:	40000400 	.word	0x40000400
 800a71c:	40000800 	.word	0x40000800
 800a720:	40000c00 	.word	0x40000c00
 800a724:	40010400 	.word	0x40010400
 800a728:	40001800 	.word	0x40001800
 800a72c:	40014000 	.word	0x40014000
 800a730:	00010007 	.word	0x00010007

0800a734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e049      	b.n	800a7da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f841 	bl	800a7e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f000 fb7a 	bl	800ae6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b083      	sub	sp, #12
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	f003 0302 	and.w	r3, r3, #2
 800a814:	2b00      	cmp	r3, #0
 800a816:	d020      	beq.n	800a85a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d01b      	beq.n	800a85a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f06f 0202 	mvn.w	r2, #2
 800a82a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	f003 0303 	and.w	r3, r3, #3
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 faf5 	bl	800ae30 <HAL_TIM_IC_CaptureCallback>
 800a846:	e005      	b.n	800a854 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fae7 	bl	800ae1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 faf8 	bl	800ae44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f003 0304 	and.w	r3, r3, #4
 800a860:	2b00      	cmp	r3, #0
 800a862:	d020      	beq.n	800a8a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f003 0304 	and.w	r3, r3, #4
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d01b      	beq.n	800a8a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f06f 0204 	mvn.w	r2, #4
 800a876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2202      	movs	r2, #2
 800a87c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 facf 	bl	800ae30 <HAL_TIM_IC_CaptureCallback>
 800a892:	e005      	b.n	800a8a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fac1 	bl	800ae1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fad2 	bl	800ae44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	f003 0308 	and.w	r3, r3, #8
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d020      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f003 0308 	and.w	r3, r3, #8
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d01b      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f06f 0208 	mvn.w	r2, #8
 800a8c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2204      	movs	r2, #4
 800a8c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	f003 0303 	and.w	r3, r3, #3
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d003      	beq.n	800a8e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 faa9 	bl	800ae30 <HAL_TIM_IC_CaptureCallback>
 800a8de:	e005      	b.n	800a8ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fa9b 	bl	800ae1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 faac 	bl	800ae44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	f003 0310 	and.w	r3, r3, #16
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d020      	beq.n	800a93e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f003 0310 	and.w	r3, r3, #16
 800a902:	2b00      	cmp	r3, #0
 800a904:	d01b      	beq.n	800a93e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f06f 0210 	mvn.w	r2, #16
 800a90e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2208      	movs	r2, #8
 800a914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	69db      	ldr	r3, [r3, #28]
 800a91c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a920:	2b00      	cmp	r3, #0
 800a922:	d003      	beq.n	800a92c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fa83 	bl	800ae30 <HAL_TIM_IC_CaptureCallback>
 800a92a:	e005      	b.n	800a938 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fa75 	bl	800ae1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fa86 	bl	800ae44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00c      	beq.n	800a962 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d007      	beq.n	800a962 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f06f 0201 	mvn.w	r2, #1
 800a95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f7f6 fceb 	bl	8001338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00c      	beq.n	800a990 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d007      	beq.n	800a990 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800a988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 ff9e 	bl	800b8cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00c      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d007      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 ff96 	bl	800b8e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00c      	beq.n	800a9d8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d007      	beq.n	800a9d8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fa40 	bl	800ae58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00c      	beq.n	800a9fc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f003 0320 	and.w	r3, r3, #32
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f06f 0220 	mvn.w	r2, #32
 800a9f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 ff5e 	bl	800b8b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d101      	bne.n	800aa22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa1e:	2302      	movs	r3, #2
 800aa20:	e0ff      	b.n	800ac22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2b14      	cmp	r3, #20
 800aa2e:	f200 80f0 	bhi.w	800ac12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aa32:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800ac13 	.word	0x0800ac13
 800aa40:	0800ac13 	.word	0x0800ac13
 800aa44:	0800ac13 	.word	0x0800ac13
 800aa48:	0800aacd 	.word	0x0800aacd
 800aa4c:	0800ac13 	.word	0x0800ac13
 800aa50:	0800ac13 	.word	0x0800ac13
 800aa54:	0800ac13 	.word	0x0800ac13
 800aa58:	0800ab0f 	.word	0x0800ab0f
 800aa5c:	0800ac13 	.word	0x0800ac13
 800aa60:	0800ac13 	.word	0x0800ac13
 800aa64:	0800ac13 	.word	0x0800ac13
 800aa68:	0800ab4f 	.word	0x0800ab4f
 800aa6c:	0800ac13 	.word	0x0800ac13
 800aa70:	0800ac13 	.word	0x0800ac13
 800aa74:	0800ac13 	.word	0x0800ac13
 800aa78:	0800ab91 	.word	0x0800ab91
 800aa7c:	0800ac13 	.word	0x0800ac13
 800aa80:	0800ac13 	.word	0x0800ac13
 800aa84:	0800ac13 	.word	0x0800ac13
 800aa88:	0800abd1 	.word	0x0800abd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68b9      	ldr	r1, [r7, #8]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 fa90 	bl	800afb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	699a      	ldr	r2, [r3, #24]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f042 0208 	orr.w	r2, r2, #8
 800aaa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	699a      	ldr	r2, [r3, #24]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f022 0204 	bic.w	r2, r2, #4
 800aab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6999      	ldr	r1, [r3, #24]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	691a      	ldr	r2, [r3, #16]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	430a      	orrs	r2, r1
 800aac8:	619a      	str	r2, [r3, #24]
      break;
 800aaca:	e0a5      	b.n	800ac18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68b9      	ldr	r1, [r7, #8]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 fb00 	bl	800b0d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	699a      	ldr	r2, [r3, #24]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	699a      	ldr	r2, [r3, #24]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6999      	ldr	r1, [r3, #24]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	021a      	lsls	r2, r3, #8
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	430a      	orrs	r2, r1
 800ab0a:	619a      	str	r2, [r3, #24]
      break;
 800ab0c:	e084      	b.n	800ac18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68b9      	ldr	r1, [r7, #8]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 fb69 	bl	800b1ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	69da      	ldr	r2, [r3, #28]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f042 0208 	orr.w	r2, r2, #8
 800ab28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	69da      	ldr	r2, [r3, #28]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 0204 	bic.w	r2, r2, #4
 800ab38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	69d9      	ldr	r1, [r3, #28]
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	691a      	ldr	r2, [r3, #16]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	61da      	str	r2, [r3, #28]
      break;
 800ab4c:	e064      	b.n	800ac18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f000 fbd1 	bl	800b2fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	69da      	ldr	r2, [r3, #28]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	69da      	ldr	r2, [r3, #28]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69d9      	ldr	r1, [r3, #28]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	021a      	lsls	r2, r3, #8
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	61da      	str	r2, [r3, #28]
      break;
 800ab8e:	e043      	b.n	800ac18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 fc1a 	bl	800b3d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f042 0208 	orr.w	r2, r2, #8
 800abaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 0204 	bic.w	r2, r2, #4
 800abba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	691a      	ldr	r2, [r3, #16]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	430a      	orrs	r2, r1
 800abcc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800abce:	e023      	b.n	800ac18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68b9      	ldr	r1, [r7, #8]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fc5e 	bl	800b498 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	021a      	lsls	r2, r3, #8
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac10:	e002      	b.n	800ac18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	75fb      	strb	r3, [r7, #23]
      break;
 800ac16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop

0800ac2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d101      	bne.n	800ac48 <HAL_TIM_ConfigClockSource+0x1c>
 800ac44:	2302      	movs	r3, #2
 800ac46:	e0dc      	b.n	800ae02 <HAL_TIM_ConfigClockSource+0x1d6>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	4b6a      	ldr	r3, [pc, #424]	; (800ae0c <HAL_TIM_ConfigClockSource+0x1e0>)
 800ac64:	4013      	ands	r3, r2
 800ac66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a64      	ldr	r2, [pc, #400]	; (800ae10 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	f000 80a9 	beq.w	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac84:	4a62      	ldr	r2, [pc, #392]	; (800ae10 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	f200 80ae 	bhi.w	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac8c:	4a61      	ldr	r2, [pc, #388]	; (800ae14 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	f000 80a1 	beq.w	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac94:	4a5f      	ldr	r2, [pc, #380]	; (800ae14 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	f200 80a6 	bhi.w	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac9c:	4a5e      	ldr	r2, [pc, #376]	; (800ae18 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	f000 8099 	beq.w	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800aca4:	4a5c      	ldr	r2, [pc, #368]	; (800ae18 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	f200 809e 	bhi.w	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800acac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800acb0:	f000 8091 	beq.w	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800acb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800acb8:	f200 8096 	bhi.w	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800acbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acc0:	f000 8089 	beq.w	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800acc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acc8:	f200 808e 	bhi.w	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800accc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd0:	d03e      	beq.n	800ad50 <HAL_TIM_ConfigClockSource+0x124>
 800acd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd6:	f200 8087 	bhi.w	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800acda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acde:	f000 8086 	beq.w	800adee <HAL_TIM_ConfigClockSource+0x1c2>
 800ace2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace6:	d87f      	bhi.n	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ace8:	2b70      	cmp	r3, #112	; 0x70
 800acea:	d01a      	beq.n	800ad22 <HAL_TIM_ConfigClockSource+0xf6>
 800acec:	2b70      	cmp	r3, #112	; 0x70
 800acee:	d87b      	bhi.n	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800acf0:	2b60      	cmp	r3, #96	; 0x60
 800acf2:	d050      	beq.n	800ad96 <HAL_TIM_ConfigClockSource+0x16a>
 800acf4:	2b60      	cmp	r3, #96	; 0x60
 800acf6:	d877      	bhi.n	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800acf8:	2b50      	cmp	r3, #80	; 0x50
 800acfa:	d03c      	beq.n	800ad76 <HAL_TIM_ConfigClockSource+0x14a>
 800acfc:	2b50      	cmp	r3, #80	; 0x50
 800acfe:	d873      	bhi.n	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad00:	2b40      	cmp	r3, #64	; 0x40
 800ad02:	d058      	beq.n	800adb6 <HAL_TIM_ConfigClockSource+0x18a>
 800ad04:	2b40      	cmp	r3, #64	; 0x40
 800ad06:	d86f      	bhi.n	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad08:	2b30      	cmp	r3, #48	; 0x30
 800ad0a:	d064      	beq.n	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad0c:	2b30      	cmp	r3, #48	; 0x30
 800ad0e:	d86b      	bhi.n	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad10:	2b20      	cmp	r3, #32
 800ad12:	d060      	beq.n	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad14:	2b20      	cmp	r3, #32
 800ad16:	d867      	bhi.n	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d05c      	beq.n	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad1c:	2b10      	cmp	r3, #16
 800ad1e:	d05a      	beq.n	800add6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad20:	e062      	b.n	800ade8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	6899      	ldr	r1, [r3, #8]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	f000 fc95 	bl	800b660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	609a      	str	r2, [r3, #8]
      break;
 800ad4e:	e04f      	b.n	800adf0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6818      	ldr	r0, [r3, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	6899      	ldr	r1, [r3, #8]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	f000 fc7e 	bl	800b660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	689a      	ldr	r2, [r3, #8]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad72:	609a      	str	r2, [r3, #8]
      break;
 800ad74:	e03c      	b.n	800adf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6818      	ldr	r0, [r3, #0]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	6859      	ldr	r1, [r3, #4]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	461a      	mov	r2, r3
 800ad84:	f000 fbee 	bl	800b564 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2150      	movs	r1, #80	; 0x50
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fc48 	bl	800b624 <TIM_ITRx_SetConfig>
      break;
 800ad94:	e02c      	b.n	800adf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	6859      	ldr	r1, [r3, #4]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f000 fc0d 	bl	800b5c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2160      	movs	r1, #96	; 0x60
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fc38 	bl	800b624 <TIM_ITRx_SetConfig>
      break;
 800adb4:	e01c      	b.n	800adf0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6818      	ldr	r0, [r3, #0]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	6859      	ldr	r1, [r3, #4]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	461a      	mov	r2, r3
 800adc4:	f000 fbce 	bl	800b564 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2140      	movs	r1, #64	; 0x40
 800adce:	4618      	mov	r0, r3
 800add0:	f000 fc28 	bl	800b624 <TIM_ITRx_SetConfig>
      break;
 800add4:	e00c      	b.n	800adf0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	4610      	mov	r0, r2
 800ade2:	f000 fc1f 	bl	800b624 <TIM_ITRx_SetConfig>
      break;
 800ade6:	e003      	b.n	800adf0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	73fb      	strb	r3, [r7, #15]
      break;
 800adec:	e000      	b.n	800adf0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800adee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	ffceff88 	.word	0xffceff88
 800ae10:	00100040 	.word	0x00100040
 800ae14:	00100030 	.word	0x00100030
 800ae18:	00100020 	.word	0x00100020

0800ae1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a46      	ldr	r2, [pc, #280]	; (800af98 <TIM_Base_SetConfig+0x12c>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d013      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae8a:	d00f      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a43      	ldr	r2, [pc, #268]	; (800af9c <TIM_Base_SetConfig+0x130>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d00b      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a42      	ldr	r2, [pc, #264]	; (800afa0 <TIM_Base_SetConfig+0x134>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d007      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a41      	ldr	r2, [pc, #260]	; (800afa4 <TIM_Base_SetConfig+0x138>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d003      	beq.n	800aeac <TIM_Base_SetConfig+0x40>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a40      	ldr	r2, [pc, #256]	; (800afa8 <TIM_Base_SetConfig+0x13c>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d108      	bne.n	800aebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a35      	ldr	r2, [pc, #212]	; (800af98 <TIM_Base_SetConfig+0x12c>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d01f      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aecc:	d01b      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a32      	ldr	r2, [pc, #200]	; (800af9c <TIM_Base_SetConfig+0x130>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d017      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a31      	ldr	r2, [pc, #196]	; (800afa0 <TIM_Base_SetConfig+0x134>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d013      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a30      	ldr	r2, [pc, #192]	; (800afa4 <TIM_Base_SetConfig+0x138>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d00f      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a2f      	ldr	r2, [pc, #188]	; (800afa8 <TIM_Base_SetConfig+0x13c>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d00b      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a2e      	ldr	r2, [pc, #184]	; (800afac <TIM_Base_SetConfig+0x140>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d007      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a2d      	ldr	r2, [pc, #180]	; (800afb0 <TIM_Base_SetConfig+0x144>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d003      	beq.n	800af06 <TIM_Base_SetConfig+0x9a>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a2c      	ldr	r2, [pc, #176]	; (800afb4 <TIM_Base_SetConfig+0x148>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d108      	bne.n	800af18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4313      	orrs	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	4313      	orrs	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a16      	ldr	r2, [pc, #88]	; (800af98 <TIM_Base_SetConfig+0x12c>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d00f      	beq.n	800af64 <TIM_Base_SetConfig+0xf8>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a18      	ldr	r2, [pc, #96]	; (800afa8 <TIM_Base_SetConfig+0x13c>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d00b      	beq.n	800af64 <TIM_Base_SetConfig+0xf8>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a17      	ldr	r2, [pc, #92]	; (800afac <TIM_Base_SetConfig+0x140>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d007      	beq.n	800af64 <TIM_Base_SetConfig+0xf8>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a16      	ldr	r2, [pc, #88]	; (800afb0 <TIM_Base_SetConfig+0x144>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d003      	beq.n	800af64 <TIM_Base_SetConfig+0xf8>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a15      	ldr	r2, [pc, #84]	; (800afb4 <TIM_Base_SetConfig+0x148>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d103      	bne.n	800af6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	691a      	ldr	r2, [r3, #16]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d105      	bne.n	800af8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	f023 0201 	bic.w	r2, r3, #1
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	611a      	str	r2, [r3, #16]
  }
}
 800af8a:	bf00      	nop
 800af8c:	3714      	adds	r7, #20
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	40010000 	.word	0x40010000
 800af9c:	40000400 	.word	0x40000400
 800afa0:	40000800 	.word	0x40000800
 800afa4:	40000c00 	.word	0x40000c00
 800afa8:	40010400 	.word	0x40010400
 800afac:	40014000 	.word	0x40014000
 800afb0:	40014400 	.word	0x40014400
 800afb4:	40014800 	.word	0x40014800

0800afb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afb8:	b480      	push	{r7}
 800afba:	b087      	sub	sp, #28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a1b      	ldr	r3, [r3, #32]
 800afcc:	f023 0201 	bic.w	r2, r3, #1
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4b37      	ldr	r3, [pc, #220]	; (800b0c0 <TIM_OC1_SetConfig+0x108>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0303 	bic.w	r3, r3, #3
 800afee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f023 0302 	bic.w	r3, r3, #2
 800b000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	4313      	orrs	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a2d      	ldr	r2, [pc, #180]	; (800b0c4 <TIM_OC1_SetConfig+0x10c>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d00f      	beq.n	800b034 <TIM_OC1_SetConfig+0x7c>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a2c      	ldr	r2, [pc, #176]	; (800b0c8 <TIM_OC1_SetConfig+0x110>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00b      	beq.n	800b034 <TIM_OC1_SetConfig+0x7c>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a2b      	ldr	r2, [pc, #172]	; (800b0cc <TIM_OC1_SetConfig+0x114>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d007      	beq.n	800b034 <TIM_OC1_SetConfig+0x7c>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a2a      	ldr	r2, [pc, #168]	; (800b0d0 <TIM_OC1_SetConfig+0x118>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d003      	beq.n	800b034 <TIM_OC1_SetConfig+0x7c>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a29      	ldr	r2, [pc, #164]	; (800b0d4 <TIM_OC1_SetConfig+0x11c>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d10c      	bne.n	800b04e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	f023 0308 	bic.w	r3, r3, #8
 800b03a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	697a      	ldr	r2, [r7, #20]
 800b042:	4313      	orrs	r3, r2
 800b044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f023 0304 	bic.w	r3, r3, #4
 800b04c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a1c      	ldr	r2, [pc, #112]	; (800b0c4 <TIM_OC1_SetConfig+0x10c>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d00f      	beq.n	800b076 <TIM_OC1_SetConfig+0xbe>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a1b      	ldr	r2, [pc, #108]	; (800b0c8 <TIM_OC1_SetConfig+0x110>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d00b      	beq.n	800b076 <TIM_OC1_SetConfig+0xbe>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a1a      	ldr	r2, [pc, #104]	; (800b0cc <TIM_OC1_SetConfig+0x114>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d007      	beq.n	800b076 <TIM_OC1_SetConfig+0xbe>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a19      	ldr	r2, [pc, #100]	; (800b0d0 <TIM_OC1_SetConfig+0x118>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d003      	beq.n	800b076 <TIM_OC1_SetConfig+0xbe>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a18      	ldr	r2, [pc, #96]	; (800b0d4 <TIM_OC1_SetConfig+0x11c>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d111      	bne.n	800b09a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b07c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	4313      	orrs	r3, r2
 800b098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	685a      	ldr	r2, [r3, #4]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	621a      	str	r2, [r3, #32]
}
 800b0b4:	bf00      	nop
 800b0b6:	371c      	adds	r7, #28
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	fffeff8f 	.word	0xfffeff8f
 800b0c4:	40010000 	.word	0x40010000
 800b0c8:	40010400 	.word	0x40010400
 800b0cc:	40014000 	.word	0x40014000
 800b0d0:	40014400 	.word	0x40014400
 800b0d4:	40014800 	.word	0x40014800

0800b0d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b087      	sub	sp, #28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a1b      	ldr	r3, [r3, #32]
 800b0ec:	f023 0210 	bic.w	r2, r3, #16
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	4b34      	ldr	r3, [pc, #208]	; (800b1d4 <TIM_OC2_SetConfig+0xfc>)
 800b104:	4013      	ands	r3, r2
 800b106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b10e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	4313      	orrs	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f023 0320 	bic.w	r3, r3, #32
 800b122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	011b      	lsls	r3, r3, #4
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a29      	ldr	r2, [pc, #164]	; (800b1d8 <TIM_OC2_SetConfig+0x100>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d003      	beq.n	800b140 <TIM_OC2_SetConfig+0x68>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a28      	ldr	r2, [pc, #160]	; (800b1dc <TIM_OC2_SetConfig+0x104>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d10d      	bne.n	800b15c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	011b      	lsls	r3, r3, #4
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	4313      	orrs	r3, r2
 800b152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b15a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	4a1e      	ldr	r2, [pc, #120]	; (800b1d8 <TIM_OC2_SetConfig+0x100>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d00f      	beq.n	800b184 <TIM_OC2_SetConfig+0xac>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a1d      	ldr	r2, [pc, #116]	; (800b1dc <TIM_OC2_SetConfig+0x104>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d00b      	beq.n	800b184 <TIM_OC2_SetConfig+0xac>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a1c      	ldr	r2, [pc, #112]	; (800b1e0 <TIM_OC2_SetConfig+0x108>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d007      	beq.n	800b184 <TIM_OC2_SetConfig+0xac>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a1b      	ldr	r2, [pc, #108]	; (800b1e4 <TIM_OC2_SetConfig+0x10c>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d003      	beq.n	800b184 <TIM_OC2_SetConfig+0xac>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a1a      	ldr	r2, [pc, #104]	; (800b1e8 <TIM_OC2_SetConfig+0x110>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d113      	bne.n	800b1ac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b18a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	695b      	ldr	r3, [r3, #20]
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	621a      	str	r2, [r3, #32]
}
 800b1c6:	bf00      	nop
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	feff8fff 	.word	0xfeff8fff
 800b1d8:	40010000 	.word	0x40010000
 800b1dc:	40010400 	.word	0x40010400
 800b1e0:	40014000 	.word	0x40014000
 800b1e4:	40014400 	.word	0x40014400
 800b1e8:	40014800 	.word	0x40014800

0800b1ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	4b33      	ldr	r3, [pc, #204]	; (800b2e4 <TIM_OC3_SetConfig+0xf8>)
 800b218:	4013      	ands	r3, r2
 800b21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f023 0303 	bic.w	r3, r3, #3
 800b222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	021b      	lsls	r3, r3, #8
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	4313      	orrs	r3, r2
 800b240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a28      	ldr	r2, [pc, #160]	; (800b2e8 <TIM_OC3_SetConfig+0xfc>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d003      	beq.n	800b252 <TIM_OC3_SetConfig+0x66>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4a27      	ldr	r2, [pc, #156]	; (800b2ec <TIM_OC3_SetConfig+0x100>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d10d      	bne.n	800b26e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	021b      	lsls	r3, r3, #8
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	4313      	orrs	r3, r2
 800b264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b26c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a1d      	ldr	r2, [pc, #116]	; (800b2e8 <TIM_OC3_SetConfig+0xfc>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00f      	beq.n	800b296 <TIM_OC3_SetConfig+0xaa>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a1c      	ldr	r2, [pc, #112]	; (800b2ec <TIM_OC3_SetConfig+0x100>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00b      	beq.n	800b296 <TIM_OC3_SetConfig+0xaa>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a1b      	ldr	r2, [pc, #108]	; (800b2f0 <TIM_OC3_SetConfig+0x104>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d007      	beq.n	800b296 <TIM_OC3_SetConfig+0xaa>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a1a      	ldr	r2, [pc, #104]	; (800b2f4 <TIM_OC3_SetConfig+0x108>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d003      	beq.n	800b296 <TIM_OC3_SetConfig+0xaa>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a19      	ldr	r2, [pc, #100]	; (800b2f8 <TIM_OC3_SetConfig+0x10c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d113      	bne.n	800b2be <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b29c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	011b      	lsls	r3, r3, #4
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	685a      	ldr	r2, [r3, #4]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	621a      	str	r2, [r3, #32]
}
 800b2d8:	bf00      	nop
 800b2da:	371c      	adds	r7, #28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	fffeff8f 	.word	0xfffeff8f
 800b2e8:	40010000 	.word	0x40010000
 800b2ec:	40010400 	.word	0x40010400
 800b2f0:	40014000 	.word	0x40014000
 800b2f4:	40014400 	.word	0x40014400
 800b2f8:	40014800 	.word	0x40014800

0800b2fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b087      	sub	sp, #28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <TIM_OC4_SetConfig+0xbc>)
 800b328:	4013      	ands	r3, r2
 800b32a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	031b      	lsls	r3, r3, #12
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a19      	ldr	r2, [pc, #100]	; (800b3bc <TIM_OC4_SetConfig+0xc0>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d00f      	beq.n	800b37c <TIM_OC4_SetConfig+0x80>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a18      	ldr	r2, [pc, #96]	; (800b3c0 <TIM_OC4_SetConfig+0xc4>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d00b      	beq.n	800b37c <TIM_OC4_SetConfig+0x80>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a17      	ldr	r2, [pc, #92]	; (800b3c4 <TIM_OC4_SetConfig+0xc8>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d007      	beq.n	800b37c <TIM_OC4_SetConfig+0x80>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a16      	ldr	r2, [pc, #88]	; (800b3c8 <TIM_OC4_SetConfig+0xcc>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d003      	beq.n	800b37c <TIM_OC4_SetConfig+0x80>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a15      	ldr	r2, [pc, #84]	; (800b3cc <TIM_OC4_SetConfig+0xd0>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d109      	bne.n	800b390 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	019b      	lsls	r3, r3, #6
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685a      	ldr	r2, [r3, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	621a      	str	r2, [r3, #32]
}
 800b3aa:	bf00      	nop
 800b3ac:	371c      	adds	r7, #28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	feff8fff 	.word	0xfeff8fff
 800b3bc:	40010000 	.word	0x40010000
 800b3c0:	40010400 	.word	0x40010400
 800b3c4:	40014000 	.word	0x40014000
 800b3c8:	40014400 	.word	0x40014400
 800b3cc:	40014800 	.word	0x40014800

0800b3d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a1b      	ldr	r3, [r3, #32]
 800b3de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a1b      	ldr	r3, [r3, #32]
 800b3e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	4b21      	ldr	r3, [pc, #132]	; (800b480 <TIM_OC5_SetConfig+0xb0>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	4313      	orrs	r3, r2
 800b408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b410:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	041b      	lsls	r3, r3, #16
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a18      	ldr	r2, [pc, #96]	; (800b484 <TIM_OC5_SetConfig+0xb4>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d00f      	beq.n	800b446 <TIM_OC5_SetConfig+0x76>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a17      	ldr	r2, [pc, #92]	; (800b488 <TIM_OC5_SetConfig+0xb8>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d00b      	beq.n	800b446 <TIM_OC5_SetConfig+0x76>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4a16      	ldr	r2, [pc, #88]	; (800b48c <TIM_OC5_SetConfig+0xbc>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d007      	beq.n	800b446 <TIM_OC5_SetConfig+0x76>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a15      	ldr	r2, [pc, #84]	; (800b490 <TIM_OC5_SetConfig+0xc0>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d003      	beq.n	800b446 <TIM_OC5_SetConfig+0x76>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a14      	ldr	r2, [pc, #80]	; (800b494 <TIM_OC5_SetConfig+0xc4>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d109      	bne.n	800b45a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b44c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	4313      	orrs	r3, r2
 800b458:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	685a      	ldr	r2, [r3, #4]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	621a      	str	r2, [r3, #32]
}
 800b474:	bf00      	nop
 800b476:	371c      	adds	r7, #28
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	fffeff8f 	.word	0xfffeff8f
 800b484:	40010000 	.word	0x40010000
 800b488:	40010400 	.word	0x40010400
 800b48c:	40014000 	.word	0x40014000
 800b490:	40014400 	.word	0x40014400
 800b494:	40014800 	.word	0x40014800

0800b498 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
 800b4ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	4b22      	ldr	r3, [pc, #136]	; (800b54c <TIM_OC6_SetConfig+0xb4>)
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	021b      	lsls	r3, r3, #8
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	051b      	lsls	r3, r3, #20
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a19      	ldr	r2, [pc, #100]	; (800b550 <TIM_OC6_SetConfig+0xb8>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d00f      	beq.n	800b510 <TIM_OC6_SetConfig+0x78>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a18      	ldr	r2, [pc, #96]	; (800b554 <TIM_OC6_SetConfig+0xbc>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00b      	beq.n	800b510 <TIM_OC6_SetConfig+0x78>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <TIM_OC6_SetConfig+0xc0>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d007      	beq.n	800b510 <TIM_OC6_SetConfig+0x78>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a16      	ldr	r2, [pc, #88]	; (800b55c <TIM_OC6_SetConfig+0xc4>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d003      	beq.n	800b510 <TIM_OC6_SetConfig+0x78>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a15      	ldr	r2, [pc, #84]	; (800b560 <TIM_OC6_SetConfig+0xc8>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d109      	bne.n	800b524 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b516:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	029b      	lsls	r3, r3, #10
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	4313      	orrs	r3, r2
 800b522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	697a      	ldr	r2, [r7, #20]
 800b528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	621a      	str	r2, [r3, #32]
}
 800b53e:	bf00      	nop
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	feff8fff 	.word	0xfeff8fff
 800b550:	40010000 	.word	0x40010000
 800b554:	40010400 	.word	0x40010400
 800b558:	40014000 	.word	0x40014000
 800b55c:	40014400 	.word	0x40014400
 800b560:	40014800 	.word	0x40014800

0800b564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	f023 0201 	bic.w	r2, r3, #1
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b58e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	011b      	lsls	r3, r3, #4
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	4313      	orrs	r3, r2
 800b598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f023 030a 	bic.w	r3, r3, #10
 800b5a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	621a      	str	r2, [r3, #32]
}
 800b5b6:	bf00      	nop
 800b5b8:	371c      	adds	r7, #28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b087      	sub	sp, #28
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	60f8      	str	r0, [r7, #12]
 800b5ca:	60b9      	str	r1, [r7, #8]
 800b5cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	f023 0210 	bic.w	r2, r3, #16
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	031b      	lsls	r3, r3, #12
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	011b      	lsls	r3, r3, #4
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	4313      	orrs	r3, r2
 800b608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	621a      	str	r2, [r3, #32]
}
 800b616:	bf00      	nop
 800b618:	371c      	adds	r7, #28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
	...

0800b624 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	4b09      	ldr	r3, [pc, #36]	; (800b65c <TIM_ITRx_SetConfig+0x38>)
 800b638:	4013      	ands	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4313      	orrs	r3, r2
 800b642:	f043 0307 	orr.w	r3, r3, #7
 800b646:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	609a      	str	r2, [r3, #8]
}
 800b64e:	bf00      	nop
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	ffcfff8f 	.word	0xffcfff8f

0800b660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b660:	b480      	push	{r7}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
 800b66c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b67a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	021a      	lsls	r2, r3, #8
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	431a      	orrs	r2, r3
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	4313      	orrs	r3, r2
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	609a      	str	r2, [r3, #8]
}
 800b694:	bf00      	nop
 800b696:	371c      	adds	r7, #28
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d101      	bne.n	800b6b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	e06d      	b.n	800b794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a30      	ldr	r2, [pc, #192]	; (800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d004      	beq.n	800b6ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a2f      	ldr	r2, [pc, #188]	; (800b7a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d108      	bne.n	800b6fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b6f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b704:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a20      	ldr	r2, [pc, #128]	; (800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d022      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b72a:	d01d      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a1d      	ldr	r2, [pc, #116]	; (800b7a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d018      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a1c      	ldr	r2, [pc, #112]	; (800b7ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d013      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a1a      	ldr	r2, [pc, #104]	; (800b7b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00e      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a15      	ldr	r2, [pc, #84]	; (800b7a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d009      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a16      	ldr	r2, [pc, #88]	; (800b7b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d004      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a15      	ldr	r2, [pc, #84]	; (800b7b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d10c      	bne.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b76e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	4313      	orrs	r3, r2
 800b778:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	40010000 	.word	0x40010000
 800b7a4:	40010400 	.word	0x40010400
 800b7a8:	40000400 	.word	0x40000400
 800b7ac:	40000800 	.word	0x40000800
 800b7b0:	40000c00 	.word	0x40000c00
 800b7b4:	40001800 	.word	0x40001800
 800b7b8:	40014000 	.word	0x40014000

0800b7bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d101      	bne.n	800b7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7d4:	2302      	movs	r3, #2
 800b7d6:	e065      	b.n	800b8a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	4313      	orrs	r3, r2
 800b808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	4313      	orrs	r3, r2
 800b824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	041b      	lsls	r3, r3, #16
 800b84e:	4313      	orrs	r3, r2
 800b850:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a16      	ldr	r2, [pc, #88]	; (800b8b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d004      	beq.n	800b866 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a14      	ldr	r2, [pc, #80]	; (800b8b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d115      	bne.n	800b892 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	051b      	lsls	r3, r3, #20
 800b872:	4313      	orrs	r3, r2
 800b874:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	69db      	ldr	r3, [r3, #28]
 800b880:	4313      	orrs	r3, r2
 800b882:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	40010000 	.word	0x40010000
 800b8b4:	40010400 	.word	0x40010400

0800b8b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8e8:	bf00      	nop
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e042      	b.n	800b98c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d106      	bne.n	800b91e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7f6 fb65 	bl	8001fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2224      	movs	r2, #36	; 0x24
 800b922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f022 0201 	bic.w	r2, r2, #1
 800b934:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f001 f96a 	bl	800cc18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fbff 	bl	800c148 <UART_SetConfig>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d101      	bne.n	800b954 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e01b      	b.n	800b98c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689a      	ldr	r2, [r3, #8]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b972:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f042 0201 	orr.w	r2, r2, #1
 800b982:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f001 f9e9 	bl	800cd5c <UART_CheckIdleState>
 800b98a:	4603      	mov	r3, r0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b0ba      	sub	sp, #232	; 0xe8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	69db      	ldr	r3, [r3, #28]
 800b9a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b9be:	f640 030f 	movw	r3, #2063	; 0x80f
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b9c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d11b      	bne.n	800ba08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d4:	f003 0320 	and.w	r3, r3, #32
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d015      	beq.n	800ba08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e0:	f003 0320 	and.w	r3, r3, #32
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d105      	bne.n	800b9f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d009      	beq.n	800ba08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 8377 	beq.w	800c0ec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	4798      	blx	r3
      }
      return;
 800ba06:	e371      	b.n	800c0ec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 8123 	beq.w	800bc58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba16:	4b8d      	ldr	r3, [pc, #564]	; (800bc4c <HAL_UART_IRQHandler+0x2b8>)
 800ba18:	4013      	ands	r3, r2
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ba22:	4b8b      	ldr	r3, [pc, #556]	; (800bc50 <HAL_UART_IRQHandler+0x2bc>)
 800ba24:	4013      	ands	r3, r2
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 8116 	beq.w	800bc58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d011      	beq.n	800ba5c <HAL_UART_IRQHandler+0xc8>
 800ba38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00b      	beq.n	800ba5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba52:	f043 0201 	orr.w	r2, r3, #1
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba60:	f003 0302 	and.w	r3, r3, #2
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d011      	beq.n	800ba8c <HAL_UART_IRQHandler+0xf8>
 800ba68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba82:	f043 0204 	orr.w	r2, r3, #4
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d011      	beq.n	800babc <HAL_UART_IRQHandler+0x128>
 800ba98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba9c:	f003 0301 	and.w	r3, r3, #1
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00b      	beq.n	800babc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2204      	movs	r2, #4
 800baaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bab2:	f043 0202 	orr.w	r2, r3, #2
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800babc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac0:	f003 0308 	and.w	r3, r3, #8
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d017      	beq.n	800baf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d105      	bne.n	800bae0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bad4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bad8:	4b5c      	ldr	r3, [pc, #368]	; (800bc4c <HAL_UART_IRQHandler+0x2b8>)
 800bada:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00b      	beq.n	800baf8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2208      	movs	r2, #8
 800bae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baee:	f043 0208 	orr.w	r2, r3, #8
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800baf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bafc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d012      	beq.n	800bb2a <HAL_UART_IRQHandler+0x196>
 800bb04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00c      	beq.n	800bb2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb20:	f043 0220 	orr.w	r2, r3, #32
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 82dd 	beq.w	800c0f0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb3a:	f003 0320 	and.w	r3, r3, #32
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d013      	beq.n	800bb6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb46:	f003 0320 	and.w	r3, r3, #32
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d105      	bne.n	800bb5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d007      	beq.n	800bb6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d003      	beq.n	800bb6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7e:	2b40      	cmp	r3, #64	; 0x40
 800bb80:	d005      	beq.n	800bb8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d054      	beq.n	800bc38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f001 f9fc 	bl	800cf8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9e:	2b40      	cmp	r3, #64	; 0x40
 800bba0:	d146      	bne.n	800bc30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3308      	adds	r3, #8
 800bba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbb0:	e853 3f00 	ldrex	r3, [r3]
 800bbb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bbb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bbbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3308      	adds	r3, #8
 800bbca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1d9      	bne.n	800bba2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d017      	beq.n	800bc28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbfe:	4a15      	ldr	r2, [pc, #84]	; (800bc54 <HAL_UART_IRQHandler+0x2c0>)
 800bc00:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7f8 fcf9 	bl	8004600 <HAL_DMA_Abort_IT>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d019      	beq.n	800bc48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bc22:	4610      	mov	r0, r2
 800bc24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc26:	e00f      	b.n	800bc48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fa77 	bl	800c11c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2e:	e00b      	b.n	800bc48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fa73 	bl	800c11c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc36:	e007      	b.n	800bc48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fa6f 	bl	800c11c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bc46:	e253      	b.n	800c0f0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc48:	bf00      	nop
    return;
 800bc4a:	e251      	b.n	800c0f0 <HAL_UART_IRQHandler+0x75c>
 800bc4c:	10000001 	.word	0x10000001
 800bc50:	04000120 	.word	0x04000120
 800bc54:	0800d059 	.word	0x0800d059

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	f040 81e7 	bne.w	800c030 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc66:	f003 0310 	and.w	r3, r3, #16
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	f000 81e0 	beq.w	800c030 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc74:	f003 0310 	and.w	r3, r3, #16
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 81d9 	beq.w	800c030 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2210      	movs	r2, #16
 800bc84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc90:	2b40      	cmp	r3, #64	; 0x40
 800bc92:	f040 8151 	bne.w	800bf38 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a96      	ldr	r2, [pc, #600]	; (800bef8 <HAL_UART_IRQHandler+0x564>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d068      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a93      	ldr	r2, [pc, #588]	; (800befc <HAL_UART_IRQHandler+0x568>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d061      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a91      	ldr	r2, [pc, #580]	; (800bf00 <HAL_UART_IRQHandler+0x56c>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d05a      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a8e      	ldr	r2, [pc, #568]	; (800bf04 <HAL_UART_IRQHandler+0x570>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d053      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a8c      	ldr	r2, [pc, #560]	; (800bf08 <HAL_UART_IRQHandler+0x574>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d04c      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a89      	ldr	r2, [pc, #548]	; (800bf0c <HAL_UART_IRQHandler+0x578>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d045      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a87      	ldr	r2, [pc, #540]	; (800bf10 <HAL_UART_IRQHandler+0x57c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d03e      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a84      	ldr	r2, [pc, #528]	; (800bf14 <HAL_UART_IRQHandler+0x580>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d037      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a82      	ldr	r2, [pc, #520]	; (800bf18 <HAL_UART_IRQHandler+0x584>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d030      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a7f      	ldr	r2, [pc, #508]	; (800bf1c <HAL_UART_IRQHandler+0x588>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d029      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a7d      	ldr	r2, [pc, #500]	; (800bf20 <HAL_UART_IRQHandler+0x58c>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d022      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a7a      	ldr	r2, [pc, #488]	; (800bf24 <HAL_UART_IRQHandler+0x590>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d01b      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a78      	ldr	r2, [pc, #480]	; (800bf28 <HAL_UART_IRQHandler+0x594>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d014      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a75      	ldr	r2, [pc, #468]	; (800bf2c <HAL_UART_IRQHandler+0x598>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d00d      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a73      	ldr	r2, [pc, #460]	; (800bf30 <HAL_UART_IRQHandler+0x59c>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d006      	beq.n	800bd76 <HAL_UART_IRQHandler+0x3e2>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a70      	ldr	r2, [pc, #448]	; (800bf34 <HAL_UART_IRQHandler+0x5a0>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d106      	bne.n	800bd84 <HAL_UART_IRQHandler+0x3f0>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	e005      	b.n	800bd90 <HAL_UART_IRQHandler+0x3fc>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 81ab 	beq.w	800c0f4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bda4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	f080 81a3 	bcs.w	800c0f4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdbe:	69db      	ldr	r3, [r3, #28]
 800bdc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc4:	f000 8087 	beq.w	800bed6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bdd4:	e853 3f00 	ldrex	r3, [r3]
 800bdd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bde0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bde4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	461a      	mov	r2, r3
 800bdee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bdf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdf6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bdfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be02:	e841 2300 	strex	r3, r2, [r1]
 800be06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1da      	bne.n	800bdc8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3308      	adds	r3, #8
 800be18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be1c:	e853 3f00 	ldrex	r3, [r3]
 800be20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be24:	f023 0301 	bic.w	r3, r3, #1
 800be28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3308      	adds	r3, #8
 800be32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be42:	e841 2300 	strex	r3, r2, [r1]
 800be46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e1      	bne.n	800be12 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3308      	adds	r3, #8
 800be54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3308      	adds	r3, #8
 800be6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be72:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be7a:	e841 2300 	strex	r3, r2, [r1]
 800be7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1e3      	bne.n	800be4e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2220      	movs	r2, #32
 800be8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be9c:	e853 3f00 	ldrex	r3, [r3]
 800bea0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea4:	f023 0310 	bic.w	r3, r3, #16
 800bea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	461a      	mov	r2, r3
 800beb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800beb6:	65bb      	str	r3, [r7, #88]	; 0x58
 800beb8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bebc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bebe:	e841 2300 	strex	r3, r2, [r1]
 800bec2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1e4      	bne.n	800be94 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f8 f877 	bl	8003fc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2202      	movs	r2, #2
 800beda:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bee8:	b29b      	uxth	r3, r3
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	b29b      	uxth	r3, r3
 800beee:	4619      	mov	r1, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 f91d 	bl	800c130 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bef6:	e0fd      	b.n	800c0f4 <HAL_UART_IRQHandler+0x760>
 800bef8:	40020010 	.word	0x40020010
 800befc:	40020028 	.word	0x40020028
 800bf00:	40020040 	.word	0x40020040
 800bf04:	40020058 	.word	0x40020058
 800bf08:	40020070 	.word	0x40020070
 800bf0c:	40020088 	.word	0x40020088
 800bf10:	400200a0 	.word	0x400200a0
 800bf14:	400200b8 	.word	0x400200b8
 800bf18:	40020410 	.word	0x40020410
 800bf1c:	40020428 	.word	0x40020428
 800bf20:	40020440 	.word	0x40020440
 800bf24:	40020458 	.word	0x40020458
 800bf28:	40020470 	.word	0x40020470
 800bf2c:	40020488 	.word	0x40020488
 800bf30:	400204a0 	.word	0x400204a0
 800bf34:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f000 80cf 	beq.w	800c0f8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bf5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 80ca 	beq.w	800c0f8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6c:	e853 3f00 	ldrex	r3, [r3]
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	461a      	mov	r2, r3
 800bf82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf86:	647b      	str	r3, [r7, #68]	; 0x44
 800bf88:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e4      	bne.n	800bf64 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	e853 3f00 	ldrex	r3, [r3]
 800bfa8:	623b      	str	r3, [r7, #32]
   return(result);
 800bfaa:	6a3a      	ldr	r2, [r7, #32]
 800bfac:	4b55      	ldr	r3, [pc, #340]	; (800c104 <HAL_UART_IRQHandler+0x770>)
 800bfae:	4013      	ands	r3, r2
 800bfb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3308      	adds	r3, #8
 800bfba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bfbe:	633a      	str	r2, [r7, #48]	; 0x30
 800bfc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc6:	e841 2300 	strex	r3, r2, [r1]
 800bfca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1e3      	bne.n	800bf9a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2220      	movs	r2, #32
 800bfd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f023 0310 	bic.w	r3, r3, #16
 800bffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	461a      	mov	r2, r3
 800c004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c008:	61fb      	str	r3, [r7, #28]
 800c00a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00c:	69b9      	ldr	r1, [r7, #24]
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	e841 2300 	strex	r3, r2, [r1]
 800c014:	617b      	str	r3, [r7, #20]
   return(result);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1e4      	bne.n	800bfe6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 f881 	bl	800c130 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c02e:	e063      	b.n	800c0f8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00e      	beq.n	800c05a <HAL_UART_IRQHandler+0x6c6>
 800c03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d008      	beq.n	800c05a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f001 f841 	bl	800d0da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c058:	e051      	b.n	800c0fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c062:	2b00      	cmp	r3, #0
 800c064:	d014      	beq.n	800c090 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d105      	bne.n	800c07e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d008      	beq.n	800c090 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c082:	2b00      	cmp	r3, #0
 800c084:	d03a      	beq.n	800c0fc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	4798      	blx	r3
    }
    return;
 800c08e:	e035      	b.n	800c0fc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d009      	beq.n	800c0b0 <HAL_UART_IRQHandler+0x71c>
 800c09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d003      	beq.n	800c0b0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 ffeb 	bl	800d084 <UART_EndTransmit_IT>
    return;
 800c0ae:	e026      	b.n	800c0fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d009      	beq.n	800c0d0 <HAL_UART_IRQHandler+0x73c>
 800c0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f001 f81a 	bl	800d102 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0ce:	e016      	b.n	800c0fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d010      	beq.n	800c0fe <HAL_UART_IRQHandler+0x76a>
 800c0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	da0c      	bge.n	800c0fe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 f802 	bl	800d0ee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0ea:	e008      	b.n	800c0fe <HAL_UART_IRQHandler+0x76a>
      return;
 800c0ec:	bf00      	nop
 800c0ee:	e006      	b.n	800c0fe <HAL_UART_IRQHandler+0x76a>
    return;
 800c0f0:	bf00      	nop
 800c0f2:	e004      	b.n	800c0fe <HAL_UART_IRQHandler+0x76a>
      return;
 800c0f4:	bf00      	nop
 800c0f6:	e002      	b.n	800c0fe <HAL_UART_IRQHandler+0x76a>
      return;
 800c0f8:	bf00      	nop
 800c0fa:	e000      	b.n	800c0fe <HAL_UART_IRQHandler+0x76a>
    return;
 800c0fc:	bf00      	nop
  }
}
 800c0fe:	37e8      	adds	r7, #232	; 0xe8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	effffffe 	.word	0xeffffffe

0800c108 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c13c:	bf00      	nop
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c14c:	b092      	sub	sp, #72	; 0x48
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	689a      	ldr	r2, [r3, #8]
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	431a      	orrs	r2, r3
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	431a      	orrs	r2, r3
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	4bbe      	ldr	r3, [pc, #760]	; (800c470 <UART_SetConfig+0x328>)
 800c178:	4013      	ands	r3, r2
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	6812      	ldr	r2, [r2, #0]
 800c17e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c180:	430b      	orrs	r3, r1
 800c182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	68da      	ldr	r2, [r3, #12]
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4ab3      	ldr	r2, [pc, #716]	; (800c474 <UART_SetConfig+0x32c>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d004      	beq.n	800c1b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	689a      	ldr	r2, [r3, #8]
 800c1ba:	4baf      	ldr	r3, [pc, #700]	; (800c478 <UART_SetConfig+0x330>)
 800c1bc:	4013      	ands	r3, r2
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	6812      	ldr	r2, [r2, #0]
 800c1c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1c4:	430b      	orrs	r3, r1
 800c1c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ce:	f023 010f 	bic.w	r1, r3, #15
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4aa6      	ldr	r2, [pc, #664]	; (800c47c <UART_SetConfig+0x334>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d177      	bne.n	800c2d8 <UART_SetConfig+0x190>
 800c1e8:	4ba5      	ldr	r3, [pc, #660]	; (800c480 <UART_SetConfig+0x338>)
 800c1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1f0:	2b28      	cmp	r3, #40	; 0x28
 800c1f2:	d86d      	bhi.n	800c2d0 <UART_SetConfig+0x188>
 800c1f4:	a201      	add	r2, pc, #4	; (adr r2, 800c1fc <UART_SetConfig+0xb4>)
 800c1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fa:	bf00      	nop
 800c1fc:	0800c2a1 	.word	0x0800c2a1
 800c200:	0800c2d1 	.word	0x0800c2d1
 800c204:	0800c2d1 	.word	0x0800c2d1
 800c208:	0800c2d1 	.word	0x0800c2d1
 800c20c:	0800c2d1 	.word	0x0800c2d1
 800c210:	0800c2d1 	.word	0x0800c2d1
 800c214:	0800c2d1 	.word	0x0800c2d1
 800c218:	0800c2d1 	.word	0x0800c2d1
 800c21c:	0800c2a9 	.word	0x0800c2a9
 800c220:	0800c2d1 	.word	0x0800c2d1
 800c224:	0800c2d1 	.word	0x0800c2d1
 800c228:	0800c2d1 	.word	0x0800c2d1
 800c22c:	0800c2d1 	.word	0x0800c2d1
 800c230:	0800c2d1 	.word	0x0800c2d1
 800c234:	0800c2d1 	.word	0x0800c2d1
 800c238:	0800c2d1 	.word	0x0800c2d1
 800c23c:	0800c2b1 	.word	0x0800c2b1
 800c240:	0800c2d1 	.word	0x0800c2d1
 800c244:	0800c2d1 	.word	0x0800c2d1
 800c248:	0800c2d1 	.word	0x0800c2d1
 800c24c:	0800c2d1 	.word	0x0800c2d1
 800c250:	0800c2d1 	.word	0x0800c2d1
 800c254:	0800c2d1 	.word	0x0800c2d1
 800c258:	0800c2d1 	.word	0x0800c2d1
 800c25c:	0800c2b9 	.word	0x0800c2b9
 800c260:	0800c2d1 	.word	0x0800c2d1
 800c264:	0800c2d1 	.word	0x0800c2d1
 800c268:	0800c2d1 	.word	0x0800c2d1
 800c26c:	0800c2d1 	.word	0x0800c2d1
 800c270:	0800c2d1 	.word	0x0800c2d1
 800c274:	0800c2d1 	.word	0x0800c2d1
 800c278:	0800c2d1 	.word	0x0800c2d1
 800c27c:	0800c2c1 	.word	0x0800c2c1
 800c280:	0800c2d1 	.word	0x0800c2d1
 800c284:	0800c2d1 	.word	0x0800c2d1
 800c288:	0800c2d1 	.word	0x0800c2d1
 800c28c:	0800c2d1 	.word	0x0800c2d1
 800c290:	0800c2d1 	.word	0x0800c2d1
 800c294:	0800c2d1 	.word	0x0800c2d1
 800c298:	0800c2d1 	.word	0x0800c2d1
 800c29c:	0800c2c9 	.word	0x0800c2c9
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a6:	e222      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c2a8:	2304      	movs	r3, #4
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ae:	e21e      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c2b0:	2308      	movs	r3, #8
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b6:	e21a      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c2b8:	2310      	movs	r3, #16
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2be:	e216      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c2c0:	2320      	movs	r3, #32
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c6:	e212      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c2c8:	2340      	movs	r3, #64	; 0x40
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ce:	e20e      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c2d0:	2380      	movs	r3, #128	; 0x80
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d6:	e20a      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a69      	ldr	r2, [pc, #420]	; (800c484 <UART_SetConfig+0x33c>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d130      	bne.n	800c344 <UART_SetConfig+0x1fc>
 800c2e2:	4b67      	ldr	r3, [pc, #412]	; (800c480 <UART_SetConfig+0x338>)
 800c2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e6:	f003 0307 	and.w	r3, r3, #7
 800c2ea:	2b05      	cmp	r3, #5
 800c2ec:	d826      	bhi.n	800c33c <UART_SetConfig+0x1f4>
 800c2ee:	a201      	add	r2, pc, #4	; (adr r2, 800c2f4 <UART_SetConfig+0x1ac>)
 800c2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f4:	0800c30d 	.word	0x0800c30d
 800c2f8:	0800c315 	.word	0x0800c315
 800c2fc:	0800c31d 	.word	0x0800c31d
 800c300:	0800c325 	.word	0x0800c325
 800c304:	0800c32d 	.word	0x0800c32d
 800c308:	0800c335 	.word	0x0800c335
 800c30c:	2300      	movs	r3, #0
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c312:	e1ec      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c314:	2304      	movs	r3, #4
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31a:	e1e8      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c31c:	2308      	movs	r3, #8
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c322:	e1e4      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c324:	2310      	movs	r3, #16
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32a:	e1e0      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c32c:	2320      	movs	r3, #32
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e1dc      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c334:	2340      	movs	r3, #64	; 0x40
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33a:	e1d8      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c33c:	2380      	movs	r3, #128	; 0x80
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c342:	e1d4      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a4f      	ldr	r2, [pc, #316]	; (800c488 <UART_SetConfig+0x340>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d130      	bne.n	800c3b0 <UART_SetConfig+0x268>
 800c34e:	4b4c      	ldr	r3, [pc, #304]	; (800c480 <UART_SetConfig+0x338>)
 800c350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c352:	f003 0307 	and.w	r3, r3, #7
 800c356:	2b05      	cmp	r3, #5
 800c358:	d826      	bhi.n	800c3a8 <UART_SetConfig+0x260>
 800c35a:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <UART_SetConfig+0x218>)
 800c35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c360:	0800c379 	.word	0x0800c379
 800c364:	0800c381 	.word	0x0800c381
 800c368:	0800c389 	.word	0x0800c389
 800c36c:	0800c391 	.word	0x0800c391
 800c370:	0800c399 	.word	0x0800c399
 800c374:	0800c3a1 	.word	0x0800c3a1
 800c378:	2300      	movs	r3, #0
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37e:	e1b6      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c380:	2304      	movs	r3, #4
 800c382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c386:	e1b2      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c388:	2308      	movs	r3, #8
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38e:	e1ae      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c390:	2310      	movs	r3, #16
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c396:	e1aa      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c398:	2320      	movs	r3, #32
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39e:	e1a6      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c3a0:	2340      	movs	r3, #64	; 0x40
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a6:	e1a2      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c3a8:	2380      	movs	r3, #128	; 0x80
 800c3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ae:	e19e      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a35      	ldr	r2, [pc, #212]	; (800c48c <UART_SetConfig+0x344>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d130      	bne.n	800c41c <UART_SetConfig+0x2d4>
 800c3ba:	4b31      	ldr	r3, [pc, #196]	; (800c480 <UART_SetConfig+0x338>)
 800c3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3be:	f003 0307 	and.w	r3, r3, #7
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	d826      	bhi.n	800c414 <UART_SetConfig+0x2cc>
 800c3c6:	a201      	add	r2, pc, #4	; (adr r2, 800c3cc <UART_SetConfig+0x284>)
 800c3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3cc:	0800c3e5 	.word	0x0800c3e5
 800c3d0:	0800c3ed 	.word	0x0800c3ed
 800c3d4:	0800c3f5 	.word	0x0800c3f5
 800c3d8:	0800c3fd 	.word	0x0800c3fd
 800c3dc:	0800c405 	.word	0x0800c405
 800c3e0:	0800c40d 	.word	0x0800c40d
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ea:	e180      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c3ec:	2304      	movs	r3, #4
 800c3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3f2:	e17c      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c3f4:	2308      	movs	r3, #8
 800c3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3fa:	e178      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c3fc:	2310      	movs	r3, #16
 800c3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c402:	e174      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c404:	2320      	movs	r3, #32
 800c406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40a:	e170      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c40c:	2340      	movs	r3, #64	; 0x40
 800c40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c412:	e16c      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c414:	2380      	movs	r3, #128	; 0x80
 800c416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41a:	e168      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a1b      	ldr	r2, [pc, #108]	; (800c490 <UART_SetConfig+0x348>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d142      	bne.n	800c4ac <UART_SetConfig+0x364>
 800c426:	4b16      	ldr	r3, [pc, #88]	; (800c480 <UART_SetConfig+0x338>)
 800c428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c42a:	f003 0307 	and.w	r3, r3, #7
 800c42e:	2b05      	cmp	r3, #5
 800c430:	d838      	bhi.n	800c4a4 <UART_SetConfig+0x35c>
 800c432:	a201      	add	r2, pc, #4	; (adr r2, 800c438 <UART_SetConfig+0x2f0>)
 800c434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c438:	0800c451 	.word	0x0800c451
 800c43c:	0800c459 	.word	0x0800c459
 800c440:	0800c461 	.word	0x0800c461
 800c444:	0800c469 	.word	0x0800c469
 800c448:	0800c495 	.word	0x0800c495
 800c44c:	0800c49d 	.word	0x0800c49d
 800c450:	2300      	movs	r3, #0
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c456:	e14a      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c458:	2304      	movs	r3, #4
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45e:	e146      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c460:	2308      	movs	r3, #8
 800c462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c466:	e142      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c468:	2310      	movs	r3, #16
 800c46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46e:	e13e      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c470:	cfff69f3 	.word	0xcfff69f3
 800c474:	58000c00 	.word	0x58000c00
 800c478:	11fff4ff 	.word	0x11fff4ff
 800c47c:	40011000 	.word	0x40011000
 800c480:	58024400 	.word	0x58024400
 800c484:	40004400 	.word	0x40004400
 800c488:	40004800 	.word	0x40004800
 800c48c:	40004c00 	.word	0x40004c00
 800c490:	40005000 	.word	0x40005000
 800c494:	2320      	movs	r3, #32
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49a:	e128      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c49c:	2340      	movs	r3, #64	; 0x40
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a2:	e124      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c4a4:	2380      	movs	r3, #128	; 0x80
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4aa:	e120      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4acb      	ldr	r2, [pc, #812]	; (800c7e0 <UART_SetConfig+0x698>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d176      	bne.n	800c5a4 <UART_SetConfig+0x45c>
 800c4b6:	4bcb      	ldr	r3, [pc, #812]	; (800c7e4 <UART_SetConfig+0x69c>)
 800c4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4be:	2b28      	cmp	r3, #40	; 0x28
 800c4c0:	d86c      	bhi.n	800c59c <UART_SetConfig+0x454>
 800c4c2:	a201      	add	r2, pc, #4	; (adr r2, 800c4c8 <UART_SetConfig+0x380>)
 800c4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c8:	0800c56d 	.word	0x0800c56d
 800c4cc:	0800c59d 	.word	0x0800c59d
 800c4d0:	0800c59d 	.word	0x0800c59d
 800c4d4:	0800c59d 	.word	0x0800c59d
 800c4d8:	0800c59d 	.word	0x0800c59d
 800c4dc:	0800c59d 	.word	0x0800c59d
 800c4e0:	0800c59d 	.word	0x0800c59d
 800c4e4:	0800c59d 	.word	0x0800c59d
 800c4e8:	0800c575 	.word	0x0800c575
 800c4ec:	0800c59d 	.word	0x0800c59d
 800c4f0:	0800c59d 	.word	0x0800c59d
 800c4f4:	0800c59d 	.word	0x0800c59d
 800c4f8:	0800c59d 	.word	0x0800c59d
 800c4fc:	0800c59d 	.word	0x0800c59d
 800c500:	0800c59d 	.word	0x0800c59d
 800c504:	0800c59d 	.word	0x0800c59d
 800c508:	0800c57d 	.word	0x0800c57d
 800c50c:	0800c59d 	.word	0x0800c59d
 800c510:	0800c59d 	.word	0x0800c59d
 800c514:	0800c59d 	.word	0x0800c59d
 800c518:	0800c59d 	.word	0x0800c59d
 800c51c:	0800c59d 	.word	0x0800c59d
 800c520:	0800c59d 	.word	0x0800c59d
 800c524:	0800c59d 	.word	0x0800c59d
 800c528:	0800c585 	.word	0x0800c585
 800c52c:	0800c59d 	.word	0x0800c59d
 800c530:	0800c59d 	.word	0x0800c59d
 800c534:	0800c59d 	.word	0x0800c59d
 800c538:	0800c59d 	.word	0x0800c59d
 800c53c:	0800c59d 	.word	0x0800c59d
 800c540:	0800c59d 	.word	0x0800c59d
 800c544:	0800c59d 	.word	0x0800c59d
 800c548:	0800c58d 	.word	0x0800c58d
 800c54c:	0800c59d 	.word	0x0800c59d
 800c550:	0800c59d 	.word	0x0800c59d
 800c554:	0800c59d 	.word	0x0800c59d
 800c558:	0800c59d 	.word	0x0800c59d
 800c55c:	0800c59d 	.word	0x0800c59d
 800c560:	0800c59d 	.word	0x0800c59d
 800c564:	0800c59d 	.word	0x0800c59d
 800c568:	0800c595 	.word	0x0800c595
 800c56c:	2301      	movs	r3, #1
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c572:	e0bc      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c574:	2304      	movs	r3, #4
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57a:	e0b8      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c57c:	2308      	movs	r3, #8
 800c57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c582:	e0b4      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c584:	2310      	movs	r3, #16
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58a:	e0b0      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c58c:	2320      	movs	r3, #32
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c592:	e0ac      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c594:	2340      	movs	r3, #64	; 0x40
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59a:	e0a8      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c59c:	2380      	movs	r3, #128	; 0x80
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a2:	e0a4      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a8f      	ldr	r2, [pc, #572]	; (800c7e8 <UART_SetConfig+0x6a0>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d130      	bne.n	800c610 <UART_SetConfig+0x4c8>
 800c5ae:	4b8d      	ldr	r3, [pc, #564]	; (800c7e4 <UART_SetConfig+0x69c>)
 800c5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b2:	f003 0307 	and.w	r3, r3, #7
 800c5b6:	2b05      	cmp	r3, #5
 800c5b8:	d826      	bhi.n	800c608 <UART_SetConfig+0x4c0>
 800c5ba:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <UART_SetConfig+0x478>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c5d9 	.word	0x0800c5d9
 800c5c4:	0800c5e1 	.word	0x0800c5e1
 800c5c8:	0800c5e9 	.word	0x0800c5e9
 800c5cc:	0800c5f1 	.word	0x0800c5f1
 800c5d0:	0800c5f9 	.word	0x0800c5f9
 800c5d4:	0800c601 	.word	0x0800c601
 800c5d8:	2300      	movs	r3, #0
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5de:	e086      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c5e0:	2304      	movs	r3, #4
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e6:	e082      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c5e8:	2308      	movs	r3, #8
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ee:	e07e      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c5f0:	2310      	movs	r3, #16
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f6:	e07a      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c5f8:	2320      	movs	r3, #32
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fe:	e076      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c600:	2340      	movs	r3, #64	; 0x40
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c606:	e072      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c608:	2380      	movs	r3, #128	; 0x80
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60e:	e06e      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a75      	ldr	r2, [pc, #468]	; (800c7ec <UART_SetConfig+0x6a4>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d130      	bne.n	800c67c <UART_SetConfig+0x534>
 800c61a:	4b72      	ldr	r3, [pc, #456]	; (800c7e4 <UART_SetConfig+0x69c>)
 800c61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61e:	f003 0307 	and.w	r3, r3, #7
 800c622:	2b05      	cmp	r3, #5
 800c624:	d826      	bhi.n	800c674 <UART_SetConfig+0x52c>
 800c626:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <UART_SetConfig+0x4e4>)
 800c628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62c:	0800c645 	.word	0x0800c645
 800c630:	0800c64d 	.word	0x0800c64d
 800c634:	0800c655 	.word	0x0800c655
 800c638:	0800c65d 	.word	0x0800c65d
 800c63c:	0800c665 	.word	0x0800c665
 800c640:	0800c66d 	.word	0x0800c66d
 800c644:	2300      	movs	r3, #0
 800c646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64a:	e050      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c64c:	2304      	movs	r3, #4
 800c64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c652:	e04c      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c654:	2308      	movs	r3, #8
 800c656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65a:	e048      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c65c:	2310      	movs	r3, #16
 800c65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c662:	e044      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c664:	2320      	movs	r3, #32
 800c666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c66a:	e040      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c66c:	2340      	movs	r3, #64	; 0x40
 800c66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c672:	e03c      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c674:	2380      	movs	r3, #128	; 0x80
 800c676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c67a:	e038      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a5b      	ldr	r2, [pc, #364]	; (800c7f0 <UART_SetConfig+0x6a8>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d130      	bne.n	800c6e8 <UART_SetConfig+0x5a0>
 800c686:	4b57      	ldr	r3, [pc, #348]	; (800c7e4 <UART_SetConfig+0x69c>)
 800c688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c68a:	f003 0307 	and.w	r3, r3, #7
 800c68e:	2b05      	cmp	r3, #5
 800c690:	d826      	bhi.n	800c6e0 <UART_SetConfig+0x598>
 800c692:	a201      	add	r2, pc, #4	; (adr r2, 800c698 <UART_SetConfig+0x550>)
 800c694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c698:	0800c6b1 	.word	0x0800c6b1
 800c69c:	0800c6b9 	.word	0x0800c6b9
 800c6a0:	0800c6c1 	.word	0x0800c6c1
 800c6a4:	0800c6c9 	.word	0x0800c6c9
 800c6a8:	0800c6d1 	.word	0x0800c6d1
 800c6ac:	0800c6d9 	.word	0x0800c6d9
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6b6:	e01a      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c6b8:	2304      	movs	r3, #4
 800c6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6be:	e016      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c6c0:	2308      	movs	r3, #8
 800c6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6c6:	e012      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c6c8:	2310      	movs	r3, #16
 800c6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ce:	e00e      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c6d0:	2320      	movs	r3, #32
 800c6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6d6:	e00a      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c6d8:	2340      	movs	r3, #64	; 0x40
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6de:	e006      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c6e0:	2380      	movs	r3, #128	; 0x80
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e6:	e002      	b.n	800c6ee <UART_SetConfig+0x5a6>
 800c6e8:	2380      	movs	r3, #128	; 0x80
 800c6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a3f      	ldr	r2, [pc, #252]	; (800c7f0 <UART_SetConfig+0x6a8>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	f040 80f8 	bne.w	800c8ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c6fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6fe:	2b20      	cmp	r3, #32
 800c700:	dc46      	bgt.n	800c790 <UART_SetConfig+0x648>
 800c702:	2b02      	cmp	r3, #2
 800c704:	f2c0 8082 	blt.w	800c80c <UART_SetConfig+0x6c4>
 800c708:	3b02      	subs	r3, #2
 800c70a:	2b1e      	cmp	r3, #30
 800c70c:	d87e      	bhi.n	800c80c <UART_SetConfig+0x6c4>
 800c70e:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <UART_SetConfig+0x5cc>)
 800c710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c714:	0800c797 	.word	0x0800c797
 800c718:	0800c80d 	.word	0x0800c80d
 800c71c:	0800c79f 	.word	0x0800c79f
 800c720:	0800c80d 	.word	0x0800c80d
 800c724:	0800c80d 	.word	0x0800c80d
 800c728:	0800c80d 	.word	0x0800c80d
 800c72c:	0800c7af 	.word	0x0800c7af
 800c730:	0800c80d 	.word	0x0800c80d
 800c734:	0800c80d 	.word	0x0800c80d
 800c738:	0800c80d 	.word	0x0800c80d
 800c73c:	0800c80d 	.word	0x0800c80d
 800c740:	0800c80d 	.word	0x0800c80d
 800c744:	0800c80d 	.word	0x0800c80d
 800c748:	0800c80d 	.word	0x0800c80d
 800c74c:	0800c7bf 	.word	0x0800c7bf
 800c750:	0800c80d 	.word	0x0800c80d
 800c754:	0800c80d 	.word	0x0800c80d
 800c758:	0800c80d 	.word	0x0800c80d
 800c75c:	0800c80d 	.word	0x0800c80d
 800c760:	0800c80d 	.word	0x0800c80d
 800c764:	0800c80d 	.word	0x0800c80d
 800c768:	0800c80d 	.word	0x0800c80d
 800c76c:	0800c80d 	.word	0x0800c80d
 800c770:	0800c80d 	.word	0x0800c80d
 800c774:	0800c80d 	.word	0x0800c80d
 800c778:	0800c80d 	.word	0x0800c80d
 800c77c:	0800c80d 	.word	0x0800c80d
 800c780:	0800c80d 	.word	0x0800c80d
 800c784:	0800c80d 	.word	0x0800c80d
 800c788:	0800c80d 	.word	0x0800c80d
 800c78c:	0800c7ff 	.word	0x0800c7ff
 800c790:	2b40      	cmp	r3, #64	; 0x40
 800c792:	d037      	beq.n	800c804 <UART_SetConfig+0x6bc>
 800c794:	e03a      	b.n	800c80c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c796:	f7fc fded 	bl	8009374 <HAL_RCCEx_GetD3PCLK1Freq>
 800c79a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c79c:	e03c      	b.n	800c818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c79e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fc fdfc 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ac:	e034      	b.n	800c818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7ae:	f107 0318 	add.w	r3, r7, #24
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fc ff48 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7bc:	e02c      	b.n	800c818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7be:	4b09      	ldr	r3, [pc, #36]	; (800c7e4 <UART_SetConfig+0x69c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f003 0320 	and.w	r3, r3, #32
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d016      	beq.n	800c7f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7ca:	4b06      	ldr	r3, [pc, #24]	; (800c7e4 <UART_SetConfig+0x69c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	08db      	lsrs	r3, r3, #3
 800c7d0:	f003 0303 	and.w	r3, r3, #3
 800c7d4:	4a07      	ldr	r2, [pc, #28]	; (800c7f4 <UART_SetConfig+0x6ac>)
 800c7d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c7dc:	e01c      	b.n	800c818 <UART_SetConfig+0x6d0>
 800c7de:	bf00      	nop
 800c7e0:	40011400 	.word	0x40011400
 800c7e4:	58024400 	.word	0x58024400
 800c7e8:	40007800 	.word	0x40007800
 800c7ec:	40007c00 	.word	0x40007c00
 800c7f0:	58000c00 	.word	0x58000c00
 800c7f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c7f8:	4b9d      	ldr	r3, [pc, #628]	; (800ca70 <UART_SetConfig+0x928>)
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7fc:	e00c      	b.n	800c818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c7fe:	4b9d      	ldr	r3, [pc, #628]	; (800ca74 <UART_SetConfig+0x92c>)
 800c800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c802:	e009      	b.n	800c818 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80a:	e005      	b.n	800c818 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c80c:	2300      	movs	r3, #0
 800c80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c816:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f000 81de 	beq.w	800cbdc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c824:	4a94      	ldr	r2, [pc, #592]	; (800ca78 <UART_SetConfig+0x930>)
 800c826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c82a:	461a      	mov	r2, r3
 800c82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c832:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	685a      	ldr	r2, [r3, #4]
 800c838:	4613      	mov	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	4413      	add	r3, r2
 800c83e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c840:	429a      	cmp	r2, r3
 800c842:	d305      	bcc.n	800c850 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d903      	bls.n	800c858 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c856:	e1c1      	b.n	800cbdc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85a:	2200      	movs	r2, #0
 800c85c:	60bb      	str	r3, [r7, #8]
 800c85e:	60fa      	str	r2, [r7, #12]
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c864:	4a84      	ldr	r2, [pc, #528]	; (800ca78 <UART_SetConfig+0x930>)
 800c866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	2200      	movs	r2, #0
 800c86e:	603b      	str	r3, [r7, #0]
 800c870:	607a      	str	r2, [r7, #4]
 800c872:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c87a:	f7f3 fd31 	bl	80002e0 <__aeabi_uldivmod>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	4610      	mov	r0, r2
 800c884:	4619      	mov	r1, r3
 800c886:	f04f 0200 	mov.w	r2, #0
 800c88a:	f04f 0300 	mov.w	r3, #0
 800c88e:	020b      	lsls	r3, r1, #8
 800c890:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c894:	0202      	lsls	r2, r0, #8
 800c896:	6979      	ldr	r1, [r7, #20]
 800c898:	6849      	ldr	r1, [r1, #4]
 800c89a:	0849      	lsrs	r1, r1, #1
 800c89c:	2000      	movs	r0, #0
 800c89e:	460c      	mov	r4, r1
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	eb12 0804 	adds.w	r8, r2, r4
 800c8a6:	eb43 0905 	adc.w	r9, r3, r5
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	469a      	mov	sl, r3
 800c8b2:	4693      	mov	fp, r2
 800c8b4:	4652      	mov	r2, sl
 800c8b6:	465b      	mov	r3, fp
 800c8b8:	4640      	mov	r0, r8
 800c8ba:	4649      	mov	r1, r9
 800c8bc:	f7f3 fd10 	bl	80002e0 <__aeabi_uldivmod>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8ce:	d308      	bcc.n	800c8e2 <UART_SetConfig+0x79a>
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8d6:	d204      	bcs.n	800c8e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8de:	60da      	str	r2, [r3, #12]
 800c8e0:	e17c      	b.n	800cbdc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c8e8:	e178      	b.n	800cbdc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	69db      	ldr	r3, [r3, #28]
 800c8ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8f2:	f040 80c5 	bne.w	800ca80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c8f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c8fa:	2b20      	cmp	r3, #32
 800c8fc:	dc48      	bgt.n	800c990 <UART_SetConfig+0x848>
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	db7b      	blt.n	800c9fa <UART_SetConfig+0x8b2>
 800c902:	2b20      	cmp	r3, #32
 800c904:	d879      	bhi.n	800c9fa <UART_SetConfig+0x8b2>
 800c906:	a201      	add	r2, pc, #4	; (adr r2, 800c90c <UART_SetConfig+0x7c4>)
 800c908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90c:	0800c997 	.word	0x0800c997
 800c910:	0800c99f 	.word	0x0800c99f
 800c914:	0800c9fb 	.word	0x0800c9fb
 800c918:	0800c9fb 	.word	0x0800c9fb
 800c91c:	0800c9a7 	.word	0x0800c9a7
 800c920:	0800c9fb 	.word	0x0800c9fb
 800c924:	0800c9fb 	.word	0x0800c9fb
 800c928:	0800c9fb 	.word	0x0800c9fb
 800c92c:	0800c9b7 	.word	0x0800c9b7
 800c930:	0800c9fb 	.word	0x0800c9fb
 800c934:	0800c9fb 	.word	0x0800c9fb
 800c938:	0800c9fb 	.word	0x0800c9fb
 800c93c:	0800c9fb 	.word	0x0800c9fb
 800c940:	0800c9fb 	.word	0x0800c9fb
 800c944:	0800c9fb 	.word	0x0800c9fb
 800c948:	0800c9fb 	.word	0x0800c9fb
 800c94c:	0800c9c7 	.word	0x0800c9c7
 800c950:	0800c9fb 	.word	0x0800c9fb
 800c954:	0800c9fb 	.word	0x0800c9fb
 800c958:	0800c9fb 	.word	0x0800c9fb
 800c95c:	0800c9fb 	.word	0x0800c9fb
 800c960:	0800c9fb 	.word	0x0800c9fb
 800c964:	0800c9fb 	.word	0x0800c9fb
 800c968:	0800c9fb 	.word	0x0800c9fb
 800c96c:	0800c9fb 	.word	0x0800c9fb
 800c970:	0800c9fb 	.word	0x0800c9fb
 800c974:	0800c9fb 	.word	0x0800c9fb
 800c978:	0800c9fb 	.word	0x0800c9fb
 800c97c:	0800c9fb 	.word	0x0800c9fb
 800c980:	0800c9fb 	.word	0x0800c9fb
 800c984:	0800c9fb 	.word	0x0800c9fb
 800c988:	0800c9fb 	.word	0x0800c9fb
 800c98c:	0800c9ed 	.word	0x0800c9ed
 800c990:	2b40      	cmp	r3, #64	; 0x40
 800c992:	d02e      	beq.n	800c9f2 <UART_SetConfig+0x8aa>
 800c994:	e031      	b.n	800c9fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c996:	f7fa fcf5 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
 800c99a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c99c:	e033      	b.n	800ca06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c99e:	f7fa fd07 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 800c9a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9a4:	e02f      	b.n	800ca06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fc fcf8 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b4:	e027      	b.n	800ca06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9b6:	f107 0318 	add.w	r3, r7, #24
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7fc fe44 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c4:	e01f      	b.n	800ca06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9c6:	4b2d      	ldr	r3, [pc, #180]	; (800ca7c <UART_SetConfig+0x934>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 0320 	and.w	r3, r3, #32
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d009      	beq.n	800c9e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9d2:	4b2a      	ldr	r3, [pc, #168]	; (800ca7c <UART_SetConfig+0x934>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	08db      	lsrs	r3, r3, #3
 800c9d8:	f003 0303 	and.w	r3, r3, #3
 800c9dc:	4a24      	ldr	r2, [pc, #144]	; (800ca70 <UART_SetConfig+0x928>)
 800c9de:	fa22 f303 	lsr.w	r3, r2, r3
 800c9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9e4:	e00f      	b.n	800ca06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c9e6:	4b22      	ldr	r3, [pc, #136]	; (800ca70 <UART_SetConfig+0x928>)
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ea:	e00c      	b.n	800ca06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9ec:	4b21      	ldr	r3, [pc, #132]	; (800ca74 <UART_SetConfig+0x92c>)
 800c9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f0:	e009      	b.n	800ca06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f8:	e005      	b.n	800ca06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 80e7 	beq.w	800cbdc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca12:	4a19      	ldr	r2, [pc, #100]	; (800ca78 <UART_SetConfig+0x930>)
 800ca14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca18:	461a      	mov	r2, r3
 800ca1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca20:	005a      	lsls	r2, r3, #1
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	085b      	lsrs	r3, r3, #1
 800ca28:	441a      	add	r2, r3
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	2b0f      	cmp	r3, #15
 800ca38:	d916      	bls.n	800ca68 <UART_SetConfig+0x920>
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca40:	d212      	bcs.n	800ca68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f023 030f 	bic.w	r3, r3, #15
 800ca4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	085b      	lsrs	r3, r3, #1
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	f003 0307 	and.w	r3, r3, #7
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ca64:	60da      	str	r2, [r3, #12]
 800ca66:	e0b9      	b.n	800cbdc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca6e:	e0b5      	b.n	800cbdc <UART_SetConfig+0xa94>
 800ca70:	03d09000 	.word	0x03d09000
 800ca74:	003d0900 	.word	0x003d0900
 800ca78:	08010108 	.word	0x08010108
 800ca7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca84:	2b20      	cmp	r3, #32
 800ca86:	dc49      	bgt.n	800cb1c <UART_SetConfig+0x9d4>
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	db7c      	blt.n	800cb86 <UART_SetConfig+0xa3e>
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d87a      	bhi.n	800cb86 <UART_SetConfig+0xa3e>
 800ca90:	a201      	add	r2, pc, #4	; (adr r2, 800ca98 <UART_SetConfig+0x950>)
 800ca92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca96:	bf00      	nop
 800ca98:	0800cb23 	.word	0x0800cb23
 800ca9c:	0800cb2b 	.word	0x0800cb2b
 800caa0:	0800cb87 	.word	0x0800cb87
 800caa4:	0800cb87 	.word	0x0800cb87
 800caa8:	0800cb33 	.word	0x0800cb33
 800caac:	0800cb87 	.word	0x0800cb87
 800cab0:	0800cb87 	.word	0x0800cb87
 800cab4:	0800cb87 	.word	0x0800cb87
 800cab8:	0800cb43 	.word	0x0800cb43
 800cabc:	0800cb87 	.word	0x0800cb87
 800cac0:	0800cb87 	.word	0x0800cb87
 800cac4:	0800cb87 	.word	0x0800cb87
 800cac8:	0800cb87 	.word	0x0800cb87
 800cacc:	0800cb87 	.word	0x0800cb87
 800cad0:	0800cb87 	.word	0x0800cb87
 800cad4:	0800cb87 	.word	0x0800cb87
 800cad8:	0800cb53 	.word	0x0800cb53
 800cadc:	0800cb87 	.word	0x0800cb87
 800cae0:	0800cb87 	.word	0x0800cb87
 800cae4:	0800cb87 	.word	0x0800cb87
 800cae8:	0800cb87 	.word	0x0800cb87
 800caec:	0800cb87 	.word	0x0800cb87
 800caf0:	0800cb87 	.word	0x0800cb87
 800caf4:	0800cb87 	.word	0x0800cb87
 800caf8:	0800cb87 	.word	0x0800cb87
 800cafc:	0800cb87 	.word	0x0800cb87
 800cb00:	0800cb87 	.word	0x0800cb87
 800cb04:	0800cb87 	.word	0x0800cb87
 800cb08:	0800cb87 	.word	0x0800cb87
 800cb0c:	0800cb87 	.word	0x0800cb87
 800cb10:	0800cb87 	.word	0x0800cb87
 800cb14:	0800cb87 	.word	0x0800cb87
 800cb18:	0800cb79 	.word	0x0800cb79
 800cb1c:	2b40      	cmp	r3, #64	; 0x40
 800cb1e:	d02e      	beq.n	800cb7e <UART_SetConfig+0xa36>
 800cb20:	e031      	b.n	800cb86 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb22:	f7fa fc2f 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
 800cb26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb28:	e033      	b.n	800cb92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb2a:	f7fa fc41 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 800cb2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb30:	e02f      	b.n	800cb92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fc fc32 	bl	80093a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb40:	e027      	b.n	800cb92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb42:	f107 0318 	add.w	r3, r7, #24
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fc fd7e 	bl	8009648 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb50:	e01f      	b.n	800cb92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb52:	4b2d      	ldr	r3, [pc, #180]	; (800cc08 <UART_SetConfig+0xac0>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f003 0320 	and.w	r3, r3, #32
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d009      	beq.n	800cb72 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb5e:	4b2a      	ldr	r3, [pc, #168]	; (800cc08 <UART_SetConfig+0xac0>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	08db      	lsrs	r3, r3, #3
 800cb64:	f003 0303 	and.w	r3, r3, #3
 800cb68:	4a28      	ldr	r2, [pc, #160]	; (800cc0c <UART_SetConfig+0xac4>)
 800cb6a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb70:	e00f      	b.n	800cb92 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cb72:	4b26      	ldr	r3, [pc, #152]	; (800cc0c <UART_SetConfig+0xac4>)
 800cb74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb76:	e00c      	b.n	800cb92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb78:	4b25      	ldr	r3, [pc, #148]	; (800cc10 <UART_SetConfig+0xac8>)
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7c:	e009      	b.n	800cb92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb84:	e005      	b.n	800cb92 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cb86:	2300      	movs	r3, #0
 800cb88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb90:	bf00      	nop
    }

    if (pclk != 0U)
 800cb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d021      	beq.n	800cbdc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9c:	4a1d      	ldr	r2, [pc, #116]	; (800cc14 <UART_SetConfig+0xacc>)
 800cb9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cba2:	461a      	mov	r2, r3
 800cba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba6:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	085b      	lsrs	r3, r3, #1
 800cbb0:	441a      	add	r2, r3
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	2b0f      	cmp	r3, #15
 800cbc0:	d909      	bls.n	800cbd6 <UART_SetConfig+0xa8e>
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc8:	d205      	bcs.n	800cbd6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	60da      	str	r2, [r3, #12]
 800cbd4:	e002      	b.n	800cbdc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cbf8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3748      	adds	r7, #72	; 0x48
 800cc00:	46bd      	mov	sp, r7
 800cc02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc06:	bf00      	nop
 800cc08:	58024400 	.word	0x58024400
 800cc0c:	03d09000 	.word	0x03d09000
 800cc10:	003d0900 	.word	0x003d0900
 800cc14:	08010108 	.word	0x08010108

0800cc18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc24:	f003 0308 	and.w	r3, r3, #8
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	430a      	orrs	r2, r1
 800cc40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc46:	f003 0301 	and.w	r3, r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	430a      	orrs	r2, r1
 800cc62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc68:	f003 0302 	and.w	r3, r3, #2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00a      	beq.n	800cc86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	430a      	orrs	r2, r1
 800cc84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8a:	f003 0304 	and.w	r3, r3, #4
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00a      	beq.n	800cca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	430a      	orrs	r2, r1
 800cca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccac:	f003 0310 	and.w	r3, r3, #16
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00a      	beq.n	800ccca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00a      	beq.n	800ccec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	430a      	orrs	r2, r1
 800ccea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d01a      	beq.n	800cd2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	430a      	orrs	r2, r1
 800cd0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd16:	d10a      	bne.n	800cd2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	430a      	orrs	r2, r1
 800cd2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00a      	beq.n	800cd50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	430a      	orrs	r2, r1
 800cd4e:	605a      	str	r2, [r3, #4]
  }
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b098      	sub	sp, #96	; 0x60
 800cd60:	af02      	add	r7, sp, #8
 800cd62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd6c:	f7f5 fa58 	bl	8002220 <HAL_GetTick>
 800cd70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0308 	and.w	r3, r3, #8
 800cd7c:	2b08      	cmp	r3, #8
 800cd7e:	d12f      	bne.n	800cde0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f88e 	bl	800ceb0 <UART_WaitOnFlagUntilTimeout>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d022      	beq.n	800cde0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	e853 3f00 	ldrex	r3, [r3]
 800cda6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdae:	653b      	str	r3, [r7, #80]	; 0x50
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdb8:	647b      	str	r3, [r7, #68]	; 0x44
 800cdba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cdbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cdc0:	e841 2300 	strex	r3, r2, [r1]
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1e6      	bne.n	800cd9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2220      	movs	r2, #32
 800cdd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cddc:	2303      	movs	r3, #3
 800cdde:	e063      	b.n	800cea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f003 0304 	and.w	r3, r3, #4
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	d149      	bne.n	800ce82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f857 	bl	800ceb0 <UART_WaitOnFlagUntilTimeout>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d03c      	beq.n	800ce82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	e853 3f00 	ldrex	r3, [r3]
 800ce14:	623b      	str	r3, [r7, #32]
   return(result);
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	461a      	mov	r2, r3
 800ce24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce26:	633b      	str	r3, [r7, #48]	; 0x30
 800ce28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2e:	e841 2300 	strex	r3, r2, [r1]
 800ce32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1e6      	bne.n	800ce08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	3308      	adds	r3, #8
 800ce40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	e853 3f00 	ldrex	r3, [r3]
 800ce48:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f023 0301 	bic.w	r3, r3, #1
 800ce50:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	3308      	adds	r3, #8
 800ce58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce5a:	61fa      	str	r2, [r7, #28]
 800ce5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5e:	69b9      	ldr	r1, [r7, #24]
 800ce60:	69fa      	ldr	r2, [r7, #28]
 800ce62:	e841 2300 	strex	r3, r2, [r1]
 800ce66:	617b      	str	r3, [r7, #20]
   return(result);
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1e5      	bne.n	800ce3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2220      	movs	r2, #32
 800ce72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e012      	b.n	800cea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2220      	movs	r2, #32
 800ce86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3758      	adds	r7, #88	; 0x58
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	4613      	mov	r3, r2
 800cebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cec0:	e04f      	b.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec8:	d04b      	beq.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ceca:	f7f5 f9a9 	bl	8002220 <HAL_GetTick>
 800cece:	4602      	mov	r2, r0
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	69ba      	ldr	r2, [r7, #24]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d302      	bcc.n	800cee0 <UART_WaitOnFlagUntilTimeout+0x30>
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d101      	bne.n	800cee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cee0:	2303      	movs	r3, #3
 800cee2:	e04e      	b.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f003 0304 	and.w	r3, r3, #4
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d037      	beq.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b80      	cmp	r3, #128	; 0x80
 800cef6:	d034      	beq.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b40      	cmp	r3, #64	; 0x40
 800cefc:	d031      	beq.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	69db      	ldr	r3, [r3, #28]
 800cf04:	f003 0308 	and.w	r3, r3, #8
 800cf08:	2b08      	cmp	r3, #8
 800cf0a:	d110      	bne.n	800cf2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2208      	movs	r2, #8
 800cf12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f000 f839 	bl	800cf8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e029      	b.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	69db      	ldr	r3, [r3, #28]
 800cf34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf3c:	d111      	bne.n	800cf62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 f81f 	bl	800cf8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2220      	movs	r2, #32
 800cf52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	e00f      	b.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69da      	ldr	r2, [r3, #28]
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	bf0c      	ite	eq
 800cf72:	2301      	moveq	r3, #1
 800cf74:	2300      	movne	r3, #0
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	461a      	mov	r2, r3
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d0a0      	beq.n	800cec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
	...

0800cf8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b095      	sub	sp, #84	; 0x54
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf9c:	e853 3f00 	ldrex	r3, [r3]
 800cfa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb2:	643b      	str	r3, [r7, #64]	; 0x40
 800cfb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1e6      	bne.n	800cf94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3308      	adds	r3, #8
 800cfcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	e853 3f00 	ldrex	r3, [r3]
 800cfd4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfd6:	69fa      	ldr	r2, [r7, #28]
 800cfd8:	4b1e      	ldr	r3, [pc, #120]	; (800d054 <UART_EndRxTransfer+0xc8>)
 800cfda:	4013      	ands	r3, r2
 800cfdc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3308      	adds	r3, #8
 800cfe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfee:	e841 2300 	strex	r3, r2, [r1]
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1e5      	bne.n	800cfc6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d118      	bne.n	800d034 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	e853 3f00 	ldrex	r3, [r3]
 800d00e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	f023 0310 	bic.w	r3, r3, #16
 800d016:	647b      	str	r3, [r7, #68]	; 0x44
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	461a      	mov	r2, r3
 800d01e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d020:	61bb      	str	r3, [r7, #24]
 800d022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d024:	6979      	ldr	r1, [r7, #20]
 800d026:	69ba      	ldr	r2, [r7, #24]
 800d028:	e841 2300 	strex	r3, r2, [r1]
 800d02c:	613b      	str	r3, [r7, #16]
   return(result);
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1e6      	bne.n	800d002 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2220      	movs	r2, #32
 800d038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d048:	bf00      	nop
 800d04a:	3754      	adds	r7, #84	; 0x54
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	effffffe 	.word	0xeffffffe

0800d058 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d064:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2200      	movs	r2, #0
 800d06a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2200      	movs	r2, #0
 800d072:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7ff f850 	bl	800c11c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d07c:	bf00      	nop
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b088      	sub	sp, #32
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	e853 3f00 	ldrex	r3, [r3]
 800d098:	60bb      	str	r3, [r7, #8]
   return(result);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0a0:	61fb      	str	r3, [r7, #28]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	61bb      	str	r3, [r7, #24]
 800d0ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ae:	6979      	ldr	r1, [r7, #20]
 800d0b0:	69ba      	ldr	r2, [r7, #24]
 800d0b2:	e841 2300 	strex	r3, r2, [r1]
 800d0b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1e6      	bne.n	800d08c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2220      	movs	r2, #32
 800d0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff f81b 	bl	800c108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0d2:	bf00      	nop
 800d0d4:	3720      	adds	r7, #32
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d0e2:	bf00      	nop
 800d0e4:	370c      	adds	r7, #12
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr

0800d0ee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d0ee:	b480      	push	{r7}
 800d0f0:	b083      	sub	sp, #12
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d0f6:	bf00      	nop
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d102:	b480      	push	{r7}
 800d104:	b083      	sub	sp, #12
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d10a:	bf00      	nop
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d116:	b480      	push	{r7}
 800d118:	b085      	sub	sp, #20
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d124:	2b01      	cmp	r3, #1
 800d126:	d101      	bne.n	800d12c <HAL_UARTEx_DisableFifoMode+0x16>
 800d128:	2302      	movs	r3, #2
 800d12a:	e027      	b.n	800d17c <HAL_UARTEx_DisableFifoMode+0x66>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2224      	movs	r2, #36	; 0x24
 800d138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f022 0201 	bic.w	r2, r2, #1
 800d152:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d15a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2220      	movs	r2, #32
 800d16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3714      	adds	r7, #20
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d101      	bne.n	800d1a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d19c:	2302      	movs	r3, #2
 800d19e:	e02d      	b.n	800d1fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2224      	movs	r2, #36	; 0x24
 800d1ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f022 0201 	bic.w	r2, r2, #1
 800d1c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	430a      	orrs	r2, r1
 800d1da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 f84f 	bl	800d280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2220      	movs	r2, #32
 800d1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d214:	2b01      	cmp	r3, #1
 800d216:	d101      	bne.n	800d21c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d218:	2302      	movs	r3, #2
 800d21a:	e02d      	b.n	800d278 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2224      	movs	r2, #36	; 0x24
 800d228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 0201 	bic.w	r2, r2, #1
 800d242:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	430a      	orrs	r2, r1
 800d256:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f811 	bl	800d280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2220      	movs	r2, #32
 800d26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d108      	bne.n	800d2a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2201      	movs	r2, #1
 800d294:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d2a0:	e031      	b.n	800d306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d2a2:	2310      	movs	r3, #16
 800d2a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d2a6:	2310      	movs	r3, #16
 800d2a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	0e5b      	lsrs	r3, r3, #25
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	f003 0307 	and.w	r3, r3, #7
 800d2b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	0f5b      	lsrs	r3, r3, #29
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	f003 0307 	and.w	r3, r3, #7
 800d2c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2ca:	7bbb      	ldrb	r3, [r7, #14]
 800d2cc:	7b3a      	ldrb	r2, [r7, #12]
 800d2ce:	4911      	ldr	r1, [pc, #68]	; (800d314 <UARTEx_SetNbDataToProcess+0x94>)
 800d2d0:	5c8a      	ldrb	r2, [r1, r2]
 800d2d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2d6:	7b3a      	ldrb	r2, [r7, #12]
 800d2d8:	490f      	ldr	r1, [pc, #60]	; (800d318 <UARTEx_SetNbDataToProcess+0x98>)
 800d2da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ea:	7b7a      	ldrb	r2, [r7, #13]
 800d2ec:	4909      	ldr	r1, [pc, #36]	; (800d314 <UARTEx_SetNbDataToProcess+0x94>)
 800d2ee:	5c8a      	ldrb	r2, [r1, r2]
 800d2f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d2f4:	7b7a      	ldrb	r2, [r7, #13]
 800d2f6:	4908      	ldr	r1, [pc, #32]	; (800d318 <UARTEx_SetNbDataToProcess+0x98>)
 800d2f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d306:	bf00      	nop
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	08010120 	.word	0x08010120
 800d318:	08010128 	.word	0x08010128

0800d31c <__NVIC_SetPriority>:
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	4603      	mov	r3, r0
 800d324:	6039      	str	r1, [r7, #0]
 800d326:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	db0a      	blt.n	800d346 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	b2da      	uxtb	r2, r3
 800d334:	490c      	ldr	r1, [pc, #48]	; (800d368 <__NVIC_SetPriority+0x4c>)
 800d336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d33a:	0112      	lsls	r2, r2, #4
 800d33c:	b2d2      	uxtb	r2, r2
 800d33e:	440b      	add	r3, r1
 800d340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d344:	e00a      	b.n	800d35c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	4908      	ldr	r1, [pc, #32]	; (800d36c <__NVIC_SetPriority+0x50>)
 800d34c:	88fb      	ldrh	r3, [r7, #6]
 800d34e:	f003 030f 	and.w	r3, r3, #15
 800d352:	3b04      	subs	r3, #4
 800d354:	0112      	lsls	r2, r2, #4
 800d356:	b2d2      	uxtb	r2, r2
 800d358:	440b      	add	r3, r1
 800d35a:	761a      	strb	r2, [r3, #24]
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	e000e100 	.word	0xe000e100
 800d36c:	e000ed00 	.word	0xe000ed00

0800d370 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d374:	4b05      	ldr	r3, [pc, #20]	; (800d38c <SysTick_Handler+0x1c>)
 800d376:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d378:	f001 fd06 	bl	800ed88 <xTaskGetSchedulerState>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d001      	beq.n	800d386 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d382:	f002 faf1 	bl	800f968 <xPortSysTickHandler>
  }
}
 800d386:	bf00      	nop
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	e000e010 	.word	0xe000e010

0800d390 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d394:	2100      	movs	r1, #0
 800d396:	f06f 0004 	mvn.w	r0, #4
 800d39a:	f7ff ffbf 	bl	800d31c <__NVIC_SetPriority>
#endif
}
 800d39e:	bf00      	nop
 800d3a0:	bd80      	pop	{r7, pc}
	...

0800d3a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3aa:	f3ef 8305 	mrs	r3, IPSR
 800d3ae:	603b      	str	r3, [r7, #0]
  return(result);
 800d3b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d3b6:	f06f 0305 	mvn.w	r3, #5
 800d3ba:	607b      	str	r3, [r7, #4]
 800d3bc:	e00c      	b.n	800d3d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d3be:	4b0a      	ldr	r3, [pc, #40]	; (800d3e8 <osKernelInitialize+0x44>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d105      	bne.n	800d3d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d3c6:	4b08      	ldr	r3, [pc, #32]	; (800d3e8 <osKernelInitialize+0x44>)
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	607b      	str	r3, [r7, #4]
 800d3d0:	e002      	b.n	800d3d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d3d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d3d8:	687b      	ldr	r3, [r7, #4]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	370c      	adds	r7, #12
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	24000664 	.word	0x24000664

0800d3ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3f2:	f3ef 8305 	mrs	r3, IPSR
 800d3f6:	603b      	str	r3, [r7, #0]
  return(result);
 800d3f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d003      	beq.n	800d406 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d3fe:	f06f 0305 	mvn.w	r3, #5
 800d402:	607b      	str	r3, [r7, #4]
 800d404:	e010      	b.n	800d428 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d406:	4b0b      	ldr	r3, [pc, #44]	; (800d434 <osKernelStart+0x48>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d109      	bne.n	800d422 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d40e:	f7ff ffbf 	bl	800d390 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d412:	4b08      	ldr	r3, [pc, #32]	; (800d434 <osKernelStart+0x48>)
 800d414:	2202      	movs	r2, #2
 800d416:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d418:	f001 f866 	bl	800e4e8 <vTaskStartScheduler>
      stat = osOK;
 800d41c:	2300      	movs	r3, #0
 800d41e:	607b      	str	r3, [r7, #4]
 800d420:	e002      	b.n	800d428 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d426:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d428:	687b      	ldr	r3, [r7, #4]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	24000664 	.word	0x24000664

0800d438 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08e      	sub	sp, #56	; 0x38
 800d43c:	af04      	add	r7, sp, #16
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d444:	2300      	movs	r3, #0
 800d446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d448:	f3ef 8305 	mrs	r3, IPSR
 800d44c:	617b      	str	r3, [r7, #20]
  return(result);
 800d44e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d450:	2b00      	cmp	r3, #0
 800d452:	d17e      	bne.n	800d552 <osThreadNew+0x11a>
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d07b      	beq.n	800d552 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d45a:	2380      	movs	r3, #128	; 0x80
 800d45c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d45e:	2318      	movs	r3, #24
 800d460:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d462:	2300      	movs	r3, #0
 800d464:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d46a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d045      	beq.n	800d4fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d002      	beq.n	800d480 <osThreadNew+0x48>
        name = attr->name;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	699b      	ldr	r3, [r3, #24]
 800d48c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d008      	beq.n	800d4a6 <osThreadNew+0x6e>
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	2b38      	cmp	r3, #56	; 0x38
 800d498:	d805      	bhi.n	800d4a6 <osThreadNew+0x6e>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d001      	beq.n	800d4aa <osThreadNew+0x72>
        return (NULL);
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e054      	b.n	800d554 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d003      	beq.n	800d4ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	695b      	ldr	r3, [r3, #20]
 800d4b6:	089b      	lsrs	r3, r3, #2
 800d4b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00e      	beq.n	800d4e0 <osThreadNew+0xa8>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	2b5b      	cmp	r3, #91	; 0x5b
 800d4c8:	d90a      	bls.n	800d4e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d006      	beq.n	800d4e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d002      	beq.n	800d4e0 <osThreadNew+0xa8>
        mem = 1;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	e010      	b.n	800d502 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d10c      	bne.n	800d502 <osThreadNew+0xca>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d108      	bne.n	800d502 <osThreadNew+0xca>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d104      	bne.n	800d502 <osThreadNew+0xca>
          mem = 0;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	61bb      	str	r3, [r7, #24]
 800d4fc:	e001      	b.n	800d502 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d110      	bne.n	800d52a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d510:	9202      	str	r2, [sp, #8]
 800d512:	9301      	str	r3, [sp, #4]
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	6a3a      	ldr	r2, [r7, #32]
 800d51c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f000 fe0c 	bl	800e13c <xTaskCreateStatic>
 800d524:	4603      	mov	r3, r0
 800d526:	613b      	str	r3, [r7, #16]
 800d528:	e013      	b.n	800d552 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d110      	bne.n	800d552 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	b29a      	uxth	r2, r3
 800d534:	f107 0310 	add.w	r3, r7, #16
 800d538:	9301      	str	r3, [sp, #4]
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	9300      	str	r3, [sp, #0]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f000 fe57 	bl	800e1f6 <xTaskCreate>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d001      	beq.n	800d552 <osThreadNew+0x11a>
            hTask = NULL;
 800d54e:	2300      	movs	r3, #0
 800d550:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d552:	693b      	ldr	r3, [r7, #16]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3728      	adds	r7, #40	; 0x28
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d564:	f3ef 8305 	mrs	r3, IPSR
 800d568:	60bb      	str	r3, [r7, #8]
  return(result);
 800d56a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d003      	beq.n	800d578 <osDelay+0x1c>
    stat = osErrorISR;
 800d570:	f06f 0305 	mvn.w	r3, #5
 800d574:	60fb      	str	r3, [r7, #12]
 800d576:	e007      	b.n	800d588 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d578:	2300      	movs	r3, #0
 800d57a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 ff7c 	bl	800e480 <vTaskDelay>
    }
  }

  return (stat);
 800d588:	68fb      	ldr	r3, [r7, #12]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
	...

0800d594 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	4a07      	ldr	r2, [pc, #28]	; (800d5c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d5a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	4a06      	ldr	r2, [pc, #24]	; (800d5c4 <vApplicationGetIdleTaskMemory+0x30>)
 800d5aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2280      	movs	r2, #128	; 0x80
 800d5b0:	601a      	str	r2, [r3, #0]
}
 800d5b2:	bf00      	nop
 800d5b4:	3714      	adds	r7, #20
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	24000668 	.word	0x24000668
 800d5c4:	240006c4 	.word	0x240006c4

0800d5c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4a07      	ldr	r2, [pc, #28]	; (800d5f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800d5d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	4a06      	ldr	r2, [pc, #24]	; (800d5f8 <vApplicationGetTimerTaskMemory+0x30>)
 800d5de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5e6:	601a      	str	r2, [r3, #0]
}
 800d5e8:	bf00      	nop
 800d5ea:	3714      	adds	r7, #20
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr
 800d5f4:	240008c4 	.word	0x240008c4
 800d5f8:	24000920 	.word	0x24000920

0800d5fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f103 0208 	add.w	r2, r3, #8
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d614:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f103 0208 	add.w	r2, r3, #8
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f103 0208 	add.w	r2, r3, #8
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d630:	bf00      	nop
 800d632:	370c      	adds	r7, #12
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d64a:	bf00      	nop
 800d64c:	370c      	adds	r7, #12
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d656:	b480      	push	{r7}
 800d658:	b085      	sub	sp, #20
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	689a      	ldr	r2, [r3, #8]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	683a      	ldr	r2, [r7, #0]
 800d67a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	683a      	ldr	r2, [r7, #0]
 800d680:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	1c5a      	adds	r2, r3, #1
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	601a      	str	r2, [r3, #0]
}
 800d692:	bf00      	nop
 800d694:	3714      	adds	r7, #20
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d69e:	b480      	push	{r7}
 800d6a0:	b085      	sub	sp, #20
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6b4:	d103      	bne.n	800d6be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e00c      	b.n	800d6d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	60fb      	str	r3, [r7, #12]
 800d6c4:	e002      	b.n	800d6cc <vListInsert+0x2e>
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d2f6      	bcs.n	800d6c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	683a      	ldr	r2, [r7, #0]
 800d6e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	1c5a      	adds	r2, r3, #1
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	601a      	str	r2, [r3, #0]
}
 800d704:	bf00      	nop
 800d706:	3714      	adds	r7, #20
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr

0800d710 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	6892      	ldr	r2, [r2, #8]
 800d726:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	6852      	ldr	r2, [r2, #4]
 800d730:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d103      	bne.n	800d744 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	689a      	ldr	r2, [r3, #8]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	1e5a      	subs	r2, r3, #1
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10a      	bne.n	800d78e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d78a:	bf00      	nop
 800d78c:	e7fe      	b.n	800d78c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d78e:	f002 f859 	bl	800f844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79a:	68f9      	ldr	r1, [r7, #12]
 800d79c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d79e:	fb01 f303 	mul.w	r3, r1, r3
 800d7a2:	441a      	add	r2, r3
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	68f9      	ldr	r1, [r7, #12]
 800d7c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7c4:	fb01 f303 	mul.w	r3, r1, r3
 800d7c8:	441a      	add	r2, r3
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	22ff      	movs	r2, #255	; 0xff
 800d7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	22ff      	movs	r2, #255	; 0xff
 800d7da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d114      	bne.n	800d80e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d01a      	beq.n	800d822 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	3310      	adds	r3, #16
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f001 f90b 	bl	800ea0c <xTaskRemoveFromEventList>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d012      	beq.n	800d822 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d7fc:	4b0c      	ldr	r3, [pc, #48]	; (800d830 <xQueueGenericReset+0xcc>)
 800d7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d802:	601a      	str	r2, [r3, #0]
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	e009      	b.n	800d822 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3310      	adds	r3, #16
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff fef2 	bl	800d5fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	3324      	adds	r3, #36	; 0x24
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7ff feed 	bl	800d5fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d822:	f002 f83f 	bl	800f8a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d826:	2301      	movs	r3, #1
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08e      	sub	sp, #56	; 0x38
 800d838:	af02      	add	r7, sp, #8
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10a      	bne.n	800d85e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d85a:	bf00      	nop
 800d85c:	e7fe      	b.n	800d85c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d002      	beq.n	800d886 <xQueueGenericCreateStatic+0x52>
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d001      	beq.n	800d88a <xQueueGenericCreateStatic+0x56>
 800d886:	2301      	movs	r3, #1
 800d888:	e000      	b.n	800d88c <xQueueGenericCreateStatic+0x58>
 800d88a:	2300      	movs	r3, #0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d894:	f383 8811 	msr	BASEPRI, r3
 800d898:	f3bf 8f6f 	isb	sy
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	623b      	str	r3, [r7, #32]
}
 800d8a2:	bf00      	nop
 800d8a4:	e7fe      	b.n	800d8a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d102      	bne.n	800d8b2 <xQueueGenericCreateStatic+0x7e>
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d101      	bne.n	800d8b6 <xQueueGenericCreateStatic+0x82>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e000      	b.n	800d8b8 <xQueueGenericCreateStatic+0x84>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10a      	bne.n	800d8d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c0:	f383 8811 	msr	BASEPRI, r3
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	61fb      	str	r3, [r7, #28]
}
 800d8ce:	bf00      	nop
 800d8d0:	e7fe      	b.n	800d8d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d8d2:	2350      	movs	r3, #80	; 0x50
 800d8d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b50      	cmp	r3, #80	; 0x50
 800d8da:	d00a      	beq.n	800d8f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	61bb      	str	r3, [r7, #24]
}
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d8f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00d      	beq.n	800d91a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d900:	2201      	movs	r2, #1
 800d902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d906:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	4613      	mov	r3, r2
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	68b9      	ldr	r1, [r7, #8]
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f000 f805 	bl	800d924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3730      	adds	r7, #48	; 0x30
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	607a      	str	r2, [r7, #4]
 800d930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d103      	bne.n	800d940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	69ba      	ldr	r2, [r7, #24]
 800d93c:	601a      	str	r2, [r3, #0]
 800d93e:	e002      	b.n	800d946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d952:	2101      	movs	r1, #1
 800d954:	69b8      	ldr	r0, [r7, #24]
 800d956:	f7ff ff05 	bl	800d764 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	78fa      	ldrb	r2, [r7, #3]
 800d95e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d962:	bf00      	nop
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
	...

0800d96c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08e      	sub	sp, #56	; 0x38
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
 800d978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d97a:	2300      	movs	r3, #0
 800d97c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d984:	2b00      	cmp	r3, #0
 800d986:	d10a      	bne.n	800d99e <xQueueGenericSend+0x32>
	__asm volatile
 800d988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98c:	f383 8811 	msr	BASEPRI, r3
 800d990:	f3bf 8f6f 	isb	sy
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d99a:	bf00      	nop
 800d99c:	e7fe      	b.n	800d99c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d103      	bne.n	800d9ac <xQueueGenericSend+0x40>
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <xQueueGenericSend+0x44>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e000      	b.n	800d9b2 <xQueueGenericSend+0x46>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10a      	bne.n	800d9cc <xQueueGenericSend+0x60>
	__asm volatile
 800d9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ba:	f383 8811 	msr	BASEPRI, r3
 800d9be:	f3bf 8f6f 	isb	sy
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9c8:	bf00      	nop
 800d9ca:	e7fe      	b.n	800d9ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d103      	bne.n	800d9da <xQueueGenericSend+0x6e>
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d101      	bne.n	800d9de <xQueueGenericSend+0x72>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e000      	b.n	800d9e0 <xQueueGenericSend+0x74>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10a      	bne.n	800d9fa <xQueueGenericSend+0x8e>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	623b      	str	r3, [r7, #32]
}
 800d9f6:	bf00      	nop
 800d9f8:	e7fe      	b.n	800d9f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9fa:	f001 f9c5 	bl	800ed88 <xTaskGetSchedulerState>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d102      	bne.n	800da0a <xQueueGenericSend+0x9e>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <xQueueGenericSend+0xa2>
 800da0a:	2301      	movs	r3, #1
 800da0c:	e000      	b.n	800da10 <xQueueGenericSend+0xa4>
 800da0e:	2300      	movs	r3, #0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10a      	bne.n	800da2a <xQueueGenericSend+0xbe>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	61fb      	str	r3, [r7, #28]
}
 800da26:	bf00      	nop
 800da28:	e7fe      	b.n	800da28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da2a:	f001 ff0b 	bl	800f844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da36:	429a      	cmp	r2, r3
 800da38:	d302      	bcc.n	800da40 <xQueueGenericSend+0xd4>
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d129      	bne.n	800da94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da40:	683a      	ldr	r2, [r7, #0]
 800da42:	68b9      	ldr	r1, [r7, #8]
 800da44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da46:	f000 fa0b 	bl	800de60 <prvCopyDataToQueue>
 800da4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da50:	2b00      	cmp	r3, #0
 800da52:	d010      	beq.n	800da76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da56:	3324      	adds	r3, #36	; 0x24
 800da58:	4618      	mov	r0, r3
 800da5a:	f000 ffd7 	bl	800ea0c <xTaskRemoveFromEventList>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d013      	beq.n	800da8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800da64:	4b3f      	ldr	r3, [pc, #252]	; (800db64 <xQueueGenericSend+0x1f8>)
 800da66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da6a:	601a      	str	r2, [r3, #0]
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	e00a      	b.n	800da8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d007      	beq.n	800da8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da7c:	4b39      	ldr	r3, [pc, #228]	; (800db64 <xQueueGenericSend+0x1f8>)
 800da7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da82:	601a      	str	r2, [r3, #0]
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da8c:	f001 ff0a 	bl	800f8a4 <vPortExitCritical>
				return pdPASS;
 800da90:	2301      	movs	r3, #1
 800da92:	e063      	b.n	800db5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d103      	bne.n	800daa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da9a:	f001 ff03 	bl	800f8a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	e05c      	b.n	800db5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800daa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d106      	bne.n	800dab6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800daa8:	f107 0314 	add.w	r3, r7, #20
 800daac:	4618      	mov	r0, r3
 800daae:	f001 f811 	bl	800ead4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dab2:	2301      	movs	r3, #1
 800dab4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dab6:	f001 fef5 	bl	800f8a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800daba:	f000 fd7b 	bl	800e5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dabe:	f001 fec1 	bl	800f844 <vPortEnterCritical>
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dac8:	b25b      	sxtb	r3, r3
 800daca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dace:	d103      	bne.n	800dad8 <xQueueGenericSend+0x16c>
 800dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dade:	b25b      	sxtb	r3, r3
 800dae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dae4:	d103      	bne.n	800daee <xQueueGenericSend+0x182>
 800dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae8:	2200      	movs	r2, #0
 800daea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800daee:	f001 fed9 	bl	800f8a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800daf2:	1d3a      	adds	r2, r7, #4
 800daf4:	f107 0314 	add.w	r3, r7, #20
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f001 f800 	bl	800eb00 <xTaskCheckForTimeOut>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d124      	bne.n	800db50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800db06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db08:	f000 faa2 	bl	800e050 <prvIsQueueFull>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d018      	beq.n	800db44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db14:	3310      	adds	r3, #16
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	4611      	mov	r1, r2
 800db1a:	4618      	mov	r0, r3
 800db1c:	f000 ff26 	bl	800e96c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800db20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db22:	f000 fa2d 	bl	800df80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800db26:	f000 fd53 	bl	800e5d0 <xTaskResumeAll>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f47f af7c 	bne.w	800da2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800db32:	4b0c      	ldr	r3, [pc, #48]	; (800db64 <xQueueGenericSend+0x1f8>)
 800db34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	f3bf 8f4f 	dsb	sy
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	e772      	b.n	800da2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db46:	f000 fa1b 	bl	800df80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db4a:	f000 fd41 	bl	800e5d0 <xTaskResumeAll>
 800db4e:	e76c      	b.n	800da2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800db50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db52:	f000 fa15 	bl	800df80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db56:	f000 fd3b 	bl	800e5d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800db5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3738      	adds	r7, #56	; 0x38
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	e000ed04 	.word	0xe000ed04

0800db68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b090      	sub	sp, #64	; 0x40
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800db7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d10a      	bne.n	800db96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800db80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db92:	bf00      	nop
 800db94:	e7fe      	b.n	800db94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d103      	bne.n	800dba4 <xQueueGenericSendFromISR+0x3c>
 800db9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <xQueueGenericSendFromISR+0x40>
 800dba4:	2301      	movs	r3, #1
 800dba6:	e000      	b.n	800dbaa <xQueueGenericSendFromISR+0x42>
 800dba8:	2300      	movs	r3, #0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10a      	bne.n	800dbc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	d103      	bne.n	800dbd2 <xQueueGenericSendFromISR+0x6a>
 800dbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d101      	bne.n	800dbd6 <xQueueGenericSendFromISR+0x6e>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e000      	b.n	800dbd8 <xQueueGenericSendFromISR+0x70>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10a      	bne.n	800dbf2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe0:	f383 8811 	msr	BASEPRI, r3
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	623b      	str	r3, [r7, #32]
}
 800dbee:	bf00      	nop
 800dbf0:	e7fe      	b.n	800dbf0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbf2:	f001 ff09 	bl	800fa08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dbf6:	f3ef 8211 	mrs	r2, BASEPRI
 800dbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	61fa      	str	r2, [r7, #28]
 800dc0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dc0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d302      	bcc.n	800dc24 <xQueueGenericSendFromISR+0xbc>
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d12f      	bne.n	800dc84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc34:	683a      	ldr	r2, [r7, #0]
 800dc36:	68b9      	ldr	r1, [r7, #8]
 800dc38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dc3a:	f000 f911 	bl	800de60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dc3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dc42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc46:	d112      	bne.n	800dc6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d016      	beq.n	800dc7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc52:	3324      	adds	r3, #36	; 0x24
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fed9 	bl	800ea0c <xTaskRemoveFromEventList>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d00e      	beq.n	800dc7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00b      	beq.n	800dc7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	e007      	b.n	800dc7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dc6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc72:	3301      	adds	r3, #1
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	b25a      	sxtb	r2, r3
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dc82:	e001      	b.n	800dc88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc84:	2300      	movs	r3, #0
 800dc86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3740      	adds	r7, #64	; 0x40
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
	...

0800dca0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b08c      	sub	sp, #48	; 0x30
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dcac:	2300      	movs	r3, #0
 800dcae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d10a      	bne.n	800dcd0 <xQueueReceive+0x30>
	__asm volatile
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	623b      	str	r3, [r7, #32]
}
 800dccc:	bf00      	nop
 800dcce:	e7fe      	b.n	800dcce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d103      	bne.n	800dcde <xQueueReceive+0x3e>
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d101      	bne.n	800dce2 <xQueueReceive+0x42>
 800dcde:	2301      	movs	r3, #1
 800dce0:	e000      	b.n	800dce4 <xQueueReceive+0x44>
 800dce2:	2300      	movs	r3, #0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10a      	bne.n	800dcfe <xQueueReceive+0x5e>
	__asm volatile
 800dce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	61fb      	str	r3, [r7, #28]
}
 800dcfa:	bf00      	nop
 800dcfc:	e7fe      	b.n	800dcfc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dcfe:	f001 f843 	bl	800ed88 <xTaskGetSchedulerState>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d102      	bne.n	800dd0e <xQueueReceive+0x6e>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d101      	bne.n	800dd12 <xQueueReceive+0x72>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e000      	b.n	800dd14 <xQueueReceive+0x74>
 800dd12:	2300      	movs	r3, #0
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d10a      	bne.n	800dd2e <xQueueReceive+0x8e>
	__asm volatile
 800dd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1c:	f383 8811 	msr	BASEPRI, r3
 800dd20:	f3bf 8f6f 	isb	sy
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	61bb      	str	r3, [r7, #24]
}
 800dd2a:	bf00      	nop
 800dd2c:	e7fe      	b.n	800dd2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd2e:	f001 fd89 	bl	800f844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d01f      	beq.n	800dd7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd3e:	68b9      	ldr	r1, [r7, #8]
 800dd40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd42:	f000 f8f7 	bl	800df34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd48:	1e5a      	subs	r2, r3, #1
 800dd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d00f      	beq.n	800dd76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd58:	3310      	adds	r3, #16
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 fe56 	bl	800ea0c <xTaskRemoveFromEventList>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d007      	beq.n	800dd76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd66:	4b3d      	ldr	r3, [pc, #244]	; (800de5c <xQueueReceive+0x1bc>)
 800dd68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd6c:	601a      	str	r2, [r3, #0]
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd76:	f001 fd95 	bl	800f8a4 <vPortExitCritical>
				return pdPASS;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e069      	b.n	800de52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d103      	bne.n	800dd8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd84:	f001 fd8e 	bl	800f8a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	e062      	b.n	800de52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd92:	f107 0310 	add.w	r3, r7, #16
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 fe9c 	bl	800ead4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dda0:	f001 fd80 	bl	800f8a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dda4:	f000 fc06 	bl	800e5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dda8:	f001 fd4c 	bl	800f844 <vPortEnterCritical>
 800ddac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddb2:	b25b      	sxtb	r3, r3
 800ddb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddb8:	d103      	bne.n	800ddc2 <xQueueReceive+0x122>
 800ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddc8:	b25b      	sxtb	r3, r3
 800ddca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddce:	d103      	bne.n	800ddd8 <xQueueReceive+0x138>
 800ddd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddd8:	f001 fd64 	bl	800f8a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dddc:	1d3a      	adds	r2, r7, #4
 800ddde:	f107 0310 	add.w	r3, r7, #16
 800dde2:	4611      	mov	r1, r2
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 fe8b 	bl	800eb00 <xTaskCheckForTimeOut>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d123      	bne.n	800de38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddf2:	f000 f917 	bl	800e024 <prvIsQueueEmpty>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d017      	beq.n	800de2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	3324      	adds	r3, #36	; 0x24
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	4611      	mov	r1, r2
 800de04:	4618      	mov	r0, r3
 800de06:	f000 fdb1 	bl	800e96c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de0c:	f000 f8b8 	bl	800df80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de10:	f000 fbde 	bl	800e5d0 <xTaskResumeAll>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d189      	bne.n	800dd2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800de1a:	4b10      	ldr	r3, [pc, #64]	; (800de5c <xQueueReceive+0x1bc>)
 800de1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de20:	601a      	str	r2, [r3, #0]
 800de22:	f3bf 8f4f 	dsb	sy
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	e780      	b.n	800dd2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800de2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de2e:	f000 f8a7 	bl	800df80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de32:	f000 fbcd 	bl	800e5d0 <xTaskResumeAll>
 800de36:	e77a      	b.n	800dd2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800de38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de3a:	f000 f8a1 	bl	800df80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de3e:	f000 fbc7 	bl	800e5d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de44:	f000 f8ee 	bl	800e024 <prvIsQueueEmpty>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f43f af6f 	beq.w	800dd2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de52:	4618      	mov	r0, r3
 800de54:	3730      	adds	r7, #48	; 0x30
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	e000ed04 	.word	0xe000ed04

0800de60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de6c:	2300      	movs	r3, #0
 800de6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10d      	bne.n	800de9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d14d      	bne.n	800df22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 ff9a 	bl	800edc4 <xTaskPriorityDisinherit>
 800de90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	609a      	str	r2, [r3, #8]
 800de98:	e043      	b.n	800df22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d119      	bne.n	800ded4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6858      	ldr	r0, [r3, #4]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea8:	461a      	mov	r2, r3
 800deaa:	68b9      	ldr	r1, [r7, #8]
 800deac:	f001 fffa 	bl	800fea4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb8:	441a      	add	r2, r3
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	685a      	ldr	r2, [r3, #4]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d32b      	bcc.n	800df22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	605a      	str	r2, [r3, #4]
 800ded2:	e026      	b.n	800df22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	68d8      	ldr	r0, [r3, #12]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dedc:	461a      	mov	r2, r3
 800dede:	68b9      	ldr	r1, [r7, #8]
 800dee0:	f001 ffe0 	bl	800fea4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	68da      	ldr	r2, [r3, #12]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deec:	425b      	negs	r3, r3
 800deee:	441a      	add	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68da      	ldr	r2, [r3, #12]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	429a      	cmp	r2, r3
 800defe:	d207      	bcs.n	800df10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	689a      	ldr	r2, [r3, #8]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df08:	425b      	negs	r3, r3
 800df0a:	441a      	add	r2, r3
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b02      	cmp	r3, #2
 800df14:	d105      	bne.n	800df22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	3b01      	subs	r3, #1
 800df20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	1c5a      	adds	r2, r3, #1
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800df2a:	697b      	ldr	r3, [r7, #20]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3718      	adds	r7, #24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df42:	2b00      	cmp	r3, #0
 800df44:	d018      	beq.n	800df78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68da      	ldr	r2, [r3, #12]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df4e:	441a      	add	r2, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	68da      	ldr	r2, [r3, #12]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d303      	bcc.n	800df68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	68d9      	ldr	r1, [r3, #12]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df70:	461a      	mov	r2, r3
 800df72:	6838      	ldr	r0, [r7, #0]
 800df74:	f001 ff96 	bl	800fea4 <memcpy>
	}
}
 800df78:	bf00      	nop
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b084      	sub	sp, #16
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800df88:	f001 fc5c 	bl	800f844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df94:	e011      	b.n	800dfba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d012      	beq.n	800dfc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3324      	adds	r3, #36	; 0x24
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f000 fd32 	bl	800ea0c <xTaskRemoveFromEventList>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dfae:	f000 fe09 	bl	800ebc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	dce9      	bgt.n	800df96 <prvUnlockQueue+0x16>
 800dfc2:	e000      	b.n	800dfc6 <prvUnlockQueue+0x46>
					break;
 800dfc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	22ff      	movs	r2, #255	; 0xff
 800dfca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dfce:	f001 fc69 	bl	800f8a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dfd2:	f001 fc37 	bl	800f844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dfde:	e011      	b.n	800e004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d012      	beq.n	800e00e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	3310      	adds	r3, #16
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 fd0d 	bl	800ea0c <xTaskRemoveFromEventList>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dff8:	f000 fde4 	bl	800ebc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dffc:	7bbb      	ldrb	r3, [r7, #14]
 800dffe:	3b01      	subs	r3, #1
 800e000:	b2db      	uxtb	r3, r3
 800e002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	dce9      	bgt.n	800dfe0 <prvUnlockQueue+0x60>
 800e00c:	e000      	b.n	800e010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e00e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	22ff      	movs	r2, #255	; 0xff
 800e014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e018:	f001 fc44 	bl	800f8a4 <vPortExitCritical>
}
 800e01c:	bf00      	nop
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e02c:	f001 fc0a 	bl	800f844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e034:	2b00      	cmp	r3, #0
 800e036:	d102      	bne.n	800e03e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e038:	2301      	movs	r3, #1
 800e03a:	60fb      	str	r3, [r7, #12]
 800e03c:	e001      	b.n	800e042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e03e:	2300      	movs	r3, #0
 800e040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e042:	f001 fc2f 	bl	800f8a4 <vPortExitCritical>

	return xReturn;
 800e046:	68fb      	ldr	r3, [r7, #12]
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e058:	f001 fbf4 	bl	800f844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e064:	429a      	cmp	r2, r3
 800e066:	d102      	bne.n	800e06e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e068:	2301      	movs	r3, #1
 800e06a:	60fb      	str	r3, [r7, #12]
 800e06c:	e001      	b.n	800e072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e06e:	2300      	movs	r3, #0
 800e070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e072:	f001 fc17 	bl	800f8a4 <vPortExitCritical>

	return xReturn;
 800e076:	68fb      	ldr	r3, [r7, #12]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e080:	b480      	push	{r7}
 800e082:	b085      	sub	sp, #20
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e08a:	2300      	movs	r3, #0
 800e08c:	60fb      	str	r3, [r7, #12]
 800e08e:	e014      	b.n	800e0ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e090:	4a0f      	ldr	r2, [pc, #60]	; (800e0d0 <vQueueAddToRegistry+0x50>)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10b      	bne.n	800e0b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e09c:	490c      	ldr	r1, [pc, #48]	; (800e0d0 <vQueueAddToRegistry+0x50>)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	683a      	ldr	r2, [r7, #0]
 800e0a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e0a6:	4a0a      	ldr	r2, [pc, #40]	; (800e0d0 <vQueueAddToRegistry+0x50>)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	00db      	lsls	r3, r3, #3
 800e0ac:	4413      	add	r3, r2
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e0b2:	e006      	b.n	800e0c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	60fb      	str	r3, [r7, #12]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2b07      	cmp	r3, #7
 800e0be:	d9e7      	bls.n	800e090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e0c0:	bf00      	nop
 800e0c2:	bf00      	nop
 800e0c4:	3714      	adds	r7, #20
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	24000d20 	.word	0x24000d20

0800e0d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e0e4:	f001 fbae 	bl	800f844 <vPortEnterCritical>
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e0ee:	b25b      	sxtb	r3, r3
 800e0f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0f4:	d103      	bne.n	800e0fe <vQueueWaitForMessageRestricted+0x2a>
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e104:	b25b      	sxtb	r3, r3
 800e106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e10a:	d103      	bne.n	800e114 <vQueueWaitForMessageRestricted+0x40>
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e114:	f001 fbc6 	bl	800f8a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d106      	bne.n	800e12e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	3324      	adds	r3, #36	; 0x24
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	68b9      	ldr	r1, [r7, #8]
 800e128:	4618      	mov	r0, r3
 800e12a:	f000 fc43 	bl	800e9b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e12e:	6978      	ldr	r0, [r7, #20]
 800e130:	f7ff ff26 	bl	800df80 <prvUnlockQueue>
	}
 800e134:	bf00      	nop
 800e136:	3718      	adds	r7, #24
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b08e      	sub	sp, #56	; 0x38
 800e140:	af04      	add	r7, sp, #16
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d10a      	bne.n	800e166 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	623b      	str	r3, [r7, #32]
}
 800e162:	bf00      	nop
 800e164:	e7fe      	b.n	800e164 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10a      	bne.n	800e182 <xTaskCreateStatic+0x46>
	__asm volatile
 800e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	61fb      	str	r3, [r7, #28]
}
 800e17e:	bf00      	nop
 800e180:	e7fe      	b.n	800e180 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e182:	235c      	movs	r3, #92	; 0x5c
 800e184:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	2b5c      	cmp	r3, #92	; 0x5c
 800e18a:	d00a      	beq.n	800e1a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800e18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e190:	f383 8811 	msr	BASEPRI, r3
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	61bb      	str	r3, [r7, #24]
}
 800e19e:	bf00      	nop
 800e1a0:	e7fe      	b.n	800e1a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e1a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d01e      	beq.n	800e1e8 <xTaskCreateStatic+0xac>
 800e1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d01b      	beq.n	800e1e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1bc:	2202      	movs	r2, #2
 800e1be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	9303      	str	r3, [sp, #12]
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	9302      	str	r3, [sp, #8]
 800e1ca:	f107 0314 	add.w	r3, r7, #20
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	68b9      	ldr	r1, [r7, #8]
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 f850 	bl	800e280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1e2:	f000 f8dd 	bl	800e3a0 <prvAddNewTaskToReadyList>
 800e1e6:	e001      	b.n	800e1ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e1ec:	697b      	ldr	r3, [r7, #20]
	}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3728      	adds	r7, #40	; 0x28
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b08c      	sub	sp, #48	; 0x30
 800e1fa:	af04      	add	r7, sp, #16
 800e1fc:	60f8      	str	r0, [r7, #12]
 800e1fe:	60b9      	str	r1, [r7, #8]
 800e200:	603b      	str	r3, [r7, #0]
 800e202:	4613      	mov	r3, r2
 800e204:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e206:	88fb      	ldrh	r3, [r7, #6]
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4618      	mov	r0, r3
 800e20c:	f001 fc3c 	bl	800fa88 <pvPortMalloc>
 800e210:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00e      	beq.n	800e236 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e218:	205c      	movs	r0, #92	; 0x5c
 800e21a:	f001 fc35 	bl	800fa88 <pvPortMalloc>
 800e21e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	697a      	ldr	r2, [r7, #20]
 800e22a:	631a      	str	r2, [r3, #48]	; 0x30
 800e22c:	e005      	b.n	800e23a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e22e:	6978      	ldr	r0, [r7, #20]
 800e230:	f001 fcf6 	bl	800fc20 <vPortFree>
 800e234:	e001      	b.n	800e23a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e236:	2300      	movs	r3, #0
 800e238:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d017      	beq.n	800e270 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e248:	88fa      	ldrh	r2, [r7, #6]
 800e24a:	2300      	movs	r3, #0
 800e24c:	9303      	str	r3, [sp, #12]
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	9302      	str	r3, [sp, #8]
 800e252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	68b9      	ldr	r1, [r7, #8]
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f000 f80e 	bl	800e280 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e264:	69f8      	ldr	r0, [r7, #28]
 800e266:	f000 f89b 	bl	800e3a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e26a:	2301      	movs	r3, #1
 800e26c:	61bb      	str	r3, [r7, #24]
 800e26e:	e002      	b.n	800e276 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e274:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e276:	69bb      	ldr	r3, [r7, #24]
	}
 800e278:	4618      	mov	r0, r3
 800e27a:	3720      	adds	r7, #32
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e290:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	461a      	mov	r2, r3
 800e298:	21a5      	movs	r1, #165	; 0xa5
 800e29a:	f001 fe11 	bl	800fec0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2a2:	6879      	ldr	r1, [r7, #4]
 800e2a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e2a8:	440b      	add	r3, r1
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4413      	add	r3, r2
 800e2ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	f023 0307 	bic.w	r3, r3, #7
 800e2b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	f003 0307 	and.w	r3, r3, #7
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00a      	beq.n	800e2d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c6:	f383 8811 	msr	BASEPRI, r3
 800e2ca:	f3bf 8f6f 	isb	sy
 800e2ce:	f3bf 8f4f 	dsb	sy
 800e2d2:	617b      	str	r3, [r7, #20]
}
 800e2d4:	bf00      	nop
 800e2d6:	e7fe      	b.n	800e2d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d01f      	beq.n	800e31e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2de:	2300      	movs	r3, #0
 800e2e0:	61fb      	str	r3, [r7, #28]
 800e2e2:	e012      	b.n	800e30a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	7819      	ldrb	r1, [r3, #0]
 800e2ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2ee:	69fb      	ldr	r3, [r7, #28]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	3334      	adds	r3, #52	; 0x34
 800e2f4:	460a      	mov	r2, r1
 800e2f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d006      	beq.n	800e312 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	3301      	adds	r3, #1
 800e308:	61fb      	str	r3, [r7, #28]
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	2b0f      	cmp	r3, #15
 800e30e:	d9e9      	bls.n	800e2e4 <prvInitialiseNewTask+0x64>
 800e310:	e000      	b.n	800e314 <prvInitialiseNewTask+0x94>
			{
				break;
 800e312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e316:	2200      	movs	r2, #0
 800e318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e31c:	e003      	b.n	800e326 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e320:	2200      	movs	r2, #0
 800e322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e328:	2b37      	cmp	r3, #55	; 0x37
 800e32a:	d901      	bls.n	800e330 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e32c:	2337      	movs	r3, #55	; 0x37
 800e32e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e33a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	2200      	movs	r2, #0
 800e340:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	3304      	adds	r3, #4
 800e346:	4618      	mov	r0, r3
 800e348:	f7ff f978 	bl	800d63c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34e:	3318      	adds	r3, #24
 800e350:	4618      	mov	r0, r3
 800e352:	f7ff f973 	bl	800d63c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e35a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e36a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36e:	2200      	movs	r2, #0
 800e370:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	2200      	movs	r2, #0
 800e376:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e37a:	683a      	ldr	r2, [r7, #0]
 800e37c:	68f9      	ldr	r1, [r7, #12]
 800e37e:	69b8      	ldr	r0, [r7, #24]
 800e380:	f001 f930 	bl	800f5e4 <pxPortInitialiseStack>
 800e384:	4602      	mov	r2, r0
 800e386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e388:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d002      	beq.n	800e396 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e396:	bf00      	nop
 800e398:	3720      	adds	r7, #32
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e3a8:	f001 fa4c 	bl	800f844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e3ac:	4b2d      	ldr	r3, [pc, #180]	; (800e464 <prvAddNewTaskToReadyList+0xc4>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	4a2c      	ldr	r2, [pc, #176]	; (800e464 <prvAddNewTaskToReadyList+0xc4>)
 800e3b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e3b6:	4b2c      	ldr	r3, [pc, #176]	; (800e468 <prvAddNewTaskToReadyList+0xc8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d109      	bne.n	800e3d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e3be:	4a2a      	ldr	r2, [pc, #168]	; (800e468 <prvAddNewTaskToReadyList+0xc8>)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e3c4:	4b27      	ldr	r3, [pc, #156]	; (800e464 <prvAddNewTaskToReadyList+0xc4>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d110      	bne.n	800e3ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e3cc:	f000 fc1e 	bl	800ec0c <prvInitialiseTaskLists>
 800e3d0:	e00d      	b.n	800e3ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e3d2:	4b26      	ldr	r3, [pc, #152]	; (800e46c <prvAddNewTaskToReadyList+0xcc>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d109      	bne.n	800e3ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3da:	4b23      	ldr	r3, [pc, #140]	; (800e468 <prvAddNewTaskToReadyList+0xc8>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d802      	bhi.n	800e3ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e3e8:	4a1f      	ldr	r2, [pc, #124]	; (800e468 <prvAddNewTaskToReadyList+0xc8>)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e3ee:	4b20      	ldr	r3, [pc, #128]	; (800e470 <prvAddNewTaskToReadyList+0xd0>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	4a1e      	ldr	r2, [pc, #120]	; (800e470 <prvAddNewTaskToReadyList+0xd0>)
 800e3f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e3f8:	4b1d      	ldr	r3, [pc, #116]	; (800e470 <prvAddNewTaskToReadyList+0xd0>)
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e404:	4b1b      	ldr	r3, [pc, #108]	; (800e474 <prvAddNewTaskToReadyList+0xd4>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d903      	bls.n	800e414 <prvAddNewTaskToReadyList+0x74>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e410:	4a18      	ldr	r2, [pc, #96]	; (800e474 <prvAddNewTaskToReadyList+0xd4>)
 800e412:	6013      	str	r3, [r2, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e418:	4613      	mov	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4413      	add	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4a15      	ldr	r2, [pc, #84]	; (800e478 <prvAddNewTaskToReadyList+0xd8>)
 800e422:	441a      	add	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	3304      	adds	r3, #4
 800e428:	4619      	mov	r1, r3
 800e42a:	4610      	mov	r0, r2
 800e42c:	f7ff f913 	bl	800d656 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e430:	f001 fa38 	bl	800f8a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e434:	4b0d      	ldr	r3, [pc, #52]	; (800e46c <prvAddNewTaskToReadyList+0xcc>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00e      	beq.n	800e45a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e43c:	4b0a      	ldr	r3, [pc, #40]	; (800e468 <prvAddNewTaskToReadyList+0xc8>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e446:	429a      	cmp	r2, r3
 800e448:	d207      	bcs.n	800e45a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e44a:	4b0c      	ldr	r3, [pc, #48]	; (800e47c <prvAddNewTaskToReadyList+0xdc>)
 800e44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e450:	601a      	str	r2, [r3, #0]
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e45a:	bf00      	nop
 800e45c:	3708      	adds	r7, #8
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	24001234 	.word	0x24001234
 800e468:	24000d60 	.word	0x24000d60
 800e46c:	24001240 	.word	0x24001240
 800e470:	24001250 	.word	0x24001250
 800e474:	2400123c 	.word	0x2400123c
 800e478:	24000d64 	.word	0x24000d64
 800e47c:	e000ed04 	.word	0xe000ed04

0800e480 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e488:	2300      	movs	r3, #0
 800e48a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d017      	beq.n	800e4c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e492:	4b13      	ldr	r3, [pc, #76]	; (800e4e0 <vTaskDelay+0x60>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d00a      	beq.n	800e4b0 <vTaskDelay+0x30>
	__asm volatile
 800e49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	60bb      	str	r3, [r7, #8]
}
 800e4ac:	bf00      	nop
 800e4ae:	e7fe      	b.n	800e4ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e4b0:	f000 f880 	bl	800e5b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 fcf2 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e4bc:	f000 f888 	bl	800e5d0 <xTaskResumeAll>
 800e4c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d107      	bne.n	800e4d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e4c8:	4b06      	ldr	r3, [pc, #24]	; (800e4e4 <vTaskDelay+0x64>)
 800e4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ce:	601a      	str	r2, [r3, #0]
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4d8:	bf00      	nop
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	2400125c 	.word	0x2400125c
 800e4e4:	e000ed04 	.word	0xe000ed04

0800e4e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b08a      	sub	sp, #40	; 0x28
 800e4ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e4f6:	463a      	mov	r2, r7
 800e4f8:	1d39      	adds	r1, r7, #4
 800e4fa:	f107 0308 	add.w	r3, r7, #8
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7ff f848 	bl	800d594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	68ba      	ldr	r2, [r7, #8]
 800e50a:	9202      	str	r2, [sp, #8]
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	2300      	movs	r3, #0
 800e510:	9300      	str	r3, [sp, #0]
 800e512:	2300      	movs	r3, #0
 800e514:	460a      	mov	r2, r1
 800e516:	4921      	ldr	r1, [pc, #132]	; (800e59c <vTaskStartScheduler+0xb4>)
 800e518:	4821      	ldr	r0, [pc, #132]	; (800e5a0 <vTaskStartScheduler+0xb8>)
 800e51a:	f7ff fe0f 	bl	800e13c <xTaskCreateStatic>
 800e51e:	4603      	mov	r3, r0
 800e520:	4a20      	ldr	r2, [pc, #128]	; (800e5a4 <vTaskStartScheduler+0xbc>)
 800e522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e524:	4b1f      	ldr	r3, [pc, #124]	; (800e5a4 <vTaskStartScheduler+0xbc>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d002      	beq.n	800e532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e52c:	2301      	movs	r3, #1
 800e52e:	617b      	str	r3, [r7, #20]
 800e530:	e001      	b.n	800e536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e532:	2300      	movs	r3, #0
 800e534:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d102      	bne.n	800e542 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e53c:	f000 fd04 	bl	800ef48 <xTimerCreateTimerTask>
 800e540:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	2b01      	cmp	r3, #1
 800e546:	d116      	bne.n	800e576 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54c:	f383 8811 	msr	BASEPRI, r3
 800e550:	f3bf 8f6f 	isb	sy
 800e554:	f3bf 8f4f 	dsb	sy
 800e558:	613b      	str	r3, [r7, #16]
}
 800e55a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e55c:	4b12      	ldr	r3, [pc, #72]	; (800e5a8 <vTaskStartScheduler+0xc0>)
 800e55e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e562:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e564:	4b11      	ldr	r3, [pc, #68]	; (800e5ac <vTaskStartScheduler+0xc4>)
 800e566:	2201      	movs	r2, #1
 800e568:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e56a:	4b11      	ldr	r3, [pc, #68]	; (800e5b0 <vTaskStartScheduler+0xc8>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e570:	f001 f8c6 	bl	800f700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e574:	e00e      	b.n	800e594 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e57c:	d10a      	bne.n	800e594 <vTaskStartScheduler+0xac>
	__asm volatile
 800e57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e582:	f383 8811 	msr	BASEPRI, r3
 800e586:	f3bf 8f6f 	isb	sy
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	60fb      	str	r3, [r7, #12]
}
 800e590:	bf00      	nop
 800e592:	e7fe      	b.n	800e592 <vTaskStartScheduler+0xaa>
}
 800e594:	bf00      	nop
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	0800ff70 	.word	0x0800ff70
 800e5a0:	0800ebdd 	.word	0x0800ebdd
 800e5a4:	24001258 	.word	0x24001258
 800e5a8:	24001254 	.word	0x24001254
 800e5ac:	24001240 	.word	0x24001240
 800e5b0:	24001238 	.word	0x24001238

0800e5b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e5b8:	4b04      	ldr	r3, [pc, #16]	; (800e5cc <vTaskSuspendAll+0x18>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	4a03      	ldr	r2, [pc, #12]	; (800e5cc <vTaskSuspendAll+0x18>)
 800e5c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e5c2:	bf00      	nop
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr
 800e5cc:	2400125c 	.word	0x2400125c

0800e5d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e5de:	4b42      	ldr	r3, [pc, #264]	; (800e6e8 <xTaskResumeAll+0x118>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10a      	bne.n	800e5fc <xTaskResumeAll+0x2c>
	__asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	603b      	str	r3, [r7, #0]
}
 800e5f8:	bf00      	nop
 800e5fa:	e7fe      	b.n	800e5fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e5fc:	f001 f922 	bl	800f844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e600:	4b39      	ldr	r3, [pc, #228]	; (800e6e8 <xTaskResumeAll+0x118>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3b01      	subs	r3, #1
 800e606:	4a38      	ldr	r2, [pc, #224]	; (800e6e8 <xTaskResumeAll+0x118>)
 800e608:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e60a:	4b37      	ldr	r3, [pc, #220]	; (800e6e8 <xTaskResumeAll+0x118>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d162      	bne.n	800e6d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e612:	4b36      	ldr	r3, [pc, #216]	; (800e6ec <xTaskResumeAll+0x11c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d05e      	beq.n	800e6d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e61a:	e02f      	b.n	800e67c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e61c:	4b34      	ldr	r3, [pc, #208]	; (800e6f0 <xTaskResumeAll+0x120>)
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	3318      	adds	r3, #24
 800e628:	4618      	mov	r0, r3
 800e62a:	f7ff f871 	bl	800d710 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3304      	adds	r3, #4
 800e632:	4618      	mov	r0, r3
 800e634:	f7ff f86c 	bl	800d710 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63c:	4b2d      	ldr	r3, [pc, #180]	; (800e6f4 <xTaskResumeAll+0x124>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	429a      	cmp	r2, r3
 800e642:	d903      	bls.n	800e64c <xTaskResumeAll+0x7c>
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e648:	4a2a      	ldr	r2, [pc, #168]	; (800e6f4 <xTaskResumeAll+0x124>)
 800e64a:	6013      	str	r3, [r2, #0]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e650:	4613      	mov	r3, r2
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4413      	add	r3, r2
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4a27      	ldr	r2, [pc, #156]	; (800e6f8 <xTaskResumeAll+0x128>)
 800e65a:	441a      	add	r2, r3
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	3304      	adds	r3, #4
 800e660:	4619      	mov	r1, r3
 800e662:	4610      	mov	r0, r2
 800e664:	f7fe fff7 	bl	800d656 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e66c:	4b23      	ldr	r3, [pc, #140]	; (800e6fc <xTaskResumeAll+0x12c>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e672:	429a      	cmp	r2, r3
 800e674:	d302      	bcc.n	800e67c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e676:	4b22      	ldr	r3, [pc, #136]	; (800e700 <xTaskResumeAll+0x130>)
 800e678:	2201      	movs	r2, #1
 800e67a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e67c:	4b1c      	ldr	r3, [pc, #112]	; (800e6f0 <xTaskResumeAll+0x120>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d1cb      	bne.n	800e61c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e68a:	f000 fb5d 	bl	800ed48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e68e:	4b1d      	ldr	r3, [pc, #116]	; (800e704 <xTaskResumeAll+0x134>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d010      	beq.n	800e6bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e69a:	f000 f847 	bl	800e72c <xTaskIncrementTick>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e6a4:	4b16      	ldr	r3, [pc, #88]	; (800e700 <xTaskResumeAll+0x130>)
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	3b01      	subs	r3, #1
 800e6ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d1f1      	bne.n	800e69a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e6b6:	4b13      	ldr	r3, [pc, #76]	; (800e704 <xTaskResumeAll+0x134>)
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e6bc:	4b10      	ldr	r3, [pc, #64]	; (800e700 <xTaskResumeAll+0x130>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d009      	beq.n	800e6d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e6c8:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <xTaskResumeAll+0x138>)
 800e6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6ce:	601a      	str	r2, [r3, #0]
 800e6d0:	f3bf 8f4f 	dsb	sy
 800e6d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6d8:	f001 f8e4 	bl	800f8a4 <vPortExitCritical>

	return xAlreadyYielded;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	2400125c 	.word	0x2400125c
 800e6ec:	24001234 	.word	0x24001234
 800e6f0:	240011f4 	.word	0x240011f4
 800e6f4:	2400123c 	.word	0x2400123c
 800e6f8:	24000d64 	.word	0x24000d64
 800e6fc:	24000d60 	.word	0x24000d60
 800e700:	24001248 	.word	0x24001248
 800e704:	24001244 	.word	0x24001244
 800e708:	e000ed04 	.word	0xe000ed04

0800e70c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e712:	4b05      	ldr	r3, [pc, #20]	; (800e728 <xTaskGetTickCount+0x1c>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e718:	687b      	ldr	r3, [r7, #4]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	370c      	adds	r7, #12
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	24001238 	.word	0x24001238

0800e72c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e732:	2300      	movs	r3, #0
 800e734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e736:	4b53      	ldr	r3, [pc, #332]	; (800e884 <xTaskIncrementTick+0x158>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	f040 8095 	bne.w	800e86a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e740:	4b51      	ldr	r3, [pc, #324]	; (800e888 <xTaskIncrementTick+0x15c>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	3301      	adds	r3, #1
 800e746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e748:	4a4f      	ldr	r2, [pc, #316]	; (800e888 <xTaskIncrementTick+0x15c>)
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d120      	bne.n	800e796 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e754:	4b4d      	ldr	r3, [pc, #308]	; (800e88c <xTaskIncrementTick+0x160>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00a      	beq.n	800e774 <xTaskIncrementTick+0x48>
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	603b      	str	r3, [r7, #0]
}
 800e770:	bf00      	nop
 800e772:	e7fe      	b.n	800e772 <xTaskIncrementTick+0x46>
 800e774:	4b45      	ldr	r3, [pc, #276]	; (800e88c <xTaskIncrementTick+0x160>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	60fb      	str	r3, [r7, #12]
 800e77a:	4b45      	ldr	r3, [pc, #276]	; (800e890 <xTaskIncrementTick+0x164>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a43      	ldr	r2, [pc, #268]	; (800e88c <xTaskIncrementTick+0x160>)
 800e780:	6013      	str	r3, [r2, #0]
 800e782:	4a43      	ldr	r2, [pc, #268]	; (800e890 <xTaskIncrementTick+0x164>)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6013      	str	r3, [r2, #0]
 800e788:	4b42      	ldr	r3, [pc, #264]	; (800e894 <xTaskIncrementTick+0x168>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3301      	adds	r3, #1
 800e78e:	4a41      	ldr	r2, [pc, #260]	; (800e894 <xTaskIncrementTick+0x168>)
 800e790:	6013      	str	r3, [r2, #0]
 800e792:	f000 fad9 	bl	800ed48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e796:	4b40      	ldr	r3, [pc, #256]	; (800e898 <xTaskIncrementTick+0x16c>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	693a      	ldr	r2, [r7, #16]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d349      	bcc.n	800e834 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7a0:	4b3a      	ldr	r3, [pc, #232]	; (800e88c <xTaskIncrementTick+0x160>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d104      	bne.n	800e7b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7aa:	4b3b      	ldr	r3, [pc, #236]	; (800e898 <xTaskIncrementTick+0x16c>)
 800e7ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7b0:	601a      	str	r2, [r3, #0]
					break;
 800e7b2:	e03f      	b.n	800e834 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7b4:	4b35      	ldr	r3, [pc, #212]	; (800e88c <xTaskIncrementTick+0x160>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d203      	bcs.n	800e7d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7cc:	4a32      	ldr	r2, [pc, #200]	; (800e898 <xTaskIncrementTick+0x16c>)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e7d2:	e02f      	b.n	800e834 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	3304      	adds	r3, #4
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fe ff99 	bl	800d710 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d004      	beq.n	800e7f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	3318      	adds	r3, #24
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fe ff90 	bl	800d710 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f4:	4b29      	ldr	r3, [pc, #164]	; (800e89c <xTaskIncrementTick+0x170>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d903      	bls.n	800e804 <xTaskIncrementTick+0xd8>
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e800:	4a26      	ldr	r2, [pc, #152]	; (800e89c <xTaskIncrementTick+0x170>)
 800e802:	6013      	str	r3, [r2, #0]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e808:	4613      	mov	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	4413      	add	r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4a23      	ldr	r2, [pc, #140]	; (800e8a0 <xTaskIncrementTick+0x174>)
 800e812:	441a      	add	r2, r3
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	3304      	adds	r3, #4
 800e818:	4619      	mov	r1, r3
 800e81a:	4610      	mov	r0, r2
 800e81c:	f7fe ff1b 	bl	800d656 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e824:	4b1f      	ldr	r3, [pc, #124]	; (800e8a4 <xTaskIncrementTick+0x178>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d3b8      	bcc.n	800e7a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e82e:	2301      	movs	r3, #1
 800e830:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e832:	e7b5      	b.n	800e7a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e834:	4b1b      	ldr	r3, [pc, #108]	; (800e8a4 <xTaskIncrementTick+0x178>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e83a:	4919      	ldr	r1, [pc, #100]	; (800e8a0 <xTaskIncrementTick+0x174>)
 800e83c:	4613      	mov	r3, r2
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	4413      	add	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	440b      	add	r3, r1
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d901      	bls.n	800e850 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e84c:	2301      	movs	r3, #1
 800e84e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800e850:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <xTaskIncrementTick+0x17c>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d101      	bne.n	800e85c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800e858:	f7f2 fa7e 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e85c:	4b13      	ldr	r3, [pc, #76]	; (800e8ac <xTaskIncrementTick+0x180>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d009      	beq.n	800e878 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800e864:	2301      	movs	r3, #1
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	e006      	b.n	800e878 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e86a:	4b0f      	ldr	r3, [pc, #60]	; (800e8a8 <xTaskIncrementTick+0x17c>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3301      	adds	r3, #1
 800e870:	4a0d      	ldr	r2, [pc, #52]	; (800e8a8 <xTaskIncrementTick+0x17c>)
 800e872:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e874:	f7f2 fa70 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800e878:	697b      	ldr	r3, [r7, #20]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3718      	adds	r7, #24
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	2400125c 	.word	0x2400125c
 800e888:	24001238 	.word	0x24001238
 800e88c:	240011ec 	.word	0x240011ec
 800e890:	240011f0 	.word	0x240011f0
 800e894:	2400124c 	.word	0x2400124c
 800e898:	24001254 	.word	0x24001254
 800e89c:	2400123c 	.word	0x2400123c
 800e8a0:	24000d64 	.word	0x24000d64
 800e8a4:	24000d60 	.word	0x24000d60
 800e8a8:	24001244 	.word	0x24001244
 800e8ac:	24001248 	.word	0x24001248

0800e8b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8b6:	4b28      	ldr	r3, [pc, #160]	; (800e958 <vTaskSwitchContext+0xa8>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d003      	beq.n	800e8c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e8be:	4b27      	ldr	r3, [pc, #156]	; (800e95c <vTaskSwitchContext+0xac>)
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e8c4:	e041      	b.n	800e94a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e8c6:	4b25      	ldr	r3, [pc, #148]	; (800e95c <vTaskSwitchContext+0xac>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8cc:	4b24      	ldr	r3, [pc, #144]	; (800e960 <vTaskSwitchContext+0xb0>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	60fb      	str	r3, [r7, #12]
 800e8d2:	e010      	b.n	800e8f6 <vTaskSwitchContext+0x46>
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d10a      	bne.n	800e8f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800e8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8de:	f383 8811 	msr	BASEPRI, r3
 800e8e2:	f3bf 8f6f 	isb	sy
 800e8e6:	f3bf 8f4f 	dsb	sy
 800e8ea:	607b      	str	r3, [r7, #4]
}
 800e8ec:	bf00      	nop
 800e8ee:	e7fe      	b.n	800e8ee <vTaskSwitchContext+0x3e>
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	3b01      	subs	r3, #1
 800e8f4:	60fb      	str	r3, [r7, #12]
 800e8f6:	491b      	ldr	r1, [pc, #108]	; (800e964 <vTaskSwitchContext+0xb4>)
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	4413      	add	r3, r2
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	440b      	add	r3, r1
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d0e4      	beq.n	800e8d4 <vTaskSwitchContext+0x24>
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4a13      	ldr	r2, [pc, #76]	; (800e964 <vTaskSwitchContext+0xb4>)
 800e916:	4413      	add	r3, r2
 800e918:	60bb      	str	r3, [r7, #8]
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	605a      	str	r2, [r3, #4]
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	685a      	ldr	r2, [r3, #4]
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	3308      	adds	r3, #8
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d104      	bne.n	800e93a <vTaskSwitchContext+0x8a>
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	685a      	ldr	r2, [r3, #4]
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	605a      	str	r2, [r3, #4]
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	4a09      	ldr	r2, [pc, #36]	; (800e968 <vTaskSwitchContext+0xb8>)
 800e942:	6013      	str	r3, [r2, #0]
 800e944:	4a06      	ldr	r2, [pc, #24]	; (800e960 <vTaskSwitchContext+0xb0>)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6013      	str	r3, [r2, #0]
}
 800e94a:	bf00      	nop
 800e94c:	3714      	adds	r7, #20
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	2400125c 	.word	0x2400125c
 800e95c:	24001248 	.word	0x24001248
 800e960:	2400123c 	.word	0x2400123c
 800e964:	24000d64 	.word	0x24000d64
 800e968:	24000d60 	.word	0x24000d60

0800e96c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10a      	bne.n	800e992 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	60fb      	str	r3, [r7, #12]
}
 800e98e:	bf00      	nop
 800e990:	e7fe      	b.n	800e990 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e992:	4b07      	ldr	r3, [pc, #28]	; (800e9b0 <vTaskPlaceOnEventList+0x44>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	3318      	adds	r3, #24
 800e998:	4619      	mov	r1, r3
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7fe fe7f 	bl	800d69e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	6838      	ldr	r0, [r7, #0]
 800e9a4:	f000 fa7c 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
}
 800e9a8:	bf00      	nop
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	24000d60 	.word	0x24000d60

0800e9b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b086      	sub	sp, #24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10a      	bne.n	800e9dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	617b      	str	r3, [r7, #20]
}
 800e9d8:	bf00      	nop
 800e9da:	e7fe      	b.n	800e9da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9dc:	4b0a      	ldr	r3, [pc, #40]	; (800ea08 <vTaskPlaceOnEventListRestricted+0x54>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3318      	adds	r3, #24
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f7fe fe36 	bl	800d656 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d002      	beq.n	800e9f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e9f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	68b8      	ldr	r0, [r7, #8]
 800e9fa:	f000 fa51 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
	}
 800e9fe:	bf00      	nop
 800ea00:	3718      	adds	r7, #24
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	24000d60 	.word	0x24000d60

0800ea0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d10a      	bne.n	800ea38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ea22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea26:	f383 8811 	msr	BASEPRI, r3
 800ea2a:	f3bf 8f6f 	isb	sy
 800ea2e:	f3bf 8f4f 	dsb	sy
 800ea32:	60fb      	str	r3, [r7, #12]
}
 800ea34:	bf00      	nop
 800ea36:	e7fe      	b.n	800ea36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	3318      	adds	r3, #24
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fe fe67 	bl	800d710 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea42:	4b1e      	ldr	r3, [pc, #120]	; (800eabc <xTaskRemoveFromEventList+0xb0>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d11d      	bne.n	800ea86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fe fe5e 	bl	800d710 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea58:	4b19      	ldr	r3, [pc, #100]	; (800eac0 <xTaskRemoveFromEventList+0xb4>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d903      	bls.n	800ea68 <xTaskRemoveFromEventList+0x5c>
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea64:	4a16      	ldr	r2, [pc, #88]	; (800eac0 <xTaskRemoveFromEventList+0xb4>)
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	4413      	add	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	4a13      	ldr	r2, [pc, #76]	; (800eac4 <xTaskRemoveFromEventList+0xb8>)
 800ea76:	441a      	add	r2, r3
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	3304      	adds	r3, #4
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4610      	mov	r0, r2
 800ea80:	f7fe fde9 	bl	800d656 <vListInsertEnd>
 800ea84:	e005      	b.n	800ea92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	3318      	adds	r3, #24
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	480e      	ldr	r0, [pc, #56]	; (800eac8 <xTaskRemoveFromEventList+0xbc>)
 800ea8e:	f7fe fde2 	bl	800d656 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea96:	4b0d      	ldr	r3, [pc, #52]	; (800eacc <xTaskRemoveFromEventList+0xc0>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d905      	bls.n	800eaac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eaa4:	4b0a      	ldr	r3, [pc, #40]	; (800ead0 <xTaskRemoveFromEventList+0xc4>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	601a      	str	r2, [r3, #0]
 800eaaa:	e001      	b.n	800eab0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eaac:	2300      	movs	r3, #0
 800eaae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eab0:	697b      	ldr	r3, [r7, #20]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3718      	adds	r7, #24
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	2400125c 	.word	0x2400125c
 800eac0:	2400123c 	.word	0x2400123c
 800eac4:	24000d64 	.word	0x24000d64
 800eac8:	240011f4 	.word	0x240011f4
 800eacc:	24000d60 	.word	0x24000d60
 800ead0:	24001248 	.word	0x24001248

0800ead4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eadc:	4b06      	ldr	r3, [pc, #24]	; (800eaf8 <vTaskInternalSetTimeOutState+0x24>)
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eae4:	4b05      	ldr	r3, [pc, #20]	; (800eafc <vTaskInternalSetTimeOutState+0x28>)
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	605a      	str	r2, [r3, #4]
}
 800eaec:	bf00      	nop
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr
 800eaf8:	2400124c 	.word	0x2400124c
 800eafc:	24001238 	.word	0x24001238

0800eb00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b088      	sub	sp, #32
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10a      	bne.n	800eb26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb14:	f383 8811 	msr	BASEPRI, r3
 800eb18:	f3bf 8f6f 	isb	sy
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	613b      	str	r3, [r7, #16]
}
 800eb22:	bf00      	nop
 800eb24:	e7fe      	b.n	800eb24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d10a      	bne.n	800eb42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	60fb      	str	r3, [r7, #12]
}
 800eb3e:	bf00      	nop
 800eb40:	e7fe      	b.n	800eb40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eb42:	f000 fe7f 	bl	800f844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb46:	4b1d      	ldr	r3, [pc, #116]	; (800ebbc <xTaskCheckForTimeOut+0xbc>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	69ba      	ldr	r2, [r7, #24]
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb5e:	d102      	bne.n	800eb66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb60:	2300      	movs	r3, #0
 800eb62:	61fb      	str	r3, [r7, #28]
 800eb64:	e023      	b.n	800ebae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	4b15      	ldr	r3, [pc, #84]	; (800ebc0 <xTaskCheckForTimeOut+0xc0>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d007      	beq.n	800eb82 <xTaskCheckForTimeOut+0x82>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	69ba      	ldr	r2, [r7, #24]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d302      	bcc.n	800eb82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	61fb      	str	r3, [r7, #28]
 800eb80:	e015      	b.n	800ebae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	697a      	ldr	r2, [r7, #20]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d20b      	bcs.n	800eba4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	1ad2      	subs	r2, r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7ff ff9b 	bl	800ead4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	61fb      	str	r3, [r7, #28]
 800eba2:	e004      	b.n	800ebae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2200      	movs	r2, #0
 800eba8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ebae:	f000 fe79 	bl	800f8a4 <vPortExitCritical>

	return xReturn;
 800ebb2:	69fb      	ldr	r3, [r7, #28]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3720      	adds	r7, #32
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	24001238 	.word	0x24001238
 800ebc0:	2400124c 	.word	0x2400124c

0800ebc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ebc8:	4b03      	ldr	r3, [pc, #12]	; (800ebd8 <vTaskMissedYield+0x14>)
 800ebca:	2201      	movs	r2, #1
 800ebcc:	601a      	str	r2, [r3, #0]
}
 800ebce:	bf00      	nop
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr
 800ebd8:	24001248 	.word	0x24001248

0800ebdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ebe4:	f000 f852 	bl	800ec8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ebe8:	4b06      	ldr	r3, [pc, #24]	; (800ec04 <prvIdleTask+0x28>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d9f9      	bls.n	800ebe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ebf0:	4b05      	ldr	r3, [pc, #20]	; (800ec08 <prvIdleTask+0x2c>)
 800ebf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebf6:	601a      	str	r2, [r3, #0]
 800ebf8:	f3bf 8f4f 	dsb	sy
 800ebfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ec00:	e7f0      	b.n	800ebe4 <prvIdleTask+0x8>
 800ec02:	bf00      	nop
 800ec04:	24000d64 	.word	0x24000d64
 800ec08:	e000ed04 	.word	0xe000ed04

0800ec0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec12:	2300      	movs	r3, #0
 800ec14:	607b      	str	r3, [r7, #4]
 800ec16:	e00c      	b.n	800ec32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4a12      	ldr	r2, [pc, #72]	; (800ec6c <prvInitialiseTaskLists+0x60>)
 800ec24:	4413      	add	r3, r2
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fe fce8 	bl	800d5fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	3301      	adds	r3, #1
 800ec30:	607b      	str	r3, [r7, #4]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b37      	cmp	r3, #55	; 0x37
 800ec36:	d9ef      	bls.n	800ec18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec38:	480d      	ldr	r0, [pc, #52]	; (800ec70 <prvInitialiseTaskLists+0x64>)
 800ec3a:	f7fe fcdf 	bl	800d5fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec3e:	480d      	ldr	r0, [pc, #52]	; (800ec74 <prvInitialiseTaskLists+0x68>)
 800ec40:	f7fe fcdc 	bl	800d5fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec44:	480c      	ldr	r0, [pc, #48]	; (800ec78 <prvInitialiseTaskLists+0x6c>)
 800ec46:	f7fe fcd9 	bl	800d5fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec4a:	480c      	ldr	r0, [pc, #48]	; (800ec7c <prvInitialiseTaskLists+0x70>)
 800ec4c:	f7fe fcd6 	bl	800d5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec50:	480b      	ldr	r0, [pc, #44]	; (800ec80 <prvInitialiseTaskLists+0x74>)
 800ec52:	f7fe fcd3 	bl	800d5fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec56:	4b0b      	ldr	r3, [pc, #44]	; (800ec84 <prvInitialiseTaskLists+0x78>)
 800ec58:	4a05      	ldr	r2, [pc, #20]	; (800ec70 <prvInitialiseTaskLists+0x64>)
 800ec5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec5c:	4b0a      	ldr	r3, [pc, #40]	; (800ec88 <prvInitialiseTaskLists+0x7c>)
 800ec5e:	4a05      	ldr	r2, [pc, #20]	; (800ec74 <prvInitialiseTaskLists+0x68>)
 800ec60:	601a      	str	r2, [r3, #0]
}
 800ec62:	bf00      	nop
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	24000d64 	.word	0x24000d64
 800ec70:	240011c4 	.word	0x240011c4
 800ec74:	240011d8 	.word	0x240011d8
 800ec78:	240011f4 	.word	0x240011f4
 800ec7c:	24001208 	.word	0x24001208
 800ec80:	24001220 	.word	0x24001220
 800ec84:	240011ec 	.word	0x240011ec
 800ec88:	240011f0 	.word	0x240011f0

0800ec8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec92:	e019      	b.n	800ecc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec94:	f000 fdd6 	bl	800f844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec98:	4b10      	ldr	r3, [pc, #64]	; (800ecdc <prvCheckTasksWaitingTermination+0x50>)
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3304      	adds	r3, #4
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7fe fd33 	bl	800d710 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ecaa:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <prvCheckTasksWaitingTermination+0x54>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	4a0b      	ldr	r2, [pc, #44]	; (800ece0 <prvCheckTasksWaitingTermination+0x54>)
 800ecb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ecb4:	4b0b      	ldr	r3, [pc, #44]	; (800ece4 <prvCheckTasksWaitingTermination+0x58>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	4a0a      	ldr	r2, [pc, #40]	; (800ece4 <prvCheckTasksWaitingTermination+0x58>)
 800ecbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecbe:	f000 fdf1 	bl	800f8a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 f810 	bl	800ece8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecc8:	4b06      	ldr	r3, [pc, #24]	; (800ece4 <prvCheckTasksWaitingTermination+0x58>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d1e1      	bne.n	800ec94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ecd0:	bf00      	nop
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	24001208 	.word	0x24001208
 800ece0:	24001234 	.word	0x24001234
 800ece4:	2400121c 	.word	0x2400121c

0800ece8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d108      	bne.n	800ed0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f000 ff8e 	bl	800fc20 <vPortFree>
				vPortFree( pxTCB );
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 ff8b 	bl	800fc20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed0a:	e018      	b.n	800ed3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d103      	bne.n	800ed1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 ff82 	bl	800fc20 <vPortFree>
	}
 800ed1c:	e00f      	b.n	800ed3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d00a      	beq.n	800ed3e <prvDeleteTCB+0x56>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	f383 8811 	msr	BASEPRI, r3
 800ed30:	f3bf 8f6f 	isb	sy
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	60fb      	str	r3, [r7, #12]
}
 800ed3a:	bf00      	nop
 800ed3c:	e7fe      	b.n	800ed3c <prvDeleteTCB+0x54>
	}
 800ed3e:	bf00      	nop
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
	...

0800ed48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed4e:	4b0c      	ldr	r3, [pc, #48]	; (800ed80 <prvResetNextTaskUnblockTime+0x38>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d104      	bne.n	800ed62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed58:	4b0a      	ldr	r3, [pc, #40]	; (800ed84 <prvResetNextTaskUnblockTime+0x3c>)
 800ed5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed60:	e008      	b.n	800ed74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed62:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <prvResetNextTaskUnblockTime+0x38>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	4a04      	ldr	r2, [pc, #16]	; (800ed84 <prvResetNextTaskUnblockTime+0x3c>)
 800ed72:	6013      	str	r3, [r2, #0]
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	240011ec 	.word	0x240011ec
 800ed84:	24001254 	.word	0x24001254

0800ed88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed8e:	4b0b      	ldr	r3, [pc, #44]	; (800edbc <xTaskGetSchedulerState+0x34>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d102      	bne.n	800ed9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed96:	2301      	movs	r3, #1
 800ed98:	607b      	str	r3, [r7, #4]
 800ed9a:	e008      	b.n	800edae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed9c:	4b08      	ldr	r3, [pc, #32]	; (800edc0 <xTaskGetSchedulerState+0x38>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d102      	bne.n	800edaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eda4:	2302      	movs	r3, #2
 800eda6:	607b      	str	r3, [r7, #4]
 800eda8:	e001      	b.n	800edae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edaa:	2300      	movs	r3, #0
 800edac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edae:	687b      	ldr	r3, [r7, #4]
	}
 800edb0:	4618      	mov	r0, r3
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	24001240 	.word	0x24001240
 800edc0:	2400125c 	.word	0x2400125c

0800edc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800edd0:	2300      	movs	r3, #0
 800edd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d056      	beq.n	800ee88 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edda:	4b2e      	ldr	r3, [pc, #184]	; (800ee94 <xTaskPriorityDisinherit+0xd0>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	693a      	ldr	r2, [r7, #16]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d00a      	beq.n	800edfa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ede4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede8:	f383 8811 	msr	BASEPRI, r3
 800edec:	f3bf 8f6f 	isb	sy
 800edf0:	f3bf 8f4f 	dsb	sy
 800edf4:	60fb      	str	r3, [r7, #12]
}
 800edf6:	bf00      	nop
 800edf8:	e7fe      	b.n	800edf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10a      	bne.n	800ee18 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	60bb      	str	r3, [r7, #8]
}
 800ee14:	bf00      	nop
 800ee16:	e7fe      	b.n	800ee16 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee1c:	1e5a      	subs	r2, r3, #1
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d02c      	beq.n	800ee88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d128      	bne.n	800ee88 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	3304      	adds	r3, #4
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fe fc68 	bl	800d710 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee58:	4b0f      	ldr	r3, [pc, #60]	; (800ee98 <xTaskPriorityDisinherit+0xd4>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d903      	bls.n	800ee68 <xTaskPriorityDisinherit+0xa4>
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee64:	4a0c      	ldr	r2, [pc, #48]	; (800ee98 <xTaskPriorityDisinherit+0xd4>)
 800ee66:	6013      	str	r3, [r2, #0]
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4413      	add	r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	4a09      	ldr	r2, [pc, #36]	; (800ee9c <xTaskPriorityDisinherit+0xd8>)
 800ee76:	441a      	add	r2, r3
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4610      	mov	r0, r2
 800ee80:	f7fe fbe9 	bl	800d656 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee84:	2301      	movs	r3, #1
 800ee86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee88:	697b      	ldr	r3, [r7, #20]
	}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3718      	adds	r7, #24
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	24000d60 	.word	0x24000d60
 800ee98:	2400123c 	.word	0x2400123c
 800ee9c:	24000d64 	.word	0x24000d64

0800eea0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eeaa:	4b21      	ldr	r3, [pc, #132]	; (800ef30 <prvAddCurrentTaskToDelayedList+0x90>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eeb0:	4b20      	ldr	r3, [pc, #128]	; (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe fc2a 	bl	800d710 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eec2:	d10a      	bne.n	800eeda <prvAddCurrentTaskToDelayedList+0x3a>
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d007      	beq.n	800eeda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eeca:	4b1a      	ldr	r3, [pc, #104]	; (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3304      	adds	r3, #4
 800eed0:	4619      	mov	r1, r3
 800eed2:	4819      	ldr	r0, [pc, #100]	; (800ef38 <prvAddCurrentTaskToDelayedList+0x98>)
 800eed4:	f7fe fbbf 	bl	800d656 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eed8:	e026      	b.n	800ef28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eeda:	68fa      	ldr	r2, [r7, #12]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4413      	add	r3, r2
 800eee0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eee2:	4b14      	ldr	r3, [pc, #80]	; (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68ba      	ldr	r2, [r7, #8]
 800eee8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d209      	bcs.n	800ef06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eef2:	4b12      	ldr	r3, [pc, #72]	; (800ef3c <prvAddCurrentTaskToDelayedList+0x9c>)
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	4b0f      	ldr	r3, [pc, #60]	; (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	3304      	adds	r3, #4
 800eefc:	4619      	mov	r1, r3
 800eefe:	4610      	mov	r0, r2
 800ef00:	f7fe fbcd 	bl	800d69e <vListInsert>
}
 800ef04:	e010      	b.n	800ef28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef06:	4b0e      	ldr	r3, [pc, #56]	; (800ef40 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	4b0a      	ldr	r3, [pc, #40]	; (800ef34 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	3304      	adds	r3, #4
 800ef10:	4619      	mov	r1, r3
 800ef12:	4610      	mov	r0, r2
 800ef14:	f7fe fbc3 	bl	800d69e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef18:	4b0a      	ldr	r3, [pc, #40]	; (800ef44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	68ba      	ldr	r2, [r7, #8]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d202      	bcs.n	800ef28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ef22:	4a08      	ldr	r2, [pc, #32]	; (800ef44 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	6013      	str	r3, [r2, #0]
}
 800ef28:	bf00      	nop
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	24001238 	.word	0x24001238
 800ef34:	24000d60 	.word	0x24000d60
 800ef38:	24001220 	.word	0x24001220
 800ef3c:	240011f0 	.word	0x240011f0
 800ef40:	240011ec 	.word	0x240011ec
 800ef44:	24001254 	.word	0x24001254

0800ef48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b08a      	sub	sp, #40	; 0x28
 800ef4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ef52:	f000 fb07 	bl	800f564 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ef56:	4b1c      	ldr	r3, [pc, #112]	; (800efc8 <xTimerCreateTimerTask+0x80>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d021      	beq.n	800efa2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef66:	1d3a      	adds	r2, r7, #4
 800ef68:	f107 0108 	add.w	r1, r7, #8
 800ef6c:	f107 030c 	add.w	r3, r7, #12
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fe fb29 	bl	800d5c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	9202      	str	r2, [sp, #8]
 800ef7e:	9301      	str	r3, [sp, #4]
 800ef80:	2302      	movs	r3, #2
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	2300      	movs	r3, #0
 800ef86:	460a      	mov	r2, r1
 800ef88:	4910      	ldr	r1, [pc, #64]	; (800efcc <xTimerCreateTimerTask+0x84>)
 800ef8a:	4811      	ldr	r0, [pc, #68]	; (800efd0 <xTimerCreateTimerTask+0x88>)
 800ef8c:	f7ff f8d6 	bl	800e13c <xTaskCreateStatic>
 800ef90:	4603      	mov	r3, r0
 800ef92:	4a10      	ldr	r2, [pc, #64]	; (800efd4 <xTimerCreateTimerTask+0x8c>)
 800ef94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef96:	4b0f      	ldr	r3, [pc, #60]	; (800efd4 <xTimerCreateTimerTask+0x8c>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d001      	beq.n	800efa2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d10a      	bne.n	800efbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800efa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efac:	f383 8811 	msr	BASEPRI, r3
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	f3bf 8f4f 	dsb	sy
 800efb8:	613b      	str	r3, [r7, #16]
}
 800efba:	bf00      	nop
 800efbc:	e7fe      	b.n	800efbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800efbe:	697b      	ldr	r3, [r7, #20]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3718      	adds	r7, #24
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	24001290 	.word	0x24001290
 800efcc:	0800ff78 	.word	0x0800ff78
 800efd0:	0800f10d 	.word	0x0800f10d
 800efd4:	24001294 	.word	0x24001294

0800efd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
 800efe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10a      	bne.n	800f006 <xTimerGenericCommand+0x2e>
	__asm volatile
 800eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff4:	f383 8811 	msr	BASEPRI, r3
 800eff8:	f3bf 8f6f 	isb	sy
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	623b      	str	r3, [r7, #32]
}
 800f002:	bf00      	nop
 800f004:	e7fe      	b.n	800f004 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f006:	4b1a      	ldr	r3, [pc, #104]	; (800f070 <xTimerGenericCommand+0x98>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d02a      	beq.n	800f064 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	2b05      	cmp	r3, #5
 800f01e:	dc18      	bgt.n	800f052 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f020:	f7ff feb2 	bl	800ed88 <xTaskGetSchedulerState>
 800f024:	4603      	mov	r3, r0
 800f026:	2b02      	cmp	r3, #2
 800f028:	d109      	bne.n	800f03e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f02a:	4b11      	ldr	r3, [pc, #68]	; (800f070 <xTimerGenericCommand+0x98>)
 800f02c:	6818      	ldr	r0, [r3, #0]
 800f02e:	f107 0110 	add.w	r1, r7, #16
 800f032:	2300      	movs	r3, #0
 800f034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f036:	f7fe fc99 	bl	800d96c <xQueueGenericSend>
 800f03a:	6278      	str	r0, [r7, #36]	; 0x24
 800f03c:	e012      	b.n	800f064 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f03e:	4b0c      	ldr	r3, [pc, #48]	; (800f070 <xTimerGenericCommand+0x98>)
 800f040:	6818      	ldr	r0, [r3, #0]
 800f042:	f107 0110 	add.w	r1, r7, #16
 800f046:	2300      	movs	r3, #0
 800f048:	2200      	movs	r2, #0
 800f04a:	f7fe fc8f 	bl	800d96c <xQueueGenericSend>
 800f04e:	6278      	str	r0, [r7, #36]	; 0x24
 800f050:	e008      	b.n	800f064 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f052:	4b07      	ldr	r3, [pc, #28]	; (800f070 <xTimerGenericCommand+0x98>)
 800f054:	6818      	ldr	r0, [r3, #0]
 800f056:	f107 0110 	add.w	r1, r7, #16
 800f05a:	2300      	movs	r3, #0
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	f7fe fd83 	bl	800db68 <xQueueGenericSendFromISR>
 800f062:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f066:	4618      	mov	r0, r3
 800f068:	3728      	adds	r7, #40	; 0x28
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	24001290 	.word	0x24001290

0800f074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b088      	sub	sp, #32
 800f078:	af02      	add	r7, sp, #8
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f07e:	4b22      	ldr	r3, [pc, #136]	; (800f108 <prvProcessExpiredTimer+0x94>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	3304      	adds	r3, #4
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fe fb3f 	bl	800d710 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f098:	f003 0304 	and.w	r3, r3, #4
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d022      	beq.n	800f0e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	699a      	ldr	r2, [r3, #24]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	18d1      	adds	r1, r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	6978      	ldr	r0, [r7, #20]
 800f0ae:	f000 f8d1 	bl	800f254 <prvInsertTimerInActiveList>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d01f      	beq.n	800f0f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	6978      	ldr	r0, [r7, #20]
 800f0c4:	f7ff ff88 	bl	800efd8 <xTimerGenericCommand>
 800f0c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d113      	bne.n	800f0f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d4:	f383 8811 	msr	BASEPRI, r3
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	60fb      	str	r3, [r7, #12]
}
 800f0e2:	bf00      	nop
 800f0e4:	e7fe      	b.n	800f0e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0ec:	f023 0301 	bic.w	r3, r3, #1
 800f0f0:	b2da      	uxtb	r2, r3
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	6a1b      	ldr	r3, [r3, #32]
 800f0fc:	6978      	ldr	r0, [r7, #20]
 800f0fe:	4798      	blx	r3
}
 800f100:	bf00      	nop
 800f102:	3718      	adds	r7, #24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}
 800f108:	24001288 	.word	0x24001288

0800f10c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f114:	f107 0308 	add.w	r3, r7, #8
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 f857 	bl	800f1cc <prvGetNextExpireTime>
 800f11e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	4619      	mov	r1, r3
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f000 f803 	bl	800f130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f12a:	f000 f8d5 	bl	800f2d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f12e:	e7f1      	b.n	800f114 <prvTimerTask+0x8>

0800f130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f13a:	f7ff fa3b 	bl	800e5b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f13e:	f107 0308 	add.w	r3, r7, #8
 800f142:	4618      	mov	r0, r3
 800f144:	f000 f866 	bl	800f214 <prvSampleTimeNow>
 800f148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d130      	bne.n	800f1b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10a      	bne.n	800f16c <prvProcessTimerOrBlockTask+0x3c>
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d806      	bhi.n	800f16c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f15e:	f7ff fa37 	bl	800e5d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f162:	68f9      	ldr	r1, [r7, #12]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7ff ff85 	bl	800f074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f16a:	e024      	b.n	800f1b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d008      	beq.n	800f184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f172:	4b13      	ldr	r3, [pc, #76]	; (800f1c0 <prvProcessTimerOrBlockTask+0x90>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <prvProcessTimerOrBlockTask+0x50>
 800f17c:	2301      	movs	r3, #1
 800f17e:	e000      	b.n	800f182 <prvProcessTimerOrBlockTask+0x52>
 800f180:	2300      	movs	r3, #0
 800f182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f184:	4b0f      	ldr	r3, [pc, #60]	; (800f1c4 <prvProcessTimerOrBlockTask+0x94>)
 800f186:	6818      	ldr	r0, [r3, #0]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	683a      	ldr	r2, [r7, #0]
 800f190:	4619      	mov	r1, r3
 800f192:	f7fe ff9f 	bl	800e0d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f196:	f7ff fa1b 	bl	800e5d0 <xTaskResumeAll>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d10a      	bne.n	800f1b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f1a0:	4b09      	ldr	r3, [pc, #36]	; (800f1c8 <prvProcessTimerOrBlockTask+0x98>)
 800f1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1a6:	601a      	str	r2, [r3, #0]
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	f3bf 8f6f 	isb	sy
}
 800f1b0:	e001      	b.n	800f1b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f1b2:	f7ff fa0d 	bl	800e5d0 <xTaskResumeAll>
}
 800f1b6:	bf00      	nop
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	2400128c 	.word	0x2400128c
 800f1c4:	24001290 	.word	0x24001290
 800f1c8:	e000ed04 	.word	0xe000ed04

0800f1cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1d4:	4b0e      	ldr	r3, [pc, #56]	; (800f210 <prvGetNextExpireTime+0x44>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d101      	bne.n	800f1e2 <prvGetNextExpireTime+0x16>
 800f1de:	2201      	movs	r2, #1
 800f1e0:	e000      	b.n	800f1e4 <prvGetNextExpireTime+0x18>
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d105      	bne.n	800f1fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1f0:	4b07      	ldr	r3, [pc, #28]	; (800f210 <prvGetNextExpireTime+0x44>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	60fb      	str	r3, [r7, #12]
 800f1fa:	e001      	b.n	800f200 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f200:	68fb      	ldr	r3, [r7, #12]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3714      	adds	r7, #20
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	24001288 	.word	0x24001288

0800f214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f21c:	f7ff fa76 	bl	800e70c <xTaskGetTickCount>
 800f220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f222:	4b0b      	ldr	r3, [pc, #44]	; (800f250 <prvSampleTimeNow+0x3c>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d205      	bcs.n	800f238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f22c:	f000 f936 	bl	800f49c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2201      	movs	r2, #1
 800f234:	601a      	str	r2, [r3, #0]
 800f236:	e002      	b.n	800f23e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2200      	movs	r2, #0
 800f23c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f23e:	4a04      	ldr	r2, [pc, #16]	; (800f250 <prvSampleTimeNow+0x3c>)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f244:	68fb      	ldr	r3, [r7, #12]
}
 800f246:	4618      	mov	r0, r3
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	24001298 	.word	0x24001298

0800f254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f262:	2300      	movs	r3, #0
 800f264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	68fa      	ldr	r2, [r7, #12]
 800f270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f272:	68ba      	ldr	r2, [r7, #8]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	429a      	cmp	r2, r3
 800f278:	d812      	bhi.n	800f2a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	1ad2      	subs	r2, r2, r3
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	699b      	ldr	r3, [r3, #24]
 800f284:	429a      	cmp	r2, r3
 800f286:	d302      	bcc.n	800f28e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f288:	2301      	movs	r3, #1
 800f28a:	617b      	str	r3, [r7, #20]
 800f28c:	e01b      	b.n	800f2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f28e:	4b10      	ldr	r3, [pc, #64]	; (800f2d0 <prvInsertTimerInActiveList+0x7c>)
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	3304      	adds	r3, #4
 800f296:	4619      	mov	r1, r3
 800f298:	4610      	mov	r0, r2
 800f29a:	f7fe fa00 	bl	800d69e <vListInsert>
 800f29e:	e012      	b.n	800f2c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d206      	bcs.n	800f2b6 <prvInsertTimerInActiveList+0x62>
 800f2a8:	68ba      	ldr	r2, [r7, #8]
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d302      	bcc.n	800f2b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	617b      	str	r3, [r7, #20]
 800f2b4:	e007      	b.n	800f2c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f2b6:	4b07      	ldr	r3, [pc, #28]	; (800f2d4 <prvInsertTimerInActiveList+0x80>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	3304      	adds	r3, #4
 800f2be:	4619      	mov	r1, r3
 800f2c0:	4610      	mov	r0, r2
 800f2c2:	f7fe f9ec 	bl	800d69e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f2c6:	697b      	ldr	r3, [r7, #20]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	2400128c 	.word	0x2400128c
 800f2d4:	24001288 	.word	0x24001288

0800f2d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08e      	sub	sp, #56	; 0x38
 800f2dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f2de:	e0ca      	b.n	800f476 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	da18      	bge.n	800f318 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f2e6:	1d3b      	adds	r3, r7, #4
 800f2e8:	3304      	adds	r3, #4
 800f2ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d10a      	bne.n	800f308 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	61fb      	str	r3, [r7, #28]
}
 800f304:	bf00      	nop
 800f306:	e7fe      	b.n	800f306 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f30e:	6850      	ldr	r0, [r2, #4]
 800f310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f312:	6892      	ldr	r2, [r2, #8]
 800f314:	4611      	mov	r1, r2
 800f316:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	f2c0 80aa 	blt.w	800f474 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f326:	695b      	ldr	r3, [r3, #20]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d004      	beq.n	800f336 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	3304      	adds	r3, #4
 800f330:	4618      	mov	r0, r3
 800f332:	f7fe f9ed 	bl	800d710 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f336:	463b      	mov	r3, r7
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff ff6b 	bl	800f214 <prvSampleTimeNow>
 800f33e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b09      	cmp	r3, #9
 800f344:	f200 8097 	bhi.w	800f476 <prvProcessReceivedCommands+0x19e>
 800f348:	a201      	add	r2, pc, #4	; (adr r2, 800f350 <prvProcessReceivedCommands+0x78>)
 800f34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34e:	bf00      	nop
 800f350:	0800f379 	.word	0x0800f379
 800f354:	0800f379 	.word	0x0800f379
 800f358:	0800f379 	.word	0x0800f379
 800f35c:	0800f3ed 	.word	0x0800f3ed
 800f360:	0800f401 	.word	0x0800f401
 800f364:	0800f44b 	.word	0x0800f44b
 800f368:	0800f379 	.word	0x0800f379
 800f36c:	0800f379 	.word	0x0800f379
 800f370:	0800f3ed 	.word	0x0800f3ed
 800f374:	0800f401 	.word	0x0800f401
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f37e:	f043 0301 	orr.w	r3, r3, #1
 800f382:	b2da      	uxtb	r2, r3
 800f384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f38a:	68ba      	ldr	r2, [r7, #8]
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	699b      	ldr	r3, [r3, #24]
 800f390:	18d1      	adds	r1, r2, r3
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f398:	f7ff ff5c 	bl	800f254 <prvInsertTimerInActiveList>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d069      	beq.n	800f476 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	6a1b      	ldr	r3, [r3, #32]
 800f3a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3b0:	f003 0304 	and.w	r3, r3, #4
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d05e      	beq.n	800f476 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f3b8:	68ba      	ldr	r2, [r7, #8]
 800f3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3bc:	699b      	ldr	r3, [r3, #24]
 800f3be:	441a      	add	r2, r3
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ca:	f7ff fe05 	bl	800efd8 <xTimerGenericCommand>
 800f3ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f3d0:	6a3b      	ldr	r3, [r7, #32]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d14f      	bne.n	800f476 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	61bb      	str	r3, [r7, #24]
}
 800f3e8:	bf00      	nop
 800f3ea:	e7fe      	b.n	800f3ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3f2:	f023 0301 	bic.w	r3, r3, #1
 800f3f6:	b2da      	uxtb	r2, r3
 800f3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f3fe:	e03a      	b.n	800f476 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f406:	f043 0301 	orr.w	r3, r3, #1
 800f40a:	b2da      	uxtb	r2, r3
 800f40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41a:	699b      	ldr	r3, [r3, #24]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d10a      	bne.n	800f436 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f424:	f383 8811 	msr	BASEPRI, r3
 800f428:	f3bf 8f6f 	isb	sy
 800f42c:	f3bf 8f4f 	dsb	sy
 800f430:	617b      	str	r3, [r7, #20]
}
 800f432:	bf00      	nop
 800f434:	e7fe      	b.n	800f434 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f438:	699a      	ldr	r2, [r3, #24]
 800f43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43c:	18d1      	adds	r1, r2, r3
 800f43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f444:	f7ff ff06 	bl	800f254 <prvInsertTimerInActiveList>
					break;
 800f448:	e015      	b.n	800f476 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f450:	f003 0302 	and.w	r3, r3, #2
 800f454:	2b00      	cmp	r3, #0
 800f456:	d103      	bne.n	800f460 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f45a:	f000 fbe1 	bl	800fc20 <vPortFree>
 800f45e:	e00a      	b.n	800f476 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f466:	f023 0301 	bic.w	r3, r3, #1
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f472:	e000      	b.n	800f476 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f474:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f476:	4b08      	ldr	r3, [pc, #32]	; (800f498 <prvProcessReceivedCommands+0x1c0>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	1d39      	adds	r1, r7, #4
 800f47c:	2200      	movs	r2, #0
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fe fc0e 	bl	800dca0 <xQueueReceive>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	f47f af2a 	bne.w	800f2e0 <prvProcessReceivedCommands+0x8>
	}
}
 800f48c:	bf00      	nop
 800f48e:	bf00      	nop
 800f490:	3730      	adds	r7, #48	; 0x30
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	24001290 	.word	0x24001290

0800f49c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b088      	sub	sp, #32
 800f4a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f4a2:	e048      	b.n	800f536 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f4a4:	4b2d      	ldr	r3, [pc, #180]	; (800f55c <prvSwitchTimerLists+0xc0>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ae:	4b2b      	ldr	r3, [pc, #172]	; (800f55c <prvSwitchTimerLists+0xc0>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	3304      	adds	r3, #4
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fe f927 	bl	800d710 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6a1b      	ldr	r3, [r3, #32]
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4d0:	f003 0304 	and.w	r3, r3, #4
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d02e      	beq.n	800f536 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	699b      	ldr	r3, [r3, #24]
 800f4dc:	693a      	ldr	r2, [r7, #16]
 800f4de:	4413      	add	r3, r2
 800f4e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d90e      	bls.n	800f508 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4f6:	4b19      	ldr	r3, [pc, #100]	; (800f55c <prvSwitchTimerLists+0xc0>)
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	4619      	mov	r1, r3
 800f500:	4610      	mov	r0, r2
 800f502:	f7fe f8cc 	bl	800d69e <vListInsert>
 800f506:	e016      	b.n	800f536 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f508:	2300      	movs	r3, #0
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	2300      	movs	r3, #0
 800f50e:	693a      	ldr	r2, [r7, #16]
 800f510:	2100      	movs	r1, #0
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f7ff fd60 	bl	800efd8 <xTimerGenericCommand>
 800f518:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10a      	bne.n	800f536 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f524:	f383 8811 	msr	BASEPRI, r3
 800f528:	f3bf 8f6f 	isb	sy
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	603b      	str	r3, [r7, #0]
}
 800f532:	bf00      	nop
 800f534:	e7fe      	b.n	800f534 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f536:	4b09      	ldr	r3, [pc, #36]	; (800f55c <prvSwitchTimerLists+0xc0>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1b1      	bne.n	800f4a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f540:	4b06      	ldr	r3, [pc, #24]	; (800f55c <prvSwitchTimerLists+0xc0>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f546:	4b06      	ldr	r3, [pc, #24]	; (800f560 <prvSwitchTimerLists+0xc4>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4a04      	ldr	r2, [pc, #16]	; (800f55c <prvSwitchTimerLists+0xc0>)
 800f54c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f54e:	4a04      	ldr	r2, [pc, #16]	; (800f560 <prvSwitchTimerLists+0xc4>)
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	6013      	str	r3, [r2, #0]
}
 800f554:	bf00      	nop
 800f556:	3718      	adds	r7, #24
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	24001288 	.word	0x24001288
 800f560:	2400128c 	.word	0x2400128c

0800f564 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f56a:	f000 f96b 	bl	800f844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f56e:	4b15      	ldr	r3, [pc, #84]	; (800f5c4 <prvCheckForValidListAndQueue+0x60>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d120      	bne.n	800f5b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f576:	4814      	ldr	r0, [pc, #80]	; (800f5c8 <prvCheckForValidListAndQueue+0x64>)
 800f578:	f7fe f840 	bl	800d5fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f57c:	4813      	ldr	r0, [pc, #76]	; (800f5cc <prvCheckForValidListAndQueue+0x68>)
 800f57e:	f7fe f83d 	bl	800d5fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f582:	4b13      	ldr	r3, [pc, #76]	; (800f5d0 <prvCheckForValidListAndQueue+0x6c>)
 800f584:	4a10      	ldr	r2, [pc, #64]	; (800f5c8 <prvCheckForValidListAndQueue+0x64>)
 800f586:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f588:	4b12      	ldr	r3, [pc, #72]	; (800f5d4 <prvCheckForValidListAndQueue+0x70>)
 800f58a:	4a10      	ldr	r2, [pc, #64]	; (800f5cc <prvCheckForValidListAndQueue+0x68>)
 800f58c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f58e:	2300      	movs	r3, #0
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	4b11      	ldr	r3, [pc, #68]	; (800f5d8 <prvCheckForValidListAndQueue+0x74>)
 800f594:	4a11      	ldr	r2, [pc, #68]	; (800f5dc <prvCheckForValidListAndQueue+0x78>)
 800f596:	2110      	movs	r1, #16
 800f598:	200a      	movs	r0, #10
 800f59a:	f7fe f94b 	bl	800d834 <xQueueGenericCreateStatic>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	4a08      	ldr	r2, [pc, #32]	; (800f5c4 <prvCheckForValidListAndQueue+0x60>)
 800f5a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f5a4:	4b07      	ldr	r3, [pc, #28]	; (800f5c4 <prvCheckForValidListAndQueue+0x60>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d005      	beq.n	800f5b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f5ac:	4b05      	ldr	r3, [pc, #20]	; (800f5c4 <prvCheckForValidListAndQueue+0x60>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	490b      	ldr	r1, [pc, #44]	; (800f5e0 <prvCheckForValidListAndQueue+0x7c>)
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fe fd64 	bl	800e080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f5b8:	f000 f974 	bl	800f8a4 <vPortExitCritical>
}
 800f5bc:	bf00      	nop
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	24001290 	.word	0x24001290
 800f5c8:	24001260 	.word	0x24001260
 800f5cc:	24001274 	.word	0x24001274
 800f5d0:	24001288 	.word	0x24001288
 800f5d4:	2400128c 	.word	0x2400128c
 800f5d8:	2400133c 	.word	0x2400133c
 800f5dc:	2400129c 	.word	0x2400129c
 800f5e0:	0800ff80 	.word	0x0800ff80

0800f5e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	3b04      	subs	r3, #4
 800f5f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f5fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	3b04      	subs	r3, #4
 800f602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	f023 0201 	bic.w	r2, r3, #1
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	3b04      	subs	r3, #4
 800f612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f614:	4a0c      	ldr	r2, [pc, #48]	; (800f648 <pxPortInitialiseStack+0x64>)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	3b14      	subs	r3, #20
 800f61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	3b04      	subs	r3, #4
 800f62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f06f 0202 	mvn.w	r2, #2
 800f632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	3b20      	subs	r3, #32
 800f638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f63a:	68fb      	ldr	r3, [r7, #12]
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3714      	adds	r7, #20
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr
 800f648:	0800f64d 	.word	0x0800f64d

0800f64c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f64c:	b480      	push	{r7}
 800f64e:	b085      	sub	sp, #20
 800f650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f652:	2300      	movs	r3, #0
 800f654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f656:	4b12      	ldr	r3, [pc, #72]	; (800f6a0 <prvTaskExitError+0x54>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f65e:	d00a      	beq.n	800f676 <prvTaskExitError+0x2a>
	__asm volatile
 800f660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	60fb      	str	r3, [r7, #12]
}
 800f672:	bf00      	nop
 800f674:	e7fe      	b.n	800f674 <prvTaskExitError+0x28>
	__asm volatile
 800f676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67a:	f383 8811 	msr	BASEPRI, r3
 800f67e:	f3bf 8f6f 	isb	sy
 800f682:	f3bf 8f4f 	dsb	sy
 800f686:	60bb      	str	r3, [r7, #8]
}
 800f688:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f68a:	bf00      	nop
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d0fc      	beq.n	800f68c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f692:	bf00      	nop
 800f694:	bf00      	nop
 800f696:	3714      	adds	r7, #20
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr
 800f6a0:	24000010 	.word	0x24000010
	...

0800f6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f6b0:	4b07      	ldr	r3, [pc, #28]	; (800f6d0 <pxCurrentTCBConst2>)
 800f6b2:	6819      	ldr	r1, [r3, #0]
 800f6b4:	6808      	ldr	r0, [r1, #0]
 800f6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ba:	f380 8809 	msr	PSP, r0
 800f6be:	f3bf 8f6f 	isb	sy
 800f6c2:	f04f 0000 	mov.w	r0, #0
 800f6c6:	f380 8811 	msr	BASEPRI, r0
 800f6ca:	4770      	bx	lr
 800f6cc:	f3af 8000 	nop.w

0800f6d0 <pxCurrentTCBConst2>:
 800f6d0:	24000d60 	.word	0x24000d60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f6d4:	bf00      	nop
 800f6d6:	bf00      	nop

0800f6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f6d8:	4808      	ldr	r0, [pc, #32]	; (800f6fc <prvPortStartFirstTask+0x24>)
 800f6da:	6800      	ldr	r0, [r0, #0]
 800f6dc:	6800      	ldr	r0, [r0, #0]
 800f6de:	f380 8808 	msr	MSP, r0
 800f6e2:	f04f 0000 	mov.w	r0, #0
 800f6e6:	f380 8814 	msr	CONTROL, r0
 800f6ea:	b662      	cpsie	i
 800f6ec:	b661      	cpsie	f
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	f3bf 8f6f 	isb	sy
 800f6f6:	df00      	svc	0
 800f6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f6fa:	bf00      	nop
 800f6fc:	e000ed08 	.word	0xe000ed08

0800f700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b086      	sub	sp, #24
 800f704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f706:	4b46      	ldr	r3, [pc, #280]	; (800f820 <xPortStartScheduler+0x120>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a46      	ldr	r2, [pc, #280]	; (800f824 <xPortStartScheduler+0x124>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d10a      	bne.n	800f726 <xPortStartScheduler+0x26>
	__asm volatile
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	f383 8811 	msr	BASEPRI, r3
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	613b      	str	r3, [r7, #16]
}
 800f722:	bf00      	nop
 800f724:	e7fe      	b.n	800f724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f726:	4b3e      	ldr	r3, [pc, #248]	; (800f820 <xPortStartScheduler+0x120>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a3f      	ldr	r2, [pc, #252]	; (800f828 <xPortStartScheduler+0x128>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d10a      	bne.n	800f746 <xPortStartScheduler+0x46>
	__asm volatile
 800f730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f734:	f383 8811 	msr	BASEPRI, r3
 800f738:	f3bf 8f6f 	isb	sy
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	60fb      	str	r3, [r7, #12]
}
 800f742:	bf00      	nop
 800f744:	e7fe      	b.n	800f744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f746:	4b39      	ldr	r3, [pc, #228]	; (800f82c <xPortStartScheduler+0x12c>)
 800f748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	22ff      	movs	r2, #255	; 0xff
 800f756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f760:	78fb      	ldrb	r3, [r7, #3]
 800f762:	b2db      	uxtb	r3, r3
 800f764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	4b31      	ldr	r3, [pc, #196]	; (800f830 <xPortStartScheduler+0x130>)
 800f76c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f76e:	4b31      	ldr	r3, [pc, #196]	; (800f834 <xPortStartScheduler+0x134>)
 800f770:	2207      	movs	r2, #7
 800f772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f774:	e009      	b.n	800f78a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f776:	4b2f      	ldr	r3, [pc, #188]	; (800f834 <xPortStartScheduler+0x134>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	3b01      	subs	r3, #1
 800f77c:	4a2d      	ldr	r2, [pc, #180]	; (800f834 <xPortStartScheduler+0x134>)
 800f77e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f780:	78fb      	ldrb	r3, [r7, #3]
 800f782:	b2db      	uxtb	r3, r3
 800f784:	005b      	lsls	r3, r3, #1
 800f786:	b2db      	uxtb	r3, r3
 800f788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f78a:	78fb      	ldrb	r3, [r7, #3]
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f792:	2b80      	cmp	r3, #128	; 0x80
 800f794:	d0ef      	beq.n	800f776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f796:	4b27      	ldr	r3, [pc, #156]	; (800f834 <xPortStartScheduler+0x134>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f1c3 0307 	rsb	r3, r3, #7
 800f79e:	2b04      	cmp	r3, #4
 800f7a0:	d00a      	beq.n	800f7b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a6:	f383 8811 	msr	BASEPRI, r3
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	60bb      	str	r3, [r7, #8]
}
 800f7b4:	bf00      	nop
 800f7b6:	e7fe      	b.n	800f7b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f7b8:	4b1e      	ldr	r3, [pc, #120]	; (800f834 <xPortStartScheduler+0x134>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	021b      	lsls	r3, r3, #8
 800f7be:	4a1d      	ldr	r2, [pc, #116]	; (800f834 <xPortStartScheduler+0x134>)
 800f7c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f7c2:	4b1c      	ldr	r3, [pc, #112]	; (800f834 <xPortStartScheduler+0x134>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f7ca:	4a1a      	ldr	r2, [pc, #104]	; (800f834 <xPortStartScheduler+0x134>)
 800f7cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	b2da      	uxtb	r2, r3
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f7d6:	4b18      	ldr	r3, [pc, #96]	; (800f838 <xPortStartScheduler+0x138>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a17      	ldr	r2, [pc, #92]	; (800f838 <xPortStartScheduler+0x138>)
 800f7dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f7e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f7e2:	4b15      	ldr	r3, [pc, #84]	; (800f838 <xPortStartScheduler+0x138>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a14      	ldr	r2, [pc, #80]	; (800f838 <xPortStartScheduler+0x138>)
 800f7e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f7ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f7ee:	f000 f8dd 	bl	800f9ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f7f2:	4b12      	ldr	r3, [pc, #72]	; (800f83c <xPortStartScheduler+0x13c>)
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f7f8:	f000 f8fc 	bl	800f9f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f7fc:	4b10      	ldr	r3, [pc, #64]	; (800f840 <xPortStartScheduler+0x140>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a0f      	ldr	r2, [pc, #60]	; (800f840 <xPortStartScheduler+0x140>)
 800f802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f808:	f7ff ff66 	bl	800f6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f80c:	f7ff f850 	bl	800e8b0 <vTaskSwitchContext>
	prvTaskExitError();
 800f810:	f7ff ff1c 	bl	800f64c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3718      	adds	r7, #24
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	e000ed00 	.word	0xe000ed00
 800f824:	410fc271 	.word	0x410fc271
 800f828:	410fc270 	.word	0x410fc270
 800f82c:	e000e400 	.word	0xe000e400
 800f830:	2400138c 	.word	0x2400138c
 800f834:	24001390 	.word	0x24001390
 800f838:	e000ed20 	.word	0xe000ed20
 800f83c:	24000010 	.word	0x24000010
 800f840:	e000ef34 	.word	0xe000ef34

0800f844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
	__asm volatile
 800f84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84e:	f383 8811 	msr	BASEPRI, r3
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	f3bf 8f4f 	dsb	sy
 800f85a:	607b      	str	r3, [r7, #4]
}
 800f85c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f85e:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <vPortEnterCritical+0x58>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	3301      	adds	r3, #1
 800f864:	4a0d      	ldr	r2, [pc, #52]	; (800f89c <vPortEnterCritical+0x58>)
 800f866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f868:	4b0c      	ldr	r3, [pc, #48]	; (800f89c <vPortEnterCritical+0x58>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d10f      	bne.n	800f890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f870:	4b0b      	ldr	r3, [pc, #44]	; (800f8a0 <vPortEnterCritical+0x5c>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	b2db      	uxtb	r3, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00a      	beq.n	800f890 <vPortEnterCritical+0x4c>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	603b      	str	r3, [r7, #0]
}
 800f88c:	bf00      	nop
 800f88e:	e7fe      	b.n	800f88e <vPortEnterCritical+0x4a>
	}
}
 800f890:	bf00      	nop
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr
 800f89c:	24000010 	.word	0x24000010
 800f8a0:	e000ed04 	.word	0xe000ed04

0800f8a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f8aa:	4b12      	ldr	r3, [pc, #72]	; (800f8f4 <vPortExitCritical+0x50>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d10a      	bne.n	800f8c8 <vPortExitCritical+0x24>
	__asm volatile
 800f8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b6:	f383 8811 	msr	BASEPRI, r3
 800f8ba:	f3bf 8f6f 	isb	sy
 800f8be:	f3bf 8f4f 	dsb	sy
 800f8c2:	607b      	str	r3, [r7, #4]
}
 800f8c4:	bf00      	nop
 800f8c6:	e7fe      	b.n	800f8c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f8c8:	4b0a      	ldr	r3, [pc, #40]	; (800f8f4 <vPortExitCritical+0x50>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	3b01      	subs	r3, #1
 800f8ce:	4a09      	ldr	r2, [pc, #36]	; (800f8f4 <vPortExitCritical+0x50>)
 800f8d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f8d2:	4b08      	ldr	r3, [pc, #32]	; (800f8f4 <vPortExitCritical+0x50>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d105      	bne.n	800f8e6 <vPortExitCritical+0x42>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	f383 8811 	msr	BASEPRI, r3
}
 800f8e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f8e6:	bf00      	nop
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	24000010 	.word	0x24000010
	...

0800f900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f900:	f3ef 8009 	mrs	r0, PSP
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	4b15      	ldr	r3, [pc, #84]	; (800f960 <pxCurrentTCBConst>)
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	f01e 0f10 	tst.w	lr, #16
 800f910:	bf08      	it	eq
 800f912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91a:	6010      	str	r0, [r2, #0]
 800f91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f920:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f924:	f380 8811 	msr	BASEPRI, r0
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	f3bf 8f6f 	isb	sy
 800f930:	f7fe ffbe 	bl	800e8b0 <vTaskSwitchContext>
 800f934:	f04f 0000 	mov.w	r0, #0
 800f938:	f380 8811 	msr	BASEPRI, r0
 800f93c:	bc09      	pop	{r0, r3}
 800f93e:	6819      	ldr	r1, [r3, #0]
 800f940:	6808      	ldr	r0, [r1, #0]
 800f942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f946:	f01e 0f10 	tst.w	lr, #16
 800f94a:	bf08      	it	eq
 800f94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f950:	f380 8809 	msr	PSP, r0
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	f3af 8000 	nop.w

0800f960 <pxCurrentTCBConst>:
 800f960:	24000d60 	.word	0x24000d60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f964:	bf00      	nop
 800f966:	bf00      	nop

0800f968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	607b      	str	r3, [r7, #4]
}
 800f980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f982:	f7fe fed3 	bl	800e72c <xTaskIncrementTick>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d003      	beq.n	800f994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f98c:	4b06      	ldr	r3, [pc, #24]	; (800f9a8 <xPortSysTickHandler+0x40>)
 800f98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f992:	601a      	str	r2, [r3, #0]
 800f994:	2300      	movs	r3, #0
 800f996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	f383 8811 	msr	BASEPRI, r3
}
 800f99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f9a0:	bf00      	nop
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	e000ed04 	.word	0xe000ed04

0800f9ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f9b0:	4b0b      	ldr	r3, [pc, #44]	; (800f9e0 <vPortSetupTimerInterrupt+0x34>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f9b6:	4b0b      	ldr	r3, [pc, #44]	; (800f9e4 <vPortSetupTimerInterrupt+0x38>)
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f9bc:	4b0a      	ldr	r3, [pc, #40]	; (800f9e8 <vPortSetupTimerInterrupt+0x3c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a0a      	ldr	r2, [pc, #40]	; (800f9ec <vPortSetupTimerInterrupt+0x40>)
 800f9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9c6:	099b      	lsrs	r3, r3, #6
 800f9c8:	4a09      	ldr	r2, [pc, #36]	; (800f9f0 <vPortSetupTimerInterrupt+0x44>)
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f9ce:	4b04      	ldr	r3, [pc, #16]	; (800f9e0 <vPortSetupTimerInterrupt+0x34>)
 800f9d0:	2207      	movs	r2, #7
 800f9d2:	601a      	str	r2, [r3, #0]
}
 800f9d4:	bf00      	nop
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	e000e010 	.word	0xe000e010
 800f9e4:	e000e018 	.word	0xe000e018
 800f9e8:	24000000 	.word	0x24000000
 800f9ec:	10624dd3 	.word	0x10624dd3
 800f9f0:	e000e014 	.word	0xe000e014

0800f9f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f9f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fa04 <vPortEnableVFP+0x10>
 800f9f8:	6801      	ldr	r1, [r0, #0]
 800f9fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f9fe:	6001      	str	r1, [r0, #0]
 800fa00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fa02:	bf00      	nop
 800fa04:	e000ed88 	.word	0xe000ed88

0800fa08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fa08:	b480      	push	{r7}
 800fa0a:	b085      	sub	sp, #20
 800fa0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fa0e:	f3ef 8305 	mrs	r3, IPSR
 800fa12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2b0f      	cmp	r3, #15
 800fa18:	d914      	bls.n	800fa44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fa1a:	4a17      	ldr	r2, [pc, #92]	; (800fa78 <vPortValidateInterruptPriority+0x70>)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	4413      	add	r3, r2
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fa24:	4b15      	ldr	r3, [pc, #84]	; (800fa7c <vPortValidateInterruptPriority+0x74>)
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	7afa      	ldrb	r2, [r7, #11]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d20a      	bcs.n	800fa44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa32:	f383 8811 	msr	BASEPRI, r3
 800fa36:	f3bf 8f6f 	isb	sy
 800fa3a:	f3bf 8f4f 	dsb	sy
 800fa3e:	607b      	str	r3, [r7, #4]
}
 800fa40:	bf00      	nop
 800fa42:	e7fe      	b.n	800fa42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fa44:	4b0e      	ldr	r3, [pc, #56]	; (800fa80 <vPortValidateInterruptPriority+0x78>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fa4c:	4b0d      	ldr	r3, [pc, #52]	; (800fa84 <vPortValidateInterruptPriority+0x7c>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d90a      	bls.n	800fa6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa58:	f383 8811 	msr	BASEPRI, r3
 800fa5c:	f3bf 8f6f 	isb	sy
 800fa60:	f3bf 8f4f 	dsb	sy
 800fa64:	603b      	str	r3, [r7, #0]
}
 800fa66:	bf00      	nop
 800fa68:	e7fe      	b.n	800fa68 <vPortValidateInterruptPriority+0x60>
	}
 800fa6a:	bf00      	nop
 800fa6c:	3714      	adds	r7, #20
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	e000e3f0 	.word	0xe000e3f0
 800fa7c:	2400138c 	.word	0x2400138c
 800fa80:	e000ed0c 	.word	0xe000ed0c
 800fa84:	24001390 	.word	0x24001390

0800fa88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b08a      	sub	sp, #40	; 0x28
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fa90:	2300      	movs	r3, #0
 800fa92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fa94:	f7fe fd8e 	bl	800e5b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fa98:	4b5b      	ldr	r3, [pc, #364]	; (800fc08 <pvPortMalloc+0x180>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d101      	bne.n	800faa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800faa0:	f000 f920 	bl	800fce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800faa4:	4b59      	ldr	r3, [pc, #356]	; (800fc0c <pvPortMalloc+0x184>)
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	4013      	ands	r3, r2
 800faac:	2b00      	cmp	r3, #0
 800faae:	f040 8093 	bne.w	800fbd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d01d      	beq.n	800faf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fab8:	2208      	movs	r2, #8
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4413      	add	r3, r2
 800fabe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f003 0307 	and.w	r3, r3, #7
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d014      	beq.n	800faf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f023 0307 	bic.w	r3, r3, #7
 800fad0:	3308      	adds	r3, #8
 800fad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f003 0307 	and.w	r3, r3, #7
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00a      	beq.n	800faf4 <pvPortMalloc+0x6c>
	__asm volatile
 800fade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae2:	f383 8811 	msr	BASEPRI, r3
 800fae6:	f3bf 8f6f 	isb	sy
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	617b      	str	r3, [r7, #20]
}
 800faf0:	bf00      	nop
 800faf2:	e7fe      	b.n	800faf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d06e      	beq.n	800fbd8 <pvPortMalloc+0x150>
 800fafa:	4b45      	ldr	r3, [pc, #276]	; (800fc10 <pvPortMalloc+0x188>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d869      	bhi.n	800fbd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fb04:	4b43      	ldr	r3, [pc, #268]	; (800fc14 <pvPortMalloc+0x18c>)
 800fb06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fb08:	4b42      	ldr	r3, [pc, #264]	; (800fc14 <pvPortMalloc+0x18c>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb0e:	e004      	b.n	800fb1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d903      	bls.n	800fb2c <pvPortMalloc+0xa4>
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d1f1      	bne.n	800fb10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fb2c:	4b36      	ldr	r3, [pc, #216]	; (800fc08 <pvPortMalloc+0x180>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d050      	beq.n	800fbd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb36:	6a3b      	ldr	r3, [r7, #32]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2208      	movs	r2, #8
 800fb3c:	4413      	add	r3, r2
 800fb3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	6a3b      	ldr	r3, [r7, #32]
 800fb46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4a:	685a      	ldr	r2, [r3, #4]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	1ad2      	subs	r2, r2, r3
 800fb50:	2308      	movs	r3, #8
 800fb52:	005b      	lsls	r3, r3, #1
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d91f      	bls.n	800fb98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb60:	69bb      	ldr	r3, [r7, #24]
 800fb62:	f003 0307 	and.w	r3, r3, #7
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d00a      	beq.n	800fb80 <pvPortMalloc+0xf8>
	__asm volatile
 800fb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb6e:	f383 8811 	msr	BASEPRI, r3
 800fb72:	f3bf 8f6f 	isb	sy
 800fb76:	f3bf 8f4f 	dsb	sy
 800fb7a:	613b      	str	r3, [r7, #16]
}
 800fb7c:	bf00      	nop
 800fb7e:	e7fe      	b.n	800fb7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	685a      	ldr	r2, [r3, #4]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	1ad2      	subs	r2, r2, r3
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8e:	687a      	ldr	r2, [r7, #4]
 800fb90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fb92:	69b8      	ldr	r0, [r7, #24]
 800fb94:	f000 f908 	bl	800fda8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fb98:	4b1d      	ldr	r3, [pc, #116]	; (800fc10 <pvPortMalloc+0x188>)
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	4a1b      	ldr	r2, [pc, #108]	; (800fc10 <pvPortMalloc+0x188>)
 800fba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fba6:	4b1a      	ldr	r3, [pc, #104]	; (800fc10 <pvPortMalloc+0x188>)
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	4b1b      	ldr	r3, [pc, #108]	; (800fc18 <pvPortMalloc+0x190>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d203      	bcs.n	800fbba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fbb2:	4b17      	ldr	r3, [pc, #92]	; (800fc10 <pvPortMalloc+0x188>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4a18      	ldr	r2, [pc, #96]	; (800fc18 <pvPortMalloc+0x190>)
 800fbb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	685a      	ldr	r2, [r3, #4]
 800fbbe:	4b13      	ldr	r3, [pc, #76]	; (800fc0c <pvPortMalloc+0x184>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	431a      	orrs	r2, r3
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	2200      	movs	r2, #0
 800fbcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fbce:	4b13      	ldr	r3, [pc, #76]	; (800fc1c <pvPortMalloc+0x194>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	4a11      	ldr	r2, [pc, #68]	; (800fc1c <pvPortMalloc+0x194>)
 800fbd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fbd8:	f7fe fcfa 	bl	800e5d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	f003 0307 	and.w	r3, r3, #7
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00a      	beq.n	800fbfc <pvPortMalloc+0x174>
	__asm volatile
 800fbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	60fb      	str	r3, [r7, #12]
}
 800fbf8:	bf00      	nop
 800fbfa:	e7fe      	b.n	800fbfa <pvPortMalloc+0x172>
	return pvReturn;
 800fbfc:	69fb      	ldr	r3, [r7, #28]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3728      	adds	r7, #40	; 0x28
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	24004f9c 	.word	0x24004f9c
 800fc0c:	24004fb0 	.word	0x24004fb0
 800fc10:	24004fa0 	.word	0x24004fa0
 800fc14:	24004f94 	.word	0x24004f94
 800fc18:	24004fa4 	.word	0x24004fa4
 800fc1c:	24004fa8 	.word	0x24004fa8

0800fc20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b086      	sub	sp, #24
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d04d      	beq.n	800fcce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fc32:	2308      	movs	r3, #8
 800fc34:	425b      	negs	r3, r3
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	4413      	add	r3, r2
 800fc3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	685a      	ldr	r2, [r3, #4]
 800fc44:	4b24      	ldr	r3, [pc, #144]	; (800fcd8 <vPortFree+0xb8>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4013      	ands	r3, r2
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d10a      	bne.n	800fc64 <vPortFree+0x44>
	__asm volatile
 800fc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc52:	f383 8811 	msr	BASEPRI, r3
 800fc56:	f3bf 8f6f 	isb	sy
 800fc5a:	f3bf 8f4f 	dsb	sy
 800fc5e:	60fb      	str	r3, [r7, #12]
}
 800fc60:	bf00      	nop
 800fc62:	e7fe      	b.n	800fc62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d00a      	beq.n	800fc82 <vPortFree+0x62>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	60bb      	str	r3, [r7, #8]
}
 800fc7e:	bf00      	nop
 800fc80:	e7fe      	b.n	800fc80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	685a      	ldr	r2, [r3, #4]
 800fc86:	4b14      	ldr	r3, [pc, #80]	; (800fcd8 <vPortFree+0xb8>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4013      	ands	r3, r2
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d01e      	beq.n	800fcce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d11a      	bne.n	800fcce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	685a      	ldr	r2, [r3, #4]
 800fc9c:	4b0e      	ldr	r3, [pc, #56]	; (800fcd8 <vPortFree+0xb8>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	43db      	mvns	r3, r3
 800fca2:	401a      	ands	r2, r3
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fca8:	f7fe fc84 	bl	800e5b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	685a      	ldr	r2, [r3, #4]
 800fcb0:	4b0a      	ldr	r3, [pc, #40]	; (800fcdc <vPortFree+0xbc>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	4a09      	ldr	r2, [pc, #36]	; (800fcdc <vPortFree+0xbc>)
 800fcb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fcba:	6938      	ldr	r0, [r7, #16]
 800fcbc:	f000 f874 	bl	800fda8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fcc0:	4b07      	ldr	r3, [pc, #28]	; (800fce0 <vPortFree+0xc0>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	4a06      	ldr	r2, [pc, #24]	; (800fce0 <vPortFree+0xc0>)
 800fcc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fcca:	f7fe fc81 	bl	800e5d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fcce:	bf00      	nop
 800fcd0:	3718      	adds	r7, #24
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	24004fb0 	.word	0x24004fb0
 800fcdc:	24004fa0 	.word	0x24004fa0
 800fce0:	24004fac 	.word	0x24004fac

0800fce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fcea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fcee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fcf0:	4b27      	ldr	r3, [pc, #156]	; (800fd90 <prvHeapInit+0xac>)
 800fcf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f003 0307 	and.w	r3, r3, #7
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d00c      	beq.n	800fd18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	3307      	adds	r3, #7
 800fd02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f023 0307 	bic.w	r3, r3, #7
 800fd0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fd0c:	68ba      	ldr	r2, [r7, #8]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	4a1f      	ldr	r2, [pc, #124]	; (800fd90 <prvHeapInit+0xac>)
 800fd14:	4413      	add	r3, r2
 800fd16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fd1c:	4a1d      	ldr	r2, [pc, #116]	; (800fd94 <prvHeapInit+0xb0>)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fd22:	4b1c      	ldr	r3, [pc, #112]	; (800fd94 <prvHeapInit+0xb0>)
 800fd24:	2200      	movs	r2, #0
 800fd26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	68ba      	ldr	r2, [r7, #8]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fd30:	2208      	movs	r2, #8
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	1a9b      	subs	r3, r3, r2
 800fd36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f023 0307 	bic.w	r3, r3, #7
 800fd3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	4a15      	ldr	r2, [pc, #84]	; (800fd98 <prvHeapInit+0xb4>)
 800fd44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd46:	4b14      	ldr	r3, [pc, #80]	; (800fd98 <prvHeapInit+0xb4>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd4e:	4b12      	ldr	r3, [pc, #72]	; (800fd98 <prvHeapInit+0xb4>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2200      	movs	r2, #0
 800fd54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	1ad2      	subs	r2, r2, r3
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd64:	4b0c      	ldr	r3, [pc, #48]	; (800fd98 <prvHeapInit+0xb4>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	4a0a      	ldr	r2, [pc, #40]	; (800fd9c <prvHeapInit+0xb8>)
 800fd72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	685b      	ldr	r3, [r3, #4]
 800fd78:	4a09      	ldr	r2, [pc, #36]	; (800fda0 <prvHeapInit+0xbc>)
 800fd7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd7c:	4b09      	ldr	r3, [pc, #36]	; (800fda4 <prvHeapInit+0xc0>)
 800fd7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fd82:	601a      	str	r2, [r3, #0]
}
 800fd84:	bf00      	nop
 800fd86:	3714      	adds	r7, #20
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr
 800fd90:	24001394 	.word	0x24001394
 800fd94:	24004f94 	.word	0x24004f94
 800fd98:	24004f9c 	.word	0x24004f9c
 800fd9c:	24004fa4 	.word	0x24004fa4
 800fda0:	24004fa0 	.word	0x24004fa0
 800fda4:	24004fb0 	.word	0x24004fb0

0800fda8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b085      	sub	sp, #20
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fdb0:	4b28      	ldr	r3, [pc, #160]	; (800fe54 <prvInsertBlockIntoFreeList+0xac>)
 800fdb2:	60fb      	str	r3, [r7, #12]
 800fdb4:	e002      	b.n	800fdbc <prvInsertBlockIntoFreeList+0x14>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	60fb      	str	r3, [r7, #12]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d8f7      	bhi.n	800fdb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	68ba      	ldr	r2, [r7, #8]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d108      	bne.n	800fdea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	441a      	add	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	68ba      	ldr	r2, [r7, #8]
 800fdf4:	441a      	add	r2, r3
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d118      	bne.n	800fe30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	4b15      	ldr	r3, [pc, #84]	; (800fe58 <prvInsertBlockIntoFreeList+0xb0>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d00d      	beq.n	800fe26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	685a      	ldr	r2, [r3, #4]
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	441a      	add	r2, r3
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	681a      	ldr	r2, [r3, #0]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	e008      	b.n	800fe38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fe26:	4b0c      	ldr	r3, [pc, #48]	; (800fe58 <prvInsertBlockIntoFreeList+0xb0>)
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	e003      	b.n	800fe38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d002      	beq.n	800fe46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe46:	bf00      	nop
 800fe48:	3714      	adds	r7, #20
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	24004f94 	.word	0x24004f94
 800fe58:	24004f9c 	.word	0x24004f9c

0800fe5c <__libc_init_array>:
 800fe5c:	b570      	push	{r4, r5, r6, lr}
 800fe5e:	4d0d      	ldr	r5, [pc, #52]	; (800fe94 <__libc_init_array+0x38>)
 800fe60:	4c0d      	ldr	r4, [pc, #52]	; (800fe98 <__libc_init_array+0x3c>)
 800fe62:	1b64      	subs	r4, r4, r5
 800fe64:	10a4      	asrs	r4, r4, #2
 800fe66:	2600      	movs	r6, #0
 800fe68:	42a6      	cmp	r6, r4
 800fe6a:	d109      	bne.n	800fe80 <__libc_init_array+0x24>
 800fe6c:	4d0b      	ldr	r5, [pc, #44]	; (800fe9c <__libc_init_array+0x40>)
 800fe6e:	4c0c      	ldr	r4, [pc, #48]	; (800fea0 <__libc_init_array+0x44>)
 800fe70:	f000 f82e 	bl	800fed0 <_init>
 800fe74:	1b64      	subs	r4, r4, r5
 800fe76:	10a4      	asrs	r4, r4, #2
 800fe78:	2600      	movs	r6, #0
 800fe7a:	42a6      	cmp	r6, r4
 800fe7c:	d105      	bne.n	800fe8a <__libc_init_array+0x2e>
 800fe7e:	bd70      	pop	{r4, r5, r6, pc}
 800fe80:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe84:	4798      	blx	r3
 800fe86:	3601      	adds	r6, #1
 800fe88:	e7ee      	b.n	800fe68 <__libc_init_array+0xc>
 800fe8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fe8e:	4798      	blx	r3
 800fe90:	3601      	adds	r6, #1
 800fe92:	e7f2      	b.n	800fe7a <__libc_init_array+0x1e>
 800fe94:	08010138 	.word	0x08010138
 800fe98:	08010138 	.word	0x08010138
 800fe9c:	08010138 	.word	0x08010138
 800fea0:	0801013c 	.word	0x0801013c

0800fea4 <memcpy>:
 800fea4:	440a      	add	r2, r1
 800fea6:	4291      	cmp	r1, r2
 800fea8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800feac:	d100      	bne.n	800feb0 <memcpy+0xc>
 800feae:	4770      	bx	lr
 800feb0:	b510      	push	{r4, lr}
 800feb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800feb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feba:	4291      	cmp	r1, r2
 800febc:	d1f9      	bne.n	800feb2 <memcpy+0xe>
 800febe:	bd10      	pop	{r4, pc}

0800fec0 <memset>:
 800fec0:	4402      	add	r2, r0
 800fec2:	4603      	mov	r3, r0
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d100      	bne.n	800feca <memset+0xa>
 800fec8:	4770      	bx	lr
 800feca:	f803 1b01 	strb.w	r1, [r3], #1
 800fece:	e7f9      	b.n	800fec4 <memset+0x4>

0800fed0 <_init>:
 800fed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed2:	bf00      	nop
 800fed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fed6:	bc08      	pop	{r3}
 800fed8:	469e      	mov	lr, r3
 800feda:	4770      	bx	lr

0800fedc <_fini>:
 800fedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fede:	bf00      	nop
 800fee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fee2:	bc08      	pop	{r3}
 800fee4:	469e      	mov	lr, r3
 800fee6:	4770      	bx	lr
