
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a830  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801aad0  0801aad0  0002aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801af68  0801af68  0002af68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801af70  0801af70  0002af70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801af74  0801af74  0002af74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  24000000  0801af78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000687c  24000140  0801b0ac  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240069bc  0801b0ac  000369bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040d85  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007cf8  00000000  00000000  00070ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b98  00000000  00000000  00078be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002850  00000000  00000000  0007b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000467e3  00000000  00000000  0007dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000432d1  00000000  00000000  000c47ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001969c9  00000000  00000000  00107a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e445  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bc60  00000000  00000000  0029e498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801aab8 	.word	0x0801aab8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801aab8 	.word	0x0801aab8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fc05 	bl	8005e78 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f9a8 	bl	80039c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fd20 	bl	80070c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f99b 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fe63 	bl	8006380 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f982 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fe55 	bl	8006380 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f974 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fe47 	bl	8006380 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f966 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fe39 	bl	8006380 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f958 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 fe2a 	bl	8006380 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f949 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 fe1b 	bl	8006380 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f93a 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fe0c 	bl	8006380 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f92b 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fdfd 	bl	8006380 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f91c 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fdee 	bl	8006380 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f90d 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fddf 	bl	8006380 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f8fe 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fdd0 	bl	8006380 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f8ef 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 faed 	bl	8005e78 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f890 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fd58 	bl	8006380 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f877 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fd4a 	bl	8006380 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f869 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fd3c 	bl	8006380 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f85b 	bl	80039c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fd2e 	bl	8006380 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f84d 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fad0 	bl	800afa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fac4 	bl	800afa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fab8 	bl	800afa0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 f963 	bl	8007d40 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 ffa2 	bl	80039c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f004 ffa6 	bl	8005a30 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f004 ffa0 	bl	8005a30 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 f903 	bl	8007d40 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ff42 	bl	80039c8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fa8d 	bl	801a0ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fccb 	bl	8007534 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ff10 	bl	80039c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fee6 	bl	8007994 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fefb 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f9a3 	bl	800afa0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 f84e 	bl	8007d40 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fe8d 	bl	80039c8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fb98 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fbaf 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fb6f 	bl	80073f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fb86 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fb67 	bl	80073f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fb7e 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fb5f 	bl	80073f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fb76 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fb57 	bl	80073f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fb6e 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fb4f 	bl	80073f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fb66 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fb47 	bl	80073f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fb5e 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fb3f 	bl	80073f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fb56 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fb37 	bl	80073f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fb4e 	bl	8007428 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 f96e 	bl	801a0ac <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 ff26 	bl	800acbc <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fecb 	bl	800acbc <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fd18 	bl	800a9ec <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1a      	cmp	r3, #26
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fc6c 	bl	800a9ec <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fd78 	bl	800acbc <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fd15 	bl	800acbc <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fb62 	bl	800a9ec <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fc40 	bl	800acbc <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1a      	cmp	r3, #26
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fa4b 	bl	800a9ec <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fb58 	bl	800acbc <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fc5a 	bl	801a0ac <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fa33 	bl	800acbc <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 f881 	bl	800a9ec <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f995 	bl	800acbc <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 faf5 	bl	801a0ac <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 faec 	bl	801a0ac <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 ff4d 	bl	800a9ec <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 ff3a 	bl	800a9ec <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 fa37 	bl	801a0ac <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 fa30 	bl	801a0ac <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 fe93 	bl	800a9ec <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1a      	cmp	r3, #26
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 feab 	bl	800ab10 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 ff53 	bl	800acbc <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fd9f 	bl	800a9ec <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
uint16_t VirtAddVarTab[NB_OF_VAR] = {0x5550, 0x5551, 0x5552, 0x5553, 0x5554, 0x5555, 0x5556, 0x5557, 0x5558, 0x5559, 0x555A, 0x555B, 0x555C, 0x555D, 0x555E, 0x555F, 0x6660, 0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666, 0x6667, 0x6668, 0x6669, 0x666A};
uint16_t VarDataTab[NB_OF_VAR] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

uint16_t local_cpy[NB_OF_VAR];

void handle_error(ERROR_STRUCT error) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	80b8      	strh	r0, [r7, #4]

	switch (error.category) {
 8001f38:	793b      	ldrb	r3, [r7, #4]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d826      	bhi.n	8001f8c <handle_error+0x5c>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <handle_error+0x14>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f59 	.word	0x08001f59
 8001f48:	08001f6d 	.word	0x08001f6d
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	08001f7d 	.word	0x08001f7d
 8001f54:	08001f85 	.word	0x08001f85
	case EC_power_supply_rail:
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <handle_error+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f014 ffde 	bl	8016f20 <osEventFlagsSet>
		increment_error_counter(error);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f849 	bl	8001ffc <increment_error_counter>

		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 8001f6a:	e010      	b.n	8001f8e <handle_error+0x5e>
	case EC_seu:
		increment_error_counter(error);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f845 	bl	8001ffc <increment_error_counter>
		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 8001f72:	e00c      	b.n	8001f8e <handle_error+0x5e>
	case EC_peripheral:
		increment_error_counter(error);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f841 	bl	8001ffc <increment_error_counter>
		//send_error_packet(error);
		//NVIC_SystemReset();
		break;
 8001f7a:	e008      	b.n	8001f8e <handle_error+0x5e>
	case EC_brownout:
		increment_error_counter(error);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f83d 	bl	8001ffc <increment_error_counter>
		break;
 8001f82:	e004      	b.n	8001f8e <handle_error+0x5e>
	case EC_watchdog:
		increment_error_counter(error);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f839 	bl	8001ffc <increment_error_counter>
		break;
 8001f8a:	e000      	b.n	8001f8e <handle_error+0x5e>
	default:
		//send_error_packet(error);
		break;
 8001f8c:	bf00      	nop
	}
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	24001ad0 	.word	0x24001ad0

08001f9c <error_counter_init>:

void error_counter_init() {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
	// Starting up EEPROM Emulator
	HAL_FLASH_Unlock();
 8001fa2:	f008 fdb5 	bl	800ab10 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fa6:	f7fe fef7 	bl	8000d98 <EE_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <error_counter_init+0x18>
		Error_Handler();
 8001fb0:	f001 fd0a 	bl	80039c8 <Error_Handler>
	}

	// Updating our local copy of error counters from EE
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	e013      	b.n	8001fe2 <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <error_counter_init+0x58>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <error_counter_init+0x5c>)
 8001fc8:	440b      	add	r3, r1
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4610      	mov	r0, r2
 8001fce:	f7ff fb9b 	bl	8001708 <EE_ReadVariable>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <error_counter_init+0x40>
			Error_Handler();
 8001fd8:	f001 fcf6 	bl	80039c8 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b1a      	cmp	r3, #26
 8001fe6:	dde8      	ble.n	8001fba <error_counter_init+0x1e>
		}
	}


}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	24000000 	.word	0x24000000
 8001ff8:	240003dc 	.word	0x240003dc

08001ffc <increment_error_counter>:


void increment_error_counter(ERROR_STRUCT error) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 8002004:	793b      	ldrb	r3, [r7, #4]
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <increment_error_counter+0x38>)
 8002008:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800200c:	3201      	adds	r2, #1
 800200e:	b291      	uxth	r1, r2
 8002010:	4a08      	ldr	r2, [pc, #32]	; (8002034 <increment_error_counter+0x38>)
 8002012:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 8002016:	797b      	ldrb	r3, [r7, #5]
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <increment_error_counter+0x38>)
 800201a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800201e:	3201      	adds	r2, #1
 8002020:	b291      	uxth	r1, r2
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <increment_error_counter+0x38>)
 8002024:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//update_error_counter();
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	240003dc 	.word	0x240003dc

08002038 <reset_error_counters>:
		}
	}
}


void reset_error_counters() {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
	// Resets all error counters to 0
	for (int i = 0; i < NB_OF_VAR; i++) {
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	e013      	b.n	800206c <reset_error_counters+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], VarDataTab[i])) != HAL_OK) {
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <reset_error_counters+0x44>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <reset_error_counters+0x48>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f7ff fb9e 	bl	8001798 <EE_WriteVariable>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <reset_error_counters+0x2e>
			Error_Handler();
 8002062:	f001 fcb1 	bl	80039c8 <Error_Handler>
	for (int i = 0; i < NB_OF_VAR; i++) {
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3301      	adds	r3, #1
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b1a      	cmp	r3, #26
 8002070:	dde8      	ble.n	8002044 <reset_error_counters+0xc>
		}
	}
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	24000000 	.word	0x24000000
 8002080:	240003a4 	.word	0x240003a4

08002084 <send_previous_error_packet>:

void send_previous_error_packet() {
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	; 0x38
 8002088:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_PACKET_SIZE];

	buffer[0] = ERROR_PACKET_SYNC;
 800208a:	23dd      	movs	r3, #221	; 0xdd
 800208c:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_PACKET_SYNC;
 800208e:	23dd      	movs	r3, #221	; 0xdd
 8002090:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 8002092:	4b98      	ldr	r3, [pc, #608]	; (80022f4 <send_previous_error_packet+0x270>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	b29b      	uxth	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 800209e:	4b95      	ldr	r3, [pc, #596]	; (80022f4 <send_previous_error_packet+0x270>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80020a6:	4b93      	ldr	r3, [pc, #588]	; (80022f4 <send_previous_error_packet+0x270>)
 80020a8:	885b      	ldrh	r3, [r3, #2]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80020b2:	4b90      	ldr	r3, [pc, #576]	; (80022f4 <send_previous_error_packet+0x270>)
 80020b4:	885b      	ldrh	r3, [r3, #2]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80020ba:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <send_previous_error_packet+0x270>)
 80020bc:	889b      	ldrh	r3, [r3, #4]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <send_previous_error_packet+0x270>)
 80020c8:	889b      	ldrh	r3, [r3, #4]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <send_previous_error_packet+0x270>)
 80020d0:	88db      	ldrh	r3, [r3, #6]
 80020d2:	0a1b      	lsrs	r3, r3, #8
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 80020da:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <send_previous_error_packet+0x270>)
 80020dc:	88db      	ldrh	r3, [r3, #6]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 80020e2:	4b84      	ldr	r3, [pc, #528]	; (80022f4 <send_previous_error_packet+0x270>)
 80020e4:	891b      	ldrh	r3, [r3, #8]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 80020ee:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <send_previous_error_packet+0x270>)
 80020f0:	891b      	ldrh	r3, [r3, #8]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 80020f6:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <send_previous_error_packet+0x270>)
 80020f8:	895b      	ldrh	r3, [r3, #10]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 8002102:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <send_previous_error_packet+0x270>)
 8002104:	895b      	ldrh	r3, [r3, #10]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 800210a:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <send_previous_error_packet+0x270>)
 800210c:	899b      	ldrh	r3, [r3, #12]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8002116:	4b77      	ldr	r3, [pc, #476]	; (80022f4 <send_previous_error_packet+0x270>)
 8002118:	899b      	ldrh	r3, [r3, #12]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800211e:	4b75      	ldr	r3, [pc, #468]	; (80022f4 <send_previous_error_packet+0x270>)
 8002120:	89db      	ldrh	r3, [r3, #14]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	b29b      	uxth	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 800212a:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <send_previous_error_packet+0x270>)
 800212c:	89db      	ldrh	r3, [r3, #14]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 8002132:	4b70      	ldr	r3, [pc, #448]	; (80022f4 <send_previous_error_packet+0x270>)
 8002134:	8a1b      	ldrh	r3, [r3, #16]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	b29b      	uxth	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <send_previous_error_packet+0x270>)
 8002140:	8a1b      	ldrh	r3, [r3, #16]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8002146:	4b6b      	ldr	r3, [pc, #428]	; (80022f4 <send_previous_error_packet+0x270>)
 8002148:	8a5b      	ldrh	r3, [r3, #18]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 8002152:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <send_previous_error_packet+0x270>)
 8002154:	8a5b      	ldrh	r3, [r3, #18]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 800215a:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <send_previous_error_packet+0x270>)
 800215c:	8a9b      	ldrh	r3, [r3, #20]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	b29b      	uxth	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <send_previous_error_packet+0x270>)
 8002168:	8a9b      	ldrh	r3, [r3, #20]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800216e:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <send_previous_error_packet+0x270>)
 8002170:	8adb      	ldrh	r3, [r3, #22]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	b29b      	uxth	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 800217a:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <send_previous_error_packet+0x270>)
 800217c:	8adb      	ldrh	r3, [r3, #22]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <send_previous_error_packet+0x270>)
 8002184:	8b1b      	ldrh	r3, [r3, #24]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b29b      	uxth	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800218e:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <send_previous_error_packet+0x270>)
 8002190:	8b1b      	ldrh	r3, [r3, #24]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 8002196:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <send_previous_error_packet+0x270>)
 8002198:	8b5b      	ldrh	r3, [r3, #26]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b29b      	uxth	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 80021a2:	4b54      	ldr	r3, [pc, #336]	; (80022f4 <send_previous_error_packet+0x270>)
 80021a4:	8b5b      	ldrh	r3, [r3, #26]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80021aa:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <send_previous_error_packet+0x270>)
 80021ac:	8b9b      	ldrh	r3, [r3, #28]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80021b6:	4b4f      	ldr	r3, [pc, #316]	; (80022f4 <send_previous_error_packet+0x270>)
 80021b8:	8b9b      	ldrh	r3, [r3, #28]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80021be:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <send_previous_error_packet+0x270>)
 80021c0:	8bdb      	ldrh	r3, [r3, #30]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80021cc:	4b49      	ldr	r3, [pc, #292]	; (80022f4 <send_previous_error_packet+0x270>)
 80021ce:	8bdb      	ldrh	r3, [r3, #30]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <send_previous_error_packet+0x270>)
 80021d8:	8c1b      	ldrh	r3, [r3, #32]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	b29b      	uxth	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 80021e4:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <send_previous_error_packet+0x270>)
 80021e6:	8c1b      	ldrh	r3, [r3, #32]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 80021ee:	4b41      	ldr	r3, [pc, #260]	; (80022f4 <send_previous_error_packet+0x270>)
 80021f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 80021fc:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <send_previous_error_packet+0x270>)
 80021fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <send_previous_error_packet+0x270>)
 8002208:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8002214:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <send_previous_error_packet+0x270>)
 8002216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002218:	b2db      	uxtb	r3, r3
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800221e:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <send_previous_error_packet+0x270>)
 8002220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <send_previous_error_packet+0x270>)
 800222e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <send_previous_error_packet+0x270>)
 8002238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <send_previous_error_packet+0x270>)
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <send_previous_error_packet+0x270>)
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	b29b      	uxth	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <send_previous_error_packet+0x270>)
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <send_previous_error_packet+0x270>)
 8002268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	b29b      	uxth	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8002274:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <send_previous_error_packet+0x270>)
 8002276:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <send_previous_error_packet+0x270>)
 8002280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <send_previous_error_packet+0x270>)
 800228e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <send_previous_error_packet+0x270>)
 8002298:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <send_previous_error_packet+0x270>)
 80022a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <send_previous_error_packet+0x270>)
 80022b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <send_previous_error_packet+0x270>)
 80022be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <send_previous_error_packet+0x270>)
 80022c8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <send_previous_error_packet+0x270>)
 80022d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	HAL_UART_Transmit(&huart1, buffer, ERROR_PACKET_SIZE, 100);
 80022de:	4639      	mov	r1, r7
 80022e0:	2364      	movs	r3, #100	; 0x64
 80022e2:	2238      	movs	r2, #56	; 0x38
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <send_previous_error_packet+0x274>)
 80022e6:	f011 feb7 	bl	8014058 <HAL_UART_Transmit>
	//send_junk_packet();
}
 80022ea:	bf00      	nop
 80022ec:	3738      	adds	r7, #56	; 0x38
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	240003dc 	.word	0x240003dc
 80022f8:	24001e7c 	.word	0x24001e7c

080022fc <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <vApplicationTickHook+0x18>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	4a03      	ldr	r2, [pc, #12]	; (8002314 <vApplicationTickHook+0x18>)
 8002308:	6013      	str	r3, [r2, #0]
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	24001b18 	.word	0x24001b18

08002318 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002334:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <MX_FREERTOS_Init+0x98>)
 8002336:	2100      	movs	r1, #0
 8002338:	4824      	ldr	r0, [pc, #144]	; (80023cc <MX_FREERTOS_Init+0x9c>)
 800233a:	f014 fce5 	bl	8016d08 <osThreadNew>
 800233e:	4603      	mov	r3, r0
 8002340:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <MX_FREERTOS_Init+0xa0>)
 8002342:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002344:	4a23      	ldr	r2, [pc, #140]	; (80023d4 <MX_FREERTOS_Init+0xa4>)
 8002346:	2100      	movs	r1, #0
 8002348:	4823      	ldr	r0, [pc, #140]	; (80023d8 <MX_FREERTOS_Init+0xa8>)
 800234a:	f014 fcdd 	bl	8016d08 <osThreadNew>
 800234e:	4603      	mov	r3, r0
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <MX_FREERTOS_Init+0xac>)
 8002352:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002354:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <MX_FREERTOS_Init+0xb0>)
 8002356:	2100      	movs	r1, #0
 8002358:	4822      	ldr	r0, [pc, #136]	; (80023e4 <MX_FREERTOS_Init+0xb4>)
 800235a:	f014 fcd5 	bl	8016d08 <osThreadNew>
 800235e:	4603      	mov	r3, r0
 8002360:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <MX_FREERTOS_Init+0xb8>)
 8002362:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002364:	4a21      	ldr	r2, [pc, #132]	; (80023ec <MX_FREERTOS_Init+0xbc>)
 8002366:	2100      	movs	r1, #0
 8002368:	4821      	ldr	r0, [pc, #132]	; (80023f0 <MX_FREERTOS_Init+0xc0>)
 800236a:	f014 fccd 	bl	8016d08 <osThreadNew>
 800236e:	4603      	mov	r3, r0
 8002370:	4a20      	ldr	r2, [pc, #128]	; (80023f4 <MX_FREERTOS_Init+0xc4>)
 8002372:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002374:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <MX_FREERTOS_Init+0xc8>)
 8002376:	2100      	movs	r1, #0
 8002378:	4820      	ldr	r0, [pc, #128]	; (80023fc <MX_FREERTOS_Init+0xcc>)
 800237a:	f014 fcc5 	bl	8016d08 <osThreadNew>
 800237e:	4603      	mov	r3, r0
 8002380:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <MX_FREERTOS_Init+0xd0>)
 8002382:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002384:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <MX_FREERTOS_Init+0xd4>)
 8002386:	2100      	movs	r1, #0
 8002388:	481f      	ldr	r0, [pc, #124]	; (8002408 <MX_FREERTOS_Init+0xd8>)
 800238a:	f014 fcbd 	bl	8016d08 <osThreadNew>
 800238e:	4603      	mov	r3, r0
 8002390:	4a1e      	ldr	r2, [pc, #120]	; (800240c <MX_FREERTOS_Init+0xdc>)
 8002392:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002394:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <MX_FREERTOS_Init+0xe0>)
 8002396:	2100      	movs	r1, #0
 8002398:	481e      	ldr	r0, [pc, #120]	; (8002414 <MX_FREERTOS_Init+0xe4>)
 800239a:	f014 fcb5 	bl	8016d08 <osThreadNew>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <MX_FREERTOS_Init+0xe8>)
 80023a2:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <MX_FREERTOS_Init+0xec>)
 80023a6:	2100      	movs	r1, #0
 80023a8:	481d      	ldr	r0, [pc, #116]	; (8002420 <MX_FREERTOS_Init+0xf0>)
 80023aa:	f014 fcad 	bl	8016d08 <osThreadNew>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <MX_FREERTOS_Init+0xf4>)
 80023b2:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <MX_FREERTOS_Init+0xf8>)
 80023b6:	2100      	movs	r1, #0
 80023b8:	481c      	ldr	r0, [pc, #112]	; (800242c <MX_FREERTOS_Init+0xfc>)
 80023ba:	f014 fca5 	bl	8016d08 <osThreadNew>
 80023be:	4603      	mov	r3, r0
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <MX_FREERTOS_Init+0x100>)
 80023c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	0801ad38 	.word	0x0801ad38
 80023cc:	08002435 	.word	0x08002435
 80023d0:	24000414 	.word	0x24000414
 80023d4:	0801ad5c 	.word	0x0801ad5c
 80023d8:	0800245d 	.word	0x0800245d
 80023dc:	24000674 	.word	0x24000674
 80023e0:	0801ad80 	.word	0x0801ad80
 80023e4:	08002485 	.word	0x08002485
 80023e8:	240008d4 	.word	0x240008d4
 80023ec:	0801ada4 	.word	0x0801ada4
 80023f0:	080024ad 	.word	0x080024ad
 80023f4:	24000b34 	.word	0x24000b34
 80023f8:	0801adc8 	.word	0x0801adc8
 80023fc:	08002525 	.word	0x08002525
 8002400:	24000d94 	.word	0x24000d94
 8002404:	0801adec 	.word	0x0801adec
 8002408:	0800259d 	.word	0x0800259d
 800240c:	24000ff4 	.word	0x24000ff4
 8002410:	0801ae10 	.word	0x0801ae10
 8002414:	080025cd 	.word	0x080025cd
 8002418:	24001254 	.word	0x24001254
 800241c:	0801ae34 	.word	0x0801ae34
 8002420:	080025fd 	.word	0x080025fd
 8002424:	240014b4 	.word	0x240014b4
 8002428:	0801ae58 	.word	0x0801ae58
 800242c:	080026cd 	.word	0x080026cd
 8002430:	24001714 	.word	0x24001714

08002434 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <PMT_init+0x24>)
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002444:	2200      	movs	r2, #0
 8002446:	2101      	movs	r1, #1
 8002448:	f014 fde0 	bl	801700c <osEventFlagsWait>

		create_pmt_packet();
 800244c:	f001 faca 	bl	80039e4 <create_pmt_packet>

		osThreadYield();
 8002450:	f014 fcec 	bl	8016e2c <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002454:	e7f2      	b.n	800243c <PMT_init+0x8>
 8002456:	bf00      	nop
 8002458:	24001ac8 	.word	0x24001ac8

0800245c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <ERPA_init+0x24>)
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246c:	2200      	movs	r2, #0
 800246e:	2102      	movs	r1, #2
 8002470:	f014 fdcc 	bl	801700c <osEventFlagsWait>

		create_erpa_packet();
 8002474:	f001 fafc 	bl	8003a70 <create_erpa_packet>

		osThreadYield();
 8002478:	f014 fcd8 	bl	8016e2c <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800247c:	e7f2      	b.n	8002464 <ERPA_init+0x8>
 800247e:	bf00      	nop
 8002480:	24001ac8 	.word	0x24001ac8

08002484 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HK_init+0x24>)
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002494:	2200      	movs	r2, #0
 8002496:	2104      	movs	r1, #4
 8002498:	f014 fdb8 	bl	801700c <osEventFlagsWait>

		create_hk_packet();
 800249c:	f001 fb46 	bl	8003b2c <create_hk_packet>

		osThreadYield();
 80024a0:	f014 fcc4 	bl	8016e2c <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80024a4:	e7f2      	b.n	800248c <HK_init+0x8>
 80024a6:	bf00      	nop
 80024a8:	24001ac8 	.word	0x24001ac8

080024ac <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <AUTOINIT_init+0x70>)
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024bc:	2200      	movs	r2, #0
 80024be:	2104      	movs	r1, #4
 80024c0:	f014 fda4 	bl	801700c <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e012      	b.n	80024f0 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <AUTOINIT_init+0x74>)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <AUTOINIT_init+0x74>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	889b      	ldrh	r3, [r3, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	4619      	mov	r1, r3
 80024e0:	f008 ff26 	bl	800b330 <HAL_GPIO_WritePin>
			osDelay(100);
 80024e4:	2064      	movs	r0, #100	; 0x64
 80024e6:	f014 fcc1 	bl	8016e6c <osDelay>
		for (int i = 0; i < 7; i++) {
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3301      	adds	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	dde9      	ble.n	80024ca <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 80024f6:	2308      	movs	r3, #8
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	e008      	b.n	800250e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2101      	movs	r1, #1
 8002502:	4618      	mov	r0, r3
 8002504:	f003 f88e 	bl	8005624 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3301      	adds	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b0d      	cmp	r3, #13
 8002512:	ddf3      	ble.n	80024fc <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8002514:	f014 fc8a 	bl	8016e2c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002518:	e7cc      	b.n	80024b4 <AUTOINIT_init+0x8>
 800251a:	bf00      	nop
 800251c:	24001acc 	.word	0x24001acc
 8002520:	0801ae7c 	.word	0x0801ae7c

08002524 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <AUTODEINIT_init+0x70>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002534:	2200      	movs	r2, #0
 8002536:	2108      	movs	r1, #8
 8002538:	f014 fd68 	bl	801700c <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800253c:	230d      	movs	r3, #13
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e008      	b.n	8002554 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f86b 	bl	8005624 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3b01      	subs	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b07      	cmp	r3, #7
 8002558:	dcf3      	bgt.n	8002542 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800255a:	2306      	movs	r3, #6
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	e012      	b.n	8002586 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002560:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <AUTODEINIT_init+0x74>)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002568:	4a0b      	ldr	r2, [pc, #44]	; (8002598 <AUTODEINIT_init+0x74>)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	889b      	ldrh	r3, [r3, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	4619      	mov	r1, r3
 8002576:	f008 fedb 	bl	800b330 <HAL_GPIO_WritePin>
			osDelay(100);
 800257a:	2064      	movs	r0, #100	; 0x64
 800257c:	f014 fc76 	bl	8016e6c <osDelay>
		for (int i = 6; i >= 0; i--) {
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	3b01      	subs	r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	dae9      	bge.n	8002560 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 800258c:	f014 fc4e 	bl	8016e2c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002590:	e7cc      	b.n	800252c <AUTODEINIT_init+0x8>
 8002592:	bf00      	nop
 8002594:	24001acc 	.word	0x24001acc
 8002598:	0801ae7c 	.word	0x0801ae7c

0800259c <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <Voltage_Monitor_init+0x28>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ac:	2200      	movs	r2, #0
 80025ae:	2101      	movs	r1, #1
 80025b0:	f014 fd2c 	bl	801700c <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 80025b4:	4804      	ldr	r0, [pc, #16]	; (80025c8 <Voltage_Monitor_init+0x2c>)
 80025b6:	f00b fa88 	bl	800daca <HAL_IWDG_Refresh>
	  set_rail_monitor();
 80025ba:	f003 f853 	bl	8005664 <set_rail_monitor>
	  monitor_rails();
 80025be:	f003 f8d5 	bl	800576c <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80025c2:	e7ef      	b.n	80025a4 <Voltage_Monitor_init+0x8>
 80025c4:	24001acc 	.word	0x24001acc
 80025c8:	24001ab8 	.word	0x24001ab8

080025cc <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <STOP_init+0x2c>)
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025dc:	2200      	movs	r2, #0
 80025de:	2102      	movs	r1, #2
 80025e0:	f014 fd14 	bl	801700c <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <STOP_init+0x2c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f014 fcdc 	bl	8016fa8 <osEventFlagsClear>

	  enter_stop();
 80025f0:	f001 f98a 	bl	8003908 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80025f4:	e7ee      	b.n	80025d4 <STOP_init+0x8>
 80025f6:	bf00      	nop
 80025f8:	24001acc 	.word	0x24001acc

080025fc <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af02      	add	r7, sp, #8
 8002602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <Science_init+0xb0>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260c:	2200      	movs	r2, #0
 800260e:	2101      	movs	r1, #1
 8002610:	f014 fcfc 	bl	801700c <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	e012      	b.n	8002640 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 800261a:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <Science_init+0xb4>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002622:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <Science_init+0xb4>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	889b      	ldrh	r3, [r3, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	4619      	mov	r1, r3
 8002630:	f008 fe7e 	bl	800b330 <HAL_GPIO_WritePin>
			osDelay(200);
 8002634:	20c8      	movs	r0, #200	; 0xc8
 8002636:	f014 fc19 	bl	8016e6c <osDelay>
		for (int i = 0; i < 9; i++) {
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b08      	cmp	r3, #8
 8002644:	dde9      	ble.n	800261a <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8002646:	2308      	movs	r3, #8
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	e008      	b.n	800265e <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f002 ffe6 	bl	8005624 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3301      	adds	r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b10      	cmp	r3, #16
 8002662:	ddf3      	ble.n	800264c <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2320      	movs	r3, #32
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <Science_init+0xb8>)
 8002670:	2100      	movs	r1, #0
 8002672:	4811      	ldr	r0, [pc, #68]	; (80026b8 <Science_init+0xbc>)
 8002674:	f004 ffd8 	bl	8007628 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <Science_init+0xc0>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <Science_init+0xc4>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <Science_init+0xc8>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 800268a:	f001 fb9d 	bl	8003dc8 <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 800268e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002692:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002698:	2100      	movs	r1, #0
 800269a:	480b      	ldr	r0, [pc, #44]	; (80026c8 <Science_init+0xcc>)
 800269c:	f010 f952 	bl	8012944 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80026a0:	b662      	cpsie	i
}
 80026a2:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 80026a4:	f014 fbc2 	bl	8016e2c <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80026a8:	e7ac      	b.n	8002604 <Science_init+0x8>
 80026aa:	bf00      	nop
 80026ac:	24001ad0 	.word	0x24001ad0
 80026b0:	0801ae7c 	.word	0x0801ae7c
 80026b4:	24000038 	.word	0x24000038
 80026b8:	24000314 	.word	0x24000314
 80026bc:	24001b14 	.word	0x24001b14
 80026c0:	24001b15 	.word	0x24001b15
 80026c4:	24001b18 	.word	0x24001b18
 80026c8:	24001de4 	.word	0x24001de4

080026cc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <Idle_init+0x94>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026dc:	2200      	movs	r2, #0
 80026de:	2102      	movs	r1, #2
 80026e0:	f014 fc94 	bl	801700c <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <Idle_init+0x98>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80026ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80026f2:	2100      	movs	r1, #0
 80026f4:	481c      	ldr	r0, [pc, #112]	; (8002768 <Idle_init+0x9c>)
 80026f6:	f010 fa7f 	bl	8012bf8 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <Idle_init+0xa0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8002700:	2100      	movs	r1, #0
 8002702:	481b      	ldr	r0, [pc, #108]	; (8002770 <Idle_init+0xa4>)
 8002704:	f005 f850 	bl	80077a8 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002708:	2310      	movs	r3, #16
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e008      	b.n	8002720 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f002 ff85 	bl	8005624 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3b01      	subs	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b07      	cmp	r3, #7
 8002724:	dcf3      	bgt.n	800270e <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002726:	2308      	movs	r3, #8
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	e012      	b.n	8002752 <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <Idle_init+0xa8>)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002734:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <Idle_init+0xa8>)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	889b      	ldrh	r3, [r3, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	4619      	mov	r1, r3
 8002742:	f008 fdf5 	bl	800b330 <HAL_GPIO_WritePin>
			osDelay(200);
 8002746:	20c8      	movs	r0, #200	; 0xc8
 8002748:	f014 fb90 	bl	8016e6c <osDelay>
		for (int i = 8; i >= 0; i--) {
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	3b01      	subs	r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	dae9      	bge.n	800272c <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8002758:	f014 fb68 	bl	8016e2c <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800275c:	e7ba      	b.n	80026d4 <Idle_init+0x8>
 800275e:	bf00      	nop
 8002760:	24001ad0 	.word	0x24001ad0
 8002764:	24001b15 	.word	0x24001b15
 8002768:	24001de4 	.word	0x24001de4
 800276c:	24001b14 	.word	0x24001b14
 8002770:	24000314 	.word	0x24000314
 8002774:	0801ae7c 	.word	0x0801ae7c

08002778 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
 800278c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <MX_GPIO_Init+0xe8>)
 8002790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002794:	4a32      	ldr	r2, [pc, #200]	; (8002860 <MX_GPIO_Init+0xe8>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800279e:	4b30      	ldr	r3, [pc, #192]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ac:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b2:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027bc:	4b28      	ldr	r3, [pc, #160]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d0:	4a23      	ldr	r2, [pc, #140]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MX_GPIO_Init+0xe8>)
 80027fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002806:	2200      	movs	r2, #0
 8002808:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 800280c:	4815      	ldr	r0, [pc, #84]	; (8002864 <MX_GPIO_Init+0xec>)
 800280e:	f008 fd8f 	bl	800b330 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	2164      	movs	r1, #100	; 0x64
 8002816:	4814      	ldr	r0, [pc, #80]	; (8002868 <MX_GPIO_Init+0xf0>)
 8002818:	f008 fd8a 	bl	800b330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800281c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002820:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002826:	2302      	movs	r3, #2
 8002828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <MX_GPIO_Init+0xec>)
 8002836:	f008 fbb3 	bl	800afa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800283a:	2364      	movs	r3, #100	; 0x64
 800283c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002842:	2302      	movs	r3, #2
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_GPIO_Init+0xf0>)
 8002852:	f008 fba5 	bl	800afa0 <HAL_GPIO_Init>

}
 8002856:	bf00      	nop
 8002858:	3728      	adds	r7, #40	; 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	58024400 	.word	0x58024400
 8002864:	58020800 	.word	0x58020800
 8002868:	58020400 	.word	0x58020400

0800286c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002870:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <MX_I2C1_Init+0x78>)
 8002872:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <MX_I2C1_Init+0x7c>)
 8002874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <MX_I2C1_Init+0x78>)
 8002878:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <MX_I2C1_Init+0x80>)
 800287a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <MX_I2C1_Init+0x78>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <MX_I2C1_Init+0x78>)
 8002884:	2201      	movs	r2, #1
 8002886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <MX_I2C1_Init+0x78>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <MX_I2C1_Init+0x78>)
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <MX_I2C1_Init+0x78>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <MX_I2C1_Init+0x78>)
 800289c:	2200      	movs	r2, #0
 800289e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <MX_I2C1_Init+0x78>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028a6:	480f      	ldr	r0, [pc, #60]	; (80028e4 <MX_I2C1_Init+0x78>)
 80028a8:	f008 fd5c 	bl	800b364 <HAL_I2C_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028b2:	f001 f889 	bl	80039c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028b6:	2100      	movs	r1, #0
 80028b8:	480a      	ldr	r0, [pc, #40]	; (80028e4 <MX_I2C1_Init+0x78>)
 80028ba:	f00a fffb 	bl	800d8b4 <HAL_I2CEx_ConfigAnalogFilter>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028c4:	f001 f880 	bl	80039c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028c8:	2100      	movs	r1, #0
 80028ca:	4806      	ldr	r0, [pc, #24]	; (80028e4 <MX_I2C1_Init+0x78>)
 80028cc:	f00b f83d 	bl	800d94a <HAL_I2CEx_ConfigDigitalFilter>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028d6:	f001 f877 	bl	80039c8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80028da:	2001      	movs	r0, #1
 80028dc:	f00b f882 	bl	800d9e4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	24001974 	.word	0x24001974
 80028e8:	40005400 	.word	0x40005400
 80028ec:	00100517 	.word	0x00100517

080028f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0ba      	sub	sp, #232	; 0xe8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	22c0      	movs	r2, #192	; 0xc0
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f017 fbcb 	bl	801a0ac <memset>
  if(i2cHandle->Instance==I2C1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a5d      	ldr	r2, [pc, #372]	; (8002a90 <HAL_I2C_MspInit+0x1a0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	f040 80b3 	bne.w	8002a88 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002922:	f04f 0208 	mov.w	r2, #8
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002934:	f107 0310 	add.w	r3, r7, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f00c f975 	bl	800ec28 <HAL_RCCEx_PeriphCLKConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002944:	f001 f840 	bl	80039c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002948:	4b52      	ldr	r3, [pc, #328]	; (8002a94 <HAL_I2C_MspInit+0x1a4>)
 800294a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294e:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_I2C_MspInit+0x1a4>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002958:	4b4e      	ldr	r3, [pc, #312]	; (8002a94 <HAL_I2C_MspInit+0x1a4>)
 800295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800296a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800296e:	2312      	movs	r3, #18
 8002970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002980:	2304      	movs	r3, #4
 8002982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002986:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800298a:	4619      	mov	r1, r3
 800298c:	4842      	ldr	r0, [pc, #264]	; (8002a98 <HAL_I2C_MspInit+0x1a8>)
 800298e:	f008 fb07 	bl	800afa0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002992:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <HAL_I2C_MspInit+0x1a4>)
 8002994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002998:	4a3e      	ldr	r2, [pc, #248]	; (8002a94 <HAL_I2C_MspInit+0x1a4>)
 800299a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800299e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029a2:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <HAL_I2C_MspInit+0x1a4>)
 80029a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80029b0:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029b2:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <HAL_I2C_MspInit+0x1b0>)
 80029b4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80029b6:	4b39      	ldr	r3, [pc, #228]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029b8:	2222      	movs	r2, #34	; 0x22
 80029ba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029bc:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029c8:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ce:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029d0:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d6:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80029dc:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029e2:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029e8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80029f0:	482a      	ldr	r0, [pc, #168]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 80029f2:	f005 f9a5 	bl	8007d40 <HAL_DMA_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 80029fc:	f000 ffe4 	bl	80039c8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38
 8002a06:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <HAL_I2C_MspInit+0x1ac>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a0e:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_I2C_MspInit+0x1b8>)
 8002a10:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a18:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a24:	4b1f      	ldr	r3, [pc, #124]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a2a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a44:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002a4c:	4815      	ldr	r0, [pc, #84]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a4e:	f005 f977 	bl	8007d40 <HAL_DMA_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002a58:	f000 ffb6 	bl	80039c8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_I2C_MspInit+0x1b4>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2105      	movs	r1, #5
 8002a6c:	201f      	movs	r0, #31
 8002a6e:	f004 fcc1 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a72:	201f      	movs	r0, #31
 8002a74:	f004 fcd8 	bl	8007428 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2105      	movs	r1, #5
 8002a7c:	2020      	movs	r0, #32
 8002a7e:	f004 fcb9 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002a82:	2020      	movs	r0, #32
 8002a84:	f004 fcd0 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a88:	bf00      	nop
 8002a8a:	37e8      	adds	r7, #232	; 0xe8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40005400 	.word	0x40005400
 8002a94:	58024400 	.word	0x58024400
 8002a98:	58020400 	.word	0x58020400
 8002a9c:	240019c8 	.word	0x240019c8
 8002aa0:	400200a0 	.word	0x400200a0
 8002aa4:	24001a40 	.word	0x24001a40
 8002aa8:	400200b8 	.word	0x400200b8

08002aac <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <MX_IWDG1_Init+0x34>)
 8002ab2:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <MX_IWDG1_Init+0x38>)
 8002ab4:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <MX_IWDG1_Init+0x34>)
 8002ab8:	2204      	movs	r2, #4
 8002aba:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 499;
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <MX_IWDG1_Init+0x34>)
 8002abe:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ac2:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 499;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <MX_IWDG1_Init+0x34>)
 8002ac6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002aca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002acc:	4804      	ldr	r0, [pc, #16]	; (8002ae0 <MX_IWDG1_Init+0x34>)
 8002ace:	f00a ffad 	bl	800da2c <HAL_IWDG_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8002ad8:	f000 ff76 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	24001ab8 	.word	0x24001ab8
 8002ae4:	58004800 	.word	0x58004800

08002ae8 <__NVIC_SystemReset>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002aec:	f3bf 8f4f 	dsb	sy
}
 8002af0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <__NVIC_SystemReset+0x24>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002afa:	4904      	ldr	r1, [pc, #16]	; (8002b0c <__NVIC_SystemReset+0x24>)
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <__NVIC_SystemReset+0x28>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b02:	f3bf 8f4f 	dsb	sy
}
 8002b06:	bf00      	nop
    __NOP();
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <__NVIC_SystemReset+0x20>
 8002b0c:	e000ed00 	.word	0xe000ed00
 8002b10:	05fa0004 	.word	0x05fa0004

08002b14 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d106      	bne.n	8002b32 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f014 f9f8 	bl	8016f20 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002b30:	e032      	b.n	8002b98 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d12b      	bne.n	8002b92 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002b44:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2102      	movs	r1, #2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f014 f9e8 	bl	8016f20 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002b50:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d113      	bne.n	8002b82 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f014 f9dd 	bl	8016f20 <osEventFlagsSet>
			if (HK_ENABLED){
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2104      	movs	r1, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f014 f9d2 	bl	8016f20 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002b8e:	701a      	strb	r2, [r3, #0]
}
 8002b90:	e002      	b.n	8002b98 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002b92:	480a      	ldr	r0, [pc, #40]	; (8002bbc <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002b94:	f017 fb00 	bl	801a198 <puts>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	24001de4 	.word	0x24001de4
 8002ba4:	24001ac8 	.word	0x24001ac8
 8002ba8:	24001e30 	.word	0x24001e30
 8002bac:	24001b15 	.word	0x24001b15
 8002bb0:	24001b1c 	.word	0x24001b1c
 8002bb4:	24001acc 	.word	0x24001acc
 8002bb8:	24001b14 	.word	0x24001b14
 8002bbc:	0801ab48 	.word	0x0801ab48

08002bc0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	49f2      	ldr	r1, [pc, #968]	; (8002f94 <HAL_UART_RxCpltCallback+0x3d4>)
 8002bcc:	48f2      	ldr	r0, [pc, #968]	; (8002f98 <HAL_UART_RxCpltCallback+0x3d8>)
 8002bce:	f011 fb99 	bl	8014304 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002bd2:	4bf0      	ldr	r3, [pc, #960]	; (8002f94 <HAL_UART_RxCpltCallback+0x3d4>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2be0      	cmp	r3, #224	; 0xe0
 8002bdc:	f200 8424 	bhi.w	8003428 <HAL_UART_RxCpltCallback+0x868>
 8002be0:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <HAL_UART_RxCpltCallback+0x28>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002f81 	.word	0x08002f81
 8002bec:	08002fc5 	.word	0x08002fc5
 8002bf0:	08003035 	.word	0x08003035
 8002bf4:	0800306f 	.word	0x0800306f
 8002bf8:	080030a7 	.word	0x080030a7
 8002bfc:	080030e1 	.word	0x080030e1
 8002c00:	0800311d 	.word	0x0800311d
 8002c04:	08003159 	.word	0x08003159
 8002c08:	08003193 	.word	0x08003193
 8002c0c:	080031c7 	.word	0x080031c7
 8002c10:	080031fb 	.word	0x080031fb
 8002c14:	0800322d 	.word	0x0800322d
 8002c18:	08003257 	.word	0x08003257
 8002c1c:	08003335 	.word	0x08003335
 8002c20:	0800339d 	.word	0x0800339d
 8002c24:	080033c5 	.word	0x080033c5
 8002c28:	08002f6d 	.word	0x08002f6d
 8002c2c:	08002fa9 	.word	0x08002fa9
 8002c30:	08003017 	.word	0x08003017
 8002c34:	08003053 	.word	0x08003053
 8002c38:	0800308b 	.word	0x0800308b
 8002c3c:	080030c3 	.word	0x080030c3
 8002c40:	080030ff 	.word	0x080030ff
 8002c44:	0800313b 	.word	0x0800313b
 8002c48:	08003177 	.word	0x08003177
 8002c4c:	080031af 	.word	0x080031af
 8002c50:	080031d7 	.word	0x080031d7
 8002c54:	08003211 	.word	0x08003211
 8002c58:	0800323d 	.word	0x0800323d
 8002c5c:	08003265 	.word	0x08003265
 8002c60:	08003375 	.word	0x08003375
 8002c64:	08003429 	.word	0x08003429
 8002c68:	08003429 	.word	0x08003429
 8002c6c:	08003429 	.word	0x08003429
 8002c70:	08003429 	.word	0x08003429
 8002c74:	08003429 	.word	0x08003429
 8002c78:	08003429 	.word	0x08003429
 8002c7c:	08003429 	.word	0x08003429
 8002c80:	08003429 	.word	0x08003429
 8002c84:	08003429 	.word	0x08003429
 8002c88:	08003429 	.word	0x08003429
 8002c8c:	08003429 	.word	0x08003429
 8002c90:	08003429 	.word	0x08003429
 8002c94:	08003429 	.word	0x08003429
 8002c98:	08003429 	.word	0x08003429
 8002c9c:	08003429 	.word	0x08003429
 8002ca0:	08003429 	.word	0x08003429
 8002ca4:	08003429 	.word	0x08003429
 8002ca8:	08003429 	.word	0x08003429
 8002cac:	08003429 	.word	0x08003429
 8002cb0:	08003429 	.word	0x08003429
 8002cb4:	08003429 	.word	0x08003429
 8002cb8:	08003429 	.word	0x08003429
 8002cbc:	08003429 	.word	0x08003429
 8002cc0:	08003429 	.word	0x08003429
 8002cc4:	08003429 	.word	0x08003429
 8002cc8:	08003429 	.word	0x08003429
 8002ccc:	08003429 	.word	0x08003429
 8002cd0:	08003429 	.word	0x08003429
 8002cd4:	08003429 	.word	0x08003429
 8002cd8:	08003429 	.word	0x08003429
 8002cdc:	08003429 	.word	0x08003429
 8002ce0:	08003429 	.word	0x08003429
 8002ce4:	08003429 	.word	0x08003429
 8002ce8:	08003429 	.word	0x08003429
 8002cec:	08003429 	.word	0x08003429
 8002cf0:	08003429 	.word	0x08003429
 8002cf4:	08003429 	.word	0x08003429
 8002cf8:	08003429 	.word	0x08003429
 8002cfc:	08003429 	.word	0x08003429
 8002d00:	08003429 	.word	0x08003429
 8002d04:	08003429 	.word	0x08003429
 8002d08:	08003429 	.word	0x08003429
 8002d0c:	08003429 	.word	0x08003429
 8002d10:	08003429 	.word	0x08003429
 8002d14:	08003429 	.word	0x08003429
 8002d18:	08003429 	.word	0x08003429
 8002d1c:	08003429 	.word	0x08003429
 8002d20:	08003429 	.word	0x08003429
 8002d24:	08003429 	.word	0x08003429
 8002d28:	08003429 	.word	0x08003429
 8002d2c:	08003429 	.word	0x08003429
 8002d30:	08003429 	.word	0x08003429
 8002d34:	08003429 	.word	0x08003429
 8002d38:	08003429 	.word	0x08003429
 8002d3c:	08003429 	.word	0x08003429
 8002d40:	08003429 	.word	0x08003429
 8002d44:	08003429 	.word	0x08003429
 8002d48:	08003429 	.word	0x08003429
 8002d4c:	08003429 	.word	0x08003429
 8002d50:	08003429 	.word	0x08003429
 8002d54:	08003429 	.word	0x08003429
 8002d58:	08003429 	.word	0x08003429
 8002d5c:	08003429 	.word	0x08003429
 8002d60:	08003429 	.word	0x08003429
 8002d64:	08003429 	.word	0x08003429
 8002d68:	08003429 	.word	0x08003429
 8002d6c:	08003429 	.word	0x08003429
 8002d70:	08003429 	.word	0x08003429
 8002d74:	08003429 	.word	0x08003429
 8002d78:	08003429 	.word	0x08003429
 8002d7c:	08003429 	.word	0x08003429
 8002d80:	08003429 	.word	0x08003429
 8002d84:	08003429 	.word	0x08003429
 8002d88:	08003429 	.word	0x08003429
 8002d8c:	08003429 	.word	0x08003429
 8002d90:	08003429 	.word	0x08003429
 8002d94:	08003429 	.word	0x08003429
 8002d98:	08003429 	.word	0x08003429
 8002d9c:	08003429 	.word	0x08003429
 8002da0:	08003429 	.word	0x08003429
 8002da4:	08003429 	.word	0x08003429
 8002da8:	08003429 	.word	0x08003429
 8002dac:	08003429 	.word	0x08003429
 8002db0:	08003429 	.word	0x08003429
 8002db4:	08003429 	.word	0x08003429
 8002db8:	08003429 	.word	0x08003429
 8002dbc:	08003429 	.word	0x08003429
 8002dc0:	08003429 	.word	0x08003429
 8002dc4:	08003429 	.word	0x08003429
 8002dc8:	08003429 	.word	0x08003429
 8002dcc:	08003429 	.word	0x08003429
 8002dd0:	08003429 	.word	0x08003429
 8002dd4:	08003429 	.word	0x08003429
 8002dd8:	08003429 	.word	0x08003429
 8002ddc:	08003429 	.word	0x08003429
 8002de0:	08003429 	.word	0x08003429
 8002de4:	08003429 	.word	0x08003429
 8002de8:	08003429 	.word	0x08003429
 8002dec:	08003429 	.word	0x08003429
 8002df0:	08003429 	.word	0x08003429
 8002df4:	08003429 	.word	0x08003429
 8002df8:	08003429 	.word	0x08003429
 8002dfc:	08003429 	.word	0x08003429
 8002e00:	08003429 	.word	0x08003429
 8002e04:	08003429 	.word	0x08003429
 8002e08:	08003429 	.word	0x08003429
 8002e0c:	08003429 	.word	0x08003429
 8002e10:	08003429 	.word	0x08003429
 8002e14:	08003429 	.word	0x08003429
 8002e18:	08003429 	.word	0x08003429
 8002e1c:	08003429 	.word	0x08003429
 8002e20:	08003429 	.word	0x08003429
 8002e24:	08003429 	.word	0x08003429
 8002e28:	08003429 	.word	0x08003429
 8002e2c:	08003429 	.word	0x08003429
 8002e30:	08003429 	.word	0x08003429
 8002e34:	08003429 	.word	0x08003429
 8002e38:	08003429 	.word	0x08003429
 8002e3c:	08003429 	.word	0x08003429
 8002e40:	08003429 	.word	0x08003429
 8002e44:	08003429 	.word	0x08003429
 8002e48:	08003429 	.word	0x08003429
 8002e4c:	08003429 	.word	0x08003429
 8002e50:	08003429 	.word	0x08003429
 8002e54:	08003429 	.word	0x08003429
 8002e58:	08003429 	.word	0x08003429
 8002e5c:	08003429 	.word	0x08003429
 8002e60:	08003429 	.word	0x08003429
 8002e64:	08003429 	.word	0x08003429
 8002e68:	08003429 	.word	0x08003429
 8002e6c:	08003429 	.word	0x08003429
 8002e70:	08003429 	.word	0x08003429
 8002e74:	08003429 	.word	0x08003429
 8002e78:	08003429 	.word	0x08003429
 8002e7c:	08003429 	.word	0x08003429
 8002e80:	08003429 	.word	0x08003429
 8002e84:	08003429 	.word	0x08003429
 8002e88:	08003429 	.word	0x08003429
 8002e8c:	08003429 	.word	0x08003429
 8002e90:	08003429 	.word	0x08003429
 8002e94:	08003429 	.word	0x08003429
 8002e98:	08003429 	.word	0x08003429
 8002e9c:	08003429 	.word	0x08003429
 8002ea0:	08003429 	.word	0x08003429
 8002ea4:	08003401 	.word	0x08003401
 8002ea8:	08003429 	.word	0x08003429
 8002eac:	08003429 	.word	0x08003429
 8002eb0:	08003429 	.word	0x08003429
 8002eb4:	08003429 	.word	0x08003429
 8002eb8:	08003429 	.word	0x08003429
 8002ebc:	08003429 	.word	0x08003429
 8002ec0:	08003429 	.word	0x08003429
 8002ec4:	08003429 	.word	0x08003429
 8002ec8:	08003429 	.word	0x08003429
 8002ecc:	08003429 	.word	0x08003429
 8002ed0:	08003429 	.word	0x08003429
 8002ed4:	08003429 	.word	0x08003429
 8002ed8:	08003429 	.word	0x08003429
 8002edc:	08003429 	.word	0x08003429
 8002ee0:	08003429 	.word	0x08003429
 8002ee4:	08003407 	.word	0x08003407
 8002ee8:	08003429 	.word	0x08003429
 8002eec:	08003429 	.word	0x08003429
 8002ef0:	08003429 	.word	0x08003429
 8002ef4:	08003429 	.word	0x08003429
 8002ef8:	08003429 	.word	0x08003429
 8002efc:	08003429 	.word	0x08003429
 8002f00:	08003429 	.word	0x08003429
 8002f04:	08003429 	.word	0x08003429
 8002f08:	08003429 	.word	0x08003429
 8002f0c:	08003429 	.word	0x08003429
 8002f10:	08003429 	.word	0x08003429
 8002f14:	08003429 	.word	0x08003429
 8002f18:	08003429 	.word	0x08003429
 8002f1c:	08003429 	.word	0x08003429
 8002f20:	08003429 	.word	0x08003429
 8002f24:	08003415 	.word	0x08003415
 8002f28:	080033ed 	.word	0x080033ed
 8002f2c:	08003429 	.word	0x08003429
 8002f30:	08003429 	.word	0x08003429
 8002f34:	08003429 	.word	0x08003429
 8002f38:	08003429 	.word	0x08003429
 8002f3c:	08003429 	.word	0x08003429
 8002f40:	08003429 	.word	0x08003429
 8002f44:	08003429 	.word	0x08003429
 8002f48:	08003429 	.word	0x08003429
 8002f4c:	08003429 	.word	0x08003429
 8002f50:	08003429 	.word	0x08003429
 8002f54:	08003429 	.word	0x08003429
 8002f58:	08003429 	.word	0x08003429
 8002f5c:	08003429 	.word	0x08003429
 8002f60:	08003429 	.word	0x08003429
 8002f64:	08003423 	.word	0x08003423
 8002f68:	080033d9 	.word	0x080033d9
	case 0x10: {
		printf("SDN1 ON\n");
 8002f6c:	480b      	ldr	r0, [pc, #44]	; (8002f9c <HAL_UART_RxCpltCallback+0x3dc>)
 8002f6e:	f017 f913 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_UART_RxCpltCallback+0x3e0>)
 8002f74:	2104      	movs	r1, #4
 8002f76:	2201      	movs	r2, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f008 f9d9 	bl	800b330 <HAL_GPIO_WritePin>
		break;
 8002f7e:	e25e      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8002f80:	4808      	ldr	r0, [pc, #32]	; (8002fa4 <HAL_UART_RxCpltCallback+0x3e4>)
 8002f82:	f017 f909 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_UART_RxCpltCallback+0x3e0>)
 8002f88:	2104      	movs	r1, #4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f008 f9cf 	bl	800b330 <HAL_GPIO_WritePin>
		break;
 8002f92:	e254      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
 8002f94:	24001ad4 	.word	0x24001ad4
 8002f98:	24001e7c 	.word	0x24001e7c
 8002f9c:	0801ab60 	.word	0x0801ab60
 8002fa0:	58020400 	.word	0x58020400
 8002fa4:	0801ab68 	.word	0x0801ab68
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8002fa8:	48bf      	ldr	r0, [pc, #764]	; (80032a8 <HAL_UART_RxCpltCallback+0x6e8>)
 8002faa:	f017 f8f5 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8002fae:	4bbf      	ldr	r3, [pc, #764]	; (80032ac <HAL_UART_RxCpltCallback+0x6ec>)
 8002fb0:	2120      	movs	r1, #32
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f008 f9bb 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8002fba:	2101      	movs	r1, #1
 8002fbc:	2008      	movs	r0, #8
 8002fbe:	f002 fb31 	bl	8005624 <set_rail_monitor_enable>
		break;
 8002fc2:	e23c      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8002fc4:	48ba      	ldr	r0, [pc, #744]	; (80032b0 <HAL_UART_RxCpltCallback+0x6f0>)
 8002fc6:	f017 f8e7 	bl	801a198 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8002fca:	2308      	movs	r3, #8
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e00f      	b.n	8002ff0 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002fd0:	4ab8      	ldr	r2, [pc, #736]	; (80032b4 <HAL_UART_RxCpltCallback+0x6f4>)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002fd8:	4ab6      	ldr	r2, [pc, #728]	; (80032b4 <HAL_UART_RxCpltCallback+0x6f4>)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	889b      	ldrh	r3, [r3, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f008 f9a3 	bl	800b330 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	dcec      	bgt.n	8002fd0 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002ff6:	2310      	movs	r3, #16
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	e008      	b.n	800300e <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f002 fb0e 	bl	8005624 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3b01      	subs	r3, #1
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b07      	cmp	r3, #7
 8003012:	dcf3      	bgt.n	8002ffc <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8003014:	e213      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003016:	48a8      	ldr	r0, [pc, #672]	; (80032b8 <HAL_UART_RxCpltCallback+0x6f8>)
 8003018:	f017 f8be 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800301c:	4ba7      	ldr	r3, [pc, #668]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 800301e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003022:	2201      	movs	r2, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f008 f983 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 800302a:	2101      	movs	r1, #1
 800302c:	2009      	movs	r0, #9
 800302e:	f002 faf9 	bl	8005624 <set_rail_monitor_enable>

		break;
 8003032:	e204      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003034:	48a2      	ldr	r0, [pc, #648]	; (80032c0 <HAL_UART_RxCpltCallback+0x700>)
 8003036:	f017 f8af 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 800303a:	4ba0      	ldr	r3, [pc, #640]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 800303c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003040:	2200      	movs	r2, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f008 f974 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003048:	2100      	movs	r1, #0
 800304a:	2009      	movs	r0, #9
 800304c:	f002 faea 	bl	8005624 <set_rail_monitor_enable>
		break;
 8003050:	e1f5      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8003052:	489c      	ldr	r0, [pc, #624]	; (80032c4 <HAL_UART_RxCpltCallback+0x704>)
 8003054:	f017 f8a0 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003058:	4b98      	ldr	r3, [pc, #608]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 800305a:	2180      	movs	r1, #128	; 0x80
 800305c:	2201      	movs	r2, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f008 f966 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003064:	2101      	movs	r1, #1
 8003066:	200a      	movs	r0, #10
 8003068:	f002 fadc 	bl	8005624 <set_rail_monitor_enable>

		break;
 800306c:	e1e7      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800306e:	4896      	ldr	r0, [pc, #600]	; (80032c8 <HAL_UART_RxCpltCallback+0x708>)
 8003070:	f017 f892 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003074:	4b91      	ldr	r3, [pc, #580]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	2200      	movs	r2, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f008 f958 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8003080:	2100      	movs	r1, #0
 8003082:	200a      	movs	r0, #10
 8003084:	f002 face 	bl	8005624 <set_rail_monitor_enable>
		break;
 8003088:	e1d9      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800308a:	4890      	ldr	r0, [pc, #576]	; (80032cc <HAL_UART_RxCpltCallback+0x70c>)
 800308c:	f017 f884 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8003090:	4b8a      	ldr	r3, [pc, #552]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 8003092:	2140      	movs	r1, #64	; 0x40
 8003094:	2201      	movs	r2, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f008 f94a 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 800309c:	2101      	movs	r1, #1
 800309e:	200b      	movs	r0, #11
 80030a0:	f002 fac0 	bl	8005624 <set_rail_monitor_enable>

		break;
 80030a4:	e1cb      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 80030a6:	488a      	ldr	r0, [pc, #552]	; (80032d0 <HAL_UART_RxCpltCallback+0x710>)
 80030a8:	f017 f876 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80030ac:	4b83      	ldr	r3, [pc, #524]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 80030ae:	2140      	movs	r1, #64	; 0x40
 80030b0:	2200      	movs	r2, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f008 f93c 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 80030b8:	2100      	movs	r1, #0
 80030ba:	200b      	movs	r0, #11
 80030bc:	f002 fab2 	bl	8005624 <set_rail_monitor_enable>
		break;
 80030c0:	e1bd      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 80030c2:	4884      	ldr	r0, [pc, #528]	; (80032d4 <HAL_UART_RxCpltCallback+0x714>)
 80030c4:	f017 f868 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80030c8:	4b7c      	ldr	r3, [pc, #496]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 80030ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ce:	2201      	movs	r2, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f008 f92d 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80030d6:	2101      	movs	r1, #1
 80030d8:	200c      	movs	r0, #12
 80030da:	f002 faa3 	bl	8005624 <set_rail_monitor_enable>

		break;
 80030de:	e1ae      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80030e0:	487d      	ldr	r0, [pc, #500]	; (80032d8 <HAL_UART_RxCpltCallback+0x718>)
 80030e2:	f017 f859 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80030e6:	4b75      	ldr	r3, [pc, #468]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 80030e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ec:	2200      	movs	r2, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f008 f91e 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80030f4:	2100      	movs	r1, #0
 80030f6:	200c      	movs	r0, #12
 80030f8:	f002 fa94 	bl	8005624 <set_rail_monitor_enable>
		break;
 80030fc:	e19f      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80030fe:	4877      	ldr	r0, [pc, #476]	; (80032dc <HAL_UART_RxCpltCallback+0x71c>)
 8003100:	f017 f84a 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003104:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 8003106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800310a:	2201      	movs	r2, #1
 800310c:	4618      	mov	r0, r3
 800310e:	f008 f90f 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8003112:	2101      	movs	r1, #1
 8003114:	200d      	movs	r0, #13
 8003116:	f002 fa85 	bl	8005624 <set_rail_monitor_enable>

		break;
 800311a:	e190      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 800311c:	4870      	ldr	r0, [pc, #448]	; (80032e0 <HAL_UART_RxCpltCallback+0x720>)
 800311e:	f017 f83b 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8003122:	4b66      	ldr	r3, [pc, #408]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 8003124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003128:	2200      	movs	r2, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f008 f900 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8003130:	2100      	movs	r1, #0
 8003132:	200d      	movs	r0, #13
 8003134:	f002 fa76 	bl	8005624 <set_rail_monitor_enable>
		break;
 8003138:	e181      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 800313a:	486a      	ldr	r0, [pc, #424]	; (80032e4 <HAL_UART_RxCpltCallback+0x724>)
 800313c:	f017 f82c 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8003140:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 8003142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003146:	2201      	movs	r2, #1
 8003148:	4618      	mov	r0, r3
 800314a:	f008 f8f1 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800314e:	2101      	movs	r1, #1
 8003150:	200f      	movs	r0, #15
 8003152:	f002 fa67 	bl	8005624 <set_rail_monitor_enable>

		break;
 8003156:	e172      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003158:	4863      	ldr	r0, [pc, #396]	; (80032e8 <HAL_UART_RxCpltCallback+0x728>)
 800315a:	f017 f81d 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800315e:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_UART_RxCpltCallback+0x6fc>)
 8003160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003164:	2200      	movs	r2, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f008 f8e2 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 800316c:	2100      	movs	r1, #0
 800316e:	200f      	movs	r0, #15
 8003170:	f002 fa58 	bl	8005624 <set_rail_monitor_enable>
		break;
 8003174:	e163      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003176:	485d      	ldr	r0, [pc, #372]	; (80032ec <HAL_UART_RxCpltCallback+0x72c>)
 8003178:	f017 f80e 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 800317c:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <HAL_UART_RxCpltCallback+0x6ec>)
 800317e:	2140      	movs	r1, #64	; 0x40
 8003180:	2201      	movs	r2, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f008 f8d4 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8003188:	2101      	movs	r1, #1
 800318a:	2010      	movs	r0, #16
 800318c:	f002 fa4a 	bl	8005624 <set_rail_monitor_enable>

		break;
 8003190:	e155      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8003192:	4857      	ldr	r0, [pc, #348]	; (80032f0 <HAL_UART_RxCpltCallback+0x730>)
 8003194:	f017 f800 	bl	801a198 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8003198:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_UART_RxCpltCallback+0x6ec>)
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	2200      	movs	r2, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f008 f8c6 	bl	800b330 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 80031a4:	2100      	movs	r1, #0
 80031a6:	2010      	movs	r0, #16
 80031a8:	f002 fa3c 	bl	8005624 <set_rail_monitor_enable>
		break;
 80031ac:	e147      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 80031ae:	4851      	ldr	r0, [pc, #324]	; (80032f4 <HAL_UART_RxCpltCallback+0x734>)
 80031b0:	f016 fff2 	bl	801a198 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 80031b4:	2300      	movs	r3, #0
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2320      	movs	r3, #32
 80031ba:	4a4f      	ldr	r2, [pc, #316]	; (80032f8 <HAL_UART_RxCpltCallback+0x738>)
 80031bc:	2100      	movs	r1, #0
 80031be:	484f      	ldr	r0, [pc, #316]	; (80032fc <HAL_UART_RxCpltCallback+0x73c>)
 80031c0:	f004 fa32 	bl	8007628 <HAL_DAC_Start_DMA>
		break;
 80031c4:	e13b      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80031c6:	484e      	ldr	r0, [pc, #312]	; (8003300 <HAL_UART_RxCpltCallback+0x740>)
 80031c8:	f016 ffe6 	bl	801a198 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80031cc:	2100      	movs	r1, #0
 80031ce:	484b      	ldr	r0, [pc, #300]	; (80032fc <HAL_UART_RxCpltCallback+0x73c>)
 80031d0:	f004 faea 	bl	80077a8 <HAL_DAC_Stop_DMA>
		break;
 80031d4:	e133      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80031d6:	484b      	ldr	r0, [pc, #300]	; (8003304 <HAL_UART_RxCpltCallback+0x744>)
 80031d8:	f016 ffde 	bl	801a198 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80031dc:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <HAL_UART_RxCpltCallback+0x748>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2102      	movs	r1, #2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f013 fe9c 	bl	8016f20 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80031e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031ec:	f44f 729c 	mov.w	r2, #312	; 0x138
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 80031f2:	4b46      	ldr	r3, [pc, #280]	; (800330c <HAL_UART_RxCpltCallback+0x74c>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]

		break;
 80031f8:	e121      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80031fa:	4845      	ldr	r0, [pc, #276]	; (8003310 <HAL_UART_RxCpltCallback+0x750>)
 80031fc:	f016 ffcc 	bl	801a198 <puts>
		ERPA_ENABLED = 0;
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_UART_RxCpltCallback+0x74c>)
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800320e:	e116      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8003210:	4840      	ldr	r0, [pc, #256]	; (8003314 <HAL_UART_RxCpltCallback+0x754>)
 8003212:	f016 ffc1 	bl	801a198 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003216:	2100      	movs	r1, #0
 8003218:	483f      	ldr	r0, [pc, #252]	; (8003318 <HAL_UART_RxCpltCallback+0x758>)
 800321a:	f00f fb93 	bl	8012944 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800321e:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <HAL_UART_RxCpltCallback+0x748>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f013 fe7b 	bl	8016f20 <osEventFlagsSet>
		break;
 800322a:	e108      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 800322c:	483b      	ldr	r0, [pc, #236]	; (800331c <HAL_UART_RxCpltCallback+0x75c>)
 800322e:	f016 ffb3 	bl	801a198 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8003232:	2100      	movs	r1, #0
 8003234:	4838      	ldr	r0, [pc, #224]	; (8003318 <HAL_UART_RxCpltCallback+0x758>)
 8003236:	f00f fcdf 	bl	8012bf8 <HAL_TIM_OC_Stop_IT>
		break;
 800323a:	e100      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1C: {
		printf("HK ON \n");
 800323c:	4838      	ldr	r0, [pc, #224]	; (8003320 <HAL_UART_RxCpltCallback+0x760>)
 800323e:	f016 ffab 	bl	801a198 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8003242:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_UART_RxCpltCallback+0x748>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2104      	movs	r1, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f013 fe69 	bl	8016f20 <osEventFlagsSet>
		HK_ENABLED = 1;
 800324e:	4b35      	ldr	r3, [pc, #212]	; (8003324 <HAL_UART_RxCpltCallback+0x764>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
		break;
 8003254:	e0f3      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003256:	4834      	ldr	r0, [pc, #208]	; (8003328 <HAL_UART_RxCpltCallback+0x768>)
 8003258:	f016 ff9e 	bl	801a198 <puts>
		HK_ENABLED = 0;
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_UART_RxCpltCallback+0x764>)
 800325e:	2200      	movs	r2, #0
 8003260:	701a      	strb	r2, [r3, #0]
		break;
 8003262:	e0ec      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0x1D: {
		printf("Step Up\n");
 8003264:	4831      	ldr	r0, [pc, #196]	; (800332c <HAL_UART_RxCpltCallback+0x76c>)
 8003266:	f016 ff97 	bl	801a198 <puts>
		if (step < 14) {
 800326a:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_UART_RxCpltCallback+0x770>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b0d      	cmp	r3, #13
 8003272:	f200 80dd 	bhi.w	8003430 <HAL_UART_RxCpltCallback+0x870>
			step += 2;
 8003276:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <HAL_UART_RxCpltCallback+0x770>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3302      	adds	r3, #2
 800327e:	b2da      	uxtb	r2, r3
 8003280:	4b2b      	ldr	r3, [pc, #172]	; (8003330 <HAL_UART_RxCpltCallback+0x770>)
 8003282:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003284:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_UART_RxCpltCallback+0x770>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_UART_RxCpltCallback+0x738>)
 800328e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	4819      	ldr	r0, [pc, #100]	; (80032fc <HAL_UART_RxCpltCallback+0x73c>)
 8003298:	f004 fb29 	bl	80078ee <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800329c:	2100      	movs	r1, #0
 800329e:	4817      	ldr	r0, [pc, #92]	; (80032fc <HAL_UART_RxCpltCallback+0x73c>)
 80032a0:	f004 f96a 	bl	8007578 <HAL_DAC_Start>
		}
		break;
 80032a4:	e0c4      	b.n	8003430 <HAL_UART_RxCpltCallback+0x870>
 80032a6:	bf00      	nop
 80032a8:	0801ab74 	.word	0x0801ab74
 80032ac:	58020400 	.word	0x58020400
 80032b0:	0801ab80 	.word	0x0801ab80
 80032b4:	0801ae7c 	.word	0x0801ae7c
 80032b8:	0801ab8c 	.word	0x0801ab8c
 80032bc:	58020800 	.word	0x58020800
 80032c0:	0801ab98 	.word	0x0801ab98
 80032c4:	0801aba8 	.word	0x0801aba8
 80032c8:	0801abb4 	.word	0x0801abb4
 80032cc:	0801abc0 	.word	0x0801abc0
 80032d0:	0801abcc 	.word	0x0801abcc
 80032d4:	0801abdc 	.word	0x0801abdc
 80032d8:	0801abe8 	.word	0x0801abe8
 80032dc:	0801abf4 	.word	0x0801abf4
 80032e0:	0801ac00 	.word	0x0801ac00
 80032e4:	0801ac0c 	.word	0x0801ac0c
 80032e8:	0801ac1c 	.word	0x0801ac1c
 80032ec:	0801ac2c 	.word	0x0801ac2c
 80032f0:	0801ac38 	.word	0x0801ac38
 80032f4:	0801ac48 	.word	0x0801ac48
 80032f8:	24000038 	.word	0x24000038
 80032fc:	24000314 	.word	0x24000314
 8003300:	0801ac58 	.word	0x0801ac58
 8003304:	0801ac68 	.word	0x0801ac68
 8003308:	24001ac8 	.word	0x24001ac8
 800330c:	24001b15 	.word	0x24001b15
 8003310:	0801ac70 	.word	0x0801ac70
 8003314:	0801ac7c 	.word	0x0801ac7c
 8003318:	24001de4 	.word	0x24001de4
 800331c:	0801ac84 	.word	0x0801ac84
 8003320:	0801ac8c 	.word	0x0801ac8c
 8003324:	24001b14 	.word	0x24001b14
 8003328:	0801ac94 	.word	0x0801ac94
 800332c:	0801ac9c 	.word	0x0801ac9c
 8003330:	24001b16 	.word	0x24001b16
	}
	case 0x0D: {
		printf("Step Down\n");
 8003334:	4844      	ldr	r0, [pc, #272]	; (8003448 <HAL_UART_RxCpltCallback+0x888>)
 8003336:	f016 ff2f 	bl	801a198 <puts>
		if (step > 1) {
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <HAL_UART_RxCpltCallback+0x88c>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d977      	bls.n	8003434 <HAL_UART_RxCpltCallback+0x874>
			step -= 2;
 8003344:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_UART_RxCpltCallback+0x88c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	3b02      	subs	r3, #2
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b3f      	ldr	r3, [pc, #252]	; (800344c <HAL_UART_RxCpltCallback+0x88c>)
 8003350:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003352:	4b3e      	ldr	r3, [pc, #248]	; (800344c <HAL_UART_RxCpltCallback+0x88c>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_UART_RxCpltCallback+0x890>)
 800335c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	483b      	ldr	r0, [pc, #236]	; (8003454 <HAL_UART_RxCpltCallback+0x894>)
 8003366:	f004 fac2 	bl	80078ee <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800336a:	2100      	movs	r1, #0
 800336c:	4839      	ldr	r0, [pc, #228]	; (8003454 <HAL_UART_RxCpltCallback+0x894>)
 800336e:	f004 f903 	bl	8007578 <HAL_DAC_Start>
		}
		break;
 8003372:	e05f      	b.n	8003434 <HAL_UART_RxCpltCallback+0x874>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003374:	4838      	ldr	r0, [pc, #224]	; (8003458 <HAL_UART_RxCpltCallback+0x898>)
 8003376:	f016 ff0f 	bl	801a198 <puts>
		if (cadence <= 50000) {
 800337a:	4b38      	ldr	r3, [pc, #224]	; (800345c <HAL_UART_RxCpltCallback+0x89c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003382:	4293      	cmp	r3, r2
 8003384:	d858      	bhi.n	8003438 <HAL_UART_RxCpltCallback+0x878>
			cadence *= 2;
 8003386:	4b35      	ldr	r3, [pc, #212]	; (800345c <HAL_UART_RxCpltCallback+0x89c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4a33      	ldr	r2, [pc, #204]	; (800345c <HAL_UART_RxCpltCallback+0x89c>)
 800338e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <HAL_UART_RxCpltCallback+0x89c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800339a:	e04d      	b.n	8003438 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0E: {
		printf("Factor Down\n");
 800339c:	4830      	ldr	r0, [pc, #192]	; (8003460 <HAL_UART_RxCpltCallback+0x8a0>)
 800339e:	f016 fefb 	bl	801a198 <puts>
		if (cadence >= 6250) {
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <HAL_UART_RxCpltCallback+0x89c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f641 0269 	movw	r2, #6249	; 0x1869
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d946      	bls.n	800343c <HAL_UART_RxCpltCallback+0x87c>
			cadence /= 2;
 80033ae:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_UART_RxCpltCallback+0x89c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	4a29      	ldr	r2, [pc, #164]	; (800345c <HAL_UART_RxCpltCallback+0x89c>)
 80033b6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80033b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_UART_RxCpltCallback+0x89c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80033c2:	e03b      	b.n	800343c <HAL_UART_RxCpltCallback+0x87c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80033c4:	4827      	ldr	r0, [pc, #156]	; (8003464 <HAL_UART_RxCpltCallback+0x8a4>)
 80033c6:	f016 fee7 	bl	801a198 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80033ca:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_UART_RxCpltCallback+0x8a8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2102      	movs	r1, #2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f013 fda5 	bl	8016f20 <osEventFlagsSet>
		break;
 80033d6:	e032      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80033d8:	4824      	ldr	r0, [pc, #144]	; (800346c <HAL_UART_RxCpltCallback+0x8ac>)
 80033da:	f016 fedd 	bl	801a198 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_UART_RxCpltCallback+0x8a8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2104      	movs	r1, #4
 80033e4:	4618      	mov	r0, r3
 80033e6:	f013 fd9b 	bl	8016f20 <osEventFlagsSet>
		break;
 80033ea:	e028      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80033ec:	4820      	ldr	r0, [pc, #128]	; (8003470 <HAL_UART_RxCpltCallback+0x8b0>)
 80033ee:	f016 fed3 	bl	801a198 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_UART_RxCpltCallback+0x8a8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2108      	movs	r1, #8
 80033f8:	4618      	mov	r0, r3
 80033fa:	f013 fd91 	bl	8016f20 <osEventFlagsSet>
		break;
 80033fe:	e01e      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xAF: {
		sync();
 8003400:	f000 f9ea 	bl	80037d8 <sync>
		break;
 8003404:	e01b      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_UART_RxCpltCallback+0x8b4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f013 fd87 	bl	8016f20 <osEventFlagsSet>
		break;
 8003412:	e014      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003414:	4b17      	ldr	r3, [pc, #92]	; (8003474 <HAL_UART_RxCpltCallback+0x8b4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f013 fd80 	bl	8016f20 <osEventFlagsSet>
		break;
 8003420:	e00d      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	case 0xDF: {
		reset_error_counters();
 8003422:	f7fe fe09 	bl	8002038 <reset_error_counters>
		break;
 8003426:	e00a      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
	}
	default: {
		printf("Unknown Command\n");
 8003428:	4813      	ldr	r0, [pc, #76]	; (8003478 <HAL_UART_RxCpltCallback+0x8b8>)
 800342a:	f016 feb5 	bl	801a198 <puts>
		break;
 800342e:	e006      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003430:	bf00      	nop
 8003432:	e004      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003434:	bf00      	nop
 8003436:	e002      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
		break;
 8003438:	bf00      	nop
 800343a:	e000      	b.n	800343e <HAL_UART_RxCpltCallback+0x87e>
		break;
 800343c:	bf00      	nop
	}
	}
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	0801aca4 	.word	0x0801aca4
 800344c:	24001b16 	.word	0x24001b16
 8003450:	24000038 	.word	0x24000038
 8003454:	24000314 	.word	0x24000314
 8003458:	0801acb0 	.word	0x0801acb0
 800345c:	240000b8 	.word	0x240000b8
 8003460:	0801acbc 	.word	0x0801acbc
 8003464:	0801acc8 	.word	0x0801acc8
 8003468:	24001acc 	.word	0x24001acc
 800346c:	0801acd8 	.word	0x0801acd8
 8003470:	0801ace4 	.word	0x0801ace4
 8003474:	24001ad0 	.word	0x24001ad0
 8003478:	0801acf0 	.word	0x0801acf0

0800347c <get_reset_cause>:

void get_reset_cause()
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (1)
    {
        error.category = EC_watchdog;
 8003482:	2304      	movs	r3, #4
 8003484:	713b      	strb	r3, [r7, #4]
        error.detail = ED_UNDEFINED;
 8003486:	231a      	movs	r3, #26
 8003488:	717b      	strb	r3, [r7, #5]
        handle_error(error);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe fd50 	bl	8001f30 <handle_error>
        handle_error(error);
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <get_reset_cause+0x2c>)
 8003492:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003496:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <get_reset_cause+0x2c>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400

080034ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80034b2:	f000 fa35 	bl	8003920 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80034b6:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <main+0x12c>)
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11b      	bne.n	80034fa <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 80034c2:	f3bf 8f4f 	dsb	sy
}
 80034c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034c8:	f3bf 8f6f 	isb	sy
}
 80034cc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80034ce:	4b42      	ldr	r3, [pc, #264]	; (80035d8 <main+0x12c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80034d6:	f3bf 8f4f 	dsb	sy
}
 80034da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034dc:	f3bf 8f6f 	isb	sy
}
 80034e0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <main+0x12c>)
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4a3c      	ldr	r2, [pc, #240]	; (80035d8 <main+0x12c>)
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80034ee:	f3bf 8f4f 	dsb	sy
}
 80034f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034f4:	f3bf 8f6f 	isb	sy
}
 80034f8:	e000      	b.n	80034fc <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80034fa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <main+0x12c>)
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d138      	bne.n	800357a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003508:	4b33      	ldr	r3, [pc, #204]	; (80035d8 <main+0x12c>)
 800350a:	2200      	movs	r2, #0
 800350c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003510:	f3bf 8f4f 	dsb	sy
}
 8003514:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003516:	4b30      	ldr	r3, [pc, #192]	; (80035d8 <main+0x12c>)
 8003518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800351c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	0b5b      	lsrs	r3, r3, #13
 8003522:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003526:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	08db      	lsrs	r3, r3, #3
 800352c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003530:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800353a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003540:	4925      	ldr	r1, [pc, #148]	; (80035d8 <main+0x12c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	1e5a      	subs	r2, r3, #1
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ef      	bne.n	8003532 <main+0x86>
    } while(sets-- != 0U);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	60ba      	str	r2, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e5      	bne.n	8003528 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 800355c:	f3bf 8f4f 	dsb	sy
}
 8003560:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <main+0x12c>)
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <main+0x12c>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800356e:	f3bf 8f4f 	dsb	sy
}
 8003572:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003574:	f3bf 8f6f 	isb	sy
}
 8003578:	e000      	b.n	800357c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800357a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800357c:	f002 f9f0 	bl	8005960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003580:	f000 f82c 	bl	80035dc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003584:	f000 f8ac 	bl	80036e0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003588:	f7ff f8f6 	bl	8002778 <MX_GPIO_Init>
  MX_DMA_Init();
 800358c:	f7fd fbac 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003590:	f001 fd80 	bl	8005094 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003594:	f7ff f96a 	bl	800286c <MX_I2C1_Init>
  MX_SPI2_Init();
 8003598:	f000 feb6 	bl	8004308 <MX_SPI2_Init>
  MX_TIM2_Init();
 800359c:	f001 fba2 	bl	8004ce4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80035a0:	f001 faf2 	bl	8004b88 <MX_TIM1_Init>
  MX_ADC3_Init();
 80035a4:	f7fd f940 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80035a8:	f7fd f81c 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80035ac:	f7fd fae8 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80035b0:	f000 fe52 	bl	8004258 <MX_SPI1_Init>
  MX_RTC_Init();
 80035b4:	f000 fc1e 	bl	8003df4 <MX_RTC_Init>
  MX_IWDG1_Init();
 80035b8:	f7ff fa78 	bl	8002aac <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */
  get_reset_cause();
 80035bc:	f7ff ff5e 	bl	800347c <get_reset_cause>
  send_previous_error_packet();
 80035c0:	f7fe fd60 	bl	8002084 <send_previous_error_packet>
  system_setup();
 80035c4:	f000 f8bc 	bl	8003740 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80035c8:	f013 fb54 	bl	8016c74 <osKernelInitialize>
  MX_FREERTOS_Init();
 80035cc:	f7fe feb0 	bl	8002330 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80035d0:	f013 fb74 	bl	8016cbc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80035d4:	e7fe      	b.n	80035d4 <main+0x128>
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b09c      	sub	sp, #112	; 0x70
 80035e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e6:	224c      	movs	r2, #76	; 0x4c
 80035e8:	2100      	movs	r1, #0
 80035ea:	4618      	mov	r0, r3
 80035ec:	f016 fd5e 	bl	801a0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	2220      	movs	r2, #32
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f016 fd58 	bl	801a0ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80035fc:	2002      	movs	r0, #2
 80035fe:	f00a fab1 	bl	800db64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003602:	2300      	movs	r3, #0
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <SystemClock_Config+0xfc>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	4a33      	ldr	r2, [pc, #204]	; (80036d8 <SystemClock_Config+0xfc>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003612:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <SystemClock_Config+0xfc>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <SystemClock_Config+0x100>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003624:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <SystemClock_Config+0x100>)
 8003626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800362a:	6193      	str	r3, [r2, #24]
 800362c:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <SystemClock_Config+0x100>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003638:	bf00      	nop
 800363a:	4b28      	ldr	r3, [pc, #160]	; (80036dc <SystemClock_Config+0x100>)
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	d1f8      	bne.n	800363a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003648:	230b      	movs	r3, #11
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800364c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8003652:	2309      	movs	r3, #9
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003656:	2340      	movs	r3, #64	; 0x40
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800365a:	2301      	movs	r3, #1
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800365e:	2302      	movs	r3, #2
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003662:	2302      	movs	r3, #2
 8003664:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003666:	2304      	movs	r3, #4
 8003668:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800366a:	2318      	movs	r3, #24
 800366c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800366e:	2302      	movs	r3, #2
 8003670:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003672:	2302      	movs	r3, #2
 8003674:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003676:	2302      	movs	r3, #2
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800367a:	2308      	movs	r3, #8
 800367c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800367e:	2302      	movs	r3, #2
 8003680:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368a:	4618      	mov	r0, r3
 800368c:	f00a faa4 	bl	800dbd8 <HAL_RCC_OscConfig>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003696:	f000 f997 	bl	80039c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800369a:	233f      	movs	r3, #63	; 0x3f
 800369c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800369e:	2303      	movs	r3, #3
 80036a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80036ae:	2340      	movs	r3, #64	; 0x40
 80036b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036ba:	1d3b      	adds	r3, r7, #4
 80036bc:	2101      	movs	r1, #1
 80036be:	4618      	mov	r0, r3
 80036c0:	f00a fee4 	bl	800e48c <HAL_RCC_ClockConfig>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80036ca:	f000 f97d 	bl	80039c8 <Error_Handler>
  }
}
 80036ce:	bf00      	nop
 80036d0:	3770      	adds	r7, #112	; 0x70
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	58000400 	.word	0x58000400
 80036dc:	58024800 	.word	0x58024800

080036e0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b0b0      	sub	sp, #192	; 0xc0
 80036e4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036e6:	463b      	mov	r3, r7
 80036e8:	22c0      	movs	r2, #192	; 0xc0
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f016 fcdd 	bl	801a0ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80036f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80036fe:	2304      	movs	r3, #4
 8003700:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8003702:	2318      	movs	r3, #24
 8003704:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003706:	2308      	movs	r3, #8
 8003708:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800370a:	2302      	movs	r3, #2
 800370c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800370e:	2302      	movs	r3, #2
 8003710:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003716:	2320      	movs	r3, #32
 8003718:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003724:	463b      	mov	r3, r7
 8003726:	4618      	mov	r0, r3
 8003728:	f00b fa7e 	bl	800ec28 <HAL_RCCEx_PeriphCLKConfig>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003732:	f000 f949 	bl	80039c8 <Error_Handler>
  }
}
 8003736:	bf00      	nop
 8003738:	37c0      	adds	r7, #192	; 0xc0
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
	// 3 -- Init rail monitor
	// 4 -- Start timer 3
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	error_counter_init();
 8003744:	f7fe fc2a 	bl	8001f9c <error_counter_init>


	packet_event_flags = osEventFlagsNew(NULL);
 8003748:	2000      	movs	r0, #0
 800374a:	f013 fbaa 	bl	8016ea2 <osEventFlagsNew>
 800374e:	4603      	mov	r3, r0
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <system_setup+0x80>)
 8003752:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <system_setup+0x80>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d100      	bne.n	800375e <system_setup+0x1e>
        while (1);
 800375c:	e7fe      	b.n	800375c <system_setup+0x1c>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800375e:	2000      	movs	r0, #0
 8003760:	f013 fb9f 	bl	8016ea2 <osEventFlagsNew>
 8003764:	4603      	mov	r3, r0
 8003766:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <system_setup+0x84>)
 8003768:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <system_setup+0x84>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d100      	bne.n	8003774 <system_setup+0x34>
        while (1);
 8003772:	e7fe      	b.n	8003772 <system_setup+0x32>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003774:	2000      	movs	r0, #0
 8003776:	f013 fb94 	bl	8016ea2 <osEventFlagsNew>
 800377a:	4603      	mov	r3, r0
 800377c:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <system_setup+0x88>)
 800377e:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <system_setup+0x88>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d100      	bne.n	800378a <system_setup+0x4a>
        while (1);
 8003788:	e7fe      	b.n	8003788 <system_setup+0x48>
    }

    TIM2->CCR4 = 0;
 800378a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8003792:	210c      	movs	r1, #12
 8003794:	480d      	ldr	r0, [pc, #52]	; (80037cc <system_setup+0x8c>)
 8003796:	f00f f8d5 	bl	8012944 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 800379a:	f001 fd85 	bl	80052a8 <voltage_monitor_init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d100      	bne.n	80037a6 <system_setup+0x66>
		while (1);
 80037a4:	e7fe      	b.n	80037a4 <system_setup+0x64>
	}

	if (!init_adc_dma()) {
 80037a6:	f000 fbb7 	bl	8003f18 <init_adc_dma>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d100      	bne.n	80037b2 <system_setup+0x72>
		while (1);
 80037b0:	e7fe      	b.n	80037b0 <system_setup+0x70>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80037b2:	2201      	movs	r2, #1
 80037b4:	4906      	ldr	r1, [pc, #24]	; (80037d0 <system_setup+0x90>)
 80037b6:	4807      	ldr	r0, [pc, #28]	; (80037d4 <system_setup+0x94>)
 80037b8:	f010 fda4 	bl	8014304 <HAL_UART_Receive_IT>

}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	24001ac8 	.word	0x24001ac8
 80037c4:	24001acc 	.word	0x24001acc
 80037c8:	24001ad0 	.word	0x24001ad0
 80037cc:	24001e30 	.word	0x24001e30
 80037d0:	24001ad4 	.word	0x24001ad4
 80037d4:	24001e7c 	.word	0x24001e7c

080037d8 <sync>:

void sync() {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
	send_ACK();
 80037de:	f000 f81f 	bl	8003820 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80037e2:	480d      	ldr	r0, [pc, #52]	; (8003818 <sync+0x40>)
 80037e4:	f010 fdda 	bl	801439c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80037e8:	2364      	movs	r3, #100	; 0x64
 80037ea:	2209      	movs	r2, #9
 80037ec:	490b      	ldr	r1, [pc, #44]	; (800381c <sync+0x44>)
 80037ee:	480a      	ldr	r0, [pc, #40]	; (8003818 <sync+0x40>)
 80037f0:	f010 fcc0 	bl	8014174 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <sync+0x44>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2bff      	cmp	r3, #255	; 0xff
 80037fe:	d1f3      	bne.n	80037e8 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003800:	2201      	movs	r2, #1
 8003802:	4906      	ldr	r1, [pc, #24]	; (800381c <sync+0x44>)
 8003804:	4804      	ldr	r0, [pc, #16]	; (8003818 <sync+0x40>)
 8003806:	f010 fd7d 	bl	8014304 <HAL_UART_Receive_IT>

	send_ACK();
 800380a:	f000 f809 	bl	8003820 <send_ACK>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	24001e7c 	.word	0x24001e7c
 800381c:	24001ad4 	.word	0x24001ad4

08003820 <send_ACK>:

void send_ACK() {
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <send_ACK+0x1c>)
 8003826:	22ff      	movs	r2, #255	; 0xff
 8003828:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800382a:	2364      	movs	r3, #100	; 0x64
 800382c:	2201      	movs	r2, #1
 800382e:	4903      	ldr	r1, [pc, #12]	; (800383c <send_ACK+0x1c>)
 8003830:	4803      	ldr	r0, [pc, #12]	; (8003840 <send_ACK+0x20>)
 8003832:	f010 fc11 	bl	8014058 <HAL_UART_Transmit>
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	24001b20 	.word	0x24001b20
 8003840:	24001e7c 	.word	0x24001e7c

08003844 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800384a:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <get_current_step+0xc0>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003856:	4293      	cmp	r3, r2
 8003858:	d04a      	beq.n	80038f0 <get_current_step+0xac>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	da48      	bge.n	80038f4 <get_current_step+0xb0>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003868:	4293      	cmp	r3, r2
 800386a:	d03f      	beq.n	80038ec <get_current_step+0xa8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003872:	4293      	cmp	r3, r2
 8003874:	dc3e      	bgt.n	80038f4 <get_current_step+0xb0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f640 421f 	movw	r2, #3103	; 0xc1f
 800387c:	4293      	cmp	r3, r2
 800387e:	d033      	beq.n	80038e8 <get_current_step+0xa4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003886:	da35      	bge.n	80038f4 <get_current_step+0xb0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800388e:	4293      	cmp	r3, r2
 8003890:	d028      	beq.n	80038e4 <get_current_step+0xa0>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003898:	4293      	cmp	r3, r2
 800389a:	dc2b      	bgt.n	80038f4 <get_current_step+0xb0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f240 7245 	movw	r2, #1861	; 0x745
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01c      	beq.n	80038e0 <get_current_step+0x9c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f240 7245 	movw	r2, #1861	; 0x745
 80038ac:	4293      	cmp	r3, r2
 80038ae:	dc21      	bgt.n	80038f4 <get_current_step+0xb0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d010      	beq.n	80038dc <get_current_step+0x98>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80038c0:	4293      	cmp	r3, r2
 80038c2:	dc17      	bgt.n	80038f4 <get_current_step+0xb0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <get_current_step+0x90>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80038d0:	d002      	beq.n	80038d8 <get_current_step+0x94>
 80038d2:	e00f      	b.n	80038f4 <get_current_step+0xb0>
	case 0:
		return 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e00e      	b.n	80038f6 <get_current_step+0xb2>
	case 620:
		return 1;
 80038d8:	2301      	movs	r3, #1
 80038da:	e00c      	b.n	80038f6 <get_current_step+0xb2>
	case 1241:
		return 2;
 80038dc:	2302      	movs	r3, #2
 80038de:	e00a      	b.n	80038f6 <get_current_step+0xb2>
	case 1861:
		return 3;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e008      	b.n	80038f6 <get_current_step+0xb2>
	case 2482:
		return 4;
 80038e4:	2304      	movs	r3, #4
 80038e6:	e006      	b.n	80038f6 <get_current_step+0xb2>
	case 3103:
		return 5;
 80038e8:	2305      	movs	r3, #5
 80038ea:	e004      	b.n	80038f6 <get_current_step+0xb2>
	case 3723:
		return 6;
 80038ec:	2306      	movs	r3, #6
 80038ee:	e002      	b.n	80038f6 <get_current_step+0xb2>
	case 4095:
		return 7;
 80038f0:	2307      	movs	r3, #7
 80038f2:	e000      	b.n	80038f6 <get_current_step+0xb2>
	default:
		return -1;
 80038f4:	23ff      	movs	r3, #255	; 0xff
	}
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40007400 	.word	0x40007400

08003908 <enter_stop>:

void enter_stop() {
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
	  send_ACK();
 800390c:	f7ff ff88 	bl	8003820 <send_ACK>

	  vTaskSuspendAll();
 8003910:	f014 fe5e 	bl	80185d0 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003914:	2101      	movs	r1, #1
 8003916:	2001      	movs	r0, #1
 8003918:	f00a f8e8 	bl	800daec <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 800391c:	f7ff f8e4 	bl	8002ae8 <__NVIC_SystemReset>

08003920 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003926:	463b      	mov	r3, r7
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003932:	f003 fd87 	bl	8007444 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003936:	2301      	movs	r3, #1
 8003938:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800393a:	2300      	movs	r3, #0
 800393c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 800393e:	2300      	movs	r3, #0
 8003940:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003942:	231f      	movs	r3, #31
 8003944:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003946:	2387      	movs	r3, #135	; 0x87
 8003948:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800394a:	2300      	movs	r3, #0
 800394c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800394e:	2300      	movs	r3, #0
 8003950:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003952:	2301      	movs	r3, #1
 8003954:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003956:	2301      	movs	r3, #1
 8003958:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800395a:	2300      	movs	r3, #0
 800395c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003962:	463b      	mov	r3, r7
 8003964:	4618      	mov	r0, r3
 8003966:	f003 fda5 	bl	80074b4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800396a:	2301      	movs	r3, #1
 800396c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x081C0000;
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <MPU_Config+0x80>)
 8003970:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8003972:	2311      	movs	r3, #17
 8003974:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8003976:	2300      	movs	r3, #0
 8003978:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800397a:	2301      	movs	r3, #1
 800397c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800397e:	2303      	movs	r3, #3
 8003980:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8003982:	2300      	movs	r3, #0
 8003984:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8003986:	2300      	movs	r3, #0
 8003988:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800398a:	463b      	mov	r3, r7
 800398c:	4618      	mov	r0, r3
 800398e:	f003 fd91 	bl	80074b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003992:	2004      	movs	r0, #4
 8003994:	f003 fd6e 	bl	8007474 <HAL_MPU_Enable>

}
 8003998:	bf00      	nop
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	081c0000 	.word	0x081c0000

080039a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039b6:	f002 f80f 	bl	80059d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40001000 	.word	0x40001000

080039c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 80039ce:	2302      	movs	r3, #2
 80039d0:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 80039d2:	231a      	movs	r3, #26
 80039d4:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fe faaa 	bl	8001f30 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80039ea:	bf00      	nop
 80039ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039f0:	481c      	ldr	r0, [pc, #112]	; (8003a64 <create_pmt_packet+0x80>)
 80039f2:	f007 fc85 	bl	800b300 <HAL_GPIO_ReadPin>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f7      	bne.n	80039ec <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 faa8 	bl	8004f54 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003a04:	f107 0308 	add.w	r3, r7, #8
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fad9 	bl	8003fc0 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003a0e:	23bb      	movs	r3, #187	; 0xbb
 8003a10:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003a12:	23bb      	movs	r3, #187	; 0xbb
 8003a14:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <create_pmt_packet+0x84>)
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <create_pmt_packet+0x84>)
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003a2a:	7a3b      	ldrb	r3, [r7, #8]
 8003a2c:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003a2e:	7a7b      	ldrb	r3, [r7, #9]
 8003a30:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003a32:	793b      	ldrb	r3, [r7, #4]
 8003a34:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003a36:	797b      	ldrb	r3, [r7, #5]
 8003a38:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003a3a:	79bb      	ldrb	r3, [r7, #6]
 8003a3c:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003a42:	f107 010c 	add.w	r1, r7, #12
 8003a46:	2364      	movs	r3, #100	; 0x64
 8003a48:	220a      	movs	r2, #10
 8003a4a:	4808      	ldr	r0, [pc, #32]	; (8003a6c <create_pmt_packet+0x88>)
 8003a4c:	f010 fb04 	bl	8014058 <HAL_UART_Transmit>

	pmt_seq++;
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <create_pmt_packet+0x84>)
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <create_pmt_packet+0x84>)
 8003a5a:	801a      	strh	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	58020000 	.word	0x58020000
 8003a68:	24001b22 	.word	0x24001b22
 8003a6c:	24001e7c 	.word	0x24001e7c

08003a70 <create_erpa_packet>:


void create_erpa_packet() {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003a76:	bf00      	nop
 8003a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a7c:	4828      	ldr	r0, [pc, #160]	; (8003b20 <create_erpa_packet+0xb0>)
 8003a7e:	f007 fc3f 	bl	800b300 <HAL_GPIO_ReadPin>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f7      	bne.n	8003a78 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003a88:	23ff      	movs	r3, #255	; 0xff
 8003a8a:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fa60 	bl	8004f54 <get_uptime>
	sweep_step = get_current_step();
 8003a94:	f7ff fed6 	bl	8003844 <get_current_step>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 faad 	bl	8004000 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003aa6:	f107 0308 	add.w	r3, r7, #8
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fac8 	bl	8004040 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003ab0:	23aa      	movs	r3, #170	; 0xaa
 8003ab2:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003ab4:	23aa      	movs	r3, #170	; 0xaa
 8003ab6:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <create_erpa_packet+0xb4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <create_erpa_packet+0xb4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	0a1b      	lsrs	r3, r3, #8
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003acc:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <create_erpa_packet+0xb4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003ad4:	7ffb      	ldrb	r3, [r7, #31]
 8003ad6:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003ad8:	893b      	ldrh	r3, [r7, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003ae2:	893b      	ldrh	r3, [r7, #8]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003ae8:	7b3b      	ldrb	r3, [r7, #12]
 8003aea:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003aec:	7b7b      	ldrb	r3, [r7, #13]
 8003aee:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003af0:	793b      	ldrb	r3, [r7, #4]
 8003af2:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003af4:	797b      	ldrb	r3, [r7, #5]
 8003af6:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003af8:	79bb      	ldrb	r3, [r7, #6]
 8003afa:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003b00:	f107 0110 	add.w	r1, r7, #16
 8003b04:	2364      	movs	r3, #100	; 0x64
 8003b06:	220e      	movs	r2, #14
 8003b08:	4807      	ldr	r0, [pc, #28]	; (8003b28 <create_erpa_packet+0xb8>)
 8003b0a:	f010 faa5 	bl	8014058 <HAL_UART_Transmit>

	erpa_seq++;
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <create_erpa_packet+0xb4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3301      	adds	r3, #1
 8003b14:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <create_erpa_packet+0xb4>)
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	58020400 	.word	0x58020400
 8003b24:	24001b24 	.word	0x24001b24
 8003b28:	24001e7c 	.word	0x24001e7c

08003b2c <create_hk_packet>:


void create_hk_packet() {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b094      	sub	sp, #80	; 0x50
 8003b30:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003b32:	1d3b      	adds	r3, r7, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fa0d 	bl	8004f54 <get_uptime>
	get_timestamp(timestamp);
 8003b3a:	f107 0308 	add.w	r3, r7, #8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f001 fa58 	bl	8004ff4 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8003b44:	f001 fdf0 	bl	8005728 <get_rail_monitor>
 8003b48:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003b4a:	23cc      	movs	r3, #204	; 0xcc
 8003b4c:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003b4e:	23cc      	movs	r3, #204	; 0xcc
 8003b50:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003b52:	4b9b      	ldr	r3, [pc, #620]	; (8003dc0 <create_hk_packet+0x294>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003b5e:	4b98      	ldr	r3, [pc, #608]	; (8003dc0 <create_hk_packet+0x294>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b68:	889b      	ldrh	r3, [r3, #4]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b74:	889b      	ldrh	r3, [r3, #4]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7c:	330a      	adds	r3, #10
 8003b7e:	889b      	ldrh	r3, [r3, #4]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8a:	330a      	adds	r3, #10
 8003b8c:	889b      	ldrh	r3, [r3, #4]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	3314      	adds	r3, #20
 8003b96:	889b      	ldrh	r3, [r3, #4]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	889b      	ldrh	r3, [r3, #4]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bac:	331e      	adds	r3, #30
 8003bae:	889b      	ldrh	r3, [r3, #4]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bba:	331e      	adds	r3, #30
 8003bbc:	889b      	ldrh	r3, [r3, #4]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	3328      	adds	r3, #40	; 0x28
 8003bc6:	889b      	ldrh	r3, [r3, #4]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd4:	3328      	adds	r3, #40	; 0x28
 8003bd6:	889b      	ldrh	r3, [r3, #4]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	3332      	adds	r3, #50	; 0x32
 8003be2:	889b      	ldrh	r3, [r3, #4]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf0:	3332      	adds	r3, #50	; 0x32
 8003bf2:	889b      	ldrh	r3, [r3, #4]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfc:	333c      	adds	r3, #60	; 0x3c
 8003bfe:	889b      	ldrh	r3, [r3, #4]
 8003c00:	0a1b      	lsrs	r3, r3, #8
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0c:	333c      	adds	r3, #60	; 0x3c
 8003c0e:	889b      	ldrh	r3, [r3, #4]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	3346      	adds	r3, #70	; 0x46
 8003c1a:	889b      	ldrh	r3, [r3, #4]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c28:	3346      	adds	r3, #70	; 0x46
 8003c2a:	889b      	ldrh	r3, [r3, #4]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	3350      	adds	r3, #80	; 0x50
 8003c36:	889b      	ldrh	r3, [r3, #4]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c44:	3350      	adds	r3, #80	; 0x50
 8003c46:	889b      	ldrh	r3, [r3, #4]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	335a      	adds	r3, #90	; 0x5a
 8003c52:	889b      	ldrh	r3, [r3, #4]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c60:	335a      	adds	r3, #90	; 0x5a
 8003c62:	889b      	ldrh	r3, [r3, #4]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6c:	3364      	adds	r3, #100	; 0x64
 8003c6e:	889b      	ldrh	r3, [r3, #4]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	3364      	adds	r3, #100	; 0x64
 8003c7e:	889b      	ldrh	r3, [r3, #4]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	336e      	adds	r3, #110	; 0x6e
 8003c8a:	889b      	ldrh	r3, [r3, #4]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c98:	336e      	adds	r3, #110	; 0x6e
 8003c9a:	889b      	ldrh	r3, [r3, #4]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	3378      	adds	r3, #120	; 0x78
 8003ca6:	889b      	ldrh	r3, [r3, #4]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb4:	3378      	adds	r3, #120	; 0x78
 8003cb6:	889b      	ldrh	r3, [r3, #4]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc0:	3382      	adds	r3, #130	; 0x82
 8003cc2:	889b      	ldrh	r3, [r3, #4]
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	3382      	adds	r3, #130	; 0x82
 8003cd2:	889b      	ldrh	r3, [r3, #4]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cdc:	338c      	adds	r3, #140	; 0x8c
 8003cde:	889b      	ldrh	r3, [r3, #4]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	338c      	adds	r3, #140	; 0x8c
 8003cee:	889b      	ldrh	r3, [r3, #4]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf8:	3396      	adds	r3, #150	; 0x96
 8003cfa:	889b      	ldrh	r3, [r3, #4]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d08:	3396      	adds	r3, #150	; 0x96
 8003d0a:	889b      	ldrh	r3, [r3, #4]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d14:	33a0      	adds	r3, #160	; 0xa0
 8003d16:	889b      	ldrh	r3, [r3, #4]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d24:	33a0      	adds	r3, #160	; 0xa0
 8003d26:	889b      	ldrh	r3, [r3, #4]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	33aa      	adds	r3, #170	; 0xaa
 8003d32:	889b      	ldrh	r3, [r3, #4]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d40:	33aa      	adds	r3, #170	; 0xaa
 8003d42:	889b      	ldrh	r3, [r3, #4]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003d4a:	7a3b      	ldrb	r3, [r7, #8]
 8003d4c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003d50:	7a7b      	ldrb	r3, [r7, #9]
 8003d52:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003d56:	7abb      	ldrb	r3, [r7, #10]
 8003d58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003d62:	7b3b      	ldrb	r3, [r7, #12]
 8003d64:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003d68:	7b7b      	ldrb	r3, [r7, #13]
 8003d6a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003d6e:	7bbb      	ldrb	r3, [r7, #14]
 8003d70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003d7a:	7c3b      	ldrb	r3, [r7, #16]
 8003d7c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003d80:	7c7b      	ldrb	r3, [r7, #17]
 8003d82:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003d86:	793b      	ldrb	r3, [r7, #4]
 8003d88:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003d8c:	797b      	ldrb	r3, [r7, #5]
 8003d8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003d92:	79bb      	ldrb	r3, [r7, #6]
 8003d94:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003d9e:	f107 0114 	add.w	r1, r7, #20
 8003da2:	2364      	movs	r3, #100	; 0x64
 8003da4:	2236      	movs	r2, #54	; 0x36
 8003da6:	4807      	ldr	r0, [pc, #28]	; (8003dc4 <create_hk_packet+0x298>)
 8003da8:	f010 f956 	bl	8014058 <HAL_UART_Transmit>

	hk_seq++;
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <create_hk_packet+0x294>)
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	3301      	adds	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	4b02      	ldr	r3, [pc, #8]	; (8003dc0 <create_hk_packet+0x294>)
 8003db6:	801a      	strh	r2, [r3, #0]
}
 8003db8:	bf00      	nop
 8003dba:	3750      	adds	r7, #80	; 0x50
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	24001b28 	.word	0x24001b28
 8003dc4:	24001e7c 	.word	0x24001e7c

08003dc8 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <reset_packet_sequence_numbers+0x20>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <reset_packet_sequence_numbers+0x24>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <reset_packet_sequence_numbers+0x28>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	801a      	strh	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	24001b22 	.word	0x24001b22
 8003dec:	24001b24 	.word	0x24001b24
 8003df0:	24001b28 	.word	0x24001b28

08003df4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003e08:	2300      	movs	r3, #0
 8003e0a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003e0c:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e0e:	4a27      	ldr	r2, [pc, #156]	; (8003eac <MX_RTC_Init+0xb8>)
 8003e10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003e12:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e1a:	2263      	movs	r2, #99	; 0x63
 8003e1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e20:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e24:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e3e:	481a      	ldr	r0, [pc, #104]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e40:	f00d fbf0 	bl	8011624 <HAL_RTC_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003e4a:	f7ff fdbd 	bl	80039c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	2201      	movs	r2, #1
 8003e66:	4619      	mov	r1, r3
 8003e68:	480f      	ldr	r0, [pc, #60]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e6a:	f00d fc5d 	bl	8011728 <HAL_RTC_SetTime>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003e74:	f7ff fda8 	bl	80039c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003e80:	2301      	movs	r3, #1
 8003e82:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003e88:	463b      	mov	r3, r7
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4806      	ldr	r0, [pc, #24]	; (8003ea8 <MX_RTC_Init+0xb4>)
 8003e90:	f00d fd44 	bl	801191c <HAL_RTC_SetDate>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003e9a:	f7ff fd95 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	24001b2c 	.word	0x24001b2c
 8003eac:	58004000 	.word	0x58004000

08003eb0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b0b2      	sub	sp, #200	; 0xc8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eb8:	f107 0308 	add.w	r3, r7, #8
 8003ebc:	22c0      	movs	r2, #192	; 0xc0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f016 f8f3 	bl	801a0ac <memset>
  if(rtcHandle->Instance==RTC)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <HAL_RTC_MspInit+0x5c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d118      	bne.n	8003f02 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ed0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <HAL_RTC_MspInit+0x60>)
 8003ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f00a fe9e 	bl	800ec28 <HAL_RCCEx_PeriphCLKConfig>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003ef2:	f7ff fd69 	bl	80039c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <HAL_RTC_MspInit+0x64>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a06      	ldr	r2, [pc, #24]	; (8003f14 <HAL_RTC_MspInit+0x64>)
 8003efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003f02:	bf00      	nop
 8003f04:	37c8      	adds	r7, #200	; 0xc8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	58004000 	.word	0x58004000
 8003f10:	00019300 	.word	0x00019300
 8003f14:	58024400 	.word	0x58024400

08003f18 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003f22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2a:	481f      	ldr	r0, [pc, #124]	; (8003fa8 <init_adc_dma+0x90>)
 8003f2c:	f003 f868 	bl	8007000 <HAL_ADCEx_Calibration_Start>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003f36:	f7ff fd47 	bl	80039c8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003f3a:	220b      	movs	r2, #11
 8003f3c:	491b      	ldr	r1, [pc, #108]	; (8003fac <init_adc_dma+0x94>)
 8003f3e:	481a      	ldr	r0, [pc, #104]	; (8003fa8 <init_adc_dma+0x90>)
 8003f40:	f002 f93c 	bl	80061bc <HAL_ADC_Start_DMA>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003f4a:	f7ff fd3d 	bl	80039c8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003f4e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f56:	4816      	ldr	r0, [pc, #88]	; (8003fb0 <init_adc_dma+0x98>)
 8003f58:	f003 f852 	bl	8007000 <HAL_ADCEx_Calibration_Start>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003f62:	f7ff fd31 	bl	80039c8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003f66:	2204      	movs	r2, #4
 8003f68:	4912      	ldr	r1, [pc, #72]	; (8003fb4 <init_adc_dma+0x9c>)
 8003f6a:	4811      	ldr	r0, [pc, #68]	; (8003fb0 <init_adc_dma+0x98>)
 8003f6c:	f002 f926 	bl	80061bc <HAL_ADC_Start_DMA>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003f76:	f7ff fd27 	bl	80039c8 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <init_adc_dma+0xa0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <init_adc_dma+0xa0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <init_adc_dma+0xa4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <init_adc_dma+0xa4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f98:	601a      	str	r2, [r3, #0]


	status = 1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	71fb      	strb	r3, [r7, #7]

	return status;
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	2400015c 	.word	0x2400015c
 8003fac:	24001b60 	.word	0x24001b60
 8003fb0:	240001c0 	.word	0x240001c0
 8003fb4:	24001b80 	.word	0x24001b80
 8003fb8:	24001c1c 	.word	0x24001c1c
 8003fbc:	24001b94 	.word	0x24001b94

08003fc0 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003fc8:	2201      	movs	r2, #1
 8003fca:	490b      	ldr	r1, [pc, #44]	; (8003ff8 <sample_pmt_spi+0x38>)
 8003fcc:	480b      	ldr	r0, [pc, #44]	; (8003ffc <sample_pmt_spi+0x3c>)
 8003fce:	f00d ff6f 	bl	8011eb0 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003fd2:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <sample_pmt_spi+0x38>)
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <sample_pmt_spi+0x38>)
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3301      	adds	r3, #1
 8003fec:	7bba      	ldrb	r2, [r7, #14]
 8003fee:	701a      	strb	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	24001b8c 	.word	0x24001b8c
 8003ffc:	24001b94 	.word	0x24001b94

08004000 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8004008:	2201      	movs	r2, #1
 800400a:	490b      	ldr	r1, [pc, #44]	; (8004038 <sample_erpa_spi+0x38>)
 800400c:	480b      	ldr	r0, [pc, #44]	; (800403c <sample_erpa_spi+0x3c>)
 800400e:	f00d ff4f 	bl	8011eb0 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <sample_erpa_spi+0x38>)
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b29b      	uxth	r3, r3
 800401a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <sample_erpa_spi+0x38>)
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3301      	adds	r3, #1
 800402c:	7bba      	ldrb	r2, [r7, #14]
 800402e:	701a      	strb	r2, [r3, #0]
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	24001b88 	.word	0x24001b88
 800403c:	24001c1c 	.word	0x24001c1c

08004040 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <sample_erpa_adc+0x20>)
 800404a:	885b      	ldrh	r3, [r3, #2]
 800404c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	89fa      	ldrh	r2, [r7, #14]
 8004052:	801a      	strh	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	24001b60 	.word	0x24001b60

08004064 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800406c:	2390      	movs	r3, #144	; 0x90
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f8a2 	bl	80041b8 <poll_i2c_sensor>
 8004074:	4603      	mov	r3, r0
 8004076:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004078:	2394      	movs	r3, #148	; 0x94
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f89c 	bl	80041b8 <poll_i2c_sensor>
 8004080:	4603      	mov	r3, r0
 8004082:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8004084:	2392      	movs	r3, #146	; 0x92
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f896 	bl	80041b8 <poll_i2c_sensor>
 800408c:	4603      	mov	r3, r0
 800408e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8004090:	2396      	movs	r3, #150	; 0x96
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f890 	bl	80041b8 <poll_i2c_sensor>
 8004098:	4603      	mov	r3, r0
 800409a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	89fa      	ldrh	r2, [r7, #14]
 80040a0:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3302      	adds	r3, #2
 80040a6:	89ba      	ldrh	r2, [r7, #12]
 80040a8:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	897a      	ldrh	r2, [r7, #10]
 80040b0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3306      	adds	r3, #6
 80040b6:	893a      	ldrh	r2, [r7, #8]
 80040b8:	801a      	strh	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <sample_hk_adc1+0xa0>)
 80040ce:	8a9b      	ldrh	r3, [r3, #20]
 80040d0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <sample_hk_adc1+0xa0>)
 80040d4:	8a1b      	ldrh	r3, [r3, #16]
 80040d6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80040d8:	4b22      	ldr	r3, [pc, #136]	; (8004164 <sample_hk_adc1+0xa0>)
 80040da:	899b      	ldrh	r3, [r3, #12]
 80040dc:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <sample_hk_adc1+0xa0>)
 80040e0:	8a5b      	ldrh	r3, [r3, #18]
 80040e2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80040e4:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <sample_hk_adc1+0xa0>)
 80040e6:	889b      	ldrh	r3, [r3, #4]
 80040e8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80040ea:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <sample_hk_adc1+0xa0>)
 80040ec:	88db      	ldrh	r3, [r3, #6]
 80040ee:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80040f0:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <sample_hk_adc1+0xa0>)
 80040f2:	89db      	ldrh	r3, [r3, #14]
 80040f4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80040f6:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <sample_hk_adc1+0xa0>)
 80040f8:	891b      	ldrh	r3, [r3, #8]
 80040fa:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <sample_hk_adc1+0xa0>)
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8004102:	4b18      	ldr	r3, [pc, #96]	; (8004164 <sample_hk_adc1+0xa0>)
 8004104:	895b      	ldrh	r3, [r3, #10]
 8004106:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8bfa      	ldrh	r2, [r7, #30]
 800410c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3302      	adds	r3, #2
 8004112:	8bba      	ldrh	r2, [r7, #28]
 8004114:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3304      	adds	r3, #4
 800411a:	8b7a      	ldrh	r2, [r7, #26]
 800411c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3306      	adds	r3, #6
 8004122:	8b3a      	ldrh	r2, [r7, #24]
 8004124:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3308      	adds	r3, #8
 800412a:	8afa      	ldrh	r2, [r7, #22]
 800412c:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	330a      	adds	r3, #10
 8004132:	8aba      	ldrh	r2, [r7, #20]
 8004134:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	330c      	adds	r3, #12
 800413a:	8a7a      	ldrh	r2, [r7, #18]
 800413c:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	330e      	adds	r3, #14
 8004142:	8a3a      	ldrh	r2, [r7, #16]
 8004144:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3310      	adds	r3, #16
 800414a:	89fa      	ldrh	r2, [r7, #14]
 800414c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3312      	adds	r3, #18
 8004152:	89ba      	ldrh	r2, [r7, #12]
 8004154:	801a      	strh	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	3724      	adds	r7, #36	; 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	24001b60 	.word	0x24001b60

08004168 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8004170:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <sample_hk_adc3+0x4c>)
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <sample_hk_adc3+0x4c>)
 8004178:	885b      	ldrh	r3, [r3, #2]
 800417a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800417c:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <sample_hk_adc3+0x4c>)
 800417e:	889b      	ldrh	r3, [r3, #4]
 8004180:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <sample_hk_adc3+0x4c>)
 8004184:	88db      	ldrh	r3, [r3, #6]
 8004186:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	89fa      	ldrh	r2, [r7, #14]
 800418c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3302      	adds	r3, #2
 8004192:	89ba      	ldrh	r2, [r7, #12]
 8004194:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	897a      	ldrh	r2, [r7, #10]
 800419c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3306      	adds	r3, #6
 80041a2:	893a      	ldrh	r2, [r7, #8]
 80041a4:	801a      	strh	r2, [r3, #0]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	24001b80 	.word	0x24001b80

080041b8 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 80041c2:	2200      	movs	r2, #0
 80041c4:	4b20      	ldr	r3, [pc, #128]	; (8004248 <poll_i2c_sensor+0x90>)
 80041c6:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	b299      	uxth	r1, r3
 80041cc:	2301      	movs	r3, #1
 80041ce:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <poll_i2c_sensor+0x90>)
 80041d0:	481e      	ldr	r0, [pc, #120]	; (800424c <poll_i2c_sensor+0x94>)
 80041d2:	f007 f963 	bl	800b49c <HAL_I2C_Master_Transmit_DMA>
 80041d6:	4603      	mov	r3, r0
 80041d8:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 80041da:	7b7b      	ldrb	r3, [r7, #13]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 80041e0:	481b      	ldr	r0, [pc, #108]	; (8004250 <poll_i2c_sensor+0x98>)
 80041e2:	f015 ffd9 	bl	801a198 <puts>
 80041e6:	e028      	b.n	800423a <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80041e8:	bf00      	nop
 80041ea:	4818      	ldr	r0, [pc, #96]	; (800424c <poll_i2c_sensor+0x94>)
 80041ec:	f007 fc3d 	bl	800ba6a <HAL_I2C_GetState>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	d1f9      	bne.n	80041ea <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	b299      	uxth	r1, r3
 80041fa:	2302      	movs	r3, #2
 80041fc:	4a12      	ldr	r2, [pc, #72]	; (8004248 <poll_i2c_sensor+0x90>)
 80041fe:	4813      	ldr	r0, [pc, #76]	; (800424c <poll_i2c_sensor+0x94>)
 8004200:	f007 fa60 	bl	800b6c4 <HAL_I2C_Master_Receive_DMA>
 8004204:	4603      	mov	r3, r0
 8004206:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8004208:	7b7b      	ldrb	r3, [r7, #13]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 800420e:	4811      	ldr	r0, [pc, #68]	; (8004254 <poll_i2c_sensor+0x9c>)
 8004210:	f015 ffc2 	bl	801a198 <puts>
 8004214:	e011      	b.n	800423a <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004216:	bf00      	nop
 8004218:	480c      	ldr	r0, [pc, #48]	; (800424c <poll_i2c_sensor+0x94>)
 800421a:	f007 fc26 	bl	800ba6a <HAL_I2C_GetState>
 800421e:	4603      	mov	r3, r0
 8004220:	2b20      	cmp	r3, #32
 8004222:	d1f9      	bne.n	8004218 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8004224:	4b08      	ldr	r3, [pc, #32]	; (8004248 <poll_i2c_sensor+0x90>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 800422c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004230:	4a05      	ldr	r2, [pc, #20]	; (8004248 <poll_i2c_sensor+0x90>)
 8004232:	7852      	ldrb	r2, [r2, #1]
 8004234:	4313      	orrs	r3, r2
 8004236:	10db      	asrs	r3, r3, #3
 8004238:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 800423a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	24001b90 	.word	0x24001b90
 800424c:	24001974 	.word	0x24001974
 8004250:	0801ad00 	.word	0x0801ad00
 8004254:	0801ad10 	.word	0x0801ad10

08004258 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800425c:	4b28      	ldr	r3, [pc, #160]	; (8004300 <MX_SPI1_Init+0xa8>)
 800425e:	4a29      	ldr	r2, [pc, #164]	; (8004304 <MX_SPI1_Init+0xac>)
 8004260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <MX_SPI1_Init+0xa8>)
 8004264:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800426a:	4b25      	ldr	r3, [pc, #148]	; (8004300 <MX_SPI1_Init+0xa8>)
 800426c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004270:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <MX_SPI1_Init+0xa8>)
 8004274:	220f      	movs	r2, #15
 8004276:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <MX_SPI1_Init+0xa8>)
 800427a:	2200      	movs	r2, #0
 800427c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <MX_SPI1_Init+0xa8>)
 8004280:	2200      	movs	r2, #0
 8004282:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004284:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <MX_SPI1_Init+0xa8>)
 8004286:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800428a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800428c:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <MX_SPI1_Init+0xa8>)
 800428e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004292:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004294:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <MX_SPI1_Init+0xa8>)
 8004296:	2200      	movs	r2, #0
 8004298:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <MX_SPI1_Init+0xa8>)
 800429c:	2200      	movs	r2, #0
 800429e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80042a6:	4b16      	ldr	r3, [pc, #88]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042bc:	2200      	movs	r2, #0
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042da:	2200      	movs	r2, #0
 80042dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042ea:	4805      	ldr	r0, [pc, #20]	; (8004300 <MX_SPI1_Init+0xa8>)
 80042ec:	f00d fcbc 	bl	8011c68 <HAL_SPI_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80042f6:	f7ff fb67 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	24001b94 	.word	0x24001b94
 8004304:	40013000 	.word	0x40013000

08004308 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800430c:	4b28      	ldr	r3, [pc, #160]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800430e:	4a29      	ldr	r2, [pc, #164]	; (80043b4 <MX_SPI2_Init+0xac>)
 8004310:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004312:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004314:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004318:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800431a:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800431c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004320:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004322:	4b23      	ldr	r3, [pc, #140]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004324:	220f      	movs	r2, #15
 8004326:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004328:	4b21      	ldr	r3, [pc, #132]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004330:	2200      	movs	r2, #0
 8004332:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004334:	4b1e      	ldr	r3, [pc, #120]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004336:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800433a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800433c:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800433e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004342:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004346:	2200      	movs	r2, #0
 8004348:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800434a:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800434c:	2200      	movs	r2, #0
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004350:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004352:	2200      	movs	r2, #0
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004356:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004358:	2200      	movs	r2, #0
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800435c:	4b14      	ldr	r3, [pc, #80]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800435e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004362:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004364:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004366:	2200      	movs	r2, #0
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800436c:	2200      	movs	r2, #0
 800436e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004372:	2200      	movs	r2, #0
 8004374:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004378:	2200      	movs	r2, #0
 800437a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800437e:	2200      	movs	r2, #0
 8004380:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004384:	2200      	movs	r2, #0
 8004386:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800438a:	2200      	movs	r2, #0
 800438c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004394:	4b06      	ldr	r3, [pc, #24]	; (80043b0 <MX_SPI2_Init+0xa8>)
 8004396:	2200      	movs	r2, #0
 8004398:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800439a:	4805      	ldr	r0, [pc, #20]	; (80043b0 <MX_SPI2_Init+0xa8>)
 800439c:	f00d fc64 	bl	8011c68 <HAL_SPI_Init>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80043a6:	f7ff fb0f 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	24001c1c 	.word	0x24001c1c
 80043b4:	40003800 	.word	0x40003800

080043b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b0bc      	sub	sp, #240	; 0xf0
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043d0:	f107 0318 	add.w	r3, r7, #24
 80043d4:	22c0      	movs	r2, #192	; 0xc0
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f015 fe67 	bl	801a0ac <memset>
  if(spiHandle->Instance==SPI1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a83      	ldr	r2, [pc, #524]	; (80045f0 <HAL_SPI_MspInit+0x238>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d17c      	bne.n	80044e2 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80043e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	4618      	mov	r0, r3
 80043fe:	f00a fc13 	bl	800ec28 <HAL_RCCEx_PeriphCLKConfig>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004408:	f7ff fade 	bl	80039c8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800440c:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 800440e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004412:	4a78      	ldr	r2, [pc, #480]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 8004414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004418:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800441c:	4b75      	ldr	r3, [pc, #468]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 800441e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	4b72      	ldr	r3, [pc, #456]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 800442c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004430:	4a70      	ldr	r2, [pc, #448]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 8004432:	f043 0302 	orr.w	r3, r3, #2
 8004436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800443a:	4b6e      	ldr	r3, [pc, #440]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 800443c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004448:	2318      	movs	r3, #24
 800444a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444e:	2302      	movs	r3, #2
 8004450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	2300      	movs	r3, #0
 8004456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445a:	2300      	movs	r3, #0
 800445c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004460:	2305      	movs	r3, #5
 8004462:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004466:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800446a:	4619      	mov	r1, r3
 800446c:	4862      	ldr	r0, [pc, #392]	; (80045f8 <HAL_SPI_MspInit+0x240>)
 800446e:	f006 fd97 	bl	800afa0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004472:	4b62      	ldr	r3, [pc, #392]	; (80045fc <HAL_SPI_MspInit+0x244>)
 8004474:	4a62      	ldr	r2, [pc, #392]	; (8004600 <HAL_SPI_MspInit+0x248>)
 8004476:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004478:	4b60      	ldr	r3, [pc, #384]	; (80045fc <HAL_SPI_MspInit+0x244>)
 800447a:	2225      	movs	r2, #37	; 0x25
 800447c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800447e:	4b5f      	ldr	r3, [pc, #380]	; (80045fc <HAL_SPI_MspInit+0x244>)
 8004480:	2200      	movs	r2, #0
 8004482:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004484:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <HAL_SPI_MspInit+0x244>)
 8004486:	2200      	movs	r2, #0
 8004488:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800448a:	4b5c      	ldr	r3, [pc, #368]	; (80045fc <HAL_SPI_MspInit+0x244>)
 800448c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004490:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004492:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <HAL_SPI_MspInit+0x244>)
 8004494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004498:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800449a:	4b58      	ldr	r3, [pc, #352]	; (80045fc <HAL_SPI_MspInit+0x244>)
 800449c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80044a2:	4b56      	ldr	r3, [pc, #344]	; (80045fc <HAL_SPI_MspInit+0x244>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044a8:	4b54      	ldr	r3, [pc, #336]	; (80045fc <HAL_SPI_MspInit+0x244>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044ae:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_SPI_MspInit+0x244>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80044b4:	4851      	ldr	r0, [pc, #324]	; (80045fc <HAL_SPI_MspInit+0x244>)
 80044b6:	f003 fc43 	bl	8007d40 <HAL_DMA_Init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80044c0:	f7ff fa82 	bl	80039c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a4d      	ldr	r2, [pc, #308]	; (80045fc <HAL_SPI_MspInit+0x244>)
 80044c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80044ca:	4a4c      	ldr	r2, [pc, #304]	; (80045fc <HAL_SPI_MspInit+0x244>)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80044d0:	2200      	movs	r2, #0
 80044d2:	2105      	movs	r1, #5
 80044d4:	2023      	movs	r0, #35	; 0x23
 80044d6:	f002 ff8d 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80044da:	2023      	movs	r0, #35	; 0x23
 80044dc:	f002 ffa4 	bl	8007428 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80044e0:	e081      	b.n	80045e6 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a47      	ldr	r2, [pc, #284]	; (8004604 <HAL_SPI_MspInit+0x24c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d17c      	bne.n	80045e6 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80044ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044fc:	f107 0318 	add.w	r3, r7, #24
 8004500:	4618      	mov	r0, r3
 8004502:	f00a fb91 	bl	800ec28 <HAL_RCCEx_PeriphCLKConfig>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 800450c:	f7ff fa5c 	bl	80039c8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 8004512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004516:	4a37      	ldr	r2, [pc, #220]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 8004518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800451c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004520:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 8004522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 8004530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004534:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 8004536:	f043 0302 	orr.w	r3, r3, #2
 800453a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800453e:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <HAL_SPI_MspInit+0x23c>)
 8004540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800454c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004550:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004554:	2302      	movs	r3, #2
 8004556:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004566:	2305      	movs	r3, #5
 8004568:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004570:	4619      	mov	r1, r3
 8004572:	4821      	ldr	r0, [pc, #132]	; (80045f8 <HAL_SPI_MspInit+0x240>)
 8004574:	f006 fd14 	bl	800afa0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_SPI_MspInit+0x250>)
 800457a:	4a24      	ldr	r2, [pc, #144]	; (800460c <HAL_SPI_MspInit+0x254>)
 800457c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800457e:	4b22      	ldr	r3, [pc, #136]	; (8004608 <HAL_SPI_MspInit+0x250>)
 8004580:	2227      	movs	r2, #39	; 0x27
 8004582:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004584:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_SPI_MspInit+0x250>)
 8004586:	2200      	movs	r2, #0
 8004588:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800458a:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <HAL_SPI_MspInit+0x250>)
 800458c:	2200      	movs	r2, #0
 800458e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004590:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <HAL_SPI_MspInit+0x250>)
 8004592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004596:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_SPI_MspInit+0x250>)
 800459a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800459e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_SPI_MspInit+0x250>)
 80045a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045a6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80045a8:	4b17      	ldr	r3, [pc, #92]	; (8004608 <HAL_SPI_MspInit+0x250>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <HAL_SPI_MspInit+0x250>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045b4:	4b14      	ldr	r3, [pc, #80]	; (8004608 <HAL_SPI_MspInit+0x250>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80045ba:	4813      	ldr	r0, [pc, #76]	; (8004608 <HAL_SPI_MspInit+0x250>)
 80045bc:	f003 fbc0 	bl	8007d40 <HAL_DMA_Init>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_SPI_MspInit+0x212>
      Error_Handler();
 80045c6:	f7ff f9ff 	bl	80039c8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <HAL_SPI_MspInit+0x250>)
 80045ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80045d0:	4a0d      	ldr	r2, [pc, #52]	; (8004608 <HAL_SPI_MspInit+0x250>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2105      	movs	r1, #5
 80045da:	2024      	movs	r0, #36	; 0x24
 80045dc:	f002 ff0a 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80045e0:	2024      	movs	r0, #36	; 0x24
 80045e2:	f002 ff21 	bl	8007428 <HAL_NVIC_EnableIRQ>
}
 80045e6:	bf00      	nop
 80045e8:	37f0      	adds	r7, #240	; 0xf0
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40013000 	.word	0x40013000
 80045f4:	58024400 	.word	0x58024400
 80045f8:	58020400 	.word	0x58020400
 80045fc:	24001ca4 	.word	0x24001ca4
 8004600:	40020070 	.word	0x40020070
 8004604:	40003800 	.word	0x40003800
 8004608:	24001d1c 	.word	0x24001d1c
 800460c:	40020058 	.word	0x40020058

08004610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_MspInit+0x38>)
 8004618:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800461c:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <HAL_MspInit+0x38>)
 800461e:	f043 0302 	orr.w	r3, r3, #2
 8004622:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <HAL_MspInit+0x38>)
 8004628:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004634:	2200      	movs	r2, #0
 8004636:	210f      	movs	r1, #15
 8004638:	f06f 0001 	mvn.w	r0, #1
 800463c:	f002 feda 	bl	80073f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	58024400 	.word	0x58024400

0800464c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b090      	sub	sp, #64	; 0x40
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d827      	bhi.n	80046aa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800465a:	2200      	movs	r2, #0
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	2036      	movs	r0, #54	; 0x36
 8004660:	f002 fec8 	bl	80073f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004664:	2036      	movs	r0, #54	; 0x36
 8004666:	f002 fedf 	bl	8007428 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800466a:	4a29      	ldr	r2, [pc, #164]	; (8004710 <HAL_InitTick+0xc4>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004670:	4b28      	ldr	r3, [pc, #160]	; (8004714 <HAL_InitTick+0xc8>)
 8004672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004676:	4a27      	ldr	r2, [pc, #156]	; (8004714 <HAL_InitTick+0xc8>)
 8004678:	f043 0310 	orr.w	r3, r3, #16
 800467c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004680:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_InitTick+0xc8>)
 8004682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800468e:	f107 0210 	add.w	r2, r7, #16
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f00a fa83 	bl	800eba4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_InitTick+0x6a>
 80046a8:	e001      	b.n	80046ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e02b      	b.n	8004706 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80046ae:	f00a fa4d 	bl	800eb4c <HAL_RCC_GetPCLK1Freq>
 80046b2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80046b4:	e004      	b.n	80046c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80046b6:	f00a fa49 	bl	800eb4c <HAL_RCC_GetPCLK1Freq>
 80046ba:	4603      	mov	r3, r0
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80046c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <HAL_InitTick+0xcc>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	0c9b      	lsrs	r3, r3, #18
 80046ca:	3b01      	subs	r3, #1
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <HAL_InitTick+0xd0>)
 80046d0:	4a13      	ldr	r2, [pc, #76]	; (8004720 <HAL_InitTick+0xd4>)
 80046d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80046d4:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_InitTick+0xd0>)
 80046d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80046dc:	4a0f      	ldr	r2, [pc, #60]	; (800471c <HAL_InitTick+0xd0>)
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_InitTick+0xd0>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_InitTick+0xd0>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80046ee:	480b      	ldr	r0, [pc, #44]	; (800471c <HAL_InitTick+0xd0>)
 80046f0:	f00e f859 	bl	80127a6 <HAL_TIM_Base_Init>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d104      	bne.n	8004704 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80046fa:	4808      	ldr	r0, [pc, #32]	; (800471c <HAL_InitTick+0xd0>)
 80046fc:	f00e f8aa 	bl	8012854 <HAL_TIM_Base_Start_IT>
 8004700:	4603      	mov	r3, r0
 8004702:	e000      	b.n	8004706 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
}
 8004706:	4618      	mov	r0, r3
 8004708:	3740      	adds	r7, #64	; 0x40
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	240000c4 	.word	0x240000c4
 8004714:	58024400 	.word	0x58024400
 8004718:	431bde83 	.word	0x431bde83
 800471c:	24001d94 	.word	0x24001d94
 8004720:	40001000 	.word	0x40001000

08004724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004728:	e7fe      	b.n	8004728 <NMI_Handler+0x4>

0800472a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800472a:	b480      	push	{r7}
 800472c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800472e:	e7fe      	b.n	800472e <HardFault_Handler+0x4>

08004730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004734:	e7fe      	b.n	8004734 <MemManage_Handler+0x4>

08004736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004736:	b480      	push	{r7}
 8004738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800473a:	e7fe      	b.n	800473a <BusFault_Handler+0x4>

0800473c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004740:	e7fe      	b.n	8004740 <UsageFault_Handler+0x4>

08004742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004742:	b480      	push	{r7}
 8004744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <DMA1_Stream0_IRQHandler+0x10>)
 8004756:	f004 fe1d 	bl	8009394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	24000224 	.word	0x24000224

08004764 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <DMA1_Stream1_IRQHandler+0x10>)
 800476a:	f004 fe13 	bl	8009394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2400029c 	.word	0x2400029c

08004778 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <DMA1_Stream2_IRQHandler+0x10>)
 800477e:	f004 fe09 	bl	8009394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24001f10 	.word	0x24001f10

0800478c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <DMA1_Stream3_IRQHandler+0x10>)
 8004792:	f004 fdff 	bl	8009394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	24001d1c 	.word	0x24001d1c

080047a0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <DMA1_Stream4_IRQHandler+0x10>)
 80047a6:	f004 fdf5 	bl	8009394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	24001ca4 	.word	0x24001ca4

080047b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80047b8:	4802      	ldr	r0, [pc, #8]	; (80047c4 <DMA1_Stream5_IRQHandler+0x10>)
 80047ba:	f004 fdeb 	bl	8009394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	24000328 	.word	0x24000328

080047c8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <DMA1_Stream6_IRQHandler+0x10>)
 80047ce:	f004 fde1 	bl	8009394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	240019c8 	.word	0x240019c8

080047dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <TIM1_BRK_IRQHandler+0x10>)
 80047e2:	f00e fb4e 	bl	8012e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	24001de4 	.word	0x24001de4

080047f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <TIM1_UP_IRQHandler+0x10>)
 80047f6:	f00e fb44 	bl	8012e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	24001de4 	.word	0x24001de4

08004804 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004808:	4802      	ldr	r0, [pc, #8]	; (8004814 <TIM1_TRG_COM_IRQHandler+0x10>)
 800480a:	f00e fb3a 	bl	8012e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	24001de4 	.word	0x24001de4

08004818 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800481c:	4802      	ldr	r0, [pc, #8]	; (8004828 <TIM1_CC_IRQHandler+0x10>)
 800481e:	f00e fb30 	bl	8012e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	24001de4 	.word	0x24001de4

0800482c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <TIM2_IRQHandler+0x10>)
 8004832:	f00e fb26 	bl	8012e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	24001e30 	.word	0x24001e30

08004840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <I2C1_EV_IRQHandler+0x10>)
 8004846:	f007 f82d 	bl	800b8a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	24001974 	.word	0x24001974

08004854 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004858:	4802      	ldr	r0, [pc, #8]	; (8004864 <I2C1_ER_IRQHandler+0x10>)
 800485a:	f007 f83d 	bl	800b8d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	24001974 	.word	0x24001974

08004868 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800486c:	4802      	ldr	r0, [pc, #8]	; (8004878 <SPI1_IRQHandler+0x10>)
 800486e:	f00d fc67 	bl	8012140 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	24001b94 	.word	0x24001b94

0800487c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004880:	4802      	ldr	r0, [pc, #8]	; (800488c <SPI2_IRQHandler+0x10>)
 8004882:	f00d fc5d 	bl	8012140 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	24001c1c 	.word	0x24001c1c

08004890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004894:	4802      	ldr	r0, [pc, #8]	; (80048a0 <USART1_IRQHandler+0x10>)
 8004896:	f00f fe37 	bl	8014508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	24001e7c 	.word	0x24001e7c

080048a4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80048a8:	4802      	ldr	r0, [pc, #8]	; (80048b4 <DMA1_Stream7_IRQHandler+0x10>)
 80048aa:	f004 fd73 	bl	8009394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	24001a40 	.word	0x24001a40

080048b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <TIM6_DAC_IRQHandler+0x20>)
 80048be:	791b      	ldrb	r3, [r3, #4]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d002      	beq.n	80048cc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80048c6:	4804      	ldr	r0, [pc, #16]	; (80048d8 <TIM6_DAC_IRQHandler+0x20>)
 80048c8:	f002 ffbb 	bl	8007842 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80048cc:	4803      	ldr	r0, [pc, #12]	; (80048dc <TIM6_DAC_IRQHandler+0x24>)
 80048ce:	f00e fad8 	bl	8012e82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048d2:	bf00      	nop
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	24000314 	.word	0x24000314
 80048dc:	24001d94 	.word	0x24001d94

080048e0 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80048ea:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <ITM_SendChar+0x48>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a0e      	ldr	r2, [pc, #56]	; (8004928 <ITM_SendChar+0x48>)
 80048f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f4:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <ITM_SendChar+0x4c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <ITM_SendChar+0x4c>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8004902:	bf00      	nop
 8004904:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f8      	beq.n	8004904 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8004912:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	6013      	str	r3, [r2, #0]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000edfc 	.word	0xe000edfc
 800492c:	e0000e00 	.word	0xe0000e00

08004930 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	e00a      	b.n	8004958 <_read+0x28>
		*ptr++ = __io_getchar();
 8004942:	f3af 8000 	nop.w
 8004946:	4601      	mov	r1, r0
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	60ba      	str	r2, [r7, #8]
 800494e:	b2ca      	uxtb	r2, r1
 8004950:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3301      	adds	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	dbf0      	blt.n	8004942 <_read+0x12>
	}

	return len;
 8004960:	687b      	ldr	r3, [r7, #4]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e009      	b.n	8004990 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	60ba      	str	r2, [r7, #8]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ffab 	bl	80048e0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	3301      	adds	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	dbf1      	blt.n	800497c <_write+0x12>
	}
	return len;
 8004998:	687b      	ldr	r3, [r7, #4]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <_close>:

int _close(int file) {
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <_fstat>:

int _fstat(int file, struct stat *st) {
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049ca:	605a      	str	r2, [r3, #4]
	return 0;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <_isatty>:

int _isatty(int file) {
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80049e2:	2301      	movs	r3, #1
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004a14:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004a20:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <_sbrk+0x64>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <_sbrk+0x64>)
 8004a2a:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <_sbrk+0x68>)
 8004a2c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <_sbrk+0x64>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d207      	bcs.n	8004a4c <_sbrk+0x40>
		errno = ENOMEM;
 8004a3c:	f015 fafe 	bl	801a03c <__errno>
 8004a40:	4603      	mov	r3, r0
 8004a42:	220c      	movs	r2, #12
 8004a44:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4a:	e009      	b.n	8004a60 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <_sbrk+0x64>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <_sbrk+0x64>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <_sbrk+0x64>)
 8004a5c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	24080000 	.word	0x24080000
 8004a6c:	00000400 	.word	0x00000400
 8004a70:	24001de0 	.word	0x24001de0
 8004a74:	240069c0 	.word	0x240069c0

08004a78 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004a7c:	4b37      	ldr	r3, [pc, #220]	; (8004b5c <SystemInit+0xe4>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	4a36      	ldr	r2, [pc, #216]	; (8004b5c <SystemInit+0xe4>)
 8004a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004a8c:	4b34      	ldr	r3, [pc, #208]	; (8004b60 <SystemInit+0xe8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	2b06      	cmp	r3, #6
 8004a96:	d807      	bhi.n	8004aa8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004a98:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <SystemInit+0xe8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 030f 	bic.w	r3, r3, #15
 8004aa0:	4a2f      	ldr	r2, [pc, #188]	; (8004b60 <SystemInit+0xe8>)
 8004aa2:	f043 0307 	orr.w	r3, r3, #7
 8004aa6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004aa8:	4b2e      	ldr	r3, [pc, #184]	; (8004b64 <SystemInit+0xec>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2d      	ldr	r2, [pc, #180]	; (8004b64 <SystemInit+0xec>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <SystemInit+0xec>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004aba:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <SystemInit+0xec>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4929      	ldr	r1, [pc, #164]	; (8004b64 <SystemInit+0xec>)
 8004ac0:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <SystemInit+0xf0>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004ac6:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <SystemInit+0xe8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004ad2:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <SystemInit+0xe8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 030f 	bic.w	r3, r3, #15
 8004ada:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <SystemInit+0xe8>)
 8004adc:	f043 0307 	orr.w	r3, r3, #7
 8004ae0:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004ae2:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <SystemInit+0xec>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004ae8:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <SystemInit+0xec>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004aee:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <SystemInit+0xec>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004af4:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <SystemInit+0xec>)
 8004af6:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <SystemInit+0xf4>)
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <SystemInit+0xec>)
 8004afc:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <SystemInit+0xf8>)
 8004afe:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004b00:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <SystemInit+0xec>)
 8004b02:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <SystemInit+0xfc>)
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004b06:	4b17      	ldr	r3, [pc, #92]	; (8004b64 <SystemInit+0xec>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004b0c:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <SystemInit+0xec>)
 8004b0e:	4a19      	ldr	r2, [pc, #100]	; (8004b74 <SystemInit+0xfc>)
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004b12:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <SystemInit+0xec>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <SystemInit+0xec>)
 8004b1a:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <SystemInit+0xfc>)
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <SystemInit+0xec>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004b24:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <SystemInit+0xec>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <SystemInit+0xec>)
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <SystemInit+0xec>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <SystemInit+0x100>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <SystemInit+0x104>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b42:	d202      	bcs.n	8004b4a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004b44:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <SystemInit+0x108>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <SystemInit+0x10c>)
 8004b4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004b50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004b52:	bf00      	nop
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	e000ed00 	.word	0xe000ed00
 8004b60:	52002000 	.word	0x52002000
 8004b64:	58024400 	.word	0x58024400
 8004b68:	eaf6ed7f 	.word	0xeaf6ed7f
 8004b6c:	02020200 	.word	0x02020200
 8004b70:	01ff0000 	.word	0x01ff0000
 8004b74:	01010280 	.word	0x01010280
 8004b78:	5c001000 	.word	0x5c001000
 8004b7c:	ffff0000 	.word	0xffff0000
 8004b80:	51008108 	.word	0x51008108
 8004b84:	52004000 	.word	0x52004000

08004b88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b09a      	sub	sp, #104	; 0x68
 8004b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	605a      	str	r2, [r3, #4]
 8004b98:	609a      	str	r2, [r3, #8]
 8004b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	611a      	str	r2, [r3, #16]
 8004bb8:	615a      	str	r2, [r3, #20]
 8004bba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bbc:	1d3b      	adds	r3, r7, #4
 8004bbe:	222c      	movs	r2, #44	; 0x2c
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f015 fa72 	bl	801a0ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bc8:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004bca:	4a45      	ldr	r2, [pc, #276]	; (8004ce0 <MX_TIM1_Init+0x158>)
 8004bcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004bce:	4b43      	ldr	r3, [pc, #268]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004bd0:	224a      	movs	r2, #74	; 0x4a
 8004bd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bd4:	4b41      	ldr	r3, [pc, #260]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004bda:	4b40      	ldr	r3, [pc, #256]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004bdc:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004be0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004be2:	4b3e      	ldr	r3, [pc, #248]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004be8:	4b3c      	ldr	r3, [pc, #240]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bee:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004bf4:	4839      	ldr	r0, [pc, #228]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004bf6:	f00d fdd6 	bl	80127a6 <HAL_TIM_Base_Init>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004c00:	f7fe fee2 	bl	80039c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c08:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4832      	ldr	r0, [pc, #200]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004c12:	f00e fb51 	bl	80132b8 <HAL_TIM_ConfigClockSource>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004c1c:	f7fe fed4 	bl	80039c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c20:	482e      	ldr	r0, [pc, #184]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004c22:	f00e f8cd 	bl	8012dc0 <HAL_TIM_PWM_Init>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004c2c:	f7fe fecc 	bl	80039c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c30:	2300      	movs	r3, #0
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004c40:	4619      	mov	r1, r3
 8004c42:	4826      	ldr	r0, [pc, #152]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004c44:	f00f f88e 	bl	8013d64 <HAL_TIMEx_MasterConfigSynchronization>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004c4e:	f7fe febb 	bl	80039c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c52:	2360      	movs	r3, #96	; 0x60
 8004c54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004c56:	f240 13df 	movw	r3, #479	; 0x1df
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c60:	2300      	movs	r3, #0
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c74:	2200      	movs	r2, #0
 8004c76:	4619      	mov	r1, r3
 8004c78:	4818      	ldr	r0, [pc, #96]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004c7a:	f00e fa09 	bl	8013090 <HAL_TIM_PWM_ConfigChannel>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004c84:	f7fe fea0 	bl	80039c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4807      	ldr	r0, [pc, #28]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004cbe:	f00f f8df 	bl	8013e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004cc8:	f7fe fe7e 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ccc:	4803      	ldr	r0, [pc, #12]	; (8004cdc <MX_TIM1_Init+0x154>)
 8004cce:	f000 f8dd 	bl	8004e8c <HAL_TIM_MspPostInit>

}
 8004cd2:	bf00      	nop
 8004cd4:	3768      	adds	r7, #104	; 0x68
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	24001de4 	.word	0x24001de4
 8004ce0:	40010000 	.word	0x40010000

08004ce4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08e      	sub	sp, #56	; 0x38
 8004ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
 8004cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cf8:	f107 031c 	add.w	r3, r7, #28
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d04:	463b      	mov	r3, r7
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	611a      	str	r2, [r3, #16]
 8004d12:	615a      	str	r2, [r3, #20]
 8004d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d16:	4b2d      	ldr	r3, [pc, #180]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004d1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d20:	224a      	movs	r2, #74	; 0x4a
 8004d22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d24:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004d2a:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d2c:	f640 4234 	movw	r2, #3124	; 0xc34
 8004d30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d32:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d38:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d3a:	2280      	movs	r2, #128	; 0x80
 8004d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004d3e:	4823      	ldr	r0, [pc, #140]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d40:	f00d fd31 	bl	80127a6 <HAL_TIM_Base_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004d4a:	f7fe fe3d 	bl	80039c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d58:	4619      	mov	r1, r3
 8004d5a:	481c      	ldr	r0, [pc, #112]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d5c:	f00e faac 	bl	80132b8 <HAL_TIM_ConfigClockSource>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004d66:	f7fe fe2f 	bl	80039c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004d6a:	4818      	ldr	r0, [pc, #96]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d6c:	f00e f828 	bl	8012dc0 <HAL_TIM_PWM_Init>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004d76:	f7fe fe27 	bl	80039c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d82:	f107 031c 	add.w	r3, r7, #28
 8004d86:	4619      	mov	r1, r3
 8004d88:	4810      	ldr	r0, [pc, #64]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004d8a:	f00e ffeb 	bl	8013d64 <HAL_TIMEx_MasterConfigSynchronization>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004d94:	f7fe fe18 	bl	80039c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d98:	2360      	movs	r3, #96	; 0x60
 8004d9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004da8:	463b      	mov	r3, r7
 8004daa:	220c      	movs	r2, #12
 8004dac:	4619      	mov	r1, r3
 8004dae:	4807      	ldr	r0, [pc, #28]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004db0:	f00e f96e 	bl	8013090 <HAL_TIM_PWM_ConfigChannel>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004dba:	f7fe fe05 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004dbe:	4803      	ldr	r0, [pc, #12]	; (8004dcc <MX_TIM2_Init+0xe8>)
 8004dc0:	f000 f864 	bl	8004e8c <HAL_TIM_MspPostInit>

}
 8004dc4:	bf00      	nop
 8004dc6:	3738      	adds	r7, #56	; 0x38
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	24001e30 	.word	0x24001e30

08004dd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <HAL_TIM_Base_MspInit+0xb4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d12f      	bne.n	8004e42 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004de2:	4b29      	ldr	r3, [pc, #164]	; (8004e88 <HAL_TIM_Base_MspInit+0xb8>)
 8004de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004de8:	4a27      	ldr	r2, [pc, #156]	; (8004e88 <HAL_TIM_Base_MspInit+0xb8>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004df2:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <HAL_TIM_Base_MspInit+0xb8>)
 8004df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004e00:	2200      	movs	r2, #0
 8004e02:	2105      	movs	r1, #5
 8004e04:	2018      	movs	r0, #24
 8004e06:	f002 faf5 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004e0a:	2018      	movs	r0, #24
 8004e0c:	f002 fb0c 	bl	8007428 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004e10:	2200      	movs	r2, #0
 8004e12:	2105      	movs	r1, #5
 8004e14:	2019      	movs	r0, #25
 8004e16:	f002 faed 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004e1a:	2019      	movs	r0, #25
 8004e1c:	f002 fb04 	bl	8007428 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004e20:	2200      	movs	r2, #0
 8004e22:	2105      	movs	r1, #5
 8004e24:	201a      	movs	r0, #26
 8004e26:	f002 fae5 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004e2a:	201a      	movs	r0, #26
 8004e2c:	f002 fafc 	bl	8007428 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004e30:	2200      	movs	r2, #0
 8004e32:	2105      	movs	r1, #5
 8004e34:	201b      	movs	r0, #27
 8004e36:	f002 fadd 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004e3a:	201b      	movs	r0, #27
 8004e3c:	f002 faf4 	bl	8007428 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004e40:	e01b      	b.n	8004e7a <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d116      	bne.n	8004e7a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <HAL_TIM_Base_MspInit+0xb8>)
 8004e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e52:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <HAL_TIM_Base_MspInit+0xb8>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <HAL_TIM_Base_MspInit+0xb8>)
 8004e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2105      	movs	r1, #5
 8004e6e:	201c      	movs	r0, #28
 8004e70:	f002 fac0 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e74:	201c      	movs	r0, #28
 8004e76:	f002 fad7 	bl	8007428 <HAL_NVIC_EnableIRQ>
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	58024400 	.word	0x58024400

08004e8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	60da      	str	r2, [r3, #12]
 8004ea2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a26      	ldr	r2, [pc, #152]	; (8004f44 <HAL_TIM_MspPostInit+0xb8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d120      	bne.n	8004ef0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eae:	4b26      	ldr	r3, [pc, #152]	; (8004f48 <HAL_TIM_MspPostInit+0xbc>)
 8004eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb4:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <HAL_TIM_MspPostInit+0xbc>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_TIM_MspPostInit+0xbc>)
 8004ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eda:	2300      	movs	r3, #0
 8004edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4818      	ldr	r0, [pc, #96]	; (8004f4c <HAL_TIM_MspPostInit+0xc0>)
 8004eea:	f006 f859 	bl	800afa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004eee:	e024      	b.n	8004f3a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d11f      	bne.n	8004f3a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_TIM_MspPostInit+0xbc>)
 8004efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f00:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <HAL_TIM_MspPostInit+0xbc>)
 8004f02:	f043 0302 	orr.w	r3, r3, #2
 8004f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <HAL_TIM_MspPostInit+0xbc>)
 8004f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f26:	2300      	movs	r3, #0
 8004f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	4619      	mov	r1, r3
 8004f34:	4806      	ldr	r0, [pc, #24]	; (8004f50 <HAL_TIM_MspPostInit+0xc4>)
 8004f36:	f006 f833 	bl	800afa0 <HAL_GPIO_Init>
}
 8004f3a:	bf00      	nop
 8004f3c:	3728      	adds	r7, #40	; 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40010000 	.word	0x40010000
 8004f48:	58024400 	.word	0x58024400
 8004f4c:	58020000 	.word	0x58020000
 8004f50:	58020400 	.word	0x58020400

08004f54 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004f60:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <get_uptime+0x94>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004f66:	4b21      	ldr	r3, [pc, #132]	; (8004fec <get_uptime+0x98>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004f6c:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <get_uptime+0x94>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d005      	beq.n	8004f82 <get_uptime+0x2e>
		ms = uptime_millis;
 8004f76:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <get_uptime+0x94>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <get_uptime+0x98>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f88:	fb03 f202 	mul.w	r2, r3, r2
 8004f8c:	4b17      	ldr	r3, [pc, #92]	; (8004fec <get_uptime+0x98>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	3301      	adds	r3, #1
 8004f92:	4917      	ldr	r1, [pc, #92]	; (8004ff0 <get_uptime+0x9c>)
 8004f94:	fba1 1303 	umull	r1, r3, r1, r3
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	68f9      	ldr	r1, [r7, #12]
 8004f9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <get_uptime+0x5a>
		uptime = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	0e1b      	lsrs	r3, r3, #24
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	0c1a      	lsrs	r2, r3, #16
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	0a1a      	lsrs	r2, r3, #8
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3302      	adds	r3, #2
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3303      	adds	r3, #3
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	24001b18 	.word	0x24001b18
 8004fec:	e000e010 	.word	0xe000e010
 8004ff0:	10624dd3 	.word	0x10624dd3

08004ff4 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	2200      	movs	r2, #0
 8005002:	4619      	mov	r1, r3
 8005004:	4821      	ldr	r0, [pc, #132]	; (800508c <get_timestamp+0x98>)
 8005006:	f00c fc2d 	bl	8011864 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800500a:	f107 030c 	add.w	r3, r7, #12
 800500e:	2200      	movs	r2, #0
 8005010:	4619      	mov	r1, r3
 8005012:	481e      	ldr	r0, [pc, #120]	; (800508c <get_timestamp+0x98>)
 8005014:	f00c fd0a 	bl	8011a2c <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2264      	movs	r2, #100	; 0x64
 800501c:	fb03 f202 	mul.w	r2, r3, r2
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <get_timestamp+0x9c>)
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3301      	adds	r3, #1
 8005030:	7b7a      	ldrb	r2, [r7, #13]
 8005032:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3302      	adds	r3, #2
 8005038:	7bba      	ldrb	r2, [r7, #14]
 800503a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3303      	adds	r3, #3
 8005040:	7c3a      	ldrb	r2, [r7, #16]
 8005042:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	7c7a      	ldrb	r2, [r7, #17]
 800504a:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3305      	adds	r3, #5
 8005050:	7cba      	ldrb	r2, [r7, #18]
 8005052:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	0e1a      	lsrs	r2, r3, #24
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3306      	adds	r3, #6
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	0c1a      	lsrs	r2, r3, #16
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3307      	adds	r3, #7
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	0a1a      	lsrs	r2, r3, #8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3308      	adds	r3, #8
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3309      	adds	r3, #9
 800507c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
}
 8005082:	bf00      	nop
 8005084:	3728      	adds	r7, #40	; 0x28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	24001b2c 	.word	0x24001b2c
 8005090:	000f4240 	.word	0x000f4240

08005094 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005098:	4b30      	ldr	r3, [pc, #192]	; (800515c <MX_USART1_UART_Init+0xc8>)
 800509a:	4a31      	ldr	r2, [pc, #196]	; (8005160 <MX_USART1_UART_Init+0xcc>)
 800509c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800509e:	4b2f      	ldr	r3, [pc, #188]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050a0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80050a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80050a6:	4b2d      	ldr	r3, [pc, #180]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80050b2:	4b2a      	ldr	r3, [pc, #168]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80050b8:	4b28      	ldr	r3, [pc, #160]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050ba:	220c      	movs	r2, #12
 80050bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050be:	4b27      	ldr	r3, [pc, #156]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050ca:	4b24      	ldr	r3, [pc, #144]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80050d0:	4b22      	ldr	r3, [pc, #136]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050d6:	4b21      	ldr	r3, [pc, #132]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050d8:	2200      	movs	r2, #0
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80050dc:	481f      	ldr	r0, [pc, #124]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050de:	f00e ff6b 	bl	8013fb8 <HAL_UART_Init>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80050e8:	f7fe fc6e 	bl	80039c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050ec:	2100      	movs	r1, #0
 80050ee:	481b      	ldr	r0, [pc, #108]	; (800515c <MX_USART1_UART_Init+0xc8>)
 80050f0:	f011 fcb1 	bl	8016a56 <HAL_UARTEx_SetTxFifoThreshold>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80050fa:	f7fe fc65 	bl	80039c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050fe:	2100      	movs	r1, #0
 8005100:	4816      	ldr	r0, [pc, #88]	; (800515c <MX_USART1_UART_Init+0xc8>)
 8005102:	f011 fce6 	bl	8016ad2 <HAL_UARTEx_SetRxFifoThreshold>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800510c:	f7fe fc5c 	bl	80039c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005110:	4812      	ldr	r0, [pc, #72]	; (800515c <MX_USART1_UART_Init+0xc8>)
 8005112:	f011 fc67 	bl	80169e4 <HAL_UARTEx_DisableFifoMode>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800511c:	f7fe fc54 	bl	80039c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005120:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005124:	480d      	ldr	r0, [pc, #52]	; (800515c <MX_USART1_UART_Init+0xc8>)
 8005126:	f011 fcd4 	bl	8016ad2 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800512a:	480c      	ldr	r0, [pc, #48]	; (800515c <MX_USART1_UART_Init+0xc8>)
 800512c:	f011 fc1f 	bl	801696e <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005130:	480a      	ldr	r0, [pc, #40]	; (800515c <MX_USART1_UART_Init+0xc8>)
 8005132:	f011 fbe9 	bl	8016908 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <MX_USART1_UART_Init+0xc8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	4b07      	ldr	r3, [pc, #28]	; (800515c <MX_USART1_UART_Init+0xc8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005144:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <MX_USART1_UART_Init+0xc8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	4b03      	ldr	r3, [pc, #12]	; (800515c <MX_USART1_UART_Init+0xc8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005154:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	24001e7c 	.word	0x24001e7c
 8005160:	40011000 	.word	0x40011000

08005164 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b0ba      	sub	sp, #232	; 0xe8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800516c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	22c0      	movs	r2, #192	; 0xc0
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f014 ff91 	bl	801a0ac <memset>
  if(uartHandle->Instance==USART1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a41      	ldr	r2, [pc, #260]	; (8005294 <HAL_UART_MspInit+0x130>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d17b      	bne.n	800528c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005194:	f04f 0201 	mov.w	r2, #1
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80051a0:	2318      	movs	r3, #24
 80051a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051a6:	f107 0310 	add.w	r3, r7, #16
 80051aa:	4618      	mov	r0, r3
 80051ac:	f009 fd3c 	bl	800ec28 <HAL_RCCEx_PeriphCLKConfig>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80051b6:	f7fe fc07 	bl	80039c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80051ba:	4b37      	ldr	r3, [pc, #220]	; (8005298 <HAL_UART_MspInit+0x134>)
 80051bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051c0:	4a35      	ldr	r2, [pc, #212]	; (8005298 <HAL_UART_MspInit+0x134>)
 80051c2:	f043 0310 	orr.w	r3, r3, #16
 80051c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051ca:	4b33      	ldr	r3, [pc, #204]	; (8005298 <HAL_UART_MspInit+0x134>)
 80051cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051d8:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <HAL_UART_MspInit+0x134>)
 80051da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051de:	4a2e      	ldr	r2, [pc, #184]	; (8005298 <HAL_UART_MspInit+0x134>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051e8:	4b2b      	ldr	r3, [pc, #172]	; (8005298 <HAL_UART_MspInit+0x134>)
 80051ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80051f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80051fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800520a:	2300      	movs	r3, #0
 800520c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005210:	2307      	movs	r3, #7
 8005212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005216:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800521a:	4619      	mov	r1, r3
 800521c:	481f      	ldr	r0, [pc, #124]	; (800529c <HAL_UART_MspInit+0x138>)
 800521e:	f005 febf 	bl	800afa0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005222:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <HAL_UART_MspInit+0x140>)
 8005226:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 800522a:	222a      	movs	r2, #42	; 0x2a
 800522c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800522e:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005234:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005236:	2200      	movs	r2, #0
 8005238:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 800523c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005240:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005244:	2200      	movs	r2, #0
 8005246:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005248:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800524e:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005250:	2200      	movs	r2, #0
 8005252:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005254:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005256:	2200      	movs	r2, #0
 8005258:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 800525c:	2200      	movs	r2, #0
 800525e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005260:	480f      	ldr	r0, [pc, #60]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005262:	f002 fd6d 	bl	8007d40 <HAL_DMA_Init>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800526c:	f7fe fbac 	bl	80039c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005274:	67da      	str	r2, [r3, #124]	; 0x7c
 8005276:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <HAL_UART_MspInit+0x13c>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800527c:	2200      	movs	r2, #0
 800527e:	2105      	movs	r1, #5
 8005280:	2025      	movs	r0, #37	; 0x25
 8005282:	f002 f8b7 	bl	80073f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005286:	2025      	movs	r0, #37	; 0x25
 8005288:	f002 f8ce 	bl	8007428 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800528c:	bf00      	nop
 800528e:	37e8      	adds	r7, #232	; 0xe8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40011000 	.word	0x40011000
 8005298:	58024400 	.word	0x58024400
 800529c:	58020000 	.word	0x58020000
 80052a0:	24001f10 	.word	0x24001f10
 80052a4:	40020040 	.word	0x40020040

080052a8 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80052b2:	4bc2      	ldr	r3, [pc, #776]	; (80055bc <voltage_monitor_init+0x314>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80052b8:	4bc0      	ldr	r3, [pc, #768]	; (80055bc <voltage_monitor_init+0x314>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80052be:	4bbf      	ldr	r3, [pc, #764]	; (80055bc <voltage_monitor_init+0x314>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80052c4:	4bbd      	ldr	r3, [pc, #756]	; (80055bc <voltage_monitor_init+0x314>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80052ca:	4bbc      	ldr	r3, [pc, #752]	; (80055bc <voltage_monitor_init+0x314>)
 80052cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80052d0:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80052d2:	4bba      	ldr	r3, [pc, #744]	; (80055bc <voltage_monitor_init+0x314>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80052d8:	4bb8      	ldr	r3, [pc, #736]	; (80055bc <voltage_monitor_init+0x314>)
 80052da:	2201      	movs	r2, #1
 80052dc:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80052de:	4bb7      	ldr	r3, [pc, #732]	; (80055bc <voltage_monitor_init+0x314>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 80052e4:	4bb5      	ldr	r3, [pc, #724]	; (80055bc <voltage_monitor_init+0x314>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 80052ea:	4bb4      	ldr	r3, [pc, #720]	; (80055bc <voltage_monitor_init+0x314>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 80052f0:	4bb2      	ldr	r3, [pc, #712]	; (80055bc <voltage_monitor_init+0x314>)
 80052f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80052f6:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 80052f8:	4bb0      	ldr	r3, [pc, #704]	; (80055bc <voltage_monitor_init+0x314>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 80052fe:	4baf      	ldr	r3, [pc, #700]	; (80055bc <voltage_monitor_init+0x314>)
 8005300:	2202      	movs	r2, #2
 8005302:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005304:	4bad      	ldr	r3, [pc, #692]	; (80055bc <voltage_monitor_init+0x314>)
 8005306:	2200      	movs	r2, #0
 8005308:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800530a:	4bac      	ldr	r3, [pc, #688]	; (80055bc <voltage_monitor_init+0x314>)
 800530c:	2201      	movs	r2, #1
 800530e:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8005310:	4baa      	ldr	r3, [pc, #680]	; (80055bc <voltage_monitor_init+0x314>)
 8005312:	2200      	movs	r2, #0
 8005314:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005316:	4ba9      	ldr	r3, [pc, #676]	; (80055bc <voltage_monitor_init+0x314>)
 8005318:	f242 7210 	movw	r2, #10000	; 0x2710
 800531c:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 800531e:	4ba7      	ldr	r3, [pc, #668]	; (80055bc <voltage_monitor_init+0x314>)
 8005320:	2200      	movs	r2, #0
 8005322:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005324:	4ba5      	ldr	r3, [pc, #660]	; (80055bc <voltage_monitor_init+0x314>)
 8005326:	2203      	movs	r2, #3
 8005328:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800532a:	4ba4      	ldr	r3, [pc, #656]	; (80055bc <voltage_monitor_init+0x314>)
 800532c:	2200      	movs	r2, #0
 800532e:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8005330:	4ba2      	ldr	r3, [pc, #648]	; (80055bc <voltage_monitor_init+0x314>)
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005338:	4ba0      	ldr	r3, [pc, #640]	; (80055bc <voltage_monitor_init+0x314>)
 800533a:	2200      	movs	r2, #0
 800533c:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800533e:	4b9f      	ldr	r3, [pc, #636]	; (80055bc <voltage_monitor_init+0x314>)
 8005340:	f242 7210 	movw	r2, #10000	; 0x2710
 8005344:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005346:	4b9d      	ldr	r3, [pc, #628]	; (80055bc <voltage_monitor_init+0x314>)
 8005348:	2200      	movs	r2, #0
 800534a:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 800534c:	4b9b      	ldr	r3, [pc, #620]	; (80055bc <voltage_monitor_init+0x314>)
 800534e:	2204      	movs	r2, #4
 8005350:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005354:	4b99      	ldr	r3, [pc, #612]	; (80055bc <voltage_monitor_init+0x314>)
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800535c:	4b97      	ldr	r3, [pc, #604]	; (80055bc <voltage_monitor_init+0x314>)
 800535e:	2201      	movs	r2, #1
 8005360:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005364:	4b95      	ldr	r3, [pc, #596]	; (80055bc <voltage_monitor_init+0x314>)
 8005366:	2200      	movs	r2, #0
 8005368:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800536a:	4b94      	ldr	r3, [pc, #592]	; (80055bc <voltage_monitor_init+0x314>)
 800536c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005370:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005372:	4b92      	ldr	r3, [pc, #584]	; (80055bc <voltage_monitor_init+0x314>)
 8005374:	2200      	movs	r2, #0
 8005376:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005378:	4b90      	ldr	r3, [pc, #576]	; (80055bc <voltage_monitor_init+0x314>)
 800537a:	2205      	movs	r2, #5
 800537c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8005380:	4b8e      	ldr	r3, [pc, #568]	; (80055bc <voltage_monitor_init+0x314>)
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8005388:	4b8c      	ldr	r3, [pc, #560]	; (80055bc <voltage_monitor_init+0x314>)
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8005390:	4b8a      	ldr	r3, [pc, #552]	; (80055bc <voltage_monitor_init+0x314>)
 8005392:	2200      	movs	r2, #0
 8005394:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005396:	4b89      	ldr	r3, [pc, #548]	; (80055bc <voltage_monitor_init+0x314>)
 8005398:	f242 7210 	movw	r2, #10000	; 0x2710
 800539c:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 800539e:	4b87      	ldr	r3, [pc, #540]	; (80055bc <voltage_monitor_init+0x314>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80053a4:	4b85      	ldr	r3, [pc, #532]	; (80055bc <voltage_monitor_init+0x314>)
 80053a6:	2206      	movs	r2, #6
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80053ac:	4b83      	ldr	r3, [pc, #524]	; (80055bc <voltage_monitor_init+0x314>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80053b4:	4b81      	ldr	r3, [pc, #516]	; (80055bc <voltage_monitor_init+0x314>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80053bc:	4b7f      	ldr	r3, [pc, #508]	; (80055bc <voltage_monitor_init+0x314>)
 80053be:	2200      	movs	r2, #0
 80053c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053c4:	4b7d      	ldr	r3, [pc, #500]	; (80055bc <voltage_monitor_init+0x314>)
 80053c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80053ca:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80053ce:	4b7b      	ldr	r3, [pc, #492]	; (80055bc <voltage_monitor_init+0x314>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80053d6:	4b79      	ldr	r3, [pc, #484]	; (80055bc <voltage_monitor_init+0x314>)
 80053d8:	2207      	movs	r2, #7
 80053da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80053de:	4b77      	ldr	r3, [pc, #476]	; (80055bc <voltage_monitor_init+0x314>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 80053e6:	4b75      	ldr	r3, [pc, #468]	; (80055bc <voltage_monitor_init+0x314>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 80053ee:	4b73      	ldr	r3, [pc, #460]	; (80055bc <voltage_monitor_init+0x314>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053f6:	4b71      	ldr	r3, [pc, #452]	; (80055bc <voltage_monitor_init+0x314>)
 80053f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80053fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8005400:	4b6e      	ldr	r3, [pc, #440]	; (80055bc <voltage_monitor_init+0x314>)
 8005402:	2200      	movs	r2, #0
 8005404:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8005408:	4b6c      	ldr	r3, [pc, #432]	; (80055bc <voltage_monitor_init+0x314>)
 800540a:	2208      	movs	r2, #8
 800540c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8005410:	4b6a      	ldr	r3, [pc, #424]	; (80055bc <voltage_monitor_init+0x314>)
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8005418:	4b68      	ldr	r3, [pc, #416]	; (80055bc <voltage_monitor_init+0x314>)
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8005420:	4b66      	ldr	r3, [pc, #408]	; (80055bc <voltage_monitor_init+0x314>)
 8005422:	2200      	movs	r2, #0
 8005424:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8005428:	4b64      	ldr	r3, [pc, #400]	; (80055bc <voltage_monitor_init+0x314>)
 800542a:	f640 42b9 	movw	r2, #3257	; 0xcb9
 800542e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8005432:	4b62      	ldr	r3, [pc, #392]	; (80055bc <voltage_monitor_init+0x314>)
 8005434:	f640 3283 	movw	r2, #2947	; 0xb83
 8005438:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 800543c:	4b5f      	ldr	r3, [pc, #380]	; (80055bc <voltage_monitor_init+0x314>)
 800543e:	2209      	movs	r2, #9
 8005440:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005444:	4b5d      	ldr	r3, [pc, #372]	; (80055bc <voltage_monitor_init+0x314>)
 8005446:	2200      	movs	r2, #0
 8005448:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 800544c:	4b5b      	ldr	r3, [pc, #364]	; (80055bc <voltage_monitor_init+0x314>)
 800544e:	2200      	movs	r2, #0
 8005450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005454:	4b59      	ldr	r3, [pc, #356]	; (80055bc <voltage_monitor_init+0x314>)
 8005456:	2200      	movs	r2, #0
 8005458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 800545c:	4b57      	ldr	r3, [pc, #348]	; (80055bc <voltage_monitor_init+0x314>)
 800545e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005466:	4b55      	ldr	r3, [pc, #340]	; (80055bc <voltage_monitor_init+0x314>)
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800546e:	4b53      	ldr	r3, [pc, #332]	; (80055bc <voltage_monitor_init+0x314>)
 8005470:	220a      	movs	r2, #10
 8005472:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005476:	4b51      	ldr	r3, [pc, #324]	; (80055bc <voltage_monitor_init+0x314>)
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800547e:	4b4f      	ldr	r3, [pc, #316]	; (80055bc <voltage_monitor_init+0x314>)
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8005486:	4b4d      	ldr	r3, [pc, #308]	; (80055bc <voltage_monitor_init+0x314>)
 8005488:	2200      	movs	r2, #0
 800548a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 800548e:	4b4b      	ldr	r3, [pc, #300]	; (80055bc <voltage_monitor_init+0x314>)
 8005490:	f640 7245 	movw	r2, #3909	; 0xf45
 8005494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8005498:	4b48      	ldr	r3, [pc, #288]	; (80055bc <voltage_monitor_init+0x314>)
 800549a:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800549e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80054a2:	4b46      	ldr	r3, [pc, #280]	; (80055bc <voltage_monitor_init+0x314>)
 80054a4:	220b      	movs	r2, #11
 80054a6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80054aa:	4b44      	ldr	r3, [pc, #272]	; (80055bc <voltage_monitor_init+0x314>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80054b2:	4b42      	ldr	r3, [pc, #264]	; (80055bc <voltage_monitor_init+0x314>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80054ba:	4b40      	ldr	r3, [pc, #256]	; (80055bc <voltage_monitor_init+0x314>)
 80054bc:	2200      	movs	r2, #0
 80054be:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80054c2:	4b3e      	ldr	r3, [pc, #248]	; (80055bc <voltage_monitor_init+0x314>)
 80054c4:	f640 72fb 	movw	r2, #4091	; 0xffb
 80054c8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80054cc:	4b3b      	ldr	r3, [pc, #236]	; (80055bc <voltage_monitor_init+0x314>)
 80054ce:	f640 6276 	movw	r2, #3702	; 0xe76
 80054d2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80054d6:	4b39      	ldr	r3, [pc, #228]	; (80055bc <voltage_monitor_init+0x314>)
 80054d8:	220c      	movs	r2, #12
 80054da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80054de:	4b37      	ldr	r3, [pc, #220]	; (80055bc <voltage_monitor_init+0x314>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80054e6:	4b35      	ldr	r3, [pc, #212]	; (80055bc <voltage_monitor_init+0x314>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 80054ee:	4b33      	ldr	r3, [pc, #204]	; (80055bc <voltage_monitor_init+0x314>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 80054f6:	4b31      	ldr	r3, [pc, #196]	; (80055bc <voltage_monitor_init+0x314>)
 80054f8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80054fc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8005500:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <voltage_monitor_init+0x314>)
 8005502:	2200      	movs	r2, #0
 8005504:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005508:	4b2c      	ldr	r3, [pc, #176]	; (80055bc <voltage_monitor_init+0x314>)
 800550a:	220d      	movs	r2, #13
 800550c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8005510:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <voltage_monitor_init+0x314>)
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005518:	4b28      	ldr	r3, [pc, #160]	; (80055bc <voltage_monitor_init+0x314>)
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8005520:	4b26      	ldr	r3, [pc, #152]	; (80055bc <voltage_monitor_init+0x314>)
 8005522:	2200      	movs	r2, #0
 8005524:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8005528:	4b24      	ldr	r3, [pc, #144]	; (80055bc <voltage_monitor_init+0x314>)
 800552a:	f640 7238 	movw	r2, #3896	; 0xf38
 800552e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8005532:	4b22      	ldr	r3, [pc, #136]	; (80055bc <voltage_monitor_init+0x314>)
 8005534:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005538:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 800553c:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <voltage_monitor_init+0x314>)
 800553e:	220e      	movs	r2, #14
 8005540:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <voltage_monitor_init+0x314>)
 8005546:	2200      	movs	r2, #0
 8005548:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <voltage_monitor_init+0x314>)
 800554e:	2200      	movs	r2, #0
 8005550:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <voltage_monitor_init+0x314>)
 8005556:	2200      	movs	r2, #0
 8005558:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <voltage_monitor_init+0x314>)
 800555e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005562:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005566:	4b15      	ldr	r3, [pc, #84]	; (80055bc <voltage_monitor_init+0x314>)
 8005568:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800556c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005570:	4b12      	ldr	r3, [pc, #72]	; (80055bc <voltage_monitor_init+0x314>)
 8005572:	220f      	movs	r2, #15
 8005574:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <voltage_monitor_init+0x314>)
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005580:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <voltage_monitor_init+0x314>)
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <voltage_monitor_init+0x314>)
 800558a:	2200      	movs	r2, #0
 800558c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <voltage_monitor_init+0x314>)
 8005592:	f241 0264 	movw	r2, #4196	; 0x1064
 8005596:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 800559a:	4b08      	ldr	r3, [pc, #32]	; (80055bc <voltage_monitor_init+0x314>)
 800559c:	2200      	movs	r2, #0
 800559e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <voltage_monitor_init+0x314>)
 80055a4:	2210      	movs	r2, #16
 80055a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80055aa:	4b04      	ldr	r3, [pc, #16]	; (80055bc <voltage_monitor_init+0x314>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80055b2:	4b02      	ldr	r3, [pc, #8]	; (80055bc <voltage_monitor_init+0x314>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80055ba:	e001      	b.n	80055c0 <voltage_monitor_init+0x318>
 80055bc:	24001f88 	.word	0x24001f88
	rail_monitor[RAIL_n800v].data = 0;
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <voltage_monitor_init+0x378>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <voltage_monitor_init+0x378>)
 80055ca:	f640 5208 	movw	r2, #3336	; 0xd08
 80055ce:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80055d2:	4b13      	ldr	r3, [pc, #76]	; (8005620 <voltage_monitor_init+0x378>)
 80055d4:	f640 32ca 	movw	r2, #3018	; 0xbca
 80055d8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80055dc:	4b10      	ldr	r3, [pc, #64]	; (8005620 <voltage_monitor_init+0x378>)
 80055de:	2211      	movs	r2, #17
 80055e0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80055e4:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <voltage_monitor_init+0x378>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <voltage_monitor_init+0x378>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <voltage_monitor_init+0x378>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80055fc:	4b08      	ldr	r3, [pc, #32]	; (8005620 <voltage_monitor_init+0x378>)
 80055fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005602:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <voltage_monitor_init+0x378>)
 8005608:	2200      	movs	r2, #0
 800560a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 800560e:	2301      	movs	r3, #1
 8005610:	71fb      	strb	r3, [r7, #7]

	return status;
 8005612:	79fb      	ldrb	r3, [r7, #7]
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	24001f88 	.word	0x24001f88

08005624 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	460a      	mov	r2, r1
 800562e:	71fb      	strb	r3, [r7, #7]
 8005630:	4613      	mov	r3, r2
 8005632:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005638:	79fa      	ldrb	r2, [r7, #7]
 800563a:	4909      	ldr	r1, [pc, #36]	; (8005660 <set_rail_monitor_enable+0x3c>)
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	440b      	add	r3, r1
 8005646:	3302      	adds	r3, #2
 8005648:	79ba      	ldrb	r2, [r7, #6]
 800564a:	701a      	strb	r2, [r3, #0]
	status = 1;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]

	return status;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	24001f88 	.word	0x24001f88

08005664 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005670:	463b      	mov	r3, r7
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe fcf6 	bl	8004064 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005678:	f107 0310 	add.w	r3, r7, #16
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe fd21 	bl	80040c4 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fd6e 	bl	8004168 <sample_hk_adc3>
 800568c:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 800568e:	4b25      	ldr	r3, [pc, #148]	; (8005724 <set_rail_monitor+0xc0>)
 8005690:	809a      	strh	r2, [r3, #4]
 8005692:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8005694:	4b23      	ldr	r3, [pc, #140]	; (8005724 <set_rail_monitor+0xc0>)
 8005696:	81da      	strh	r2, [r3, #14]
 8005698:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 800569a:	4b22      	ldr	r3, [pc, #136]	; (8005724 <set_rail_monitor+0xc0>)
 800569c:	831a      	strh	r2, [r3, #24]
 800569e:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 80056a0:	4b20      	ldr	r3, [pc, #128]	; (8005724 <set_rail_monitor+0xc0>)
 80056a2:	845a      	strh	r2, [r3, #34]	; 0x22
 80056a4:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 80056a6:	4b1f      	ldr	r3, [pc, #124]	; (8005724 <set_rail_monitor+0xc0>)
 80056a8:	859a      	strh	r2, [r3, #44]	; 0x2c
 80056aa:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <set_rail_monitor+0xc0>)
 80056ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80056b0:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <set_rail_monitor+0xc0>)
 80056b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80056b8:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <set_rail_monitor+0xc0>)
 80056bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80056c0:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 80056c2:	4b18      	ldr	r3, [pc, #96]	; (8005724 <set_rail_monitor+0xc0>)
 80056c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80056c8:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 80056ca:	4b16      	ldr	r3, [pc, #88]	; (8005724 <set_rail_monitor+0xc0>)
 80056cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80056d0:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <set_rail_monitor+0xc0>)
 80056d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80056d8:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <set_rail_monitor+0xc0>)
 80056dc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80056e0:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80056e2:	4b10      	ldr	r3, [pc, #64]	; (8005724 <set_rail_monitor+0xc0>)
 80056e4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80056e8:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <set_rail_monitor+0xc0>)
 80056ec:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80056f0:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <set_rail_monitor+0xc0>)
 80056f4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80056f8:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <set_rail_monitor+0xc0>)
 80056fc:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005700:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005702:	4b08      	ldr	r3, [pc, #32]	; (8005724 <set_rail_monitor+0xc0>)
 8005704:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005708:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <set_rail_monitor+0xc0>)
 800570c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005710:	2301      	movs	r3, #1
 8005712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800571a:	4618      	mov	r0, r3
 800571c:	3728      	adds	r7, #40	; 0x28
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	24001f88 	.word	0x24001f88

08005728 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
	return rail_monitor;
 800572c:	4b02      	ldr	r3, [pc, #8]	; (8005738 <get_rail_monitor+0x10>)
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	24001f88 	.word	0x24001f88

0800573c <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 800574a:	89fb      	ldrh	r3, [r7, #14]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	db05      	blt.n	800575e <in_range+0x22>
 8005752:	89fb      	ldrh	r3, [r7, #14]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	dc01      	bgt.n	800575e <in_range+0x22>
		return 1;
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <in_range+0x24>
	}
	return 0;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <monitor_rails>:


void monitor_rails() {
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005772:	2300      	movs	r3, #0
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	e062      	b.n	800583e <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005778:	4935      	ldr	r1, [pc, #212]	; (8005850 <monitor_rails+0xe4>)
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	440b      	add	r3, r1
 8005786:	3302      	adds	r3, #2
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d054      	beq.n	8005838 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 800578e:	4930      	ldr	r1, [pc, #192]	; (8005850 <monitor_rails+0xe4>)
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	440b      	add	r3, r1
 800579c:	3304      	adds	r3, #4
 800579e:	8818      	ldrh	r0, [r3, #0]
 80057a0:	492b      	ldr	r1, [pc, #172]	; (8005850 <monitor_rails+0xe4>)
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	005b      	lsls	r3, r3, #1
 80057ac:	440b      	add	r3, r1
 80057ae:	3308      	adds	r3, #8
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	461c      	mov	r4, r3
 80057b4:	4926      	ldr	r1, [pc, #152]	; (8005850 <monitor_rails+0xe4>)
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	440b      	add	r3, r1
 80057c2:	3306      	adds	r3, #6
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	4621      	mov	r1, r4
 80057ca:	f7ff ffb7 	bl	800573c <in_range>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d131      	bne.n	8005838 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 80057d4:	491e      	ldr	r1, [pc, #120]	; (8005850 <monitor_rails+0xe4>)
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	440b      	add	r3, r1
 80057e2:	3301      	adds	r3, #1
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	3301      	adds	r3, #1
 80057e8:	b2d8      	uxtb	r0, r3
 80057ea:	4919      	ldr	r1, [pc, #100]	; (8005850 <monitor_rails+0xe4>)
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	440b      	add	r3, r1
 80057f8:	3301      	adds	r3, #1
 80057fa:	4602      	mov	r2, r0
 80057fc:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 80057fe:	4914      	ldr	r1, [pc, #80]	; (8005850 <monitor_rails+0xe4>)
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	440b      	add	r3, r1
 800580c:	3301      	adds	r3, #1
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d111      	bne.n	8005838 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005814:	490e      	ldr	r1, [pc, #56]	; (8005850 <monitor_rails+0xe4>)
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	440b      	add	r3, r1
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f815 	bl	8005854 <get_rail_name_error_detail>
 800582a:	4603      	mov	r3, r0
 800582c:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 800582e:	2300      	movs	r3, #0
 8005830:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8005832:	6838      	ldr	r0, [r7, #0]
 8005834:	f7fc fb7c 	bl	8001f30 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3301      	adds	r3, #1
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b11      	cmp	r3, #17
 8005842:	dd99      	ble.n	8005778 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bd90      	pop	{r4, r7, pc}
 800584e:	bf00      	nop
 8005850:	24001f88 	.word	0x24001f88

08005854 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	2b11      	cmp	r3, #17
 8005862:	d84b      	bhi.n	80058fc <get_rail_name_error_detail+0xa8>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <get_rail_name_error_detail+0x18>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	080058b5 	.word	0x080058b5
 8005870:	080058b9 	.word	0x080058b9
 8005874:	080058bd 	.word	0x080058bd
 8005878:	080058c1 	.word	0x080058c1
 800587c:	080058c5 	.word	0x080058c5
 8005880:	080058c9 	.word	0x080058c9
 8005884:	080058cd 	.word	0x080058cd
 8005888:	080058d1 	.word	0x080058d1
 800588c:	080058d5 	.word	0x080058d5
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058e1 	.word	0x080058e1
 800589c:	080058e5 	.word	0x080058e5
 80058a0:	080058e9 	.word	0x080058e9
 80058a4:	080058ed 	.word	0x080058ed
 80058a8:	080058f1 	.word	0x080058f1
 80058ac:	080058f5 	.word	0x080058f5
 80058b0:	080058f9 	.word	0x080058f9
	case RAIL_vsense:
		return ED_vsense;
 80058b4:	2306      	movs	r3, #6
 80058b6:	e022      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 80058b8:	2307      	movs	r3, #7
 80058ba:	e020      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 80058bc:	2308      	movs	r3, #8
 80058be:	e01e      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80058c0:	2309      	movs	r3, #9
 80058c2:	e01c      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80058c4:	230a      	movs	r3, #10
 80058c6:	e01a      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80058c8:	230b      	movs	r3, #11
 80058ca:	e018      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80058cc:	230c      	movs	r3, #12
 80058ce:	e016      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80058d0:	230d      	movs	r3, #13
 80058d2:	e014      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80058d4:	230e      	movs	r3, #14
 80058d6:	e012      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80058d8:	230f      	movs	r3, #15
 80058da:	e010      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80058dc:	2310      	movs	r3, #16
 80058de:	e00e      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80058e0:	2311      	movs	r3, #17
 80058e2:	e00c      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 80058e4:	2312      	movs	r3, #18
 80058e6:	e00a      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 80058e8:	2313      	movs	r3, #19
 80058ea:	e008      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 80058ec:	2314      	movs	r3, #20
 80058ee:	e006      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80058f0:	2315      	movs	r3, #21
 80058f2:	e004      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 80058f4:	2316      	movs	r3, #22
 80058f6:	e002      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 80058f8:	2317      	movs	r3, #23
 80058fa:	e000      	b.n	80058fe <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 80058fc:	231a      	movs	r3, #26
	}
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop

0800590c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800590c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005944 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005910:	f7ff f8b2 	bl	8004a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005914:	480c      	ldr	r0, [pc, #48]	; (8005948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005916:	490d      	ldr	r1, [pc, #52]	; (800594c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005918:	4a0d      	ldr	r2, [pc, #52]	; (8005950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800591a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800591c:	e002      	b.n	8005924 <LoopCopyDataInit>

0800591e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800591e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005922:	3304      	adds	r3, #4

08005924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005928:	d3f9      	bcc.n	800591e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800592a:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800592c:	4c0a      	ldr	r4, [pc, #40]	; (8005958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800592e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005930:	e001      	b.n	8005936 <LoopFillZerobss>

08005932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005934:	3204      	adds	r2, #4

08005936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005938:	d3fb      	bcc.n	8005932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800593a:	f014 fb85 	bl	801a048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800593e:	f7fd fdb5 	bl	80034ac <main>
  bx  lr
 8005942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005944:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005948:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800594c:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 8005950:	0801af78 	.word	0x0801af78
  ldr r2, =_sbss
 8005954:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005958:	240069bc 	.word	0x240069bc

0800595c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800595c:	e7fe      	b.n	800595c <ADC3_IRQHandler>
	...

08005960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005966:	2003      	movs	r0, #3
 8005968:	f001 fd39 	bl	80073de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800596c:	f008 ff44 	bl	800e7f8 <HAL_RCC_GetSysClockFreq>
 8005970:	4602      	mov	r2, r0
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <HAL_Init+0x68>)
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	4913      	ldr	r1, [pc, #76]	; (80059cc <HAL_Init+0x6c>)
 800597e:	5ccb      	ldrb	r3, [r1, r3]
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_Init+0x68>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	4a0e      	ldr	r2, [pc, #56]	; (80059cc <HAL_Init+0x6c>)
 8005994:	5cd3      	ldrb	r3, [r2, r3]
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	4a0b      	ldr	r2, [pc, #44]	; (80059d0 <HAL_Init+0x70>)
 80059a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059a4:	4a0b      	ldr	r2, [pc, #44]	; (80059d4 <HAL_Init+0x74>)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059aa:	2005      	movs	r0, #5
 80059ac:	f7fe fe4e 	bl	800464c <HAL_InitTick>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e002      	b.n	80059c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059ba:	f7fe fe29 	bl	8004610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	58024400 	.word	0x58024400
 80059cc:	0801aec4 	.word	0x0801aec4
 80059d0:	240000c0 	.word	0x240000c0
 80059d4:	240000bc 	.word	0x240000bc

080059d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_IncTick+0x20>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <HAL_IncTick+0x24>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4413      	add	r3, r2
 80059e8:	4a04      	ldr	r2, [pc, #16]	; (80059fc <HAL_IncTick+0x24>)
 80059ea:	6013      	str	r3, [r2, #0]
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	240000c8 	.word	0x240000c8
 80059fc:	2400203c 	.word	0x2400203c

08005a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  return uwTick;
 8005a04:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <HAL_GetTick+0x14>)
 8005a06:	681b      	ldr	r3, [r3, #0]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	2400203c 	.word	0x2400203c

08005a18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <HAL_GetREVID+0x14>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	0c1b      	lsrs	r3, r3, #16
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	5c001000 	.word	0x5c001000

08005a30 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005a3a:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	401a      	ands	r2, r3
 8005a44:	4904      	ldr	r1, [pc, #16]	; (8005a58 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	604b      	str	r3, [r1, #4]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	58000400 	.word	0x58000400

08005a5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	609a      	str	r2, [r3, #8]
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3360      	adds	r3, #96	; 0x60
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	431a      	orrs	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 031f 	and.w	r3, r3, #31
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	fa01 f303 	lsl.w	r3, r1, r3
 8005b24:	431a      	orrs	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	611a      	str	r2, [r3, #16]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b087      	sub	sp, #28
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3360      	adds	r3, #96	; 0x60
 8005b46:	461a      	mov	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	601a      	str	r2, [r3, #0]
  }
}
 8005b60:	bf00      	nop
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b087      	sub	sp, #28
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3330      	adds	r3, #48	; 0x30
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	0a1b      	lsrs	r3, r3, #8
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	4413      	add	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	211f      	movs	r1, #31
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	401a      	ands	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	0e9b      	lsrs	r3, r3, #26
 8005bca:	f003 011f 	and.w	r1, r3, #31
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f023 0203 	bic.w	r2, r3, #3
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3314      	adds	r3, #20
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	0e5b      	lsrs	r3, r3, #25
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	4413      	add	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	0d1b      	lsrs	r3, r3, #20
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	2107      	movs	r1, #7
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	401a      	ands	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	0d1b      	lsrs	r3, r3, #20
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	fa01 f303 	lsl.w	r3, r1, r3
 8005c54:	431a      	orrs	r2, r3
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0318 	and.w	r3, r3, #24
 8005c8a:	4908      	ldr	r1, [pc, #32]	; (8005cac <LL_ADC_SetChannelSingleDiff+0x44>)
 8005c8c:	40d9      	lsrs	r1, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	400b      	ands	r3, r1
 8005c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	000fffff 	.word	0x000fffff

08005cb0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 031f 	and.w	r3, r3, #31
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	4b04      	ldr	r3, [pc, #16]	; (8005cec <LL_ADC_DisableDeepPowerDown+0x20>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6093      	str	r3, [r2, #8]
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	5fffffc0 	.word	0x5fffffc0

08005cf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d04:	d101      	bne.n	8005d0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <LL_ADC_EnableInternalRegulator+0x24>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	6fffffc0 	.word	0x6fffffc0

08005d40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d54:	d101      	bne.n	8005d5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <LL_ADC_Enable+0x24>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	f043 0201 	orr.w	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	7fffffc0 	.word	0x7fffffc0

08005d90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <LL_ADC_Disable+0x24>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	f043 0202 	orr.w	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	7fffffc0 	.word	0x7fffffc0

08005db8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <LL_ADC_IsEnabled+0x18>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e000      	b.n	8005dd2 <LL_ADC_IsEnabled+0x1a>
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d101      	bne.n	8005df6 <LL_ADC_IsDisableOngoing+0x18>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <LL_ADC_IsDisableOngoing+0x1a>
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <LL_ADC_REG_StartConversion+0x24>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	f043 0204 	orr.w	r2, r3, #4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	7fffffc0 	.word	0x7fffffc0

08005e2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d101      	bne.n	8005e44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d101      	bne.n	8005e6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b089      	sub	sp, #36	; 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e18f      	b.n	80061b2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fa fd53 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff ff19 	bl	8005cf0 <LL_ADC_IsDeepPowerDownEnabled>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff feff 	bl	8005ccc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff ff34 	bl	8005d40 <LL_ADC_IsInternalRegulatorEnabled>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d114      	bne.n	8005f08 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff ff18 	bl	8005d18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ee8:	4b87      	ldr	r3, [pc, #540]	; (8006108 <HAL_ADC_Init+0x290>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	099b      	lsrs	r3, r3, #6
 8005eee:	4a87      	ldr	r2, [pc, #540]	; (800610c <HAL_ADC_Init+0x294>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	099b      	lsrs	r3, r3, #6
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005efa:	e002      	b.n	8005f02 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f9      	bne.n	8005efc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ff17 	bl	8005d40 <LL_ADC_IsInternalRegulatorEnabled>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10d      	bne.n	8005f34 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1c:	f043 0210 	orr.w	r2, r3, #16
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	f043 0201 	orr.w	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff ff77 	bl	8005e2c <LL_ADC_REG_IsConversionOngoing>
 8005f3e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f040 8129 	bne.w	80061a0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f040 8125 	bne.w	80061a0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005f5e:	f043 0202 	orr.w	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff ff24 	bl	8005db8 <LL_ADC_IsEnabled>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d136      	bne.n	8005fe4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a65      	ldr	r2, [pc, #404]	; (8006110 <HAL_ADC_Init+0x298>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d004      	beq.n	8005f8a <HAL_ADC_Init+0x112>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a63      	ldr	r2, [pc, #396]	; (8006114 <HAL_ADC_Init+0x29c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d10e      	bne.n	8005fa8 <HAL_ADC_Init+0x130>
 8005f8a:	4861      	ldr	r0, [pc, #388]	; (8006110 <HAL_ADC_Init+0x298>)
 8005f8c:	f7ff ff14 	bl	8005db8 <LL_ADC_IsEnabled>
 8005f90:	4604      	mov	r4, r0
 8005f92:	4860      	ldr	r0, [pc, #384]	; (8006114 <HAL_ADC_Init+0x29c>)
 8005f94:	f7ff ff10 	bl	8005db8 <LL_ADC_IsEnabled>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4323      	orrs	r3, r4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	e008      	b.n	8005fba <HAL_ADC_Init+0x142>
 8005fa8:	485b      	ldr	r0, [pc, #364]	; (8006118 <HAL_ADC_Init+0x2a0>)
 8005faa:	f7ff ff05 	bl	8005db8 <LL_ADC_IsEnabled>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d012      	beq.n	8005fe4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a53      	ldr	r2, [pc, #332]	; (8006110 <HAL_ADC_Init+0x298>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_ADC_Init+0x15a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a51      	ldr	r2, [pc, #324]	; (8006114 <HAL_ADC_Init+0x29c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d101      	bne.n	8005fd6 <HAL_ADC_Init+0x15e>
 8005fd2:	4a52      	ldr	r2, [pc, #328]	; (800611c <HAL_ADC_Init+0x2a4>)
 8005fd4:	e000      	b.n	8005fd8 <HAL_ADC_Init+0x160>
 8005fd6:	4a52      	ldr	r2, [pc, #328]	; (8006120 <HAL_ADC_Init+0x2a8>)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f7ff fd3c 	bl	8005a5c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005fe4:	f7ff fd18 	bl	8005a18 <HAL_GetREVID>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f241 0203 	movw	r2, #4099	; 0x1003
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d914      	bls.n	800601c <HAL_ADC_Init+0x1a4>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b10      	cmp	r3, #16
 8005ff8:	d110      	bne.n	800601c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	7d5b      	ldrb	r3, [r3, #21]
 8005ffe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006004:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800600a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	7f1b      	ldrb	r3, [r3, #28]
 8006010:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006012:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006014:	f043 030c 	orr.w	r3, r3, #12
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e00d      	b.n	8006038 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7d5b      	ldrb	r3, [r3, #21]
 8006020:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006026:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800602c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	7f1b      	ldrb	r3, [r3, #28]
 8006032:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006034:	4313      	orrs	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	7f1b      	ldrb	r3, [r3, #28]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d106      	bne.n	800604e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	3b01      	subs	r3, #1
 8006046:	045b      	lsls	r3, r3, #17
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4313      	orrs	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4313      	orrs	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <HAL_ADC_Init+0x2ac>)
 8006072:	4013      	ands	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	69b9      	ldr	r1, [r7, #24]
 800607a:	430b      	orrs	r3, r1
 800607c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fed2 	bl	8005e2c <LL_ADC_REG_IsConversionOngoing>
 8006088:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fedf 	bl	8005e52 <LL_ADC_INJ_IsConversionOngoing>
 8006094:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d15f      	bne.n	800615c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d15c      	bne.n	800615c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7d1b      	ldrb	r3, [r3, #20]
 80060a6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <HAL_ADC_Init+0x2b0>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	430b      	orrs	r3, r1
 80060c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d130      	bne.n	8006130 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	4b14      	ldr	r3, [pc, #80]	; (800612c <HAL_ADC_Init+0x2b4>)
 80060dc:	4013      	ands	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060e2:	3a01      	subs	r2, #1
 80060e4:	0411      	lsls	r1, r2, #16
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060ea:	4311      	orrs	r1, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80060f0:	4311      	orrs	r1, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060f6:	430a      	orrs	r2, r1
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	611a      	str	r2, [r3, #16]
 8006104:	e01c      	b.n	8006140 <HAL_ADC_Init+0x2c8>
 8006106:	bf00      	nop
 8006108:	240000bc 	.word	0x240000bc
 800610c:	053e2d63 	.word	0x053e2d63
 8006110:	40022000 	.word	0x40022000
 8006114:	40022100 	.word	0x40022100
 8006118:	58026000 	.word	0x58026000
 800611c:	40022300 	.word	0x40022300
 8006120:	58026300 	.word	0x58026300
 8006124:	fff0c003 	.word	0xfff0c003
 8006128:	ffffbffc 	.word	0xffffbffc
 800612c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fdec 	bl	8006d34 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10c      	bne.n	800617e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	f023 010f 	bic.w	r1, r3, #15
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	1e5a      	subs	r2, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
 800617c:	e007      	b.n	800618e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 020f 	bic.w	r2, r2, #15
 800618c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	f043 0201 	orr.w	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	655a      	str	r2, [r3, #84]	; 0x54
 800619e:	e007      	b.n	80061b0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	f043 0210 	orr.w	r2, r3, #16
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80061b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3724      	adds	r7, #36	; 0x24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd90      	pop	{r4, r7, pc}
 80061ba:	bf00      	nop

080061bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a55      	ldr	r2, [pc, #340]	; (8006324 <HAL_ADC_Start_DMA+0x168>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_ADC_Start_DMA+0x20>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a54      	ldr	r2, [pc, #336]	; (8006328 <HAL_ADC_Start_DMA+0x16c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d101      	bne.n	80061e0 <HAL_ADC_Start_DMA+0x24>
 80061dc:	4b53      	ldr	r3, [pc, #332]	; (800632c <HAL_ADC_Start_DMA+0x170>)
 80061de:	e000      	b.n	80061e2 <HAL_ADC_Start_DMA+0x26>
 80061e0:	4b53      	ldr	r3, [pc, #332]	; (8006330 <HAL_ADC_Start_DMA+0x174>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fd64 	bl	8005cb0 <LL_ADC_GetMultimode>
 80061e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fe1c 	bl	8005e2c <LL_ADC_REG_IsConversionOngoing>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f040 808c 	bne.w	8006314 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_ADC_Start_DMA+0x4e>
 8006206:	2302      	movs	r3, #2
 8006208:	e087      	b.n	800631a <HAL_ADC_Start_DMA+0x15e>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b05      	cmp	r3, #5
 800621c:	d002      	beq.n	8006224 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b09      	cmp	r3, #9
 8006222:	d170      	bne.n	8006306 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fc07 	bl	8006a38 <ADC_Enable>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d163      	bne.n	80062fc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006238:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <HAL_ADC_Start_DMA+0x178>)
 800623a:	4013      	ands	r3, r2
 800623c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a37      	ldr	r2, [pc, #220]	; (8006328 <HAL_ADC_Start_DMA+0x16c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d002      	beq.n	8006254 <HAL_ADC_Start_DMA+0x98>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	e000      	b.n	8006256 <HAL_ADC_Start_DMA+0x9a>
 8006254:	4b33      	ldr	r3, [pc, #204]	; (8006324 <HAL_ADC_Start_DMA+0x168>)
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	4293      	cmp	r3, r2
 800625c:	d002      	beq.n	8006264 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006268:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d006      	beq.n	800628a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006280:	f023 0206 	bic.w	r2, r3, #6
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	659a      	str	r2, [r3, #88]	; 0x58
 8006288:	e002      	b.n	8006290 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006294:	4a28      	ldr	r2, [pc, #160]	; (8006338 <HAL_ADC_Start_DMA+0x17c>)
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629c:	4a27      	ldr	r2, [pc, #156]	; (800633c <HAL_ADC_Start_DMA+0x180>)
 800629e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a4:	4a26      	ldr	r2, [pc, #152]	; (8006340 <HAL_ADC_Start_DMA+0x184>)
 80062a6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	221c      	movs	r2, #28
 80062ae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0210 	orr.w	r2, r2, #16
 80062c6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f7ff fc89 	bl	8005bea <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3340      	adds	r3, #64	; 0x40
 80062e2:	4619      	mov	r1, r3
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f002 f886 	bl	80083f8 <HAL_DMA_Start_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fd85 	bl	8005e04 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80062fa:	e00d      	b.n	8006318 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006304:	e008      	b.n	8006318 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006312:	e001      	b.n	8006318 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006314:	2302      	movs	r3, #2
 8006316:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	40022000 	.word	0x40022000
 8006328:	40022100 	.word	0x40022100
 800632c:	40022300 	.word	0x40022300
 8006330:	58026300 	.word	0x58026300
 8006334:	fffff0fe 	.word	0xfffff0fe
 8006338:	08006c0b 	.word	0x08006c0b
 800633c:	08006ce3 	.word	0x08006ce3
 8006340:	08006cff 	.word	0x08006cff

08006344 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b0a1      	sub	sp, #132	; 0x84
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	4a65      	ldr	r2, [pc, #404]	; (8006530 <HAL_ADC_ConfigChannel+0x1b0>)
 800639a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_ADC_ConfigChannel+0x2a>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e32e      	b.n	8006a08 <HAL_ADC_ConfigChannel+0x688>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fd38 	bl	8005e2c <LL_ADC_REG_IsConversionOngoing>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 8313 	bne.w	80069ea <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	db2c      	blt.n	8006426 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d108      	bne.n	80063ea <HAL_ADC_ConfigChannel+0x6a>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	0e9b      	lsrs	r3, r3, #26
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	2201      	movs	r2, #1
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	e016      	b.n	8006418 <HAL_ADC_ConfigChannel+0x98>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f2:	fa93 f3a3 	rbit	r3, r3
 80063f6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063fa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8006402:	2320      	movs	r3, #32
 8006404:	e003      	b.n	800640e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006408:	fab3 f383 	clz	r3, r3
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2201      	movs	r2, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	69d1      	ldr	r1, [r2, #28]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	430b      	orrs	r3, r1
 8006424:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6818      	ldr	r0, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6859      	ldr	r1, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	f7ff fbad 	bl	8005b92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fcf5 	bl	8005e2c <LL_ADC_REG_IsConversionOngoing>
 8006442:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff fd02 	bl	8005e52 <LL_ADC_INJ_IsConversionOngoing>
 800644e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 80b8 	bne.w	80065c8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800645a:	2b00      	cmp	r3, #0
 800645c:	f040 80b4 	bne.w	80065c8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6819      	ldr	r1, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	461a      	mov	r2, r3
 800646e:	f7ff fbcf 	bl	8005c10 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006472:	4b30      	ldr	r3, [pc, #192]	; (8006534 <HAL_ADC_ConfigChannel+0x1b4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800647a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800647e:	d10b      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x118>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	089b      	lsrs	r3, r3, #2
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	e01d      	b.n	80064d4 <HAL_ADC_ConfigChannel+0x154>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10b      	bne.n	80064be <HAL_ADC_ConfigChannel+0x13e>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	089b      	lsrs	r3, r3, #2
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	e00a      	b.n	80064d4 <HAL_ADC_ConfigChannel+0x154>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d02c      	beq.n	8006538 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6919      	ldr	r1, [r3, #16]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ec:	f7ff faea 	bl	8005ac4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6919      	ldr	r1, [r3, #16]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	7e5b      	ldrb	r3, [r3, #25]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d102      	bne.n	8006506 <HAL_ADC_ConfigChannel+0x186>
 8006500:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006504:	e000      	b.n	8006508 <HAL_ADC_ConfigChannel+0x188>
 8006506:	2300      	movs	r3, #0
 8006508:	461a      	mov	r2, r3
 800650a:	f7ff fb14 	bl	8005b36 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6919      	ldr	r1, [r3, #16]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	7e1b      	ldrb	r3, [r3, #24]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d102      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x1a4>
 800651e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006522:	e000      	b.n	8006526 <HAL_ADC_ConfigChannel+0x1a6>
 8006524:	2300      	movs	r3, #0
 8006526:	461a      	mov	r2, r3
 8006528:	f7ff faec 	bl	8005b04 <LL_ADC_SetDataRightShift>
 800652c:	e04c      	b.n	80065c8 <HAL_ADC_ConfigChannel+0x248>
 800652e:	bf00      	nop
 8006530:	47ff0000 	.word	0x47ff0000
 8006534:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	069b      	lsls	r3, r3, #26
 8006548:	429a      	cmp	r2, r3
 800654a:	d107      	bne.n	800655c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800655a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	069b      	lsls	r3, r3, #26
 800656c:	429a      	cmp	r2, r3
 800656e:	d107      	bne.n	8006580 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800657e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	069b      	lsls	r3, r3, #26
 8006590:	429a      	cmp	r2, r3
 8006592:	d107      	bne.n	80065a4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80065a2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	069b      	lsls	r3, r3, #26
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d107      	bne.n	80065c8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80065c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fbf3 	bl	8005db8 <LL_ADC_IsEnabled>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f040 8211 	bne.w	80069fc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6819      	ldr	r1, [r3, #0]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	461a      	mov	r2, r3
 80065e8:	f7ff fb3e 	bl	8005c68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4aa1      	ldr	r2, [pc, #644]	; (8006878 <HAL_ADC_ConfigChannel+0x4f8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	f040 812e 	bne.w	8006854 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10b      	bne.n	8006620 <HAL_ADC_ConfigChannel+0x2a0>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	0e9b      	lsrs	r3, r3, #26
 800660e:	3301      	adds	r3, #1
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2b09      	cmp	r3, #9
 8006616:	bf94      	ite	ls
 8006618:	2301      	movls	r3, #1
 800661a:	2300      	movhi	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	e019      	b.n	8006654 <HAL_ADC_ConfigChannel+0x2d4>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006628:	fa93 f3a3 	rbit	r3, r3
 800662c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800662e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006630:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d101      	bne.n	800663c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006638:	2320      	movs	r3, #32
 800663a:	e003      	b.n	8006644 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800663c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800663e:	fab3 f383 	clz	r3, r3
 8006642:	b2db      	uxtb	r3, r3
 8006644:	3301      	adds	r3, #1
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	2b09      	cmp	r3, #9
 800664c:	bf94      	ite	ls
 800664e:	2301      	movls	r3, #1
 8006650:	2300      	movhi	r3, #0
 8006652:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006654:	2b00      	cmp	r3, #0
 8006656:	d079      	beq.n	800674c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006660:	2b00      	cmp	r3, #0
 8006662:	d107      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x2f4>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	0e9b      	lsrs	r3, r3, #26
 800666a:	3301      	adds	r3, #1
 800666c:	069b      	lsls	r3, r3, #26
 800666e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006672:	e015      	b.n	80066a0 <HAL_ADC_ConfigChannel+0x320>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667c:	fa93 f3a3 	rbit	r3, r3
 8006680:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006684:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800668c:	2320      	movs	r3, #32
 800668e:	e003      	b.n	8006698 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006692:	fab3 f383 	clz	r3, r3
 8006696:	b2db      	uxtb	r3, r3
 8006698:	3301      	adds	r3, #1
 800669a:	069b      	lsls	r3, r3, #26
 800669c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x340>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	0e9b      	lsrs	r3, r3, #26
 80066b2:	3301      	adds	r3, #1
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2101      	movs	r1, #1
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	e017      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x370>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c8:	fa93 f3a3 	rbit	r3, r3
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80066ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80066d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80066d8:	2320      	movs	r3, #32
 80066da:	e003      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80066dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066de:	fab3 f383 	clz	r3, r3
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	3301      	adds	r3, #1
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2101      	movs	r1, #1
 80066ec:	fa01 f303 	lsl.w	r3, r1, r3
 80066f0:	ea42 0103 	orr.w	r1, r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <HAL_ADC_ConfigChannel+0x396>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	0e9b      	lsrs	r3, r3, #26
 8006706:	3301      	adds	r3, #1
 8006708:	f003 021f 	and.w	r2, r3, #31
 800670c:	4613      	mov	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4413      	add	r3, r2
 8006712:	051b      	lsls	r3, r3, #20
 8006714:	e018      	b.n	8006748 <HAL_ADC_ConfigChannel+0x3c8>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671e:	fa93 f3a3 	rbit	r3, r3
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800672e:	2320      	movs	r3, #32
 8006730:	e003      	b.n	800673a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	fab3 f383 	clz	r3, r3
 8006738:	b2db      	uxtb	r3, r3
 800673a:	3301      	adds	r3, #1
 800673c:	f003 021f 	and.w	r2, r3, #31
 8006740:	4613      	mov	r3, r2
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	4413      	add	r3, r2
 8006746:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006748:	430b      	orrs	r3, r1
 800674a:	e07e      	b.n	800684a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006754:	2b00      	cmp	r3, #0
 8006756:	d107      	bne.n	8006768 <HAL_ADC_ConfigChannel+0x3e8>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	0e9b      	lsrs	r3, r3, #26
 800675e:	3301      	adds	r3, #1
 8006760:	069b      	lsls	r3, r3, #26
 8006762:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006766:	e015      	b.n	8006794 <HAL_ADC_ConfigChannel+0x414>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	fa93 f3a3 	rbit	r3, r3
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8006780:	2320      	movs	r3, #32
 8006782:	e003      	b.n	800678c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	fab3 f383 	clz	r3, r3
 800678a:	b2db      	uxtb	r3, r3
 800678c:	3301      	adds	r3, #1
 800678e:	069b      	lsls	r3, r3, #26
 8006790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800679c:	2b00      	cmp	r3, #0
 800679e:	d109      	bne.n	80067b4 <HAL_ADC_ConfigChannel+0x434>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	0e9b      	lsrs	r3, r3, #26
 80067a6:	3301      	adds	r3, #1
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2101      	movs	r1, #1
 80067ae:	fa01 f303 	lsl.w	r3, r1, r3
 80067b2:	e017      	b.n	80067e4 <HAL_ADC_ConfigChannel+0x464>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	fa93 f3a3 	rbit	r3, r3
 80067c0:	61bb      	str	r3, [r7, #24]
  return result;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80067cc:	2320      	movs	r3, #32
 80067ce:	e003      	b.n	80067d8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	fab3 f383 	clz	r3, r3
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	3301      	adds	r3, #1
 80067da:	f003 031f 	and.w	r3, r3, #31
 80067de:	2101      	movs	r1, #1
 80067e0:	fa01 f303 	lsl.w	r3, r1, r3
 80067e4:	ea42 0103 	orr.w	r1, r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10d      	bne.n	8006810 <HAL_ADC_ConfigChannel+0x490>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	0e9b      	lsrs	r3, r3, #26
 80067fa:	3301      	adds	r3, #1
 80067fc:	f003 021f 	and.w	r2, r3, #31
 8006800:	4613      	mov	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	4413      	add	r3, r2
 8006806:	3b1e      	subs	r3, #30
 8006808:	051b      	lsls	r3, r3, #20
 800680a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800680e:	e01b      	b.n	8006848 <HAL_ADC_ConfigChannel+0x4c8>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	fa93 f3a3 	rbit	r3, r3
 800681c:	60fb      	str	r3, [r7, #12]
  return result;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006828:	2320      	movs	r3, #32
 800682a:	e003      	b.n	8006834 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	fab3 f383 	clz	r3, r3
 8006832:	b2db      	uxtb	r3, r3
 8006834:	3301      	adds	r3, #1
 8006836:	f003 021f 	and.w	r2, r3, #31
 800683a:	4613      	mov	r3, r2
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	4413      	add	r3, r2
 8006840:	3b1e      	subs	r3, #30
 8006842:	051b      	lsls	r3, r3, #20
 8006844:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006848:	430b      	orrs	r3, r1
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	6892      	ldr	r2, [r2, #8]
 800684e:	4619      	mov	r1, r3
 8006850:	f7ff f9de 	bl	8005c10 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f280 80cf 	bge.w	80069fc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a06      	ldr	r2, [pc, #24]	; (800687c <HAL_ADC_ConfigChannel+0x4fc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_ADC_ConfigChannel+0x4f2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a04      	ldr	r2, [pc, #16]	; (8006880 <HAL_ADC_ConfigChannel+0x500>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d10a      	bne.n	8006888 <HAL_ADC_ConfigChannel+0x508>
 8006872:	4b04      	ldr	r3, [pc, #16]	; (8006884 <HAL_ADC_ConfigChannel+0x504>)
 8006874:	e009      	b.n	800688a <HAL_ADC_ConfigChannel+0x50a>
 8006876:	bf00      	nop
 8006878:	47ff0000 	.word	0x47ff0000
 800687c:	40022000 	.word	0x40022000
 8006880:	40022100 	.word	0x40022100
 8006884:	40022300 	.word	0x40022300
 8006888:	4b61      	ldr	r3, [pc, #388]	; (8006a10 <HAL_ADC_ConfigChannel+0x690>)
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff f90c 	bl	8005aa8 <LL_ADC_GetCommonPathInternalCh>
 8006890:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a5f      	ldr	r2, [pc, #380]	; (8006a14 <HAL_ADC_ConfigChannel+0x694>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_ADC_ConfigChannel+0x526>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5d      	ldr	r2, [pc, #372]	; (8006a18 <HAL_ADC_ConfigChannel+0x698>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d10e      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x544>
 80068a6:	485b      	ldr	r0, [pc, #364]	; (8006a14 <HAL_ADC_ConfigChannel+0x694>)
 80068a8:	f7ff fa86 	bl	8005db8 <LL_ADC_IsEnabled>
 80068ac:	4604      	mov	r4, r0
 80068ae:	485a      	ldr	r0, [pc, #360]	; (8006a18 <HAL_ADC_ConfigChannel+0x698>)
 80068b0:	f7ff fa82 	bl	8005db8 <LL_ADC_IsEnabled>
 80068b4:	4603      	mov	r3, r0
 80068b6:	4323      	orrs	r3, r4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf0c      	ite	eq
 80068bc:	2301      	moveq	r3, #1
 80068be:	2300      	movne	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	e008      	b.n	80068d6 <HAL_ADC_ConfigChannel+0x556>
 80068c4:	4855      	ldr	r0, [pc, #340]	; (8006a1c <HAL_ADC_ConfigChannel+0x69c>)
 80068c6:	f7ff fa77 	bl	8005db8 <LL_ADC_IsEnabled>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d07d      	beq.n	80069d6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a50      	ldr	r2, [pc, #320]	; (8006a20 <HAL_ADC_ConfigChannel+0x6a0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d130      	bne.n	8006946 <HAL_ADC_ConfigChannel+0x5c6>
 80068e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d12b      	bne.n	8006946 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a4a      	ldr	r2, [pc, #296]	; (8006a1c <HAL_ADC_ConfigChannel+0x69c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	f040 8081 	bne.w	80069fc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a45      	ldr	r2, [pc, #276]	; (8006a14 <HAL_ADC_ConfigChannel+0x694>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d004      	beq.n	800690e <HAL_ADC_ConfigChannel+0x58e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a43      	ldr	r2, [pc, #268]	; (8006a18 <HAL_ADC_ConfigChannel+0x698>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d101      	bne.n	8006912 <HAL_ADC_ConfigChannel+0x592>
 800690e:	4a45      	ldr	r2, [pc, #276]	; (8006a24 <HAL_ADC_ConfigChannel+0x6a4>)
 8006910:	e000      	b.n	8006914 <HAL_ADC_ConfigChannel+0x594>
 8006912:	4a3f      	ldr	r2, [pc, #252]	; (8006a10 <HAL_ADC_ConfigChannel+0x690>)
 8006914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006916:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800691a:	4619      	mov	r1, r3
 800691c:	4610      	mov	r0, r2
 800691e:	f7ff f8b0 	bl	8005a82 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006922:	4b41      	ldr	r3, [pc, #260]	; (8006a28 <HAL_ADC_ConfigChannel+0x6a8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	099b      	lsrs	r3, r3, #6
 8006928:	4a40      	ldr	r2, [pc, #256]	; (8006a2c <HAL_ADC_ConfigChannel+0x6ac>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	099b      	lsrs	r3, r3, #6
 8006930:	3301      	adds	r3, #1
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006936:	e002      	b.n	800693e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	3b01      	subs	r3, #1
 800693c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1f9      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006944:	e05a      	b.n	80069fc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a39      	ldr	r2, [pc, #228]	; (8006a30 <HAL_ADC_ConfigChannel+0x6b0>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d11e      	bne.n	800698e <HAL_ADC_ConfigChannel+0x60e>
 8006950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d119      	bne.n	800698e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2f      	ldr	r2, [pc, #188]	; (8006a1c <HAL_ADC_ConfigChannel+0x69c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d14b      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <HAL_ADC_ConfigChannel+0x694>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_ADC_ConfigChannel+0x5f8>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <HAL_ADC_ConfigChannel+0x698>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d101      	bne.n	800697c <HAL_ADC_ConfigChannel+0x5fc>
 8006978:	4a2a      	ldr	r2, [pc, #168]	; (8006a24 <HAL_ADC_ConfigChannel+0x6a4>)
 800697a:	e000      	b.n	800697e <HAL_ADC_ConfigChannel+0x5fe>
 800697c:	4a24      	ldr	r2, [pc, #144]	; (8006a10 <HAL_ADC_ConfigChannel+0x690>)
 800697e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f7ff f87b 	bl	8005a82 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800698c:	e036      	b.n	80069fc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a28      	ldr	r2, [pc, #160]	; (8006a34 <HAL_ADC_ConfigChannel+0x6b4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d131      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x67c>
 8006998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d12c      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <HAL_ADC_ConfigChannel+0x69c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d127      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_ADC_ConfigChannel+0x694>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x640>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <HAL_ADC_ConfigChannel+0x698>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d101      	bne.n	80069c4 <HAL_ADC_ConfigChannel+0x644>
 80069c0:	4a18      	ldr	r2, [pc, #96]	; (8006a24 <HAL_ADC_ConfigChannel+0x6a4>)
 80069c2:	e000      	b.n	80069c6 <HAL_ADC_ConfigChannel+0x646>
 80069c4:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <HAL_ADC_ConfigChannel+0x690>)
 80069c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7ff f857 	bl	8005a82 <LL_ADC_SetCommonPathInternalCh>
 80069d4:	e012      	b.n	80069fc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	f043 0220 	orr.w	r2, r3, #32
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80069e8:	e008      	b.n	80069fc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	f043 0220 	orr.w	r2, r3, #32
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006a04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3784      	adds	r7, #132	; 0x84
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd90      	pop	{r4, r7, pc}
 8006a10:	58026300 	.word	0x58026300
 8006a14:	40022000 	.word	0x40022000
 8006a18:	40022100 	.word	0x40022100
 8006a1c:	58026000 	.word	0x58026000
 8006a20:	cb840000 	.word	0xcb840000
 8006a24:	40022300 	.word	0x40022300
 8006a28:	240000bc 	.word	0x240000bc
 8006a2c:	053e2d63 	.word	0x053e2d63
 8006a30:	c7520000 	.word	0xc7520000
 8006a34:	cfb80000 	.word	0xcfb80000

08006a38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff f9b7 	bl	8005db8 <LL_ADC_IsEnabled>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d16e      	bne.n	8006b2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	4b38      	ldr	r3, [pc, #224]	; (8006b38 <ADC_Enable+0x100>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00d      	beq.n	8006a7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	f043 0210 	orr.w	r2, r3, #16
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e05a      	b.n	8006b30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff f972 	bl	8005d68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006a84:	f7fe ffbc 	bl	8005a00 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2b      	ldr	r2, [pc, #172]	; (8006b3c <ADC_Enable+0x104>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d004      	beq.n	8006a9e <ADC_Enable+0x66>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a29      	ldr	r2, [pc, #164]	; (8006b40 <ADC_Enable+0x108>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d101      	bne.n	8006aa2 <ADC_Enable+0x6a>
 8006a9e:	4b29      	ldr	r3, [pc, #164]	; (8006b44 <ADC_Enable+0x10c>)
 8006aa0:	e000      	b.n	8006aa4 <ADC_Enable+0x6c>
 8006aa2:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <ADC_Enable+0x110>)
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff f903 	bl	8005cb0 <LL_ADC_GetMultimode>
 8006aaa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a23      	ldr	r2, [pc, #140]	; (8006b40 <ADC_Enable+0x108>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d002      	beq.n	8006abc <ADC_Enable+0x84>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	e000      	b.n	8006abe <ADC_Enable+0x86>
 8006abc:	4b1f      	ldr	r3, [pc, #124]	; (8006b3c <ADC_Enable+0x104>)
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d02c      	beq.n	8006b20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d130      	bne.n	8006b2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006acc:	e028      	b.n	8006b20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff f970 	bl	8005db8 <LL_ADC_IsEnabled>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff f940 	bl	8005d68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ae8:	f7fe ff8a 	bl	8005a00 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d914      	bls.n	8006b20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d00d      	beq.n	8006b20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b08:	f043 0210 	orr.w	r2, r3, #16
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b14:	f043 0201 	orr.w	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e007      	b.n	8006b30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d1cf      	bne.n	8006ace <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	8000003f 	.word	0x8000003f
 8006b3c:	40022000 	.word	0x40022000
 8006b40:	40022100 	.word	0x40022100
 8006b44:	40022300 	.word	0x40022300
 8006b48:	58026300 	.word	0x58026300

08006b4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7ff f940 	bl	8005dde <LL_ADC_IsDisableOngoing>
 8006b5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff f927 	bl	8005db8 <LL_ADC_IsEnabled>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d047      	beq.n	8006c00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d144      	bne.n	8006c00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 030d 	and.w	r3, r3, #13
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d10c      	bne.n	8006b9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff f901 	bl	8005d90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2203      	movs	r2, #3
 8006b94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b96:	f7fe ff33 	bl	8005a00 <HAL_GetTick>
 8006b9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b9c:	e029      	b.n	8006bf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	f043 0210 	orr.w	r2, r3, #16
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	f043 0201 	orr.w	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e023      	b.n	8006c02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006bba:	f7fe ff21 	bl	8005a00 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d914      	bls.n	8006bf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00d      	beq.n	8006bf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bda:	f043 0210 	orr.w	r2, r3, #16
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be6:	f043 0201 	orr.w	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e007      	b.n	8006c02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1dc      	bne.n	8006bba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d14b      	bne.n	8006cbc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d021      	beq.n	8006c82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe ff92 	bl	8005b6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d032      	beq.n	8006cb4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d12b      	bne.n	8006cb4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11f      	bne.n	8006cb4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c78:	f043 0201 	orr.w	r2, r3, #1
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	655a      	str	r2, [r3, #84]	; 0x54
 8006c80:	e018      	b.n	8006cb4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d111      	bne.n	8006cb4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cac:	f043 0201 	orr.w	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff fb45 	bl	8006344 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006cba:	e00e      	b.n	8006cda <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7ff fb4f 	bl	800636c <HAL_ADC_ErrorCallback>
}
 8006cce:	e004      	b.n	8006cda <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
}
 8006cda:	bf00      	nop
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff fb31 	bl	8006358 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1c:	f043 0204 	orr.w	r2, r3, #4
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fb21 	bl	800636c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a7a      	ldr	r2, [pc, #488]	; (8006f2c <ADC_ConfigureBoostMode+0x1f8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <ADC_ConfigureBoostMode+0x1c>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a79      	ldr	r2, [pc, #484]	; (8006f30 <ADC_ConfigureBoostMode+0x1fc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d109      	bne.n	8006d64 <ADC_ConfigureBoostMode+0x30>
 8006d50:	4b78      	ldr	r3, [pc, #480]	; (8006f34 <ADC_ConfigureBoostMode+0x200>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bf14      	ite	ne
 8006d5c:	2301      	movne	r3, #1
 8006d5e:	2300      	moveq	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	e008      	b.n	8006d76 <ADC_ConfigureBoostMode+0x42>
 8006d64:	4b74      	ldr	r3, [pc, #464]	; (8006f38 <ADC_ConfigureBoostMode+0x204>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bf14      	ite	ne
 8006d70:	2301      	movne	r3, #1
 8006d72:	2300      	moveq	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01c      	beq.n	8006db4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006d7a:	f007 feb7 	bl	800eaec <HAL_RCC_GetHCLKFreq>
 8006d7e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d88:	d010      	beq.n	8006dac <ADC_ConfigureBoostMode+0x78>
 8006d8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d8e:	d873      	bhi.n	8006e78 <ADC_ConfigureBoostMode+0x144>
 8006d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d94:	d002      	beq.n	8006d9c <ADC_ConfigureBoostMode+0x68>
 8006d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9a:	d16d      	bne.n	8006e78 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	0c1b      	lsrs	r3, r3, #16
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da8:	60fb      	str	r3, [r7, #12]
        break;
 8006daa:	e068      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	60fb      	str	r3, [r7, #12]
        break;
 8006db2:	e064      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006db4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006db8:	f04f 0100 	mov.w	r1, #0
 8006dbc:	f009 f93e 	bl	801003c <HAL_RCCEx_GetPeriphCLKFreq>
 8006dc0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006dca:	d051      	beq.n	8006e70 <ADC_ConfigureBoostMode+0x13c>
 8006dcc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006dd0:	d854      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006dd2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006dd6:	d047      	beq.n	8006e68 <ADC_ConfigureBoostMode+0x134>
 8006dd8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006ddc:	d84e      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006dde:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006de2:	d03d      	beq.n	8006e60 <ADC_ConfigureBoostMode+0x12c>
 8006de4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006de8:	d848      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dee:	d033      	beq.n	8006e58 <ADC_ConfigureBoostMode+0x124>
 8006df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006df4:	d842      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006df6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006dfa:	d029      	beq.n	8006e50 <ADC_ConfigureBoostMode+0x11c>
 8006dfc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006e00:	d83c      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006e02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006e06:	d01a      	beq.n	8006e3e <ADC_ConfigureBoostMode+0x10a>
 8006e08:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006e0c:	d836      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006e0e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006e12:	d014      	beq.n	8006e3e <ADC_ConfigureBoostMode+0x10a>
 8006e14:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006e18:	d830      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1e:	d00e      	beq.n	8006e3e <ADC_ConfigureBoostMode+0x10a>
 8006e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e24:	d82a      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006e26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e2a:	d008      	beq.n	8006e3e <ADC_ConfigureBoostMode+0x10a>
 8006e2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e30:	d824      	bhi.n	8006e7c <ADC_ConfigureBoostMode+0x148>
 8006e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e36:	d002      	beq.n	8006e3e <ADC_ConfigureBoostMode+0x10a>
 8006e38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e3c:	d11e      	bne.n	8006e7c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	0c9b      	lsrs	r3, r3, #18
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4c:	60fb      	str	r3, [r7, #12]
        break;
 8006e4e:	e016      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	091b      	lsrs	r3, r3, #4
 8006e54:	60fb      	str	r3, [r7, #12]
        break;
 8006e56:	e012      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	60fb      	str	r3, [r7, #12]
        break;
 8006e5e:	e00e      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	099b      	lsrs	r3, r3, #6
 8006e64:	60fb      	str	r3, [r7, #12]
        break;
 8006e66:	e00a      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	09db      	lsrs	r3, r3, #7
 8006e6c:	60fb      	str	r3, [r7, #12]
        break;
 8006e6e:	e006      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	60fb      	str	r3, [r7, #12]
        break;
 8006e76:	e002      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006e78:	bf00      	nop
 8006e7a:	e000      	b.n	8006e7e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006e7c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006e7e:	f7fe fdcb 	bl	8005a18 <HAL_GetREVID>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d815      	bhi.n	8006eb8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4a2b      	ldr	r2, [pc, #172]	; (8006f3c <ADC_ConfigureBoostMode+0x208>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d908      	bls.n	8006ea6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006ea4:	e03e      	b.n	8006f24 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eb4:	609a      	str	r2, [r3, #8]
}
 8006eb6:	e035      	b.n	8006f24 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <ADC_ConfigureBoostMode+0x20c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d808      	bhi.n	8006ed8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ed4:	609a      	str	r2, [r3, #8]
}
 8006ed6:	e025      	b.n	8006f24 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4a1a      	ldr	r2, [pc, #104]	; (8006f44 <ADC_ConfigureBoostMode+0x210>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d80a      	bhi.n	8006ef6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ef2:	609a      	str	r2, [r3, #8]
}
 8006ef4:	e016      	b.n	8006f24 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4a13      	ldr	r2, [pc, #76]	; (8006f48 <ADC_ConfigureBoostMode+0x214>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d80a      	bhi.n	8006f14 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f10:	609a      	str	r2, [r3, #8]
}
 8006f12:	e007      	b.n	8006f24 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006f22:	609a      	str	r2, [r3, #8]
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40022000 	.word	0x40022000
 8006f30:	40022100 	.word	0x40022100
 8006f34:	40022300 	.word	0x40022300
 8006f38:	58026300 	.word	0x58026300
 8006f3c:	01312d00 	.word	0x01312d00
 8006f40:	005f5e10 	.word	0x005f5e10
 8006f44:	00bebc20 	.word	0x00bebc20
 8006f48:	017d7840 	.word	0x017d7840

08006f4c <LL_ADC_IsEnabled>:
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <LL_ADC_IsEnabled+0x18>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <LL_ADC_IsEnabled+0x1a>
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
	...

08006f74 <LL_ADC_StartCalibration>:
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	4b09      	ldr	r3, [pc, #36]	; (8006fac <LL_ADC_StartCalibration+0x38>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006f94:	430a      	orrs	r2, r1
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	609a      	str	r2, [r3, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	3ffeffc0 	.word	0x3ffeffc0

08006fb0 <LL_ADC_IsCalibrationOnGoing>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc4:	d101      	bne.n	8006fca <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <LL_ADC_REG_IsConversionOngoing>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d101      	bne.n	8006ff0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
	...

08007000 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_ADCEx_Calibration_Start+0x1e>
 800701a:	2302      	movs	r3, #2
 800701c:	e04c      	b.n	80070b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff fd90 	bl	8006b4c <ADC_Disable>
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d135      	bne.n	80070a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800703a:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800703c:	4013      	ands	r3, r2
 800703e:	f043 0202 	orr.w	r2, r3, #2
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff ff90 	bl	8006f74 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007054:	e014      	b.n	8007080 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	3301      	adds	r3, #1
 800705a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4a19      	ldr	r2, [pc, #100]	; (80070c4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d30d      	bcc.n	8007080 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007068:	f023 0312 	bic.w	r3, r3, #18
 800706c:	f043 0210 	orr.w	r2, r3, #16
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e01b      	b.n	80070b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff ff93 	bl	8006fb0 <LL_ADC_IsCalibrationOnGoing>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e2      	bne.n	8007056 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007094:	f023 0303 	bic.w	r3, r3, #3
 8007098:	f043 0201 	orr.w	r2, r3, #1
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	655a      	str	r2, [r3, #84]	; 0x54
 80070a0:	e005      	b.n	80070ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a6:	f043 0210 	orr.w	r2, r3, #16
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	ffffeefd 	.word	0xffffeefd
 80070c4:	25c3f800 	.word	0x25c3f800

080070c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b09f      	sub	sp, #124	; 0x7c
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e0be      	b.n	8007264 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80070ee:	2300      	movs	r3, #0
 80070f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a5c      	ldr	r2, [pc, #368]	; (800726c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d102      	bne.n	8007106 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007100:	4b5b      	ldr	r3, [pc, #364]	; (8007270 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007102:	60bb      	str	r3, [r7, #8]
 8007104:	e001      	b.n	800710a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007106:	2300      	movs	r3, #0
 8007108:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10b      	bne.n	8007128 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007114:	f043 0220 	orr.w	r2, r3, #32
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e09d      	b.n	8007264 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4618      	mov	r0, r3
 800712c:	f7ff ff54 	bl	8006fd8 <LL_ADC_REG_IsConversionOngoing>
 8007130:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff ff4e 	bl	8006fd8 <LL_ADC_REG_IsConversionOngoing>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d17f      	bne.n	8007242 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007144:	2b00      	cmp	r3, #0
 8007146:	d17c      	bne.n	8007242 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a47      	ldr	r2, [pc, #284]	; (800726c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d004      	beq.n	800715c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a46      	ldr	r2, [pc, #280]	; (8007270 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d101      	bne.n	8007160 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800715c:	4b45      	ldr	r3, [pc, #276]	; (8007274 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800715e:	e000      	b.n	8007162 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007160:	4b45      	ldr	r3, [pc, #276]	; (8007278 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007162:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d039      	beq.n	80071e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800716c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	431a      	orrs	r2, r3
 800717a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3a      	ldr	r2, [pc, #232]	; (800726c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d004      	beq.n	8007192 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a38      	ldr	r2, [pc, #224]	; (8007270 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d10e      	bne.n	80071b0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007192:	4836      	ldr	r0, [pc, #216]	; (800726c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007194:	f7ff feda 	bl	8006f4c <LL_ADC_IsEnabled>
 8007198:	4604      	mov	r4, r0
 800719a:	4835      	ldr	r0, [pc, #212]	; (8007270 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800719c:	f7ff fed6 	bl	8006f4c <LL_ADC_IsEnabled>
 80071a0:	4603      	mov	r3, r0
 80071a2:	4323      	orrs	r3, r4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bf0c      	ite	eq
 80071a8:	2301      	moveq	r3, #1
 80071aa:	2300      	movne	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	e008      	b.n	80071c2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80071b0:	4832      	ldr	r0, [pc, #200]	; (800727c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80071b2:	f7ff fecb 	bl	8006f4c <LL_ADC_IsEnabled>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	bf0c      	ite	eq
 80071bc:	2301      	moveq	r3, #1
 80071be:	2300      	movne	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d047      	beq.n	8007256 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	4b2d      	ldr	r3, [pc, #180]	; (8007280 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	6811      	ldr	r1, [r2, #0]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	6892      	ldr	r2, [r2, #8]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	431a      	orrs	r2, r3
 80071da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80071de:	e03a      	b.n	8007256 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80071e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1e      	ldr	r2, [pc, #120]	; (800726c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d004      	beq.n	8007200 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1d      	ldr	r2, [pc, #116]	; (8007270 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d10e      	bne.n	800721e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007200:	481a      	ldr	r0, [pc, #104]	; (800726c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007202:	f7ff fea3 	bl	8006f4c <LL_ADC_IsEnabled>
 8007206:	4604      	mov	r4, r0
 8007208:	4819      	ldr	r0, [pc, #100]	; (8007270 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800720a:	f7ff fe9f 	bl	8006f4c <LL_ADC_IsEnabled>
 800720e:	4603      	mov	r3, r0
 8007210:	4323      	orrs	r3, r4
 8007212:	2b00      	cmp	r3, #0
 8007214:	bf0c      	ite	eq
 8007216:	2301      	moveq	r3, #1
 8007218:	2300      	movne	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	e008      	b.n	8007230 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800721e:	4817      	ldr	r0, [pc, #92]	; (800727c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007220:	f7ff fe94 	bl	8006f4c <LL_ADC_IsEnabled>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	bf0c      	ite	eq
 800722a:	2301      	moveq	r3, #1
 800722c:	2300      	movne	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800723a:	4013      	ands	r3, r2
 800723c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800723e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007240:	e009      	b.n	8007256 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007246:	f043 0220 	orr.w	r2, r3, #32
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007254:	e000      	b.n	8007258 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007256:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007260:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007264:	4618      	mov	r0, r3
 8007266:	377c      	adds	r7, #124	; 0x7c
 8007268:	46bd      	mov	sp, r7
 800726a:	bd90      	pop	{r4, r7, pc}
 800726c:	40022000 	.word	0x40022000
 8007270:	40022100 	.word	0x40022100
 8007274:	40022300 	.word	0x40022300
 8007278:	58026300 	.word	0x58026300
 800727c:	58026000 	.word	0x58026000
 8007280:	fffff0e0 	.word	0xfffff0e0

08007284 <__NVIC_SetPriorityGrouping>:
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <__NVIC_SetPriorityGrouping+0x40>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072a0:	4013      	ands	r3, r2
 80072a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <__NVIC_SetPriorityGrouping+0x44>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072b2:	4a04      	ldr	r2, [pc, #16]	; (80072c4 <__NVIC_SetPriorityGrouping+0x40>)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	60d3      	str	r3, [r2, #12]
}
 80072b8:	bf00      	nop
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	e000ed00 	.word	0xe000ed00
 80072c8:	05fa0000 	.word	0x05fa0000

080072cc <__NVIC_GetPriorityGrouping>:
{
 80072cc:	b480      	push	{r7}
 80072ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072d0:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <__NVIC_GetPriorityGrouping+0x18>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	0a1b      	lsrs	r3, r3, #8
 80072d6:	f003 0307 	and.w	r3, r3, #7
}
 80072da:	4618      	mov	r0, r3
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	e000ed00 	.word	0xe000ed00

080072e8 <__NVIC_EnableIRQ>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80072f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	db0b      	blt.n	8007312 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	f003 021f 	and.w	r2, r3, #31
 8007300:	4907      	ldr	r1, [pc, #28]	; (8007320 <__NVIC_EnableIRQ+0x38>)
 8007302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	2001      	movs	r0, #1
 800730a:	fa00 f202 	lsl.w	r2, r0, r2
 800730e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	e000e100 	.word	0xe000e100

08007324 <__NVIC_SetPriority>:
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007334:	2b00      	cmp	r3, #0
 8007336:	db0a      	blt.n	800734e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	b2da      	uxtb	r2, r3
 800733c:	490c      	ldr	r1, [pc, #48]	; (8007370 <__NVIC_SetPriority+0x4c>)
 800733e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007342:	0112      	lsls	r2, r2, #4
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	440b      	add	r3, r1
 8007348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800734c:	e00a      	b.n	8007364 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	4908      	ldr	r1, [pc, #32]	; (8007374 <__NVIC_SetPriority+0x50>)
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	f003 030f 	and.w	r3, r3, #15
 800735a:	3b04      	subs	r3, #4
 800735c:	0112      	lsls	r2, r2, #4
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	440b      	add	r3, r1
 8007362:	761a      	strb	r2, [r3, #24]
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	e000e100 	.word	0xe000e100
 8007374:	e000ed00 	.word	0xe000ed00

08007378 <NVIC_EncodePriority>:
{
 8007378:	b480      	push	{r7}
 800737a:	b089      	sub	sp, #36	; 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f1c3 0307 	rsb	r3, r3, #7
 8007392:	2b04      	cmp	r3, #4
 8007394:	bf28      	it	cs
 8007396:	2304      	movcs	r3, #4
 8007398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	3304      	adds	r3, #4
 800739e:	2b06      	cmp	r3, #6
 80073a0:	d902      	bls.n	80073a8 <NVIC_EncodePriority+0x30>
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	3b03      	subs	r3, #3
 80073a6:	e000      	b.n	80073aa <NVIC_EncodePriority+0x32>
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	fa02 f303 	lsl.w	r3, r2, r3
 80073b6:	43da      	mvns	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	401a      	ands	r2, r3
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ca:	43d9      	mvns	r1, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073d0:	4313      	orrs	r3, r2
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3724      	adds	r7, #36	; 0x24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff ff4c 	bl	8007284 <__NVIC_SetPriorityGrouping>
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007402:	f7ff ff63 	bl	80072cc <__NVIC_GetPriorityGrouping>
 8007406:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	6978      	ldr	r0, [r7, #20]
 800740e:	f7ff ffb3 	bl	8007378 <NVIC_EncodePriority>
 8007412:	4602      	mov	r2, r0
 8007414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff ff82 	bl	8007324 <__NVIC_SetPriority>
}
 8007420:	bf00      	nop
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff ff56 	bl	80072e8 <__NVIC_EnableIRQ>
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8007448:	f3bf 8f5f 	dmb	sy
}
 800744c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <HAL_MPU_Disable+0x28>)
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	4a06      	ldr	r2, [pc, #24]	; (800746c <HAL_MPU_Disable+0x28>)
 8007454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007458:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <HAL_MPU_Disable+0x2c>)
 800745c:	2200      	movs	r2, #0
 800745e:	605a      	str	r2, [r3, #4]
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	e000ed00 	.word	0xe000ed00
 8007470:	e000ed90 	.word	0xe000ed90

08007474 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800747c:	4a0b      	ldr	r2, [pc, #44]	; (80074ac <HAL_MPU_Enable+0x38>)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f043 0301 	orr.w	r3, r3, #1
 8007484:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007486:	4b0a      	ldr	r3, [pc, #40]	; (80074b0 <HAL_MPU_Enable+0x3c>)
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	4a09      	ldr	r2, [pc, #36]	; (80074b0 <HAL_MPU_Enable+0x3c>)
 800748c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007490:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007492:	f3bf 8f4f 	dsb	sy
}
 8007496:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007498:	f3bf 8f6f 	isb	sy
}
 800749c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	e000ed90 	.word	0xe000ed90
 80074b0:	e000ed00 	.word	0xe000ed00

080074b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	785a      	ldrb	r2, [r3, #1]
 80074c0:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <HAL_MPU_ConfigRegion+0x7c>)
 80074c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80074c4:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <HAL_MPU_ConfigRegion+0x7c>)
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	4a19      	ldr	r2, [pc, #100]	; (8007530 <HAL_MPU_ConfigRegion+0x7c>)
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80074d0:	4a17      	ldr	r2, [pc, #92]	; (8007530 <HAL_MPU_ConfigRegion+0x7c>)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	7b1b      	ldrb	r3, [r3, #12]
 80074dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	7adb      	ldrb	r3, [r3, #11]
 80074e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80074e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	7a9b      	ldrb	r3, [r3, #10]
 80074ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80074ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	7b5b      	ldrb	r3, [r3, #13]
 80074f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80074f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7b9b      	ldrb	r3, [r3, #14]
 80074fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80074fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7bdb      	ldrb	r3, [r3, #15]
 8007502:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007504:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7a5b      	ldrb	r3, [r3, #9]
 800750a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800750c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7a1b      	ldrb	r3, [r3, #8]
 8007512:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007514:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	7812      	ldrb	r2, [r2, #0]
 800751a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800751c:	4a04      	ldr	r2, [pc, #16]	; (8007530 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800751e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007520:	6113      	str	r3, [r2, #16]
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	e000ed90 	.word	0xe000ed90

08007534 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e014      	b.n	8007570 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	791b      	ldrb	r3, [r3, #4]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7f9 fb44 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e046      	b.n	800761a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	795b      	ldrb	r3, [r3, #5]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_DAC_Start+0x20>
 8007594:	2302      	movs	r3, #2
 8007596:	e040      	b.n	800761a <HAL_DAC_Start+0xa2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6819      	ldr	r1, [r3, #0]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	f003 0310 	and.w	r3, r3, #16
 80075b0:	2201      	movs	r2, #1
 80075b2:	409a      	lsls	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10f      	bne.n	80075e2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d11d      	bne.n	800760c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	605a      	str	r2, [r3, #4]
 80075e0:	e014      	b.n	800760c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2102      	movs	r1, #2
 80075f4:	fa01 f303 	lsl.w	r3, r1, r3
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d107      	bne.n	800760c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0202 	orr.w	r2, r2, #2
 800760a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e0a2      	b.n	8007786 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	795b      	ldrb	r3, [r3, #5]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_DAC_Start_DMA+0x24>
 8007648:	2302      	movs	r3, #2
 800764a:	e09c      	b.n	8007786 <HAL_DAC_Start_DMA+0x15e>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2202      	movs	r2, #2
 8007656:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d129      	bne.n	80076b2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	4a4b      	ldr	r2, [pc, #300]	; (8007790 <HAL_DAC_Start_DMA+0x168>)
 8007664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	4a4a      	ldr	r2, [pc, #296]	; (8007794 <HAL_DAC_Start_DMA+0x16c>)
 800766c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	4a49      	ldr	r2, [pc, #292]	; (8007798 <HAL_DAC_Start_DMA+0x170>)
 8007674:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007684:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_DAC_Start_DMA+0x6c>
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	2b04      	cmp	r3, #4
 8007690:	d005      	beq.n	800769e <HAL_DAC_Start_DMA+0x76>
 8007692:	e009      	b.n	80076a8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	613b      	str	r3, [r7, #16]
        break;
 800769c:	e033      	b.n	8007706 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	613b      	str	r3, [r7, #16]
        break;
 80076a6:	e02e      	b.n	8007706 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3310      	adds	r3, #16
 80076ae:	613b      	str	r3, [r7, #16]
        break;
 80076b0:	e029      	b.n	8007706 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	4a39      	ldr	r2, [pc, #228]	; (800779c <HAL_DAC_Start_DMA+0x174>)
 80076b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4a38      	ldr	r2, [pc, #224]	; (80077a0 <HAL_DAC_Start_DMA+0x178>)
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	4a37      	ldr	r2, [pc, #220]	; (80077a4 <HAL_DAC_Start_DMA+0x17c>)
 80076c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80076d8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_DAC_Start_DMA+0xc0>
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d005      	beq.n	80076f2 <HAL_DAC_Start_DMA+0xca>
 80076e6:	e009      	b.n	80076fc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3314      	adds	r3, #20
 80076ee:	613b      	str	r3, [r7, #16]
        break;
 80076f0:	e009      	b.n	8007706 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3318      	adds	r3, #24
 80076f8:	613b      	str	r3, [r7, #16]
        break;
 80076fa:	e004      	b.n	8007706 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	331c      	adds	r3, #28
 8007702:	613b      	str	r3, [r7, #16]
        break;
 8007704:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d111      	bne.n	8007730 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800771a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6898      	ldr	r0, [r3, #8]
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	f000 fe67 	bl	80083f8 <HAL_DMA_Start_IT>
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]
 800772e:	e010      	b.n	8007752 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800773e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68d8      	ldr	r0, [r3, #12]
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	f000 fe55 	bl	80083f8 <HAL_DMA_Start_IT>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007758:	7dfb      	ldrb	r3, [r7, #23]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10c      	bne.n	8007778 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2201      	movs	r2, #1
 800776c:	409a      	lsls	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	e005      	b.n	8007784 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f043 0204 	orr.w	r2, r3, #4
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007784:	7dfb      	ldrb	r3, [r7, #23]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	08007c19 	.word	0x08007c19
 8007794:	08007c3b 	.word	0x08007c3b
 8007798:	08007c57 	.word	0x08007c57
 800779c:	08007cd5 	.word	0x08007cd5
 80077a0:	08007cf7 	.word	0x08007cf7
 80077a4:	08007d13 	.word	0x08007d13

080077a8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e03e      	b.n	800783a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6819      	ldr	r1, [r3, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	43da      	mvns	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	400a      	ands	r2, r1
 80077d8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6819      	ldr	r1, [r3, #0]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2201      	movs	r2, #1
 80077e8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ec:	43da      	mvns	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	400a      	ands	r2, r1
 80077f4:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10d      	bne.n	8007818 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	4618      	mov	r0, r3
 8007802:	f001 f863 	bl	80088cc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e00c      	b.n	8007832 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f855 	bl	80088cc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007830:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007858:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01d      	beq.n	80078a0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d018      	beq.n	80078a0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2204      	movs	r2, #4
 8007872:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007888:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007898:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f86f 	bl	800797e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01d      	beq.n	80078e6 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d018      	beq.n	80078e6 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2204      	movs	r2, #4
 80078b8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f043 0202 	orr.w	r2, r3, #2
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80078ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80078de:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9ed 	bl	8007cc0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80078e6:	bf00      	nop
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b087      	sub	sp, #28
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	60b9      	str	r1, [r7, #8]
 80078f8:	607a      	str	r2, [r7, #4]
 80078fa:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e015      	b.n	8007936 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d105      	bne.n	8007922 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4413      	add	r3, r2
 800791c:	3308      	adds	r3, #8
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e004      	b.n	800792c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4413      	add	r3, r2
 8007928:	3314      	adds	r3, #20
 800792a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	461a      	mov	r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	; 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_DAC_ConfigChannel+0x1e>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e12a      	b.n	8007c0c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	795b      	ldrb	r3, [r3, #5]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_DAC_ConfigChannel+0x2e>
 80079be:	2302      	movs	r3, #2
 80079c0:	e124      	b.n	8007c0c <HAL_DAC_ConfigChannel+0x278>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2202      	movs	r2, #2
 80079cc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d17a      	bne.n	8007acc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80079d6:	f7fe f813 	bl	8005a00 <HAL_GetTick>
 80079da:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d13d      	bne.n	8007a5e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80079e2:	e018      	b.n	8007a16 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80079e4:	f7fe f80c 	bl	8005a00 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d911      	bls.n	8007a16 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079f8:	4b86      	ldr	r3, [pc, #536]	; (8007c14 <HAL_DAC_ConfigChannel+0x280>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	f043 0208 	orr.w	r2, r3, #8
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e0fa      	b.n	8007c0c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a1c:	4b7d      	ldr	r3, [pc, #500]	; (8007c14 <HAL_DAC_ConfigChannel+0x280>)
 8007a1e:	4013      	ands	r3, r2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1df      	bne.n	80079e4 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	6992      	ldr	r2, [r2, #24]
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8007a2e:	e020      	b.n	8007a72 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007a30:	f7fd ffe6 	bl	8005a00 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d90f      	bls.n	8007a5e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da0a      	bge.n	8007a5e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f043 0208 	orr.w	r2, r3, #8
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2203      	movs	r2, #3
 8007a58:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e0d6      	b.n	8007c0c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dbe3      	blt.n	8007a30 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	6992      	ldr	r2, [r2, #24]
 8007a70:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f003 0310 	and.w	r3, r3, #16
 8007a7e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007a82:	fa01 f303 	lsl.w	r3, r1, r3
 8007a86:	43db      	mvns	r3, r3
 8007a88:	ea02 0103 	and.w	r1, r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	69da      	ldr	r2, [r3, #28]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f003 0310 	and.w	r3, r3, #16
 8007a96:	409a      	lsls	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	21ff      	movs	r1, #255	; 0xff
 8007aae:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	ea02 0103 	and.w	r1, r2, r3
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	6a1a      	ldr	r2, [r3, #32]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f003 0310 	and.w	r3, r3, #16
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d11d      	bne.n	8007b10 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	221f      	movs	r2, #31
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	4013      	ands	r3, r2
 8007aee:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b16:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f003 0310 	and.w	r3, r3, #16
 8007b1e:	2207      	movs	r2, #7
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	43db      	mvns	r3, r3
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d102      	bne.n	8007b3a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
 8007b38:	e00f      	b.n	8007b5a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d102      	bne.n	8007b48 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007b42:	2301      	movs	r3, #1
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
 8007b46:	e008      	b.n	8007b5a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007b50:	2301      	movs	r3, #1
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
 8007b54:	e001      	b.n	8007b5a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6819      	ldr	r1, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b94:	fa02 f303 	lsl.w	r3, r2, r3
 8007b98:	43da      	mvns	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	400a      	ands	r2, r1
 8007ba0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6819      	ldr	r1, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	22c0      	movs	r2, #192	; 0xc0
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43da      	mvns	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	400a      	ands	r2, r1
 8007bfa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3728      	adds	r7, #40	; 0x28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20008000 	.word	0x20008000

08007c18 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff fe8b 	bl	8007942 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	711a      	strb	r2, [r3, #4]
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fe84 	bl	8007956 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f043 0204 	orr.w	r2, r3, #4
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff fe7a 	bl	800796a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	711a      	strb	r2, [r3, #4]
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff ffce 	bl	8007c84 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	711a      	strb	r2, [r3, #4]
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff ffc7 	bl	8007c98 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f043 0204 	orr.w	r2, r3, #4
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff ffbd 	bl	8007cac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	711a      	strb	r2, [r3, #4]
}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007d48:	f7fd fe5a 	bl	8005a00 <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e316      	b.n	8008386 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a66      	ldr	r2, [pc, #408]	; (8007ef8 <HAL_DMA_Init+0x1b8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d04a      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a65      	ldr	r2, [pc, #404]	; (8007efc <HAL_DMA_Init+0x1bc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d045      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a63      	ldr	r2, [pc, #396]	; (8007f00 <HAL_DMA_Init+0x1c0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d040      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a62      	ldr	r2, [pc, #392]	; (8007f04 <HAL_DMA_Init+0x1c4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d03b      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a60      	ldr	r2, [pc, #384]	; (8007f08 <HAL_DMA_Init+0x1c8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d036      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a5f      	ldr	r2, [pc, #380]	; (8007f0c <HAL_DMA_Init+0x1cc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d031      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a5d      	ldr	r2, [pc, #372]	; (8007f10 <HAL_DMA_Init+0x1d0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d02c      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a5c      	ldr	r2, [pc, #368]	; (8007f14 <HAL_DMA_Init+0x1d4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d027      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a5a      	ldr	r2, [pc, #360]	; (8007f18 <HAL_DMA_Init+0x1d8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d022      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a59      	ldr	r2, [pc, #356]	; (8007f1c <HAL_DMA_Init+0x1dc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d01d      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a57      	ldr	r2, [pc, #348]	; (8007f20 <HAL_DMA_Init+0x1e0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d018      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a56      	ldr	r2, [pc, #344]	; (8007f24 <HAL_DMA_Init+0x1e4>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d013      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a54      	ldr	r2, [pc, #336]	; (8007f28 <HAL_DMA_Init+0x1e8>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d00e      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a53      	ldr	r2, [pc, #332]	; (8007f2c <HAL_DMA_Init+0x1ec>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d009      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a51      	ldr	r2, [pc, #324]	; (8007f30 <HAL_DMA_Init+0x1f0>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d004      	beq.n	8007df8 <HAL_DMA_Init+0xb8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a50      	ldr	r2, [pc, #320]	; (8007f34 <HAL_DMA_Init+0x1f4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d101      	bne.n	8007dfc <HAL_DMA_Init+0xbc>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e000      	b.n	8007dfe <HAL_DMA_Init+0xbe>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 813b 	beq.w	800807a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a37      	ldr	r2, [pc, #220]	; (8007ef8 <HAL_DMA_Init+0x1b8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d04a      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a36      	ldr	r2, [pc, #216]	; (8007efc <HAL_DMA_Init+0x1bc>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d045      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a34      	ldr	r2, [pc, #208]	; (8007f00 <HAL_DMA_Init+0x1c0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d040      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a33      	ldr	r2, [pc, #204]	; (8007f04 <HAL_DMA_Init+0x1c4>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d03b      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a31      	ldr	r2, [pc, #196]	; (8007f08 <HAL_DMA_Init+0x1c8>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d036      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a30      	ldr	r2, [pc, #192]	; (8007f0c <HAL_DMA_Init+0x1cc>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d031      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a2e      	ldr	r2, [pc, #184]	; (8007f10 <HAL_DMA_Init+0x1d0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d02c      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a2d      	ldr	r2, [pc, #180]	; (8007f14 <HAL_DMA_Init+0x1d4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d027      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a2b      	ldr	r2, [pc, #172]	; (8007f18 <HAL_DMA_Init+0x1d8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d022      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a2a      	ldr	r2, [pc, #168]	; (8007f1c <HAL_DMA_Init+0x1dc>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d01d      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a28      	ldr	r2, [pc, #160]	; (8007f20 <HAL_DMA_Init+0x1e0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d018      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a27      	ldr	r2, [pc, #156]	; (8007f24 <HAL_DMA_Init+0x1e4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d013      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a25      	ldr	r2, [pc, #148]	; (8007f28 <HAL_DMA_Init+0x1e8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00e      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a24      	ldr	r2, [pc, #144]	; (8007f2c <HAL_DMA_Init+0x1ec>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d009      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a22      	ldr	r2, [pc, #136]	; (8007f30 <HAL_DMA_Init+0x1f0>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_DMA_Init+0x174>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a21      	ldr	r2, [pc, #132]	; (8007f34 <HAL_DMA_Init+0x1f4>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d108      	bne.n	8007ec6 <HAL_DMA_Init+0x186>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0201 	bic.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e007      	b.n	8007ed6 <HAL_DMA_Init+0x196>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0201 	bic.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ed6:	e02f      	b.n	8007f38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ed8:	f7fd fd92 	bl	8005a00 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b05      	cmp	r3, #5
 8007ee4:	d928      	bls.n	8007f38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2203      	movs	r2, #3
 8007ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e246      	b.n	8008386 <HAL_DMA_Init+0x646>
 8007ef8:	40020010 	.word	0x40020010
 8007efc:	40020028 	.word	0x40020028
 8007f00:	40020040 	.word	0x40020040
 8007f04:	40020058 	.word	0x40020058
 8007f08:	40020070 	.word	0x40020070
 8007f0c:	40020088 	.word	0x40020088
 8007f10:	400200a0 	.word	0x400200a0
 8007f14:	400200b8 	.word	0x400200b8
 8007f18:	40020410 	.word	0x40020410
 8007f1c:	40020428 	.word	0x40020428
 8007f20:	40020440 	.word	0x40020440
 8007f24:	40020458 	.word	0x40020458
 8007f28:	40020470 	.word	0x40020470
 8007f2c:	40020488 	.word	0x40020488
 8007f30:	400204a0 	.word	0x400204a0
 8007f34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1c8      	bne.n	8007ed8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4b83      	ldr	r3, [pc, #524]	; (8008160 <HAL_DMA_Init+0x420>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007f5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d107      	bne.n	8007f9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f94:	4313      	orrs	r3, r2
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007f9c:	4b71      	ldr	r3, [pc, #452]	; (8008164 <HAL_DMA_Init+0x424>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	4b71      	ldr	r3, [pc, #452]	; (8008168 <HAL_DMA_Init+0x428>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa8:	d328      	bcc.n	8007ffc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b28      	cmp	r3, #40	; 0x28
 8007fb0:	d903      	bls.n	8007fba <HAL_DMA_Init+0x27a>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8007fb8:	d917      	bls.n	8007fea <HAL_DMA_Init+0x2aa>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2b3e      	cmp	r3, #62	; 0x3e
 8007fc0:	d903      	bls.n	8007fca <HAL_DMA_Init+0x28a>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	2b42      	cmp	r3, #66	; 0x42
 8007fc8:	d90f      	bls.n	8007fea <HAL_DMA_Init+0x2aa>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	2b46      	cmp	r3, #70	; 0x46
 8007fd0:	d903      	bls.n	8007fda <HAL_DMA_Init+0x29a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b48      	cmp	r3, #72	; 0x48
 8007fd8:	d907      	bls.n	8007fea <HAL_DMA_Init+0x2aa>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b4e      	cmp	r3, #78	; 0x4e
 8007fe0:	d905      	bls.n	8007fee <HAL_DMA_Init+0x2ae>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b52      	cmp	r3, #82	; 0x52
 8007fe8:	d801      	bhi.n	8007fee <HAL_DMA_Init+0x2ae>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <HAL_DMA_Init+0x2b0>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ffa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f023 0307 	bic.w	r3, r3, #7
 8008012:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2b04      	cmp	r3, #4
 8008024:	d117      	bne.n	8008056 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00e      	beq.n	8008056 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f002 fb4d 	bl	800a6d8 <DMA_CheckFifoParam>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d008      	beq.n	8008056 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2240      	movs	r2, #64	; 0x40
 8008048:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e197      	b.n	8008386 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f002 fa88 	bl	800a574 <DMA_CalcBaseAndBitshift>
 8008064:	4603      	mov	r3, r0
 8008066:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806c:	f003 031f 	and.w	r3, r3, #31
 8008070:	223f      	movs	r2, #63	; 0x3f
 8008072:	409a      	lsls	r2, r3
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	609a      	str	r2, [r3, #8]
 8008078:	e0cd      	b.n	8008216 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a3b      	ldr	r2, [pc, #236]	; (800816c <HAL_DMA_Init+0x42c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d022      	beq.n	80080ca <HAL_DMA_Init+0x38a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a39      	ldr	r2, [pc, #228]	; (8008170 <HAL_DMA_Init+0x430>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d01d      	beq.n	80080ca <HAL_DMA_Init+0x38a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a38      	ldr	r2, [pc, #224]	; (8008174 <HAL_DMA_Init+0x434>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d018      	beq.n	80080ca <HAL_DMA_Init+0x38a>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a36      	ldr	r2, [pc, #216]	; (8008178 <HAL_DMA_Init+0x438>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d013      	beq.n	80080ca <HAL_DMA_Init+0x38a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a35      	ldr	r2, [pc, #212]	; (800817c <HAL_DMA_Init+0x43c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d00e      	beq.n	80080ca <HAL_DMA_Init+0x38a>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a33      	ldr	r2, [pc, #204]	; (8008180 <HAL_DMA_Init+0x440>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d009      	beq.n	80080ca <HAL_DMA_Init+0x38a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a32      	ldr	r2, [pc, #200]	; (8008184 <HAL_DMA_Init+0x444>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d004      	beq.n	80080ca <HAL_DMA_Init+0x38a>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a30      	ldr	r2, [pc, #192]	; (8008188 <HAL_DMA_Init+0x448>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d101      	bne.n	80080ce <HAL_DMA_Init+0x38e>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <HAL_DMA_Init+0x390>
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8097 	beq.w	8008204 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a24      	ldr	r2, [pc, #144]	; (800816c <HAL_DMA_Init+0x42c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d021      	beq.n	8008124 <HAL_DMA_Init+0x3e4>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a22      	ldr	r2, [pc, #136]	; (8008170 <HAL_DMA_Init+0x430>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d01c      	beq.n	8008124 <HAL_DMA_Init+0x3e4>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a21      	ldr	r2, [pc, #132]	; (8008174 <HAL_DMA_Init+0x434>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d017      	beq.n	8008124 <HAL_DMA_Init+0x3e4>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1f      	ldr	r2, [pc, #124]	; (8008178 <HAL_DMA_Init+0x438>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d012      	beq.n	8008124 <HAL_DMA_Init+0x3e4>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1e      	ldr	r2, [pc, #120]	; (800817c <HAL_DMA_Init+0x43c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00d      	beq.n	8008124 <HAL_DMA_Init+0x3e4>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a1c      	ldr	r2, [pc, #112]	; (8008180 <HAL_DMA_Init+0x440>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d008      	beq.n	8008124 <HAL_DMA_Init+0x3e4>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a1b      	ldr	r2, [pc, #108]	; (8008184 <HAL_DMA_Init+0x444>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <HAL_DMA_Init+0x3e4>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a19      	ldr	r2, [pc, #100]	; (8008188 <HAL_DMA_Init+0x448>)
 8008122:	4293      	cmp	r3, r2
 8008124:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4b12      	ldr	r3, [pc, #72]	; (800818c <HAL_DMA_Init+0x44c>)
 8008142:	4013      	ands	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d020      	beq.n	8008190 <HAL_DMA_Init+0x450>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d102      	bne.n	800815c <HAL_DMA_Init+0x41c>
 8008156:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800815a:	e01a      	b.n	8008192 <HAL_DMA_Init+0x452>
 800815c:	2300      	movs	r3, #0
 800815e:	e018      	b.n	8008192 <HAL_DMA_Init+0x452>
 8008160:	fe10803f 	.word	0xfe10803f
 8008164:	5c001000 	.word	0x5c001000
 8008168:	ffff0000 	.word	0xffff0000
 800816c:	58025408 	.word	0x58025408
 8008170:	5802541c 	.word	0x5802541c
 8008174:	58025430 	.word	0x58025430
 8008178:	58025444 	.word	0x58025444
 800817c:	58025458 	.word	0x58025458
 8008180:	5802546c 	.word	0x5802546c
 8008184:	58025480 	.word	0x58025480
 8008188:	58025494 	.word	0x58025494
 800818c:	fffe000f 	.word	0xfffe000f
 8008190:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	68d2      	ldr	r2, [r2, #12]
 8008196:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80081a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80081a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80081b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80081b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80081c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	4b6e      	ldr	r3, [pc, #440]	; (8008390 <HAL_DMA_Init+0x650>)
 80081d8:	4413      	add	r3, r2
 80081da:	4a6e      	ldr	r2, [pc, #440]	; (8008394 <HAL_DMA_Init+0x654>)
 80081dc:	fba2 2303 	umull	r2, r3, r2, r3
 80081e0:	091b      	lsrs	r3, r3, #4
 80081e2:	009a      	lsls	r2, r3, #2
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f002 f9c3 	bl	800a574 <DMA_CalcBaseAndBitshift>
 80081ee:	4603      	mov	r3, r0
 80081f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	2201      	movs	r2, #1
 80081fc:	409a      	lsls	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	605a      	str	r2, [r3, #4]
 8008202:	e008      	b.n	8008216 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2240      	movs	r2, #64	; 0x40
 8008208:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2203      	movs	r2, #3
 800820e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e0b7      	b.n	8008386 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a5f      	ldr	r2, [pc, #380]	; (8008398 <HAL_DMA_Init+0x658>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d072      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a5d      	ldr	r2, [pc, #372]	; (800839c <HAL_DMA_Init+0x65c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d06d      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a5c      	ldr	r2, [pc, #368]	; (80083a0 <HAL_DMA_Init+0x660>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d068      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a5a      	ldr	r2, [pc, #360]	; (80083a4 <HAL_DMA_Init+0x664>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d063      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a59      	ldr	r2, [pc, #356]	; (80083a8 <HAL_DMA_Init+0x668>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d05e      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a57      	ldr	r2, [pc, #348]	; (80083ac <HAL_DMA_Init+0x66c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d059      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a56      	ldr	r2, [pc, #344]	; (80083b0 <HAL_DMA_Init+0x670>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d054      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a54      	ldr	r2, [pc, #336]	; (80083b4 <HAL_DMA_Init+0x674>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d04f      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a53      	ldr	r2, [pc, #332]	; (80083b8 <HAL_DMA_Init+0x678>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d04a      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a51      	ldr	r2, [pc, #324]	; (80083bc <HAL_DMA_Init+0x67c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d045      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a50      	ldr	r2, [pc, #320]	; (80083c0 <HAL_DMA_Init+0x680>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d040      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a4e      	ldr	r2, [pc, #312]	; (80083c4 <HAL_DMA_Init+0x684>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d03b      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a4d      	ldr	r2, [pc, #308]	; (80083c8 <HAL_DMA_Init+0x688>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d036      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a4b      	ldr	r2, [pc, #300]	; (80083cc <HAL_DMA_Init+0x68c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d031      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a4a      	ldr	r2, [pc, #296]	; (80083d0 <HAL_DMA_Init+0x690>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d02c      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a48      	ldr	r2, [pc, #288]	; (80083d4 <HAL_DMA_Init+0x694>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d027      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a47      	ldr	r2, [pc, #284]	; (80083d8 <HAL_DMA_Init+0x698>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d022      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a45      	ldr	r2, [pc, #276]	; (80083dc <HAL_DMA_Init+0x69c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d01d      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a44      	ldr	r2, [pc, #272]	; (80083e0 <HAL_DMA_Init+0x6a0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d018      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a42      	ldr	r2, [pc, #264]	; (80083e4 <HAL_DMA_Init+0x6a4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d013      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a41      	ldr	r2, [pc, #260]	; (80083e8 <HAL_DMA_Init+0x6a8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00e      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a3f      	ldr	r2, [pc, #252]	; (80083ec <HAL_DMA_Init+0x6ac>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d009      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a3e      	ldr	r2, [pc, #248]	; (80083f0 <HAL_DMA_Init+0x6b0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d004      	beq.n	8008306 <HAL_DMA_Init+0x5c6>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a3c      	ldr	r2, [pc, #240]	; (80083f4 <HAL_DMA_Init+0x6b4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d101      	bne.n	800830a <HAL_DMA_Init+0x5ca>
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <HAL_DMA_Init+0x5cc>
 800830a:	2300      	movs	r3, #0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d032      	beq.n	8008376 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f002 fa5d 	bl	800a7d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b80      	cmp	r3, #128	; 0x80
 800831c:	d102      	bne.n	8008324 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800832c:	b2d2      	uxtb	r2, r2
 800832e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008338:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d010      	beq.n	8008364 <HAL_DMA_Init+0x624>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	2b08      	cmp	r3, #8
 8008348:	d80c      	bhi.n	8008364 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f002 fada 	bl	800a904 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008354:	2200      	movs	r2, #0
 8008356:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	e008      	b.n	8008376 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	a7fdabf8 	.word	0xa7fdabf8
 8008394:	cccccccd 	.word	0xcccccccd
 8008398:	40020010 	.word	0x40020010
 800839c:	40020028 	.word	0x40020028
 80083a0:	40020040 	.word	0x40020040
 80083a4:	40020058 	.word	0x40020058
 80083a8:	40020070 	.word	0x40020070
 80083ac:	40020088 	.word	0x40020088
 80083b0:	400200a0 	.word	0x400200a0
 80083b4:	400200b8 	.word	0x400200b8
 80083b8:	40020410 	.word	0x40020410
 80083bc:	40020428 	.word	0x40020428
 80083c0:	40020440 	.word	0x40020440
 80083c4:	40020458 	.word	0x40020458
 80083c8:	40020470 	.word	0x40020470
 80083cc:	40020488 	.word	0x40020488
 80083d0:	400204a0 	.word	0x400204a0
 80083d4:	400204b8 	.word	0x400204b8
 80083d8:	58025408 	.word	0x58025408
 80083dc:	5802541c 	.word	0x5802541c
 80083e0:	58025430 	.word	0x58025430
 80083e4:	58025444 	.word	0x58025444
 80083e8:	58025458 	.word	0x58025458
 80083ec:	5802546c 	.word	0x5802546c
 80083f0:	58025480 	.word	0x58025480
 80083f4:	58025494 	.word	0x58025494

080083f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e226      	b.n	8008862 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_DMA_Start_IT+0x2a>
 800841e:	2302      	movs	r3, #2
 8008420:	e21f      	b.n	8008862 <HAL_DMA_Start_IT+0x46a>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b01      	cmp	r3, #1
 8008434:	f040 820a 	bne.w	800884c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a68      	ldr	r2, [pc, #416]	; (80085ec <HAL_DMA_Start_IT+0x1f4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d04a      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a66      	ldr	r2, [pc, #408]	; (80085f0 <HAL_DMA_Start_IT+0x1f8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d045      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a65      	ldr	r2, [pc, #404]	; (80085f4 <HAL_DMA_Start_IT+0x1fc>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d040      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a63      	ldr	r2, [pc, #396]	; (80085f8 <HAL_DMA_Start_IT+0x200>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d03b      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a62      	ldr	r2, [pc, #392]	; (80085fc <HAL_DMA_Start_IT+0x204>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d036      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a60      	ldr	r2, [pc, #384]	; (8008600 <HAL_DMA_Start_IT+0x208>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d031      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a5f      	ldr	r2, [pc, #380]	; (8008604 <HAL_DMA_Start_IT+0x20c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d02c      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a5d      	ldr	r2, [pc, #372]	; (8008608 <HAL_DMA_Start_IT+0x210>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d027      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a5c      	ldr	r2, [pc, #368]	; (800860c <HAL_DMA_Start_IT+0x214>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d022      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a5a      	ldr	r2, [pc, #360]	; (8008610 <HAL_DMA_Start_IT+0x218>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d01d      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a59      	ldr	r2, [pc, #356]	; (8008614 <HAL_DMA_Start_IT+0x21c>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d018      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a57      	ldr	r2, [pc, #348]	; (8008618 <HAL_DMA_Start_IT+0x220>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d013      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a56      	ldr	r2, [pc, #344]	; (800861c <HAL_DMA_Start_IT+0x224>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00e      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a54      	ldr	r2, [pc, #336]	; (8008620 <HAL_DMA_Start_IT+0x228>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d009      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a53      	ldr	r2, [pc, #332]	; (8008624 <HAL_DMA_Start_IT+0x22c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d004      	beq.n	80084e6 <HAL_DMA_Start_IT+0xee>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a51      	ldr	r2, [pc, #324]	; (8008628 <HAL_DMA_Start_IT+0x230>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d108      	bne.n	80084f8 <HAL_DMA_Start_IT+0x100>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0201 	bic.w	r2, r2, #1
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	e007      	b.n	8008508 <HAL_DMA_Start_IT+0x110>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0201 	bic.w	r2, r2, #1
 8008506:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	68b9      	ldr	r1, [r7, #8]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f001 fe84 	bl	800a21c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a34      	ldr	r2, [pc, #208]	; (80085ec <HAL_DMA_Start_IT+0x1f4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d04a      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a33      	ldr	r2, [pc, #204]	; (80085f0 <HAL_DMA_Start_IT+0x1f8>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d045      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a31      	ldr	r2, [pc, #196]	; (80085f4 <HAL_DMA_Start_IT+0x1fc>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d040      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a30      	ldr	r2, [pc, #192]	; (80085f8 <HAL_DMA_Start_IT+0x200>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d03b      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a2e      	ldr	r2, [pc, #184]	; (80085fc <HAL_DMA_Start_IT+0x204>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d036      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a2d      	ldr	r2, [pc, #180]	; (8008600 <HAL_DMA_Start_IT+0x208>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d031      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a2b      	ldr	r2, [pc, #172]	; (8008604 <HAL_DMA_Start_IT+0x20c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d02c      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <HAL_DMA_Start_IT+0x210>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d027      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a28      	ldr	r2, [pc, #160]	; (800860c <HAL_DMA_Start_IT+0x214>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d022      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a27      	ldr	r2, [pc, #156]	; (8008610 <HAL_DMA_Start_IT+0x218>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d01d      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a25      	ldr	r2, [pc, #148]	; (8008614 <HAL_DMA_Start_IT+0x21c>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d018      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a24      	ldr	r2, [pc, #144]	; (8008618 <HAL_DMA_Start_IT+0x220>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d013      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a22      	ldr	r2, [pc, #136]	; (800861c <HAL_DMA_Start_IT+0x224>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00e      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a21      	ldr	r2, [pc, #132]	; (8008620 <HAL_DMA_Start_IT+0x228>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d009      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1f      	ldr	r2, [pc, #124]	; (8008624 <HAL_DMA_Start_IT+0x22c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d004      	beq.n	80085b4 <HAL_DMA_Start_IT+0x1bc>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <HAL_DMA_Start_IT+0x230>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d101      	bne.n	80085b8 <HAL_DMA_Start_IT+0x1c0>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <HAL_DMA_Start_IT+0x1c2>
 80085b8:	2300      	movs	r3, #0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d036      	beq.n	800862c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f023 021e 	bic.w	r2, r3, #30
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0216 	orr.w	r2, r2, #22
 80085d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d03e      	beq.n	8008658 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0208 	orr.w	r2, r2, #8
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e035      	b.n	8008658 <HAL_DMA_Start_IT+0x260>
 80085ec:	40020010 	.word	0x40020010
 80085f0:	40020028 	.word	0x40020028
 80085f4:	40020040 	.word	0x40020040
 80085f8:	40020058 	.word	0x40020058
 80085fc:	40020070 	.word	0x40020070
 8008600:	40020088 	.word	0x40020088
 8008604:	400200a0 	.word	0x400200a0
 8008608:	400200b8 	.word	0x400200b8
 800860c:	40020410 	.word	0x40020410
 8008610:	40020428 	.word	0x40020428
 8008614:	40020440 	.word	0x40020440
 8008618:	40020458 	.word	0x40020458
 800861c:	40020470 	.word	0x40020470
 8008620:	40020488 	.word	0x40020488
 8008624:	400204a0 	.word	0x400204a0
 8008628:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f023 020e 	bic.w	r2, r3, #14
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 020a 	orr.w	r2, r2, #10
 800863e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0204 	orr.w	r2, r2, #4
 8008656:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a83      	ldr	r2, [pc, #524]	; (800886c <HAL_DMA_Start_IT+0x474>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d072      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a82      	ldr	r2, [pc, #520]	; (8008870 <HAL_DMA_Start_IT+0x478>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d06d      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a80      	ldr	r2, [pc, #512]	; (8008874 <HAL_DMA_Start_IT+0x47c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d068      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a7f      	ldr	r2, [pc, #508]	; (8008878 <HAL_DMA_Start_IT+0x480>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d063      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a7d      	ldr	r2, [pc, #500]	; (800887c <HAL_DMA_Start_IT+0x484>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d05e      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a7c      	ldr	r2, [pc, #496]	; (8008880 <HAL_DMA_Start_IT+0x488>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d059      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a7a      	ldr	r2, [pc, #488]	; (8008884 <HAL_DMA_Start_IT+0x48c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d054      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a79      	ldr	r2, [pc, #484]	; (8008888 <HAL_DMA_Start_IT+0x490>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d04f      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a77      	ldr	r2, [pc, #476]	; (800888c <HAL_DMA_Start_IT+0x494>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d04a      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a76      	ldr	r2, [pc, #472]	; (8008890 <HAL_DMA_Start_IT+0x498>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d045      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a74      	ldr	r2, [pc, #464]	; (8008894 <HAL_DMA_Start_IT+0x49c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d040      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a73      	ldr	r2, [pc, #460]	; (8008898 <HAL_DMA_Start_IT+0x4a0>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d03b      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a71      	ldr	r2, [pc, #452]	; (800889c <HAL_DMA_Start_IT+0x4a4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d036      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a70      	ldr	r2, [pc, #448]	; (80088a0 <HAL_DMA_Start_IT+0x4a8>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d031      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a6e      	ldr	r2, [pc, #440]	; (80088a4 <HAL_DMA_Start_IT+0x4ac>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d02c      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a6d      	ldr	r2, [pc, #436]	; (80088a8 <HAL_DMA_Start_IT+0x4b0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d027      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a6b      	ldr	r2, [pc, #428]	; (80088ac <HAL_DMA_Start_IT+0x4b4>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d022      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a6a      	ldr	r2, [pc, #424]	; (80088b0 <HAL_DMA_Start_IT+0x4b8>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d01d      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a68      	ldr	r2, [pc, #416]	; (80088b4 <HAL_DMA_Start_IT+0x4bc>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d018      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a67      	ldr	r2, [pc, #412]	; (80088b8 <HAL_DMA_Start_IT+0x4c0>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d013      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a65      	ldr	r2, [pc, #404]	; (80088bc <HAL_DMA_Start_IT+0x4c4>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00e      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a64      	ldr	r2, [pc, #400]	; (80088c0 <HAL_DMA_Start_IT+0x4c8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d009      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a62      	ldr	r2, [pc, #392]	; (80088c4 <HAL_DMA_Start_IT+0x4cc>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d004      	beq.n	8008748 <HAL_DMA_Start_IT+0x350>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a61      	ldr	r2, [pc, #388]	; (80088c8 <HAL_DMA_Start_IT+0x4d0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d101      	bne.n	800874c <HAL_DMA_Start_IT+0x354>
 8008748:	2301      	movs	r3, #1
 800874a:	e000      	b.n	800874e <HAL_DMA_Start_IT+0x356>
 800874c:	2300      	movs	r3, #0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01a      	beq.n	8008788 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800876e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008786:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a37      	ldr	r2, [pc, #220]	; (800886c <HAL_DMA_Start_IT+0x474>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d04a      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a36      	ldr	r2, [pc, #216]	; (8008870 <HAL_DMA_Start_IT+0x478>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d045      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a34      	ldr	r2, [pc, #208]	; (8008874 <HAL_DMA_Start_IT+0x47c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d040      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a33      	ldr	r2, [pc, #204]	; (8008878 <HAL_DMA_Start_IT+0x480>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d03b      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a31      	ldr	r2, [pc, #196]	; (800887c <HAL_DMA_Start_IT+0x484>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d036      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a30      	ldr	r2, [pc, #192]	; (8008880 <HAL_DMA_Start_IT+0x488>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d031      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a2e      	ldr	r2, [pc, #184]	; (8008884 <HAL_DMA_Start_IT+0x48c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d02c      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a2d      	ldr	r2, [pc, #180]	; (8008888 <HAL_DMA_Start_IT+0x490>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d027      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a2b      	ldr	r2, [pc, #172]	; (800888c <HAL_DMA_Start_IT+0x494>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d022      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a2a      	ldr	r2, [pc, #168]	; (8008890 <HAL_DMA_Start_IT+0x498>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d01d      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a28      	ldr	r2, [pc, #160]	; (8008894 <HAL_DMA_Start_IT+0x49c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d018      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a27      	ldr	r2, [pc, #156]	; (8008898 <HAL_DMA_Start_IT+0x4a0>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d013      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a25      	ldr	r2, [pc, #148]	; (800889c <HAL_DMA_Start_IT+0x4a4>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00e      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a24      	ldr	r2, [pc, #144]	; (80088a0 <HAL_DMA_Start_IT+0x4a8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d009      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a22      	ldr	r2, [pc, #136]	; (80088a4 <HAL_DMA_Start_IT+0x4ac>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d004      	beq.n	8008828 <HAL_DMA_Start_IT+0x430>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a21      	ldr	r2, [pc, #132]	; (80088a8 <HAL_DMA_Start_IT+0x4b0>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d108      	bne.n	800883a <HAL_DMA_Start_IT+0x442>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0201 	orr.w	r2, r2, #1
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	e012      	b.n	8008860 <HAL_DMA_Start_IT+0x468>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f042 0201 	orr.w	r2, r2, #1
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	e009      	b.n	8008860 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008852:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40020010 	.word	0x40020010
 8008870:	40020028 	.word	0x40020028
 8008874:	40020040 	.word	0x40020040
 8008878:	40020058 	.word	0x40020058
 800887c:	40020070 	.word	0x40020070
 8008880:	40020088 	.word	0x40020088
 8008884:	400200a0 	.word	0x400200a0
 8008888:	400200b8 	.word	0x400200b8
 800888c:	40020410 	.word	0x40020410
 8008890:	40020428 	.word	0x40020428
 8008894:	40020440 	.word	0x40020440
 8008898:	40020458 	.word	0x40020458
 800889c:	40020470 	.word	0x40020470
 80088a0:	40020488 	.word	0x40020488
 80088a4:	400204a0 	.word	0x400204a0
 80088a8:	400204b8 	.word	0x400204b8
 80088ac:	58025408 	.word	0x58025408
 80088b0:	5802541c 	.word	0x5802541c
 80088b4:	58025430 	.word	0x58025430
 80088b8:	58025444 	.word	0x58025444
 80088bc:	58025458 	.word	0x58025458
 80088c0:	5802546c 	.word	0x5802546c
 80088c4:	58025480 	.word	0x58025480
 80088c8:	58025494 	.word	0x58025494

080088cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80088d4:	f7fd f894 	bl	8005a00 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e2dc      	b.n	8008e9e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d008      	beq.n	8008902 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2280      	movs	r2, #128	; 0x80
 80088f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e2cd      	b.n	8008e9e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a76      	ldr	r2, [pc, #472]	; (8008ae0 <HAL_DMA_Abort+0x214>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d04a      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a74      	ldr	r2, [pc, #464]	; (8008ae4 <HAL_DMA_Abort+0x218>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d045      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a73      	ldr	r2, [pc, #460]	; (8008ae8 <HAL_DMA_Abort+0x21c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d040      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a71      	ldr	r2, [pc, #452]	; (8008aec <HAL_DMA_Abort+0x220>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d03b      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a70      	ldr	r2, [pc, #448]	; (8008af0 <HAL_DMA_Abort+0x224>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d036      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a6e      	ldr	r2, [pc, #440]	; (8008af4 <HAL_DMA_Abort+0x228>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d031      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a6d      	ldr	r2, [pc, #436]	; (8008af8 <HAL_DMA_Abort+0x22c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d02c      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a6b      	ldr	r2, [pc, #428]	; (8008afc <HAL_DMA_Abort+0x230>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d027      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a6a      	ldr	r2, [pc, #424]	; (8008b00 <HAL_DMA_Abort+0x234>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d022      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a68      	ldr	r2, [pc, #416]	; (8008b04 <HAL_DMA_Abort+0x238>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01d      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a67      	ldr	r2, [pc, #412]	; (8008b08 <HAL_DMA_Abort+0x23c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d018      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a65      	ldr	r2, [pc, #404]	; (8008b0c <HAL_DMA_Abort+0x240>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d013      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a64      	ldr	r2, [pc, #400]	; (8008b10 <HAL_DMA_Abort+0x244>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a62      	ldr	r2, [pc, #392]	; (8008b14 <HAL_DMA_Abort+0x248>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a61      	ldr	r2, [pc, #388]	; (8008b18 <HAL_DMA_Abort+0x24c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_DMA_Abort+0xd6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a5f      	ldr	r2, [pc, #380]	; (8008b1c <HAL_DMA_Abort+0x250>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d101      	bne.n	80089a6 <HAL_DMA_Abort+0xda>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <HAL_DMA_Abort+0xdc>
 80089a6:	2300      	movs	r3, #0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d013      	beq.n	80089d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 021e 	bic.w	r2, r2, #30
 80089ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	695a      	ldr	r2, [r3, #20]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	e00a      	b.n	80089ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 020e 	bic.w	r2, r2, #14
 80089e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a3c      	ldr	r2, [pc, #240]	; (8008ae0 <HAL_DMA_Abort+0x214>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d072      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a3a      	ldr	r2, [pc, #232]	; (8008ae4 <HAL_DMA_Abort+0x218>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d06d      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a39      	ldr	r2, [pc, #228]	; (8008ae8 <HAL_DMA_Abort+0x21c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d068      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a37      	ldr	r2, [pc, #220]	; (8008aec <HAL_DMA_Abort+0x220>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d063      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a36      	ldr	r2, [pc, #216]	; (8008af0 <HAL_DMA_Abort+0x224>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d05e      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a34      	ldr	r2, [pc, #208]	; (8008af4 <HAL_DMA_Abort+0x228>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d059      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a33      	ldr	r2, [pc, #204]	; (8008af8 <HAL_DMA_Abort+0x22c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d054      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a31      	ldr	r2, [pc, #196]	; (8008afc <HAL_DMA_Abort+0x230>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d04f      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a30      	ldr	r2, [pc, #192]	; (8008b00 <HAL_DMA_Abort+0x234>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d04a      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a2e      	ldr	r2, [pc, #184]	; (8008b04 <HAL_DMA_Abort+0x238>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d045      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a2d      	ldr	r2, [pc, #180]	; (8008b08 <HAL_DMA_Abort+0x23c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d040      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a2b      	ldr	r2, [pc, #172]	; (8008b0c <HAL_DMA_Abort+0x240>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d03b      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a2a      	ldr	r2, [pc, #168]	; (8008b10 <HAL_DMA_Abort+0x244>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d036      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a28      	ldr	r2, [pc, #160]	; (8008b14 <HAL_DMA_Abort+0x248>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d031      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a27      	ldr	r2, [pc, #156]	; (8008b18 <HAL_DMA_Abort+0x24c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d02c      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a25      	ldr	r2, [pc, #148]	; (8008b1c <HAL_DMA_Abort+0x250>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d027      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a24      	ldr	r2, [pc, #144]	; (8008b20 <HAL_DMA_Abort+0x254>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d022      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a22      	ldr	r2, [pc, #136]	; (8008b24 <HAL_DMA_Abort+0x258>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d01d      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a21      	ldr	r2, [pc, #132]	; (8008b28 <HAL_DMA_Abort+0x25c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d018      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a1f      	ldr	r2, [pc, #124]	; (8008b2c <HAL_DMA_Abort+0x260>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d013      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a1e      	ldr	r2, [pc, #120]	; (8008b30 <HAL_DMA_Abort+0x264>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00e      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <HAL_DMA_Abort+0x268>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d009      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <HAL_DMA_Abort+0x26c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d004      	beq.n	8008ada <HAL_DMA_Abort+0x20e>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a19      	ldr	r2, [pc, #100]	; (8008b3c <HAL_DMA_Abort+0x270>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d132      	bne.n	8008b40 <HAL_DMA_Abort+0x274>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e031      	b.n	8008b42 <HAL_DMA_Abort+0x276>
 8008ade:	bf00      	nop
 8008ae0:	40020010 	.word	0x40020010
 8008ae4:	40020028 	.word	0x40020028
 8008ae8:	40020040 	.word	0x40020040
 8008aec:	40020058 	.word	0x40020058
 8008af0:	40020070 	.word	0x40020070
 8008af4:	40020088 	.word	0x40020088
 8008af8:	400200a0 	.word	0x400200a0
 8008afc:	400200b8 	.word	0x400200b8
 8008b00:	40020410 	.word	0x40020410
 8008b04:	40020428 	.word	0x40020428
 8008b08:	40020440 	.word	0x40020440
 8008b0c:	40020458 	.word	0x40020458
 8008b10:	40020470 	.word	0x40020470
 8008b14:	40020488 	.word	0x40020488
 8008b18:	400204a0 	.word	0x400204a0
 8008b1c:	400204b8 	.word	0x400204b8
 8008b20:	58025408 	.word	0x58025408
 8008b24:	5802541c 	.word	0x5802541c
 8008b28:	58025430 	.word	0x58025430
 8008b2c:	58025444 	.word	0x58025444
 8008b30:	58025458 	.word	0x58025458
 8008b34:	5802546c 	.word	0x5802546c
 8008b38:	58025480 	.word	0x58025480
 8008b3c:	58025494 	.word	0x58025494
 8008b40:	2300      	movs	r3, #0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a6d      	ldr	r2, [pc, #436]	; (8008d10 <HAL_DMA_Abort+0x444>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d04a      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a6b      	ldr	r2, [pc, #428]	; (8008d14 <HAL_DMA_Abort+0x448>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d045      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a6a      	ldr	r2, [pc, #424]	; (8008d18 <HAL_DMA_Abort+0x44c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d040      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a68      	ldr	r2, [pc, #416]	; (8008d1c <HAL_DMA_Abort+0x450>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d03b      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a67      	ldr	r2, [pc, #412]	; (8008d20 <HAL_DMA_Abort+0x454>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d036      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a65      	ldr	r2, [pc, #404]	; (8008d24 <HAL_DMA_Abort+0x458>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d031      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a64      	ldr	r2, [pc, #400]	; (8008d28 <HAL_DMA_Abort+0x45c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d02c      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a62      	ldr	r2, [pc, #392]	; (8008d2c <HAL_DMA_Abort+0x460>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d027      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a61      	ldr	r2, [pc, #388]	; (8008d30 <HAL_DMA_Abort+0x464>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d022      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a5f      	ldr	r2, [pc, #380]	; (8008d34 <HAL_DMA_Abort+0x468>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d01d      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a5e      	ldr	r2, [pc, #376]	; (8008d38 <HAL_DMA_Abort+0x46c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d018      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a5c      	ldr	r2, [pc, #368]	; (8008d3c <HAL_DMA_Abort+0x470>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d013      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a5b      	ldr	r2, [pc, #364]	; (8008d40 <HAL_DMA_Abort+0x474>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d00e      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a59      	ldr	r2, [pc, #356]	; (8008d44 <HAL_DMA_Abort+0x478>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d009      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a58      	ldr	r2, [pc, #352]	; (8008d48 <HAL_DMA_Abort+0x47c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d004      	beq.n	8008bf6 <HAL_DMA_Abort+0x32a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a56      	ldr	r2, [pc, #344]	; (8008d4c <HAL_DMA_Abort+0x480>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d108      	bne.n	8008c08 <HAL_DMA_Abort+0x33c>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 0201 	bic.w	r2, r2, #1
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	e007      	b.n	8008c18 <HAL_DMA_Abort+0x34c>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0201 	bic.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008c18:	e013      	b.n	8008c42 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c1a:	f7fc fef1 	bl	8005a00 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	2b05      	cmp	r3, #5
 8008c26:	d90c      	bls.n	8008c42 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2203      	movs	r2, #3
 8008c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e12d      	b.n	8008e9e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e5      	bne.n	8008c1a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a2f      	ldr	r2, [pc, #188]	; (8008d10 <HAL_DMA_Abort+0x444>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d04a      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a2d      	ldr	r2, [pc, #180]	; (8008d14 <HAL_DMA_Abort+0x448>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d045      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a2c      	ldr	r2, [pc, #176]	; (8008d18 <HAL_DMA_Abort+0x44c>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d040      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a2a      	ldr	r2, [pc, #168]	; (8008d1c <HAL_DMA_Abort+0x450>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d03b      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a29      	ldr	r2, [pc, #164]	; (8008d20 <HAL_DMA_Abort+0x454>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d036      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a27      	ldr	r2, [pc, #156]	; (8008d24 <HAL_DMA_Abort+0x458>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d031      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a26      	ldr	r2, [pc, #152]	; (8008d28 <HAL_DMA_Abort+0x45c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d02c      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a24      	ldr	r2, [pc, #144]	; (8008d2c <HAL_DMA_Abort+0x460>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d027      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a23      	ldr	r2, [pc, #140]	; (8008d30 <HAL_DMA_Abort+0x464>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d022      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a21      	ldr	r2, [pc, #132]	; (8008d34 <HAL_DMA_Abort+0x468>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d01d      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a20      	ldr	r2, [pc, #128]	; (8008d38 <HAL_DMA_Abort+0x46c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d018      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a1e      	ldr	r2, [pc, #120]	; (8008d3c <HAL_DMA_Abort+0x470>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d013      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a1d      	ldr	r2, [pc, #116]	; (8008d40 <HAL_DMA_Abort+0x474>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00e      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a1b      	ldr	r2, [pc, #108]	; (8008d44 <HAL_DMA_Abort+0x478>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d009      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a1a      	ldr	r2, [pc, #104]	; (8008d48 <HAL_DMA_Abort+0x47c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d004      	beq.n	8008cee <HAL_DMA_Abort+0x422>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <HAL_DMA_Abort+0x480>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d101      	bne.n	8008cf2 <HAL_DMA_Abort+0x426>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e000      	b.n	8008cf4 <HAL_DMA_Abort+0x428>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d02b      	beq.n	8008d50 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d02:	f003 031f 	and.w	r3, r3, #31
 8008d06:	223f      	movs	r2, #63	; 0x3f
 8008d08:	409a      	lsls	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	609a      	str	r2, [r3, #8]
 8008d0e:	e02a      	b.n	8008d66 <HAL_DMA_Abort+0x49a>
 8008d10:	40020010 	.word	0x40020010
 8008d14:	40020028 	.word	0x40020028
 8008d18:	40020040 	.word	0x40020040
 8008d1c:	40020058 	.word	0x40020058
 8008d20:	40020070 	.word	0x40020070
 8008d24:	40020088 	.word	0x40020088
 8008d28:	400200a0 	.word	0x400200a0
 8008d2c:	400200b8 	.word	0x400200b8
 8008d30:	40020410 	.word	0x40020410
 8008d34:	40020428 	.word	0x40020428
 8008d38:	40020440 	.word	0x40020440
 8008d3c:	40020458 	.word	0x40020458
 8008d40:	40020470 	.word	0x40020470
 8008d44:	40020488 	.word	0x40020488
 8008d48:	400204a0 	.word	0x400204a0
 8008d4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d54:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5a:	f003 031f 	and.w	r3, r3, #31
 8008d5e:	2201      	movs	r2, #1
 8008d60:	409a      	lsls	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a4f      	ldr	r2, [pc, #316]	; (8008ea8 <HAL_DMA_Abort+0x5dc>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d072      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a4d      	ldr	r2, [pc, #308]	; (8008eac <HAL_DMA_Abort+0x5e0>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d06d      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a4c      	ldr	r2, [pc, #304]	; (8008eb0 <HAL_DMA_Abort+0x5e4>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d068      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a4a      	ldr	r2, [pc, #296]	; (8008eb4 <HAL_DMA_Abort+0x5e8>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d063      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a49      	ldr	r2, [pc, #292]	; (8008eb8 <HAL_DMA_Abort+0x5ec>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d05e      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a47      	ldr	r2, [pc, #284]	; (8008ebc <HAL_DMA_Abort+0x5f0>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d059      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a46      	ldr	r2, [pc, #280]	; (8008ec0 <HAL_DMA_Abort+0x5f4>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d054      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a44      	ldr	r2, [pc, #272]	; (8008ec4 <HAL_DMA_Abort+0x5f8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d04f      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a43      	ldr	r2, [pc, #268]	; (8008ec8 <HAL_DMA_Abort+0x5fc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d04a      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a41      	ldr	r2, [pc, #260]	; (8008ecc <HAL_DMA_Abort+0x600>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d045      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a40      	ldr	r2, [pc, #256]	; (8008ed0 <HAL_DMA_Abort+0x604>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d040      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a3e      	ldr	r2, [pc, #248]	; (8008ed4 <HAL_DMA_Abort+0x608>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d03b      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a3d      	ldr	r2, [pc, #244]	; (8008ed8 <HAL_DMA_Abort+0x60c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d036      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a3b      	ldr	r2, [pc, #236]	; (8008edc <HAL_DMA_Abort+0x610>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d031      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a3a      	ldr	r2, [pc, #232]	; (8008ee0 <HAL_DMA_Abort+0x614>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d02c      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a38      	ldr	r2, [pc, #224]	; (8008ee4 <HAL_DMA_Abort+0x618>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d027      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a37      	ldr	r2, [pc, #220]	; (8008ee8 <HAL_DMA_Abort+0x61c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d022      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a35      	ldr	r2, [pc, #212]	; (8008eec <HAL_DMA_Abort+0x620>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d01d      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a34      	ldr	r2, [pc, #208]	; (8008ef0 <HAL_DMA_Abort+0x624>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d018      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a32      	ldr	r2, [pc, #200]	; (8008ef4 <HAL_DMA_Abort+0x628>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a31      	ldr	r2, [pc, #196]	; (8008ef8 <HAL_DMA_Abort+0x62c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00e      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a2f      	ldr	r2, [pc, #188]	; (8008efc <HAL_DMA_Abort+0x630>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d009      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a2e      	ldr	r2, [pc, #184]	; (8008f00 <HAL_DMA_Abort+0x634>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <HAL_DMA_Abort+0x58a>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a2c      	ldr	r2, [pc, #176]	; (8008f04 <HAL_DMA_Abort+0x638>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d101      	bne.n	8008e5a <HAL_DMA_Abort+0x58e>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <HAL_DMA_Abort+0x590>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d015      	beq.n	8008e8c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e68:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00c      	beq.n	8008e8c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e80:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008e8a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	40020010 	.word	0x40020010
 8008eac:	40020028 	.word	0x40020028
 8008eb0:	40020040 	.word	0x40020040
 8008eb4:	40020058 	.word	0x40020058
 8008eb8:	40020070 	.word	0x40020070
 8008ebc:	40020088 	.word	0x40020088
 8008ec0:	400200a0 	.word	0x400200a0
 8008ec4:	400200b8 	.word	0x400200b8
 8008ec8:	40020410 	.word	0x40020410
 8008ecc:	40020428 	.word	0x40020428
 8008ed0:	40020440 	.word	0x40020440
 8008ed4:	40020458 	.word	0x40020458
 8008ed8:	40020470 	.word	0x40020470
 8008edc:	40020488 	.word	0x40020488
 8008ee0:	400204a0 	.word	0x400204a0
 8008ee4:	400204b8 	.word	0x400204b8
 8008ee8:	58025408 	.word	0x58025408
 8008eec:	5802541c 	.word	0x5802541c
 8008ef0:	58025430 	.word	0x58025430
 8008ef4:	58025444 	.word	0x58025444
 8008ef8:	58025458 	.word	0x58025458
 8008efc:	5802546c 	.word	0x5802546c
 8008f00:	58025480 	.word	0x58025480
 8008f04:	58025494 	.word	0x58025494

08008f08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e237      	b.n	800938a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d004      	beq.n	8008f30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2280      	movs	r2, #128	; 0x80
 8008f2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e22c      	b.n	800938a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a5c      	ldr	r2, [pc, #368]	; (80090a8 <HAL_DMA_Abort_IT+0x1a0>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d04a      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a5b      	ldr	r2, [pc, #364]	; (80090ac <HAL_DMA_Abort_IT+0x1a4>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d045      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a59      	ldr	r2, [pc, #356]	; (80090b0 <HAL_DMA_Abort_IT+0x1a8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d040      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a58      	ldr	r2, [pc, #352]	; (80090b4 <HAL_DMA_Abort_IT+0x1ac>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d03b      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a56      	ldr	r2, [pc, #344]	; (80090b8 <HAL_DMA_Abort_IT+0x1b0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d036      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a55      	ldr	r2, [pc, #340]	; (80090bc <HAL_DMA_Abort_IT+0x1b4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d031      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a53      	ldr	r2, [pc, #332]	; (80090c0 <HAL_DMA_Abort_IT+0x1b8>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d02c      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a52      	ldr	r2, [pc, #328]	; (80090c4 <HAL_DMA_Abort_IT+0x1bc>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d027      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a50      	ldr	r2, [pc, #320]	; (80090c8 <HAL_DMA_Abort_IT+0x1c0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d022      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a4f      	ldr	r2, [pc, #316]	; (80090cc <HAL_DMA_Abort_IT+0x1c4>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d01d      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a4d      	ldr	r2, [pc, #308]	; (80090d0 <HAL_DMA_Abort_IT+0x1c8>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d018      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a4c      	ldr	r2, [pc, #304]	; (80090d4 <HAL_DMA_Abort_IT+0x1cc>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d013      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a4a      	ldr	r2, [pc, #296]	; (80090d8 <HAL_DMA_Abort_IT+0x1d0>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d00e      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a49      	ldr	r2, [pc, #292]	; (80090dc <HAL_DMA_Abort_IT+0x1d4>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d009      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a47      	ldr	r2, [pc, #284]	; (80090e0 <HAL_DMA_Abort_IT+0x1d8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d004      	beq.n	8008fd0 <HAL_DMA_Abort_IT+0xc8>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a46      	ldr	r2, [pc, #280]	; (80090e4 <HAL_DMA_Abort_IT+0x1dc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d101      	bne.n	8008fd4 <HAL_DMA_Abort_IT+0xcc>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e000      	b.n	8008fd6 <HAL_DMA_Abort_IT+0xce>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 8086 	beq.w	80090e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2204      	movs	r2, #4
 8008fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a2f      	ldr	r2, [pc, #188]	; (80090a8 <HAL_DMA_Abort_IT+0x1a0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d04a      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a2e      	ldr	r2, [pc, #184]	; (80090ac <HAL_DMA_Abort_IT+0x1a4>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d045      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a2c      	ldr	r2, [pc, #176]	; (80090b0 <HAL_DMA_Abort_IT+0x1a8>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d040      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a2b      	ldr	r2, [pc, #172]	; (80090b4 <HAL_DMA_Abort_IT+0x1ac>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d03b      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a29      	ldr	r2, [pc, #164]	; (80090b8 <HAL_DMA_Abort_IT+0x1b0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d036      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a28      	ldr	r2, [pc, #160]	; (80090bc <HAL_DMA_Abort_IT+0x1b4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d031      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a26      	ldr	r2, [pc, #152]	; (80090c0 <HAL_DMA_Abort_IT+0x1b8>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d02c      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a25      	ldr	r2, [pc, #148]	; (80090c4 <HAL_DMA_Abort_IT+0x1bc>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d027      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a23      	ldr	r2, [pc, #140]	; (80090c8 <HAL_DMA_Abort_IT+0x1c0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d022      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a22      	ldr	r2, [pc, #136]	; (80090cc <HAL_DMA_Abort_IT+0x1c4>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d01d      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a20      	ldr	r2, [pc, #128]	; (80090d0 <HAL_DMA_Abort_IT+0x1c8>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d018      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1f      	ldr	r2, [pc, #124]	; (80090d4 <HAL_DMA_Abort_IT+0x1cc>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d013      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1d      	ldr	r2, [pc, #116]	; (80090d8 <HAL_DMA_Abort_IT+0x1d0>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d00e      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1c      	ldr	r2, [pc, #112]	; (80090dc <HAL_DMA_Abort_IT+0x1d4>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d009      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1a      	ldr	r2, [pc, #104]	; (80090e0 <HAL_DMA_Abort_IT+0x1d8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d004      	beq.n	8009084 <HAL_DMA_Abort_IT+0x17c>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a19      	ldr	r2, [pc, #100]	; (80090e4 <HAL_DMA_Abort_IT+0x1dc>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d108      	bne.n	8009096 <HAL_DMA_Abort_IT+0x18e>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0201 	bic.w	r2, r2, #1
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	e178      	b.n	8009388 <HAL_DMA_Abort_IT+0x480>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	e16f      	b.n	8009388 <HAL_DMA_Abort_IT+0x480>
 80090a8:	40020010 	.word	0x40020010
 80090ac:	40020028 	.word	0x40020028
 80090b0:	40020040 	.word	0x40020040
 80090b4:	40020058 	.word	0x40020058
 80090b8:	40020070 	.word	0x40020070
 80090bc:	40020088 	.word	0x40020088
 80090c0:	400200a0 	.word	0x400200a0
 80090c4:	400200b8 	.word	0x400200b8
 80090c8:	40020410 	.word	0x40020410
 80090cc:	40020428 	.word	0x40020428
 80090d0:	40020440 	.word	0x40020440
 80090d4:	40020458 	.word	0x40020458
 80090d8:	40020470 	.word	0x40020470
 80090dc:	40020488 	.word	0x40020488
 80090e0:	400204a0 	.word	0x400204a0
 80090e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 020e 	bic.w	r2, r2, #14
 80090f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a6c      	ldr	r2, [pc, #432]	; (80092b0 <HAL_DMA_Abort_IT+0x3a8>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d04a      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a6b      	ldr	r2, [pc, #428]	; (80092b4 <HAL_DMA_Abort_IT+0x3ac>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d045      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a69      	ldr	r2, [pc, #420]	; (80092b8 <HAL_DMA_Abort_IT+0x3b0>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d040      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a68      	ldr	r2, [pc, #416]	; (80092bc <HAL_DMA_Abort_IT+0x3b4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d03b      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a66      	ldr	r2, [pc, #408]	; (80092c0 <HAL_DMA_Abort_IT+0x3b8>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d036      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a65      	ldr	r2, [pc, #404]	; (80092c4 <HAL_DMA_Abort_IT+0x3bc>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d031      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a63      	ldr	r2, [pc, #396]	; (80092c8 <HAL_DMA_Abort_IT+0x3c0>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d02c      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a62      	ldr	r2, [pc, #392]	; (80092cc <HAL_DMA_Abort_IT+0x3c4>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d027      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a60      	ldr	r2, [pc, #384]	; (80092d0 <HAL_DMA_Abort_IT+0x3c8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d022      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a5f      	ldr	r2, [pc, #380]	; (80092d4 <HAL_DMA_Abort_IT+0x3cc>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d01d      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a5d      	ldr	r2, [pc, #372]	; (80092d8 <HAL_DMA_Abort_IT+0x3d0>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d018      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a5c      	ldr	r2, [pc, #368]	; (80092dc <HAL_DMA_Abort_IT+0x3d4>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d013      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a5a      	ldr	r2, [pc, #360]	; (80092e0 <HAL_DMA_Abort_IT+0x3d8>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00e      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a59      	ldr	r2, [pc, #356]	; (80092e4 <HAL_DMA_Abort_IT+0x3dc>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d009      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a57      	ldr	r2, [pc, #348]	; (80092e8 <HAL_DMA_Abort_IT+0x3e0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <HAL_DMA_Abort_IT+0x290>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a56      	ldr	r2, [pc, #344]	; (80092ec <HAL_DMA_Abort_IT+0x3e4>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d108      	bne.n	80091aa <HAL_DMA_Abort_IT+0x2a2>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0201 	bic.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	e007      	b.n	80091ba <HAL_DMA_Abort_IT+0x2b2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 0201 	bic.w	r2, r2, #1
 80091b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a3c      	ldr	r2, [pc, #240]	; (80092b0 <HAL_DMA_Abort_IT+0x3a8>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d072      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a3a      	ldr	r2, [pc, #232]	; (80092b4 <HAL_DMA_Abort_IT+0x3ac>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d06d      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a39      	ldr	r2, [pc, #228]	; (80092b8 <HAL_DMA_Abort_IT+0x3b0>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d068      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a37      	ldr	r2, [pc, #220]	; (80092bc <HAL_DMA_Abort_IT+0x3b4>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d063      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a36      	ldr	r2, [pc, #216]	; (80092c0 <HAL_DMA_Abort_IT+0x3b8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d05e      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a34      	ldr	r2, [pc, #208]	; (80092c4 <HAL_DMA_Abort_IT+0x3bc>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d059      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a33      	ldr	r2, [pc, #204]	; (80092c8 <HAL_DMA_Abort_IT+0x3c0>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d054      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a31      	ldr	r2, [pc, #196]	; (80092cc <HAL_DMA_Abort_IT+0x3c4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d04f      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a30      	ldr	r2, [pc, #192]	; (80092d0 <HAL_DMA_Abort_IT+0x3c8>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d04a      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a2e      	ldr	r2, [pc, #184]	; (80092d4 <HAL_DMA_Abort_IT+0x3cc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d045      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a2d      	ldr	r2, [pc, #180]	; (80092d8 <HAL_DMA_Abort_IT+0x3d0>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d040      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a2b      	ldr	r2, [pc, #172]	; (80092dc <HAL_DMA_Abort_IT+0x3d4>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d03b      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a2a      	ldr	r2, [pc, #168]	; (80092e0 <HAL_DMA_Abort_IT+0x3d8>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d036      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a28      	ldr	r2, [pc, #160]	; (80092e4 <HAL_DMA_Abort_IT+0x3dc>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d031      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a27      	ldr	r2, [pc, #156]	; (80092e8 <HAL_DMA_Abort_IT+0x3e0>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d02c      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a25      	ldr	r2, [pc, #148]	; (80092ec <HAL_DMA_Abort_IT+0x3e4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d027      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a24      	ldr	r2, [pc, #144]	; (80092f0 <HAL_DMA_Abort_IT+0x3e8>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d022      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a22      	ldr	r2, [pc, #136]	; (80092f4 <HAL_DMA_Abort_IT+0x3ec>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d01d      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a21      	ldr	r2, [pc, #132]	; (80092f8 <HAL_DMA_Abort_IT+0x3f0>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d018      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a1f      	ldr	r2, [pc, #124]	; (80092fc <HAL_DMA_Abort_IT+0x3f4>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d013      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a1e      	ldr	r2, [pc, #120]	; (8009300 <HAL_DMA_Abort_IT+0x3f8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d00e      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a1c      	ldr	r2, [pc, #112]	; (8009304 <HAL_DMA_Abort_IT+0x3fc>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d009      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a1b      	ldr	r2, [pc, #108]	; (8009308 <HAL_DMA_Abort_IT+0x400>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d004      	beq.n	80092aa <HAL_DMA_Abort_IT+0x3a2>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a19      	ldr	r2, [pc, #100]	; (800930c <HAL_DMA_Abort_IT+0x404>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d132      	bne.n	8009310 <HAL_DMA_Abort_IT+0x408>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e031      	b.n	8009312 <HAL_DMA_Abort_IT+0x40a>
 80092ae:	bf00      	nop
 80092b0:	40020010 	.word	0x40020010
 80092b4:	40020028 	.word	0x40020028
 80092b8:	40020040 	.word	0x40020040
 80092bc:	40020058 	.word	0x40020058
 80092c0:	40020070 	.word	0x40020070
 80092c4:	40020088 	.word	0x40020088
 80092c8:	400200a0 	.word	0x400200a0
 80092cc:	400200b8 	.word	0x400200b8
 80092d0:	40020410 	.word	0x40020410
 80092d4:	40020428 	.word	0x40020428
 80092d8:	40020440 	.word	0x40020440
 80092dc:	40020458 	.word	0x40020458
 80092e0:	40020470 	.word	0x40020470
 80092e4:	40020488 	.word	0x40020488
 80092e8:	400204a0 	.word	0x400204a0
 80092ec:	400204b8 	.word	0x400204b8
 80092f0:	58025408 	.word	0x58025408
 80092f4:	5802541c 	.word	0x5802541c
 80092f8:	58025430 	.word	0x58025430
 80092fc:	58025444 	.word	0x58025444
 8009300:	58025458 	.word	0x58025458
 8009304:	5802546c 	.word	0x5802546c
 8009308:	58025480 	.word	0x58025480
 800930c:	58025494 	.word	0x58025494
 8009310:	2300      	movs	r3, #0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d028      	beq.n	8009368 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009324:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009330:	f003 031f 	and.w	r3, r3, #31
 8009334:	2201      	movs	r2, #1
 8009336:	409a      	lsls	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009344:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800935c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009366:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop

08009394 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08a      	sub	sp, #40	; 0x28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80093a0:	4b67      	ldr	r3, [pc, #412]	; (8009540 <HAL_DMA_IRQHandler+0x1ac>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a67      	ldr	r2, [pc, #412]	; (8009544 <HAL_DMA_IRQHandler+0x1b0>)
 80093a6:	fba2 2303 	umull	r2, r3, r2, r3
 80093aa:	0a9b      	lsrs	r3, r3, #10
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a5f      	ldr	r2, [pc, #380]	; (8009548 <HAL_DMA_IRQHandler+0x1b4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d04a      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a5d      	ldr	r2, [pc, #372]	; (800954c <HAL_DMA_IRQHandler+0x1b8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d045      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a5c      	ldr	r2, [pc, #368]	; (8009550 <HAL_DMA_IRQHandler+0x1bc>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d040      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a5a      	ldr	r2, [pc, #360]	; (8009554 <HAL_DMA_IRQHandler+0x1c0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d03b      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a59      	ldr	r2, [pc, #356]	; (8009558 <HAL_DMA_IRQHandler+0x1c4>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d036      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a57      	ldr	r2, [pc, #348]	; (800955c <HAL_DMA_IRQHandler+0x1c8>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d031      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a56      	ldr	r2, [pc, #344]	; (8009560 <HAL_DMA_IRQHandler+0x1cc>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d02c      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a54      	ldr	r2, [pc, #336]	; (8009564 <HAL_DMA_IRQHandler+0x1d0>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d027      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a53      	ldr	r2, [pc, #332]	; (8009568 <HAL_DMA_IRQHandler+0x1d4>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d022      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a51      	ldr	r2, [pc, #324]	; (800956c <HAL_DMA_IRQHandler+0x1d8>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d01d      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a50      	ldr	r2, [pc, #320]	; (8009570 <HAL_DMA_IRQHandler+0x1dc>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d018      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a4e      	ldr	r2, [pc, #312]	; (8009574 <HAL_DMA_IRQHandler+0x1e0>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d013      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a4d      	ldr	r2, [pc, #308]	; (8009578 <HAL_DMA_IRQHandler+0x1e4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00e      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a4b      	ldr	r2, [pc, #300]	; (800957c <HAL_DMA_IRQHandler+0x1e8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d009      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a4a      	ldr	r2, [pc, #296]	; (8009580 <HAL_DMA_IRQHandler+0x1ec>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d004      	beq.n	8009466 <HAL_DMA_IRQHandler+0xd2>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a48      	ldr	r2, [pc, #288]	; (8009584 <HAL_DMA_IRQHandler+0x1f0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d101      	bne.n	800946a <HAL_DMA_IRQHandler+0xd6>
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <HAL_DMA_IRQHandler+0xd8>
 800946a:	2300      	movs	r3, #0
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 842b 	beq.w	8009cc8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009476:	f003 031f 	and.w	r3, r3, #31
 800947a:	2208      	movs	r2, #8
 800947c:	409a      	lsls	r2, r3
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	4013      	ands	r3, r2
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80a2 	beq.w	80095cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a2e      	ldr	r2, [pc, #184]	; (8009548 <HAL_DMA_IRQHandler+0x1b4>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d04a      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a2d      	ldr	r2, [pc, #180]	; (800954c <HAL_DMA_IRQHandler+0x1b8>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d045      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a2b      	ldr	r2, [pc, #172]	; (8009550 <HAL_DMA_IRQHandler+0x1bc>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d040      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a2a      	ldr	r2, [pc, #168]	; (8009554 <HAL_DMA_IRQHandler+0x1c0>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d03b      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a28      	ldr	r2, [pc, #160]	; (8009558 <HAL_DMA_IRQHandler+0x1c4>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d036      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a27      	ldr	r2, [pc, #156]	; (800955c <HAL_DMA_IRQHandler+0x1c8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d031      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a25      	ldr	r2, [pc, #148]	; (8009560 <HAL_DMA_IRQHandler+0x1cc>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d02c      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a24      	ldr	r2, [pc, #144]	; (8009564 <HAL_DMA_IRQHandler+0x1d0>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d027      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a22      	ldr	r2, [pc, #136]	; (8009568 <HAL_DMA_IRQHandler+0x1d4>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d022      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a21      	ldr	r2, [pc, #132]	; (800956c <HAL_DMA_IRQHandler+0x1d8>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d01d      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a1f      	ldr	r2, [pc, #124]	; (8009570 <HAL_DMA_IRQHandler+0x1dc>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d018      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a1e      	ldr	r2, [pc, #120]	; (8009574 <HAL_DMA_IRQHandler+0x1e0>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d013      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a1c      	ldr	r2, [pc, #112]	; (8009578 <HAL_DMA_IRQHandler+0x1e4>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d00e      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a1b      	ldr	r2, [pc, #108]	; (800957c <HAL_DMA_IRQHandler+0x1e8>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d009      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a19      	ldr	r2, [pc, #100]	; (8009580 <HAL_DMA_IRQHandler+0x1ec>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d004      	beq.n	8009528 <HAL_DMA_IRQHandler+0x194>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a18      	ldr	r2, [pc, #96]	; (8009584 <HAL_DMA_IRQHandler+0x1f0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d12f      	bne.n	8009588 <HAL_DMA_IRQHandler+0x1f4>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	2b00      	cmp	r3, #0
 8009534:	bf14      	ite	ne
 8009536:	2301      	movne	r3, #1
 8009538:	2300      	moveq	r3, #0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	e02e      	b.n	800959c <HAL_DMA_IRQHandler+0x208>
 800953e:	bf00      	nop
 8009540:	240000bc 	.word	0x240000bc
 8009544:	1b4e81b5 	.word	0x1b4e81b5
 8009548:	40020010 	.word	0x40020010
 800954c:	40020028 	.word	0x40020028
 8009550:	40020040 	.word	0x40020040
 8009554:	40020058 	.word	0x40020058
 8009558:	40020070 	.word	0x40020070
 800955c:	40020088 	.word	0x40020088
 8009560:	400200a0 	.word	0x400200a0
 8009564:	400200b8 	.word	0x400200b8
 8009568:	40020410 	.word	0x40020410
 800956c:	40020428 	.word	0x40020428
 8009570:	40020440 	.word	0x40020440
 8009574:	40020458 	.word	0x40020458
 8009578:	40020470 	.word	0x40020470
 800957c:	40020488 	.word	0x40020488
 8009580:	400204a0 	.word	0x400204a0
 8009584:	400204b8 	.word	0x400204b8
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0308 	and.w	r3, r3, #8
 8009592:	2b00      	cmp	r3, #0
 8009594:	bf14      	ite	ne
 8009596:	2301      	movne	r3, #1
 8009598:	2300      	moveq	r3, #0
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d015      	beq.n	80095cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0204 	bic.w	r2, r2, #4
 80095ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b4:	f003 031f 	and.w	r3, r3, #31
 80095b8:	2208      	movs	r2, #8
 80095ba:	409a      	lsls	r2, r3
 80095bc:	6a3b      	ldr	r3, [r7, #32]
 80095be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c4:	f043 0201 	orr.w	r2, r3, #1
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095d0:	f003 031f 	and.w	r3, r3, #31
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	fa22 f303 	lsr.w	r3, r2, r3
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d06e      	beq.n	80096c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a69      	ldr	r2, [pc, #420]	; (800978c <HAL_DMA_IRQHandler+0x3f8>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d04a      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a67      	ldr	r2, [pc, #412]	; (8009790 <HAL_DMA_IRQHandler+0x3fc>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d045      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a66      	ldr	r2, [pc, #408]	; (8009794 <HAL_DMA_IRQHandler+0x400>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d040      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a64      	ldr	r2, [pc, #400]	; (8009798 <HAL_DMA_IRQHandler+0x404>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d03b      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a63      	ldr	r2, [pc, #396]	; (800979c <HAL_DMA_IRQHandler+0x408>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d036      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a61      	ldr	r2, [pc, #388]	; (80097a0 <HAL_DMA_IRQHandler+0x40c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d031      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a60      	ldr	r2, [pc, #384]	; (80097a4 <HAL_DMA_IRQHandler+0x410>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d02c      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a5e      	ldr	r2, [pc, #376]	; (80097a8 <HAL_DMA_IRQHandler+0x414>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d027      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a5d      	ldr	r2, [pc, #372]	; (80097ac <HAL_DMA_IRQHandler+0x418>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d022      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a5b      	ldr	r2, [pc, #364]	; (80097b0 <HAL_DMA_IRQHandler+0x41c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d01d      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a5a      	ldr	r2, [pc, #360]	; (80097b4 <HAL_DMA_IRQHandler+0x420>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d018      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a58      	ldr	r2, [pc, #352]	; (80097b8 <HAL_DMA_IRQHandler+0x424>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d013      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a57      	ldr	r2, [pc, #348]	; (80097bc <HAL_DMA_IRQHandler+0x428>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d00e      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a55      	ldr	r2, [pc, #340]	; (80097c0 <HAL_DMA_IRQHandler+0x42c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d009      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a54      	ldr	r2, [pc, #336]	; (80097c4 <HAL_DMA_IRQHandler+0x430>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d004      	beq.n	8009682 <HAL_DMA_IRQHandler+0x2ee>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a52      	ldr	r2, [pc, #328]	; (80097c8 <HAL_DMA_IRQHandler+0x434>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d10a      	bne.n	8009698 <HAL_DMA_IRQHandler+0x304>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968c:	2b00      	cmp	r3, #0
 800968e:	bf14      	ite	ne
 8009690:	2301      	movne	r3, #1
 8009692:	2300      	moveq	r3, #0
 8009694:	b2db      	uxtb	r3, r3
 8009696:	e003      	b.n	80096a0 <HAL_DMA_IRQHandler+0x30c>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2300      	movs	r3, #0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00d      	beq.n	80096c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a8:	f003 031f 	and.w	r3, r3, #31
 80096ac:	2201      	movs	r2, #1
 80096ae:	409a      	lsls	r2, r3
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b8:	f043 0202 	orr.w	r2, r3, #2
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	2204      	movs	r2, #4
 80096ca:	409a      	lsls	r2, r3
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	4013      	ands	r3, r2
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 808f 	beq.w	80097f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a2c      	ldr	r2, [pc, #176]	; (800978c <HAL_DMA_IRQHandler+0x3f8>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d04a      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a2a      	ldr	r2, [pc, #168]	; (8009790 <HAL_DMA_IRQHandler+0x3fc>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d045      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a29      	ldr	r2, [pc, #164]	; (8009794 <HAL_DMA_IRQHandler+0x400>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d040      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a27      	ldr	r2, [pc, #156]	; (8009798 <HAL_DMA_IRQHandler+0x404>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d03b      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a26      	ldr	r2, [pc, #152]	; (800979c <HAL_DMA_IRQHandler+0x408>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d036      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a24      	ldr	r2, [pc, #144]	; (80097a0 <HAL_DMA_IRQHandler+0x40c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d031      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a23      	ldr	r2, [pc, #140]	; (80097a4 <HAL_DMA_IRQHandler+0x410>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d02c      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a21      	ldr	r2, [pc, #132]	; (80097a8 <HAL_DMA_IRQHandler+0x414>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d027      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a20      	ldr	r2, [pc, #128]	; (80097ac <HAL_DMA_IRQHandler+0x418>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d022      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a1e      	ldr	r2, [pc, #120]	; (80097b0 <HAL_DMA_IRQHandler+0x41c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01d      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a1d      	ldr	r2, [pc, #116]	; (80097b4 <HAL_DMA_IRQHandler+0x420>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d018      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a1b      	ldr	r2, [pc, #108]	; (80097b8 <HAL_DMA_IRQHandler+0x424>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d013      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a1a      	ldr	r2, [pc, #104]	; (80097bc <HAL_DMA_IRQHandler+0x428>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d00e      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a18      	ldr	r2, [pc, #96]	; (80097c0 <HAL_DMA_IRQHandler+0x42c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d009      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a17      	ldr	r2, [pc, #92]	; (80097c4 <HAL_DMA_IRQHandler+0x430>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d004      	beq.n	8009776 <HAL_DMA_IRQHandler+0x3e2>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a15      	ldr	r2, [pc, #84]	; (80097c8 <HAL_DMA_IRQHandler+0x434>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d12a      	bne.n	80097cc <HAL_DMA_IRQHandler+0x438>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	bf14      	ite	ne
 8009784:	2301      	movne	r3, #1
 8009786:	2300      	moveq	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	e023      	b.n	80097d4 <HAL_DMA_IRQHandler+0x440>
 800978c:	40020010 	.word	0x40020010
 8009790:	40020028 	.word	0x40020028
 8009794:	40020040 	.word	0x40020040
 8009798:	40020058 	.word	0x40020058
 800979c:	40020070 	.word	0x40020070
 80097a0:	40020088 	.word	0x40020088
 80097a4:	400200a0 	.word	0x400200a0
 80097a8:	400200b8 	.word	0x400200b8
 80097ac:	40020410 	.word	0x40020410
 80097b0:	40020428 	.word	0x40020428
 80097b4:	40020440 	.word	0x40020440
 80097b8:	40020458 	.word	0x40020458
 80097bc:	40020470 	.word	0x40020470
 80097c0:	40020488 	.word	0x40020488
 80097c4:	400204a0 	.word	0x400204a0
 80097c8:	400204b8 	.word	0x400204b8
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2300      	movs	r3, #0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00d      	beq.n	80097f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097dc:	f003 031f 	and.w	r3, r3, #31
 80097e0:	2204      	movs	r2, #4
 80097e2:	409a      	lsls	r2, r3
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ec:	f043 0204 	orr.w	r2, r3, #4
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097f8:	f003 031f 	and.w	r3, r3, #31
 80097fc:	2210      	movs	r2, #16
 80097fe:	409a      	lsls	r2, r3
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	4013      	ands	r3, r2
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 80a6 	beq.w	8009956 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a85      	ldr	r2, [pc, #532]	; (8009a24 <HAL_DMA_IRQHandler+0x690>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d04a      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a83      	ldr	r2, [pc, #524]	; (8009a28 <HAL_DMA_IRQHandler+0x694>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d045      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a82      	ldr	r2, [pc, #520]	; (8009a2c <HAL_DMA_IRQHandler+0x698>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d040      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a80      	ldr	r2, [pc, #512]	; (8009a30 <HAL_DMA_IRQHandler+0x69c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d03b      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a7f      	ldr	r2, [pc, #508]	; (8009a34 <HAL_DMA_IRQHandler+0x6a0>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d036      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a7d      	ldr	r2, [pc, #500]	; (8009a38 <HAL_DMA_IRQHandler+0x6a4>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d031      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a7c      	ldr	r2, [pc, #496]	; (8009a3c <HAL_DMA_IRQHandler+0x6a8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d02c      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a7a      	ldr	r2, [pc, #488]	; (8009a40 <HAL_DMA_IRQHandler+0x6ac>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d027      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a79      	ldr	r2, [pc, #484]	; (8009a44 <HAL_DMA_IRQHandler+0x6b0>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d022      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a77      	ldr	r2, [pc, #476]	; (8009a48 <HAL_DMA_IRQHandler+0x6b4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d01d      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a76      	ldr	r2, [pc, #472]	; (8009a4c <HAL_DMA_IRQHandler+0x6b8>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d018      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a74      	ldr	r2, [pc, #464]	; (8009a50 <HAL_DMA_IRQHandler+0x6bc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d013      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a73      	ldr	r2, [pc, #460]	; (8009a54 <HAL_DMA_IRQHandler+0x6c0>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00e      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a71      	ldr	r2, [pc, #452]	; (8009a58 <HAL_DMA_IRQHandler+0x6c4>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d009      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a70      	ldr	r2, [pc, #448]	; (8009a5c <HAL_DMA_IRQHandler+0x6c8>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d004      	beq.n	80098aa <HAL_DMA_IRQHandler+0x516>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a6e      	ldr	r2, [pc, #440]	; (8009a60 <HAL_DMA_IRQHandler+0x6cc>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d10a      	bne.n	80098c0 <HAL_DMA_IRQHandler+0x52c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0308 	and.w	r3, r3, #8
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bf14      	ite	ne
 80098b8:	2301      	movne	r3, #1
 80098ba:	2300      	moveq	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	e009      	b.n	80098d4 <HAL_DMA_IRQHandler+0x540>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bf14      	ite	ne
 80098ce:	2301      	movne	r3, #1
 80098d0:	2300      	moveq	r3, #0
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d03e      	beq.n	8009956 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098dc:	f003 031f 	and.w	r3, r3, #31
 80098e0:	2210      	movs	r2, #16
 80098e2:	409a      	lsls	r2, r3
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d018      	beq.n	8009928 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d108      	bne.n	8009916 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	2b00      	cmp	r3, #0
 800990a:	d024      	beq.n	8009956 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
 8009914:	e01f      	b.n	8009956 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01b      	beq.n	8009956 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
 8009926:	e016      	b.n	8009956 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009932:	2b00      	cmp	r3, #0
 8009934:	d107      	bne.n	8009946 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 0208 	bic.w	r2, r2, #8
 8009944:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800995a:	f003 031f 	and.w	r3, r3, #31
 800995e:	2220      	movs	r2, #32
 8009960:	409a      	lsls	r2, r3
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	4013      	ands	r3, r2
 8009966:	2b00      	cmp	r3, #0
 8009968:	f000 8110 	beq.w	8009b8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a2c      	ldr	r2, [pc, #176]	; (8009a24 <HAL_DMA_IRQHandler+0x690>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d04a      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a2b      	ldr	r2, [pc, #172]	; (8009a28 <HAL_DMA_IRQHandler+0x694>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d045      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a29      	ldr	r2, [pc, #164]	; (8009a2c <HAL_DMA_IRQHandler+0x698>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d040      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a28      	ldr	r2, [pc, #160]	; (8009a30 <HAL_DMA_IRQHandler+0x69c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d03b      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a26      	ldr	r2, [pc, #152]	; (8009a34 <HAL_DMA_IRQHandler+0x6a0>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d036      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a25      	ldr	r2, [pc, #148]	; (8009a38 <HAL_DMA_IRQHandler+0x6a4>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d031      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a23      	ldr	r2, [pc, #140]	; (8009a3c <HAL_DMA_IRQHandler+0x6a8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d02c      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a22      	ldr	r2, [pc, #136]	; (8009a40 <HAL_DMA_IRQHandler+0x6ac>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d027      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a20      	ldr	r2, [pc, #128]	; (8009a44 <HAL_DMA_IRQHandler+0x6b0>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d022      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a1f      	ldr	r2, [pc, #124]	; (8009a48 <HAL_DMA_IRQHandler+0x6b4>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d01d      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a1d      	ldr	r2, [pc, #116]	; (8009a4c <HAL_DMA_IRQHandler+0x6b8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d018      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a1c      	ldr	r2, [pc, #112]	; (8009a50 <HAL_DMA_IRQHandler+0x6bc>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d013      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a1a      	ldr	r2, [pc, #104]	; (8009a54 <HAL_DMA_IRQHandler+0x6c0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d00e      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a19      	ldr	r2, [pc, #100]	; (8009a58 <HAL_DMA_IRQHandler+0x6c4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d009      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a17      	ldr	r2, [pc, #92]	; (8009a5c <HAL_DMA_IRQHandler+0x6c8>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d004      	beq.n	8009a0c <HAL_DMA_IRQHandler+0x678>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a16      	ldr	r2, [pc, #88]	; (8009a60 <HAL_DMA_IRQHandler+0x6cc>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d12b      	bne.n	8009a64 <HAL_DMA_IRQHandler+0x6d0>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	bf14      	ite	ne
 8009a1a:	2301      	movne	r3, #1
 8009a1c:	2300      	moveq	r3, #0
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	e02a      	b.n	8009a78 <HAL_DMA_IRQHandler+0x6e4>
 8009a22:	bf00      	nop
 8009a24:	40020010 	.word	0x40020010
 8009a28:	40020028 	.word	0x40020028
 8009a2c:	40020040 	.word	0x40020040
 8009a30:	40020058 	.word	0x40020058
 8009a34:	40020070 	.word	0x40020070
 8009a38:	40020088 	.word	0x40020088
 8009a3c:	400200a0 	.word	0x400200a0
 8009a40:	400200b8 	.word	0x400200b8
 8009a44:	40020410 	.word	0x40020410
 8009a48:	40020428 	.word	0x40020428
 8009a4c:	40020440 	.word	0x40020440
 8009a50:	40020458 	.word	0x40020458
 8009a54:	40020470 	.word	0x40020470
 8009a58:	40020488 	.word	0x40020488
 8009a5c:	400204a0 	.word	0x400204a0
 8009a60:	400204b8 	.word	0x400204b8
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bf14      	ite	ne
 8009a72:	2301      	movne	r3, #1
 8009a74:	2300      	moveq	r3, #0
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 8087 	beq.w	8009b8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a82:	f003 031f 	and.w	r3, r3, #31
 8009a86:	2220      	movs	r2, #32
 8009a88:	409a      	lsls	r2, r3
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	d139      	bne.n	8009b0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0216 	bic.w	r2, r2, #22
 8009aa8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	695a      	ldr	r2, [r3, #20]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ab8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d103      	bne.n	8009aca <HAL_DMA_IRQHandler+0x736>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0208 	bic.w	r2, r2, #8
 8009ad8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ade:	f003 031f 	and.w	r3, r3, #31
 8009ae2:	223f      	movs	r2, #63	; 0x3f
 8009ae4:	409a      	lsls	r2, r3
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 834a 	beq.w	800a198 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	4798      	blx	r3
          }
          return;
 8009b0c:	e344      	b.n	800a198 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d018      	beq.n	8009b4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d108      	bne.n	8009b3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d02c      	beq.n	8009b8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	4798      	blx	r3
 8009b3a:	e027      	b.n	8009b8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d023      	beq.n	8009b8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	4798      	blx	r3
 8009b4c:	e01e      	b.n	8009b8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10f      	bne.n	8009b7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0210 	bic.w	r2, r2, #16
 8009b6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 8306 	beq.w	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 8088 	beq.w	8009cb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2204      	movs	r2, #4
 8009ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a7a      	ldr	r2, [pc, #488]	; (8009d9c <HAL_DMA_IRQHandler+0xa08>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d04a      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a79      	ldr	r2, [pc, #484]	; (8009da0 <HAL_DMA_IRQHandler+0xa0c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d045      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a77      	ldr	r2, [pc, #476]	; (8009da4 <HAL_DMA_IRQHandler+0xa10>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d040      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a76      	ldr	r2, [pc, #472]	; (8009da8 <HAL_DMA_IRQHandler+0xa14>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d03b      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a74      	ldr	r2, [pc, #464]	; (8009dac <HAL_DMA_IRQHandler+0xa18>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d036      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a73      	ldr	r2, [pc, #460]	; (8009db0 <HAL_DMA_IRQHandler+0xa1c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d031      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a71      	ldr	r2, [pc, #452]	; (8009db4 <HAL_DMA_IRQHandler+0xa20>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d02c      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a70      	ldr	r2, [pc, #448]	; (8009db8 <HAL_DMA_IRQHandler+0xa24>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d027      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a6e      	ldr	r2, [pc, #440]	; (8009dbc <HAL_DMA_IRQHandler+0xa28>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d022      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a6d      	ldr	r2, [pc, #436]	; (8009dc0 <HAL_DMA_IRQHandler+0xa2c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d01d      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a6b      	ldr	r2, [pc, #428]	; (8009dc4 <HAL_DMA_IRQHandler+0xa30>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d018      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a6a      	ldr	r2, [pc, #424]	; (8009dc8 <HAL_DMA_IRQHandler+0xa34>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d013      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a68      	ldr	r2, [pc, #416]	; (8009dcc <HAL_DMA_IRQHandler+0xa38>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00e      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a67      	ldr	r2, [pc, #412]	; (8009dd0 <HAL_DMA_IRQHandler+0xa3c>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d009      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a65      	ldr	r2, [pc, #404]	; (8009dd4 <HAL_DMA_IRQHandler+0xa40>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d004      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x8b8>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a64      	ldr	r2, [pc, #400]	; (8009dd8 <HAL_DMA_IRQHandler+0xa44>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d108      	bne.n	8009c5e <HAL_DMA_IRQHandler+0x8ca>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f022 0201 	bic.w	r2, r2, #1
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	e007      	b.n	8009c6e <HAL_DMA_IRQHandler+0x8da>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f022 0201 	bic.w	r2, r2, #1
 8009c6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3301      	adds	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d307      	bcc.n	8009c8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1f2      	bne.n	8009c6e <HAL_DMA_IRQHandler+0x8da>
 8009c88:	e000      	b.n	8009c8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009c8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2203      	movs	r2, #3
 8009c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009ca2:	e003      	b.n	8009cac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 8272 	beq.w	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
 8009cc6:	e26c      	b.n	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a43      	ldr	r2, [pc, #268]	; (8009ddc <HAL_DMA_IRQHandler+0xa48>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d022      	beq.n	8009d18 <HAL_DMA_IRQHandler+0x984>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a42      	ldr	r2, [pc, #264]	; (8009de0 <HAL_DMA_IRQHandler+0xa4c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d01d      	beq.n	8009d18 <HAL_DMA_IRQHandler+0x984>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a40      	ldr	r2, [pc, #256]	; (8009de4 <HAL_DMA_IRQHandler+0xa50>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d018      	beq.n	8009d18 <HAL_DMA_IRQHandler+0x984>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a3f      	ldr	r2, [pc, #252]	; (8009de8 <HAL_DMA_IRQHandler+0xa54>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d013      	beq.n	8009d18 <HAL_DMA_IRQHandler+0x984>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a3d      	ldr	r2, [pc, #244]	; (8009dec <HAL_DMA_IRQHandler+0xa58>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00e      	beq.n	8009d18 <HAL_DMA_IRQHandler+0x984>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a3c      	ldr	r2, [pc, #240]	; (8009df0 <HAL_DMA_IRQHandler+0xa5c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d009      	beq.n	8009d18 <HAL_DMA_IRQHandler+0x984>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a3a      	ldr	r2, [pc, #232]	; (8009df4 <HAL_DMA_IRQHandler+0xa60>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <HAL_DMA_IRQHandler+0x984>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a39      	ldr	r2, [pc, #228]	; (8009df8 <HAL_DMA_IRQHandler+0xa64>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d101      	bne.n	8009d1c <HAL_DMA_IRQHandler+0x988>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <HAL_DMA_IRQHandler+0x98a>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 823f 	beq.w	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d30:	f003 031f 	and.w	r3, r3, #31
 8009d34:	2204      	movs	r2, #4
 8009d36:	409a      	lsls	r2, r3
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80cd 	beq.w	8009edc <HAL_DMA_IRQHandler+0xb48>
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 80c7 	beq.w	8009edc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d52:	f003 031f 	and.w	r3, r3, #31
 8009d56:	2204      	movs	r2, #4
 8009d58:	409a      	lsls	r2, r3
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d049      	beq.n	8009dfc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d109      	bne.n	8009d86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 8210 	beq.w	800a19c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d84:	e20a      	b.n	800a19c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 8206 	beq.w	800a19c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d98:	e200      	b.n	800a19c <HAL_DMA_IRQHandler+0xe08>
 8009d9a:	bf00      	nop
 8009d9c:	40020010 	.word	0x40020010
 8009da0:	40020028 	.word	0x40020028
 8009da4:	40020040 	.word	0x40020040
 8009da8:	40020058 	.word	0x40020058
 8009dac:	40020070 	.word	0x40020070
 8009db0:	40020088 	.word	0x40020088
 8009db4:	400200a0 	.word	0x400200a0
 8009db8:	400200b8 	.word	0x400200b8
 8009dbc:	40020410 	.word	0x40020410
 8009dc0:	40020428 	.word	0x40020428
 8009dc4:	40020440 	.word	0x40020440
 8009dc8:	40020458 	.word	0x40020458
 8009dcc:	40020470 	.word	0x40020470
 8009dd0:	40020488 	.word	0x40020488
 8009dd4:	400204a0 	.word	0x400204a0
 8009dd8:	400204b8 	.word	0x400204b8
 8009ddc:	58025408 	.word	0x58025408
 8009de0:	5802541c 	.word	0x5802541c
 8009de4:	58025430 	.word	0x58025430
 8009de8:	58025444 	.word	0x58025444
 8009dec:	58025458 	.word	0x58025458
 8009df0:	5802546c 	.word	0x5802546c
 8009df4:	58025480 	.word	0x58025480
 8009df8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d160      	bne.n	8009ec8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a7f      	ldr	r2, [pc, #508]	; (800a008 <HAL_DMA_IRQHandler+0xc74>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d04a      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a7d      	ldr	r2, [pc, #500]	; (800a00c <HAL_DMA_IRQHandler+0xc78>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d045      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a7c      	ldr	r2, [pc, #496]	; (800a010 <HAL_DMA_IRQHandler+0xc7c>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d040      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a7a      	ldr	r2, [pc, #488]	; (800a014 <HAL_DMA_IRQHandler+0xc80>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d03b      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a79      	ldr	r2, [pc, #484]	; (800a018 <HAL_DMA_IRQHandler+0xc84>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d036      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a77      	ldr	r2, [pc, #476]	; (800a01c <HAL_DMA_IRQHandler+0xc88>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d031      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a76      	ldr	r2, [pc, #472]	; (800a020 <HAL_DMA_IRQHandler+0xc8c>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d02c      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a74      	ldr	r2, [pc, #464]	; (800a024 <HAL_DMA_IRQHandler+0xc90>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d027      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a73      	ldr	r2, [pc, #460]	; (800a028 <HAL_DMA_IRQHandler+0xc94>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d022      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a71      	ldr	r2, [pc, #452]	; (800a02c <HAL_DMA_IRQHandler+0xc98>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d01d      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a70      	ldr	r2, [pc, #448]	; (800a030 <HAL_DMA_IRQHandler+0xc9c>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d018      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a6e      	ldr	r2, [pc, #440]	; (800a034 <HAL_DMA_IRQHandler+0xca0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d013      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a6d      	ldr	r2, [pc, #436]	; (800a038 <HAL_DMA_IRQHandler+0xca4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00e      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a6b      	ldr	r2, [pc, #428]	; (800a03c <HAL_DMA_IRQHandler+0xca8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d009      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a6a      	ldr	r2, [pc, #424]	; (800a040 <HAL_DMA_IRQHandler+0xcac>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d004      	beq.n	8009ea6 <HAL_DMA_IRQHandler+0xb12>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a68      	ldr	r2, [pc, #416]	; (800a044 <HAL_DMA_IRQHandler+0xcb0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d108      	bne.n	8009eb8 <HAL_DMA_IRQHandler+0xb24>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f022 0208 	bic.w	r2, r2, #8
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	e007      	b.n	8009ec8 <HAL_DMA_IRQHandler+0xb34>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f022 0204 	bic.w	r2, r2, #4
 8009ec6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 8165 	beq.w	800a19c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009eda:	e15f      	b.n	800a19c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee0:	f003 031f 	and.w	r3, r3, #31
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	409a      	lsls	r2, r3
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	4013      	ands	r3, r2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 80c5 	beq.w	800a07c <HAL_DMA_IRQHandler+0xce8>
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 80bf 	beq.w	800a07c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	2202      	movs	r2, #2
 8009f08:	409a      	lsls	r2, r3
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d018      	beq.n	8009f4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d109      	bne.n	8009f36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f000 813a 	beq.w	800a1a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f34:	e134      	b.n	800a1a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 8130 	beq.w	800a1a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f48:	e12a      	b.n	800a1a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f040 8089 	bne.w	800a068 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a2b      	ldr	r2, [pc, #172]	; (800a008 <HAL_DMA_IRQHandler+0xc74>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d04a      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a29      	ldr	r2, [pc, #164]	; (800a00c <HAL_DMA_IRQHandler+0xc78>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d045      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a28      	ldr	r2, [pc, #160]	; (800a010 <HAL_DMA_IRQHandler+0xc7c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d040      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a26      	ldr	r2, [pc, #152]	; (800a014 <HAL_DMA_IRQHandler+0xc80>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d03b      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a25      	ldr	r2, [pc, #148]	; (800a018 <HAL_DMA_IRQHandler+0xc84>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d036      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a23      	ldr	r2, [pc, #140]	; (800a01c <HAL_DMA_IRQHandler+0xc88>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d031      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a22      	ldr	r2, [pc, #136]	; (800a020 <HAL_DMA_IRQHandler+0xc8c>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d02c      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a20      	ldr	r2, [pc, #128]	; (800a024 <HAL_DMA_IRQHandler+0xc90>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d027      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a1f      	ldr	r2, [pc, #124]	; (800a028 <HAL_DMA_IRQHandler+0xc94>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d022      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1d      	ldr	r2, [pc, #116]	; (800a02c <HAL_DMA_IRQHandler+0xc98>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d01d      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a1c      	ldr	r2, [pc, #112]	; (800a030 <HAL_DMA_IRQHandler+0xc9c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d018      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a1a      	ldr	r2, [pc, #104]	; (800a034 <HAL_DMA_IRQHandler+0xca0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d013      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a19      	ldr	r2, [pc, #100]	; (800a038 <HAL_DMA_IRQHandler+0xca4>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d00e      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a17      	ldr	r2, [pc, #92]	; (800a03c <HAL_DMA_IRQHandler+0xca8>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d009      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a16      	ldr	r2, [pc, #88]	; (800a040 <HAL_DMA_IRQHandler+0xcac>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d004      	beq.n	8009ff6 <HAL_DMA_IRQHandler+0xc62>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a14      	ldr	r2, [pc, #80]	; (800a044 <HAL_DMA_IRQHandler+0xcb0>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d128      	bne.n	800a048 <HAL_DMA_IRQHandler+0xcb4>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0214 	bic.w	r2, r2, #20
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	e027      	b.n	800a058 <HAL_DMA_IRQHandler+0xcc4>
 800a008:	40020010 	.word	0x40020010
 800a00c:	40020028 	.word	0x40020028
 800a010:	40020040 	.word	0x40020040
 800a014:	40020058 	.word	0x40020058
 800a018:	40020070 	.word	0x40020070
 800a01c:	40020088 	.word	0x40020088
 800a020:	400200a0 	.word	0x400200a0
 800a024:	400200b8 	.word	0x400200b8
 800a028:	40020410 	.word	0x40020410
 800a02c:	40020428 	.word	0x40020428
 800a030:	40020440 	.word	0x40020440
 800a034:	40020458 	.word	0x40020458
 800a038:	40020470 	.word	0x40020470
 800a03c:	40020488 	.word	0x40020488
 800a040:	400204a0 	.word	0x400204a0
 800a044:	400204b8 	.word	0x400204b8
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 020a 	bic.w	r2, r2, #10
 800a056:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 8097 	beq.w	800a1a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a07a:	e091      	b.n	800a1a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a080:	f003 031f 	and.w	r3, r3, #31
 800a084:	2208      	movs	r2, #8
 800a086:	409a      	lsls	r2, r3
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	4013      	ands	r3, r2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 8088 	beq.w	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f003 0308 	and.w	r3, r3, #8
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 8082 	beq.w	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a41      	ldr	r2, [pc, #260]	; (800a1a8 <HAL_DMA_IRQHandler+0xe14>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d04a      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a3f      	ldr	r2, [pc, #252]	; (800a1ac <HAL_DMA_IRQHandler+0xe18>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d045      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a3e      	ldr	r2, [pc, #248]	; (800a1b0 <HAL_DMA_IRQHandler+0xe1c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d040      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a3c      	ldr	r2, [pc, #240]	; (800a1b4 <HAL_DMA_IRQHandler+0xe20>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d03b      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a3b      	ldr	r2, [pc, #236]	; (800a1b8 <HAL_DMA_IRQHandler+0xe24>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d036      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a39      	ldr	r2, [pc, #228]	; (800a1bc <HAL_DMA_IRQHandler+0xe28>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d031      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a38      	ldr	r2, [pc, #224]	; (800a1c0 <HAL_DMA_IRQHandler+0xe2c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d02c      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a36      	ldr	r2, [pc, #216]	; (800a1c4 <HAL_DMA_IRQHandler+0xe30>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d027      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a35      	ldr	r2, [pc, #212]	; (800a1c8 <HAL_DMA_IRQHandler+0xe34>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d022      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a33      	ldr	r2, [pc, #204]	; (800a1cc <HAL_DMA_IRQHandler+0xe38>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d01d      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a32      	ldr	r2, [pc, #200]	; (800a1d0 <HAL_DMA_IRQHandler+0xe3c>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d018      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a30      	ldr	r2, [pc, #192]	; (800a1d4 <HAL_DMA_IRQHandler+0xe40>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d013      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a2f      	ldr	r2, [pc, #188]	; (800a1d8 <HAL_DMA_IRQHandler+0xe44>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d00e      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a2d      	ldr	r2, [pc, #180]	; (800a1dc <HAL_DMA_IRQHandler+0xe48>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d009      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a2c      	ldr	r2, [pc, #176]	; (800a1e0 <HAL_DMA_IRQHandler+0xe4c>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d004      	beq.n	800a13e <HAL_DMA_IRQHandler+0xdaa>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a2a      	ldr	r2, [pc, #168]	; (800a1e4 <HAL_DMA_IRQHandler+0xe50>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d108      	bne.n	800a150 <HAL_DMA_IRQHandler+0xdbc>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 021c 	bic.w	r2, r2, #28
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e007      	b.n	800a160 <HAL_DMA_IRQHandler+0xdcc>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f022 020e 	bic.w	r2, r2, #14
 800a15e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a164:	f003 031f 	and.w	r3, r3, #31
 800a168:	2201      	movs	r2, #1
 800a16a:	409a      	lsls	r2, r3
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d009      	beq.n	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	4798      	blx	r3
 800a196:	e004      	b.n	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a198:	bf00      	nop
 800a19a:	e002      	b.n	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a19c:	bf00      	nop
 800a19e:	e000      	b.n	800a1a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a1a2:	3728      	adds	r7, #40	; 0x28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	40020010 	.word	0x40020010
 800a1ac:	40020028 	.word	0x40020028
 800a1b0:	40020040 	.word	0x40020040
 800a1b4:	40020058 	.word	0x40020058
 800a1b8:	40020070 	.word	0x40020070
 800a1bc:	40020088 	.word	0x40020088
 800a1c0:	400200a0 	.word	0x400200a0
 800a1c4:	400200b8 	.word	0x400200b8
 800a1c8:	40020410 	.word	0x40020410
 800a1cc:	40020428 	.word	0x40020428
 800a1d0:	40020440 	.word	0x40020440
 800a1d4:	40020458 	.word	0x40020458
 800a1d8:	40020470 	.word	0x40020470
 800a1dc:	40020488 	.word	0x40020488
 800a1e0:	400204a0 	.word	0x400204a0
 800a1e4:	400204b8 	.word	0x400204b8

0800a1e8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1f6:	b2db      	uxtb	r3, r3
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a234:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a7f      	ldr	r2, [pc, #508]	; (800a438 <DMA_SetConfig+0x21c>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d072      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a7d      	ldr	r2, [pc, #500]	; (800a43c <DMA_SetConfig+0x220>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d06d      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a7c      	ldr	r2, [pc, #496]	; (800a440 <DMA_SetConfig+0x224>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d068      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a7a      	ldr	r2, [pc, #488]	; (800a444 <DMA_SetConfig+0x228>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d063      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a79      	ldr	r2, [pc, #484]	; (800a448 <DMA_SetConfig+0x22c>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d05e      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a77      	ldr	r2, [pc, #476]	; (800a44c <DMA_SetConfig+0x230>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d059      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a76      	ldr	r2, [pc, #472]	; (800a450 <DMA_SetConfig+0x234>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d054      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a74      	ldr	r2, [pc, #464]	; (800a454 <DMA_SetConfig+0x238>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d04f      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a73      	ldr	r2, [pc, #460]	; (800a458 <DMA_SetConfig+0x23c>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d04a      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a71      	ldr	r2, [pc, #452]	; (800a45c <DMA_SetConfig+0x240>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d045      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a70      	ldr	r2, [pc, #448]	; (800a460 <DMA_SetConfig+0x244>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d040      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a6e      	ldr	r2, [pc, #440]	; (800a464 <DMA_SetConfig+0x248>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d03b      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a6d      	ldr	r2, [pc, #436]	; (800a468 <DMA_SetConfig+0x24c>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d036      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a6b      	ldr	r2, [pc, #428]	; (800a46c <DMA_SetConfig+0x250>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d031      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a6a      	ldr	r2, [pc, #424]	; (800a470 <DMA_SetConfig+0x254>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d02c      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a68      	ldr	r2, [pc, #416]	; (800a474 <DMA_SetConfig+0x258>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d027      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a67      	ldr	r2, [pc, #412]	; (800a478 <DMA_SetConfig+0x25c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d022      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a65      	ldr	r2, [pc, #404]	; (800a47c <DMA_SetConfig+0x260>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d01d      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a64      	ldr	r2, [pc, #400]	; (800a480 <DMA_SetConfig+0x264>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d018      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a62      	ldr	r2, [pc, #392]	; (800a484 <DMA_SetConfig+0x268>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a61      	ldr	r2, [pc, #388]	; (800a488 <DMA_SetConfig+0x26c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d00e      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a5f      	ldr	r2, [pc, #380]	; (800a48c <DMA_SetConfig+0x270>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d009      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a5e      	ldr	r2, [pc, #376]	; (800a490 <DMA_SetConfig+0x274>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <DMA_SetConfig+0x10a>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a5c      	ldr	r2, [pc, #368]	; (800a494 <DMA_SetConfig+0x278>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d101      	bne.n	800a32a <DMA_SetConfig+0x10e>
 800a326:	2301      	movs	r3, #1
 800a328:	e000      	b.n	800a32c <DMA_SetConfig+0x110>
 800a32a:	2300      	movs	r3, #0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00d      	beq.n	800a34c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a338:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a34a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a39      	ldr	r2, [pc, #228]	; (800a438 <DMA_SetConfig+0x21c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d04a      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a38      	ldr	r2, [pc, #224]	; (800a43c <DMA_SetConfig+0x220>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d045      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a36      	ldr	r2, [pc, #216]	; (800a440 <DMA_SetConfig+0x224>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d040      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a35      	ldr	r2, [pc, #212]	; (800a444 <DMA_SetConfig+0x228>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d03b      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a33      	ldr	r2, [pc, #204]	; (800a448 <DMA_SetConfig+0x22c>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d036      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a32      	ldr	r2, [pc, #200]	; (800a44c <DMA_SetConfig+0x230>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d031      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a30      	ldr	r2, [pc, #192]	; (800a450 <DMA_SetConfig+0x234>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d02c      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a2f      	ldr	r2, [pc, #188]	; (800a454 <DMA_SetConfig+0x238>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d027      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a2d      	ldr	r2, [pc, #180]	; (800a458 <DMA_SetConfig+0x23c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d022      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a2c      	ldr	r2, [pc, #176]	; (800a45c <DMA_SetConfig+0x240>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d01d      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a2a      	ldr	r2, [pc, #168]	; (800a460 <DMA_SetConfig+0x244>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d018      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a29      	ldr	r2, [pc, #164]	; (800a464 <DMA_SetConfig+0x248>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d013      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a27      	ldr	r2, [pc, #156]	; (800a468 <DMA_SetConfig+0x24c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00e      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a26      	ldr	r2, [pc, #152]	; (800a46c <DMA_SetConfig+0x250>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d009      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a24      	ldr	r2, [pc, #144]	; (800a470 <DMA_SetConfig+0x254>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d004      	beq.n	800a3ec <DMA_SetConfig+0x1d0>
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a23      	ldr	r2, [pc, #140]	; (800a474 <DMA_SetConfig+0x258>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d101      	bne.n	800a3f0 <DMA_SetConfig+0x1d4>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e000      	b.n	800a3f2 <DMA_SetConfig+0x1d6>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d059      	beq.n	800a4aa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3fa:	f003 031f 	and.w	r3, r3, #31
 800a3fe:	223f      	movs	r2, #63	; 0x3f
 800a400:	409a      	lsls	r2, r3
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a414:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	2b40      	cmp	r3, #64	; 0x40
 800a424:	d138      	bne.n	800a498 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a436:	e086      	b.n	800a546 <DMA_SetConfig+0x32a>
 800a438:	40020010 	.word	0x40020010
 800a43c:	40020028 	.word	0x40020028
 800a440:	40020040 	.word	0x40020040
 800a444:	40020058 	.word	0x40020058
 800a448:	40020070 	.word	0x40020070
 800a44c:	40020088 	.word	0x40020088
 800a450:	400200a0 	.word	0x400200a0
 800a454:	400200b8 	.word	0x400200b8
 800a458:	40020410 	.word	0x40020410
 800a45c:	40020428 	.word	0x40020428
 800a460:	40020440 	.word	0x40020440
 800a464:	40020458 	.word	0x40020458
 800a468:	40020470 	.word	0x40020470
 800a46c:	40020488 	.word	0x40020488
 800a470:	400204a0 	.word	0x400204a0
 800a474:	400204b8 	.word	0x400204b8
 800a478:	58025408 	.word	0x58025408
 800a47c:	5802541c 	.word	0x5802541c
 800a480:	58025430 	.word	0x58025430
 800a484:	58025444 	.word	0x58025444
 800a488:	58025458 	.word	0x58025458
 800a48c:	5802546c 	.word	0x5802546c
 800a490:	58025480 	.word	0x58025480
 800a494:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	60da      	str	r2, [r3, #12]
}
 800a4a8:	e04d      	b.n	800a546 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a29      	ldr	r2, [pc, #164]	; (800a554 <DMA_SetConfig+0x338>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d022      	beq.n	800a4fa <DMA_SetConfig+0x2de>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a27      	ldr	r2, [pc, #156]	; (800a558 <DMA_SetConfig+0x33c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d01d      	beq.n	800a4fa <DMA_SetConfig+0x2de>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a26      	ldr	r2, [pc, #152]	; (800a55c <DMA_SetConfig+0x340>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d018      	beq.n	800a4fa <DMA_SetConfig+0x2de>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a24      	ldr	r2, [pc, #144]	; (800a560 <DMA_SetConfig+0x344>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d013      	beq.n	800a4fa <DMA_SetConfig+0x2de>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a23      	ldr	r2, [pc, #140]	; (800a564 <DMA_SetConfig+0x348>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d00e      	beq.n	800a4fa <DMA_SetConfig+0x2de>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a21      	ldr	r2, [pc, #132]	; (800a568 <DMA_SetConfig+0x34c>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d009      	beq.n	800a4fa <DMA_SetConfig+0x2de>
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a20      	ldr	r2, [pc, #128]	; (800a56c <DMA_SetConfig+0x350>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d004      	beq.n	800a4fa <DMA_SetConfig+0x2de>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a1e      	ldr	r2, [pc, #120]	; (800a570 <DMA_SetConfig+0x354>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d101      	bne.n	800a4fe <DMA_SetConfig+0x2e2>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e000      	b.n	800a500 <DMA_SetConfig+0x2e4>
 800a4fe:	2300      	movs	r3, #0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d020      	beq.n	800a546 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a508:	f003 031f 	and.w	r3, r3, #31
 800a50c:	2201      	movs	r2, #1
 800a50e:	409a      	lsls	r2, r3
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	2b40      	cmp	r3, #64	; 0x40
 800a522:	d108      	bne.n	800a536 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	60da      	str	r2, [r3, #12]
}
 800a534:	e007      	b.n	800a546 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	60da      	str	r2, [r3, #12]
}
 800a546:	bf00      	nop
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	58025408 	.word	0x58025408
 800a558:	5802541c 	.word	0x5802541c
 800a55c:	58025430 	.word	0x58025430
 800a560:	58025444 	.word	0x58025444
 800a564:	58025458 	.word	0x58025458
 800a568:	5802546c 	.word	0x5802546c
 800a56c:	58025480 	.word	0x58025480
 800a570:	58025494 	.word	0x58025494

0800a574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a42      	ldr	r2, [pc, #264]	; (800a68c <DMA_CalcBaseAndBitshift+0x118>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d04a      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a41      	ldr	r2, [pc, #260]	; (800a690 <DMA_CalcBaseAndBitshift+0x11c>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d045      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a3f      	ldr	r2, [pc, #252]	; (800a694 <DMA_CalcBaseAndBitshift+0x120>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d040      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a3e      	ldr	r2, [pc, #248]	; (800a698 <DMA_CalcBaseAndBitshift+0x124>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d03b      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a3c      	ldr	r2, [pc, #240]	; (800a69c <DMA_CalcBaseAndBitshift+0x128>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d036      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a3b      	ldr	r2, [pc, #236]	; (800a6a0 <DMA_CalcBaseAndBitshift+0x12c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d031      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a39      	ldr	r2, [pc, #228]	; (800a6a4 <DMA_CalcBaseAndBitshift+0x130>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d02c      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a38      	ldr	r2, [pc, #224]	; (800a6a8 <DMA_CalcBaseAndBitshift+0x134>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d027      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a36      	ldr	r2, [pc, #216]	; (800a6ac <DMA_CalcBaseAndBitshift+0x138>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d022      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a35      	ldr	r2, [pc, #212]	; (800a6b0 <DMA_CalcBaseAndBitshift+0x13c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d01d      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a33      	ldr	r2, [pc, #204]	; (800a6b4 <DMA_CalcBaseAndBitshift+0x140>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d018      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a32      	ldr	r2, [pc, #200]	; (800a6b8 <DMA_CalcBaseAndBitshift+0x144>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d013      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a30      	ldr	r2, [pc, #192]	; (800a6bc <DMA_CalcBaseAndBitshift+0x148>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d00e      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a2f      	ldr	r2, [pc, #188]	; (800a6c0 <DMA_CalcBaseAndBitshift+0x14c>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d009      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a2d      	ldr	r2, [pc, #180]	; (800a6c4 <DMA_CalcBaseAndBitshift+0x150>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d004      	beq.n	800a61c <DMA_CalcBaseAndBitshift+0xa8>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a2c      	ldr	r2, [pc, #176]	; (800a6c8 <DMA_CalcBaseAndBitshift+0x154>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d101      	bne.n	800a620 <DMA_CalcBaseAndBitshift+0xac>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <DMA_CalcBaseAndBitshift+0xae>
 800a620:	2300      	movs	r3, #0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d024      	beq.n	800a670 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	3b10      	subs	r3, #16
 800a62e:	4a27      	ldr	r2, [pc, #156]	; (800a6cc <DMA_CalcBaseAndBitshift+0x158>)
 800a630:	fba2 2303 	umull	r2, r3, r2, r3
 800a634:	091b      	lsrs	r3, r3, #4
 800a636:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f003 0307 	and.w	r3, r3, #7
 800a63e:	4a24      	ldr	r2, [pc, #144]	; (800a6d0 <DMA_CalcBaseAndBitshift+0x15c>)
 800a640:	5cd3      	ldrb	r3, [r2, r3]
 800a642:	461a      	mov	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b03      	cmp	r3, #3
 800a64c:	d908      	bls.n	800a660 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	4b1f      	ldr	r3, [pc, #124]	; (800a6d4 <DMA_CalcBaseAndBitshift+0x160>)
 800a656:	4013      	ands	r3, r2
 800a658:	1d1a      	adds	r2, r3, #4
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	659a      	str	r2, [r3, #88]	; 0x58
 800a65e:	e00d      	b.n	800a67c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	4b1b      	ldr	r3, [pc, #108]	; (800a6d4 <DMA_CalcBaseAndBitshift+0x160>)
 800a668:	4013      	ands	r3, r2
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	6593      	str	r3, [r2, #88]	; 0x58
 800a66e:	e005      	b.n	800a67c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	40020010 	.word	0x40020010
 800a690:	40020028 	.word	0x40020028
 800a694:	40020040 	.word	0x40020040
 800a698:	40020058 	.word	0x40020058
 800a69c:	40020070 	.word	0x40020070
 800a6a0:	40020088 	.word	0x40020088
 800a6a4:	400200a0 	.word	0x400200a0
 800a6a8:	400200b8 	.word	0x400200b8
 800a6ac:	40020410 	.word	0x40020410
 800a6b0:	40020428 	.word	0x40020428
 800a6b4:	40020440 	.word	0x40020440
 800a6b8:	40020458 	.word	0x40020458
 800a6bc:	40020470 	.word	0x40020470
 800a6c0:	40020488 	.word	0x40020488
 800a6c4:	400204a0 	.word	0x400204a0
 800a6c8:	400204b8 	.word	0x400204b8
 800a6cc:	aaaaaaab 	.word	0xaaaaaaab
 800a6d0:	0801aed4 	.word	0x0801aed4
 800a6d4:	fffffc00 	.word	0xfffffc00

0800a6d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d120      	bne.n	800a72e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d858      	bhi.n	800a7a6 <DMA_CheckFifoParam+0xce>
 800a6f4:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <DMA_CheckFifoParam+0x24>)
 800a6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fa:	bf00      	nop
 800a6fc:	0800a70d 	.word	0x0800a70d
 800a700:	0800a71f 	.word	0x0800a71f
 800a704:	0800a70d 	.word	0x0800a70d
 800a708:	0800a7a7 	.word	0x0800a7a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a710:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a714:	2b00      	cmp	r3, #0
 800a716:	d048      	beq.n	800a7aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a71c:	e045      	b.n	800a7aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a722:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a726:	d142      	bne.n	800a7ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a72c:	e03f      	b.n	800a7ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a736:	d123      	bne.n	800a780 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d838      	bhi.n	800a7b2 <DMA_CheckFifoParam+0xda>
 800a740:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <DMA_CheckFifoParam+0x70>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a759 	.word	0x0800a759
 800a74c:	0800a75f 	.word	0x0800a75f
 800a750:	0800a759 	.word	0x0800a759
 800a754:	0800a771 	.word	0x0800a771
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	73fb      	strb	r3, [r7, #15]
        break;
 800a75c:	e030      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d025      	beq.n	800a7b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a76e:	e022      	b.n	800a7b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a778:	d11f      	bne.n	800a7ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a77e:	e01c      	b.n	800a7ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a784:	2b02      	cmp	r3, #2
 800a786:	d902      	bls.n	800a78e <DMA_CheckFifoParam+0xb6>
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d003      	beq.n	800a794 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a78c:	e018      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	73fb      	strb	r3, [r7, #15]
        break;
 800a792:	e015      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00e      	beq.n	800a7be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a4:	e00b      	b.n	800a7be <DMA_CheckFifoParam+0xe6>
        break;
 800a7a6:	bf00      	nop
 800a7a8:	e00a      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7aa:	bf00      	nop
 800a7ac:	e008      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7ae:	bf00      	nop
 800a7b0:	e006      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7b2:	bf00      	nop
 800a7b4:	e004      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7b6:	bf00      	nop
 800a7b8:	e002      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7ba:	bf00      	nop
 800a7bc:	e000      	b.n	800a7c0 <DMA_CheckFifoParam+0xe8>
    break;
 800a7be:	bf00      	nop
    }
  }

  return status;
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop

0800a7d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a38      	ldr	r2, [pc, #224]	; (800a8c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d022      	beq.n	800a82e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a36      	ldr	r2, [pc, #216]	; (800a8c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d01d      	beq.n	800a82e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a35      	ldr	r2, [pc, #212]	; (800a8cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d018      	beq.n	800a82e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a33      	ldr	r2, [pc, #204]	; (800a8d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d013      	beq.n	800a82e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a32      	ldr	r2, [pc, #200]	; (800a8d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d00e      	beq.n	800a82e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a30      	ldr	r2, [pc, #192]	; (800a8d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d009      	beq.n	800a82e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a2f      	ldr	r2, [pc, #188]	; (800a8dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d004      	beq.n	800a82e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a2d      	ldr	r2, [pc, #180]	; (800a8e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d101      	bne.n	800a832 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a82e:	2301      	movs	r3, #1
 800a830:	e000      	b.n	800a834 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a832:	2300      	movs	r3, #0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d01a      	beq.n	800a86e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	3b08      	subs	r3, #8
 800a840:	4a28      	ldr	r2, [pc, #160]	; (800a8e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a842:	fba2 2303 	umull	r2, r3, r2, r3
 800a846:	091b      	lsrs	r3, r3, #4
 800a848:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	4b26      	ldr	r3, [pc, #152]	; (800a8e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	461a      	mov	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a24      	ldr	r2, [pc, #144]	; (800a8ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a85c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f003 031f 	and.w	r3, r3, #31
 800a864:	2201      	movs	r2, #1
 800a866:	409a      	lsls	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a86c:	e024      	b.n	800a8b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	3b10      	subs	r3, #16
 800a876:	4a1e      	ldr	r2, [pc, #120]	; (800a8f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a878:	fba2 2303 	umull	r2, r3, r2, r3
 800a87c:	091b      	lsrs	r3, r3, #4
 800a87e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	4a1c      	ldr	r2, [pc, #112]	; (800a8f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d806      	bhi.n	800a896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	4a1b      	ldr	r2, [pc, #108]	; (800a8f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d902      	bls.n	800a896 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3308      	adds	r3, #8
 800a894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	4b18      	ldr	r3, [pc, #96]	; (800a8fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	461a      	mov	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a16      	ldr	r2, [pc, #88]	; (800a900 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a8a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f003 031f 	and.w	r3, r3, #31
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	409a      	lsls	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a8b8:	bf00      	nop
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	58025408 	.word	0x58025408
 800a8c8:	5802541c 	.word	0x5802541c
 800a8cc:	58025430 	.word	0x58025430
 800a8d0:	58025444 	.word	0x58025444
 800a8d4:	58025458 	.word	0x58025458
 800a8d8:	5802546c 	.word	0x5802546c
 800a8dc:	58025480 	.word	0x58025480
 800a8e0:	58025494 	.word	0x58025494
 800a8e4:	cccccccd 	.word	0xcccccccd
 800a8e8:	16009600 	.word	0x16009600
 800a8ec:	58025880 	.word	0x58025880
 800a8f0:	aaaaaaab 	.word	0xaaaaaaab
 800a8f4:	400204b8 	.word	0x400204b8
 800a8f8:	4002040f 	.word	0x4002040f
 800a8fc:	10008200 	.word	0x10008200
 800a900:	40020880 	.word	0x40020880

0800a904 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	b2db      	uxtb	r3, r3
 800a912:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d04a      	beq.n	800a9b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2b08      	cmp	r3, #8
 800a91e:	d847      	bhi.n	800a9b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a25      	ldr	r2, [pc, #148]	; (800a9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d022      	beq.n	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a24      	ldr	r2, [pc, #144]	; (800a9c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d01d      	beq.n	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a22      	ldr	r2, [pc, #136]	; (800a9c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d018      	beq.n	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a21      	ldr	r2, [pc, #132]	; (800a9c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d013      	beq.n	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a1f      	ldr	r2, [pc, #124]	; (800a9cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00e      	beq.n	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a1e      	ldr	r2, [pc, #120]	; (800a9d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d009      	beq.n	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a1c      	ldr	r2, [pc, #112]	; (800a9d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d004      	beq.n	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a1b      	ldr	r2, [pc, #108]	; (800a9d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d101      	bne.n	800a974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a974:	2300      	movs	r3, #0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4b17      	ldr	r3, [pc, #92]	; (800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	461a      	mov	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a15      	ldr	r2, [pc, #84]	; (800a9e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a98c:	671a      	str	r2, [r3, #112]	; 0x70
 800a98e:	e009      	b.n	800a9a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4b14      	ldr	r3, [pc, #80]	; (800a9e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a994:	4413      	add	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	461a      	mov	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a11      	ldr	r2, [pc, #68]	; (800a9e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a9a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	409a      	lsls	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a9b0:	bf00      	nop
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	58025408 	.word	0x58025408
 800a9c0:	5802541c 	.word	0x5802541c
 800a9c4:	58025430 	.word	0x58025430
 800a9c8:	58025444 	.word	0x58025444
 800a9cc:	58025458 	.word	0x58025458
 800a9d0:	5802546c 	.word	0x5802546c
 800a9d4:	58025480 	.word	0x58025480
 800a9d8:	58025494 	.word	0x58025494
 800a9dc:	1600963f 	.word	0x1600963f
 800a9e0:	58025940 	.word	0x58025940
 800a9e4:	1000823f 	.word	0x1000823f
 800a9e8:	40020940 	.word	0x40020940

0800a9ec <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08a      	sub	sp, #40	; 0x28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800aa00:	2308      	movs	r3, #8
 800aa02:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aa04:	4b40      	ldr	r3, [pc, #256]	; (800ab08 <HAL_FLASH_Program+0x11c>)
 800aa06:	7d1b      	ldrb	r3, [r3, #20]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d101      	bne.n	800aa10 <HAL_FLASH_Program+0x24>
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	e076      	b.n	800aafe <HAL_FLASH_Program+0x112>
 800aa10:	4b3d      	ldr	r3, [pc, #244]	; (800ab08 <HAL_FLASH_Program+0x11c>)
 800aa12:	2201      	movs	r2, #1
 800aa14:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa1c:	d306      	bcc.n	800aa2c <HAL_FLASH_Program+0x40>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aa24:	d202      	bcs.n	800aa2c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800aa26:	2301      	movs	r3, #1
 800aa28:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800aa2a:	e00c      	b.n	800aa46 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aa32:	d306      	bcc.n	800aa42 <HAL_FLASH_Program+0x56>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800aa3a:	d202      	bcs.n	800aa42 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	61bb      	str	r3, [r7, #24]
 800aa40:	e001      	b.n	800aa46 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e05b      	b.n	800aafe <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aa46:	4b30      	ldr	r3, [pc, #192]	; (800ab08 <HAL_FLASH_Program+0x11c>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aa4c:	69b9      	ldr	r1, [r7, #24]
 800aa4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa52:	f000 f897 	bl	800ab84 <FLASH_WaitForLastOperation>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800aa5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d147      	bne.n	800aaf4 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d106      	bne.n	800aa78 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800aa6a:	4b28      	ldr	r3, [pc, #160]	; (800ab0c <HAL_FLASH_Program+0x120>)
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	4a27      	ldr	r2, [pc, #156]	; (800ab0c <HAL_FLASH_Program+0x120>)
 800aa70:	f043 0302 	orr.w	r3, r3, #2
 800aa74:	60d3      	str	r3, [r2, #12]
 800aa76:	e007      	b.n	800aa88 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800aa78:	4b24      	ldr	r3, [pc, #144]	; (800ab0c <HAL_FLASH_Program+0x120>)
 800aa7a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aa7e:	4a23      	ldr	r2, [pc, #140]	; (800ab0c <HAL_FLASH_Program+0x120>)
 800aa80:	f043 0302 	orr.w	r3, r3, #2
 800aa84:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800aa88:	f3bf 8f6f 	isb	sy
}
 800aa8c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aa8e:	f3bf 8f4f 	dsb	sy
}
 800aa92:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800aa9c:	6a3b      	ldr	r3, [r7, #32]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	623b      	str	r3, [r7, #32]
        src_addr++;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	61fb      	str	r3, [r7, #28]
        row_index--;
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1ef      	bne.n	800aa94 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800aab4:	f3bf 8f6f 	isb	sy
}
 800aab8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aaba:	f3bf 8f4f 	dsb	sy
}
 800aabe:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aac0:	69b9      	ldr	r1, [r7, #24]
 800aac2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aac6:	f000 f85d 	bl	800ab84 <FLASH_WaitForLastOperation>
 800aaca:	4603      	mov	r3, r0
 800aacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d106      	bne.n	800aae4 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800aad6:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <HAL_FLASH_Program+0x120>)
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	4a0c      	ldr	r2, [pc, #48]	; (800ab0c <HAL_FLASH_Program+0x120>)
 800aadc:	f023 0302 	bic.w	r3, r3, #2
 800aae0:	60d3      	str	r3, [r2, #12]
 800aae2:	e007      	b.n	800aaf4 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800aae4:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <HAL_FLASH_Program+0x120>)
 800aae6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aaea:	4a08      	ldr	r2, [pc, #32]	; (800ab0c <HAL_FLASH_Program+0x120>)
 800aaec:	f023 0302 	bic.w	r3, r3, #2
 800aaf0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aaf4:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <HAL_FLASH_Program+0x11c>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	751a      	strb	r2, [r3, #20]

  return status;
 800aafa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3728      	adds	r7, #40	; 0x28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	24002040 	.word	0x24002040
 800ab0c:	52002000 	.word	0x52002000

0800ab10 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab10:	b480      	push	{r7}
 800ab12:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ab14:	4b18      	ldr	r3, [pc, #96]	; (800ab78 <HAL_FLASH_Unlock+0x68>)
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00d      	beq.n	800ab3c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800ab20:	4b15      	ldr	r3, [pc, #84]	; (800ab78 <HAL_FLASH_Unlock+0x68>)
 800ab22:	4a16      	ldr	r2, [pc, #88]	; (800ab7c <HAL_FLASH_Unlock+0x6c>)
 800ab24:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <HAL_FLASH_Unlock+0x68>)
 800ab28:	4a15      	ldr	r2, [pc, #84]	; (800ab80 <HAL_FLASH_Unlock+0x70>)
 800ab2a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ab2c:	4b12      	ldr	r3, [pc, #72]	; (800ab78 <HAL_FLASH_Unlock+0x68>)
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e018      	b.n	800ab6e <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ab3c:	4b0e      	ldr	r3, [pc, #56]	; (800ab78 <HAL_FLASH_Unlock+0x68>)
 800ab3e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d010      	beq.n	800ab6c <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800ab4a:	4b0b      	ldr	r3, [pc, #44]	; (800ab78 <HAL_FLASH_Unlock+0x68>)
 800ab4c:	4a0b      	ldr	r2, [pc, #44]	; (800ab7c <HAL_FLASH_Unlock+0x6c>)
 800ab4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800ab52:	4b09      	ldr	r3, [pc, #36]	; (800ab78 <HAL_FLASH_Unlock+0x68>)
 800ab54:	4a0a      	ldr	r2, [pc, #40]	; (800ab80 <HAL_FLASH_Unlock+0x70>)
 800ab56:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ab5a:	4b07      	ldr	r3, [pc, #28]	; (800ab78 <HAL_FLASH_Unlock+0x68>)
 800ab5c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	52002000 	.word	0x52002000
 800ab7c:	45670123 	.word	0x45670123
 800ab80:	cdef89ab 	.word	0xcdef89ab

0800ab84 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800ab8e:	2304      	movs	r3, #4
 800ab90:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800ab92:	2300      	movs	r3, #0
 800ab94:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800ab96:	f7fa ff33 	bl	8005a00 <HAL_GetTick>
 800ab9a:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d113      	bne.n	800abca <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800aba2:	4b41      	ldr	r3, [pc, #260]	; (800aca8 <FLASH_WaitForLastOperation+0x124>)
 800aba4:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aba6:	e010      	b.n	800abca <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abae:	d00c      	beq.n	800abca <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800abb0:	f7fa ff26 	bl	8005a00 <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d302      	bcc.n	800abc6 <FLASH_WaitForLastOperation+0x42>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e06a      	b.n	800aca0 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	4b37      	ldr	r3, [pc, #220]	; (800acac <FLASH_WaitForLastOperation+0x128>)
 800abce:	4013      	ands	r3, r2
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d10a      	bne.n	800abec <FLASH_WaitForLastOperation+0x68>
 800abd6:	4b36      	ldr	r3, [pc, #216]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800abd8:	691a      	ldr	r2, [r3, #16]
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	4013      	ands	r3, r2
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	bf0c      	ite	eq
 800abe4:	2301      	moveq	r3, #1
 800abe6:	2300      	movne	r3, #0
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	e00c      	b.n	800ac06 <FLASH_WaitForLastOperation+0x82>
 800abec:	4b30      	ldr	r3, [pc, #192]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800abee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800abf2:	43da      	mvns	r2, r3
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	4013      	ands	r3, r2
 800abf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bf0c      	ite	eq
 800ac00:	2301      	moveq	r3, #1
 800ac02:	2300      	movne	r3, #0
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1ce      	bne.n	800aba8 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d105      	bne.n	800ac1c <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800ac10:	4b27      	ldr	r3, [pc, #156]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800ac12:	691a      	ldr	r2, [r3, #16]
 800ac14:	4b27      	ldr	r3, [pc, #156]	; (800acb4 <FLASH_WaitForLastOperation+0x130>)
 800ac16:	4013      	ands	r3, r2
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	e007      	b.n	800ac2c <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800ac1c:	4b24      	ldr	r3, [pc, #144]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800ac1e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800ac22:	4b24      	ldr	r3, [pc, #144]	; (800acb4 <FLASH_WaitForLastOperation+0x130>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac2a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d017      	beq.n	800ac66 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800ac36:	4b20      	ldr	r3, [pc, #128]	; (800acb8 <FLASH_WaitForLastOperation+0x134>)
 800ac38:	699a      	ldr	r2, [r3, #24]
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	4a1e      	ldr	r2, [pc, #120]	; (800acb8 <FLASH_WaitForLastOperation+0x134>)
 800ac40:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800ac42:	693a      	ldr	r2, [r7, #16]
 800ac44:	4b19      	ldr	r3, [pc, #100]	; (800acac <FLASH_WaitForLastOperation+0x128>)
 800ac46:	4013      	ands	r3, r2
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d103      	bne.n	800ac56 <FLASH_WaitForLastOperation+0xd2>
 800ac4e:	4a18      	ldr	r2, [pc, #96]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6153      	str	r3, [r2, #20]
 800ac54:	e005      	b.n	800ac62 <FLASH_WaitForLastOperation+0xde>
 800ac56:	4a16      	ldr	r2, [pc, #88]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac5e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e01c      	b.n	800aca0 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d10b      	bne.n	800ac84 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800ac6c:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac78:	d111      	bne.n	800ac9e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800ac7a:	4b0d      	ldr	r3, [pc, #52]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800ac7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ac80:	615a      	str	r2, [r3, #20]
 800ac82:	e00c      	b.n	800ac9e <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800ac84:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800ac86:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ac8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac92:	d104      	bne.n	800ac9e <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800ac94:	4b06      	ldr	r3, [pc, #24]	; (800acb0 <FLASH_WaitForLastOperation+0x12c>)
 800ac96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ac9a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	80000004 	.word	0x80000004
 800acac:	1fef000f 	.word	0x1fef000f
 800acb0:	52002000 	.word	0x52002000
 800acb4:	17ee0000 	.word	0x17ee0000
 800acb8:	24002040 	.word	0x24002040

0800acbc <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800acca:	4b5e      	ldr	r3, [pc, #376]	; (800ae44 <HAL_FLASHEx_Erase+0x188>)
 800accc:	7d1b      	ldrb	r3, [r3, #20]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d101      	bne.n	800acd6 <HAL_FLASHEx_Erase+0x1a>
 800acd2:	2302      	movs	r3, #2
 800acd4:	e0b2      	b.n	800ae3c <HAL_FLASHEx_Erase+0x180>
 800acd6:	4b5b      	ldr	r3, [pc, #364]	; (800ae44 <HAL_FLASHEx_Erase+0x188>)
 800acd8:	2201      	movs	r2, #1
 800acda:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800acdc:	4b59      	ldr	r3, [pc, #356]	; (800ae44 <HAL_FLASHEx_Erase+0x188>)
 800acde:	2200      	movs	r2, #0
 800ace0:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f003 0301 	and.w	r3, r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	d009      	beq.n	800ad02 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800acee:	2101      	movs	r1, #1
 800acf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800acf4:	f7ff ff46 	bl	800ab84 <FLASH_WaitForLastOperation>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	f003 0302 	and.w	r3, r3, #2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d009      	beq.n	800ad22 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ad0e:	2102      	movs	r1, #2
 800ad10:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad14:	f7ff ff36 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f040 8085 	bne.w	800ae34 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d136      	bne.n	800ada0 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	691a      	ldr	r2, [r3, #16]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	f000 f887 	bl	800ae50 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00f      	beq.n	800ad6e <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ad4e:	2101      	movs	r1, #1
 800ad50:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad54:	f7ff ff16 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800ad62:	4b39      	ldr	r3, [pc, #228]	; (800ae48 <HAL_FLASHEx_Erase+0x18c>)
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	4a38      	ldr	r2, [pc, #224]	; (800ae48 <HAL_FLASHEx_Erase+0x18c>)
 800ad68:	f023 0308 	bic.w	r3, r3, #8
 800ad6c:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f003 0302 	and.w	r3, r3, #2
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d05c      	beq.n	800ae34 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ad7a:	2102      	movs	r1, #2
 800ad7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad80:	f7ff ff00 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800ad8e:	4b2e      	ldr	r3, [pc, #184]	; (800ae48 <HAL_FLASHEx_Erase+0x18c>)
 800ad90:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ad94:	4a2c      	ldr	r2, [pc, #176]	; (800ae48 <HAL_FLASHEx_Erase+0x18c>)
 800ad96:	f023 0308 	bic.w	r3, r3, #8
 800ad9a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800ad9e:	e049      	b.n	800ae34 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ada6:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	60bb      	str	r3, [r7, #8]
 800adae:	e039      	b.n	800ae24 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6859      	ldr	r1, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	461a      	mov	r2, r3
 800adba:	68b8      	ldr	r0, [r7, #8]
 800adbc:	f000 f8b2 	bl	800af24 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00c      	beq.n	800ade6 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800adcc:	2101      	movs	r1, #1
 800adce:	f24c 3050 	movw	r0, #50000	; 0xc350
 800add2:	f7ff fed7 	bl	800ab84 <FLASH_WaitForLastOperation>
 800add6:	4603      	mov	r3, r0
 800add8:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800adda:	4b1b      	ldr	r3, [pc, #108]	; (800ae48 <HAL_FLASHEx_Erase+0x18c>)
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	491a      	ldr	r1, [pc, #104]	; (800ae48 <HAL_FLASHEx_Erase+0x18c>)
 800ade0:	4b1a      	ldr	r3, [pc, #104]	; (800ae4c <HAL_FLASHEx_Erase+0x190>)
 800ade2:	4013      	ands	r3, r2
 800ade4:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00e      	beq.n	800ae10 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800adf2:	2102      	movs	r1, #2
 800adf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800adf8:	f7ff fec4 	bl	800ab84 <FLASH_WaitForLastOperation>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ae00:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <HAL_FLASHEx_Erase+0x18c>)
 800ae02:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ae06:	4910      	ldr	r1, [pc, #64]	; (800ae48 <HAL_FLASHEx_Erase+0x18c>)
 800ae08:	4b10      	ldr	r3, [pc, #64]	; (800ae4c <HAL_FLASHEx_Erase+0x190>)
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d003      	beq.n	800ae1e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	601a      	str	r2, [r3, #0]
          break;
 800ae1c:	e00a      	b.n	800ae34 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	3301      	adds	r3, #1
 800ae22:	60bb      	str	r3, [r7, #8]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68da      	ldr	r2, [r3, #12]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d3bd      	bcc.n	800adb0 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae34:	4b03      	ldr	r3, [pc, #12]	; (800ae44 <HAL_FLASHEx_Erase+0x188>)
 800ae36:	2200      	movs	r2, #0
 800ae38:	751a      	strb	r2, [r3, #20]

  return status;
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	24002040 	.word	0x24002040
 800ae48:	52002000 	.word	0x52002000
 800ae4c:	fffff8fb 	.word	0xfffff8fb

0800ae50 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	f003 0303 	and.w	r3, r3, #3
 800ae60:	2b03      	cmp	r3, #3
 800ae62:	d122      	bne.n	800aeaa <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ae64:	4b2e      	ldr	r3, [pc, #184]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	4a2d      	ldr	r2, [pc, #180]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ae6e:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800ae70:	4b2b      	ldr	r3, [pc, #172]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae72:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ae76:	4a2a      	ldr	r2, [pc, #168]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ae7c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800ae80:	4b27      	ldr	r3, [pc, #156]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae82:	68da      	ldr	r2, [r3, #12]
 800ae84:	4926      	ldr	r1, [pc, #152]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800ae8c:	4b24      	ldr	r3, [pc, #144]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae8e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ae92:	4923      	ldr	r1, [pc, #140]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800ae9c:	4b20      	ldr	r3, [pc, #128]	; (800af20 <FLASH_MassErase+0xd0>)
 800ae9e:	699b      	ldr	r3, [r3, #24]
 800aea0:	4a1f      	ldr	r2, [pc, #124]	; (800af20 <FLASH_MassErase+0xd0>)
 800aea2:	f043 0310 	orr.w	r3, r3, #16
 800aea6:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800aea8:	e033      	b.n	800af12 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d011      	beq.n	800aed8 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800aeb4:	4b1a      	ldr	r3, [pc, #104]	; (800af20 <FLASH_MassErase+0xd0>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	4a19      	ldr	r2, [pc, #100]	; (800af20 <FLASH_MassErase+0xd0>)
 800aeba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800aebe:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800aec0:	4b17      	ldr	r3, [pc, #92]	; (800af20 <FLASH_MassErase+0xd0>)
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	4916      	ldr	r1, [pc, #88]	; (800af20 <FLASH_MassErase+0xd0>)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800aecc:	4b14      	ldr	r3, [pc, #80]	; (800af20 <FLASH_MassErase+0xd0>)
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	4a13      	ldr	r2, [pc, #76]	; (800af20 <FLASH_MassErase+0xd0>)
 800aed2:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800aed6:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	f003 0302 	and.w	r3, r3, #2
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d017      	beq.n	800af12 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800aee2:	4b0f      	ldr	r3, [pc, #60]	; (800af20 <FLASH_MassErase+0xd0>)
 800aee4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aee8:	4a0d      	ldr	r2, [pc, #52]	; (800af20 <FLASH_MassErase+0xd0>)
 800aeea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800aeee:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800aef2:	4b0b      	ldr	r3, [pc, #44]	; (800af20 <FLASH_MassErase+0xd0>)
 800aef4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800aef8:	4909      	ldr	r1, [pc, #36]	; (800af20 <FLASH_MassErase+0xd0>)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800af02:	4b07      	ldr	r3, [pc, #28]	; (800af20 <FLASH_MassErase+0xd0>)
 800af04:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af08:	4a05      	ldr	r2, [pc, #20]	; (800af20 <FLASH_MassErase+0xd0>)
 800af0a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800af0e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800af12:	bf00      	nop
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	52002000 	.word	0x52002000

0800af24 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d010      	beq.n	800af5c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800af3a:	4b18      	ldr	r3, [pc, #96]	; (800af9c <FLASH_Erase_Sector+0x78>)
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	4a17      	ldr	r2, [pc, #92]	; (800af9c <FLASH_Erase_Sector+0x78>)
 800af40:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800af44:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800af46:	4b15      	ldr	r3, [pc, #84]	; (800af9c <FLASH_Erase_Sector+0x78>)
 800af48:	68da      	ldr	r2, [r3, #12]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	0219      	lsls	r1, r3, #8
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	430b      	orrs	r3, r1
 800af52:	4313      	orrs	r3, r2
 800af54:	4a11      	ldr	r2, [pc, #68]	; (800af9c <FLASH_Erase_Sector+0x78>)
 800af56:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800af5a:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d014      	beq.n	800af90 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800af66:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <FLASH_Erase_Sector+0x78>)
 800af68:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af6c:	4a0b      	ldr	r2, [pc, #44]	; (800af9c <FLASH_Erase_Sector+0x78>)
 800af6e:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800af72:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800af76:	4b09      	ldr	r3, [pc, #36]	; (800af9c <FLASH_Erase_Sector+0x78>)
 800af78:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	0219      	lsls	r1, r3, #8
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	430b      	orrs	r3, r1
 800af84:	4313      	orrs	r3, r2
 800af86:	4a05      	ldr	r2, [pc, #20]	; (800af9c <FLASH_Erase_Sector+0x78>)
 800af88:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800af8c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800af90:	bf00      	nop
 800af92:	3714      	adds	r7, #20
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	52002000 	.word	0x52002000

0800afa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b089      	sub	sp, #36	; 0x24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800afaa:	2300      	movs	r3, #0
 800afac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800afae:	4b89      	ldr	r3, [pc, #548]	; (800b1d4 <HAL_GPIO_Init+0x234>)
 800afb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800afb2:	e194      	b.n	800b2de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	2101      	movs	r1, #1
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	fa01 f303 	lsl.w	r3, r1, r3
 800afc0:	4013      	ands	r3, r2
 800afc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 8186 	beq.w	800b2d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	f003 0303 	and.w	r3, r3, #3
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d005      	beq.n	800afe4 <HAL_GPIO_Init+0x44>
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f003 0303 	and.w	r3, r3, #3
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d130      	bne.n	800b046 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	2203      	movs	r2, #3
 800aff0:	fa02 f303 	lsl.w	r3, r2, r3
 800aff4:	43db      	mvns	r3, r3
 800aff6:	69ba      	ldr	r2, [r7, #24]
 800aff8:	4013      	ands	r3, r2
 800affa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	68da      	ldr	r2, [r3, #12]
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	fa02 f303 	lsl.w	r3, r2, r3
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69ba      	ldr	r2, [r7, #24]
 800b012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b01a:	2201      	movs	r2, #1
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	fa02 f303 	lsl.w	r3, r2, r3
 800b022:	43db      	mvns	r3, r3
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	4013      	ands	r3, r2
 800b028:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	091b      	lsrs	r3, r3, #4
 800b030:	f003 0201 	and.w	r2, r3, #1
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	fa02 f303 	lsl.w	r3, r2, r3
 800b03a:	69ba      	ldr	r2, [r7, #24]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	69ba      	ldr	r2, [r7, #24]
 800b044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f003 0303 	and.w	r3, r3, #3
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d017      	beq.n	800b082 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	2203      	movs	r2, #3
 800b05e:	fa02 f303 	lsl.w	r3, r2, r3
 800b062:	43db      	mvns	r3, r3
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	4013      	ands	r3, r2
 800b068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	689a      	ldr	r2, [r3, #8]
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	fa02 f303 	lsl.w	r3, r2, r3
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	4313      	orrs	r3, r2
 800b07a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	69ba      	ldr	r2, [r7, #24]
 800b080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f003 0303 	and.w	r3, r3, #3
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d123      	bne.n	800b0d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	08da      	lsrs	r2, r3, #3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	3208      	adds	r2, #8
 800b096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	f003 0307 	and.w	r3, r3, #7
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	220f      	movs	r2, #15
 800b0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0aa:	43db      	mvns	r3, r3
 800b0ac:	69ba      	ldr	r2, [r7, #24]
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	f003 0307 	and.w	r3, r3, #7
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	08da      	lsrs	r2, r3, #3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3208      	adds	r2, #8
 800b0d0:	69b9      	ldr	r1, [r7, #24]
 800b0d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	005b      	lsls	r3, r3, #1
 800b0e0:	2203      	movs	r2, #3
 800b0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e6:	43db      	mvns	r3, r3
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f003 0203 	and.w	r2, r3, #3
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	005b      	lsls	r3, r3, #1
 800b0fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	4313      	orrs	r3, r2
 800b102:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	69ba      	ldr	r2, [r7, #24]
 800b108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 80e0 	beq.w	800b2d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b118:	4b2f      	ldr	r3, [pc, #188]	; (800b1d8 <HAL_GPIO_Init+0x238>)
 800b11a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b11e:	4a2e      	ldr	r2, [pc, #184]	; (800b1d8 <HAL_GPIO_Init+0x238>)
 800b120:	f043 0302 	orr.w	r3, r3, #2
 800b124:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b128:	4b2b      	ldr	r3, [pc, #172]	; (800b1d8 <HAL_GPIO_Init+0x238>)
 800b12a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b12e:	f003 0302 	and.w	r3, r3, #2
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b136:	4a29      	ldr	r2, [pc, #164]	; (800b1dc <HAL_GPIO_Init+0x23c>)
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	089b      	lsrs	r3, r3, #2
 800b13c:	3302      	adds	r3, #2
 800b13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	f003 0303 	and.w	r3, r3, #3
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	220f      	movs	r2, #15
 800b14e:	fa02 f303 	lsl.w	r3, r2, r3
 800b152:	43db      	mvns	r3, r3
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	4013      	ands	r3, r2
 800b158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a20      	ldr	r2, [pc, #128]	; (800b1e0 <HAL_GPIO_Init+0x240>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d052      	beq.n	800b208 <HAL_GPIO_Init+0x268>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a1f      	ldr	r2, [pc, #124]	; (800b1e4 <HAL_GPIO_Init+0x244>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d031      	beq.n	800b1ce <HAL_GPIO_Init+0x22e>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a1e      	ldr	r2, [pc, #120]	; (800b1e8 <HAL_GPIO_Init+0x248>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d02b      	beq.n	800b1ca <HAL_GPIO_Init+0x22a>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a1d      	ldr	r2, [pc, #116]	; (800b1ec <HAL_GPIO_Init+0x24c>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d025      	beq.n	800b1c6 <HAL_GPIO_Init+0x226>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a1c      	ldr	r2, [pc, #112]	; (800b1f0 <HAL_GPIO_Init+0x250>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d01f      	beq.n	800b1c2 <HAL_GPIO_Init+0x222>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a1b      	ldr	r2, [pc, #108]	; (800b1f4 <HAL_GPIO_Init+0x254>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d019      	beq.n	800b1be <HAL_GPIO_Init+0x21e>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a1a      	ldr	r2, [pc, #104]	; (800b1f8 <HAL_GPIO_Init+0x258>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d013      	beq.n	800b1ba <HAL_GPIO_Init+0x21a>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a19      	ldr	r2, [pc, #100]	; (800b1fc <HAL_GPIO_Init+0x25c>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d00d      	beq.n	800b1b6 <HAL_GPIO_Init+0x216>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a18      	ldr	r2, [pc, #96]	; (800b200 <HAL_GPIO_Init+0x260>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d007      	beq.n	800b1b2 <HAL_GPIO_Init+0x212>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a17      	ldr	r2, [pc, #92]	; (800b204 <HAL_GPIO_Init+0x264>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d101      	bne.n	800b1ae <HAL_GPIO_Init+0x20e>
 800b1aa:	2309      	movs	r3, #9
 800b1ac:	e02d      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1ae:	230a      	movs	r3, #10
 800b1b0:	e02b      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	e029      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1b6:	2307      	movs	r3, #7
 800b1b8:	e027      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1ba:	2306      	movs	r3, #6
 800b1bc:	e025      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1be:	2305      	movs	r3, #5
 800b1c0:	e023      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1c2:	2304      	movs	r3, #4
 800b1c4:	e021      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e01f      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	e01d      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e01b      	b.n	800b20a <HAL_GPIO_Init+0x26a>
 800b1d2:	bf00      	nop
 800b1d4:	58000080 	.word	0x58000080
 800b1d8:	58024400 	.word	0x58024400
 800b1dc:	58000400 	.word	0x58000400
 800b1e0:	58020000 	.word	0x58020000
 800b1e4:	58020400 	.word	0x58020400
 800b1e8:	58020800 	.word	0x58020800
 800b1ec:	58020c00 	.word	0x58020c00
 800b1f0:	58021000 	.word	0x58021000
 800b1f4:	58021400 	.word	0x58021400
 800b1f8:	58021800 	.word	0x58021800
 800b1fc:	58021c00 	.word	0x58021c00
 800b200:	58022000 	.word	0x58022000
 800b204:	58022400 	.word	0x58022400
 800b208:	2300      	movs	r3, #0
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	f002 0203 	and.w	r2, r2, #3
 800b210:	0092      	lsls	r2, r2, #2
 800b212:	4093      	lsls	r3, r2
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	4313      	orrs	r3, r2
 800b218:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b21a:	4938      	ldr	r1, [pc, #224]	; (800b2fc <HAL_GPIO_Init+0x35c>)
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	089b      	lsrs	r3, r3, #2
 800b220:	3302      	adds	r3, #2
 800b222:	69ba      	ldr	r2, [r7, #24]
 800b224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	43db      	mvns	r3, r3
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	4013      	ands	r3, r2
 800b238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b24e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	43db      	mvns	r3, r3
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	4013      	ands	r3, r2
 800b266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d003      	beq.n	800b27c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	4313      	orrs	r3, r2
 800b27a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b27c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	43db      	mvns	r3, r3
 800b28e:	69ba      	ldr	r2, [r7, #24]
 800b290:	4013      	ands	r3, r2
 800b292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d003      	beq.n	800b2a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	43db      	mvns	r3, r3
 800b2b8:	69ba      	ldr	r2, [r7, #24]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	69ba      	ldr	r2, [r7, #24]
 800b2d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f47f ae63 	bne.w	800afb4 <HAL_GPIO_Init+0x14>
  }
}
 800b2ee:	bf00      	nop
 800b2f0:	bf00      	nop
 800b2f2:	3724      	adds	r7, #36	; 0x24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	58000400 	.word	0x58000400

0800b300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	460b      	mov	r3, r1
 800b30a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	691a      	ldr	r2, [r3, #16]
 800b310:	887b      	ldrh	r3, [r7, #2]
 800b312:	4013      	ands	r3, r2
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b318:	2301      	movs	r3, #1
 800b31a:	73fb      	strb	r3, [r7, #15]
 800b31c:	e001      	b.n	800b322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b31e:	2300      	movs	r3, #0
 800b320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b322:	7bfb      	ldrb	r3, [r7, #15]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	807b      	strh	r3, [r7, #2]
 800b33c:	4613      	mov	r3, r2
 800b33e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b340:	787b      	ldrb	r3, [r7, #1]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b346:	887a      	ldrh	r2, [r7, #2]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b34c:	e003      	b.n	800b356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b34e:	887b      	ldrh	r3, [r7, #2]
 800b350:	041a      	lsls	r2, r3, #16
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	619a      	str	r2, [r3, #24]
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
	...

0800b364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e08b      	b.n	800b48e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d106      	bne.n	800b390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7f7 fab0 	bl	80028f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2224      	movs	r2, #36	; 0x24
 800b394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f022 0201 	bic.w	r2, r2, #1
 800b3a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b3b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d107      	bne.n	800b3de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3da:	609a      	str	r2, [r3, #8]
 800b3dc:	e006      	b.n	800b3ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689a      	ldr	r2, [r3, #8]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b3ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d108      	bne.n	800b406 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b402:	605a      	str	r2, [r3, #4]
 800b404:	e007      	b.n	800b416 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	685a      	ldr	r2, [r3, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b414:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6859      	ldr	r1, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <HAL_I2C_Init+0x134>)
 800b422:	430b      	orrs	r3, r1
 800b424:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b434:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	691a      	ldr	r2, [r3, #16]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	430a      	orrs	r2, r1
 800b44e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	69d9      	ldr	r1, [r3, #28]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a1a      	ldr	r2, [r3, #32]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	430a      	orrs	r2, r1
 800b45e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f042 0201 	orr.w	r2, r2, #1
 800b46e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2220      	movs	r2, #32
 800b47a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	02008000 	.word	0x02008000

0800b49c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af02      	add	r7, sp, #8
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	607a      	str	r2, [r7, #4]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	817b      	strh	r3, [r7, #10]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	f040 80ef 	bne.w	800b6a0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4d0:	d101      	bne.n	800b4d6 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	e0e5      	b.n	800b6a2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d101      	bne.n	800b4e4 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	e0de      	b.n	800b6a2 <HAL_I2C_Master_Transmit_DMA+0x206>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2221      	movs	r2, #33	; 0x21
 800b4f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2210      	movs	r2, #16
 800b4f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	893a      	ldrh	r2, [r7, #8]
 800b50c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	4a66      	ldr	r2, [pc, #408]	; (800b6ac <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b512:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4a66      	ldr	r2, [pc, #408]	; (800b6b0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b518:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b51e:	b29b      	uxth	r3, r3
 800b520:	2bff      	cmp	r3, #255	; 0xff
 800b522:	d906      	bls.n	800b532 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	22ff      	movs	r2, #255	; 0xff
 800b528:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b52a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b52e:	61fb      	str	r3, [r7, #28]
 800b530:	e007      	b.n	800b542 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b536:	b29a      	uxth	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b53c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b540:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b546:	2b00      	cmp	r3, #0
 800b548:	d01a      	beq.n	800b580 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54e:	781a      	ldrb	r2, [r3, #0]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b564:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b578:	3b01      	subs	r3, #1
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b584:	2b00      	cmp	r3, #0
 800b586:	d074      	beq.n	800b672 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d022      	beq.n	800b5d6 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b594:	4a47      	ldr	r2, [pc, #284]	; (800b6b4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b596:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59c:	4a46      	ldr	r2, [pc, #280]	; (800b6b8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b59e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5c0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5c6:	f7fc ff17 	bl	80083f8 <HAL_DMA_Start_IT>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d13a      	bne.n	800b64a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b5d4:	e013      	b.n	800b5fe <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e051      	b.n	800b6a2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b602:	b2db      	uxtb	r3, r3
 800b604:	3301      	adds	r3, #1
 800b606:	b2da      	uxtb	r2, r3
 800b608:	8979      	ldrh	r1, [r7, #10]
 800b60a:	4b2c      	ldr	r3, [pc, #176]	; (800b6bc <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f002 f83b 	bl	800d68c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	b29a      	uxth	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b630:	2110      	movs	r1, #16
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f002 f85c 	bl	800d6f0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	e028      	b.n	800b69c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2220      	movs	r2, #32
 800b64e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b65e:	f043 0210 	orr.w	r2, r3, #16
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e017      	b.n	800b6a2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4a12      	ldr	r2, [pc, #72]	; (800b6c0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	8979      	ldrh	r1, [r7, #10]
 800b67e:	4b0f      	ldr	r3, [pc, #60]	; (800b6bc <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f002 f800 	bl	800d68c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b694:	2101      	movs	r1, #1
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f002 f82a 	bl	800d6f0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	e000      	b.n	800b6a2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b6a0:	2302      	movs	r3, #2
  }
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3720      	adds	r7, #32
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	ffff0000 	.word	0xffff0000
 800b6b0:	0800bef7 	.word	0x0800bef7
 800b6b4:	0800d2af 	.word	0x0800d2af
 800b6b8:	0800d3dd 	.word	0x0800d3dd
 800b6bc:	80002000 	.word	0x80002000
 800b6c0:	0800ba87 	.word	0x0800ba87

0800b6c4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	607a      	str	r2, [r7, #4]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	817b      	strh	r3, [r7, #10]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b20      	cmp	r3, #32
 800b6e2:	f040 80cd 	bne.w	800b880 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6f4:	d101      	bne.n	800b6fa <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	e0c3      	b.n	800b882 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <HAL_I2C_Master_Receive_DMA+0x44>
 800b704:	2302      	movs	r3, #2
 800b706:	e0bc      	b.n	800b882 <HAL_I2C_Master_Receive_DMA+0x1be>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2222      	movs	r2, #34	; 0x22
 800b714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2210      	movs	r2, #16
 800b71c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	893a      	ldrh	r2, [r7, #8]
 800b730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4a55      	ldr	r2, [pc, #340]	; (800b88c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b736:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	4a55      	ldr	r2, [pc, #340]	; (800b890 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b73c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b742:	b29b      	uxth	r3, r3
 800b744:	2bff      	cmp	r3, #255	; 0xff
 800b746:	d906      	bls.n	800b756 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	22ff      	movs	r2, #255	; 0xff
 800b74c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b74e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b752:	617b      	str	r3, [r7, #20]
 800b754:	e007      	b.n	800b766 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b760:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b764:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d070      	beq.n	800b850 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b772:	2b00      	cmp	r3, #0
 800b774:	d020      	beq.n	800b7b8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b77a:	4a46      	ldr	r2, [pc, #280]	; (800b894 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b77c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b782:	4a45      	ldr	r2, [pc, #276]	; (800b898 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b784:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b78a:	2200      	movs	r2, #0
 800b78c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b792:	2200      	movs	r2, #0
 800b794:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3324      	adds	r3, #36	; 0x24
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b7a8:	f7fc fe26 	bl	80083f8 <HAL_DMA_Start_IT>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b7b0:	7cfb      	ldrb	r3, [r7, #19]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d138      	bne.n	800b828 <HAL_I2C_Master_Receive_DMA+0x164>
 800b7b6:	e013      	b.n	800b7e0 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e050      	b.n	800b882 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	8979      	ldrh	r1, [r7, #10]
 800b7e8:	4b2c      	ldr	r3, [pc, #176]	; (800b89c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f001 ff4c 	bl	800d68c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	b29a      	uxth	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b80e:	2110      	movs	r1, #16
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f001 ff6d 	bl	800d6f0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	e029      	b.n	800b87c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2220      	movs	r2, #32
 800b82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b83c:	f043 0210 	orr.w	r2, r3, #16
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e018      	b.n	800b882 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4a13      	ldr	r2, [pc, #76]	; (800b8a0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b854:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	8979      	ldrh	r1, [r7, #10]
 800b85e:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f001 ff10 	bl	800d68c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b874:	2102      	movs	r1, #2
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f001 ff3a 	bl	800d6f0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	e000      	b.n	800b882 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b880:	2302      	movs	r3, #2
  }
}
 800b882:	4618      	mov	r0, r3
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	ffff0000 	.word	0xffff0000
 800b890:	0800bef7 	.word	0x0800bef7
 800b894:	0800d345 	.word	0x0800d345
 800b898:	0800d3dd 	.word	0x0800d3dd
 800b89c:	80002400 	.word	0x80002400
 800b8a0:	0800ba87 	.word	0x0800ba87

0800b8a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d005      	beq.n	800b8d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	68f9      	ldr	r1, [r7, #12]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	4798      	blx	r3
  }
}
 800b8d0:	bf00      	nop
 800b8d2:	3710      	adds	r7, #16
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	0a1b      	lsrs	r3, r3, #8
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d010      	beq.n	800b91e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	09db      	lsrs	r3, r3, #7
 800b900:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00a      	beq.n	800b91e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b90c:	f043 0201 	orr.w	r2, r3, #1
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b91c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	0a9b      	lsrs	r3, r3, #10
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d010      	beq.n	800b94c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	09db      	lsrs	r3, r3, #7
 800b92e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00a      	beq.n	800b94c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b93a:	f043 0208 	orr.w	r2, r3, #8
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b94a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	0a5b      	lsrs	r3, r3, #9
 800b950:	f003 0301 	and.w	r3, r3, #1
 800b954:	2b00      	cmp	r3, #0
 800b956:	d010      	beq.n	800b97a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	09db      	lsrs	r3, r3, #7
 800b95c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00a      	beq.n	800b97a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b968:	f043 0202 	orr.w	r2, r3, #2
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b978:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f003 030b 	and.w	r3, r3, #11
 800b986:	2b00      	cmp	r3, #0
 800b988:	d003      	beq.n	800b992 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b98a:	68f9      	ldr	r1, [r7, #12]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f001 fb53 	bl	800d038 <I2C_ITError>
  }
}
 800b992:	bf00      	nop
 800b994:	3718      	adds	r7, #24
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b9a2:	bf00      	nop
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b9b6:	bf00      	nop
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b083      	sub	sp, #12
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b9de:	bf00      	nop
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	70fb      	strb	r3, [r7, #3]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba06:	b480      	push	{r7}
 800ba08:	b083      	sub	sp, #12
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ba0e:	bf00      	nop
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ba22:	bf00      	nop
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b083      	sub	sp, #12
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ba36:	bf00      	nop
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ba5e:	bf00      	nop
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba78:	b2db      	uxtb	r3, r3
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b088      	sub	sp, #32
 800ba8a:	af02      	add	r7, sp, #8
 800ba8c:	60f8      	str	r0, [r7, #12]
 800ba8e:	60b9      	str	r1, [r7, #8]
 800ba90:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d101      	bne.n	800baa4 <I2C_Master_ISR_IT+0x1e>
 800baa0:	2302      	movs	r3, #2
 800baa2:	e120      	b.n	800bce6 <I2C_Master_ISR_IT+0x260>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	091b      	lsrs	r3, r3, #4
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d013      	beq.n	800bae0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	091b      	lsrs	r3, r3, #4
 800babc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00d      	beq.n	800bae0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2210      	movs	r2, #16
 800baca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad0:	f043 0204 	orr.w	r2, r3, #4
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f001 fbc4 	bl	800d266 <I2C_Flush_TXDR>
 800bade:	e0ed      	b.n	800bcbc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	089b      	lsrs	r3, r3, #2
 800bae4:	f003 0301 	and.w	r3, r3, #1
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d023      	beq.n	800bb34 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	089b      	lsrs	r3, r3, #2
 800baf0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d01d      	beq.n	800bb34 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f023 0304 	bic.w	r3, r3, #4
 800bafe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	b2d2      	uxtb	r2, r2
 800bb0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb32:	e0c3      	b.n	800bcbc <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	099b      	lsrs	r3, r3, #6
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d12a      	bne.n	800bb96 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	085b      	lsrs	r3, r3, #1
 800bb44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d024      	beq.n	800bb96 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	085b      	lsrs	r3, r3, #1
 800bb50:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d01e      	beq.n	800bb96 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f000 80ac 	beq.w	800bcbc <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	781a      	ldrb	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800bb94:	e092      	b.n	800bcbc <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	09db      	lsrs	r3, r3, #7
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d05d      	beq.n	800bc5e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	099b      	lsrs	r3, r3, #6
 800bba6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d057      	beq.n	800bc5e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d040      	beq.n	800bc3a <I2C_Master_ISR_IT+0x1b4>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d13c      	bne.n	800bc3a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbcc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	2bff      	cmp	r3, #255	; 0xff
 800bbd6:	d90e      	bls.n	800bbf6 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	22ff      	movs	r2, #255	; 0xff
 800bbdc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	8a79      	ldrh	r1, [r7, #18]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f001 fd4c 	bl	800d68c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbf4:	e032      	b.n	800bc5c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc08:	d00b      	beq.n	800bc22 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	8a79      	ldrh	r1, [r7, #18]
 800bc16:	2000      	movs	r0, #0
 800bc18:	9000      	str	r0, [sp, #0]
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f001 fd36 	bl	800d68c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc20:	e01c      	b.n	800bc5c <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	8a79      	ldrh	r1, [r7, #18]
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f001 fd2a 	bl	800d68c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc38:	e010      	b.n	800bc5c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc48:	d003      	beq.n	800bc52 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f000 fdde 	bl	800c80c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc50:	e034      	b.n	800bcbc <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bc52:	2140      	movs	r1, #64	; 0x40
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f001 f9ef 	bl	800d038 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc5a:	e02f      	b.n	800bcbc <I2C_Master_ISR_IT+0x236>
 800bc5c:	e02e      	b.n	800bcbc <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	099b      	lsrs	r3, r3, #6
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d028      	beq.n	800bcbc <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	099b      	lsrs	r3, r3, #6
 800bc6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d022      	beq.n	800bcbc <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d119      	bne.n	800bcb4 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc8e:	d015      	beq.n	800bcbc <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc98:	d108      	bne.n	800bcac <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bca8:	605a      	str	r2, [r3, #4]
 800bcaa:	e007      	b.n	800bcbc <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 fdad 	bl	800c80c <I2C_ITMasterSeqCplt>
 800bcb2:	e003      	b.n	800bcbc <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bcb4:	2140      	movs	r1, #64	; 0x40
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f001 f9be 	bl	800d038 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	095b      	lsrs	r3, r3, #5
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d009      	beq.n	800bcdc <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	095b      	lsrs	r3, r3, #5
 800bccc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bcd4:	6979      	ldr	r1, [r7, #20]
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 fe34 	bl	800c944 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b086      	sub	sp, #24
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	60f8      	str	r0, [r7, #12]
 800bcf6:	60b9      	str	r1, [r7, #8]
 800bcf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d101      	bne.n	800bd12 <I2C_Slave_ISR_IT+0x24>
 800bd0e:	2302      	movs	r3, #2
 800bd10:	e0ed      	b.n	800beee <I2C_Slave_ISR_IT+0x200>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	095b      	lsrs	r3, r3, #5
 800bd1e:	f003 0301 	and.w	r3, r3, #1
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00a      	beq.n	800bd3c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	095b      	lsrs	r3, r3, #5
 800bd2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d004      	beq.n	800bd3c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bd32:	6939      	ldr	r1, [r7, #16]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 fecf 	bl	800cad8 <I2C_ITSlaveCplt>
 800bd3a:	e0d3      	b.n	800bee4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	091b      	lsrs	r3, r3, #4
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d04d      	beq.n	800bde4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	091b      	lsrs	r3, r3, #4
 800bd4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d047      	beq.n	800bde4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d128      	bne.n	800bdb0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b28      	cmp	r3, #40	; 0x28
 800bd68:	d108      	bne.n	800bd7c <I2C_Slave_ISR_IT+0x8e>
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd70:	d104      	bne.n	800bd7c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bd72:	6939      	ldr	r1, [r7, #16]
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f001 f909 	bl	800cf8c <I2C_ITListenCplt>
 800bd7a:	e032      	b.n	800bde2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b29      	cmp	r3, #41	; 0x29
 800bd86:	d10e      	bne.n	800bda6 <I2C_Slave_ISR_IT+0xb8>
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd8e:	d00a      	beq.n	800bda6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2210      	movs	r2, #16
 800bd96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f001 fa64 	bl	800d266 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f000 fd71 	bl	800c886 <I2C_ITSlaveSeqCplt>
 800bda4:	e01d      	b.n	800bde2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2210      	movs	r2, #16
 800bdac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bdae:	e096      	b.n	800bede <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2210      	movs	r2, #16
 800bdb6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdbc:	f043 0204 	orr.w	r2, r3, #4
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d004      	beq.n	800bdd4 <I2C_Slave_ISR_IT+0xe6>
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bdd0:	f040 8085 	bne.w	800bede <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd8:	4619      	mov	r1, r3
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f001 f92c 	bl	800d038 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bde0:	e07d      	b.n	800bede <I2C_Slave_ISR_IT+0x1f0>
 800bde2:	e07c      	b.n	800bede <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	089b      	lsrs	r3, r3, #2
 800bde8:	f003 0301 	and.w	r3, r3, #1
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d030      	beq.n	800be52 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	089b      	lsrs	r3, r3, #2
 800bdf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d02a      	beq.n	800be52 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be00:	b29b      	uxth	r3, r3
 800be02:	2b00      	cmp	r3, #0
 800be04:	d018      	beq.n	800be38 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	b2d2      	uxtb	r2, r2
 800be12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be22:	3b01      	subs	r3, #1
 800be24:	b29a      	uxth	r2, r3
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be2e:	b29b      	uxth	r3, r3
 800be30:	3b01      	subs	r3, #1
 800be32:	b29a      	uxth	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d14f      	bne.n	800bee2 <I2C_Slave_ISR_IT+0x1f4>
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be48:	d04b      	beq.n	800bee2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 fd1b 	bl	800c886 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800be50:	e047      	b.n	800bee2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	08db      	lsrs	r3, r3, #3
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	08db      	lsrs	r3, r3, #3
 800be62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800be6a:	6939      	ldr	r1, [r7, #16]
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f000 fc49 	bl	800c704 <I2C_ITAddrCplt>
 800be72:	e037      	b.n	800bee4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	085b      	lsrs	r3, r3, #1
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d031      	beq.n	800bee4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	085b      	lsrs	r3, r3, #1
 800be84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d02b      	beq.n	800bee4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be90:	b29b      	uxth	r3, r3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d018      	beq.n	800bec8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	781a      	ldrb	r2, [r3, #0]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	3b01      	subs	r3, #1
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bebe:	3b01      	subs	r3, #1
 800bec0:	b29a      	uxth	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	851a      	strh	r2, [r3, #40]	; 0x28
 800bec6:	e00d      	b.n	800bee4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bece:	d002      	beq.n	800bed6 <I2C_Slave_ISR_IT+0x1e8>
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d106      	bne.n	800bee4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f000 fcd5 	bl	800c886 <I2C_ITSlaveSeqCplt>
 800bedc:	e002      	b.n	800bee4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bede:	bf00      	nop
 800bee0:	e000      	b.n	800bee4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bee2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b088      	sub	sp, #32
 800befa:	af02      	add	r7, sp, #8
 800befc:	60f8      	str	r0, [r7, #12]
 800befe:	60b9      	str	r1, [r7, #8]
 800bf00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d101      	bne.n	800bf10 <I2C_Master_ISR_DMA+0x1a>
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	e0e1      	b.n	800c0d4 <I2C_Master_ISR_DMA+0x1de>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	091b      	lsrs	r3, r3, #4
 800bf1c:	f003 0301 	and.w	r3, r3, #1
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d017      	beq.n	800bf54 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	091b      	lsrs	r3, r3, #4
 800bf28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d011      	beq.n	800bf54 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2210      	movs	r2, #16
 800bf36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3c:	f043 0204 	orr.w	r2, r3, #4
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bf44:	2120      	movs	r1, #32
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f001 fbd2 	bl	800d6f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f001 f98a 	bl	800d266 <I2C_Flush_TXDR>
 800bf52:	e0ba      	b.n	800c0ca <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	09db      	lsrs	r3, r3, #7
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d072      	beq.n	800c046 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	099b      	lsrs	r3, r3, #6
 800bf64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d06c      	beq.n	800c046 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf7a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d04e      	beq.n	800c024 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf92:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	2bff      	cmp	r3, #255	; 0xff
 800bf9c:	d906      	bls.n	800bfac <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	22ff      	movs	r2, #255	; 0xff
 800bfa2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bfa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfa8:	617b      	str	r3, [r7, #20]
 800bfaa:	e010      	b.n	800bfce <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bfbe:	d003      	beq.n	800bfc8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	617b      	str	r3, [r7, #20]
 800bfc6:	e002      	b.n	800bfce <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bfc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfcc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	8a79      	ldrh	r1, [r7, #18]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f001 fb55 	bl	800d68c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b22      	cmp	r3, #34	; 0x22
 800bffe:	d108      	bne.n	800c012 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c00e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c010:	e05b      	b.n	800c0ca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c020:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c022:	e052      	b.n	800c0ca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c02e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c032:	d003      	beq.n	800c03c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f000 fbe9 	bl	800c80c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c03a:	e046      	b.n	800c0ca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c03c:	2140      	movs	r1, #64	; 0x40
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f000 fffa 	bl	800d038 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c044:	e041      	b.n	800c0ca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	099b      	lsrs	r3, r3, #6
 800c04a:	f003 0301 	and.w	r3, r3, #1
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d029      	beq.n	800c0a6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	099b      	lsrs	r3, r3, #6
 800c056:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d023      	beq.n	800c0a6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c062:	b29b      	uxth	r3, r3
 800c064:	2b00      	cmp	r3, #0
 800c066:	d119      	bne.n	800c09c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c076:	d027      	beq.n	800c0c8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c080:	d108      	bne.n	800c094 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	685a      	ldr	r2, [r3, #4]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c090:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c092:	e019      	b.n	800c0c8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f000 fbb9 	bl	800c80c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c09a:	e015      	b.n	800c0c8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c09c:	2140      	movs	r1, #64	; 0x40
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 ffca 	bl	800d038 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c0a4:	e010      	b.n	800c0c8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	095b      	lsrs	r3, r3, #5
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00b      	beq.n	800c0ca <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	095b      	lsrs	r3, r3, #5
 800c0b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d005      	beq.n	800c0ca <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c0be:	68b9      	ldr	r1, [r7, #8]
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f000 fc3f 	bl	800c944 <I2C_ITMasterCplt>
 800c0c6:	e000      	b.n	800c0ca <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c0c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b088      	sub	sp, #32
 800c0e0:	af02      	add	r7, sp, #8
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c0e8:	4b92      	ldr	r3, [pc, #584]	; (800c334 <I2C_Mem_ISR_DMA+0x258>)
 800c0ea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d101      	bne.n	800c0fa <I2C_Mem_ISR_DMA+0x1e>
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	e118      	b.n	800c32c <I2C_Mem_ISR_DMA+0x250>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	091b      	lsrs	r3, r3, #4
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d017      	beq.n	800c13e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	091b      	lsrs	r3, r3, #4
 800c112:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c116:	2b00      	cmp	r3, #0
 800c118:	d011      	beq.n	800c13e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2210      	movs	r2, #16
 800c120:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c126:	f043 0204 	orr.w	r2, r3, #4
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c12e:	2120      	movs	r1, #32
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	f001 fadd 	bl	800d6f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f001 f895 	bl	800d266 <I2C_Flush_TXDR>
 800c13c:	e0f1      	b.n	800c322 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	085b      	lsrs	r3, r3, #1
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00f      	beq.n	800c16a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	085b      	lsrs	r3, r3, #1
 800c14e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c152:	2b00      	cmp	r3, #0
 800c154:	d009      	beq.n	800c16a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c15e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c166:	651a      	str	r2, [r3, #80]	; 0x50
 800c168:	e0db      	b.n	800c322 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	09db      	lsrs	r3, r3, #7
 800c16e:	f003 0301 	and.w	r3, r3, #1
 800c172:	2b00      	cmp	r3, #0
 800c174:	d060      	beq.n	800c238 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	099b      	lsrs	r3, r3, #6
 800c17a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d05a      	beq.n	800c238 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c182:	2101      	movs	r1, #1
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f001 fb37 	bl	800d7f8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c18a:	2110      	movs	r1, #16
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f001 faaf 	bl	800d6f0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c196:	b29b      	uxth	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d048      	beq.n	800c22e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	2bff      	cmp	r3, #255	; 0xff
 800c1a4:	d910      	bls.n	800c1c8 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	22ff      	movs	r2, #255	; 0xff
 800c1aa:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b0:	b299      	uxth	r1, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f001 fa63 	bl	800d68c <I2C_TransferConfig>
 800c1c6:	e011      	b.n	800c1ec <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1d6:	b299      	uxth	r1, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	2300      	movs	r3, #0
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f001 fa50 	bl	800d68c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b22      	cmp	r3, #34	; 0x22
 800c208:	d108      	bne.n	800c21c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c218:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c21a:	e082      	b.n	800c322 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c22a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c22c:	e079      	b.n	800c322 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c22e:	2140      	movs	r1, #64	; 0x40
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f000 ff01 	bl	800d038 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c236:	e074      	b.n	800c322 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	099b      	lsrs	r3, r3, #6
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	2b00      	cmp	r3, #0
 800c242:	d05e      	beq.n	800c302 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	099b      	lsrs	r3, r3, #6
 800c248:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d058      	beq.n	800c302 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c250:	2101      	movs	r1, #1
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f001 fad0 	bl	800d7f8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c258:	2110      	movs	r1, #16
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f001 fa48 	bl	800d6f0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c266:	b2db      	uxtb	r3, r3
 800c268:	2b22      	cmp	r3, #34	; 0x22
 800c26a:	d101      	bne.n	800c270 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c26c:	4b32      	ldr	r3, [pc, #200]	; (800c338 <I2C_Mem_ISR_DMA+0x25c>)
 800c26e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c274:	b29b      	uxth	r3, r3
 800c276:	2bff      	cmp	r3, #255	; 0xff
 800c278:	d910      	bls.n	800c29c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	22ff      	movs	r2, #255	; 0xff
 800c27e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c284:	b299      	uxth	r1, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f001 f9f9 	bl	800d68c <I2C_TransferConfig>
 800c29a:	e011      	b.n	800c2c0 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2aa:	b299      	uxth	r1, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f001 f9e6 	bl	800d68c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	2b22      	cmp	r3, #34	; 0x22
 800c2dc:	d108      	bne.n	800c2f0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2ec:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2ee:	e018      	b.n	800c322 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2fe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c300:	e00f      	b.n	800c322 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	095b      	lsrs	r3, r3, #5
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d009      	beq.n	800c322 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	095b      	lsrs	r3, r3, #5
 800c312:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c316:	2b00      	cmp	r3, #0
 800c318:	d003      	beq.n	800c322 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c31a:	68b9      	ldr	r1, [r7, #8]
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f000 fb11 	bl	800c944 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3718      	adds	r7, #24
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	80002000 	.word	0x80002000
 800c338:	80002400 	.word	0x80002400

0800c33c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c34e:	2300      	movs	r3, #0
 800c350:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d101      	bne.n	800c360 <I2C_Slave_ISR_DMA+0x24>
 800c35c:	2302      	movs	r3, #2
 800c35e:	e1cc      	b.n	800c6fa <I2C_Slave_ISR_DMA+0x3be>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	095b      	lsrs	r3, r3, #5
 800c36c:	f003 0301 	and.w	r3, r3, #1
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00a      	beq.n	800c38a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	095b      	lsrs	r3, r3, #5
 800c378:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d004      	beq.n	800c38a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f000 fba8 	bl	800cad8 <I2C_ITSlaveCplt>
 800c388:	e1b2      	b.n	800c6f0 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	091b      	lsrs	r3, r3, #4
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 819c 	beq.w	800c6d0 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	091b      	lsrs	r3, r3, #4
 800c39c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 8195 	beq.w	800c6d0 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	0b9b      	lsrs	r3, r3, #14
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	0bdb      	lsrs	r3, r3, #15
 800c3b6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 8181 	beq.w	800c6c2 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d07c      	beq.n	800c4c2 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	0bdb      	lsrs	r3, r3, #15
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d076      	beq.n	800c4c2 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a75      	ldr	r2, [pc, #468]	; (800c5b0 <I2C_Slave_ISR_DMA+0x274>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d059      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a73      	ldr	r2, [pc, #460]	; (800c5b4 <I2C_Slave_ISR_DMA+0x278>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d053      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a71      	ldr	r2, [pc, #452]	; (800c5b8 <I2C_Slave_ISR_DMA+0x27c>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d04d      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a6f      	ldr	r2, [pc, #444]	; (800c5bc <I2C_Slave_ISR_DMA+0x280>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d047      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a6d      	ldr	r2, [pc, #436]	; (800c5c0 <I2C_Slave_ISR_DMA+0x284>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d041      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a6b      	ldr	r2, [pc, #428]	; (800c5c4 <I2C_Slave_ISR_DMA+0x288>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d03b      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a69      	ldr	r2, [pc, #420]	; (800c5c8 <I2C_Slave_ISR_DMA+0x28c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d035      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a67      	ldr	r2, [pc, #412]	; (800c5cc <I2C_Slave_ISR_DMA+0x290>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d02f      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a65      	ldr	r2, [pc, #404]	; (800c5d0 <I2C_Slave_ISR_DMA+0x294>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d029      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a63      	ldr	r2, [pc, #396]	; (800c5d4 <I2C_Slave_ISR_DMA+0x298>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d023      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a61      	ldr	r2, [pc, #388]	; (800c5d8 <I2C_Slave_ISR_DMA+0x29c>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d01d      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a5f      	ldr	r2, [pc, #380]	; (800c5dc <I2C_Slave_ISR_DMA+0x2a0>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d017      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a5d      	ldr	r2, [pc, #372]	; (800c5e0 <I2C_Slave_ISR_DMA+0x2a4>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d011      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a5b      	ldr	r2, [pc, #364]	; (800c5e4 <I2C_Slave_ISR_DMA+0x2a8>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d00b      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a59      	ldr	r2, [pc, #356]	; (800c5e8 <I2C_Slave_ISR_DMA+0x2ac>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d005      	beq.n	800c494 <I2C_Slave_ISR_DMA+0x158>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a57      	ldr	r2, [pc, #348]	; (800c5ec <I2C_Slave_ISR_DMA+0x2b0>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d109      	bne.n	800c4a8 <I2C_Slave_ISR_DMA+0x16c>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	bf0c      	ite	eq
 800c4a0:	2301      	moveq	r3, #1
 800c4a2:	2300      	movne	r3, #0
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	e008      	b.n	800c4ba <I2C_Slave_ISR_DMA+0x17e>
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	bf0c      	ite	eq
 800c4b4:	2301      	moveq	r3, #1
 800c4b6:	2300      	movne	r3, #0
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 809f 	beq.w	800c60a <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	0b9b      	lsrs	r3, r3, #14
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 8098 	beq.w	800c60a <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a33      	ldr	r2, [pc, #204]	; (800c5b0 <I2C_Slave_ISR_DMA+0x274>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d059      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a31      	ldr	r2, [pc, #196]	; (800c5b4 <I2C_Slave_ISR_DMA+0x278>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d053      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a2f      	ldr	r2, [pc, #188]	; (800c5b8 <I2C_Slave_ISR_DMA+0x27c>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d04d      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a2d      	ldr	r2, [pc, #180]	; (800c5bc <I2C_Slave_ISR_DMA+0x280>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d047      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a2b      	ldr	r2, [pc, #172]	; (800c5c0 <I2C_Slave_ISR_DMA+0x284>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d041      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a29      	ldr	r2, [pc, #164]	; (800c5c4 <I2C_Slave_ISR_DMA+0x288>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d03b      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a27      	ldr	r2, [pc, #156]	; (800c5c8 <I2C_Slave_ISR_DMA+0x28c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d035      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a25      	ldr	r2, [pc, #148]	; (800c5cc <I2C_Slave_ISR_DMA+0x290>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d02f      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a23      	ldr	r2, [pc, #140]	; (800c5d0 <I2C_Slave_ISR_DMA+0x294>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d029      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a21      	ldr	r2, [pc, #132]	; (800c5d4 <I2C_Slave_ISR_DMA+0x298>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d023      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a1f      	ldr	r2, [pc, #124]	; (800c5d8 <I2C_Slave_ISR_DMA+0x29c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d01d      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a1d      	ldr	r2, [pc, #116]	; (800c5dc <I2C_Slave_ISR_DMA+0x2a0>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d017      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a1b      	ldr	r2, [pc, #108]	; (800c5e0 <I2C_Slave_ISR_DMA+0x2a4>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d011      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a19      	ldr	r2, [pc, #100]	; (800c5e4 <I2C_Slave_ISR_DMA+0x2a8>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d00b      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a17      	ldr	r2, [pc, #92]	; (800c5e8 <I2C_Slave_ISR_DMA+0x2ac>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d005      	beq.n	800c59a <I2C_Slave_ISR_DMA+0x25e>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a15      	ldr	r2, [pc, #84]	; (800c5ec <I2C_Slave_ISR_DMA+0x2b0>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d12a      	bne.n	800c5f0 <I2C_Slave_ISR_DMA+0x2b4>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	bf0c      	ite	eq
 800c5a6:	2301      	moveq	r3, #1
 800c5a8:	2300      	movne	r3, #0
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	e029      	b.n	800c602 <I2C_Slave_ISR_DMA+0x2c6>
 800c5ae:	bf00      	nop
 800c5b0:	40020010 	.word	0x40020010
 800c5b4:	40020028 	.word	0x40020028
 800c5b8:	40020040 	.word	0x40020040
 800c5bc:	40020058 	.word	0x40020058
 800c5c0:	40020070 	.word	0x40020070
 800c5c4:	40020088 	.word	0x40020088
 800c5c8:	400200a0 	.word	0x400200a0
 800c5cc:	400200b8 	.word	0x400200b8
 800c5d0:	40020410 	.word	0x40020410
 800c5d4:	40020428 	.word	0x40020428
 800c5d8:	40020440 	.word	0x40020440
 800c5dc:	40020458 	.word	0x40020458
 800c5e0:	40020470 	.word	0x40020470
 800c5e4:	40020488 	.word	0x40020488
 800c5e8:	400204a0 	.word	0x400204a0
 800c5ec:	400204b8 	.word	0x400204b8
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	bf0c      	ite	eq
 800c5fc:	2301      	moveq	r3, #1
 800c5fe:	2300      	movne	r3, #0
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c606:	2301      	movs	r3, #1
 800c608:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d128      	bne.n	800c662 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b28      	cmp	r3, #40	; 0x28
 800c61a:	d108      	bne.n	800c62e <I2C_Slave_ISR_DMA+0x2f2>
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c622:	d104      	bne.n	800c62e <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c624:	68b9      	ldr	r1, [r7, #8]
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f000 fcb0 	bl	800cf8c <I2C_ITListenCplt>
 800c62c:	e048      	b.n	800c6c0 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c634:	b2db      	uxtb	r3, r3
 800c636:	2b29      	cmp	r3, #41	; 0x29
 800c638:	d10e      	bne.n	800c658 <I2C_Slave_ISR_DMA+0x31c>
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c640:	d00a      	beq.n	800c658 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2210      	movs	r2, #16
 800c648:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f000 fe0b 	bl	800d266 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 f918 	bl	800c886 <I2C_ITSlaveSeqCplt>
 800c656:	e033      	b.n	800c6c0 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2210      	movs	r2, #16
 800c65e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c660:	e034      	b.n	800c6cc <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2210      	movs	r2, #16
 800c668:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c66e:	f043 0204 	orr.w	r2, r3, #4
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c67c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d003      	beq.n	800c68c <I2C_Slave_ISR_DMA+0x350>
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c68a:	d11f      	bne.n	800c6cc <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c68c:	7dfb      	ldrb	r3, [r7, #23]
 800c68e:	2b21      	cmp	r3, #33	; 0x21
 800c690:	d002      	beq.n	800c698 <I2C_Slave_ISR_DMA+0x35c>
 800c692:	7dfb      	ldrb	r3, [r7, #23]
 800c694:	2b29      	cmp	r3, #41	; 0x29
 800c696:	d103      	bne.n	800c6a0 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2221      	movs	r2, #33	; 0x21
 800c69c:	631a      	str	r2, [r3, #48]	; 0x30
 800c69e:	e008      	b.n	800c6b2 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	2b22      	cmp	r3, #34	; 0x22
 800c6a4:	d002      	beq.n	800c6ac <I2C_Slave_ISR_DMA+0x370>
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6aa:	d102      	bne.n	800c6b2 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2222      	movs	r2, #34	; 0x22
 800c6b0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	f000 fcbd 	bl	800d038 <I2C_ITError>
      if (treatdmanack == 1U)
 800c6be:	e005      	b.n	800c6cc <I2C_Slave_ISR_DMA+0x390>
 800c6c0:	e004      	b.n	800c6cc <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2210      	movs	r2, #16
 800c6c8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6ca:	e011      	b.n	800c6f0 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c6cc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6ce:	e00f      	b.n	800c6f0 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	08db      	lsrs	r3, r3, #3
 800c6d4:	f003 0301 	and.w	r3, r3, #1
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d009      	beq.n	800c6f0 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	08db      	lsrs	r3, r3, #3
 800c6e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d003      	beq.n	800c6f0 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c6e8:	68b9      	ldr	r1, [r7, #8]
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f000 f80a 	bl	800c704 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3720      	adds	r7, #32
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop

0800c704 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c714:	b2db      	uxtb	r3, r3
 800c716:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c71a:	2b28      	cmp	r3, #40	; 0x28
 800c71c:	d16a      	bne.n	800c7f4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	0c1b      	lsrs	r3, r3, #16
 800c726:	b2db      	uxtb	r3, r3
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	0c1b      	lsrs	r3, r3, #16
 800c736:	b29b      	uxth	r3, r3
 800c738:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c73c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	b29b      	uxth	r3, r3
 800c746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c74a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	b29b      	uxth	r3, r3
 800c754:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c758:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d138      	bne.n	800c7d4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c762:	897b      	ldrh	r3, [r7, #10]
 800c764:	09db      	lsrs	r3, r3, #7
 800c766:	b29a      	uxth	r2, r3
 800c768:	89bb      	ldrh	r3, [r7, #12]
 800c76a:	4053      	eors	r3, r2
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	f003 0306 	and.w	r3, r3, #6
 800c772:	2b00      	cmp	r3, #0
 800c774:	d11c      	bne.n	800c7b0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c776:	897b      	ldrh	r3, [r7, #10]
 800c778:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d13b      	bne.n	800c804 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2208      	movs	r2, #8
 800c798:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c7a2:	89ba      	ldrh	r2, [r7, #12]
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7ff f91e 	bl	800b9ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c7ae:	e029      	b.n	800c804 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c7b0:	893b      	ldrh	r3, [r7, #8]
 800c7b2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c7b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 f81d 	bl	800d7f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c7c6:	89ba      	ldrh	r2, [r7, #12]
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff f90c 	bl	800b9ea <HAL_I2C_AddrCallback>
}
 800c7d2:	e017      	b.n	800c804 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c7d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f001 f80d 	bl	800d7f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c7e6:	89ba      	ldrh	r2, [r7, #12]
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7ff f8fc 	bl	800b9ea <HAL_I2C_AddrCallback>
}
 800c7f2:	e007      	b.n	800c804 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2208      	movs	r2, #8
 800c7fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c804:	bf00      	nop
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c822:	b2db      	uxtb	r3, r3
 800c824:	2b21      	cmp	r3, #33	; 0x21
 800c826:	d115      	bne.n	800c854 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2220      	movs	r2, #32
 800c82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2211      	movs	r2, #17
 800c834:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c83c:	2101      	movs	r1, #1
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 ffda 	bl	800d7f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff f8a4 	bl	800b99a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c852:	e014      	b.n	800c87e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2220      	movs	r2, #32
 800c858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2212      	movs	r2, #18
 800c860:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c868:	2102      	movs	r1, #2
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 ffc4 	bl	800d7f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f7ff f898 	bl	800b9ae <HAL_I2C_MasterRxCpltCallback>
}
 800c87e:	bf00      	nop
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b084      	sub	sp, #16
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	0b9b      	lsrs	r3, r3, #14
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d008      	beq.n	800c8bc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	e00d      	b.n	800c8d8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	0bdb      	lsrs	r3, r3, #15
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d007      	beq.n	800c8d8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c8d6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b29      	cmp	r3, #41	; 0x29
 800c8e2:	d112      	bne.n	800c90a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2228      	movs	r2, #40	; 0x28
 800c8e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2221      	movs	r2, #33	; 0x21
 800c8f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c8f2:	2101      	movs	r1, #1
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 ff7f 	bl	800d7f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f7ff f85d 	bl	800b9c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c908:	e017      	b.n	800c93a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c910:	b2db      	uxtb	r3, r3
 800c912:	2b2a      	cmp	r3, #42	; 0x2a
 800c914:	d111      	bne.n	800c93a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2228      	movs	r2, #40	; 0x28
 800c91a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2222      	movs	r2, #34	; 0x22
 800c922:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c924:	2102      	movs	r1, #2
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 ff66 	bl	800d7f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff f84e 	bl	800b9d6 <HAL_I2C_SlaveRxCpltCallback>
}
 800c93a:	bf00      	nop
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
	...

0800c944 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2220      	movs	r2, #32
 800c958:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b21      	cmp	r3, #33	; 0x21
 800c964:	d107      	bne.n	800c976 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c966:	2101      	movs	r1, #1
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 ff45 	bl	800d7f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2211      	movs	r2, #17
 800c972:	631a      	str	r2, [r3, #48]	; 0x30
 800c974:	e00c      	b.n	800c990 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b22      	cmp	r3, #34	; 0x22
 800c980:	d106      	bne.n	800c990 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c982:	2102      	movs	r1, #2
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 ff37 	bl	800d7f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2212      	movs	r2, #18
 800c98e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6859      	ldr	r1, [r3, #4]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	4b4d      	ldr	r3, [pc, #308]	; (800cad0 <I2C_ITMasterCplt+0x18c>)
 800c99c:	400b      	ands	r3, r1
 800c99e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a4a      	ldr	r2, [pc, #296]	; (800cad4 <I2C_ITMasterCplt+0x190>)
 800c9aa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	091b      	lsrs	r3, r3, #4
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d009      	beq.n	800c9cc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2210      	movs	r2, #16
 800c9be:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9c4:	f043 0204 	orr.w	r2, r3, #4
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b60      	cmp	r3, #96	; 0x60
 800c9d6:	d10b      	bne.n	800c9f0 <I2C_ITMasterCplt+0xac>
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	089b      	lsrs	r3, r3, #2
 800c9dc:	f003 0301 	and.w	r3, r3, #1
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d005      	beq.n	800c9f0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fc38 	bl	800d266 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9fa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b60      	cmp	r3, #96	; 0x60
 800ca06:	d002      	beq.n	800ca0e <I2C_ITMasterCplt+0xca>
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d006      	beq.n	800ca1c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fb0f 	bl	800d038 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ca1a:	e054      	b.n	800cac6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b21      	cmp	r3, #33	; 0x21
 800ca26:	d124      	bne.n	800ca72 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b40      	cmp	r3, #64	; 0x40
 800ca40:	d10b      	bne.n	800ca5a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7fe ffe1 	bl	800ba1a <HAL_I2C_MemTxCpltCallback>
}
 800ca58:	e035      	b.n	800cac6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7fe ff95 	bl	800b99a <HAL_I2C_MasterTxCpltCallback>
}
 800ca70:	e029      	b.n	800cac6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	2b22      	cmp	r3, #34	; 0x22
 800ca7c:	d123      	bne.n	800cac6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2220      	movs	r2, #32
 800ca82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	2b40      	cmp	r3, #64	; 0x40
 800ca96:	d10b      	bne.n	800cab0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f7fe ffc0 	bl	800ba2e <HAL_I2C_MemRxCpltCallback>
}
 800caae:	e00a      	b.n	800cac6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f7fe ff74 	bl	800b9ae <HAL_I2C_MasterRxCpltCallback>
}
 800cac6:	bf00      	nop
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	fe00e800 	.word	0xfe00e800
 800cad4:	ffff0000 	.word	0xffff0000

0800cad8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cafa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2220      	movs	r2, #32
 800cb02:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cb04:	7afb      	ldrb	r3, [r7, #11]
 800cb06:	2b21      	cmp	r3, #33	; 0x21
 800cb08:	d002      	beq.n	800cb10 <I2C_ITSlaveCplt+0x38>
 800cb0a:	7afb      	ldrb	r3, [r7, #11]
 800cb0c:	2b29      	cmp	r3, #41	; 0x29
 800cb0e:	d108      	bne.n	800cb22 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cb10:	f248 0101 	movw	r1, #32769	; 0x8001
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fe6f 	bl	800d7f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2221      	movs	r2, #33	; 0x21
 800cb1e:	631a      	str	r2, [r3, #48]	; 0x30
 800cb20:	e019      	b.n	800cb56 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cb22:	7afb      	ldrb	r3, [r7, #11]
 800cb24:	2b22      	cmp	r3, #34	; 0x22
 800cb26:	d002      	beq.n	800cb2e <I2C_ITSlaveCplt+0x56>
 800cb28:	7afb      	ldrb	r3, [r7, #11]
 800cb2a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb2c:	d108      	bne.n	800cb40 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cb2e:	f248 0102 	movw	r1, #32770	; 0x8002
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fe60 	bl	800d7f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2222      	movs	r2, #34	; 0x22
 800cb3c:	631a      	str	r2, [r3, #48]	; 0x30
 800cb3e:	e00a      	b.n	800cb56 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800cb40:	7afb      	ldrb	r3, [r7, #11]
 800cb42:	2b28      	cmp	r3, #40	; 0x28
 800cb44:	d107      	bne.n	800cb56 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cb46:	f248 0103 	movw	r1, #32771	; 0x8003
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fe54 	bl	800d7f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	685a      	ldr	r2, [r3, #4]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb64:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6859      	ldr	r1, [r3, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	4b80      	ldr	r3, [pc, #512]	; (800cd74 <I2C_ITSlaveCplt+0x29c>)
 800cb72:	400b      	ands	r3, r1
 800cb74:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fb75 	bl	800d266 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	0b9b      	lsrs	r3, r3, #14
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d07a      	beq.n	800cc7e <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cb96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8112 	beq.w	800cdc6 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a73      	ldr	r2, [pc, #460]	; (800cd78 <I2C_ITSlaveCplt+0x2a0>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d059      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a71      	ldr	r2, [pc, #452]	; (800cd7c <I2C_ITSlaveCplt+0x2a4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d053      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a6f      	ldr	r2, [pc, #444]	; (800cd80 <I2C_ITSlaveCplt+0x2a8>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d04d      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a6d      	ldr	r2, [pc, #436]	; (800cd84 <I2C_ITSlaveCplt+0x2ac>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d047      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a6b      	ldr	r2, [pc, #428]	; (800cd88 <I2C_ITSlaveCplt+0x2b0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d041      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a69      	ldr	r2, [pc, #420]	; (800cd8c <I2C_ITSlaveCplt+0x2b4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d03b      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a67      	ldr	r2, [pc, #412]	; (800cd90 <I2C_ITSlaveCplt+0x2b8>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d035      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a65      	ldr	r2, [pc, #404]	; (800cd94 <I2C_ITSlaveCplt+0x2bc>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d02f      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a63      	ldr	r2, [pc, #396]	; (800cd98 <I2C_ITSlaveCplt+0x2c0>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d029      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a61      	ldr	r2, [pc, #388]	; (800cd9c <I2C_ITSlaveCplt+0x2c4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d023      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a5f      	ldr	r2, [pc, #380]	; (800cda0 <I2C_ITSlaveCplt+0x2c8>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d01d      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a5d      	ldr	r2, [pc, #372]	; (800cda4 <I2C_ITSlaveCplt+0x2cc>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d017      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a5b      	ldr	r2, [pc, #364]	; (800cda8 <I2C_ITSlaveCplt+0x2d0>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d011      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a59      	ldr	r2, [pc, #356]	; (800cdac <I2C_ITSlaveCplt+0x2d4>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d00b      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a57      	ldr	r2, [pc, #348]	; (800cdb0 <I2C_ITSlaveCplt+0x2d8>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d005      	beq.n	800cc62 <I2C_ITSlaveCplt+0x18a>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a55      	ldr	r2, [pc, #340]	; (800cdb4 <I2C_ITSlaveCplt+0x2dc>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d105      	bne.n	800cc6e <I2C_ITSlaveCplt+0x196>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	e004      	b.n	800cc78 <I2C_ITSlaveCplt+0x1a0>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	8553      	strh	r3, [r2, #42]	; 0x2a
 800cc7c:	e0a3      	b.n	800cdc6 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	0bdb      	lsrs	r3, r3, #15
 800cc82:	f003 0301 	and.w	r3, r3, #1
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f000 809d 	beq.w	800cdc6 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc9a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 8090 	beq.w	800cdc6 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a32      	ldr	r2, [pc, #200]	; (800cd78 <I2C_ITSlaveCplt+0x2a0>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d059      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a30      	ldr	r2, [pc, #192]	; (800cd7c <I2C_ITSlaveCplt+0x2a4>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d053      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a2e      	ldr	r2, [pc, #184]	; (800cd80 <I2C_ITSlaveCplt+0x2a8>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d04d      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a2c      	ldr	r2, [pc, #176]	; (800cd84 <I2C_ITSlaveCplt+0x2ac>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d047      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a2a      	ldr	r2, [pc, #168]	; (800cd88 <I2C_ITSlaveCplt+0x2b0>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d041      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a28      	ldr	r2, [pc, #160]	; (800cd8c <I2C_ITSlaveCplt+0x2b4>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d03b      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a26      	ldr	r2, [pc, #152]	; (800cd90 <I2C_ITSlaveCplt+0x2b8>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d035      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a24      	ldr	r2, [pc, #144]	; (800cd94 <I2C_ITSlaveCplt+0x2bc>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d02f      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a22      	ldr	r2, [pc, #136]	; (800cd98 <I2C_ITSlaveCplt+0x2c0>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d029      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a20      	ldr	r2, [pc, #128]	; (800cd9c <I2C_ITSlaveCplt+0x2c4>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d023      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a1e      	ldr	r2, [pc, #120]	; (800cda0 <I2C_ITSlaveCplt+0x2c8>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d01d      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a1c      	ldr	r2, [pc, #112]	; (800cda4 <I2C_ITSlaveCplt+0x2cc>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d017      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a1a      	ldr	r2, [pc, #104]	; (800cda8 <I2C_ITSlaveCplt+0x2d0>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d011      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a18      	ldr	r2, [pc, #96]	; (800cdac <I2C_ITSlaveCplt+0x2d4>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d00b      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a16      	ldr	r2, [pc, #88]	; (800cdb0 <I2C_ITSlaveCplt+0x2d8>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d005      	beq.n	800cd66 <I2C_ITSlaveCplt+0x28e>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a14      	ldr	r2, [pc, #80]	; (800cdb4 <I2C_ITSlaveCplt+0x2dc>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d128      	bne.n	800cdb8 <I2C_ITSlaveCplt+0x2e0>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	e027      	b.n	800cdc2 <I2C_ITSlaveCplt+0x2ea>
 800cd72:	bf00      	nop
 800cd74:	fe00e800 	.word	0xfe00e800
 800cd78:	40020010 	.word	0x40020010
 800cd7c:	40020028 	.word	0x40020028
 800cd80:	40020040 	.word	0x40020040
 800cd84:	40020058 	.word	0x40020058
 800cd88:	40020070 	.word	0x40020070
 800cd8c:	40020088 	.word	0x40020088
 800cd90:	400200a0 	.word	0x400200a0
 800cd94:	400200b8 	.word	0x400200b8
 800cd98:	40020410 	.word	0x40020410
 800cd9c:	40020428 	.word	0x40020428
 800cda0:	40020440 	.word	0x40020440
 800cda4:	40020458 	.word	0x40020458
 800cda8:	40020470 	.word	0x40020470
 800cdac:	40020488 	.word	0x40020488
 800cdb0:	400204a0 	.word	0x400204a0
 800cdb4:	400204b8 	.word	0x400204b8
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	089b      	lsrs	r3, r3, #2
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d020      	beq.n	800ce14 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	f023 0304 	bic.w	r3, r3, #4
 800cdd8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde4:	b2d2      	uxtb	r2, r2
 800cde6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	1c5a      	adds	r2, r3, #1
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00c      	beq.n	800ce14 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d005      	beq.n	800ce2a <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce22:	f043 0204 	orr.w	r2, r3, #4
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	091b      	lsrs	r3, r3, #4
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d04a      	beq.n	800cecc <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	091b      	lsrs	r3, r3, #4
 800ce3a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d044      	beq.n	800cecc <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d128      	bne.n	800ce9e <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b28      	cmp	r3, #40	; 0x28
 800ce56:	d108      	bne.n	800ce6a <I2C_ITSlaveCplt+0x392>
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce5e:	d104      	bne.n	800ce6a <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ce60:	6979      	ldr	r1, [r7, #20]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f892 	bl	800cf8c <I2C_ITListenCplt>
 800ce68:	e030      	b.n	800cecc <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b29      	cmp	r3, #41	; 0x29
 800ce74:	d10e      	bne.n	800ce94 <I2C_ITSlaveCplt+0x3bc>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ce7c:	d00a      	beq.n	800ce94 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2210      	movs	r2, #16
 800ce84:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f9ed 	bl	800d266 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7ff fcfa 	bl	800c886 <I2C_ITSlaveSeqCplt>
 800ce92:	e01b      	b.n	800cecc <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2210      	movs	r2, #16
 800ce9a:	61da      	str	r2, [r3, #28]
 800ce9c:	e016      	b.n	800cecc <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2210      	movs	r2, #16
 800cea4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceaa:	f043 0204 	orr.w	r2, r3, #4
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d003      	beq.n	800cec0 <I2C_ITSlaveCplt+0x3e8>
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cebe:	d105      	bne.n	800cecc <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f8b6 	bl	800d038 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d010      	beq.n	800cf04 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 f8a5 	bl	800d038 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	2b28      	cmp	r3, #40	; 0x28
 800cef8:	d141      	bne.n	800cf7e <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cefa:	6979      	ldr	r1, [r7, #20]
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f845 	bl	800cf8c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf02:	e03c      	b.n	800cf7e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cf0c:	d014      	beq.n	800cf38 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff fcb9 	bl	800c886 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a1c      	ldr	r2, [pc, #112]	; (800cf88 <I2C_ITSlaveCplt+0x4b0>)
 800cf18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7fe fd68 	bl	800ba06 <HAL_I2C_ListenCpltCallback>
}
 800cf36:	e022      	b.n	800cf7e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	2b22      	cmp	r3, #34	; 0x22
 800cf42:	d10e      	bne.n	800cf62 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2220      	movs	r2, #32
 800cf48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f7fe fd3b 	bl	800b9d6 <HAL_I2C_SlaveRxCpltCallback>
}
 800cf60:	e00d      	b.n	800cf7e <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2220      	movs	r2, #32
 800cf66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7fe fd22 	bl	800b9c2 <HAL_I2C_SlaveTxCpltCallback>
}
 800cf7e:	bf00      	nop
 800cf80:	3718      	adds	r7, #24
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	ffff0000 	.word	0xffff0000

0800cf8c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a26      	ldr	r2, [pc, #152]	; (800d034 <I2C_ITListenCplt+0xa8>)
 800cf9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	089b      	lsrs	r3, r3, #2
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d022      	beq.n	800d00a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfce:	b2d2      	uxtb	r2, r2
 800cfd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd6:	1c5a      	adds	r2, r3, #1
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d012      	beq.n	800d00a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	3b01      	subs	r3, #1
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d002:	f043 0204 	orr.w	r2, r3, #4
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d00a:	f248 0103 	movw	r1, #32771	; 0x8003
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fbf2 	bl	800d7f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2210      	movs	r2, #16
 800d01a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7fe fcee 	bl	800ba06 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d02a:	bf00      	nop
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	ffff0000 	.word	0xffff0000

0800d038 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d048:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a6d      	ldr	r2, [pc, #436]	; (800d20c <I2C_ITError+0x1d4>)
 800d056:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	431a      	orrs	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d06a:	7bfb      	ldrb	r3, [r7, #15]
 800d06c:	2b28      	cmp	r3, #40	; 0x28
 800d06e:	d005      	beq.n	800d07c <I2C_ITError+0x44>
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	2b29      	cmp	r3, #41	; 0x29
 800d074:	d002      	beq.n	800d07c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d076:	7bfb      	ldrb	r3, [r7, #15]
 800d078:	2b2a      	cmp	r3, #42	; 0x2a
 800d07a:	d10b      	bne.n	800d094 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d07c:	2103      	movs	r1, #3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fbba 	bl	800d7f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2228      	movs	r2, #40	; 0x28
 800d088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a60      	ldr	r2, [pc, #384]	; (800d210 <I2C_ITError+0x1d8>)
 800d090:	635a      	str	r2, [r3, #52]	; 0x34
 800d092:	e030      	b.n	800d0f6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d094:	f248 0103 	movw	r1, #32771	; 0x8003
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fbad 	bl	800d7f8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 f8e1 	bl	800d266 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b60      	cmp	r3, #96	; 0x60
 800d0ae:	d01f      	beq.n	800d0f0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2220      	movs	r2, #32
 800d0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	f003 0320 	and.w	r3, r3, #32
 800d0c2:	2b20      	cmp	r3, #32
 800d0c4:	d114      	bne.n	800d0f0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	f003 0310 	and.w	r3, r3, #16
 800d0d0:	2b10      	cmp	r3, #16
 800d0d2:	d109      	bne.n	800d0e8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2210      	movs	r2, #16
 800d0da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0e0:	f043 0204 	orr.w	r2, r3, #4
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2220      	movs	r2, #32
 800d0ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d100:	2b00      	cmp	r3, #0
 800d102:	d039      	beq.n	800d178 <I2C_ITError+0x140>
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	2b11      	cmp	r3, #17
 800d108:	d002      	beq.n	800d110 <I2C_ITError+0xd8>
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	2b21      	cmp	r3, #33	; 0x21
 800d10e:	d133      	bne.n	800d178 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d11a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d11e:	d107      	bne.n	800d130 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d12e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d134:	4618      	mov	r0, r3
 800d136:	f7fd f857 	bl	800a1e8 <HAL_DMA_GetState>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d017      	beq.n	800d170 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d144:	4a33      	ldr	r2, [pc, #204]	; (800d214 <I2C_ITError+0x1dc>)
 800d146:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	4618      	mov	r0, r3
 800d156:	f7fb fed7 	bl	8008f08 <HAL_DMA_Abort_IT>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d04d      	beq.n	800d1fc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d16a:	4610      	mov	r0, r2
 800d16c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d16e:	e045      	b.n	800d1fc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 f851 	bl	800d218 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d176:	e041      	b.n	800d1fc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d039      	beq.n	800d1f4 <I2C_ITError+0x1bc>
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	2b12      	cmp	r3, #18
 800d184:	d002      	beq.n	800d18c <I2C_ITError+0x154>
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	2b22      	cmp	r3, #34	; 0x22
 800d18a:	d133      	bne.n	800d1f4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d19a:	d107      	bne.n	800d1ac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d1aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fd f819 	bl	800a1e8 <HAL_DMA_GetState>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d017      	beq.n	800d1ec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c0:	4a14      	ldr	r2, [pc, #80]	; (800d214 <I2C_ITError+0x1dc>)
 800d1c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fb fe99 	bl	8008f08 <HAL_DMA_Abort_IT>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d011      	beq.n	800d200 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1ea:	e009      	b.n	800d200 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 f813 	bl	800d218 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1f2:	e005      	b.n	800d200 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 f80f 	bl	800d218 <I2C_TreatErrorCallback>
  }
}
 800d1fa:	e002      	b.n	800d202 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d1fc:	bf00      	nop
 800d1fe:	e000      	b.n	800d202 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d200:	bf00      	nop
}
 800d202:	bf00      	nop
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	ffff0000 	.word	0xffff0000
 800d210:	0800bcef 	.word	0x0800bcef
 800d214:	0800d651 	.word	0x0800d651

0800d218 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b60      	cmp	r3, #96	; 0x60
 800d22a:	d10e      	bne.n	800d24a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2220      	movs	r2, #32
 800d230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7fe fc07 	bl	800ba56 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d248:	e009      	b.n	800d25e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7fe fbf2 	bl	800ba42 <HAL_I2C_ErrorCallback>
}
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d266:	b480      	push	{r7}
 800d268:	b083      	sub	sp, #12
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	f003 0302 	and.w	r3, r3, #2
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d103      	bne.n	800d284 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2200      	movs	r2, #0
 800d282:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	f003 0301 	and.w	r3, r3, #1
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d007      	beq.n	800d2a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	699a      	ldr	r2, [r3, #24]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f042 0201 	orr.w	r2, r2, #1
 800d2a0:	619a      	str	r2, [r3, #24]
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b084      	sub	sp, #16
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ba:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d2ca:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d104      	bne.n	800d2e0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d2d6:	2120      	movs	r1, #32
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 fa09 	bl	800d6f0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d2de:	e02d      	b.n	800d33c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d2e8:	441a      	add	r2, r3
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	2bff      	cmp	r3, #255	; 0xff
 800d2f6:	d903      	bls.n	800d300 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	22ff      	movs	r2, #255	; 0xff
 800d2fc:	851a      	strh	r2, [r3, #40]	; 0x28
 800d2fe:	e004      	b.n	800d30a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d304:	b29a      	uxth	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d312:	4619      	mov	r1, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3328      	adds	r3, #40	; 0x28
 800d31a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d320:	f7fb f86a 	bl	80083f8 <HAL_DMA_Start_IT>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d004      	beq.n	800d334 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d32a:	2110      	movs	r1, #16
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f7ff fe83 	bl	800d038 <I2C_ITError>
}
 800d332:	e003      	b.n	800d33c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d334:	2140      	movs	r1, #64	; 0x40
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f000 f9da 	bl	800d6f0 <I2C_Enable_IRQ>
}
 800d33c:	bf00      	nop
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d350:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d360:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d366:	b29b      	uxth	r3, r3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d104      	bne.n	800d376 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d36c:	2120      	movs	r1, #32
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f000 f9be 	bl	800d6f0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d374:	e02d      	b.n	800d3d2 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d37e:	441a      	add	r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d388:	b29b      	uxth	r3, r3
 800d38a:	2bff      	cmp	r3, #255	; 0xff
 800d38c:	d903      	bls.n	800d396 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	22ff      	movs	r2, #255	; 0xff
 800d392:	851a      	strh	r2, [r3, #40]	; 0x28
 800d394:	e004      	b.n	800d3a0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3324      	adds	r3, #36	; 0x24
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d3b6:	f7fb f81f 	bl	80083f8 <HAL_DMA_Start_IT>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d004      	beq.n	800d3ca <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d3c0:	2110      	movs	r1, #16
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f7ff fe38 	bl	800d038 <I2C_ITError>
}
 800d3c8:	e003      	b.n	800d3d2 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d3ca:	2140      	movs	r1, #64	; 0x40
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 f98f 	bl	800d6f0 <I2C_Enable_IRQ>
}
 800d3d2:	bf00      	nop
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
	...

0800d3dc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ec:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d076      	beq.n	800d4e4 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a71      	ldr	r2, [pc, #452]	; (800d5c4 <I2C_DMAError+0x1e8>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d059      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a6f      	ldr	r2, [pc, #444]	; (800d5c8 <I2C_DMAError+0x1ec>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d053      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a6d      	ldr	r2, [pc, #436]	; (800d5cc <I2C_DMAError+0x1f0>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d04d      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a6b      	ldr	r2, [pc, #428]	; (800d5d0 <I2C_DMAError+0x1f4>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d047      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a69      	ldr	r2, [pc, #420]	; (800d5d4 <I2C_DMAError+0x1f8>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d041      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a67      	ldr	r2, [pc, #412]	; (800d5d8 <I2C_DMAError+0x1fc>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d03b      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a65      	ldr	r2, [pc, #404]	; (800d5dc <I2C_DMAError+0x200>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d035      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a63      	ldr	r2, [pc, #396]	; (800d5e0 <I2C_DMAError+0x204>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d02f      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a61      	ldr	r2, [pc, #388]	; (800d5e4 <I2C_DMAError+0x208>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d029      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a5f      	ldr	r2, [pc, #380]	; (800d5e8 <I2C_DMAError+0x20c>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d023      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a5d      	ldr	r2, [pc, #372]	; (800d5ec <I2C_DMAError+0x210>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d01d      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a5b      	ldr	r2, [pc, #364]	; (800d5f0 <I2C_DMAError+0x214>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d017      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a59      	ldr	r2, [pc, #356]	; (800d5f4 <I2C_DMAError+0x218>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d011      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a57      	ldr	r2, [pc, #348]	; (800d5f8 <I2C_DMAError+0x21c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d00b      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a55      	ldr	r2, [pc, #340]	; (800d5fc <I2C_DMAError+0x220>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d005      	beq.n	800d4b6 <I2C_DMAError+0xda>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a53      	ldr	r2, [pc, #332]	; (800d600 <I2C_DMAError+0x224>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d109      	bne.n	800d4ca <I2C_DMAError+0xee>
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	bf0c      	ite	eq
 800d4c2:	2301      	moveq	r3, #1
 800d4c4:	2300      	movne	r3, #0
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	e008      	b.n	800d4dc <I2C_DMAError+0x100>
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	bf0c      	ite	eq
 800d4d6:	2301      	moveq	r3, #1
 800d4d8:	2300      	movne	r3, #0
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	f000 8098 	beq.w	800d61e <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a33      	ldr	r2, [pc, #204]	; (800d5c4 <I2C_DMAError+0x1e8>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d059      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a31      	ldr	r2, [pc, #196]	; (800d5c8 <I2C_DMAError+0x1ec>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d053      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a2f      	ldr	r2, [pc, #188]	; (800d5cc <I2C_DMAError+0x1f0>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d04d      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a2d      	ldr	r2, [pc, #180]	; (800d5d0 <I2C_DMAError+0x1f4>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d047      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a2b      	ldr	r2, [pc, #172]	; (800d5d4 <I2C_DMAError+0x1f8>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d041      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a29      	ldr	r2, [pc, #164]	; (800d5d8 <I2C_DMAError+0x1fc>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d03b      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a27      	ldr	r2, [pc, #156]	; (800d5dc <I2C_DMAError+0x200>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d035      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a25      	ldr	r2, [pc, #148]	; (800d5e0 <I2C_DMAError+0x204>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d02f      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a23      	ldr	r2, [pc, #140]	; (800d5e4 <I2C_DMAError+0x208>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d029      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a21      	ldr	r2, [pc, #132]	; (800d5e8 <I2C_DMAError+0x20c>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d023      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a1f      	ldr	r2, [pc, #124]	; (800d5ec <I2C_DMAError+0x210>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d01d      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a1d      	ldr	r2, [pc, #116]	; (800d5f0 <I2C_DMAError+0x214>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d017      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a1b      	ldr	r2, [pc, #108]	; (800d5f4 <I2C_DMAError+0x218>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d011      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a19      	ldr	r2, [pc, #100]	; (800d5f8 <I2C_DMAError+0x21c>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d00b      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a17      	ldr	r2, [pc, #92]	; (800d5fc <I2C_DMAError+0x220>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d005      	beq.n	800d5ae <I2C_DMAError+0x1d2>
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a15      	ldr	r2, [pc, #84]	; (800d600 <I2C_DMAError+0x224>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d12a      	bne.n	800d604 <I2C_DMAError+0x228>
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bf0c      	ite	eq
 800d5ba:	2301      	moveq	r3, #1
 800d5bc:	2300      	movne	r3, #0
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	e029      	b.n	800d616 <I2C_DMAError+0x23a>
 800d5c2:	bf00      	nop
 800d5c4:	40020010 	.word	0x40020010
 800d5c8:	40020028 	.word	0x40020028
 800d5cc:	40020040 	.word	0x40020040
 800d5d0:	40020058 	.word	0x40020058
 800d5d4:	40020070 	.word	0x40020070
 800d5d8:	40020088 	.word	0x40020088
 800d5dc:	400200a0 	.word	0x400200a0
 800d5e0:	400200b8 	.word	0x400200b8
 800d5e4:	40020410 	.word	0x40020410
 800d5e8:	40020428 	.word	0x40020428
 800d5ec:	40020440 	.word	0x40020440
 800d5f0:	40020458 	.word	0x40020458
 800d5f4:	40020470 	.word	0x40020470
 800d5f8:	40020488 	.word	0x40020488
 800d5fc:	400204a0 	.word	0x400204a0
 800d600:	400204b8 	.word	0x400204b8
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	bf0c      	ite	eq
 800d610:	2301      	moveq	r3, #1
 800d612:	2300      	movne	r3, #0
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d61a:	2301      	movs	r3, #1
 800d61c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7fc fdf0 	bl	800a204 <HAL_DMA_GetError>
 800d624:	4603      	mov	r3, r0
 800d626:	2b02      	cmp	r3, #2
 800d628:	d00e      	beq.n	800d648 <I2C_DMAError+0x26c>
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00b      	beq.n	800d648 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	685a      	ldr	r2, [r3, #4]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d63e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d640:	2110      	movs	r1, #16
 800d642:	68b8      	ldr	r0, [r7, #8]
 800d644:	f7ff fcf8 	bl	800d038 <I2C_ITError>
  }
}
 800d648:	bf00      	nop
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66a:	2200      	movs	r2, #0
 800d66c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	2b00      	cmp	r3, #0
 800d674:	d003      	beq.n	800d67e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d67a:	2200      	movs	r2, #0
 800d67c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f7ff fdca 	bl	800d218 <I2C_TreatErrorCallback>
}
 800d684:	bf00      	nop
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b087      	sub	sp, #28
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	607b      	str	r3, [r7, #4]
 800d696:	460b      	mov	r3, r1
 800d698:	817b      	strh	r3, [r7, #10]
 800d69a:	4613      	mov	r3, r2
 800d69c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d69e:	897b      	ldrh	r3, [r7, #10]
 800d6a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6a4:	7a7b      	ldrb	r3, [r7, #9]
 800d6a6:	041b      	lsls	r3, r3, #16
 800d6a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6b2:	6a3b      	ldr	r3, [r7, #32]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	685a      	ldr	r2, [r3, #4]
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	0d5b      	lsrs	r3, r3, #21
 800d6c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d6ca:	4b08      	ldr	r3, [pc, #32]	; (800d6ec <I2C_TransferConfig+0x60>)
 800d6cc:	430b      	orrs	r3, r1
 800d6ce:	43db      	mvns	r3, r3
 800d6d0:	ea02 0103 	and.w	r1, r2, r3
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d6de:	bf00      	nop
 800d6e0:	371c      	adds	r7, #28
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	03ff63ff 	.word	0x03ff63ff

0800d6f0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d704:	4a39      	ldr	r2, [pc, #228]	; (800d7ec <I2C_Enable_IRQ+0xfc>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d032      	beq.n	800d770 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d70e:	4a38      	ldr	r2, [pc, #224]	; (800d7f0 <I2C_Enable_IRQ+0x100>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d02d      	beq.n	800d770 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d718:	4a36      	ldr	r2, [pc, #216]	; (800d7f4 <I2C_Enable_IRQ+0x104>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d028      	beq.n	800d770 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d71e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d722:	2b00      	cmp	r3, #0
 800d724:	da03      	bge.n	800d72e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d72c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d72e:	887b      	ldrh	r3, [r7, #2]
 800d730:	f003 0301 	and.w	r3, r3, #1
 800d734:	2b00      	cmp	r3, #0
 800d736:	d003      	beq.n	800d740 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d73e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d740:	887b      	ldrh	r3, [r7, #2]
 800d742:	f003 0302 	and.w	r3, r3, #2
 800d746:	2b00      	cmp	r3, #0
 800d748:	d003      	beq.n	800d752 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d750:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d752:	887b      	ldrh	r3, [r7, #2]
 800d754:	2b10      	cmp	r3, #16
 800d756:	d103      	bne.n	800d760 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d75e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d760:	887b      	ldrh	r3, [r7, #2]
 800d762:	2b20      	cmp	r3, #32
 800d764:	d133      	bne.n	800d7ce <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f043 0320 	orr.w	r3, r3, #32
 800d76c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d76e:	e02e      	b.n	800d7ce <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d770:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d774:	2b00      	cmp	r3, #0
 800d776:	da03      	bge.n	800d780 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d77e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d780:	887b      	ldrh	r3, [r7, #2]
 800d782:	f003 0301 	and.w	r3, r3, #1
 800d786:	2b00      	cmp	r3, #0
 800d788:	d003      	beq.n	800d792 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d790:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d792:	887b      	ldrh	r3, [r7, #2]
 800d794:	f003 0302 	and.w	r3, r3, #2
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d003      	beq.n	800d7a4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d7a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d7a4:	887b      	ldrh	r3, [r7, #2]
 800d7a6:	2b10      	cmp	r3, #16
 800d7a8:	d103      	bne.n	800d7b2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d7b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d7b2:	887b      	ldrh	r3, [r7, #2]
 800d7b4:	2b20      	cmp	r3, #32
 800d7b6:	d103      	bne.n	800d7c0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d7be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d7c0:	887b      	ldrh	r3, [r7, #2]
 800d7c2:	2b40      	cmp	r3, #64	; 0x40
 800d7c4:	d103      	bne.n	800d7ce <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7cc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	6819      	ldr	r1, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	430a      	orrs	r2, r1
 800d7dc:	601a      	str	r2, [r3, #0]
}
 800d7de:	bf00      	nop
 800d7e0:	3714      	adds	r7, #20
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	0800bef7 	.word	0x0800bef7
 800d7f0:	0800c33d 	.word	0x0800c33d
 800d7f4:	0800c0dd 	.word	0x0800c0dd

0800d7f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	460b      	mov	r3, r1
 800d802:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d804:	2300      	movs	r3, #0
 800d806:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d808:	887b      	ldrh	r3, [r7, #2]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00f      	beq.n	800d832 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d818:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d820:	b2db      	uxtb	r3, r3
 800d822:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d826:	2b28      	cmp	r3, #40	; 0x28
 800d828:	d003      	beq.n	800d832 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d830:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d832:	887b      	ldrh	r3, [r7, #2]
 800d834:	f003 0302 	and.w	r3, r3, #2
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00f      	beq.n	800d85c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d842:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d850:	2b28      	cmp	r3, #40	; 0x28
 800d852:	d003      	beq.n	800d85c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d85a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d85c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d860:	2b00      	cmp	r3, #0
 800d862:	da03      	bge.n	800d86c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d86a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d86c:	887b      	ldrh	r3, [r7, #2]
 800d86e:	2b10      	cmp	r3, #16
 800d870:	d103      	bne.n	800d87a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d878:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d87a:	887b      	ldrh	r3, [r7, #2]
 800d87c:	2b20      	cmp	r3, #32
 800d87e:	d103      	bne.n	800d888 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f043 0320 	orr.w	r3, r3, #32
 800d886:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d888:	887b      	ldrh	r3, [r7, #2]
 800d88a:	2b40      	cmp	r3, #64	; 0x40
 800d88c:	d103      	bne.n	800d896 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d894:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6819      	ldr	r1, [r3, #0]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	43da      	mvns	r2, r3
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	400a      	ands	r2, r1
 800d8a6:	601a      	str	r2, [r3, #0]
}
 800d8a8:	bf00      	nop
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	2b20      	cmp	r3, #32
 800d8c8:	d138      	bne.n	800d93c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d101      	bne.n	800d8d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	e032      	b.n	800d93e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2224      	movs	r2, #36	; 0x24
 800d8e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f022 0201 	bic.w	r2, r2, #1
 800d8f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	6819      	ldr	r1, [r3, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	430a      	orrs	r2, r1
 800d916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f042 0201 	orr.w	r2, r2, #1
 800d926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2220      	movs	r2, #32
 800d92c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d938:	2300      	movs	r3, #0
 800d93a:	e000      	b.n	800d93e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d93c:	2302      	movs	r3, #2
  }
}
 800d93e:	4618      	mov	r0, r3
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b085      	sub	sp, #20
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	2b20      	cmp	r3, #32
 800d95e:	d139      	bne.n	800d9d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d966:	2b01      	cmp	r3, #1
 800d968:	d101      	bne.n	800d96e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d96a:	2302      	movs	r3, #2
 800d96c:	e033      	b.n	800d9d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2224      	movs	r2, #36	; 0x24
 800d97a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f022 0201 	bic.w	r2, r2, #1
 800d98c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d99c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	021b      	lsls	r3, r3, #8
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f042 0201 	orr.w	r2, r2, #1
 800d9be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2220      	movs	r2, #32
 800d9c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	e000      	b.n	800d9d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d9d4:	2302      	movs	r3, #2
  }
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3714      	adds	r7, #20
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
	...

0800d9e4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d9ec:	4b0d      	ldr	r3, [pc, #52]	; (800da24 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d9ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d9f2:	4a0c      	ldr	r2, [pc, #48]	; (800da24 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d9f4:	f043 0302 	orr.w	r3, r3, #2
 800d9f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d9fc:	4b09      	ldr	r3, [pc, #36]	; (800da24 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800d9fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da02:	f003 0302 	and.w	r3, r3, #2
 800da06:	60fb      	str	r3, [r7, #12]
 800da08:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800da0a:	4b07      	ldr	r3, [pc, #28]	; (800da28 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800da0c:	685a      	ldr	r2, [r3, #4]
 800da0e:	4906      	ldr	r1, [pc, #24]	; (800da28 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4313      	orrs	r3, r2
 800da14:	604b      	str	r3, [r1, #4]
}
 800da16:	bf00      	nop
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	58024400 	.word	0x58024400
 800da28:	58000400 	.word	0x58000400

0800da2c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e041      	b.n	800dac2 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800da46:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f245 5255 	movw	r2, #21845	; 0x5555
 800da50:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	6852      	ldr	r2, [r2, #4]
 800da5a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	6892      	ldr	r2, [r2, #8]
 800da64:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800da66:	f7f7 ffcb 	bl	8005a00 <HAL_GetTick>
 800da6a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800da6c:	e00f      	b.n	800da8e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800da6e:	f7f7 ffc7 	bl	8005a00 <HAL_GetTick>
 800da72:	4602      	mov	r2, r0
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	1ad3      	subs	r3, r2, r3
 800da78:	2b31      	cmp	r3, #49	; 0x31
 800da7a:	d908      	bls.n	800da8e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	f003 0307 	and.w	r3, r3, #7
 800da86:	2b00      	cmp	r3, #0
 800da88:	d001      	beq.n	800da8e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800da8a:	2303      	movs	r3, #3
 800da8c:	e019      	b.n	800dac2 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	f003 0307 	and.w	r3, r3, #7
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1e8      	bne.n	800da6e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	691a      	ldr	r2, [r3, #16]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d005      	beq.n	800dab6 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	68d2      	ldr	r2, [r2, #12]
 800dab2:	611a      	str	r2, [r3, #16]
 800dab4:	e004      	b.n	800dac0 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800dabe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800daca:	b480      	push	{r7}
 800dacc:	b083      	sub	sp, #12
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800dada:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
	...

0800daec <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800daf8:	4b18      	ldr	r3, [pc, #96]	; (800db5c <HAL_PWR_EnterSTOPMode+0x70>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f023 0201 	bic.w	r2, r3, #1
 800db00:	4916      	ldr	r1, [pc, #88]	; (800db5c <HAL_PWR_EnterSTOPMode+0x70>)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4313      	orrs	r3, r2
 800db06:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800db08:	4b14      	ldr	r3, [pc, #80]	; (800db5c <HAL_PWR_EnterSTOPMode+0x70>)
 800db0a:	691b      	ldr	r3, [r3, #16]
 800db0c:	4a13      	ldr	r2, [pc, #76]	; (800db5c <HAL_PWR_EnterSTOPMode+0x70>)
 800db0e:	f023 0305 	bic.w	r3, r3, #5
 800db12:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800db14:	4b11      	ldr	r3, [pc, #68]	; (800db5c <HAL_PWR_EnterSTOPMode+0x70>)
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	4a10      	ldr	r2, [pc, #64]	; (800db5c <HAL_PWR_EnterSTOPMode+0x70>)
 800db1a:	f023 0302 	bic.w	r3, r3, #2
 800db1e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800db20:	4b0f      	ldr	r3, [pc, #60]	; (800db60 <HAL_PWR_EnterSTOPMode+0x74>)
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	4a0e      	ldr	r2, [pc, #56]	; (800db60 <HAL_PWR_EnterSTOPMode+0x74>)
 800db26:	f043 0304 	orr.w	r3, r3, #4
 800db2a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800db2c:	f3bf 8f4f 	dsb	sy
}
 800db30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800db32:	f3bf 8f6f 	isb	sy
}
 800db36:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800db38:	78fb      	ldrb	r3, [r7, #3]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d101      	bne.n	800db42 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800db3e:	bf30      	wfi
 800db40:	e000      	b.n	800db44 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800db42:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800db44:	4b06      	ldr	r3, [pc, #24]	; (800db60 <HAL_PWR_EnterSTOPMode+0x74>)
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	4a05      	ldr	r2, [pc, #20]	; (800db60 <HAL_PWR_EnterSTOPMode+0x74>)
 800db4a:	f023 0304 	bic.w	r3, r3, #4
 800db4e:	6113      	str	r3, [r2, #16]
}
 800db50:	bf00      	nop
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	58024800 	.word	0x58024800
 800db60:	e000ed00 	.word	0xe000ed00

0800db64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800db6c:	4b19      	ldr	r3, [pc, #100]	; (800dbd4 <HAL_PWREx_ConfigSupply+0x70>)
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	f003 0304 	and.w	r3, r3, #4
 800db74:	2b04      	cmp	r3, #4
 800db76:	d00a      	beq.n	800db8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800db78:	4b16      	ldr	r3, [pc, #88]	; (800dbd4 <HAL_PWREx_ConfigSupply+0x70>)
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	f003 0307 	and.w	r3, r3, #7
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	429a      	cmp	r2, r3
 800db84:	d001      	beq.n	800db8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	e01f      	b.n	800dbca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e01d      	b.n	800dbca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800db8e:	4b11      	ldr	r3, [pc, #68]	; (800dbd4 <HAL_PWREx_ConfigSupply+0x70>)
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	f023 0207 	bic.w	r2, r3, #7
 800db96:	490f      	ldr	r1, [pc, #60]	; (800dbd4 <HAL_PWREx_ConfigSupply+0x70>)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800db9e:	f7f7 ff2f 	bl	8005a00 <HAL_GetTick>
 800dba2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dba4:	e009      	b.n	800dbba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800dba6:	f7f7 ff2b 	bl	8005a00 <HAL_GetTick>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbb4:	d901      	bls.n	800dbba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e007      	b.n	800dbca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800dbba:	4b06      	ldr	r3, [pc, #24]	; (800dbd4 <HAL_PWREx_ConfigSupply+0x70>)
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dbc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbc6:	d1ee      	bne.n	800dba6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	58024800 	.word	0x58024800

0800dbd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08c      	sub	sp, #48	; 0x30
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d102      	bne.n	800dbec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	f000 bc48 	b.w	800e47c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f000 8088 	beq.w	800dd0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dbfa:	4b99      	ldr	r3, [pc, #612]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dbfc:	691b      	ldr	r3, [r3, #16]
 800dbfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc02:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dc04:	4b96      	ldr	r3, [pc, #600]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc08:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800dc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0c:	2b10      	cmp	r3, #16
 800dc0e:	d007      	beq.n	800dc20 <HAL_RCC_OscConfig+0x48>
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	2b18      	cmp	r3, #24
 800dc14:	d111      	bne.n	800dc3a <HAL_RCC_OscConfig+0x62>
 800dc16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc18:	f003 0303 	and.w	r3, r3, #3
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d10c      	bne.n	800dc3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc20:	4b8f      	ldr	r3, [pc, #572]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d06d      	beq.n	800dd08 <HAL_RCC_OscConfig+0x130>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d169      	bne.n	800dd08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	f000 bc21 	b.w	800e47c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc42:	d106      	bne.n	800dc52 <HAL_RCC_OscConfig+0x7a>
 800dc44:	4b86      	ldr	r3, [pc, #536]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a85      	ldr	r2, [pc, #532]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	e02e      	b.n	800dcb0 <HAL_RCC_OscConfig+0xd8>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10c      	bne.n	800dc74 <HAL_RCC_OscConfig+0x9c>
 800dc5a:	4b81      	ldr	r3, [pc, #516]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4a80      	ldr	r2, [pc, #512]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc64:	6013      	str	r3, [r2, #0]
 800dc66:	4b7e      	ldr	r3, [pc, #504]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4a7d      	ldr	r2, [pc, #500]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dc70:	6013      	str	r3, [r2, #0]
 800dc72:	e01d      	b.n	800dcb0 <HAL_RCC_OscConfig+0xd8>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dc7c:	d10c      	bne.n	800dc98 <HAL_RCC_OscConfig+0xc0>
 800dc7e:	4b78      	ldr	r3, [pc, #480]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	4a77      	ldr	r2, [pc, #476]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dc88:	6013      	str	r3, [r2, #0]
 800dc8a:	4b75      	ldr	r3, [pc, #468]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a74      	ldr	r2, [pc, #464]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc94:	6013      	str	r3, [r2, #0]
 800dc96:	e00b      	b.n	800dcb0 <HAL_RCC_OscConfig+0xd8>
 800dc98:	4b71      	ldr	r3, [pc, #452]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a70      	ldr	r2, [pc, #448]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dc9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dca2:	6013      	str	r3, [r2, #0]
 800dca4:	4b6e      	ldr	r3, [pc, #440]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a6d      	ldr	r2, [pc, #436]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dcaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dcae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d013      	beq.n	800dce0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcb8:	f7f7 fea2 	bl	8005a00 <HAL_GetTick>
 800dcbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dcbe:	e008      	b.n	800dcd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dcc0:	f7f7 fe9e 	bl	8005a00 <HAL_GetTick>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	2b64      	cmp	r3, #100	; 0x64
 800dccc:	d901      	bls.n	800dcd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	e3d4      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dcd2:	4b63      	ldr	r3, [pc, #396]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0f0      	beq.n	800dcc0 <HAL_RCC_OscConfig+0xe8>
 800dcde:	e014      	b.n	800dd0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dce0:	f7f7 fe8e 	bl	8005a00 <HAL_GetTick>
 800dce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dce6:	e008      	b.n	800dcfa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dce8:	f7f7 fe8a 	bl	8005a00 <HAL_GetTick>
 800dcec:	4602      	mov	r2, r0
 800dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf0:	1ad3      	subs	r3, r2, r3
 800dcf2:	2b64      	cmp	r3, #100	; 0x64
 800dcf4:	d901      	bls.n	800dcfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	e3c0      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dcfa:	4b59      	ldr	r3, [pc, #356]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1f0      	bne.n	800dce8 <HAL_RCC_OscConfig+0x110>
 800dd06:	e000      	b.n	800dd0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f003 0302 	and.w	r3, r3, #2
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f000 80ca 	beq.w	800deac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd18:	4b51      	ldr	r3, [pc, #324]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dd1a:	691b      	ldr	r3, [r3, #16]
 800dd1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dd22:	4b4f      	ldr	r3, [pc, #316]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dd28:	6a3b      	ldr	r3, [r7, #32]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d007      	beq.n	800dd3e <HAL_RCC_OscConfig+0x166>
 800dd2e:	6a3b      	ldr	r3, [r7, #32]
 800dd30:	2b18      	cmp	r3, #24
 800dd32:	d156      	bne.n	800dde2 <HAL_RCC_OscConfig+0x20a>
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	f003 0303 	and.w	r3, r3, #3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d151      	bne.n	800dde2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd3e:	4b48      	ldr	r3, [pc, #288]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f003 0304 	and.w	r3, r3, #4
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d005      	beq.n	800dd56 <HAL_RCC_OscConfig+0x17e>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e392      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dd56:	4b42      	ldr	r3, [pc, #264]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f023 0219 	bic.w	r2, r3, #25
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	493f      	ldr	r1, [pc, #252]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dd64:	4313      	orrs	r3, r2
 800dd66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd68:	f7f7 fe4a 	bl	8005a00 <HAL_GetTick>
 800dd6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd6e:	e008      	b.n	800dd82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd70:	f7f7 fe46 	bl	8005a00 <HAL_GetTick>
 800dd74:	4602      	mov	r2, r0
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	d901      	bls.n	800dd82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	e37c      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd82:	4b37      	ldr	r3, [pc, #220]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f003 0304 	and.w	r3, r3, #4
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d0f0      	beq.n	800dd70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd8e:	f7f7 fe43 	bl	8005a18 <HAL_GetREVID>
 800dd92:	4603      	mov	r3, r0
 800dd94:	f241 0203 	movw	r2, #4099	; 0x1003
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d817      	bhi.n	800ddcc <HAL_RCC_OscConfig+0x1f4>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	691b      	ldr	r3, [r3, #16]
 800dda0:	2b40      	cmp	r3, #64	; 0x40
 800dda2:	d108      	bne.n	800ddb6 <HAL_RCC_OscConfig+0x1de>
 800dda4:	4b2e      	ldr	r3, [pc, #184]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ddac:	4a2c      	ldr	r2, [pc, #176]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800ddae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddb2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ddb4:	e07a      	b.n	800deac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddb6:	4b2a      	ldr	r3, [pc, #168]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	691b      	ldr	r3, [r3, #16]
 800ddc2:	031b      	lsls	r3, r3, #12
 800ddc4:	4926      	ldr	r1, [pc, #152]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ddca:	e06f      	b.n	800deac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddcc:	4b24      	ldr	r3, [pc, #144]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	061b      	lsls	r3, r3, #24
 800ddda:	4921      	ldr	r1, [pc, #132]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800dddc:	4313      	orrs	r3, r2
 800ddde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dde0:	e064      	b.n	800deac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d047      	beq.n	800de7a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ddea:	4b1d      	ldr	r3, [pc, #116]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f023 0219 	bic.w	r2, r3, #25
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	68db      	ldr	r3, [r3, #12]
 800ddf6:	491a      	ldr	r1, [pc, #104]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddfc:	f7f7 fe00 	bl	8005a00 <HAL_GetTick>
 800de00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800de02:	e008      	b.n	800de16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de04:	f7f7 fdfc 	bl	8005a00 <HAL_GetTick>
 800de08:	4602      	mov	r2, r0
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d901      	bls.n	800de16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800de12:	2303      	movs	r3, #3
 800de14:	e332      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800de16:	4b12      	ldr	r3, [pc, #72]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f003 0304 	and.w	r3, r3, #4
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d0f0      	beq.n	800de04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de22:	f7f7 fdf9 	bl	8005a18 <HAL_GetREVID>
 800de26:	4603      	mov	r3, r0
 800de28:	f241 0203 	movw	r2, #4099	; 0x1003
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d819      	bhi.n	800de64 <HAL_RCC_OscConfig+0x28c>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	2b40      	cmp	r3, #64	; 0x40
 800de36:	d108      	bne.n	800de4a <HAL_RCC_OscConfig+0x272>
 800de38:	4b09      	ldr	r3, [pc, #36]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800de40:	4a07      	ldr	r2, [pc, #28]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800de42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de46:	6053      	str	r3, [r2, #4]
 800de48:	e030      	b.n	800deac <HAL_RCC_OscConfig+0x2d4>
 800de4a:	4b05      	ldr	r3, [pc, #20]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	031b      	lsls	r3, r3, #12
 800de58:	4901      	ldr	r1, [pc, #4]	; (800de60 <HAL_RCC_OscConfig+0x288>)
 800de5a:	4313      	orrs	r3, r2
 800de5c:	604b      	str	r3, [r1, #4]
 800de5e:	e025      	b.n	800deac <HAL_RCC_OscConfig+0x2d4>
 800de60:	58024400 	.word	0x58024400
 800de64:	4b9a      	ldr	r3, [pc, #616]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	061b      	lsls	r3, r3, #24
 800de72:	4997      	ldr	r1, [pc, #604]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800de74:	4313      	orrs	r3, r2
 800de76:	604b      	str	r3, [r1, #4]
 800de78:	e018      	b.n	800deac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800de7a:	4b95      	ldr	r3, [pc, #596]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a94      	ldr	r2, [pc, #592]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800de80:	f023 0301 	bic.w	r3, r3, #1
 800de84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de86:	f7f7 fdbb 	bl	8005a00 <HAL_GetTick>
 800de8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800de8c:	e008      	b.n	800dea0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de8e:	f7f7 fdb7 	bl	8005a00 <HAL_GetTick>
 800de92:	4602      	mov	r2, r0
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	1ad3      	subs	r3, r2, r3
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d901      	bls.n	800dea0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800de9c:	2303      	movs	r3, #3
 800de9e:	e2ed      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dea0:	4b8b      	ldr	r3, [pc, #556]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 0304 	and.w	r3, r3, #4
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1f0      	bne.n	800de8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f003 0310 	and.w	r3, r3, #16
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f000 80a9 	beq.w	800e00c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800deba:	4b85      	ldr	r3, [pc, #532]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dec2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dec4:	4b82      	ldr	r3, [pc, #520]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	2b08      	cmp	r3, #8
 800dece:	d007      	beq.n	800dee0 <HAL_RCC_OscConfig+0x308>
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	2b18      	cmp	r3, #24
 800ded4:	d13a      	bne.n	800df4c <HAL_RCC_OscConfig+0x374>
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	f003 0303 	and.w	r3, r3, #3
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d135      	bne.n	800df4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dee0:	4b7b      	ldr	r3, [pc, #492]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d005      	beq.n	800def8 <HAL_RCC_OscConfig+0x320>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	2b80      	cmp	r3, #128	; 0x80
 800def2:	d001      	beq.n	800def8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800def4:	2301      	movs	r3, #1
 800def6:	e2c1      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800def8:	f7f7 fd8e 	bl	8005a18 <HAL_GetREVID>
 800defc:	4603      	mov	r3, r0
 800defe:	f241 0203 	movw	r2, #4099	; 0x1003
 800df02:	4293      	cmp	r3, r2
 800df04:	d817      	bhi.n	800df36 <HAL_RCC_OscConfig+0x35e>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a1b      	ldr	r3, [r3, #32]
 800df0a:	2b20      	cmp	r3, #32
 800df0c:	d108      	bne.n	800df20 <HAL_RCC_OscConfig+0x348>
 800df0e:	4b70      	ldr	r3, [pc, #448]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800df16:	4a6e      	ldr	r2, [pc, #440]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800df1e:	e075      	b.n	800e00c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800df20:	4b6b      	ldr	r3, [pc, #428]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a1b      	ldr	r3, [r3, #32]
 800df2c:	069b      	lsls	r3, r3, #26
 800df2e:	4968      	ldr	r1, [pc, #416]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df30:	4313      	orrs	r3, r2
 800df32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800df34:	e06a      	b.n	800e00c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800df36:	4b66      	ldr	r3, [pc, #408]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df38:	68db      	ldr	r3, [r3, #12]
 800df3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6a1b      	ldr	r3, [r3, #32]
 800df42:	061b      	lsls	r3, r3, #24
 800df44:	4962      	ldr	r1, [pc, #392]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df46:	4313      	orrs	r3, r2
 800df48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800df4a:	e05f      	b.n	800e00c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	69db      	ldr	r3, [r3, #28]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d042      	beq.n	800dfda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800df54:	4b5e      	ldr	r3, [pc, #376]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a5d      	ldr	r2, [pc, #372]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df60:	f7f7 fd4e 	bl	8005a00 <HAL_GetTick>
 800df64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800df66:	e008      	b.n	800df7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800df68:	f7f7 fd4a 	bl	8005a00 <HAL_GetTick>
 800df6c:	4602      	mov	r2, r0
 800df6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df70:	1ad3      	subs	r3, r2, r3
 800df72:	2b02      	cmp	r3, #2
 800df74:	d901      	bls.n	800df7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800df76:	2303      	movs	r3, #3
 800df78:	e280      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800df7a:	4b55      	ldr	r3, [pc, #340]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df82:	2b00      	cmp	r3, #0
 800df84:	d0f0      	beq.n	800df68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800df86:	f7f7 fd47 	bl	8005a18 <HAL_GetREVID>
 800df8a:	4603      	mov	r3, r0
 800df8c:	f241 0203 	movw	r2, #4099	; 0x1003
 800df90:	4293      	cmp	r3, r2
 800df92:	d817      	bhi.n	800dfc4 <HAL_RCC_OscConfig+0x3ec>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a1b      	ldr	r3, [r3, #32]
 800df98:	2b20      	cmp	r3, #32
 800df9a:	d108      	bne.n	800dfae <HAL_RCC_OscConfig+0x3d6>
 800df9c:	4b4c      	ldr	r3, [pc, #304]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dfa4:	4a4a      	ldr	r2, [pc, #296]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dfa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dfaa:	6053      	str	r3, [r2, #4]
 800dfac:	e02e      	b.n	800e00c <HAL_RCC_OscConfig+0x434>
 800dfae:	4b48      	ldr	r3, [pc, #288]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a1b      	ldr	r3, [r3, #32]
 800dfba:	069b      	lsls	r3, r3, #26
 800dfbc:	4944      	ldr	r1, [pc, #272]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dfbe:	4313      	orrs	r3, r2
 800dfc0:	604b      	str	r3, [r1, #4]
 800dfc2:	e023      	b.n	800e00c <HAL_RCC_OscConfig+0x434>
 800dfc4:	4b42      	ldr	r3, [pc, #264]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	061b      	lsls	r3, r3, #24
 800dfd2:	493f      	ldr	r1, [pc, #252]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	60cb      	str	r3, [r1, #12]
 800dfd8:	e018      	b.n	800e00c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dfda:	4b3d      	ldr	r3, [pc, #244]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a3c      	ldr	r2, [pc, #240]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800dfe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfe6:	f7f7 fd0b 	bl	8005a00 <HAL_GetTick>
 800dfea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dfec:	e008      	b.n	800e000 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dfee:	f7f7 fd07 	bl	8005a00 <HAL_GetTick>
 800dff2:	4602      	mov	r2, r0
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d901      	bls.n	800e000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dffc:	2303      	movs	r3, #3
 800dffe:	e23d      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e000:	4b33      	ldr	r3, [pc, #204]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1f0      	bne.n	800dfee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f003 0308 	and.w	r3, r3, #8
 800e014:	2b00      	cmp	r3, #0
 800e016:	d036      	beq.n	800e086 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	695b      	ldr	r3, [r3, #20]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d019      	beq.n	800e054 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e020:	4b2b      	ldr	r3, [pc, #172]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e024:	4a2a      	ldr	r2, [pc, #168]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e026:	f043 0301 	orr.w	r3, r3, #1
 800e02a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e02c:	f7f7 fce8 	bl	8005a00 <HAL_GetTick>
 800e030:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e032:	e008      	b.n	800e046 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e034:	f7f7 fce4 	bl	8005a00 <HAL_GetTick>
 800e038:	4602      	mov	r2, r0
 800e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	2b02      	cmp	r3, #2
 800e040:	d901      	bls.n	800e046 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e042:	2303      	movs	r3, #3
 800e044:	e21a      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e046:	4b22      	ldr	r3, [pc, #136]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e04a:	f003 0302 	and.w	r3, r3, #2
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d0f0      	beq.n	800e034 <HAL_RCC_OscConfig+0x45c>
 800e052:	e018      	b.n	800e086 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e054:	4b1e      	ldr	r3, [pc, #120]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e058:	4a1d      	ldr	r2, [pc, #116]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e05a:	f023 0301 	bic.w	r3, r3, #1
 800e05e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e060:	f7f7 fcce 	bl	8005a00 <HAL_GetTick>
 800e064:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e066:	e008      	b.n	800e07a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e068:	f7f7 fcca 	bl	8005a00 <HAL_GetTick>
 800e06c:	4602      	mov	r2, r0
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	2b02      	cmp	r3, #2
 800e074:	d901      	bls.n	800e07a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e076:	2303      	movs	r3, #3
 800e078:	e200      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e07a:	4b15      	ldr	r3, [pc, #84]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e07c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e07e:	f003 0302 	and.w	r3, r3, #2
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1f0      	bne.n	800e068 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f003 0320 	and.w	r3, r3, #32
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d039      	beq.n	800e106 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	699b      	ldr	r3, [r3, #24]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d01c      	beq.n	800e0d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e09a:	4b0d      	ldr	r3, [pc, #52]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a0c      	ldr	r2, [pc, #48]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e0a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e0a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e0a6:	f7f7 fcab 	bl	8005a00 <HAL_GetTick>
 800e0aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e0ac:	e008      	b.n	800e0c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e0ae:	f7f7 fca7 	bl	8005a00 <HAL_GetTick>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d901      	bls.n	800e0c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e0bc:	2303      	movs	r3, #3
 800e0be:	e1dd      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e0c0:	4b03      	ldr	r3, [pc, #12]	; (800e0d0 <HAL_RCC_OscConfig+0x4f8>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d0f0      	beq.n	800e0ae <HAL_RCC_OscConfig+0x4d6>
 800e0cc:	e01b      	b.n	800e106 <HAL_RCC_OscConfig+0x52e>
 800e0ce:	bf00      	nop
 800e0d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e0d4:	4b9b      	ldr	r3, [pc, #620]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a9a      	ldr	r2, [pc, #616]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e0da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e0e0:	f7f7 fc8e 	bl	8005a00 <HAL_GetTick>
 800e0e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e0e6:	e008      	b.n	800e0fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e0e8:	f7f7 fc8a 	bl	8005a00 <HAL_GetTick>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	1ad3      	subs	r3, r2, r3
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d901      	bls.n	800e0fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	e1c0      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e0fa:	4b92      	ldr	r3, [pc, #584]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1f0      	bne.n	800e0e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f003 0304 	and.w	r3, r3, #4
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f000 8081 	beq.w	800e216 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e114:	4b8c      	ldr	r3, [pc, #560]	; (800e348 <HAL_RCC_OscConfig+0x770>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a8b      	ldr	r2, [pc, #556]	; (800e348 <HAL_RCC_OscConfig+0x770>)
 800e11a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e11e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e120:	f7f7 fc6e 	bl	8005a00 <HAL_GetTick>
 800e124:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e126:	e008      	b.n	800e13a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e128:	f7f7 fc6a 	bl	8005a00 <HAL_GetTick>
 800e12c:	4602      	mov	r2, r0
 800e12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	2b64      	cmp	r3, #100	; 0x64
 800e134:	d901      	bls.n	800e13a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e136:	2303      	movs	r3, #3
 800e138:	e1a0      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e13a:	4b83      	ldr	r3, [pc, #524]	; (800e348 <HAL_RCC_OscConfig+0x770>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e142:	2b00      	cmp	r3, #0
 800e144:	d0f0      	beq.n	800e128 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d106      	bne.n	800e15c <HAL_RCC_OscConfig+0x584>
 800e14e:	4b7d      	ldr	r3, [pc, #500]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e152:	4a7c      	ldr	r2, [pc, #496]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e154:	f043 0301 	orr.w	r3, r3, #1
 800e158:	6713      	str	r3, [r2, #112]	; 0x70
 800e15a:	e02d      	b.n	800e1b8 <HAL_RCC_OscConfig+0x5e0>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10c      	bne.n	800e17e <HAL_RCC_OscConfig+0x5a6>
 800e164:	4b77      	ldr	r3, [pc, #476]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e168:	4a76      	ldr	r2, [pc, #472]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e16a:	f023 0301 	bic.w	r3, r3, #1
 800e16e:	6713      	str	r3, [r2, #112]	; 0x70
 800e170:	4b74      	ldr	r3, [pc, #464]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e174:	4a73      	ldr	r2, [pc, #460]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e176:	f023 0304 	bic.w	r3, r3, #4
 800e17a:	6713      	str	r3, [r2, #112]	; 0x70
 800e17c:	e01c      	b.n	800e1b8 <HAL_RCC_OscConfig+0x5e0>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	2b05      	cmp	r3, #5
 800e184:	d10c      	bne.n	800e1a0 <HAL_RCC_OscConfig+0x5c8>
 800e186:	4b6f      	ldr	r3, [pc, #444]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e18a:	4a6e      	ldr	r2, [pc, #440]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e18c:	f043 0304 	orr.w	r3, r3, #4
 800e190:	6713      	str	r3, [r2, #112]	; 0x70
 800e192:	4b6c      	ldr	r3, [pc, #432]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e196:	4a6b      	ldr	r2, [pc, #428]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e198:	f043 0301 	orr.w	r3, r3, #1
 800e19c:	6713      	str	r3, [r2, #112]	; 0x70
 800e19e:	e00b      	b.n	800e1b8 <HAL_RCC_OscConfig+0x5e0>
 800e1a0:	4b68      	ldr	r3, [pc, #416]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1a4:	4a67      	ldr	r2, [pc, #412]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e1a6:	f023 0301 	bic.w	r3, r3, #1
 800e1aa:	6713      	str	r3, [r2, #112]	; 0x70
 800e1ac:	4b65      	ldr	r3, [pc, #404]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1b0:	4a64      	ldr	r2, [pc, #400]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e1b2:	f023 0304 	bic.w	r3, r3, #4
 800e1b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d015      	beq.n	800e1ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1c0:	f7f7 fc1e 	bl	8005a00 <HAL_GetTick>
 800e1c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e1c6:	e00a      	b.n	800e1de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1c8:	f7f7 fc1a 	bl	8005a00 <HAL_GetTick>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d901      	bls.n	800e1de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e1da:	2303      	movs	r3, #3
 800e1dc:	e14e      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e1de:	4b59      	ldr	r3, [pc, #356]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e2:	f003 0302 	and.w	r3, r3, #2
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0ee      	beq.n	800e1c8 <HAL_RCC_OscConfig+0x5f0>
 800e1ea:	e014      	b.n	800e216 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e1ec:	f7f7 fc08 	bl	8005a00 <HAL_GetTick>
 800e1f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e1f2:	e00a      	b.n	800e20a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1f4:	f7f7 fc04 	bl	8005a00 <HAL_GetTick>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800e202:	4293      	cmp	r3, r2
 800e204:	d901      	bls.n	800e20a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e206:	2303      	movs	r3, #3
 800e208:	e138      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e20a:	4b4e      	ldr	r3, [pc, #312]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e20e:	f003 0302 	and.w	r3, r3, #2
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1ee      	bne.n	800e1f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 812d 	beq.w	800e47a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e220:	4b48      	ldr	r3, [pc, #288]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e228:	2b18      	cmp	r3, #24
 800e22a:	f000 80bd 	beq.w	800e3a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e232:	2b02      	cmp	r3, #2
 800e234:	f040 809e 	bne.w	800e374 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e238:	4b42      	ldr	r3, [pc, #264]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a41      	ldr	r2, [pc, #260]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e23e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e244:	f7f7 fbdc 	bl	8005a00 <HAL_GetTick>
 800e248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e24a:	e008      	b.n	800e25e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e24c:	f7f7 fbd8 	bl	8005a00 <HAL_GetTick>
 800e250:	4602      	mov	r2, r0
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	2b02      	cmp	r3, #2
 800e258:	d901      	bls.n	800e25e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e25a:	2303      	movs	r3, #3
 800e25c:	e10e      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e25e:	4b39      	ldr	r3, [pc, #228]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1f0      	bne.n	800e24c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e26a:	4b36      	ldr	r3, [pc, #216]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e26c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e26e:	4b37      	ldr	r3, [pc, #220]	; (800e34c <HAL_RCC_OscConfig+0x774>)
 800e270:	4013      	ands	r3, r2
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e27a:	0112      	lsls	r2, r2, #4
 800e27c:	430a      	orrs	r2, r1
 800e27e:	4931      	ldr	r1, [pc, #196]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e280:	4313      	orrs	r3, r2
 800e282:	628b      	str	r3, [r1, #40]	; 0x28
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e288:	3b01      	subs	r3, #1
 800e28a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e292:	3b01      	subs	r3, #1
 800e294:	025b      	lsls	r3, r3, #9
 800e296:	b29b      	uxth	r3, r3
 800e298:	431a      	orrs	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	041b      	lsls	r3, r3, #16
 800e2a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e2a6:	431a      	orrs	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	061b      	lsls	r3, r3, #24
 800e2b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e2b4:	4923      	ldr	r1, [pc, #140]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e2ba:	4b22      	ldr	r3, [pc, #136]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2be:	4a21      	ldr	r2, [pc, #132]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2c0:	f023 0301 	bic.w	r3, r3, #1
 800e2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e2c6:	4b1f      	ldr	r3, [pc, #124]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2ca:	4b21      	ldr	r3, [pc, #132]	; (800e350 <HAL_RCC_OscConfig+0x778>)
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e2d2:	00d2      	lsls	r2, r2, #3
 800e2d4:	491b      	ldr	r1, [pc, #108]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e2da:	4b1a      	ldr	r3, [pc, #104]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2de:	f023 020c 	bic.w	r2, r3, #12
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e6:	4917      	ldr	r1, [pc, #92]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e2ec:	4b15      	ldr	r3, [pc, #84]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f0:	f023 0202 	bic.w	r2, r3, #2
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2f8:	4912      	ldr	r1, [pc, #72]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e2fe:	4b11      	ldr	r3, [pc, #68]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e302:	4a10      	ldr	r2, [pc, #64]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e308:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e30a:	4b0e      	ldr	r3, [pc, #56]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30e:	4a0d      	ldr	r2, [pc, #52]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e314:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e316:	4b0b      	ldr	r3, [pc, #44]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31a:	4a0a      	ldr	r2, [pc, #40]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e31c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e320:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e322:	4b08      	ldr	r3, [pc, #32]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e326:	4a07      	ldr	r2, [pc, #28]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e328:	f043 0301 	orr.w	r3, r3, #1
 800e32c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e32e:	4b05      	ldr	r3, [pc, #20]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a04      	ldr	r2, [pc, #16]	; (800e344 <HAL_RCC_OscConfig+0x76c>)
 800e334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e33a:	f7f7 fb61 	bl	8005a00 <HAL_GetTick>
 800e33e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e340:	e011      	b.n	800e366 <HAL_RCC_OscConfig+0x78e>
 800e342:	bf00      	nop
 800e344:	58024400 	.word	0x58024400
 800e348:	58024800 	.word	0x58024800
 800e34c:	fffffc0c 	.word	0xfffffc0c
 800e350:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e354:	f7f7 fb54 	bl	8005a00 <HAL_GetTick>
 800e358:	4602      	mov	r2, r0
 800e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d901      	bls.n	800e366 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e08a      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e366:	4b47      	ldr	r3, [pc, #284]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d0f0      	beq.n	800e354 <HAL_RCC_OscConfig+0x77c>
 800e372:	e082      	b.n	800e47a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e374:	4b43      	ldr	r3, [pc, #268]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a42      	ldr	r2, [pc, #264]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e37a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e37e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e380:	f7f7 fb3e 	bl	8005a00 <HAL_GetTick>
 800e384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e386:	e008      	b.n	800e39a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e388:	f7f7 fb3a 	bl	8005a00 <HAL_GetTick>
 800e38c:	4602      	mov	r2, r0
 800e38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e390:	1ad3      	subs	r3, r2, r3
 800e392:	2b02      	cmp	r3, #2
 800e394:	d901      	bls.n	800e39a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e396:	2303      	movs	r3, #3
 800e398:	e070      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e39a:	4b3a      	ldr	r3, [pc, #232]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1f0      	bne.n	800e388 <HAL_RCC_OscConfig+0x7b0>
 800e3a6:	e068      	b.n	800e47a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e3a8:	4b36      	ldr	r3, [pc, #216]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e3ae:	4b35      	ldr	r3, [pc, #212]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d031      	beq.n	800e420 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	f003 0203 	and.w	r2, r3, #3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d12a      	bne.n	800e420 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	091b      	lsrs	r3, r3, #4
 800e3ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d122      	bne.n	800e420 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d11a      	bne.n	800e420 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	0a5b      	lsrs	r3, r3, #9
 800e3ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d111      	bne.n	800e420 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	0c1b      	lsrs	r3, r3, #16
 800e400:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e408:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d108      	bne.n	800e420 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	0e1b      	lsrs	r3, r3, #24
 800e412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e41a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d001      	beq.n	800e424 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e420:	2301      	movs	r3, #1
 800e422:	e02b      	b.n	800e47c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e424:	4b17      	ldr	r3, [pc, #92]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e428:	08db      	lsrs	r3, r3, #3
 800e42a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e42e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e434:	693a      	ldr	r2, [r7, #16]
 800e436:	429a      	cmp	r2, r3
 800e438:	d01f      	beq.n	800e47a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e43a:	4b12      	ldr	r3, [pc, #72]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e43e:	4a11      	ldr	r2, [pc, #68]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e440:	f023 0301 	bic.w	r3, r3, #1
 800e444:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e446:	f7f7 fadb 	bl	8005a00 <HAL_GetTick>
 800e44a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e44c:	bf00      	nop
 800e44e:	f7f7 fad7 	bl	8005a00 <HAL_GetTick>
 800e452:	4602      	mov	r2, r0
 800e454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e456:	4293      	cmp	r3, r2
 800e458:	d0f9      	beq.n	800e44e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e45a:	4b0a      	ldr	r3, [pc, #40]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e45c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e45e:	4b0a      	ldr	r3, [pc, #40]	; (800e488 <HAL_RCC_OscConfig+0x8b0>)
 800e460:	4013      	ands	r3, r2
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e466:	00d2      	lsls	r2, r2, #3
 800e468:	4906      	ldr	r1, [pc, #24]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e46a:	4313      	orrs	r3, r2
 800e46c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e46e:	4b05      	ldr	r3, [pc, #20]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e472:	4a04      	ldr	r2, [pc, #16]	; (800e484 <HAL_RCC_OscConfig+0x8ac>)
 800e474:	f043 0301 	orr.w	r3, r3, #1
 800e478:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3730      	adds	r7, #48	; 0x30
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	58024400 	.word	0x58024400
 800e488:	ffff0007 	.word	0xffff0007

0800e48c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b086      	sub	sp, #24
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d101      	bne.n	800e4a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e49c:	2301      	movs	r3, #1
 800e49e:	e19c      	b.n	800e7da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e4a0:	4b8a      	ldr	r3, [pc, #552]	; (800e6cc <HAL_RCC_ClockConfig+0x240>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f003 030f 	and.w	r3, r3, #15
 800e4a8:	683a      	ldr	r2, [r7, #0]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d910      	bls.n	800e4d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e4ae:	4b87      	ldr	r3, [pc, #540]	; (800e6cc <HAL_RCC_ClockConfig+0x240>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f023 020f 	bic.w	r2, r3, #15
 800e4b6:	4985      	ldr	r1, [pc, #532]	; (800e6cc <HAL_RCC_ClockConfig+0x240>)
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e4be:	4b83      	ldr	r3, [pc, #524]	; (800e6cc <HAL_RCC_ClockConfig+0x240>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f003 030f 	and.w	r3, r3, #15
 800e4c6:	683a      	ldr	r2, [r7, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d001      	beq.n	800e4d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e184      	b.n	800e7da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	f003 0304 	and.w	r3, r3, #4
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d010      	beq.n	800e4fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	691a      	ldr	r2, [r3, #16]
 800e4e0:	4b7b      	ldr	r3, [pc, #492]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d908      	bls.n	800e4fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e4ec:	4b78      	ldr	r3, [pc, #480]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e4ee:	699b      	ldr	r3, [r3, #24]
 800e4f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	4975      	ldr	r1, [pc, #468]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e4fa:	4313      	orrs	r3, r2
 800e4fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0308 	and.w	r3, r3, #8
 800e506:	2b00      	cmp	r3, #0
 800e508:	d010      	beq.n	800e52c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	695a      	ldr	r2, [r3, #20]
 800e50e:	4b70      	ldr	r3, [pc, #448]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e510:	69db      	ldr	r3, [r3, #28]
 800e512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e516:	429a      	cmp	r2, r3
 800e518:	d908      	bls.n	800e52c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e51a:	4b6d      	ldr	r3, [pc, #436]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e51c:	69db      	ldr	r3, [r3, #28]
 800e51e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	695b      	ldr	r3, [r3, #20]
 800e526:	496a      	ldr	r1, [pc, #424]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e528:	4313      	orrs	r3, r2
 800e52a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f003 0310 	and.w	r3, r3, #16
 800e534:	2b00      	cmp	r3, #0
 800e536:	d010      	beq.n	800e55a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	699a      	ldr	r2, [r3, #24]
 800e53c:	4b64      	ldr	r3, [pc, #400]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e53e:	69db      	ldr	r3, [r3, #28]
 800e540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e544:	429a      	cmp	r2, r3
 800e546:	d908      	bls.n	800e55a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e548:	4b61      	ldr	r3, [pc, #388]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e54a:	69db      	ldr	r3, [r3, #28]
 800e54c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	699b      	ldr	r3, [r3, #24]
 800e554:	495e      	ldr	r1, [pc, #376]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e556:	4313      	orrs	r3, r2
 800e558:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f003 0320 	and.w	r3, r3, #32
 800e562:	2b00      	cmp	r3, #0
 800e564:	d010      	beq.n	800e588 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	69da      	ldr	r2, [r3, #28]
 800e56a:	4b59      	ldr	r3, [pc, #356]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e572:	429a      	cmp	r2, r3
 800e574:	d908      	bls.n	800e588 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e576:	4b56      	ldr	r3, [pc, #344]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e578:	6a1b      	ldr	r3, [r3, #32]
 800e57a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	69db      	ldr	r3, [r3, #28]
 800e582:	4953      	ldr	r1, [pc, #332]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e584:	4313      	orrs	r3, r2
 800e586:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f003 0302 	and.w	r3, r3, #2
 800e590:	2b00      	cmp	r3, #0
 800e592:	d010      	beq.n	800e5b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68da      	ldr	r2, [r3, #12]
 800e598:	4b4d      	ldr	r3, [pc, #308]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e59a:	699b      	ldr	r3, [r3, #24]
 800e59c:	f003 030f 	and.w	r3, r3, #15
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d908      	bls.n	800e5b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e5a4:	4b4a      	ldr	r3, [pc, #296]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e5a6:	699b      	ldr	r3, [r3, #24]
 800e5a8:	f023 020f 	bic.w	r2, r3, #15
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	4947      	ldr	r1, [pc, #284]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f003 0301 	and.w	r3, r3, #1
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d055      	beq.n	800e66e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e5c2:	4b43      	ldr	r3, [pc, #268]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e5c4:	699b      	ldr	r3, [r3, #24]
 800e5c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	4940      	ldr	r1, [pc, #256]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	d107      	bne.n	800e5ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e5dc:	4b3c      	ldr	r3, [pc, #240]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d121      	bne.n	800e62c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	e0f6      	b.n	800e7da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d107      	bne.n	800e604 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e5f4:	4b36      	ldr	r3, [pc, #216]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d115      	bne.n	800e62c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e600:	2301      	movs	r3, #1
 800e602:	e0ea      	b.n	800e7da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d107      	bne.n	800e61c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e60c:	4b30      	ldr	r3, [pc, #192]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e614:	2b00      	cmp	r3, #0
 800e616:	d109      	bne.n	800e62c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e618:	2301      	movs	r3, #1
 800e61a:	e0de      	b.n	800e7da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e61c:	4b2c      	ldr	r3, [pc, #176]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f003 0304 	and.w	r3, r3, #4
 800e624:	2b00      	cmp	r3, #0
 800e626:	d101      	bne.n	800e62c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	e0d6      	b.n	800e7da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e62c:	4b28      	ldr	r3, [pc, #160]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	f023 0207 	bic.w	r2, r3, #7
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	4925      	ldr	r1, [pc, #148]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e63a:	4313      	orrs	r3, r2
 800e63c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e63e:	f7f7 f9df 	bl	8005a00 <HAL_GetTick>
 800e642:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e644:	e00a      	b.n	800e65c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e646:	f7f7 f9db 	bl	8005a00 <HAL_GetTick>
 800e64a:	4602      	mov	r2, r0
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	f241 3288 	movw	r2, #5000	; 0x1388
 800e654:	4293      	cmp	r3, r2
 800e656:	d901      	bls.n	800e65c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e658:	2303      	movs	r3, #3
 800e65a:	e0be      	b.n	800e7da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e65c:	4b1c      	ldr	r3, [pc, #112]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e65e:	691b      	ldr	r3, [r3, #16]
 800e660:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	00db      	lsls	r3, r3, #3
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d1eb      	bne.n	800e646 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 0302 	and.w	r3, r3, #2
 800e676:	2b00      	cmp	r3, #0
 800e678:	d010      	beq.n	800e69c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	68da      	ldr	r2, [r3, #12]
 800e67e:	4b14      	ldr	r3, [pc, #80]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	f003 030f 	and.w	r3, r3, #15
 800e686:	429a      	cmp	r2, r3
 800e688:	d208      	bcs.n	800e69c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e68a:	4b11      	ldr	r3, [pc, #68]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e68c:	699b      	ldr	r3, [r3, #24]
 800e68e:	f023 020f 	bic.w	r2, r3, #15
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	490e      	ldr	r1, [pc, #56]	; (800e6d0 <HAL_RCC_ClockConfig+0x244>)
 800e698:	4313      	orrs	r3, r2
 800e69a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e69c:	4b0b      	ldr	r3, [pc, #44]	; (800e6cc <HAL_RCC_ClockConfig+0x240>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f003 030f 	and.w	r3, r3, #15
 800e6a4:	683a      	ldr	r2, [r7, #0]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d214      	bcs.n	800e6d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6aa:	4b08      	ldr	r3, [pc, #32]	; (800e6cc <HAL_RCC_ClockConfig+0x240>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f023 020f 	bic.w	r2, r3, #15
 800e6b2:	4906      	ldr	r1, [pc, #24]	; (800e6cc <HAL_RCC_ClockConfig+0x240>)
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6ba:	4b04      	ldr	r3, [pc, #16]	; (800e6cc <HAL_RCC_ClockConfig+0x240>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f003 030f 	and.w	r3, r3, #15
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	d005      	beq.n	800e6d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	e086      	b.n	800e7da <HAL_RCC_ClockConfig+0x34e>
 800e6cc:	52002000 	.word	0x52002000
 800e6d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f003 0304 	and.w	r3, r3, #4
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d010      	beq.n	800e702 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	691a      	ldr	r2, [r3, #16]
 800e6e4:	4b3f      	ldr	r3, [pc, #252]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e6e6:	699b      	ldr	r3, [r3, #24]
 800e6e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d208      	bcs.n	800e702 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e6f0:	4b3c      	ldr	r3, [pc, #240]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e6f2:	699b      	ldr	r3, [r3, #24]
 800e6f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	691b      	ldr	r3, [r3, #16]
 800e6fc:	4939      	ldr	r1, [pc, #228]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e6fe:	4313      	orrs	r3, r2
 800e700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f003 0308 	and.w	r3, r3, #8
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d010      	beq.n	800e730 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	695a      	ldr	r2, [r3, #20]
 800e712:	4b34      	ldr	r3, [pc, #208]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d208      	bcs.n	800e730 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e71e:	4b31      	ldr	r3, [pc, #196]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e720:	69db      	ldr	r3, [r3, #28]
 800e722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	695b      	ldr	r3, [r3, #20]
 800e72a:	492e      	ldr	r1, [pc, #184]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e72c:	4313      	orrs	r3, r2
 800e72e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f003 0310 	and.w	r3, r3, #16
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d010      	beq.n	800e75e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	699a      	ldr	r2, [r3, #24]
 800e740:	4b28      	ldr	r3, [pc, #160]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e742:	69db      	ldr	r3, [r3, #28]
 800e744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e748:	429a      	cmp	r2, r3
 800e74a:	d208      	bcs.n	800e75e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e74c:	4b25      	ldr	r3, [pc, #148]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e74e:	69db      	ldr	r3, [r3, #28]
 800e750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	699b      	ldr	r3, [r3, #24]
 800e758:	4922      	ldr	r1, [pc, #136]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e75a:	4313      	orrs	r3, r2
 800e75c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f003 0320 	and.w	r3, r3, #32
 800e766:	2b00      	cmp	r3, #0
 800e768:	d010      	beq.n	800e78c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	69da      	ldr	r2, [r3, #28]
 800e76e:	4b1d      	ldr	r3, [pc, #116]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e770:	6a1b      	ldr	r3, [r3, #32]
 800e772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e776:	429a      	cmp	r2, r3
 800e778:	d208      	bcs.n	800e78c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e77a:	4b1a      	ldr	r3, [pc, #104]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	69db      	ldr	r3, [r3, #28]
 800e786:	4917      	ldr	r1, [pc, #92]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e788:	4313      	orrs	r3, r2
 800e78a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e78c:	f000 f834 	bl	800e7f8 <HAL_RCC_GetSysClockFreq>
 800e790:	4602      	mov	r2, r0
 800e792:	4b14      	ldr	r3, [pc, #80]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	0a1b      	lsrs	r3, r3, #8
 800e798:	f003 030f 	and.w	r3, r3, #15
 800e79c:	4912      	ldr	r1, [pc, #72]	; (800e7e8 <HAL_RCC_ClockConfig+0x35c>)
 800e79e:	5ccb      	ldrb	r3, [r1, r3]
 800e7a0:	f003 031f 	and.w	r3, r3, #31
 800e7a4:	fa22 f303 	lsr.w	r3, r2, r3
 800e7a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e7aa:	4b0e      	ldr	r3, [pc, #56]	; (800e7e4 <HAL_RCC_ClockConfig+0x358>)
 800e7ac:	699b      	ldr	r3, [r3, #24]
 800e7ae:	f003 030f 	and.w	r3, r3, #15
 800e7b2:	4a0d      	ldr	r2, [pc, #52]	; (800e7e8 <HAL_RCC_ClockConfig+0x35c>)
 800e7b4:	5cd3      	ldrb	r3, [r2, r3]
 800e7b6:	f003 031f 	and.w	r3, r3, #31
 800e7ba:	693a      	ldr	r2, [r7, #16]
 800e7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800e7c0:	4a0a      	ldr	r2, [pc, #40]	; (800e7ec <HAL_RCC_ClockConfig+0x360>)
 800e7c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e7c4:	4a0a      	ldr	r2, [pc, #40]	; (800e7f0 <HAL_RCC_ClockConfig+0x364>)
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e7ca:	4b0a      	ldr	r3, [pc, #40]	; (800e7f4 <HAL_RCC_ClockConfig+0x368>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7f5 ff3c 	bl	800464c <HAL_InitTick>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3718      	adds	r7, #24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	58024400 	.word	0x58024400
 800e7e8:	0801aec4 	.word	0x0801aec4
 800e7ec:	240000c0 	.word	0x240000c0
 800e7f0:	240000bc 	.word	0x240000bc
 800e7f4:	240000c4 	.word	0x240000c4

0800e7f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b089      	sub	sp, #36	; 0x24
 800e7fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e7fe:	4bb3      	ldr	r3, [pc, #716]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e806:	2b18      	cmp	r3, #24
 800e808:	f200 8155 	bhi.w	800eab6 <HAL_RCC_GetSysClockFreq+0x2be>
 800e80c:	a201      	add	r2, pc, #4	; (adr r2, 800e814 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e80e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e812:	bf00      	nop
 800e814:	0800e879 	.word	0x0800e879
 800e818:	0800eab7 	.word	0x0800eab7
 800e81c:	0800eab7 	.word	0x0800eab7
 800e820:	0800eab7 	.word	0x0800eab7
 800e824:	0800eab7 	.word	0x0800eab7
 800e828:	0800eab7 	.word	0x0800eab7
 800e82c:	0800eab7 	.word	0x0800eab7
 800e830:	0800eab7 	.word	0x0800eab7
 800e834:	0800e89f 	.word	0x0800e89f
 800e838:	0800eab7 	.word	0x0800eab7
 800e83c:	0800eab7 	.word	0x0800eab7
 800e840:	0800eab7 	.word	0x0800eab7
 800e844:	0800eab7 	.word	0x0800eab7
 800e848:	0800eab7 	.word	0x0800eab7
 800e84c:	0800eab7 	.word	0x0800eab7
 800e850:	0800eab7 	.word	0x0800eab7
 800e854:	0800e8a5 	.word	0x0800e8a5
 800e858:	0800eab7 	.word	0x0800eab7
 800e85c:	0800eab7 	.word	0x0800eab7
 800e860:	0800eab7 	.word	0x0800eab7
 800e864:	0800eab7 	.word	0x0800eab7
 800e868:	0800eab7 	.word	0x0800eab7
 800e86c:	0800eab7 	.word	0x0800eab7
 800e870:	0800eab7 	.word	0x0800eab7
 800e874:	0800e8ab 	.word	0x0800e8ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e878:	4b94      	ldr	r3, [pc, #592]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f003 0320 	and.w	r3, r3, #32
 800e880:	2b00      	cmp	r3, #0
 800e882:	d009      	beq.n	800e898 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e884:	4b91      	ldr	r3, [pc, #580]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	08db      	lsrs	r3, r3, #3
 800e88a:	f003 0303 	and.w	r3, r3, #3
 800e88e:	4a90      	ldr	r2, [pc, #576]	; (800ead0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e890:	fa22 f303 	lsr.w	r3, r2, r3
 800e894:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e896:	e111      	b.n	800eabc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e898:	4b8d      	ldr	r3, [pc, #564]	; (800ead0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e89a:	61bb      	str	r3, [r7, #24]
      break;
 800e89c:	e10e      	b.n	800eabc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e89e:	4b8d      	ldr	r3, [pc, #564]	; (800ead4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e8a0:	61bb      	str	r3, [r7, #24]
      break;
 800e8a2:	e10b      	b.n	800eabc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e8a4:	4b8c      	ldr	r3, [pc, #560]	; (800ead8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e8a6:	61bb      	str	r3, [r7, #24]
      break;
 800e8a8:	e108      	b.n	800eabc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e8aa:	4b88      	ldr	r3, [pc, #544]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ae:	f003 0303 	and.w	r3, r3, #3
 800e8b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e8b4:	4b85      	ldr	r3, [pc, #532]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8b8:	091b      	lsrs	r3, r3, #4
 800e8ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e8c0:	4b82      	ldr	r3, [pc, #520]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c4:	f003 0301 	and.w	r3, r3, #1
 800e8c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e8ca:	4b80      	ldr	r3, [pc, #512]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ce:	08db      	lsrs	r3, r3, #3
 800e8d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	fb02 f303 	mul.w	r3, r2, r3
 800e8da:	ee07 3a90 	vmov	s15, r3
 800e8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f000 80e1 	beq.w	800eab0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2b02      	cmp	r3, #2
 800e8f2:	f000 8083 	beq.w	800e9fc <HAL_RCC_GetSysClockFreq+0x204>
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	f200 80a1 	bhi.w	800ea40 <HAL_RCC_GetSysClockFreq+0x248>
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d003      	beq.n	800e90c <HAL_RCC_GetSysClockFreq+0x114>
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	2b01      	cmp	r3, #1
 800e908:	d056      	beq.n	800e9b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e90a:	e099      	b.n	800ea40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e90c:	4b6f      	ldr	r3, [pc, #444]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f003 0320 	and.w	r3, r3, #32
 800e914:	2b00      	cmp	r3, #0
 800e916:	d02d      	beq.n	800e974 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e918:	4b6c      	ldr	r3, [pc, #432]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	08db      	lsrs	r3, r3, #3
 800e91e:	f003 0303 	and.w	r3, r3, #3
 800e922:	4a6b      	ldr	r2, [pc, #428]	; (800ead0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e924:	fa22 f303 	lsr.w	r3, r2, r3
 800e928:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	ee07 3a90 	vmov	s15, r3
 800e930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	ee07 3a90 	vmov	s15, r3
 800e93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e942:	4b62      	ldr	r3, [pc, #392]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e94a:	ee07 3a90 	vmov	s15, r3
 800e94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e952:	ed97 6a02 	vldr	s12, [r7, #8]
 800e956:	eddf 5a61 	vldr	s11, [pc, #388]	; 800eadc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e96e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e972:	e087      	b.n	800ea84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	ee07 3a90 	vmov	s15, r3
 800e97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e97e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800eae0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e986:	4b51      	ldr	r3, [pc, #324]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e98e:	ee07 3a90 	vmov	s15, r3
 800e992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e996:	ed97 6a02 	vldr	s12, [r7, #8]
 800e99a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800eadc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e9b6:	e065      	b.n	800ea84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e9b8:	693b      	ldr	r3, [r7, #16]
 800e9ba:	ee07 3a90 	vmov	s15, r3
 800e9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800eae4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9ca:	4b40      	ldr	r3, [pc, #256]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9d2:	ee07 3a90 	vmov	s15, r3
 800e9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9da:	ed97 6a02 	vldr	s12, [r7, #8]
 800e9de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800eadc <HAL_RCC_GetSysClockFreq+0x2e4>
 800e9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e9fa:	e043      	b.n	800ea84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	ee07 3a90 	vmov	s15, r3
 800ea02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea06:	eddf 6a38 	vldr	s13, [pc, #224]	; 800eae8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ea0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea0e:	4b2f      	ldr	r3, [pc, #188]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea16:	ee07 3a90 	vmov	s15, r3
 800ea1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ea22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800eadc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ea26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ea3e:	e021      	b.n	800ea84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	ee07 3a90 	vmov	s15, r3
 800ea46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800eae4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ea4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea52:	4b1e      	ldr	r3, [pc, #120]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea5a:	ee07 3a90 	vmov	s15, r3
 800ea5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea62:	ed97 6a02 	vldr	s12, [r7, #8]
 800ea66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800eadc <HAL_RCC_GetSysClockFreq+0x2e4>
 800ea6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ea82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ea84:	4b11      	ldr	r3, [pc, #68]	; (800eacc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea88:	0a5b      	lsrs	r3, r3, #9
 800ea8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea8e:	3301      	adds	r3, #1
 800ea90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	ee07 3a90 	vmov	s15, r3
 800ea98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ea9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800eaa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eaa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eaa8:	ee17 3a90 	vmov	r3, s15
 800eaac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800eaae:	e005      	b.n	800eabc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800eab0:	2300      	movs	r3, #0
 800eab2:	61bb      	str	r3, [r7, #24]
      break;
 800eab4:	e002      	b.n	800eabc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800eab6:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800eab8:	61bb      	str	r3, [r7, #24]
      break;
 800eaba:	bf00      	nop
  }

  return sysclockfreq;
 800eabc:	69bb      	ldr	r3, [r7, #24]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3724      	adds	r7, #36	; 0x24
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	58024400 	.word	0x58024400
 800ead0:	03d09000 	.word	0x03d09000
 800ead4:	003d0900 	.word	0x003d0900
 800ead8:	017d7840 	.word	0x017d7840
 800eadc:	46000000 	.word	0x46000000
 800eae0:	4c742400 	.word	0x4c742400
 800eae4:	4a742400 	.word	0x4a742400
 800eae8:	4bbebc20 	.word	0x4bbebc20

0800eaec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800eaf2:	f7ff fe81 	bl	800e7f8 <HAL_RCC_GetSysClockFreq>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	4b10      	ldr	r3, [pc, #64]	; (800eb3c <HAL_RCC_GetHCLKFreq+0x50>)
 800eafa:	699b      	ldr	r3, [r3, #24]
 800eafc:	0a1b      	lsrs	r3, r3, #8
 800eafe:	f003 030f 	and.w	r3, r3, #15
 800eb02:	490f      	ldr	r1, [pc, #60]	; (800eb40 <HAL_RCC_GetHCLKFreq+0x54>)
 800eb04:	5ccb      	ldrb	r3, [r1, r3]
 800eb06:	f003 031f 	and.w	r3, r3, #31
 800eb0a:	fa22 f303 	lsr.w	r3, r2, r3
 800eb0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eb10:	4b0a      	ldr	r3, [pc, #40]	; (800eb3c <HAL_RCC_GetHCLKFreq+0x50>)
 800eb12:	699b      	ldr	r3, [r3, #24]
 800eb14:	f003 030f 	and.w	r3, r3, #15
 800eb18:	4a09      	ldr	r2, [pc, #36]	; (800eb40 <HAL_RCC_GetHCLKFreq+0x54>)
 800eb1a:	5cd3      	ldrb	r3, [r2, r3]
 800eb1c:	f003 031f 	and.w	r3, r3, #31
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	fa22 f303 	lsr.w	r3, r2, r3
 800eb26:	4a07      	ldr	r2, [pc, #28]	; (800eb44 <HAL_RCC_GetHCLKFreq+0x58>)
 800eb28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800eb2a:	4a07      	ldr	r2, [pc, #28]	; (800eb48 <HAL_RCC_GetHCLKFreq+0x5c>)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800eb30:	4b04      	ldr	r3, [pc, #16]	; (800eb44 <HAL_RCC_GetHCLKFreq+0x58>)
 800eb32:	681b      	ldr	r3, [r3, #0]
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}
 800eb3c:	58024400 	.word	0x58024400
 800eb40:	0801aec4 	.word	0x0801aec4
 800eb44:	240000c0 	.word	0x240000c0
 800eb48:	240000bc 	.word	0x240000bc

0800eb4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800eb50:	f7ff ffcc 	bl	800eaec <HAL_RCC_GetHCLKFreq>
 800eb54:	4602      	mov	r2, r0
 800eb56:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eb58:	69db      	ldr	r3, [r3, #28]
 800eb5a:	091b      	lsrs	r3, r3, #4
 800eb5c:	f003 0307 	and.w	r3, r3, #7
 800eb60:	4904      	ldr	r1, [pc, #16]	; (800eb74 <HAL_RCC_GetPCLK1Freq+0x28>)
 800eb62:	5ccb      	ldrb	r3, [r1, r3]
 800eb64:	f003 031f 	and.w	r3, r3, #31
 800eb68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	58024400 	.word	0x58024400
 800eb74:	0801aec4 	.word	0x0801aec4

0800eb78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800eb7c:	f7ff ffb6 	bl	800eaec <HAL_RCC_GetHCLKFreq>
 800eb80:	4602      	mov	r2, r0
 800eb82:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800eb84:	69db      	ldr	r3, [r3, #28]
 800eb86:	0a1b      	lsrs	r3, r3, #8
 800eb88:	f003 0307 	and.w	r3, r3, #7
 800eb8c:	4904      	ldr	r1, [pc, #16]	; (800eba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800eb8e:	5ccb      	ldrb	r3, [r1, r3]
 800eb90:	f003 031f 	and.w	r3, r3, #31
 800eb94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	58024400 	.word	0x58024400
 800eba0:	0801aec4 	.word	0x0801aec4

0800eba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	223f      	movs	r2, #63	; 0x3f
 800ebb2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ebb4:	4b1a      	ldr	r3, [pc, #104]	; (800ec20 <HAL_RCC_GetClockConfig+0x7c>)
 800ebb6:	691b      	ldr	r3, [r3, #16]
 800ebb8:	f003 0207 	and.w	r2, r3, #7
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ebc0:	4b17      	ldr	r3, [pc, #92]	; (800ec20 <HAL_RCC_GetClockConfig+0x7c>)
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ebcc:	4b14      	ldr	r3, [pc, #80]	; (800ec20 <HAL_RCC_GetClockConfig+0x7c>)
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	f003 020f 	and.w	r2, r3, #15
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ebd8:	4b11      	ldr	r3, [pc, #68]	; (800ec20 <HAL_RCC_GetClockConfig+0x7c>)
 800ebda:	699b      	ldr	r3, [r3, #24]
 800ebdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ebe4:	4b0e      	ldr	r3, [pc, #56]	; (800ec20 <HAL_RCC_GetClockConfig+0x7c>)
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ebf0:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <HAL_RCC_GetClockConfig+0x7c>)
 800ebf2:	69db      	ldr	r3, [r3, #28]
 800ebf4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ebfc:	4b08      	ldr	r3, [pc, #32]	; (800ec20 <HAL_RCC_GetClockConfig+0x7c>)
 800ebfe:	6a1b      	ldr	r3, [r3, #32]
 800ec00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ec08:	4b06      	ldr	r3, [pc, #24]	; (800ec24 <HAL_RCC_GetClockConfig+0x80>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f003 020f 	and.w	r2, r3, #15
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	601a      	str	r2, [r3, #0]
}
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	58024400 	.word	0x58024400
 800ec24:	52002000 	.word	0x52002000

0800ec28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ec28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec2c:	b0ca      	sub	sp, #296	; 0x128
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ec34:	2300      	movs	r3, #0
 800ec36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ec40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ec4c:	2500      	movs	r5, #0
 800ec4e:	ea54 0305 	orrs.w	r3, r4, r5
 800ec52:	d049      	beq.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ec54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ec5e:	d02f      	beq.n	800ecc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ec60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ec64:	d828      	bhi.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ec66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec6a:	d01a      	beq.n	800eca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ec6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec70:	d822      	bhi.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d003      	beq.n	800ec7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ec76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec7a:	d007      	beq.n	800ec8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ec7c:	e01c      	b.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec7e:	4bb8      	ldr	r3, [pc, #736]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec82:	4ab7      	ldr	r2, [pc, #732]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ec8a:	e01a      	b.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ec8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec90:	3308      	adds	r3, #8
 800ec92:	2102      	movs	r1, #2
 800ec94:	4618      	mov	r0, r3
 800ec96:	f002 fb61 	bl	801135c <RCCEx_PLL2_Config>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800eca0:	e00f      	b.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eca6:	3328      	adds	r3, #40	; 0x28
 800eca8:	2102      	movs	r1, #2
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f002 fc08 	bl	80114c0 <RCCEx_PLL3_Config>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ecb6:	e004      	b.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ecbe:	e000      	b.n	800ecc2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ecc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d10a      	bne.n	800ece0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ecca:	4ba5      	ldr	r3, [pc, #660]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ecd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ecd8:	4aa1      	ldr	r2, [pc, #644]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecda:	430b      	orrs	r3, r1
 800ecdc:	6513      	str	r3, [r2, #80]	; 0x50
 800ecde:	e003      	b.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ece0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ece4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ece8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ecf4:	f04f 0900 	mov.w	r9, #0
 800ecf8:	ea58 0309 	orrs.w	r3, r8, r9
 800ecfc:	d047      	beq.n	800ed8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ecfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	d82a      	bhi.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ed08:	a201      	add	r2, pc, #4	; (adr r2, 800ed10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ed0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0e:	bf00      	nop
 800ed10:	0800ed25 	.word	0x0800ed25
 800ed14:	0800ed33 	.word	0x0800ed33
 800ed18:	0800ed49 	.word	0x0800ed49
 800ed1c:	0800ed67 	.word	0x0800ed67
 800ed20:	0800ed67 	.word	0x0800ed67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed24:	4b8e      	ldr	r3, [pc, #568]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed28:	4a8d      	ldr	r2, [pc, #564]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed30:	e01a      	b.n	800ed68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed36:	3308      	adds	r3, #8
 800ed38:	2100      	movs	r1, #0
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f002 fb0e 	bl	801135c <RCCEx_PLL2_Config>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed46:	e00f      	b.n	800ed68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed4c:	3328      	adds	r3, #40	; 0x28
 800ed4e:	2100      	movs	r1, #0
 800ed50:	4618      	mov	r0, r3
 800ed52:	f002 fbb5 	bl	80114c0 <RCCEx_PLL3_Config>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ed5c:	e004      	b.n	800ed68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ed64:	e000      	b.n	800ed68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ed66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10a      	bne.n	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ed70:	4b7b      	ldr	r3, [pc, #492]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed74:	f023 0107 	bic.w	r1, r3, #7
 800ed78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed7e:	4a78      	ldr	r2, [pc, #480]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed80:	430b      	orrs	r3, r1
 800ed82:	6513      	str	r3, [r2, #80]	; 0x50
 800ed84:	e003      	b.n	800ed8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ed8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ed9a:	f04f 0b00 	mov.w	fp, #0
 800ed9e:	ea5a 030b 	orrs.w	r3, sl, fp
 800eda2:	d04c      	beq.n	800ee3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800eda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eda8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edae:	d030      	beq.n	800ee12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800edb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edb4:	d829      	bhi.n	800ee0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800edb6:	2bc0      	cmp	r3, #192	; 0xc0
 800edb8:	d02d      	beq.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800edba:	2bc0      	cmp	r3, #192	; 0xc0
 800edbc:	d825      	bhi.n	800ee0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800edbe:	2b80      	cmp	r3, #128	; 0x80
 800edc0:	d018      	beq.n	800edf4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800edc2:	2b80      	cmp	r3, #128	; 0x80
 800edc4:	d821      	bhi.n	800ee0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d002      	beq.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800edca:	2b40      	cmp	r3, #64	; 0x40
 800edcc:	d007      	beq.n	800edde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800edce:	e01c      	b.n	800ee0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edd0:	4b63      	ldr	r3, [pc, #396]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd4:	4a62      	ldr	r2, [pc, #392]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800edda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eddc:	e01c      	b.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ede2:	3308      	adds	r3, #8
 800ede4:	2100      	movs	r1, #0
 800ede6:	4618      	mov	r0, r3
 800ede8:	f002 fab8 	bl	801135c <RCCEx_PLL2_Config>
 800edec:	4603      	mov	r3, r0
 800edee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800edf2:	e011      	b.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edf8:	3328      	adds	r3, #40	; 0x28
 800edfa:	2100      	movs	r1, #0
 800edfc:	4618      	mov	r0, r3
 800edfe:	f002 fb5f 	bl	80114c0 <RCCEx_PLL3_Config>
 800ee02:	4603      	mov	r3, r0
 800ee04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ee08:	e006      	b.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee10:	e002      	b.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ee12:	bf00      	nop
 800ee14:	e000      	b.n	800ee18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ee16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10a      	bne.n	800ee36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ee20:	4b4f      	ldr	r3, [pc, #316]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee24:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ee28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee2e:	4a4c      	ldr	r2, [pc, #304]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee30:	430b      	orrs	r3, r1
 800ee32:	6513      	str	r3, [r2, #80]	; 0x50
 800ee34:	e003      	b.n	800ee3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee46:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ee4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ee54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ee58:	460b      	mov	r3, r1
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	d053      	beq.n	800ef06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ee5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ee66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee6a:	d035      	beq.n	800eed8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ee6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee70:	d82e      	bhi.n	800eed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ee72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ee76:	d031      	beq.n	800eedc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ee78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ee7c:	d828      	bhi.n	800eed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ee7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee82:	d01a      	beq.n	800eeba <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ee84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee88:	d822      	bhi.n	800eed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d003      	beq.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ee8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee92:	d007      	beq.n	800eea4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ee94:	e01c      	b.n	800eed0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee96:	4b32      	ldr	r3, [pc, #200]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee9a:	4a31      	ldr	r2, [pc, #196]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eea0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eea2:	e01c      	b.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eea8:	3308      	adds	r3, #8
 800eeaa:	2100      	movs	r1, #0
 800eeac:	4618      	mov	r0, r3
 800eeae:	f002 fa55 	bl	801135c <RCCEx_PLL2_Config>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eeb8:	e011      	b.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eeba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eebe:	3328      	adds	r3, #40	; 0x28
 800eec0:	2100      	movs	r1, #0
 800eec2:	4618      	mov	r0, r3
 800eec4:	f002 fafc 	bl	80114c0 <RCCEx_PLL3_Config>
 800eec8:	4603      	mov	r3, r0
 800eeca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eece:	e006      	b.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eed6:	e002      	b.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eed8:	bf00      	nop
 800eeda:	e000      	b.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eedc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d10b      	bne.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800eee6:	4b1e      	ldr	r3, [pc, #120]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800eeee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800eef6:	4a1a      	ldr	r2, [pc, #104]	; (800ef60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eef8:	430b      	orrs	r3, r1
 800eefa:	6593      	str	r3, [r2, #88]	; 0x58
 800eefc:	e003      	b.n	800ef06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eefe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ef06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ef12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ef16:	2300      	movs	r3, #0
 800ef18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ef1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ef20:	460b      	mov	r3, r1
 800ef22:	4313      	orrs	r3, r2
 800ef24:	d056      	beq.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ef26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ef2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef32:	d038      	beq.n	800efa6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ef34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef38:	d831      	bhi.n	800ef9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ef3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ef3e:	d034      	beq.n	800efaa <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ef40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ef44:	d82b      	bhi.n	800ef9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ef46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef4a:	d01d      	beq.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ef4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef50:	d825      	bhi.n	800ef9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d006      	beq.n	800ef64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ef56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ef5a:	d00a      	beq.n	800ef72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ef5c:	e01f      	b.n	800ef9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ef5e:	bf00      	nop
 800ef60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef64:	4ba2      	ldr	r3, [pc, #648]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef68:	4aa1      	ldr	r2, [pc, #644]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ef70:	e01c      	b.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef76:	3308      	adds	r3, #8
 800ef78:	2100      	movs	r1, #0
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f002 f9ee 	bl	801135c <RCCEx_PLL2_Config>
 800ef80:	4603      	mov	r3, r0
 800ef82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ef86:	e011      	b.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ef88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef8c:	3328      	adds	r3, #40	; 0x28
 800ef8e:	2100      	movs	r1, #0
 800ef90:	4618      	mov	r0, r3
 800ef92:	f002 fa95 	bl	80114c0 <RCCEx_PLL3_Config>
 800ef96:	4603      	mov	r3, r0
 800ef98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ef9c:	e006      	b.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800efa4:	e002      	b.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800efa6:	bf00      	nop
 800efa8:	e000      	b.n	800efac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800efaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10b      	bne.n	800efcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800efb4:	4b8e      	ldr	r3, [pc, #568]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efb8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800efbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800efc4:	4a8a      	ldr	r2, [pc, #552]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efc6:	430b      	orrs	r3, r1
 800efc8:	6593      	str	r3, [r2, #88]	; 0x58
 800efca:	e003      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800efd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800efe0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800efe4:	2300      	movs	r3, #0
 800efe6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800efea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800efee:	460b      	mov	r3, r1
 800eff0:	4313      	orrs	r3, r2
 800eff2:	d03a      	beq.n	800f06a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800eff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800effa:	2b30      	cmp	r3, #48	; 0x30
 800effc:	d01f      	beq.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800effe:	2b30      	cmp	r3, #48	; 0x30
 800f000:	d819      	bhi.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f002:	2b20      	cmp	r3, #32
 800f004:	d00c      	beq.n	800f020 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f006:	2b20      	cmp	r3, #32
 800f008:	d815      	bhi.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d019      	beq.n	800f042 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f00e:	2b10      	cmp	r3, #16
 800f010:	d111      	bne.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f012:	4b77      	ldr	r3, [pc, #476]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f016:	4a76      	ldr	r2, [pc, #472]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f01c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f01e:	e011      	b.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f024:	3308      	adds	r3, #8
 800f026:	2102      	movs	r1, #2
 800f028:	4618      	mov	r0, r3
 800f02a:	f002 f997 	bl	801135c <RCCEx_PLL2_Config>
 800f02e:	4603      	mov	r3, r0
 800f030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f034:	e006      	b.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f03c:	e002      	b.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f03e:	bf00      	nop
 800f040:	e000      	b.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f042:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d10a      	bne.n	800f062 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f04c:	4b68      	ldr	r3, [pc, #416]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f04e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f050:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f05a:	4a65      	ldr	r2, [pc, #404]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f05c:	430b      	orrs	r3, r1
 800f05e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f060:	e003      	b.n	800f06a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f066:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f072:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f076:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f07a:	2300      	movs	r3, #0
 800f07c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f080:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f084:	460b      	mov	r3, r1
 800f086:	4313      	orrs	r3, r2
 800f088:	d051      	beq.n	800f12e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f08e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f094:	d035      	beq.n	800f102 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f09a:	d82e      	bhi.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f09c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0a0:	d031      	beq.n	800f106 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f0a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0a6:	d828      	bhi.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f0a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0ac:	d01a      	beq.n	800f0e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f0ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0b2:	d822      	bhi.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d003      	beq.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0bc:	d007      	beq.n	800f0ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f0be:	e01c      	b.n	800f0fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0c0:	4b4b      	ldr	r3, [pc, #300]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c4:	4a4a      	ldr	r2, [pc, #296]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f0c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f0cc:	e01c      	b.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0d2:	3308      	adds	r3, #8
 800f0d4:	2100      	movs	r1, #0
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f002 f940 	bl	801135c <RCCEx_PLL2_Config>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f0e2:	e011      	b.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e8:	3328      	adds	r3, #40	; 0x28
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f002 f9e7 	bl	80114c0 <RCCEx_PLL3_Config>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f0f8:	e006      	b.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f100:	e002      	b.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f102:	bf00      	nop
 800f104:	e000      	b.n	800f108 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f106:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10a      	bne.n	800f126 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f110:	4b37      	ldr	r3, [pc, #220]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f114:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f11c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f11e:	4a34      	ldr	r2, [pc, #208]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f120:	430b      	orrs	r3, r1
 800f122:	6513      	str	r3, [r2, #80]	; 0x50
 800f124:	e003      	b.n	800f12e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f12a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f136:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f13a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f13e:	2300      	movs	r3, #0
 800f140:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f144:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f148:	460b      	mov	r3, r1
 800f14a:	4313      	orrs	r3, r2
 800f14c:	d056      	beq.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f158:	d033      	beq.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f15a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f15e:	d82c      	bhi.n	800f1ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f164:	d02f      	beq.n	800f1c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f16a:	d826      	bhi.n	800f1ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f16c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f170:	d02b      	beq.n	800f1ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f172:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f176:	d820      	bhi.n	800f1ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f17c:	d012      	beq.n	800f1a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f17e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f182:	d81a      	bhi.n	800f1ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f184:	2b00      	cmp	r3, #0
 800f186:	d022      	beq.n	800f1ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f18c:	d115      	bne.n	800f1ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f192:	3308      	adds	r3, #8
 800f194:	2101      	movs	r1, #1
 800f196:	4618      	mov	r0, r3
 800f198:	f002 f8e0 	bl	801135c <RCCEx_PLL2_Config>
 800f19c:	4603      	mov	r3, r0
 800f19e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f1a2:	e015      	b.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1a8:	3328      	adds	r3, #40	; 0x28
 800f1aa:	2101      	movs	r1, #1
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f002 f987 	bl	80114c0 <RCCEx_PLL3_Config>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f1b8:	e00a      	b.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f1c0:	e006      	b.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f1c2:	bf00      	nop
 800f1c4:	e004      	b.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f1c6:	bf00      	nop
 800f1c8:	e002      	b.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f1ca:	bf00      	nop
 800f1cc:	e000      	b.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f1ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f1d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10d      	bne.n	800f1f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f1d8:	4b05      	ldr	r3, [pc, #20]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1dc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1e6:	4a02      	ldr	r2, [pc, #8]	; (800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f1e8:	430b      	orrs	r3, r1
 800f1ea:	6513      	str	r3, [r2, #80]	; 0x50
 800f1ec:	e006      	b.n	800f1fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f1ee:	bf00      	nop
 800f1f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f1f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f1f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f204:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f20c:	2300      	movs	r3, #0
 800f20e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f212:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f216:	460b      	mov	r3, r1
 800f218:	4313      	orrs	r3, r2
 800f21a:	d055      	beq.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f228:	d033      	beq.n	800f292 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f22a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f22e:	d82c      	bhi.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f234:	d02f      	beq.n	800f296 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f23a:	d826      	bhi.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f23c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f240:	d02b      	beq.n	800f29a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f242:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f246:	d820      	bhi.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f24c:	d012      	beq.n	800f274 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f24e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f252:	d81a      	bhi.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f254:	2b00      	cmp	r3, #0
 800f256:	d022      	beq.n	800f29e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f25c:	d115      	bne.n	800f28a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f262:	3308      	adds	r3, #8
 800f264:	2101      	movs	r1, #1
 800f266:	4618      	mov	r0, r3
 800f268:	f002 f878 	bl	801135c <RCCEx_PLL2_Config>
 800f26c:	4603      	mov	r3, r0
 800f26e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f272:	e015      	b.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f278:	3328      	adds	r3, #40	; 0x28
 800f27a:	2101      	movs	r1, #1
 800f27c:	4618      	mov	r0, r3
 800f27e:	f002 f91f 	bl	80114c0 <RCCEx_PLL3_Config>
 800f282:	4603      	mov	r3, r0
 800f284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f288:	e00a      	b.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f28a:	2301      	movs	r3, #1
 800f28c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f290:	e006      	b.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f292:	bf00      	nop
 800f294:	e004      	b.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f296:	bf00      	nop
 800f298:	e002      	b.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f29a:	bf00      	nop
 800f29c:	e000      	b.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f29e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d10b      	bne.n	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f2a8:	4ba3      	ldr	r3, [pc, #652]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f2b8:	4a9f      	ldr	r2, [pc, #636]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2ba:	430b      	orrs	r3, r1
 800f2bc:	6593      	str	r3, [r2, #88]	; 0x58
 800f2be:	e003      	b.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f2d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f2d8:	2300      	movs	r3, #0
 800f2da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f2de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	d037      	beq.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2f2:	d00e      	beq.n	800f312 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f2f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2f8:	d816      	bhi.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d018      	beq.n	800f330 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f2fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f302:	d111      	bne.n	800f328 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f304:	4b8c      	ldr	r3, [pc, #560]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f308:	4a8b      	ldr	r2, [pc, #556]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f30a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f30e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f310:	e00f      	b.n	800f332 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f316:	3308      	adds	r3, #8
 800f318:	2101      	movs	r1, #1
 800f31a:	4618      	mov	r0, r3
 800f31c:	f002 f81e 	bl	801135c <RCCEx_PLL2_Config>
 800f320:	4603      	mov	r3, r0
 800f322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f326:	e004      	b.n	800f332 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f328:	2301      	movs	r3, #1
 800f32a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f32e:	e000      	b.n	800f332 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f336:	2b00      	cmp	r3, #0
 800f338:	d10a      	bne.n	800f350 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f33a:	4b7f      	ldr	r3, [pc, #508]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f33e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f348:	4a7b      	ldr	r2, [pc, #492]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f34a:	430b      	orrs	r3, r1
 800f34c:	6513      	str	r3, [r2, #80]	; 0x50
 800f34e:	e003      	b.n	800f358 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f354:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f360:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f368:	2300      	movs	r3, #0
 800f36a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f36e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f372:	460b      	mov	r3, r1
 800f374:	4313      	orrs	r3, r2
 800f376:	d039      	beq.n	800f3ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f37c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d81c      	bhi.n	800f3bc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f382:	a201      	add	r2, pc, #4	; (adr r2, 800f388 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f388:	0800f3c5 	.word	0x0800f3c5
 800f38c:	0800f399 	.word	0x0800f399
 800f390:	0800f3a7 	.word	0x0800f3a7
 800f394:	0800f3c5 	.word	0x0800f3c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f398:	4b67      	ldr	r3, [pc, #412]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f39c:	4a66      	ldr	r2, [pc, #408]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f39e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f3a4:	e00f      	b.n	800f3c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3aa:	3308      	adds	r3, #8
 800f3ac:	2102      	movs	r1, #2
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f001 ffd4 	bl	801135c <RCCEx_PLL2_Config>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f3ba:	e004      	b.n	800f3c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3c2:	e000      	b.n	800f3c6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f3c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d10a      	bne.n	800f3e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f3ce:	4b5a      	ldr	r3, [pc, #360]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3d2:	f023 0103 	bic.w	r1, r3, #3
 800f3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f3dc:	4a56      	ldr	r2, [pc, #344]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3de:	430b      	orrs	r3, r1
 800f3e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f3e2:	e003      	b.n	800f3ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f3f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f402:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f406:	460b      	mov	r3, r1
 800f408:	4313      	orrs	r3, r2
 800f40a:	f000 809f 	beq.w	800f54c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f40e:	4b4b      	ldr	r3, [pc, #300]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a4a      	ldr	r2, [pc, #296]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f41a:	f7f6 faf1 	bl	8005a00 <HAL_GetTick>
 800f41e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f422:	e00b      	b.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f424:	f7f6 faec 	bl	8005a00 <HAL_GetTick>
 800f428:	4602      	mov	r2, r0
 800f42a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	2b64      	cmp	r3, #100	; 0x64
 800f432:	d903      	bls.n	800f43c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f434:	2303      	movs	r3, #3
 800f436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f43a:	e005      	b.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f43c:	4b3f      	ldr	r3, [pc, #252]	; (800f53c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f444:	2b00      	cmp	r3, #0
 800f446:	d0ed      	beq.n	800f424 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d179      	bne.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f450:	4b39      	ldr	r3, [pc, #228]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f45c:	4053      	eors	r3, r2
 800f45e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f462:	2b00      	cmp	r3, #0
 800f464:	d015      	beq.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f466:	4b34      	ldr	r3, [pc, #208]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f46a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f46e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f472:	4b31      	ldr	r3, [pc, #196]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f476:	4a30      	ldr	r2, [pc, #192]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f47c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f47e:	4b2e      	ldr	r3, [pc, #184]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f482:	4a2d      	ldr	r2, [pc, #180]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f488:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f48a:	4a2b      	ldr	r2, [pc, #172]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f48c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f490:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f496:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f49a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f49e:	d118      	bne.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4a0:	f7f6 faae 	bl	8005a00 <HAL_GetTick>
 800f4a4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f4a8:	e00d      	b.n	800f4c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f4aa:	f7f6 faa9 	bl	8005a00 <HAL_GetTick>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f4b4:	1ad2      	subs	r2, r2, r3
 800f4b6:	f241 3388 	movw	r3, #5000	; 0x1388
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d903      	bls.n	800f4c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f4be:	2303      	movs	r3, #3
 800f4c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f4c4:	e005      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f4c6:	4b1c      	ldr	r3, [pc, #112]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4ca:	f003 0302 	and.w	r3, r3, #2
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d0eb      	beq.n	800f4aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f4d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d129      	bne.n	800f52e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f4e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4ea:	d10e      	bne.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f4ec:	4b12      	ldr	r3, [pc, #72]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f4ee:	691b      	ldr	r3, [r3, #16]
 800f4f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f4fc:	091a      	lsrs	r2, r3, #4
 800f4fe:	4b10      	ldr	r3, [pc, #64]	; (800f540 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f500:	4013      	ands	r3, r2
 800f502:	4a0d      	ldr	r2, [pc, #52]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f504:	430b      	orrs	r3, r1
 800f506:	6113      	str	r3, [r2, #16]
 800f508:	e005      	b.n	800f516 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f50a:	4b0b      	ldr	r3, [pc, #44]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f50c:	691b      	ldr	r3, [r3, #16]
 800f50e:	4a0a      	ldr	r2, [pc, #40]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f510:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f514:	6113      	str	r3, [r2, #16]
 800f516:	4b08      	ldr	r3, [pc, #32]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f518:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f51e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f526:	4a04      	ldr	r2, [pc, #16]	; (800f538 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f528:	430b      	orrs	r3, r1
 800f52a:	6713      	str	r3, [r2, #112]	; 0x70
 800f52c:	e00e      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f52e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f536:	e009      	b.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f538:	58024400 	.word	0x58024400
 800f53c:	58024800 	.word	0x58024800
 800f540:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f548:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f554:	f002 0301 	and.w	r3, r2, #1
 800f558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f55c:	2300      	movs	r3, #0
 800f55e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f562:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f566:	460b      	mov	r3, r1
 800f568:	4313      	orrs	r3, r2
 800f56a:	f000 8089 	beq.w	800f680 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f56e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f574:	2b28      	cmp	r3, #40	; 0x28
 800f576:	d86b      	bhi.n	800f650 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f578:	a201      	add	r2, pc, #4	; (adr r2, 800f580 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57e:	bf00      	nop
 800f580:	0800f659 	.word	0x0800f659
 800f584:	0800f651 	.word	0x0800f651
 800f588:	0800f651 	.word	0x0800f651
 800f58c:	0800f651 	.word	0x0800f651
 800f590:	0800f651 	.word	0x0800f651
 800f594:	0800f651 	.word	0x0800f651
 800f598:	0800f651 	.word	0x0800f651
 800f59c:	0800f651 	.word	0x0800f651
 800f5a0:	0800f625 	.word	0x0800f625
 800f5a4:	0800f651 	.word	0x0800f651
 800f5a8:	0800f651 	.word	0x0800f651
 800f5ac:	0800f651 	.word	0x0800f651
 800f5b0:	0800f651 	.word	0x0800f651
 800f5b4:	0800f651 	.word	0x0800f651
 800f5b8:	0800f651 	.word	0x0800f651
 800f5bc:	0800f651 	.word	0x0800f651
 800f5c0:	0800f63b 	.word	0x0800f63b
 800f5c4:	0800f651 	.word	0x0800f651
 800f5c8:	0800f651 	.word	0x0800f651
 800f5cc:	0800f651 	.word	0x0800f651
 800f5d0:	0800f651 	.word	0x0800f651
 800f5d4:	0800f651 	.word	0x0800f651
 800f5d8:	0800f651 	.word	0x0800f651
 800f5dc:	0800f651 	.word	0x0800f651
 800f5e0:	0800f659 	.word	0x0800f659
 800f5e4:	0800f651 	.word	0x0800f651
 800f5e8:	0800f651 	.word	0x0800f651
 800f5ec:	0800f651 	.word	0x0800f651
 800f5f0:	0800f651 	.word	0x0800f651
 800f5f4:	0800f651 	.word	0x0800f651
 800f5f8:	0800f651 	.word	0x0800f651
 800f5fc:	0800f651 	.word	0x0800f651
 800f600:	0800f659 	.word	0x0800f659
 800f604:	0800f651 	.word	0x0800f651
 800f608:	0800f651 	.word	0x0800f651
 800f60c:	0800f651 	.word	0x0800f651
 800f610:	0800f651 	.word	0x0800f651
 800f614:	0800f651 	.word	0x0800f651
 800f618:	0800f651 	.word	0x0800f651
 800f61c:	0800f651 	.word	0x0800f651
 800f620:	0800f659 	.word	0x0800f659
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f628:	3308      	adds	r3, #8
 800f62a:	2101      	movs	r1, #1
 800f62c:	4618      	mov	r0, r3
 800f62e:	f001 fe95 	bl	801135c <RCCEx_PLL2_Config>
 800f632:	4603      	mov	r3, r0
 800f634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f638:	e00f      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f63e:	3328      	adds	r3, #40	; 0x28
 800f640:	2101      	movs	r1, #1
 800f642:	4618      	mov	r0, r3
 800f644:	f001 ff3c 	bl	80114c0 <RCCEx_PLL3_Config>
 800f648:	4603      	mov	r3, r0
 800f64a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f64e:	e004      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f650:	2301      	movs	r3, #1
 800f652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f656:	e000      	b.n	800f65a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f65a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10a      	bne.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f662:	4bbf      	ldr	r3, [pc, #764]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f666:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f66e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f670:	4abb      	ldr	r2, [pc, #748]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f672:	430b      	orrs	r3, r1
 800f674:	6553      	str	r3, [r2, #84]	; 0x54
 800f676:	e003      	b.n	800f680 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f67c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f688:	f002 0302 	and.w	r3, r2, #2
 800f68c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f690:	2300      	movs	r3, #0
 800f692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f696:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f69a:	460b      	mov	r3, r1
 800f69c:	4313      	orrs	r3, r2
 800f69e:	d041      	beq.n	800f724 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6a6:	2b05      	cmp	r3, #5
 800f6a8:	d824      	bhi.n	800f6f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f6aa:	a201      	add	r2, pc, #4	; (adr r2, 800f6b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b0:	0800f6fd 	.word	0x0800f6fd
 800f6b4:	0800f6c9 	.word	0x0800f6c9
 800f6b8:	0800f6df 	.word	0x0800f6df
 800f6bc:	0800f6fd 	.word	0x0800f6fd
 800f6c0:	0800f6fd 	.word	0x0800f6fd
 800f6c4:	0800f6fd 	.word	0x0800f6fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	2101      	movs	r1, #1
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f001 fe43 	bl	801135c <RCCEx_PLL2_Config>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f6dc:	e00f      	b.n	800f6fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6e2:	3328      	adds	r3, #40	; 0x28
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f001 feea 	bl	80114c0 <RCCEx_PLL3_Config>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f6f2:	e004      	b.n	800f6fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f6fa:	e000      	b.n	800f6fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f6fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f702:	2b00      	cmp	r3, #0
 800f704:	d10a      	bne.n	800f71c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f706:	4b96      	ldr	r3, [pc, #600]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f70a:	f023 0107 	bic.w	r1, r3, #7
 800f70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f714:	4a92      	ldr	r2, [pc, #584]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f716:	430b      	orrs	r3, r1
 800f718:	6553      	str	r3, [r2, #84]	; 0x54
 800f71a:	e003      	b.n	800f724 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f71c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	f002 0304 	and.w	r3, r2, #4
 800f730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f734:	2300      	movs	r3, #0
 800f736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f73a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f73e:	460b      	mov	r3, r1
 800f740:	4313      	orrs	r3, r2
 800f742:	d044      	beq.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f74c:	2b05      	cmp	r3, #5
 800f74e:	d825      	bhi.n	800f79c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f750:	a201      	add	r2, pc, #4	; (adr r2, 800f758 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f756:	bf00      	nop
 800f758:	0800f7a5 	.word	0x0800f7a5
 800f75c:	0800f771 	.word	0x0800f771
 800f760:	0800f787 	.word	0x0800f787
 800f764:	0800f7a5 	.word	0x0800f7a5
 800f768:	0800f7a5 	.word	0x0800f7a5
 800f76c:	0800f7a5 	.word	0x0800f7a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f774:	3308      	adds	r3, #8
 800f776:	2101      	movs	r1, #1
 800f778:	4618      	mov	r0, r3
 800f77a:	f001 fdef 	bl	801135c <RCCEx_PLL2_Config>
 800f77e:	4603      	mov	r3, r0
 800f780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f784:	e00f      	b.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f78a:	3328      	adds	r3, #40	; 0x28
 800f78c:	2101      	movs	r1, #1
 800f78e:	4618      	mov	r0, r3
 800f790:	f001 fe96 	bl	80114c0 <RCCEx_PLL3_Config>
 800f794:	4603      	mov	r3, r0
 800f796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f79a:	e004      	b.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f79c:	2301      	movs	r3, #1
 800f79e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7a2:	e000      	b.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f7a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f7a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d10b      	bne.n	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f7ae:	4b6c      	ldr	r3, [pc, #432]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7b2:	f023 0107 	bic.w	r1, r3, #7
 800f7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f7be:	4a68      	ldr	r2, [pc, #416]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f7c0:	430b      	orrs	r3, r1
 800f7c2:	6593      	str	r3, [r2, #88]	; 0x58
 800f7c4:	e003      	b.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f7ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	f002 0320 	and.w	r3, r2, #32
 800f7da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f7de:	2300      	movs	r3, #0
 800f7e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f7e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	d055      	beq.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f7fa:	d033      	beq.n	800f864 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f7fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f800:	d82c      	bhi.n	800f85c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f806:	d02f      	beq.n	800f868 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f80c:	d826      	bhi.n	800f85c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f80e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f812:	d02b      	beq.n	800f86c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f814:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f818:	d820      	bhi.n	800f85c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f81a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f81e:	d012      	beq.n	800f846 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f824:	d81a      	bhi.n	800f85c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f826:	2b00      	cmp	r3, #0
 800f828:	d022      	beq.n	800f870 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f82a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f82e:	d115      	bne.n	800f85c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f834:	3308      	adds	r3, #8
 800f836:	2100      	movs	r1, #0
 800f838:	4618      	mov	r0, r3
 800f83a:	f001 fd8f 	bl	801135c <RCCEx_PLL2_Config>
 800f83e:	4603      	mov	r3, r0
 800f840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f844:	e015      	b.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f84a:	3328      	adds	r3, #40	; 0x28
 800f84c:	2102      	movs	r1, #2
 800f84e:	4618      	mov	r0, r3
 800f850:	f001 fe36 	bl	80114c0 <RCCEx_PLL3_Config>
 800f854:	4603      	mov	r3, r0
 800f856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f85a:	e00a      	b.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f85c:	2301      	movs	r3, #1
 800f85e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f862:	e006      	b.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f864:	bf00      	nop
 800f866:	e004      	b.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f868:	bf00      	nop
 800f86a:	e002      	b.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f86c:	bf00      	nop
 800f86e:	e000      	b.n	800f872 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f870:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f872:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10b      	bne.n	800f892 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f87a:	4b39      	ldr	r3, [pc, #228]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f87e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f88a:	4a35      	ldr	r2, [pc, #212]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f88c:	430b      	orrs	r3, r1
 800f88e:	6553      	str	r3, [r2, #84]	; 0x54
 800f890:	e003      	b.n	800f89a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f8a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f8b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	d058      	beq.n	800f96c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f8c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f8c6:	d033      	beq.n	800f930 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f8c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f8cc:	d82c      	bhi.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f8ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8d2:	d02f      	beq.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f8d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8d8:	d826      	bhi.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f8da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f8de:	d02b      	beq.n	800f938 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f8e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f8e4:	d820      	bhi.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f8e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8ea:	d012      	beq.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f8ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8f0:	d81a      	bhi.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d022      	beq.n	800f93c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f8f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8fa:	d115      	bne.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f900:	3308      	adds	r3, #8
 800f902:	2100      	movs	r1, #0
 800f904:	4618      	mov	r0, r3
 800f906:	f001 fd29 	bl	801135c <RCCEx_PLL2_Config>
 800f90a:	4603      	mov	r3, r0
 800f90c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f910:	e015      	b.n	800f93e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f916:	3328      	adds	r3, #40	; 0x28
 800f918:	2102      	movs	r1, #2
 800f91a:	4618      	mov	r0, r3
 800f91c:	f001 fdd0 	bl	80114c0 <RCCEx_PLL3_Config>
 800f920:	4603      	mov	r3, r0
 800f922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f926:	e00a      	b.n	800f93e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f92e:	e006      	b.n	800f93e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f930:	bf00      	nop
 800f932:	e004      	b.n	800f93e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f934:	bf00      	nop
 800f936:	e002      	b.n	800f93e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f938:	bf00      	nop
 800f93a:	e000      	b.n	800f93e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f93c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f93e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f942:	2b00      	cmp	r3, #0
 800f944:	d10e      	bne.n	800f964 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f946:	4b06      	ldr	r3, [pc, #24]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f94a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f956:	4a02      	ldr	r2, [pc, #8]	; (800f960 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f958:	430b      	orrs	r3, r1
 800f95a:	6593      	str	r3, [r2, #88]	; 0x58
 800f95c:	e006      	b.n	800f96c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f95e:	bf00      	nop
 800f960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f968:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f96c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f974:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f97c:	2300      	movs	r3, #0
 800f97e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f982:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f986:	460b      	mov	r3, r1
 800f988:	4313      	orrs	r3, r2
 800f98a:	d055      	beq.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f990:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f994:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f998:	d033      	beq.n	800fa02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f99a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f99e:	d82c      	bhi.n	800f9fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f9a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9a4:	d02f      	beq.n	800fa06 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f9a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9aa:	d826      	bhi.n	800f9fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f9ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f9b0:	d02b      	beq.n	800fa0a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f9b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f9b6:	d820      	bhi.n	800f9fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f9b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f9bc:	d012      	beq.n	800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f9be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f9c2:	d81a      	bhi.n	800f9fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d022      	beq.n	800fa0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f9c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9cc:	d115      	bne.n	800f9fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f001 fcc0 	bl	801135c <RCCEx_PLL2_Config>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f9e2:	e015      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9e8:	3328      	adds	r3, #40	; 0x28
 800f9ea:	2102      	movs	r1, #2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f001 fd67 	bl	80114c0 <RCCEx_PLL3_Config>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f9f8:	e00a      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa00:	e006      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fa02:	bf00      	nop
 800fa04:	e004      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fa06:	bf00      	nop
 800fa08:	e002      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fa0a:	bf00      	nop
 800fa0c:	e000      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800fa0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d10b      	bne.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fa18:	4ba1      	ldr	r3, [pc, #644]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa1c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800fa20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fa28:	4a9d      	ldr	r2, [pc, #628]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa2a:	430b      	orrs	r3, r1
 800fa2c:	6593      	str	r3, [r2, #88]	; 0x58
 800fa2e:	e003      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	f002 0308 	and.w	r3, r2, #8
 800fa44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fa48:	2300      	movs	r3, #0
 800fa4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fa4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800fa52:	460b      	mov	r3, r1
 800fa54:	4313      	orrs	r3, r2
 800fa56:	d01e      	beq.n	800fa96 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fa58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa64:	d10c      	bne.n	800fa80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fa66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa6a:	3328      	adds	r3, #40	; 0x28
 800fa6c:	2102      	movs	r1, #2
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f001 fd26 	bl	80114c0 <RCCEx_PLL3_Config>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d002      	beq.n	800fa80 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fa80:	4b87      	ldr	r3, [pc, #540]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fa88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa90:	4a83      	ldr	r2, [pc, #524]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa92:	430b      	orrs	r3, r1
 800fa94:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fa96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9e:	f002 0310 	and.w	r3, r2, #16
 800faa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800faa6:	2300      	movs	r3, #0
 800faa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800faac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fab0:	460b      	mov	r3, r1
 800fab2:	4313      	orrs	r3, r2
 800fab4:	d01e      	beq.n	800faf4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fac2:	d10c      	bne.n	800fade <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fac8:	3328      	adds	r3, #40	; 0x28
 800faca:	2102      	movs	r1, #2
 800facc:	4618      	mov	r0, r3
 800face:	f001 fcf7 	bl	80114c0 <RCCEx_PLL3_Config>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800fad8:	2301      	movs	r3, #1
 800fada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fade:	4b70      	ldr	r3, [pc, #448]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800faee:	4a6c      	ldr	r2, [pc, #432]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800faf0:	430b      	orrs	r3, r1
 800faf2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800faf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800fb00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb04:	2300      	movs	r3, #0
 800fb06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800fb0e:	460b      	mov	r3, r1
 800fb10:	4313      	orrs	r3, r2
 800fb12:	d03e      	beq.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800fb14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fb1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb20:	d022      	beq.n	800fb68 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800fb22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb26:	d81b      	bhi.n	800fb60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d003      	beq.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800fb2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb30:	d00b      	beq.n	800fb4a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800fb32:	e015      	b.n	800fb60 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb38:	3308      	adds	r3, #8
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f001 fc0d 	bl	801135c <RCCEx_PLL2_Config>
 800fb42:	4603      	mov	r3, r0
 800fb44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fb48:	e00f      	b.n	800fb6a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fb4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb4e:	3328      	adds	r3, #40	; 0x28
 800fb50:	2102      	movs	r1, #2
 800fb52:	4618      	mov	r0, r3
 800fb54:	f001 fcb4 	bl	80114c0 <RCCEx_PLL3_Config>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fb5e:	e004      	b.n	800fb6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb66:	e000      	b.n	800fb6a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800fb68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d10b      	bne.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fb72:	4b4b      	ldr	r3, [pc, #300]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fb7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fb82:	4a47      	ldr	r2, [pc, #284]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb84:	430b      	orrs	r3, r1
 800fb86:	6593      	str	r3, [r2, #88]	; 0x58
 800fb88:	e003      	b.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800fb9e:	67bb      	str	r3, [r7, #120]	; 0x78
 800fba0:	2300      	movs	r3, #0
 800fba2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fba4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fba8:	460b      	mov	r3, r1
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	d03b      	beq.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fbae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fbba:	d01f      	beq.n	800fbfc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fbbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fbc0:	d818      	bhi.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800fbc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbc6:	d003      	beq.n	800fbd0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800fbc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fbcc:	d007      	beq.n	800fbde <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800fbce:	e011      	b.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fbd0:	4b33      	ldr	r3, [pc, #204]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd4:	4a32      	ldr	r2, [pc, #200]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fbd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fbda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fbdc:	e00f      	b.n	800fbfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbe2:	3328      	adds	r3, #40	; 0x28
 800fbe4:	2101      	movs	r1, #1
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f001 fc6a 	bl	80114c0 <RCCEx_PLL3_Config>
 800fbec:	4603      	mov	r3, r0
 800fbee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800fbf2:	e004      	b.n	800fbfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fbfa:	e000      	b.n	800fbfe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fbfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d10b      	bne.n	800fc1e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fc06:	4b26      	ldr	r3, [pc, #152]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc0a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc16:	4a22      	ldr	r2, [pc, #136]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fc18:	430b      	orrs	r3, r1
 800fc1a:	6553      	str	r3, [r2, #84]	; 0x54
 800fc1c:	e003      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fc32:	673b      	str	r3, [r7, #112]	; 0x70
 800fc34:	2300      	movs	r3, #0
 800fc36:	677b      	str	r3, [r7, #116]	; 0x74
 800fc38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	d034      	beq.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d003      	beq.n	800fc54 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800fc4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc50:	d007      	beq.n	800fc62 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800fc52:	e011      	b.n	800fc78 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fc54:	4b12      	ldr	r3, [pc, #72]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc58:	4a11      	ldr	r2, [pc, #68]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fc5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fc60:	e00e      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fc62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc66:	3308      	adds	r3, #8
 800fc68:	2102      	movs	r1, #2
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f001 fb76 	bl	801135c <RCCEx_PLL2_Config>
 800fc70:	4603      	mov	r3, r0
 800fc72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fc76:	e003      	b.n	800fc80 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10d      	bne.n	800fca4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fc88:	4b05      	ldr	r3, [pc, #20]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fc8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc96:	4a02      	ldr	r2, [pc, #8]	; (800fca0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fc98:	430b      	orrs	r3, r1
 800fc9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fc9c:	e006      	b.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800fc9e:	bf00      	nop
 800fca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fca4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fca8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800fcb8:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcba:	2300      	movs	r3, #0
 800fcbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fcbe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	4313      	orrs	r3, r2
 800fcc6:	d00c      	beq.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fcc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fccc:	3328      	adds	r3, #40	; 0x28
 800fcce:	2102      	movs	r1, #2
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f001 fbf5 	bl	80114c0 <RCCEx_PLL3_Config>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d002      	beq.n	800fce2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800fcee:	663b      	str	r3, [r7, #96]	; 0x60
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	667b      	str	r3, [r7, #100]	; 0x64
 800fcf4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	d038      	beq.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800fcfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd0a:	d018      	beq.n	800fd3e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800fd0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd10:	d811      	bhi.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fd12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd16:	d014      	beq.n	800fd42 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fd18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd1c:	d80b      	bhi.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d011      	beq.n	800fd46 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd26:	d106      	bne.n	800fd36 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd28:	4bc3      	ldr	r3, [pc, #780]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd2c:	4ac2      	ldr	r2, [pc, #776]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fd32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fd34:	e008      	b.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fd36:	2301      	movs	r3, #1
 800fd38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fd3c:	e004      	b.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fd3e:	bf00      	nop
 800fd40:	e002      	b.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fd42:	bf00      	nop
 800fd44:	e000      	b.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fd46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d10b      	bne.n	800fd68 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fd50:	4bb9      	ldr	r3, [pc, #740]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fd58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd60:	4ab5      	ldr	r2, [pc, #724]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd62:	430b      	orrs	r3, r1
 800fd64:	6553      	str	r3, [r2, #84]	; 0x54
 800fd66:	e003      	b.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd78:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fd7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd7e:	2300      	movs	r3, #0
 800fd80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fd86:	460b      	mov	r3, r1
 800fd88:	4313      	orrs	r3, r2
 800fd8a:	d009      	beq.n	800fda0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fd8c:	4baa      	ldr	r3, [pc, #680]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd9a:	4aa7      	ldr	r2, [pc, #668]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd9c:	430b      	orrs	r3, r1
 800fd9e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800fdac:	653b      	str	r3, [r7, #80]	; 0x50
 800fdae:	2300      	movs	r3, #0
 800fdb0:	657b      	str	r3, [r7, #84]	; 0x54
 800fdb2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	4313      	orrs	r3, r2
 800fdba:	d00a      	beq.n	800fdd2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fdbc:	4b9e      	ldr	r3, [pc, #632]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fdc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fdcc:	4a9a      	ldr	r2, [pc, #616]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdce:	430b      	orrs	r3, r1
 800fdd0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdda:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fdde:	64bb      	str	r3, [r7, #72]	; 0x48
 800fde0:	2300      	movs	r3, #0
 800fde2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fde4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fde8:	460b      	mov	r3, r1
 800fdea:	4313      	orrs	r3, r2
 800fdec:	d009      	beq.n	800fe02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fdee:	4b92      	ldr	r3, [pc, #584]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdf2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fdf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdfc:	4a8e      	ldr	r2, [pc, #568]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdfe:	430b      	orrs	r3, r1
 800fe00:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fe02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fe0e:	643b      	str	r3, [r7, #64]	; 0x40
 800fe10:	2300      	movs	r3, #0
 800fe12:	647b      	str	r3, [r7, #68]	; 0x44
 800fe14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fe18:	460b      	mov	r3, r1
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	d00e      	beq.n	800fe3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fe1e:	4b86      	ldr	r3, [pc, #536]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe20:	691b      	ldr	r3, [r3, #16]
 800fe22:	4a85      	ldr	r2, [pc, #532]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fe28:	6113      	str	r3, [r2, #16]
 800fe2a:	4b83      	ldr	r3, [pc, #524]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe2c:	6919      	ldr	r1, [r3, #16]
 800fe2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fe36:	4a80      	ldr	r2, [pc, #512]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe38:	430b      	orrs	r3, r1
 800fe3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fe3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe44:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fe48:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fe52:	460b      	mov	r3, r1
 800fe54:	4313      	orrs	r3, r2
 800fe56:	d009      	beq.n	800fe6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fe58:	4b77      	ldr	r3, [pc, #476]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe5c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fe60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe66:	4a74      	ldr	r2, [pc, #464]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe68:	430b      	orrs	r3, r1
 800fe6a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fe6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe74:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fe78:	633b      	str	r3, [r7, #48]	; 0x30
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fe82:	460b      	mov	r3, r1
 800fe84:	4313      	orrs	r3, r2
 800fe86:	d00a      	beq.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fe88:	4b6b      	ldr	r3, [pc, #428]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe8c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fe90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe98:	4a67      	ldr	r2, [pc, #412]	; (8010038 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe9a:	430b      	orrs	r3, r1
 800fe9c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fe9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea6:	2100      	movs	r1, #0
 800fea8:	62b9      	str	r1, [r7, #40]	; 0x28
 800feaa:	f003 0301 	and.w	r3, r3, #1
 800feae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800feb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800feb4:	460b      	mov	r3, r1
 800feb6:	4313      	orrs	r3, r2
 800feb8:	d011      	beq.n	800fede <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800feba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800febe:	3308      	adds	r3, #8
 800fec0:	2100      	movs	r1, #0
 800fec2:	4618      	mov	r0, r3
 800fec4:	f001 fa4a 	bl	801135c <RCCEx_PLL2_Config>
 800fec8:	4603      	mov	r3, r0
 800feca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d003      	beq.n	800fede <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800feda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee6:	2100      	movs	r1, #0
 800fee8:	6239      	str	r1, [r7, #32]
 800feea:	f003 0302 	and.w	r3, r3, #2
 800feee:	627b      	str	r3, [r7, #36]	; 0x24
 800fef0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fef4:	460b      	mov	r3, r1
 800fef6:	4313      	orrs	r3, r2
 800fef8:	d011      	beq.n	800ff1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fefe:	3308      	adds	r3, #8
 800ff00:	2101      	movs	r1, #1
 800ff02:	4618      	mov	r0, r3
 800ff04:	f001 fa2a 	bl	801135c <RCCEx_PLL2_Config>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ff0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ff1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	2100      	movs	r1, #0
 800ff28:	61b9      	str	r1, [r7, #24]
 800ff2a:	f003 0304 	and.w	r3, r3, #4
 800ff2e:	61fb      	str	r3, [r7, #28]
 800ff30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ff34:	460b      	mov	r3, r1
 800ff36:	4313      	orrs	r3, r2
 800ff38:	d011      	beq.n	800ff5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ff3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff3e:	3308      	adds	r3, #8
 800ff40:	2102      	movs	r1, #2
 800ff42:	4618      	mov	r0, r3
 800ff44:	f001 fa0a 	bl	801135c <RCCEx_PLL2_Config>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ff4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d003      	beq.n	800ff5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ff5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff66:	2100      	movs	r1, #0
 800ff68:	6139      	str	r1, [r7, #16]
 800ff6a:	f003 0308 	and.w	r3, r3, #8
 800ff6e:	617b      	str	r3, [r7, #20]
 800ff70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ff74:	460b      	mov	r3, r1
 800ff76:	4313      	orrs	r3, r2
 800ff78:	d011      	beq.n	800ff9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ff7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff7e:	3328      	adds	r3, #40	; 0x28
 800ff80:	2100      	movs	r1, #0
 800ff82:	4618      	mov	r0, r3
 800ff84:	f001 fa9c 	bl	80114c0 <RCCEx_PLL3_Config>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ff8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d003      	beq.n	800ff9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ff9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	2100      	movs	r1, #0
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	f003 0310 	and.w	r3, r3, #16
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	d011      	beq.n	800ffde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ffba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffbe:	3328      	adds	r3, #40	; 0x28
 800ffc0:	2101      	movs	r1, #1
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f001 fa7c 	bl	80114c0 <RCCEx_PLL3_Config>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ffce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d003      	beq.n	800ffde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ffde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	6039      	str	r1, [r7, #0]
 800ffea:	f003 0320 	and.w	r3, r3, #32
 800ffee:	607b      	str	r3, [r7, #4]
 800fff0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fff4:	460b      	mov	r3, r1
 800fff6:	4313      	orrs	r3, r2
 800fff8:	d011      	beq.n	801001e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fffe:	3328      	adds	r3, #40	; 0x28
 8010000:	2102      	movs	r1, #2
 8010002:	4618      	mov	r0, r3
 8010004:	f001 fa5c 	bl	80114c0 <RCCEx_PLL3_Config>
 8010008:	4603      	mov	r3, r0
 801000a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801000e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010012:	2b00      	cmp	r3, #0
 8010014:	d003      	beq.n	801001e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801001a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 801001e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8010026:	2300      	movs	r3, #0
 8010028:	e000      	b.n	801002c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801002a:	2301      	movs	r3, #1
}
 801002c:	4618      	mov	r0, r3
 801002e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8010032:	46bd      	mov	sp, r7
 8010034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010038:	58024400 	.word	0x58024400

0801003c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b090      	sub	sp, #64	; 0x40
 8010040:	af00      	add	r7, sp, #0
 8010042:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010046:	e9d7 2300 	ldrd	r2, r3, [r7]
 801004a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801004e:	430b      	orrs	r3, r1
 8010050:	f040 8094 	bne.w	801017c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8010054:	4b9e      	ldr	r3, [pc, #632]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010058:	f003 0307 	and.w	r3, r3, #7
 801005c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801005e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010060:	2b04      	cmp	r3, #4
 8010062:	f200 8087 	bhi.w	8010174 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8010066:	a201      	add	r2, pc, #4	; (adr r2, 801006c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801006c:	08010081 	.word	0x08010081
 8010070:	080100a9 	.word	0x080100a9
 8010074:	080100d1 	.word	0x080100d1
 8010078:	0801016d 	.word	0x0801016d
 801007c:	080100f9 	.word	0x080100f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010080:	4b93      	ldr	r3, [pc, #588]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801008c:	d108      	bne.n	80100a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801008e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010092:	4618      	mov	r0, r3
 8010094:	f001 f810 	bl	80110b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801009a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801009c:	f000 bd45 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100a4:	f000 bd41 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80100a8:	4b89      	ldr	r3, [pc, #548]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80100b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80100b4:	d108      	bne.n	80100c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100b6:	f107 0318 	add.w	r3, r7, #24
 80100ba:	4618      	mov	r0, r3
 80100bc:	f000 fd54 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100c4:	f000 bd31 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100c8:	2300      	movs	r3, #0
 80100ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100cc:	f000 bd2d 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80100d0:	4b7f      	ldr	r3, [pc, #508]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100dc:	d108      	bne.n	80100f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100de:	f107 030c 	add.w	r3, r7, #12
 80100e2:	4618      	mov	r0, r3
 80100e4:	f000 fe94 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80100ec:	f000 bd1d 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80100f0:	2300      	movs	r3, #0
 80100f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100f4:	f000 bd19 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80100f8:	4b75      	ldr	r3, [pc, #468]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010100:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010102:	4b73      	ldr	r3, [pc, #460]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f003 0304 	and.w	r3, r3, #4
 801010a:	2b04      	cmp	r3, #4
 801010c:	d10c      	bne.n	8010128 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801010e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010110:	2b00      	cmp	r3, #0
 8010112:	d109      	bne.n	8010128 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010114:	4b6e      	ldr	r3, [pc, #440]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	08db      	lsrs	r3, r3, #3
 801011a:	f003 0303 	and.w	r3, r3, #3
 801011e:	4a6d      	ldr	r2, [pc, #436]	; (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010120:	fa22 f303 	lsr.w	r3, r2, r3
 8010124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010126:	e01f      	b.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010128:	4b69      	ldr	r3, [pc, #420]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010134:	d106      	bne.n	8010144 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8010136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801013c:	d102      	bne.n	8010144 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801013e:	4b66      	ldr	r3, [pc, #408]	; (80102d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010142:	e011      	b.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010144:	4b62      	ldr	r3, [pc, #392]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801014c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010150:	d106      	bne.n	8010160 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8010152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010158:	d102      	bne.n	8010160 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801015a:	4b60      	ldr	r3, [pc, #384]	; (80102dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801015c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801015e:	e003      	b.n	8010168 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010160:	2300      	movs	r3, #0
 8010162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010164:	f000 bce1 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010168:	f000 bcdf 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801016c:	4b5c      	ldr	r3, [pc, #368]	; (80102e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801016e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010170:	f000 bcdb 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010174:	2300      	movs	r3, #0
 8010176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010178:	f000 bcd7 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801017c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010180:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010184:	430b      	orrs	r3, r1
 8010186:	f040 80ad 	bne.w	80102e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801018a:	4b51      	ldr	r3, [pc, #324]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801018c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801018e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8010192:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801019a:	d056      	beq.n	801024a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801019c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101a2:	f200 8090 	bhi.w	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80101a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a8:	2bc0      	cmp	r3, #192	; 0xc0
 80101aa:	f000 8088 	beq.w	80102be <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80101ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b0:	2bc0      	cmp	r3, #192	; 0xc0
 80101b2:	f200 8088 	bhi.w	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80101b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b8:	2b80      	cmp	r3, #128	; 0x80
 80101ba:	d032      	beq.n	8010222 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80101bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101be:	2b80      	cmp	r3, #128	; 0x80
 80101c0:	f200 8081 	bhi.w	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80101c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d003      	beq.n	80101d2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80101ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101cc:	2b40      	cmp	r3, #64	; 0x40
 80101ce:	d014      	beq.n	80101fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80101d0:	e079      	b.n	80102c6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80101d2:	4b3f      	ldr	r3, [pc, #252]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80101de:	d108      	bne.n	80101f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80101e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80101e4:	4618      	mov	r0, r3
 80101e6:	f000 ff67 	bl	80110b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80101ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101ee:	f000 bc9c 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101f2:	2300      	movs	r3, #0
 80101f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101f6:	f000 bc98 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80101fa:	4b35      	ldr	r3, [pc, #212]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010206:	d108      	bne.n	801021a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010208:	f107 0318 	add.w	r3, r7, #24
 801020c:	4618      	mov	r0, r3
 801020e:	f000 fcab 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010216:	f000 bc88 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801021a:	2300      	movs	r3, #0
 801021c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801021e:	f000 bc84 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010222:	4b2b      	ldr	r3, [pc, #172]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801022a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801022e:	d108      	bne.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010230:	f107 030c 	add.w	r3, r7, #12
 8010234:	4618      	mov	r0, r3
 8010236:	f000 fdeb 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801023e:	f000 bc74 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010246:	f000 bc70 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801024a:	4b21      	ldr	r3, [pc, #132]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801024e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010252:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010254:	4b1e      	ldr	r3, [pc, #120]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f003 0304 	and.w	r3, r3, #4
 801025c:	2b04      	cmp	r3, #4
 801025e:	d10c      	bne.n	801027a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010262:	2b00      	cmp	r3, #0
 8010264:	d109      	bne.n	801027a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010266:	4b1a      	ldr	r3, [pc, #104]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	08db      	lsrs	r3, r3, #3
 801026c:	f003 0303 	and.w	r3, r3, #3
 8010270:	4a18      	ldr	r2, [pc, #96]	; (80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010272:	fa22 f303 	lsr.w	r3, r2, r3
 8010276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010278:	e01f      	b.n	80102ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801027a:	4b15      	ldr	r3, [pc, #84]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010286:	d106      	bne.n	8010296 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801028e:	d102      	bne.n	8010296 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010290:	4b11      	ldr	r3, [pc, #68]	; (80102d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010294:	e011      	b.n	80102ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010296:	4b0e      	ldr	r3, [pc, #56]	; (80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801029e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80102a2:	d106      	bne.n	80102b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80102a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80102aa:	d102      	bne.n	80102b2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80102ac:	4b0b      	ldr	r3, [pc, #44]	; (80102dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80102ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102b0:	e003      	b.n	80102ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80102b2:	2300      	movs	r3, #0
 80102b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80102b6:	f000 bc38 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80102ba:	f000 bc36 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80102be:	4b08      	ldr	r3, [pc, #32]	; (80102e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80102c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102c2:	f000 bc32 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80102c6:	2300      	movs	r3, #0
 80102c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102ca:	f000 bc2e 	b.w	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80102ce:	bf00      	nop
 80102d0:	58024400 	.word	0x58024400
 80102d4:	03d09000 	.word	0x03d09000
 80102d8:	003d0900 	.word	0x003d0900
 80102dc:	017d7840 	.word	0x017d7840
 80102e0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80102e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102e8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80102ec:	430b      	orrs	r3, r1
 80102ee:	f040 809c 	bne.w	801042a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80102f2:	4b9e      	ldr	r3, [pc, #632]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102f6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80102fa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80102fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010302:	d054      	beq.n	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801030a:	f200 808b 	bhi.w	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010314:	f000 8083 	beq.w	801041e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801031e:	f200 8081 	bhi.w	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010328:	d02f      	beq.n	801038a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010330:	d878      	bhi.n	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010334:	2b00      	cmp	r3, #0
 8010336:	d004      	beq.n	8010342 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801033e:	d012      	beq.n	8010366 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010340:	e070      	b.n	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010342:	4b8a      	ldr	r3, [pc, #552]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801034a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801034e:	d107      	bne.n	8010360 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010354:	4618      	mov	r0, r3
 8010356:	f000 feaf 	bl	80110b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801035a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801035e:	e3e4      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010360:	2300      	movs	r3, #0
 8010362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010364:	e3e1      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010366:	4b81      	ldr	r3, [pc, #516]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801036e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010372:	d107      	bne.n	8010384 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010374:	f107 0318 	add.w	r3, r7, #24
 8010378:	4618      	mov	r0, r3
 801037a:	f000 fbf5 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010382:	e3d2      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010384:	2300      	movs	r3, #0
 8010386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010388:	e3cf      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801038a:	4b78      	ldr	r3, [pc, #480]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010396:	d107      	bne.n	80103a8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010398:	f107 030c 	add.w	r3, r7, #12
 801039c:	4618      	mov	r0, r3
 801039e:	f000 fd37 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80103a6:	e3c0      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80103a8:	2300      	movs	r3, #0
 80103aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103ac:	e3bd      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80103ae:	4b6f      	ldr	r3, [pc, #444]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80103b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103b8:	4b6c      	ldr	r3, [pc, #432]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f003 0304 	and.w	r3, r3, #4
 80103c0:	2b04      	cmp	r3, #4
 80103c2:	d10c      	bne.n	80103de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80103c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d109      	bne.n	80103de <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80103ca:	4b68      	ldr	r3, [pc, #416]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	08db      	lsrs	r3, r3, #3
 80103d0:	f003 0303 	and.w	r3, r3, #3
 80103d4:	4a66      	ldr	r2, [pc, #408]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80103d6:	fa22 f303 	lsr.w	r3, r2, r3
 80103da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103dc:	e01e      	b.n	801041c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80103de:	4b63      	ldr	r3, [pc, #396]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103ea:	d106      	bne.n	80103fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80103ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80103f2:	d102      	bne.n	80103fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80103f4:	4b5f      	ldr	r3, [pc, #380]	; (8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80103f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103f8:	e010      	b.n	801041c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80103fa:	4b5c      	ldr	r3, [pc, #368]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010406:	d106      	bne.n	8010416 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801040e:	d102      	bne.n	8010416 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010410:	4b59      	ldr	r3, [pc, #356]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010414:	e002      	b.n	801041c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010416:	2300      	movs	r3, #0
 8010418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801041a:	e386      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801041c:	e385      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801041e:	4b57      	ldr	r3, [pc, #348]	; (801057c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010422:	e382      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010424:	2300      	movs	r3, #0
 8010426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010428:	e37f      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801042a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801042e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8010432:	430b      	orrs	r3, r1
 8010434:	f040 80a7 	bne.w	8010586 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010438:	4b4c      	ldr	r3, [pc, #304]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801043a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801043c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010440:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010448:	d055      	beq.n	80104f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010450:	f200 8096 	bhi.w	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010456:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801045a:	f000 8084 	beq.w	8010566 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801045e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010460:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010464:	f200 808c 	bhi.w	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801046e:	d030      	beq.n	80104d2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010476:	f200 8083 	bhi.w	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801047a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047c:	2b00      	cmp	r3, #0
 801047e:	d004      	beq.n	801048a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010486:	d012      	beq.n	80104ae <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010488:	e07a      	b.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801048a:	4b38      	ldr	r3, [pc, #224]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010496:	d107      	bne.n	80104a8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801049c:	4618      	mov	r0, r3
 801049e:	f000 fe0b 	bl	80110b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104a6:	e340      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104a8:	2300      	movs	r3, #0
 80104aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104ac:	e33d      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104ae:	4b2f      	ldr	r3, [pc, #188]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104ba:	d107      	bne.n	80104cc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104bc:	f107 0318 	add.w	r3, r7, #24
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 fb51 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104ca:	e32e      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104cc:	2300      	movs	r3, #0
 80104ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104d0:	e32b      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104d2:	4b26      	ldr	r3, [pc, #152]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104de:	d107      	bne.n	80104f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104e0:	f107 030c 	add.w	r3, r7, #12
 80104e4:	4618      	mov	r0, r3
 80104e6:	f000 fc93 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104ee:	e31c      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104f0:	2300      	movs	r3, #0
 80104f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104f4:	e319      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80104f6:	4b1d      	ldr	r3, [pc, #116]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80104f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80104fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010500:	4b1a      	ldr	r3, [pc, #104]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f003 0304 	and.w	r3, r3, #4
 8010508:	2b04      	cmp	r3, #4
 801050a:	d10c      	bne.n	8010526 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 801050c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050e:	2b00      	cmp	r3, #0
 8010510:	d109      	bne.n	8010526 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010512:	4b16      	ldr	r3, [pc, #88]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	08db      	lsrs	r3, r3, #3
 8010518:	f003 0303 	and.w	r3, r3, #3
 801051c:	4a14      	ldr	r2, [pc, #80]	; (8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801051e:	fa22 f303 	lsr.w	r3, r2, r3
 8010522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010524:	e01e      	b.n	8010564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010526:	4b11      	ldr	r3, [pc, #68]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801052e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010532:	d106      	bne.n	8010542 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801053a:	d102      	bne.n	8010542 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801053c:	4b0d      	ldr	r3, [pc, #52]	; (8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801053e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010540:	e010      	b.n	8010564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010542:	4b0a      	ldr	r3, [pc, #40]	; (801056c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801054a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801054e:	d106      	bne.n	801055e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010556:	d102      	bne.n	801055e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010558:	4b07      	ldr	r3, [pc, #28]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801055a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801055c:	e002      	b.n	8010564 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801055e:	2300      	movs	r3, #0
 8010560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010562:	e2e2      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010564:	e2e1      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010566:	4b05      	ldr	r3, [pc, #20]	; (801057c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801056a:	e2de      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801056c:	58024400 	.word	0x58024400
 8010570:	03d09000 	.word	0x03d09000
 8010574:	003d0900 	.word	0x003d0900
 8010578:	017d7840 	.word	0x017d7840
 801057c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010580:	2300      	movs	r3, #0
 8010582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010584:	e2d1      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010586:	e9d7 2300 	ldrd	r2, r3, [r7]
 801058a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801058e:	430b      	orrs	r3, r1
 8010590:	f040 809c 	bne.w	80106cc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010594:	4b93      	ldr	r3, [pc, #588]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010598:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801059c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801059e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105a4:	d054      	beq.n	8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80105a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105ac:	f200 808b 	bhi.w	80106c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80105b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80105b6:	f000 8083 	beq.w	80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80105ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80105c0:	f200 8081 	bhi.w	80106c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105ca:	d02f      	beq.n	801062c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80105cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105d2:	d878      	bhi.n	80106c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80105d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d004      	beq.n	80105e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105e0:	d012      	beq.n	8010608 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80105e2:	e070      	b.n	80106c6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105e4:	4b7f      	ldr	r3, [pc, #508]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105f0:	d107      	bne.n	8010602 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80105f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 fd5e 	bl	80110b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80105fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010600:	e293      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010602:	2300      	movs	r3, #0
 8010604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010606:	e290      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010608:	4b76      	ldr	r3, [pc, #472]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010614:	d107      	bne.n	8010626 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010616:	f107 0318 	add.w	r3, r7, #24
 801061a:	4618      	mov	r0, r3
 801061c:	f000 faa4 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010624:	e281      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010626:	2300      	movs	r3, #0
 8010628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801062a:	e27e      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801062c:	4b6d      	ldr	r3, [pc, #436]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010638:	d107      	bne.n	801064a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801063a:	f107 030c 	add.w	r3, r7, #12
 801063e:	4618      	mov	r0, r3
 8010640:	f000 fbe6 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010648:	e26f      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801064e:	e26c      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010650:	4b64      	ldr	r3, [pc, #400]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010654:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010658:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801065a:	4b62      	ldr	r3, [pc, #392]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f003 0304 	and.w	r3, r3, #4
 8010662:	2b04      	cmp	r3, #4
 8010664:	d10c      	bne.n	8010680 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010668:	2b00      	cmp	r3, #0
 801066a:	d109      	bne.n	8010680 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801066c:	4b5d      	ldr	r3, [pc, #372]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	08db      	lsrs	r3, r3, #3
 8010672:	f003 0303 	and.w	r3, r3, #3
 8010676:	4a5c      	ldr	r2, [pc, #368]	; (80107e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010678:	fa22 f303 	lsr.w	r3, r2, r3
 801067c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801067e:	e01e      	b.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010680:	4b58      	ldr	r3, [pc, #352]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801068c:	d106      	bne.n	801069c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801068e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010694:	d102      	bne.n	801069c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010696:	4b55      	ldr	r3, [pc, #340]	; (80107ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010698:	63fb      	str	r3, [r7, #60]	; 0x3c
 801069a:	e010      	b.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801069c:	4b51      	ldr	r3, [pc, #324]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106a8:	d106      	bne.n	80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80106aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106b0:	d102      	bne.n	80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80106b2:	4b4f      	ldr	r3, [pc, #316]	; (80107f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80106b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b6:	e002      	b.n	80106be <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80106b8:	2300      	movs	r3, #0
 80106ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80106bc:	e235      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80106be:	e234      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80106c0:	4b4c      	ldr	r3, [pc, #304]	; (80107f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80106c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106c4:	e231      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106ca:	e22e      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80106cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80106d0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80106d4:	430b      	orrs	r3, r1
 80106d6:	f040 808f 	bne.w	80107f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80106da:	4b42      	ldr	r3, [pc, #264]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80106dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106de:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80106e2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80106e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80106ea:	d06b      	beq.n	80107c4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80106ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80106f2:	d874      	bhi.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80106f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80106fa:	d056      	beq.n	80107aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80106fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010702:	d86c      	bhi.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010706:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801070a:	d03b      	beq.n	8010784 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801070c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010712:	d864      	bhi.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801071a:	d021      	beq.n	8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801071c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010722:	d85c      	bhi.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010726:	2b00      	cmp	r3, #0
 8010728:	d004      	beq.n	8010734 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801072a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010730:	d004      	beq.n	801073c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010732:	e054      	b.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010734:	f7fe fa0a 	bl	800eb4c <HAL_RCC_GetPCLK1Freq>
 8010738:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801073a:	e1f6      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801073c:	4b29      	ldr	r3, [pc, #164]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010748:	d107      	bne.n	801075a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801074a:	f107 0318 	add.w	r3, r7, #24
 801074e:	4618      	mov	r0, r3
 8010750:	f000 fa0a 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010758:	e1e7      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801075a:	2300      	movs	r3, #0
 801075c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801075e:	e1e4      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010760:	4b20      	ldr	r3, [pc, #128]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801076c:	d107      	bne.n	801077e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801076e:	f107 030c 	add.w	r3, r7, #12
 8010772:	4618      	mov	r0, r3
 8010774:	f000 fb4c 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801077c:	e1d5      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801077e:	2300      	movs	r3, #0
 8010780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010782:	e1d2      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010784:	4b17      	ldr	r3, [pc, #92]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f003 0304 	and.w	r3, r3, #4
 801078c:	2b04      	cmp	r3, #4
 801078e:	d109      	bne.n	80107a4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010790:	4b14      	ldr	r3, [pc, #80]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	08db      	lsrs	r3, r3, #3
 8010796:	f003 0303 	and.w	r3, r3, #3
 801079a:	4a13      	ldr	r2, [pc, #76]	; (80107e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801079c:	fa22 f303 	lsr.w	r3, r2, r3
 80107a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107a2:	e1c2      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107a4:	2300      	movs	r3, #0
 80107a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107a8:	e1bf      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80107aa:	4b0e      	ldr	r3, [pc, #56]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107b6:	d102      	bne.n	80107be <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80107b8:	4b0c      	ldr	r3, [pc, #48]	; (80107ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80107ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107bc:	e1b5      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107c2:	e1b2      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80107c4:	4b07      	ldr	r3, [pc, #28]	; (80107e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107d0:	d102      	bne.n	80107d8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80107d2:	4b07      	ldr	r3, [pc, #28]	; (80107f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80107d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107d6:	e1a8      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107d8:	2300      	movs	r3, #0
 80107da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107dc:	e1a5      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107e2:	e1a2      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80107e4:	58024400 	.word	0x58024400
 80107e8:	03d09000 	.word	0x03d09000
 80107ec:	003d0900 	.word	0x003d0900
 80107f0:	017d7840 	.word	0x017d7840
 80107f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80107f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107fc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010800:	430b      	orrs	r3, r1
 8010802:	d173      	bne.n	80108ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010804:	4b9c      	ldr	r3, [pc, #624]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801080c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801080e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010814:	d02f      	beq.n	8010876 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801081c:	d863      	bhi.n	80108e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010820:	2b00      	cmp	r3, #0
 8010822:	d004      	beq.n	801082e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801082a:	d012      	beq.n	8010852 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801082c:	e05b      	b.n	80108e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801082e:	4b92      	ldr	r3, [pc, #584]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801083a:	d107      	bne.n	801084c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801083c:	f107 0318 	add.w	r3, r7, #24
 8010840:	4618      	mov	r0, r3
 8010842:	f000 f991 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010846:	69bb      	ldr	r3, [r7, #24]
 8010848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801084a:	e16e      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801084c:	2300      	movs	r3, #0
 801084e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010850:	e16b      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010852:	4b89      	ldr	r3, [pc, #548]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801085a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801085e:	d107      	bne.n	8010870 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010860:	f107 030c 	add.w	r3, r7, #12
 8010864:	4618      	mov	r0, r3
 8010866:	f000 fad3 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801086e:	e15c      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010870:	2300      	movs	r3, #0
 8010872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010874:	e159      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010876:	4b80      	ldr	r3, [pc, #512]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801087a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801087e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010880:	4b7d      	ldr	r3, [pc, #500]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f003 0304 	and.w	r3, r3, #4
 8010888:	2b04      	cmp	r3, #4
 801088a:	d10c      	bne.n	80108a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088e:	2b00      	cmp	r3, #0
 8010890:	d109      	bne.n	80108a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010892:	4b79      	ldr	r3, [pc, #484]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	08db      	lsrs	r3, r3, #3
 8010898:	f003 0303 	and.w	r3, r3, #3
 801089c:	4a77      	ldr	r2, [pc, #476]	; (8010a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801089e:	fa22 f303 	lsr.w	r3, r2, r3
 80108a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108a4:	e01e      	b.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80108a6:	4b74      	ldr	r3, [pc, #464]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108b2:	d106      	bne.n	80108c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80108b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80108ba:	d102      	bne.n	80108c2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80108bc:	4b70      	ldr	r3, [pc, #448]	; (8010a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80108be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108c0:	e010      	b.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80108c2:	4b6d      	ldr	r3, [pc, #436]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80108ce:	d106      	bne.n	80108de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80108d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108d6:	d102      	bne.n	80108de <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80108d8:	4b6a      	ldr	r3, [pc, #424]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80108da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108dc:	e002      	b.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80108de:	2300      	movs	r3, #0
 80108e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80108e2:	e122      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80108e4:	e121      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80108e6:	2300      	movs	r3, #0
 80108e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ea:	e11e      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80108ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108f0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80108f4:	430b      	orrs	r3, r1
 80108f6:	d133      	bne.n	8010960 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80108f8:	4b5f      	ldr	r3, [pc, #380]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010900:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010904:	2b00      	cmp	r3, #0
 8010906:	d004      	beq.n	8010912 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801090e:	d012      	beq.n	8010936 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010910:	e023      	b.n	801095a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010912:	4b59      	ldr	r3, [pc, #356]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801091a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801091e:	d107      	bne.n	8010930 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010924:	4618      	mov	r0, r3
 8010926:	f000 fbc7 	bl	80110b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801092a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801092e:	e0fc      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010930:	2300      	movs	r3, #0
 8010932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010934:	e0f9      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010936:	4b50      	ldr	r3, [pc, #320]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801093e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010942:	d107      	bne.n	8010954 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010944:	f107 0318 	add.w	r3, r7, #24
 8010948:	4618      	mov	r0, r3
 801094a:	f000 f90d 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801094e:	6a3b      	ldr	r3, [r7, #32]
 8010950:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010952:	e0ea      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010954:	2300      	movs	r3, #0
 8010956:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010958:	e0e7      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801095a:	2300      	movs	r3, #0
 801095c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801095e:	e0e4      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010964:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8010968:	430b      	orrs	r3, r1
 801096a:	f040 808d 	bne.w	8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801096e:	4b42      	ldr	r3, [pc, #264]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010972:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010976:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801097e:	d06b      	beq.n	8010a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010986:	d874      	bhi.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801098e:	d056      	beq.n	8010a3e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010996:	d86c      	bhi.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801099e:	d03b      	beq.n	8010a18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80109a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80109a6:	d864      	bhi.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80109a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109ae:	d021      	beq.n	80109f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80109b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109b6:	d85c      	bhi.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80109b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d004      	beq.n	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80109be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80109c4:	d004      	beq.n	80109d0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80109c6:	e054      	b.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80109c8:	f000 f8b8 	bl	8010b3c <HAL_RCCEx_GetD3PCLK1Freq>
 80109cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80109ce:	e0ac      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109d0:	4b29      	ldr	r3, [pc, #164]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109dc:	d107      	bne.n	80109ee <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109de:	f107 0318 	add.w	r3, r7, #24
 80109e2:	4618      	mov	r0, r3
 80109e4:	f000 f8c0 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109ec:	e09d      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109ee:	2300      	movs	r3, #0
 80109f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109f2:	e09a      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80109f4:	4b20      	ldr	r3, [pc, #128]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80109fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a00:	d107      	bne.n	8010a12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a02:	f107 030c 	add.w	r3, r7, #12
 8010a06:	4618      	mov	r0, r3
 8010a08:	f000 fa02 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a10:	e08b      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a12:	2300      	movs	r3, #0
 8010a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a16:	e088      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010a18:	4b17      	ldr	r3, [pc, #92]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f003 0304 	and.w	r3, r3, #4
 8010a20:	2b04      	cmp	r3, #4
 8010a22:	d109      	bne.n	8010a38 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010a24:	4b14      	ldr	r3, [pc, #80]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	08db      	lsrs	r3, r3, #3
 8010a2a:	f003 0303 	and.w	r3, r3, #3
 8010a2e:	4a13      	ldr	r2, [pc, #76]	; (8010a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010a30:	fa22 f303 	lsr.w	r3, r2, r3
 8010a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a36:	e078      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a3c:	e075      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010a3e:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a4a:	d102      	bne.n	8010a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010a4c:	4b0c      	ldr	r3, [pc, #48]	; (8010a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a50:	e06b      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a52:	2300      	movs	r3, #0
 8010a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a56:	e068      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010a58:	4b07      	ldr	r3, [pc, #28]	; (8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a64:	d102      	bne.n	8010a6c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010a66:	4b07      	ldr	r3, [pc, #28]	; (8010a84 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a6a:	e05e      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a70:	e05b      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010a72:	2300      	movs	r3, #0
 8010a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a76:	e058      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010a78:	58024400 	.word	0x58024400
 8010a7c:	03d09000 	.word	0x03d09000
 8010a80:	003d0900 	.word	0x003d0900
 8010a84:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a8c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010a90:	430b      	orrs	r3, r1
 8010a92:	d148      	bne.n	8010b26 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010a94:	4b27      	ldr	r3, [pc, #156]	; (8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010a9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010aa4:	d02a      	beq.n	8010afc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010aac:	d838      	bhi.n	8010b20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d004      	beq.n	8010abe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010aba:	d00d      	beq.n	8010ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010abc:	e030      	b.n	8010b20 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010abe:	4b1d      	ldr	r3, [pc, #116]	; (8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010aca:	d102      	bne.n	8010ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010acc:	4b1a      	ldr	r3, [pc, #104]	; (8010b38 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ad0:	e02b      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ad6:	e028      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010ad8:	4b16      	ldr	r3, [pc, #88]	; (8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010ae4:	d107      	bne.n	8010af6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 fae4 	bl	80110b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010af4:	e019      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010af6:	2300      	movs	r3, #0
 8010af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010afa:	e016      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010afc:	4b0d      	ldr	r3, [pc, #52]	; (8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b08:	d107      	bne.n	8010b1a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b0a:	f107 0318 	add.w	r3, r7, #24
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f000 f82a 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010b18:	e007      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b1e:	e004      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010b20:	2300      	movs	r3, #0
 8010b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b24:	e001      	b.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010b26:	2300      	movs	r3, #0
 8010b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3740      	adds	r7, #64	; 0x40
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}
 8010b34:	58024400 	.word	0x58024400
 8010b38:	017d7840 	.word	0x017d7840

08010b3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010b40:	f7fd ffd4 	bl	800eaec <HAL_RCC_GetHCLKFreq>
 8010b44:	4602      	mov	r2, r0
 8010b46:	4b06      	ldr	r3, [pc, #24]	; (8010b60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010b48:	6a1b      	ldr	r3, [r3, #32]
 8010b4a:	091b      	lsrs	r3, r3, #4
 8010b4c:	f003 0307 	and.w	r3, r3, #7
 8010b50:	4904      	ldr	r1, [pc, #16]	; (8010b64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010b52:	5ccb      	ldrb	r3, [r1, r3]
 8010b54:	f003 031f 	and.w	r3, r3, #31
 8010b58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	58024400 	.word	0x58024400
 8010b64:	0801aec4 	.word	0x0801aec4

08010b68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b089      	sub	sp, #36	; 0x24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b70:	4ba1      	ldr	r3, [pc, #644]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b74:	f003 0303 	and.w	r3, r3, #3
 8010b78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010b7a:	4b9f      	ldr	r3, [pc, #636]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b7e:	0b1b      	lsrs	r3, r3, #12
 8010b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010b86:	4b9c      	ldr	r3, [pc, #624]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b8a:	091b      	lsrs	r3, r3, #4
 8010b8c:	f003 0301 	and.w	r3, r3, #1
 8010b90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010b92:	4b99      	ldr	r3, [pc, #612]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b96:	08db      	lsrs	r3, r3, #3
 8010b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b9c:	693a      	ldr	r2, [r7, #16]
 8010b9e:	fb02 f303 	mul.w	r3, r2, r3
 8010ba2:	ee07 3a90 	vmov	s15, r3
 8010ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010baa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f000 8111 	beq.w	8010dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	2b02      	cmp	r3, #2
 8010bba:	f000 8083 	beq.w	8010cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010bbe:	69bb      	ldr	r3, [r7, #24]
 8010bc0:	2b02      	cmp	r3, #2
 8010bc2:	f200 80a1 	bhi.w	8010d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d003      	beq.n	8010bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d056      	beq.n	8010c80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010bd2:	e099      	b.n	8010d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bd4:	4b88      	ldr	r3, [pc, #544]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f003 0320 	and.w	r3, r3, #32
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d02d      	beq.n	8010c3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010be0:	4b85      	ldr	r3, [pc, #532]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	08db      	lsrs	r3, r3, #3
 8010be6:	f003 0303 	and.w	r3, r3, #3
 8010bea:	4a84      	ldr	r2, [pc, #528]	; (8010dfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010bec:	fa22 f303 	lsr.w	r3, r2, r3
 8010bf0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	ee07 3a90 	vmov	s15, r3
 8010bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	ee07 3a90 	vmov	s15, r3
 8010c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c0a:	4b7b      	ldr	r3, [pc, #492]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c12:	ee07 3a90 	vmov	s15, r3
 8010c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010c3a:	e087      	b.n	8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	ee07 3a90 	vmov	s15, r3
 8010c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010e04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c4e:	4b6a      	ldr	r3, [pc, #424]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c56:	ee07 3a90 	vmov	s15, r3
 8010c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c7e:	e065      	b.n	8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	ee07 3a90 	vmov	s15, r3
 8010c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c92:	4b59      	ldr	r3, [pc, #356]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c9a:	ee07 3a90 	vmov	s15, r3
 8010c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ca6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010cc2:	e043      	b.n	8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	ee07 3a90 	vmov	s15, r3
 8010cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cd6:	4b48      	ldr	r3, [pc, #288]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cde:	ee07 3a90 	vmov	s15, r3
 8010ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d06:	e021      	b.n	8010d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	ee07 3a90 	vmov	s15, r3
 8010d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d1a:	4b37      	ldr	r3, [pc, #220]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d22:	ee07 3a90 	vmov	s15, r3
 8010d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010d4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010d4c:	4b2a      	ldr	r3, [pc, #168]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d50:	0a5b      	lsrs	r3, r3, #9
 8010d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d56:	ee07 3a90 	vmov	s15, r3
 8010d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d72:	ee17 2a90 	vmov	r2, s15
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010d7a:	4b1f      	ldr	r3, [pc, #124]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d7e:	0c1b      	lsrs	r3, r3, #16
 8010d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d84:	ee07 3a90 	vmov	s15, r3
 8010d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010da0:	ee17 2a90 	vmov	r2, s15
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010da8:	4b13      	ldr	r3, [pc, #76]	; (8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dac:	0e1b      	lsrs	r3, r3, #24
 8010dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010db2:	ee07 3a90 	vmov	s15, r3
 8010db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010dce:	ee17 2a90 	vmov	r2, s15
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010dd6:	e008      	b.n	8010dea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2200      	movs	r2, #0
 8010de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	609a      	str	r2, [r3, #8]
}
 8010dea:	bf00      	nop
 8010dec:	3724      	adds	r7, #36	; 0x24
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
 8010df6:	bf00      	nop
 8010df8:	58024400 	.word	0x58024400
 8010dfc:	03d09000 	.word	0x03d09000
 8010e00:	46000000 	.word	0x46000000
 8010e04:	4c742400 	.word	0x4c742400
 8010e08:	4a742400 	.word	0x4a742400
 8010e0c:	4bbebc20 	.word	0x4bbebc20

08010e10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010e10:	b480      	push	{r7}
 8010e12:	b089      	sub	sp, #36	; 0x24
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010e18:	4ba1      	ldr	r3, [pc, #644]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e1c:	f003 0303 	and.w	r3, r3, #3
 8010e20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010e22:	4b9f      	ldr	r3, [pc, #636]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e26:	0d1b      	lsrs	r3, r3, #20
 8010e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010e2e:	4b9c      	ldr	r3, [pc, #624]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e32:	0a1b      	lsrs	r3, r3, #8
 8010e34:	f003 0301 	and.w	r3, r3, #1
 8010e38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010e3a:	4b99      	ldr	r3, [pc, #612]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e3e:	08db      	lsrs	r3, r3, #3
 8010e40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e44:	693a      	ldr	r2, [r7, #16]
 8010e46:	fb02 f303 	mul.w	r3, r2, r3
 8010e4a:	ee07 3a90 	vmov	s15, r3
 8010e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	f000 8111 	beq.w	8011080 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	2b02      	cmp	r3, #2
 8010e62:	f000 8083 	beq.w	8010f6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010e66:	69bb      	ldr	r3, [r7, #24]
 8010e68:	2b02      	cmp	r3, #2
 8010e6a:	f200 80a1 	bhi.w	8010fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d003      	beq.n	8010e7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010e74:	69bb      	ldr	r3, [r7, #24]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d056      	beq.n	8010f28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010e7a:	e099      	b.n	8010fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e7c:	4b88      	ldr	r3, [pc, #544]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f003 0320 	and.w	r3, r3, #32
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d02d      	beq.n	8010ee4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e88:	4b85      	ldr	r3, [pc, #532]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	08db      	lsrs	r3, r3, #3
 8010e8e:	f003 0303 	and.w	r3, r3, #3
 8010e92:	4a84      	ldr	r2, [pc, #528]	; (80110a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010e94:	fa22 f303 	lsr.w	r3, r2, r3
 8010e98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	ee07 3a90 	vmov	s15, r3
 8010ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	ee07 3a90 	vmov	s15, r3
 8010eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eb2:	4b7b      	ldr	r3, [pc, #492]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eba:	ee07 3a90 	vmov	s15, r3
 8010ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ec6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80110a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ede:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010ee2:	e087      	b.n	8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	ee07 3a90 	vmov	s15, r3
 8010eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010eee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80110ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ef6:	4b6a      	ldr	r3, [pc, #424]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010efe:	ee07 3a90 	vmov	s15, r3
 8010f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80110a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f26:	e065      	b.n	8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	ee07 3a90 	vmov	s15, r3
 8010f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80110b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f3a:	4b59      	ldr	r3, [pc, #356]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f42:	ee07 3a90 	vmov	s15, r3
 8010f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80110a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f6a:	e043      	b.n	8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010f6c:	697b      	ldr	r3, [r7, #20]
 8010f6e:	ee07 3a90 	vmov	s15, r3
 8010f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80110b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f7e:	4b48      	ldr	r3, [pc, #288]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f86:	ee07 3a90 	vmov	s15, r3
 8010f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f92:	eddf 5a45 	vldr	s11, [pc, #276]	; 80110a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010fae:	e021      	b.n	8010ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	ee07 3a90 	vmov	s15, r3
 8010fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80110b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fc2:	4b37      	ldr	r3, [pc, #220]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fca:	ee07 3a90 	vmov	s15, r3
 8010fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010fd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80110a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ff2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010ff4:	4b2a      	ldr	r3, [pc, #168]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ff8:	0a5b      	lsrs	r3, r3, #9
 8010ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ffe:	ee07 3a90 	vmov	s15, r3
 8011002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801100a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801100e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801101a:	ee17 2a90 	vmov	r2, s15
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8011022:	4b1f      	ldr	r3, [pc, #124]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011026:	0c1b      	lsrs	r3, r3, #16
 8011028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801102c:	ee07 3a90 	vmov	s15, r3
 8011030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011038:	ee37 7a87 	vadd.f32	s14, s15, s14
 801103c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011048:	ee17 2a90 	vmov	r2, s15
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011050:	4b13      	ldr	r3, [pc, #76]	; (80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011054:	0e1b      	lsrs	r3, r3, #24
 8011056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801105a:	ee07 3a90 	vmov	s15, r3
 801105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011066:	ee37 7a87 	vadd.f32	s14, s15, s14
 801106a:	edd7 6a07 	vldr	s13, [r7, #28]
 801106e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011076:	ee17 2a90 	vmov	r2, s15
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801107e:	e008      	b.n	8011092 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2200      	movs	r2, #0
 8011084:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2200      	movs	r2, #0
 801108a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	609a      	str	r2, [r3, #8]
}
 8011092:	bf00      	nop
 8011094:	3724      	adds	r7, #36	; 0x24
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	58024400 	.word	0x58024400
 80110a4:	03d09000 	.word	0x03d09000
 80110a8:	46000000 	.word	0x46000000
 80110ac:	4c742400 	.word	0x4c742400
 80110b0:	4a742400 	.word	0x4a742400
 80110b4:	4bbebc20 	.word	0x4bbebc20

080110b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b089      	sub	sp, #36	; 0x24
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80110c0:	4ba0      	ldr	r3, [pc, #640]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c4:	f003 0303 	and.w	r3, r3, #3
 80110c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80110ca:	4b9e      	ldr	r3, [pc, #632]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ce:	091b      	lsrs	r3, r3, #4
 80110d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80110d6:	4b9b      	ldr	r3, [pc, #620]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110da:	f003 0301 	and.w	r3, r3, #1
 80110de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80110e0:	4b98      	ldr	r3, [pc, #608]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e4:	08db      	lsrs	r3, r3, #3
 80110e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110ea:	693a      	ldr	r2, [r7, #16]
 80110ec:	fb02 f303 	mul.w	r3, r2, r3
 80110f0:	ee07 3a90 	vmov	s15, r3
 80110f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	f000 8111 	beq.w	8011326 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	2b02      	cmp	r3, #2
 8011108:	f000 8083 	beq.w	8011212 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	2b02      	cmp	r3, #2
 8011110:	f200 80a1 	bhi.w	8011256 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d003      	beq.n	8011122 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801111a:	69bb      	ldr	r3, [r7, #24]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d056      	beq.n	80111ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011120:	e099      	b.n	8011256 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011122:	4b88      	ldr	r3, [pc, #544]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f003 0320 	and.w	r3, r3, #32
 801112a:	2b00      	cmp	r3, #0
 801112c:	d02d      	beq.n	801118a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801112e:	4b85      	ldr	r3, [pc, #532]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	08db      	lsrs	r3, r3, #3
 8011134:	f003 0303 	and.w	r3, r3, #3
 8011138:	4a83      	ldr	r2, [pc, #524]	; (8011348 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801113a:	fa22 f303 	lsr.w	r3, r2, r3
 801113e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	ee07 3a90 	vmov	s15, r3
 8011146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	ee07 3a90 	vmov	s15, r3
 8011150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011158:	4b7a      	ldr	r3, [pc, #488]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801115c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011160:	ee07 3a90 	vmov	s15, r3
 8011164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011168:	ed97 6a03 	vldr	s12, [r7, #12]
 801116c:	eddf 5a77 	vldr	s11, [pc, #476]	; 801134c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801117c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011184:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011188:	e087      	b.n	801129a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	ee07 3a90 	vmov	s15, r3
 8011190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011194:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011350 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801119c:	4b69      	ldr	r3, [pc, #420]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111a4:	ee07 3a90 	vmov	s15, r3
 80111a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80111b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 801134c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80111b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111cc:	e065      	b.n	801129a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	ee07 3a90 	vmov	s15, r3
 80111d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011354 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80111dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111e0:	4b58      	ldr	r3, [pc, #352]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111e8:	ee07 3a90 	vmov	s15, r3
 80111ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80111f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 801134c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80111f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011208:	ee67 7a27 	vmul.f32	s15, s14, s15
 801120c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011210:	e043      	b.n	801129a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	ee07 3a90 	vmov	s15, r3
 8011218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801121c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011358 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011224:	4b47      	ldr	r3, [pc, #284]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801122c:	ee07 3a90 	vmov	s15, r3
 8011230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011234:	ed97 6a03 	vldr	s12, [r7, #12]
 8011238:	eddf 5a44 	vldr	s11, [pc, #272]	; 801134c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801123c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011254:	e021      	b.n	801129a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	ee07 3a90 	vmov	s15, r3
 801125c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011260:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011350 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011268:	4b36      	ldr	r3, [pc, #216]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801126c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011270:	ee07 3a90 	vmov	s15, r3
 8011274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011278:	ed97 6a03 	vldr	s12, [r7, #12]
 801127c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801134c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801128c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011298:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801129a:	4b2a      	ldr	r3, [pc, #168]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801129e:	0a5b      	lsrs	r3, r3, #9
 80112a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112a4:	ee07 3a90 	vmov	s15, r3
 80112a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80112b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112c0:	ee17 2a90 	vmov	r2, s15
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80112c8:	4b1e      	ldr	r3, [pc, #120]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80112ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112cc:	0c1b      	lsrs	r3, r3, #16
 80112ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112d2:	ee07 3a90 	vmov	s15, r3
 80112d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80112e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112ee:	ee17 2a90 	vmov	r2, s15
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80112f6:	4b13      	ldr	r3, [pc, #76]	; (8011344 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80112f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fa:	0e1b      	lsrs	r3, r3, #24
 80112fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011300:	ee07 3a90 	vmov	s15, r3
 8011304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801130c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011310:	edd7 6a07 	vldr	s13, [r7, #28]
 8011314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801131c:	ee17 2a90 	vmov	r2, s15
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011324:	e008      	b.n	8011338 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2200      	movs	r2, #0
 8011330:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	609a      	str	r2, [r3, #8]
}
 8011338:	bf00      	nop
 801133a:	3724      	adds	r7, #36	; 0x24
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr
 8011344:	58024400 	.word	0x58024400
 8011348:	03d09000 	.word	0x03d09000
 801134c:	46000000 	.word	0x46000000
 8011350:	4c742400 	.word	0x4c742400
 8011354:	4a742400 	.word	0x4a742400
 8011358:	4bbebc20 	.word	0x4bbebc20

0801135c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011366:	2300      	movs	r3, #0
 8011368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801136a:	4b53      	ldr	r3, [pc, #332]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 801136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801136e:	f003 0303 	and.w	r3, r3, #3
 8011372:	2b03      	cmp	r3, #3
 8011374:	d101      	bne.n	801137a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011376:	2301      	movs	r3, #1
 8011378:	e099      	b.n	80114ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801137a:	4b4f      	ldr	r3, [pc, #316]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	4a4e      	ldr	r2, [pc, #312]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011380:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011386:	f7f4 fb3b 	bl	8005a00 <HAL_GetTick>
 801138a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801138c:	e008      	b.n	80113a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801138e:	f7f4 fb37 	bl	8005a00 <HAL_GetTick>
 8011392:	4602      	mov	r2, r0
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	2b02      	cmp	r3, #2
 801139a:	d901      	bls.n	80113a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801139c:	2303      	movs	r3, #3
 801139e:	e086      	b.n	80114ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80113a0:	4b45      	ldr	r3, [pc, #276]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d1f0      	bne.n	801138e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80113ac:	4b42      	ldr	r3, [pc, #264]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 80113ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	031b      	lsls	r3, r3, #12
 80113ba:	493f      	ldr	r1, [pc, #252]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 80113bc:	4313      	orrs	r3, r2
 80113be:	628b      	str	r3, [r1, #40]	; 0x28
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	3b01      	subs	r3, #1
 80113c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	3b01      	subs	r3, #1
 80113d0:	025b      	lsls	r3, r3, #9
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	431a      	orrs	r2, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	3b01      	subs	r3, #1
 80113dc:	041b      	lsls	r3, r3, #16
 80113de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80113e2:	431a      	orrs	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	691b      	ldr	r3, [r3, #16]
 80113e8:	3b01      	subs	r3, #1
 80113ea:	061b      	lsls	r3, r3, #24
 80113ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80113f0:	4931      	ldr	r1, [pc, #196]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 80113f2:	4313      	orrs	r3, r2
 80113f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80113f6:	4b30      	ldr	r3, [pc, #192]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 80113f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	695b      	ldr	r3, [r3, #20]
 8011402:	492d      	ldr	r1, [pc, #180]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011404:	4313      	orrs	r3, r2
 8011406:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011408:	4b2b      	ldr	r3, [pc, #172]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 801140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801140c:	f023 0220 	bic.w	r2, r3, #32
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	699b      	ldr	r3, [r3, #24]
 8011414:	4928      	ldr	r1, [pc, #160]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011416:	4313      	orrs	r3, r2
 8011418:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801141a:	4b27      	ldr	r3, [pc, #156]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 801141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801141e:	4a26      	ldr	r2, [pc, #152]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011420:	f023 0310 	bic.w	r3, r3, #16
 8011424:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011426:	4b24      	ldr	r3, [pc, #144]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801142a:	4b24      	ldr	r3, [pc, #144]	; (80114bc <RCCEx_PLL2_Config+0x160>)
 801142c:	4013      	ands	r3, r2
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	69d2      	ldr	r2, [r2, #28]
 8011432:	00d2      	lsls	r2, r2, #3
 8011434:	4920      	ldr	r1, [pc, #128]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011436:	4313      	orrs	r3, r2
 8011438:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801143a:	4b1f      	ldr	r3, [pc, #124]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 801143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801143e:	4a1e      	ldr	r2, [pc, #120]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011440:	f043 0310 	orr.w	r3, r3, #16
 8011444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d106      	bne.n	801145a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801144c:	4b1a      	ldr	r3, [pc, #104]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 801144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011450:	4a19      	ldr	r2, [pc, #100]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011456:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011458:	e00f      	b.n	801147a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	2b01      	cmp	r3, #1
 801145e:	d106      	bne.n	801146e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011460:	4b15      	ldr	r3, [pc, #84]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011464:	4a14      	ldr	r2, [pc, #80]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801146a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801146c:	e005      	b.n	801147a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801146e:	4b12      	ldr	r3, [pc, #72]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011472:	4a11      	ldr	r2, [pc, #68]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011478:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801147a:	4b0f      	ldr	r3, [pc, #60]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	4a0e      	ldr	r2, [pc, #56]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 8011480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011486:	f7f4 fabb 	bl	8005a00 <HAL_GetTick>
 801148a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801148c:	e008      	b.n	80114a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801148e:	f7f4 fab7 	bl	8005a00 <HAL_GetTick>
 8011492:	4602      	mov	r2, r0
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	1ad3      	subs	r3, r2, r3
 8011498:	2b02      	cmp	r3, #2
 801149a:	d901      	bls.n	80114a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801149c:	2303      	movs	r3, #3
 801149e:	e006      	b.n	80114ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80114a0:	4b05      	ldr	r3, [pc, #20]	; (80114b8 <RCCEx_PLL2_Config+0x15c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d0f0      	beq.n	801148e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	58024400 	.word	0x58024400
 80114bc:	ffff0007 	.word	0xffff0007

080114c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
 80114c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80114ca:	2300      	movs	r3, #0
 80114cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80114ce:	4b53      	ldr	r3, [pc, #332]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80114d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d2:	f003 0303 	and.w	r3, r3, #3
 80114d6:	2b03      	cmp	r3, #3
 80114d8:	d101      	bne.n	80114de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80114da:	2301      	movs	r3, #1
 80114dc:	e099      	b.n	8011612 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80114de:	4b4f      	ldr	r3, [pc, #316]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	4a4e      	ldr	r2, [pc, #312]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80114e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80114e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114ea:	f7f4 fa89 	bl	8005a00 <HAL_GetTick>
 80114ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80114f0:	e008      	b.n	8011504 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80114f2:	f7f4 fa85 	bl	8005a00 <HAL_GetTick>
 80114f6:	4602      	mov	r2, r0
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	d901      	bls.n	8011504 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011500:	2303      	movs	r3, #3
 8011502:	e086      	b.n	8011612 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011504:	4b45      	ldr	r3, [pc, #276]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801150c:	2b00      	cmp	r3, #0
 801150e:	d1f0      	bne.n	80114f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011510:	4b42      	ldr	r3, [pc, #264]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 8011512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011514:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	051b      	lsls	r3, r3, #20
 801151e:	493f      	ldr	r1, [pc, #252]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 8011520:	4313      	orrs	r3, r2
 8011522:	628b      	str	r3, [r1, #40]	; 0x28
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	3b01      	subs	r3, #1
 801152a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	689b      	ldr	r3, [r3, #8]
 8011532:	3b01      	subs	r3, #1
 8011534:	025b      	lsls	r3, r3, #9
 8011536:	b29b      	uxth	r3, r3
 8011538:	431a      	orrs	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	3b01      	subs	r3, #1
 8011540:	041b      	lsls	r3, r3, #16
 8011542:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011546:	431a      	orrs	r2, r3
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	691b      	ldr	r3, [r3, #16]
 801154c:	3b01      	subs	r3, #1
 801154e:	061b      	lsls	r3, r3, #24
 8011550:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011554:	4931      	ldr	r1, [pc, #196]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 8011556:	4313      	orrs	r3, r2
 8011558:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801155a:	4b30      	ldr	r3, [pc, #192]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 801155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801155e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	695b      	ldr	r3, [r3, #20]
 8011566:	492d      	ldr	r1, [pc, #180]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 8011568:	4313      	orrs	r3, r2
 801156a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801156c:	4b2b      	ldr	r3, [pc, #172]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 801156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011570:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	699b      	ldr	r3, [r3, #24]
 8011578:	4928      	ldr	r1, [pc, #160]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 801157a:	4313      	orrs	r3, r2
 801157c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801157e:	4b27      	ldr	r3, [pc, #156]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 8011580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011582:	4a26      	ldr	r2, [pc, #152]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 8011584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801158a:	4b24      	ldr	r3, [pc, #144]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 801158c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801158e:	4b24      	ldr	r3, [pc, #144]	; (8011620 <RCCEx_PLL3_Config+0x160>)
 8011590:	4013      	ands	r3, r2
 8011592:	687a      	ldr	r2, [r7, #4]
 8011594:	69d2      	ldr	r2, [r2, #28]
 8011596:	00d2      	lsls	r2, r2, #3
 8011598:	4920      	ldr	r1, [pc, #128]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 801159a:	4313      	orrs	r3, r2
 801159c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801159e:	4b1f      	ldr	r3, [pc, #124]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a2:	4a1e      	ldr	r2, [pc, #120]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80115a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d106      	bne.n	80115be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80115b0:	4b1a      	ldr	r3, [pc, #104]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b4:	4a19      	ldr	r2, [pc, #100]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80115ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80115bc:	e00f      	b.n	80115de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d106      	bne.n	80115d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80115c4:	4b15      	ldr	r3, [pc, #84]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c8:	4a14      	ldr	r2, [pc, #80]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80115ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80115d0:	e005      	b.n	80115de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80115d2:	4b12      	ldr	r3, [pc, #72]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d6:	4a11      	ldr	r2, [pc, #68]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80115dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80115de:	4b0f      	ldr	r3, [pc, #60]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	4a0e      	ldr	r2, [pc, #56]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 80115e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80115e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80115ea:	f7f4 fa09 	bl	8005a00 <HAL_GetTick>
 80115ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80115f0:	e008      	b.n	8011604 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80115f2:	f7f4 fa05 	bl	8005a00 <HAL_GetTick>
 80115f6:	4602      	mov	r2, r0
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	1ad3      	subs	r3, r2, r3
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	d901      	bls.n	8011604 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011600:	2303      	movs	r3, #3
 8011602:	e006      	b.n	8011612 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011604:	4b05      	ldr	r3, [pc, #20]	; (801161c <RCCEx_PLL3_Config+0x15c>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801160c:	2b00      	cmp	r3, #0
 801160e:	d0f0      	beq.n	80115f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011610:	7bfb      	ldrb	r3, [r7, #15]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	58024400 	.word	0x58024400
 8011620:	ffff0007 	.word	0xffff0007

08011624 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801162c:	2301      	movs	r3, #1
 801162e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d071      	beq.n	801171a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801163c:	b2db      	uxtb	r3, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	d106      	bne.n	8011650 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2200      	movs	r2, #0
 8011646:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f7f2 fc30 	bl	8003eb0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	2202      	movs	r2, #2
 8011654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	68db      	ldr	r3, [r3, #12]
 801165e:	f003 0310 	and.w	r3, r3, #16
 8011662:	2b10      	cmp	r3, #16
 8011664:	d050      	beq.n	8011708 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	22ca      	movs	r2, #202	; 0xca
 801166c:	625a      	str	r2, [r3, #36]	; 0x24
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	2253      	movs	r2, #83	; 0x53
 8011674:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f000 fa4a 	bl	8011b10 <RTC_EnterInitMode>
 801167c:	4603      	mov	r3, r0
 801167e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011680:	7bfb      	ldrb	r3, [r7, #15]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d124      	bne.n	80116d0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	6899      	ldr	r1, [r3, #8]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	4b24      	ldr	r3, [pc, #144]	; (8011724 <HAL_RTC_Init+0x100>)
 8011692:	400b      	ands	r3, r1
 8011694:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	6899      	ldr	r1, [r3, #8]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	685a      	ldr	r2, [r3, #4]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	691b      	ldr	r3, [r3, #16]
 80116a4:	431a      	orrs	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	431a      	orrs	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	430a      	orrs	r2, r1
 80116b2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	689b      	ldr	r3, [r3, #8]
 80116b8:	0419      	lsls	r1, r3, #16
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	68da      	ldr	r2, [r3, #12]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	430a      	orrs	r2, r1
 80116c4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f000 fa56 	bl	8011b78 <RTC_ExitInitMode>
 80116cc:	4603      	mov	r3, r0
 80116ce:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80116d0:	7bfb      	ldrb	r3, [r7, #15]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d113      	bne.n	80116fe <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f022 0203 	bic.w	r2, r2, #3
 80116e4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	69da      	ldr	r2, [r3, #28]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	695b      	ldr	r3, [r3, #20]
 80116f4:	431a      	orrs	r2, r3
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	430a      	orrs	r2, r1
 80116fc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	22ff      	movs	r2, #255	; 0xff
 8011704:	625a      	str	r2, [r3, #36]	; 0x24
 8011706:	e001      	b.n	801170c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011708:	2300      	movs	r3, #0
 801170a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801170c:	7bfb      	ldrb	r3, [r7, #15]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d103      	bne.n	801171a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2201      	movs	r2, #1
 8011716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 801171a:	7bfb      	ldrb	r3, [r7, #15]
}
 801171c:	4618      	mov	r0, r3
 801171e:	3710      	adds	r7, #16
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	ff8fffbf 	.word	0xff8fffbf

08011728 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011728:	b590      	push	{r4, r7, lr}
 801172a:	b087      	sub	sp, #28
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f893 3020 	ldrb.w	r3, [r3, #32]
 801173a:	2b01      	cmp	r3, #1
 801173c:	d101      	bne.n	8011742 <HAL_RTC_SetTime+0x1a>
 801173e:	2302      	movs	r3, #2
 8011740:	e089      	b.n	8011856 <HAL_RTC_SetTime+0x12e>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2201      	movs	r2, #1
 8011746:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2202      	movs	r2, #2
 801174e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	22ca      	movs	r2, #202	; 0xca
 8011758:	625a      	str	r2, [r3, #36]	; 0x24
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2253      	movs	r2, #83	; 0x53
 8011760:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011762:	68f8      	ldr	r0, [r7, #12]
 8011764:	f000 f9d4 	bl	8011b10 <RTC_EnterInitMode>
 8011768:	4603      	mov	r3, r0
 801176a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801176c:	7cfb      	ldrb	r3, [r7, #19]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d161      	bne.n	8011836 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d126      	bne.n	80117c6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011782:	2b00      	cmp	r3, #0
 8011784:	d102      	bne.n	801178c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	2200      	movs	r2, #0
 801178a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	781b      	ldrb	r3, [r3, #0]
 8011790:	4618      	mov	r0, r3
 8011792:	f000 fa2f 	bl	8011bf4 <RTC_ByteToBcd2>
 8011796:	4603      	mov	r3, r0
 8011798:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	785b      	ldrb	r3, [r3, #1]
 801179e:	4618      	mov	r0, r3
 80117a0:	f000 fa28 	bl	8011bf4 <RTC_ByteToBcd2>
 80117a4:	4603      	mov	r3, r0
 80117a6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80117a8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	789b      	ldrb	r3, [r3, #2]
 80117ae:	4618      	mov	r0, r3
 80117b0:	f000 fa20 	bl	8011bf4 <RTC_ByteToBcd2>
 80117b4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80117b6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	78db      	ldrb	r3, [r3, #3]
 80117be:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80117c0:	4313      	orrs	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]
 80117c4:	e018      	b.n	80117f8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	689b      	ldr	r3, [r3, #8]
 80117cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d102      	bne.n	80117da <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2200      	movs	r2, #0
 80117d8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	785b      	ldrb	r3, [r3, #1]
 80117e4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80117e6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80117e8:	68ba      	ldr	r2, [r7, #8]
 80117ea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80117ec:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	78db      	ldrb	r3, [r3, #3]
 80117f2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80117f4:	4313      	orrs	r3, r2
 80117f6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	6979      	ldr	r1, [r7, #20]
 80117fe:	4b18      	ldr	r3, [pc, #96]	; (8011860 <HAL_RTC_SetTime+0x138>)
 8011800:	400b      	ands	r3, r1
 8011802:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	689a      	ldr	r2, [r3, #8]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011812:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	6899      	ldr	r1, [r3, #8]
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	68da      	ldr	r2, [r3, #12]
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	691b      	ldr	r3, [r3, #16]
 8011822:	431a      	orrs	r2, r3
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	430a      	orrs	r2, r1
 801182a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	f000 f9a3 	bl	8011b78 <RTC_ExitInitMode>
 8011832:	4603      	mov	r3, r0
 8011834:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	22ff      	movs	r2, #255	; 0xff
 801183c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801183e:	7cfb      	ldrb	r3, [r7, #19]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d103      	bne.n	801184c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2201      	movs	r2, #1
 8011848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2200      	movs	r2, #0
 8011850:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011854:	7cfb      	ldrb	r3, [r7, #19]
}
 8011856:	4618      	mov	r0, r3
 8011858:	371c      	adds	r7, #28
 801185a:	46bd      	mov	sp, r7
 801185c:	bd90      	pop	{r4, r7, pc}
 801185e:	bf00      	nop
 8011860:	007f7f7f 	.word	0x007f7f7f

08011864 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	691b      	ldr	r3, [r3, #16]
 8011880:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	4b22      	ldr	r3, [pc, #136]	; (8011918 <HAL_RTC_GetTime+0xb4>)
 8011890:	4013      	ands	r3, r2
 8011892:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	0c1b      	lsrs	r3, r3, #16
 8011898:	b2db      	uxtb	r3, r3
 801189a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	0a1b      	lsrs	r3, r3, #8
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118ae:	b2da      	uxtb	r2, r3
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118bc:	b2da      	uxtb	r2, r3
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	0d9b      	lsrs	r3, r3, #22
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	f003 0301 	and.w	r3, r3, #1
 80118cc:	b2da      	uxtb	r2, r3
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d11a      	bne.n	801190e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	4618      	mov	r0, r3
 80118de:	f000 f9a9 	bl	8011c34 <RTC_Bcd2ToByte>
 80118e2:	4603      	mov	r3, r0
 80118e4:	461a      	mov	r2, r3
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	785b      	ldrb	r3, [r3, #1]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f000 f9a0 	bl	8011c34 <RTC_Bcd2ToByte>
 80118f4:	4603      	mov	r3, r0
 80118f6:	461a      	mov	r2, r3
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	789b      	ldrb	r3, [r3, #2]
 8011900:	4618      	mov	r0, r3
 8011902:	f000 f997 	bl	8011c34 <RTC_Bcd2ToByte>
 8011906:	4603      	mov	r3, r0
 8011908:	461a      	mov	r2, r3
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801190e:	2300      	movs	r3, #0
}
 8011910:	4618      	mov	r0, r3
 8011912:	3718      	adds	r7, #24
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	007f7f7f 	.word	0x007f7f7f

0801191c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801191c:	b590      	push	{r4, r7, lr}
 801191e:	b087      	sub	sp, #28
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801192e:	2b01      	cmp	r3, #1
 8011930:	d101      	bne.n	8011936 <HAL_RTC_SetDate+0x1a>
 8011932:	2302      	movs	r3, #2
 8011934:	e073      	b.n	8011a1e <HAL_RTC_SetDate+0x102>
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2201      	movs	r2, #1
 801193a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2202      	movs	r2, #2
 8011942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d10e      	bne.n	801196a <HAL_RTC_SetDate+0x4e>
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	785b      	ldrb	r3, [r3, #1]
 8011950:	f003 0310 	and.w	r3, r3, #16
 8011954:	2b00      	cmp	r3, #0
 8011956:	d008      	beq.n	801196a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	785b      	ldrb	r3, [r3, #1]
 801195c:	f023 0310 	bic.w	r3, r3, #16
 8011960:	b2db      	uxtb	r3, r3
 8011962:	330a      	adds	r3, #10
 8011964:	b2da      	uxtb	r2, r3
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d11c      	bne.n	80119aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	78db      	ldrb	r3, [r3, #3]
 8011974:	4618      	mov	r0, r3
 8011976:	f000 f93d 	bl	8011bf4 <RTC_ByteToBcd2>
 801197a:	4603      	mov	r3, r0
 801197c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	785b      	ldrb	r3, [r3, #1]
 8011982:	4618      	mov	r0, r3
 8011984:	f000 f936 	bl	8011bf4 <RTC_ByteToBcd2>
 8011988:	4603      	mov	r3, r0
 801198a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801198c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	789b      	ldrb	r3, [r3, #2]
 8011992:	4618      	mov	r0, r3
 8011994:	f000 f92e 	bl	8011bf4 <RTC_ByteToBcd2>
 8011998:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801199a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80119a4:	4313      	orrs	r3, r2
 80119a6:	617b      	str	r3, [r7, #20]
 80119a8:	e00e      	b.n	80119c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	78db      	ldrb	r3, [r3, #3]
 80119ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	785b      	ldrb	r3, [r3, #1]
 80119b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80119b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80119bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80119c4:	4313      	orrs	r3, r2
 80119c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	22ca      	movs	r2, #202	; 0xca
 80119ce:	625a      	str	r2, [r3, #36]	; 0x24
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2253      	movs	r2, #83	; 0x53
 80119d6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f000 f899 	bl	8011b10 <RTC_EnterInitMode>
 80119de:	4603      	mov	r3, r0
 80119e0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80119e2:	7cfb      	ldrb	r3, [r7, #19]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d10a      	bne.n	80119fe <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	6979      	ldr	r1, [r7, #20]
 80119ee:	4b0e      	ldr	r3, [pc, #56]	; (8011a28 <HAL_RTC_SetDate+0x10c>)
 80119f0:	400b      	ands	r3, r1
 80119f2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f000 f8bf 	bl	8011b78 <RTC_ExitInitMode>
 80119fa:	4603      	mov	r3, r0
 80119fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	22ff      	movs	r2, #255	; 0xff
 8011a04:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011a06:	7cfb      	ldrb	r3, [r7, #19]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d103      	bne.n	8011a14 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	2201      	movs	r2, #1
 8011a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8011a1c:	7cfb      	ldrb	r3, [r7, #19]


}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	371c      	adds	r7, #28
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd90      	pop	{r4, r7, pc}
 8011a26:	bf00      	nop
 8011a28:	00ffff3f 	.word	0x00ffff3f

08011a2c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b086      	sub	sp, #24
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	685a      	ldr	r2, [r3, #4]
 8011a3e:	4b21      	ldr	r3, [pc, #132]	; (8011ac4 <HAL_RTC_GetDate+0x98>)
 8011a40:	4013      	ands	r3, r2
 8011a42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	0c1b      	lsrs	r3, r3, #16
 8011a48:	b2da      	uxtb	r2, r3
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	0a1b      	lsrs	r3, r3, #8
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	f003 031f 	and.w	r3, r3, #31
 8011a58:	b2da      	uxtb	r2, r3
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011a66:	b2da      	uxtb	r2, r3
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	0b5b      	lsrs	r3, r3, #13
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	f003 0307 	and.w	r3, r3, #7
 8011a76:	b2da      	uxtb	r2, r3
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d11a      	bne.n	8011ab8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	78db      	ldrb	r3, [r3, #3]
 8011a86:	4618      	mov	r0, r3
 8011a88:	f000 f8d4 	bl	8011c34 <RTC_Bcd2ToByte>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	461a      	mov	r2, r3
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	785b      	ldrb	r3, [r3, #1]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f000 f8cb 	bl	8011c34 <RTC_Bcd2ToByte>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	789b      	ldrb	r3, [r3, #2]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f000 f8c2 	bl	8011c34 <RTC_Bcd2ToByte>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	461a      	mov	r2, r3
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011ab8:	2300      	movs	r3, #0
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3718      	adds	r7, #24
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	00ffff3f 	.word	0x00ffff3f

08011ac8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4a0d      	ldr	r2, [pc, #52]	; (8011b0c <HAL_RTC_WaitForSynchro+0x44>)
 8011ad6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011ad8:	f7f3 ff92 	bl	8005a00 <HAL_GetTick>
 8011adc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011ade:	e009      	b.n	8011af4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011ae0:	f7f3 ff8e 	bl	8005a00 <HAL_GetTick>
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	1ad3      	subs	r3, r2, r3
 8011aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011aee:	d901      	bls.n	8011af4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011af0:	2303      	movs	r3, #3
 8011af2:	e007      	b.n	8011b04 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	f003 0320 	and.w	r3, r3, #32
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d0ee      	beq.n	8011ae0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011b02:	2300      	movs	r3, #0
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3710      	adds	r7, #16
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	0003ff5f 	.word	0x0003ff5f

08011b10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d120      	bne.n	8011b6c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b32:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011b34:	f7f3 ff64 	bl	8005a00 <HAL_GetTick>
 8011b38:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011b3a:	e00d      	b.n	8011b58 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011b3c:	f7f3 ff60 	bl	8005a00 <HAL_GetTick>
 8011b40:	4602      	mov	r2, r0
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	1ad3      	subs	r3, r2, r3
 8011b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011b4a:	d905      	bls.n	8011b58 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011b4c:	2303      	movs	r3, #3
 8011b4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2203      	movs	r2, #3
 8011b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d102      	bne.n	8011b6c <RTC_EnterInitMode+0x5c>
 8011b66:	7bfb      	ldrb	r3, [r7, #15]
 8011b68:	2b03      	cmp	r3, #3
 8011b6a:	d1e7      	bne.n	8011b3c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
	...

08011b78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011b80:	2300      	movs	r3, #0
 8011b82:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011b84:	4b1a      	ldr	r3, [pc, #104]	; (8011bf0 <RTC_ExitInitMode+0x78>)
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	4a19      	ldr	r2, [pc, #100]	; (8011bf0 <RTC_ExitInitMode+0x78>)
 8011b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b8e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011b90:	4b17      	ldr	r3, [pc, #92]	; (8011bf0 <RTC_ExitInitMode+0x78>)
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	f003 0320 	and.w	r3, r3, #32
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d10c      	bne.n	8011bb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f7ff ff93 	bl	8011ac8 <HAL_RTC_WaitForSynchro>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d01e      	beq.n	8011be6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2203      	movs	r2, #3
 8011bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011bb0:	2303      	movs	r3, #3
 8011bb2:	73fb      	strb	r3, [r7, #15]
 8011bb4:	e017      	b.n	8011be6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011bb6:	4b0e      	ldr	r3, [pc, #56]	; (8011bf0 <RTC_ExitInitMode+0x78>)
 8011bb8:	689b      	ldr	r3, [r3, #8]
 8011bba:	4a0d      	ldr	r2, [pc, #52]	; (8011bf0 <RTC_ExitInitMode+0x78>)
 8011bbc:	f023 0320 	bic.w	r3, r3, #32
 8011bc0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011bc2:	6878      	ldr	r0, [r7, #4]
 8011bc4:	f7ff ff80 	bl	8011ac8 <HAL_RTC_WaitForSynchro>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d005      	beq.n	8011bda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2203      	movs	r2, #3
 8011bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011bd6:	2303      	movs	r3, #3
 8011bd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011bda:	4b05      	ldr	r3, [pc, #20]	; (8011bf0 <RTC_ExitInitMode+0x78>)
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	4a04      	ldr	r2, [pc, #16]	; (8011bf0 <RTC_ExitInitMode+0x78>)
 8011be0:	f043 0320 	orr.w	r3, r3, #32
 8011be4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3710      	adds	r7, #16
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	58004000 	.word	0x58004000

08011bf4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b085      	sub	sp, #20
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011bfe:	2300      	movs	r3, #0
 8011c00:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011c02:	79fb      	ldrb	r3, [r7, #7]
 8011c04:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011c06:	e005      	b.n	8011c14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011c0e:	7afb      	ldrb	r3, [r7, #11]
 8011c10:	3b0a      	subs	r3, #10
 8011c12:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011c14:	7afb      	ldrb	r3, [r7, #11]
 8011c16:	2b09      	cmp	r3, #9
 8011c18:	d8f6      	bhi.n	8011c08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	011b      	lsls	r3, r3, #4
 8011c20:	b2da      	uxtb	r2, r3
 8011c22:	7afb      	ldrb	r3, [r7, #11]
 8011c24:	4313      	orrs	r3, r2
 8011c26:	b2db      	uxtb	r3, r3
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3714      	adds	r7, #20
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011c34:	b480      	push	{r7}
 8011c36:	b085      	sub	sp, #20
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011c3e:	79fb      	ldrb	r3, [r7, #7]
 8011c40:	091b      	lsrs	r3, r3, #4
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	461a      	mov	r2, r3
 8011c46:	0092      	lsls	r2, r2, #2
 8011c48:	4413      	add	r3, r2
 8011c4a:	005b      	lsls	r3, r3, #1
 8011c4c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
 8011c50:	f003 030f 	and.w	r3, r3, #15
 8011c54:	b2da      	uxtb	r2, r3
 8011c56:	7bfb      	ldrb	r3, [r7, #15]
 8011c58:	4413      	add	r3, r2
 8011c5a:	b2db      	uxtb	r3, r3
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3714      	adds	r7, #20
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d101      	bne.n	8011c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011c76:	2301      	movs	r3, #1
 8011c78:	e10f      	b.n	8011e9a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	4a87      	ldr	r2, [pc, #540]	; (8011ea4 <HAL_SPI_Init+0x23c>)
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d00f      	beq.n	8011caa <HAL_SPI_Init+0x42>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4a86      	ldr	r2, [pc, #536]	; (8011ea8 <HAL_SPI_Init+0x240>)
 8011c90:	4293      	cmp	r3, r2
 8011c92:	d00a      	beq.n	8011caa <HAL_SPI_Init+0x42>
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	4a84      	ldr	r2, [pc, #528]	; (8011eac <HAL_SPI_Init+0x244>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d005      	beq.n	8011caa <HAL_SPI_Init+0x42>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	68db      	ldr	r3, [r3, #12]
 8011ca2:	2b0f      	cmp	r3, #15
 8011ca4:	d901      	bls.n	8011caa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	e0f7      	b.n	8011e9a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 fd60 	bl	8012770 <SPI_GetPacketSize>
 8011cb0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	4a7b      	ldr	r2, [pc, #492]	; (8011ea4 <HAL_SPI_Init+0x23c>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d00c      	beq.n	8011cd6 <HAL_SPI_Init+0x6e>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	4a79      	ldr	r2, [pc, #484]	; (8011ea8 <HAL_SPI_Init+0x240>)
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d007      	beq.n	8011cd6 <HAL_SPI_Init+0x6e>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	4a78      	ldr	r2, [pc, #480]	; (8011eac <HAL_SPI_Init+0x244>)
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d002      	beq.n	8011cd6 <HAL_SPI_Init+0x6e>
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	2b08      	cmp	r3, #8
 8011cd4:	d811      	bhi.n	8011cfa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011cda:	4a72      	ldr	r2, [pc, #456]	; (8011ea4 <HAL_SPI_Init+0x23c>)
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d009      	beq.n	8011cf4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	4a70      	ldr	r2, [pc, #448]	; (8011ea8 <HAL_SPI_Init+0x240>)
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	d004      	beq.n	8011cf4 <HAL_SPI_Init+0x8c>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	4a6f      	ldr	r2, [pc, #444]	; (8011eac <HAL_SPI_Init+0x244>)
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d104      	bne.n	8011cfe <HAL_SPI_Init+0x96>
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2b10      	cmp	r3, #16
 8011cf8:	d901      	bls.n	8011cfe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	e0cd      	b.n	8011e9a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d106      	bne.n	8011d18 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7f2 fb50 	bl	80043b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2202      	movs	r2, #2
 8011d1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f022 0201 	bic.w	r2, r2, #1
 8011d2e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	689b      	ldr	r3, [r3, #8]
 8011d36:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011d3a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	699b      	ldr	r3, [r3, #24]
 8011d40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d44:	d119      	bne.n	8011d7a <HAL_SPI_Init+0x112>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d4e:	d103      	bne.n	8011d58 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d008      	beq.n	8011d6a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d10c      	bne.n	8011d7a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d68:	d107      	bne.n	8011d7a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011d78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00f      	beq.n	8011da6 <HAL_SPI_Init+0x13e>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	2b06      	cmp	r3, #6
 8011d8c:	d90b      	bls.n	8011da6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	430a      	orrs	r2, r1
 8011da2:	601a      	str	r2, [r3, #0]
 8011da4:	e007      	b.n	8011db6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	681a      	ldr	r2, [r3, #0]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011db4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	69da      	ldr	r2, [r3, #28]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dbe:	431a      	orrs	r2, r3
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	431a      	orrs	r2, r3
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dc8:	ea42 0103 	orr.w	r1, r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	68da      	ldr	r2, [r3, #12]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	430a      	orrs	r2, r1
 8011dd6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de0:	431a      	orrs	r2, r3
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011de6:	431a      	orrs	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	699b      	ldr	r3, [r3, #24]
 8011dec:	431a      	orrs	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	431a      	orrs	r2, r3
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	695b      	ldr	r3, [r3, #20]
 8011df8:	431a      	orrs	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6a1b      	ldr	r3, [r3, #32]
 8011dfe:	431a      	orrs	r2, r3
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	431a      	orrs	r2, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e0a:	431a      	orrs	r2, r3
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	689b      	ldr	r3, [r3, #8]
 8011e10:	431a      	orrs	r2, r3
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011e16:	ea42 0103 	orr.w	r1, r2, r3
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	430a      	orrs	r2, r1
 8011e24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d113      	bne.n	8011e56 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	689b      	ldr	r3, [r3, #8]
 8011e34:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011e40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	689b      	ldr	r3, [r3, #8]
 8011e48:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011e54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f022 0201 	bic.w	r2, r2, #1
 8011e64:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d00a      	beq.n	8011e88 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	430a      	orrs	r2, r1
 8011e86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2201      	movs	r2, #1
 8011e94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011e98:	2300      	movs	r3, #0
}
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	40013000 	.word	0x40013000
 8011ea8:	40003800 	.word	0x40003800
 8011eac:	40003c00 	.word	0x40003c00

08011eb0 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	4613      	mov	r3, r2
 8011ebc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d005      	beq.n	8011ed6 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2200      	movs	r2, #0
 8011ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011ed2:	2302      	movs	r3, #2
 8011ed4:	e127      	b.n	8012126 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d002      	beq.n	8011ee2 <HAL_SPI_Receive_DMA+0x32>
 8011edc:	88fb      	ldrh	r3, [r7, #6]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d105      	bne.n	8011eee <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011eea:	2301      	movs	r3, #1
 8011eec:	e11b      	b.n	8012126 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d101      	bne.n	8011efc <HAL_SPI_Receive_DMA+0x4c>
 8011ef8:	2302      	movs	r3, #2
 8011efa:	e114      	b.n	8012126 <HAL_SPI_Receive_DMA+0x276>
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2201      	movs	r2, #1
 8011f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2204      	movs	r2, #4
 8011f08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	68ba      	ldr	r2, [r7, #8]
 8011f18:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	88fa      	ldrh	r2, [r7, #6]
 8011f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	88fa      	ldrh	r2, [r7, #6]
 8011f26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	2200      	movs	r2, #0
 8011f34:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2200      	movs	r2, #0
 8011f42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	689b      	ldr	r3, [r3, #8]
 8011f4a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011f4e:	d108      	bne.n	8011f62 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011f5e:	601a      	str	r2, [r3, #0]
 8011f60:	e009      	b.n	8011f76 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011f74:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	2b0f      	cmp	r3, #15
 8011f7c:	d905      	bls.n	8011f8a <HAL_SPI_Receive_DMA+0xda>
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f82:	699b      	ldr	r3, [r3, #24]
 8011f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f88:	d10f      	bne.n	8011faa <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011f8e:	2b07      	cmp	r3, #7
 8011f90:	d911      	bls.n	8011fb6 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f96:	699b      	ldr	r3, [r3, #24]
 8011f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f9c:	d00b      	beq.n	8011fb6 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fa2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fa8:	d005      	beq.n	8011fb6 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2200      	movs	r2, #0
 8011fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	e0b7      	b.n	8012126 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	689a      	ldr	r2, [r3, #8]
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011fc4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	2b07      	cmp	r3, #7
 8011fcc:	d820      	bhi.n	8012010 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fd2:	699b      	ldr	r3, [r3, #24]
 8011fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011fd8:	d109      	bne.n	8011fee <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	105b      	asrs	r3, r3, #1
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ff2:	699b      	ldr	r3, [r3, #24]
 8011ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ff8:	d11e      	bne.n	8012038 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012000:	b29b      	uxth	r3, r3
 8012002:	3303      	adds	r3, #3
 8012004:	109b      	asrs	r3, r3, #2
 8012006:	b29a      	uxth	r2, r3
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801200e:	e013      	b.n	8012038 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	2b0f      	cmp	r3, #15
 8012016:	d80f      	bhi.n	8012038 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801201c:	699b      	ldr	r3, [r3, #24]
 801201e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012022:	d109      	bne.n	8012038 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801202a:	b29b      	uxth	r3, r3
 801202c:	3301      	adds	r3, #1
 801202e:	105b      	asrs	r3, r3, #1
 8012030:	b29a      	uxth	r2, r3
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801203c:	4a3c      	ldr	r2, [pc, #240]	; (8012130 <HAL_SPI_Receive_DMA+0x280>)
 801203e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012044:	4a3b      	ldr	r2, [pc, #236]	; (8012134 <HAL_SPI_Receive_DMA+0x284>)
 8012046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801204c:	4a3a      	ldr	r2, [pc, #232]	; (8012138 <HAL_SPI_Receive_DMA+0x288>)
 801204e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012054:	2200      	movs	r2, #0
 8012056:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	3330      	adds	r3, #48	; 0x30
 8012062:	4619      	mov	r1, r3
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012068:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012070:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012072:	f7f6 f9c1 	bl	80083f8 <HAL_DMA_Start_IT>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d011      	beq.n	80120a0 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012082:	f043 0210 	orr.w	r2, r3, #16
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2201      	movs	r2, #1
 8012090:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2200      	movs	r2, #0
 8012098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 801209c:	2301      	movs	r3, #1
 801209e:	e042      	b.n	8012126 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120a4:	69db      	ldr	r3, [r3, #28]
 80120a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120aa:	d108      	bne.n	80120be <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	6859      	ldr	r1, [r3, #4]
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	4b21      	ldr	r3, [pc, #132]	; (801213c <HAL_SPI_Receive_DMA+0x28c>)
 80120b8:	400b      	ands	r3, r1
 80120ba:	6053      	str	r3, [r2, #4]
 80120bc:	e009      	b.n	80120d2 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	685a      	ldr	r2, [r3, #4]
 80120c4:	4b1d      	ldr	r3, [pc, #116]	; (801213c <HAL_SPI_Receive_DMA+0x28c>)
 80120c6:	4013      	ands	r3, r2
 80120c8:	88f9      	ldrh	r1, [r7, #6]
 80120ca:	68fa      	ldr	r2, [r7, #12]
 80120cc:	6812      	ldr	r2, [r2, #0]
 80120ce:	430b      	orrs	r3, r1
 80120d0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	689a      	ldr	r2, [r3, #8]
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80120e0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	691a      	ldr	r2, [r3, #16]
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80120f0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	f042 0201 	orr.w	r2, r2, #1
 8012100:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	685b      	ldr	r3, [r3, #4]
 8012106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801210a:	d107      	bne.n	801211c <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801211a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	2200      	movs	r2, #0
 8012120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012124:	2300      	movs	r3, #0
}
 8012126:	4618      	mov	r0, r3
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop
 8012130:	0801259b 	.word	0x0801259b
 8012134:	08012555 	.word	0x08012555
 8012138:	080125b7 	.word	0x080125b7
 801213c:	ffff0000 	.word	0xffff0000

08012140 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b08a      	sub	sp, #40	; 0x28
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	691b      	ldr	r3, [r3, #16]
 801214e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	695b      	ldr	r3, [r3, #20]
 8012156:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012158:	6a3a      	ldr	r2, [r7, #32]
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	4013      	ands	r3, r2
 801215e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	689b      	ldr	r3, [r3, #8]
 8012166:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012168:	2300      	movs	r3, #0
 801216a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012172:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	3330      	adds	r3, #48	; 0x30
 801217a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012182:	2b00      	cmp	r3, #0
 8012184:	d010      	beq.n	80121a8 <HAL_SPI_IRQHandler+0x68>
 8012186:	6a3b      	ldr	r3, [r7, #32]
 8012188:	f003 0308 	and.w	r3, r3, #8
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00b      	beq.n	80121a8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	699a      	ldr	r2, [r3, #24]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801219e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 f9cd 	bl	8012540 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80121a6:	e192      	b.n	80124ce <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d113      	bne.n	80121da <HAL_SPI_IRQHandler+0x9a>
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	f003 0320 	and.w	r3, r3, #32
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d10e      	bne.n	80121da <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80121bc:	69bb      	ldr	r3, [r7, #24]
 80121be:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d009      	beq.n	80121da <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	4798      	blx	r3
    hspi->RxISR(hspi);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	4798      	blx	r3
    handled = 1UL;
 80121d6:	2301      	movs	r3, #1
 80121d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d10f      	bne.n	8012204 <HAL_SPI_IRQHandler+0xc4>
 80121e4:	69bb      	ldr	r3, [r7, #24]
 80121e6:	f003 0301 	and.w	r3, r3, #1
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d00a      	beq.n	8012204 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80121ee:	69bb      	ldr	r3, [r7, #24]
 80121f0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d105      	bne.n	8012204 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	4798      	blx	r3
    handled = 1UL;
 8012200:	2301      	movs	r3, #1
 8012202:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012204:	69bb      	ldr	r3, [r7, #24]
 8012206:	f003 0320 	and.w	r3, r3, #32
 801220a:	2b00      	cmp	r3, #0
 801220c:	d10f      	bne.n	801222e <HAL_SPI_IRQHandler+0xee>
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	f003 0302 	and.w	r3, r3, #2
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00a      	beq.n	801222e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012218:	69bb      	ldr	r3, [r7, #24]
 801221a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801221e:	2b00      	cmp	r3, #0
 8012220:	d105      	bne.n	801222e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	4798      	blx	r3
    handled = 1UL;
 801222a:	2301      	movs	r3, #1
 801222c:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012230:	2b00      	cmp	r3, #0
 8012232:	f040 8147 	bne.w	80124c4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	f003 0308 	and.w	r3, r3, #8
 801223c:	2b00      	cmp	r3, #0
 801223e:	f000 808b 	beq.w	8012358 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	699a      	ldr	r2, [r3, #24]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f042 0208 	orr.w	r2, r2, #8
 8012250:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	699a      	ldr	r2, [r3, #24]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f042 0210 	orr.w	r2, r2, #16
 8012260:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	699a      	ldr	r2, [r3, #24]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012270:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	691a      	ldr	r2, [r3, #16]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	f022 0208 	bic.w	r2, r2, #8
 8012280:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	689b      	ldr	r3, [r3, #8]
 8012288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801228c:	2b00      	cmp	r3, #0
 801228e:	d13d      	bne.n	801230c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012290:	e036      	b.n	8012300 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	2b0f      	cmp	r3, #15
 8012298:	d90b      	bls.n	80122b2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80122a4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122aa:	1d1a      	adds	r2, r3, #4
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	665a      	str	r2, [r3, #100]	; 0x64
 80122b0:	e01d      	b.n	80122ee <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	68db      	ldr	r3, [r3, #12]
 80122b6:	2b07      	cmp	r3, #7
 80122b8:	d90b      	bls.n	80122d2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122be:	68fa      	ldr	r2, [r7, #12]
 80122c0:	8812      	ldrh	r2, [r2, #0]
 80122c2:	b292      	uxth	r2, r2
 80122c4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122ca:	1c9a      	adds	r2, r3, #2
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	665a      	str	r2, [r3, #100]	; 0x64
 80122d0:	e00d      	b.n	80122ee <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122de:	7812      	ldrb	r2, [r2, #0]
 80122e0:	b2d2      	uxtb	r2, r2
 80122e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122e8:	1c5a      	adds	r2, r3, #1
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	3b01      	subs	r3, #1
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012306:	b29b      	uxth	r3, r3
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1c2      	bne.n	8012292 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f000 f98f 	bl	8012630 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2201      	movs	r2, #1
 8012316:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012320:	2b00      	cmp	r3, #0
 8012322:	d003      	beq.n	801232c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f000 f901 	bl	801252c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801232a:	e0d0      	b.n	80124ce <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801232c:	7cfb      	ldrb	r3, [r7, #19]
 801232e:	2b05      	cmp	r3, #5
 8012330:	d103      	bne.n	801233a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f000 f8e6 	bl	8012504 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012338:	e0c6      	b.n	80124c8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801233a:	7cfb      	ldrb	r3, [r7, #19]
 801233c:	2b04      	cmp	r3, #4
 801233e:	d103      	bne.n	8012348 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 f8d5 	bl	80124f0 <HAL_SPI_RxCpltCallback>
    return;
 8012346:	e0bf      	b.n	80124c8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012348:	7cfb      	ldrb	r3, [r7, #19]
 801234a:	2b03      	cmp	r3, #3
 801234c:	f040 80bc 	bne.w	80124c8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 f8c3 	bl	80124dc <HAL_SPI_TxCpltCallback>
    return;
 8012356:	e0b7      	b.n	80124c8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012358:	69bb      	ldr	r3, [r7, #24]
 801235a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 801235e:	2b00      	cmp	r3, #0
 8012360:	f000 80b5 	beq.w	80124ce <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801236a:	2b00      	cmp	r3, #0
 801236c:	d00f      	beq.n	801238e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012374:	f043 0204 	orr.w	r2, r3, #4
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	699a      	ldr	r2, [r3, #24]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801238c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801238e:	69bb      	ldr	r3, [r7, #24]
 8012390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012394:	2b00      	cmp	r3, #0
 8012396:	d00f      	beq.n	80123b8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801239e:	f043 0201 	orr.w	r2, r3, #1
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	699a      	ldr	r2, [r3, #24]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80123b6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d00f      	beq.n	80123e2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123c8:	f043 0208 	orr.w	r2, r3, #8
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	699a      	ldr	r2, [r3, #24]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80123e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	f003 0320 	and.w	r3, r3, #32
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00f      	beq.n	801240c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	699a      	ldr	r2, [r3, #24]
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	f042 0220 	orr.w	r2, r2, #32
 801240a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012412:	2b00      	cmp	r3, #0
 8012414:	d05a      	beq.n	80124cc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f022 0201 	bic.w	r2, r2, #1
 8012424:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	6919      	ldr	r1, [r3, #16]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	4b28      	ldr	r3, [pc, #160]	; (80124d4 <HAL_SPI_IRQHandler+0x394>)
 8012432:	400b      	ands	r3, r1
 8012434:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801243c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012440:	d138      	bne.n	80124b4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	689a      	ldr	r2, [r3, #8]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012450:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012456:	2b00      	cmp	r3, #0
 8012458:	d013      	beq.n	8012482 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801245e:	4a1e      	ldr	r2, [pc, #120]	; (80124d8 <HAL_SPI_IRQHandler+0x398>)
 8012460:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012466:	4618      	mov	r0, r3
 8012468:	f7f6 fd4e 	bl	8008f08 <HAL_DMA_Abort_IT>
 801246c:	4603      	mov	r3, r0
 801246e:	2b00      	cmp	r3, #0
 8012470:	d007      	beq.n	8012482 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012478:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012486:	2b00      	cmp	r3, #0
 8012488:	d020      	beq.n	80124cc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801248e:	4a12      	ldr	r2, [pc, #72]	; (80124d8 <HAL_SPI_IRQHandler+0x398>)
 8012490:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012496:	4618      	mov	r0, r3
 8012498:	f7f6 fd36 	bl	8008f08 <HAL_DMA_Abort_IT>
 801249c:	4603      	mov	r3, r0
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d014      	beq.n	80124cc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80124b2:	e00b      	b.n	80124cc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2201      	movs	r2, #1
 80124b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f000 f835 	bl	801252c <HAL_SPI_ErrorCallback>
    return;
 80124c2:	e003      	b.n	80124cc <HAL_SPI_IRQHandler+0x38c>
    return;
 80124c4:	bf00      	nop
 80124c6:	e002      	b.n	80124ce <HAL_SPI_IRQHandler+0x38e>
    return;
 80124c8:	bf00      	nop
 80124ca:	e000      	b.n	80124ce <HAL_SPI_IRQHandler+0x38e>
    return;
 80124cc:	bf00      	nop
  }
}
 80124ce:	3728      	adds	r7, #40	; 0x28
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	fffffc94 	.word	0xfffffc94
 80124d8:	080125fd 	.word	0x080125fd

080124dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80124e4:	bf00      	nop
 80124e6:	370c      	adds	r7, #12
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr

080124f0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80124f0:	b480      	push	{r7}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80124f8:	bf00      	nop
 80124fa:	370c      	adds	r7, #12
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012504:	b480      	push	{r7}
 8012506:	b083      	sub	sp, #12
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801250c:	bf00      	nop
 801250e:	370c      	adds	r7, #12
 8012510:	46bd      	mov	sp, r7
 8012512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012516:	4770      	bx	lr

08012518 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012520:	bf00      	nop
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801252c:	b480      	push	{r7}
 801252e:	b083      	sub	sp, #12
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012534:	bf00      	nop
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr

08012540 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012548:	bf00      	nop
 801254a:	370c      	adds	r7, #12
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr

08012554 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012560:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012568:	b2db      	uxtb	r3, r3
 801256a:	2b07      	cmp	r3, #7
 801256c:	d011      	beq.n	8012592 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012572:	69db      	ldr	r3, [r3, #28]
 8012574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012578:	d103      	bne.n	8012582 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f7ff ffb8 	bl	80124f0 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012580:	e007      	b.n	8012592 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	691a      	ldr	r2, [r3, #16]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f042 0208 	orr.w	r2, r2, #8
 8012590:	611a      	str	r2, [r3, #16]
}
 8012592:	bf00      	nop
 8012594:	3710      	adds	r7, #16
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}

0801259a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801259a:	b580      	push	{r7, lr}
 801259c:	b084      	sub	sp, #16
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125a6:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80125a8:	68f8      	ldr	r0, [r7, #12]
 80125aa:	f7ff ffb5 	bl	8012518 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80125ae:	bf00      	nop
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}

080125b6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80125b6:	b580      	push	{r7, lr}
 80125b8:	b084      	sub	sp, #16
 80125ba:	af00      	add	r7, sp, #0
 80125bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125c2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7f7 fe1d 	bl	800a204 <HAL_DMA_GetError>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	d011      	beq.n	80125f4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f000 f82d 	bl	8012630 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125dc:	f043 0210 	orr.w	r2, r3, #16
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2201      	movs	r2, #1
 80125ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80125ee:	68f8      	ldr	r0, [r7, #12]
 80125f0:	f7ff ff9c 	bl	801252c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80125f4:	bf00      	nop
 80125f6:	3710      	adds	r7, #16
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b084      	sub	sp, #16
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012608:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	2200      	movs	r2, #0
 801260e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2200      	movs	r2, #0
 8012616:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	2201      	movs	r2, #1
 801261e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012622:	68f8      	ldr	r0, [r7, #12]
 8012624:	f7ff ff82 	bl	801252c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012628:	bf00      	nop
 801262a:	3710      	adds	r7, #16
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012630:	b480      	push	{r7}
 8012632:	b085      	sub	sp, #20
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	695b      	ldr	r3, [r3, #20]
 801263e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	699a      	ldr	r2, [r3, #24]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	f042 0208 	orr.w	r2, r2, #8
 801264e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	699a      	ldr	r2, [r3, #24]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f042 0210 	orr.w	r2, r2, #16
 801265e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f022 0201 	bic.w	r2, r2, #1
 801266e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	6919      	ldr	r1, [r3, #16]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	4b3c      	ldr	r3, [pc, #240]	; (801276c <SPI_CloseTransfer+0x13c>)
 801267c:	400b      	ands	r3, r1
 801267e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	689a      	ldr	r2, [r3, #8]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801268e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012696:	b2db      	uxtb	r3, r3
 8012698:	2b04      	cmp	r3, #4
 801269a:	d014      	beq.n	80126c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f003 0320 	and.w	r3, r3, #32
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d00f      	beq.n	80126c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	699a      	ldr	r2, [r3, #24]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f042 0220 	orr.w	r2, r2, #32
 80126c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	2b03      	cmp	r3, #3
 80126d0:	d014      	beq.n	80126fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00f      	beq.n	80126fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126e2:	f043 0204 	orr.w	r2, r3, #4
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	699a      	ldr	r2, [r3, #24]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80126fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012702:	2b00      	cmp	r3, #0
 8012704:	d00f      	beq.n	8012726 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801270c:	f043 0201 	orr.w	r2, r3, #1
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	699a      	ldr	r2, [r3, #24]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012724:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801272c:	2b00      	cmp	r3, #0
 801272e:	d00f      	beq.n	8012750 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012736:	f043 0208 	orr.w	r2, r3, #8
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	699a      	ldr	r2, [r3, #24]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801274e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2200      	movs	r2, #0
 8012754:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2200      	movs	r2, #0
 801275c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012760:	bf00      	nop
 8012762:	3714      	adds	r7, #20
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr
 801276c:	fffffc90 	.word	0xfffffc90

08012770 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012770:	b480      	push	{r7}
 8012772:	b085      	sub	sp, #20
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801277c:	095b      	lsrs	r3, r3, #5
 801277e:	3301      	adds	r3, #1
 8012780:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	68db      	ldr	r3, [r3, #12]
 8012786:	3301      	adds	r3, #1
 8012788:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	3307      	adds	r3, #7
 801278e:	08db      	lsrs	r3, r3, #3
 8012790:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	68fa      	ldr	r2, [r7, #12]
 8012796:	fb02 f303 	mul.w	r3, r2, r3
}
 801279a:	4618      	mov	r0, r3
 801279c:	3714      	adds	r7, #20
 801279e:	46bd      	mov	sp, r7
 80127a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a4:	4770      	bx	lr

080127a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80127a6:	b580      	push	{r7, lr}
 80127a8:	b082      	sub	sp, #8
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d101      	bne.n	80127b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80127b4:	2301      	movs	r3, #1
 80127b6:	e049      	b.n	801284c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80127be:	b2db      	uxtb	r3, r3
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d106      	bne.n	80127d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2200      	movs	r2, #0
 80127c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7f2 faff 	bl	8004dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2202      	movs	r2, #2
 80127d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	3304      	adds	r3, #4
 80127e2:	4619      	mov	r1, r3
 80127e4:	4610      	mov	r0, r2
 80127e6:	f000 fe7d 	bl	80134e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2201      	movs	r2, #1
 80127ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2201      	movs	r2, #1
 80127f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2201      	movs	r2, #1
 80127fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2201      	movs	r2, #1
 8012806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2201      	movs	r2, #1
 801280e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2201      	movs	r2, #1
 8012816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2201      	movs	r2, #1
 801281e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2201      	movs	r2, #1
 8012826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2201      	movs	r2, #1
 801282e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2201      	movs	r2, #1
 8012836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2201      	movs	r2, #1
 801283e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2201      	movs	r2, #1
 8012846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801284a:	2300      	movs	r3, #0
}
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012854:	b480      	push	{r7}
 8012856:	b085      	sub	sp, #20
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012862:	b2db      	uxtb	r3, r3
 8012864:	2b01      	cmp	r3, #1
 8012866:	d001      	beq.n	801286c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012868:	2301      	movs	r3, #1
 801286a:	e054      	b.n	8012916 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2202      	movs	r2, #2
 8012870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	68da      	ldr	r2, [r3, #12]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	f042 0201 	orr.w	r2, r2, #1
 8012882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a26      	ldr	r2, [pc, #152]	; (8012924 <HAL_TIM_Base_Start_IT+0xd0>)
 801288a:	4293      	cmp	r3, r2
 801288c:	d022      	beq.n	80128d4 <HAL_TIM_Base_Start_IT+0x80>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012896:	d01d      	beq.n	80128d4 <HAL_TIM_Base_Start_IT+0x80>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4a22      	ldr	r2, [pc, #136]	; (8012928 <HAL_TIM_Base_Start_IT+0xd4>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d018      	beq.n	80128d4 <HAL_TIM_Base_Start_IT+0x80>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4a21      	ldr	r2, [pc, #132]	; (801292c <HAL_TIM_Base_Start_IT+0xd8>)
 80128a8:	4293      	cmp	r3, r2
 80128aa:	d013      	beq.n	80128d4 <HAL_TIM_Base_Start_IT+0x80>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4a1f      	ldr	r2, [pc, #124]	; (8012930 <HAL_TIM_Base_Start_IT+0xdc>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d00e      	beq.n	80128d4 <HAL_TIM_Base_Start_IT+0x80>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	4a1e      	ldr	r2, [pc, #120]	; (8012934 <HAL_TIM_Base_Start_IT+0xe0>)
 80128bc:	4293      	cmp	r3, r2
 80128be:	d009      	beq.n	80128d4 <HAL_TIM_Base_Start_IT+0x80>
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	4a1c      	ldr	r2, [pc, #112]	; (8012938 <HAL_TIM_Base_Start_IT+0xe4>)
 80128c6:	4293      	cmp	r3, r2
 80128c8:	d004      	beq.n	80128d4 <HAL_TIM_Base_Start_IT+0x80>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a1b      	ldr	r2, [pc, #108]	; (801293c <HAL_TIM_Base_Start_IT+0xe8>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d115      	bne.n	8012900 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	689a      	ldr	r2, [r3, #8]
 80128da:	4b19      	ldr	r3, [pc, #100]	; (8012940 <HAL_TIM_Base_Start_IT+0xec>)
 80128dc:	4013      	ands	r3, r2
 80128de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2b06      	cmp	r3, #6
 80128e4:	d015      	beq.n	8012912 <HAL_TIM_Base_Start_IT+0xbe>
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80128ec:	d011      	beq.n	8012912 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	f042 0201 	orr.w	r2, r2, #1
 80128fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128fe:	e008      	b.n	8012912 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f042 0201 	orr.w	r2, r2, #1
 801290e:	601a      	str	r2, [r3, #0]
 8012910:	e000      	b.n	8012914 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012912:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012914:	2300      	movs	r3, #0
}
 8012916:	4618      	mov	r0, r3
 8012918:	3714      	adds	r7, #20
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop
 8012924:	40010000 	.word	0x40010000
 8012928:	40000400 	.word	0x40000400
 801292c:	40000800 	.word	0x40000800
 8012930:	40000c00 	.word	0x40000c00
 8012934:	40010400 	.word	0x40010400
 8012938:	40001800 	.word	0x40001800
 801293c:	40014000 	.word	0x40014000
 8012940:	00010007 	.word	0x00010007

08012944 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801294e:	2300      	movs	r3, #0
 8012950:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d109      	bne.n	801296c <HAL_TIM_OC_Start_IT+0x28>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801295e:	b2db      	uxtb	r3, r3
 8012960:	2b01      	cmp	r3, #1
 8012962:	bf14      	ite	ne
 8012964:	2301      	movne	r3, #1
 8012966:	2300      	moveq	r3, #0
 8012968:	b2db      	uxtb	r3, r3
 801296a:	e03c      	b.n	80129e6 <HAL_TIM_OC_Start_IT+0xa2>
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	2b04      	cmp	r3, #4
 8012970:	d109      	bne.n	8012986 <HAL_TIM_OC_Start_IT+0x42>
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012978:	b2db      	uxtb	r3, r3
 801297a:	2b01      	cmp	r3, #1
 801297c:	bf14      	ite	ne
 801297e:	2301      	movne	r3, #1
 8012980:	2300      	moveq	r3, #0
 8012982:	b2db      	uxtb	r3, r3
 8012984:	e02f      	b.n	80129e6 <HAL_TIM_OC_Start_IT+0xa2>
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	2b08      	cmp	r3, #8
 801298a:	d109      	bne.n	80129a0 <HAL_TIM_OC_Start_IT+0x5c>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012992:	b2db      	uxtb	r3, r3
 8012994:	2b01      	cmp	r3, #1
 8012996:	bf14      	ite	ne
 8012998:	2301      	movne	r3, #1
 801299a:	2300      	moveq	r3, #0
 801299c:	b2db      	uxtb	r3, r3
 801299e:	e022      	b.n	80129e6 <HAL_TIM_OC_Start_IT+0xa2>
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	2b0c      	cmp	r3, #12
 80129a4:	d109      	bne.n	80129ba <HAL_TIM_OC_Start_IT+0x76>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	2b01      	cmp	r3, #1
 80129b0:	bf14      	ite	ne
 80129b2:	2301      	movne	r3, #1
 80129b4:	2300      	moveq	r3, #0
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	e015      	b.n	80129e6 <HAL_TIM_OC_Start_IT+0xa2>
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	2b10      	cmp	r3, #16
 80129be:	d109      	bne.n	80129d4 <HAL_TIM_OC_Start_IT+0x90>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129c6:	b2db      	uxtb	r3, r3
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	bf14      	ite	ne
 80129cc:	2301      	movne	r3, #1
 80129ce:	2300      	moveq	r3, #0
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	e008      	b.n	80129e6 <HAL_TIM_OC_Start_IT+0xa2>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	2b01      	cmp	r3, #1
 80129de:	bf14      	ite	ne
 80129e0:	2301      	movne	r3, #1
 80129e2:	2300      	moveq	r3, #0
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d001      	beq.n	80129ee <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80129ea:	2301      	movs	r3, #1
 80129ec:	e0ec      	b.n	8012bc8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d104      	bne.n	80129fe <HAL_TIM_OC_Start_IT+0xba>
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2202      	movs	r2, #2
 80129f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80129fc:	e023      	b.n	8012a46 <HAL_TIM_OC_Start_IT+0x102>
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	2b04      	cmp	r3, #4
 8012a02:	d104      	bne.n	8012a0e <HAL_TIM_OC_Start_IT+0xca>
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2202      	movs	r2, #2
 8012a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012a0c:	e01b      	b.n	8012a46 <HAL_TIM_OC_Start_IT+0x102>
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	2b08      	cmp	r3, #8
 8012a12:	d104      	bne.n	8012a1e <HAL_TIM_OC_Start_IT+0xda>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2202      	movs	r2, #2
 8012a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012a1c:	e013      	b.n	8012a46 <HAL_TIM_OC_Start_IT+0x102>
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	2b0c      	cmp	r3, #12
 8012a22:	d104      	bne.n	8012a2e <HAL_TIM_OC_Start_IT+0xea>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2202      	movs	r2, #2
 8012a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012a2c:	e00b      	b.n	8012a46 <HAL_TIM_OC_Start_IT+0x102>
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	2b10      	cmp	r3, #16
 8012a32:	d104      	bne.n	8012a3e <HAL_TIM_OC_Start_IT+0xfa>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2202      	movs	r2, #2
 8012a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012a3c:	e003      	b.n	8012a46 <HAL_TIM_OC_Start_IT+0x102>
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2202      	movs	r2, #2
 8012a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	2b0c      	cmp	r3, #12
 8012a4a:	d841      	bhi.n	8012ad0 <HAL_TIM_OC_Start_IT+0x18c>
 8012a4c:	a201      	add	r2, pc, #4	; (adr r2, 8012a54 <HAL_TIM_OC_Start_IT+0x110>)
 8012a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a52:	bf00      	nop
 8012a54:	08012a89 	.word	0x08012a89
 8012a58:	08012ad1 	.word	0x08012ad1
 8012a5c:	08012ad1 	.word	0x08012ad1
 8012a60:	08012ad1 	.word	0x08012ad1
 8012a64:	08012a9b 	.word	0x08012a9b
 8012a68:	08012ad1 	.word	0x08012ad1
 8012a6c:	08012ad1 	.word	0x08012ad1
 8012a70:	08012ad1 	.word	0x08012ad1
 8012a74:	08012aad 	.word	0x08012aad
 8012a78:	08012ad1 	.word	0x08012ad1
 8012a7c:	08012ad1 	.word	0x08012ad1
 8012a80:	08012ad1 	.word	0x08012ad1
 8012a84:	08012abf 	.word	0x08012abf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	68da      	ldr	r2, [r3, #12]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	f042 0202 	orr.w	r2, r2, #2
 8012a96:	60da      	str	r2, [r3, #12]
      break;
 8012a98:	e01d      	b.n	8012ad6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	68da      	ldr	r2, [r3, #12]
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	f042 0204 	orr.w	r2, r2, #4
 8012aa8:	60da      	str	r2, [r3, #12]
      break;
 8012aaa:	e014      	b.n	8012ad6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	68da      	ldr	r2, [r3, #12]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f042 0208 	orr.w	r2, r2, #8
 8012aba:	60da      	str	r2, [r3, #12]
      break;
 8012abc:	e00b      	b.n	8012ad6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	68da      	ldr	r2, [r3, #12]
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f042 0210 	orr.w	r2, r2, #16
 8012acc:	60da      	str	r2, [r3, #12]
      break;
 8012ace:	e002      	b.n	8012ad6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8012ad4:	bf00      	nop
  }

  if (status == HAL_OK)
 8012ad6:	7bfb      	ldrb	r3, [r7, #15]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d174      	bne.n	8012bc6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	2201      	movs	r2, #1
 8012ae2:	6839      	ldr	r1, [r7, #0]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f001 f917 	bl	8013d18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	4a38      	ldr	r2, [pc, #224]	; (8012bd0 <HAL_TIM_OC_Start_IT+0x28c>)
 8012af0:	4293      	cmp	r3, r2
 8012af2:	d013      	beq.n	8012b1c <HAL_TIM_OC_Start_IT+0x1d8>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	4a36      	ldr	r2, [pc, #216]	; (8012bd4 <HAL_TIM_OC_Start_IT+0x290>)
 8012afa:	4293      	cmp	r3, r2
 8012afc:	d00e      	beq.n	8012b1c <HAL_TIM_OC_Start_IT+0x1d8>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	4a35      	ldr	r2, [pc, #212]	; (8012bd8 <HAL_TIM_OC_Start_IT+0x294>)
 8012b04:	4293      	cmp	r3, r2
 8012b06:	d009      	beq.n	8012b1c <HAL_TIM_OC_Start_IT+0x1d8>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4a33      	ldr	r2, [pc, #204]	; (8012bdc <HAL_TIM_OC_Start_IT+0x298>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d004      	beq.n	8012b1c <HAL_TIM_OC_Start_IT+0x1d8>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	4a32      	ldr	r2, [pc, #200]	; (8012be0 <HAL_TIM_OC_Start_IT+0x29c>)
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d101      	bne.n	8012b20 <HAL_TIM_OC_Start_IT+0x1dc>
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	e000      	b.n	8012b22 <HAL_TIM_OC_Start_IT+0x1de>
 8012b20:	2300      	movs	r3, #0
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d007      	beq.n	8012b36 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012b34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	4a25      	ldr	r2, [pc, #148]	; (8012bd0 <HAL_TIM_OC_Start_IT+0x28c>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d022      	beq.n	8012b86 <HAL_TIM_OC_Start_IT+0x242>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b48:	d01d      	beq.n	8012b86 <HAL_TIM_OC_Start_IT+0x242>
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4a25      	ldr	r2, [pc, #148]	; (8012be4 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012b50:	4293      	cmp	r3, r2
 8012b52:	d018      	beq.n	8012b86 <HAL_TIM_OC_Start_IT+0x242>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4a23      	ldr	r2, [pc, #140]	; (8012be8 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	d013      	beq.n	8012b86 <HAL_TIM_OC_Start_IT+0x242>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	4a22      	ldr	r2, [pc, #136]	; (8012bec <HAL_TIM_OC_Start_IT+0x2a8>)
 8012b64:	4293      	cmp	r3, r2
 8012b66:	d00e      	beq.n	8012b86 <HAL_TIM_OC_Start_IT+0x242>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a19      	ldr	r2, [pc, #100]	; (8012bd4 <HAL_TIM_OC_Start_IT+0x290>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d009      	beq.n	8012b86 <HAL_TIM_OC_Start_IT+0x242>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	4a1e      	ldr	r2, [pc, #120]	; (8012bf0 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d004      	beq.n	8012b86 <HAL_TIM_OC_Start_IT+0x242>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	4a15      	ldr	r2, [pc, #84]	; (8012bd8 <HAL_TIM_OC_Start_IT+0x294>)
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d115      	bne.n	8012bb2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	689a      	ldr	r2, [r3, #8]
 8012b8c:	4b19      	ldr	r3, [pc, #100]	; (8012bf4 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012b8e:	4013      	ands	r3, r2
 8012b90:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	2b06      	cmp	r3, #6
 8012b96:	d015      	beq.n	8012bc4 <HAL_TIM_OC_Start_IT+0x280>
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b9e:	d011      	beq.n	8012bc4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	681a      	ldr	r2, [r3, #0]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	f042 0201 	orr.w	r2, r2, #1
 8012bae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012bb0:	e008      	b.n	8012bc4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	f042 0201 	orr.w	r2, r2, #1
 8012bc0:	601a      	str	r2, [r3, #0]
 8012bc2:	e000      	b.n	8012bc6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012bc4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3710      	adds	r7, #16
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	40010000 	.word	0x40010000
 8012bd4:	40010400 	.word	0x40010400
 8012bd8:	40014000 	.word	0x40014000
 8012bdc:	40014400 	.word	0x40014400
 8012be0:	40014800 	.word	0x40014800
 8012be4:	40000400 	.word	0x40000400
 8012be8:	40000800 	.word	0x40000800
 8012bec:	40000c00 	.word	0x40000c00
 8012bf0:	40001800 	.word	0x40001800
 8012bf4:	00010007 	.word	0x00010007

08012bf8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012c02:	2300      	movs	r3, #0
 8012c04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	2b0c      	cmp	r3, #12
 8012c0a:	d841      	bhi.n	8012c90 <HAL_TIM_OC_Stop_IT+0x98>
 8012c0c:	a201      	add	r2, pc, #4	; (adr r2, 8012c14 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c12:	bf00      	nop
 8012c14:	08012c49 	.word	0x08012c49
 8012c18:	08012c91 	.word	0x08012c91
 8012c1c:	08012c91 	.word	0x08012c91
 8012c20:	08012c91 	.word	0x08012c91
 8012c24:	08012c5b 	.word	0x08012c5b
 8012c28:	08012c91 	.word	0x08012c91
 8012c2c:	08012c91 	.word	0x08012c91
 8012c30:	08012c91 	.word	0x08012c91
 8012c34:	08012c6d 	.word	0x08012c6d
 8012c38:	08012c91 	.word	0x08012c91
 8012c3c:	08012c91 	.word	0x08012c91
 8012c40:	08012c91 	.word	0x08012c91
 8012c44:	08012c7f 	.word	0x08012c7f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	68da      	ldr	r2, [r3, #12]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	f022 0202 	bic.w	r2, r2, #2
 8012c56:	60da      	str	r2, [r3, #12]
      break;
 8012c58:	e01d      	b.n	8012c96 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	68da      	ldr	r2, [r3, #12]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f022 0204 	bic.w	r2, r2, #4
 8012c68:	60da      	str	r2, [r3, #12]
      break;
 8012c6a:	e014      	b.n	8012c96 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	68da      	ldr	r2, [r3, #12]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f022 0208 	bic.w	r2, r2, #8
 8012c7a:	60da      	str	r2, [r3, #12]
      break;
 8012c7c:	e00b      	b.n	8012c96 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	68da      	ldr	r2, [r3, #12]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f022 0210 	bic.w	r2, r2, #16
 8012c8c:	60da      	str	r2, [r3, #12]
      break;
 8012c8e:	e002      	b.n	8012c96 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012c90:	2301      	movs	r3, #1
 8012c92:	73fb      	strb	r3, [r7, #15]
      break;
 8012c94:	bf00      	nop
  }

  if (status == HAL_OK)
 8012c96:	7bfb      	ldrb	r3, [r7, #15]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	f040 8081 	bne.w	8012da0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	6839      	ldr	r1, [r7, #0]
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f001 f836 	bl	8013d18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	4a3e      	ldr	r2, [pc, #248]	; (8012dac <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012cb2:	4293      	cmp	r3, r2
 8012cb4:	d013      	beq.n	8012cde <HAL_TIM_OC_Stop_IT+0xe6>
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	4a3d      	ldr	r2, [pc, #244]	; (8012db0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d00e      	beq.n	8012cde <HAL_TIM_OC_Stop_IT+0xe6>
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4a3b      	ldr	r2, [pc, #236]	; (8012db4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	d009      	beq.n	8012cde <HAL_TIM_OC_Stop_IT+0xe6>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	4a3a      	ldr	r2, [pc, #232]	; (8012db8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	d004      	beq.n	8012cde <HAL_TIM_OC_Stop_IT+0xe6>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	4a38      	ldr	r2, [pc, #224]	; (8012dbc <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012cda:	4293      	cmp	r3, r2
 8012cdc:	d101      	bne.n	8012ce2 <HAL_TIM_OC_Stop_IT+0xea>
 8012cde:	2301      	movs	r3, #1
 8012ce0:	e000      	b.n	8012ce4 <HAL_TIM_OC_Stop_IT+0xec>
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d017      	beq.n	8012d18 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	6a1a      	ldr	r2, [r3, #32]
 8012cee:	f241 1311 	movw	r3, #4369	; 0x1111
 8012cf2:	4013      	ands	r3, r2
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d10f      	bne.n	8012d18 <HAL_TIM_OC_Stop_IT+0x120>
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	6a1a      	ldr	r2, [r3, #32]
 8012cfe:	f240 4344 	movw	r3, #1092	; 0x444
 8012d02:	4013      	ands	r3, r2
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d107      	bne.n	8012d18 <HAL_TIM_OC_Stop_IT+0x120>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012d16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	6a1a      	ldr	r2, [r3, #32]
 8012d1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8012d22:	4013      	ands	r3, r2
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d10f      	bne.n	8012d48 <HAL_TIM_OC_Stop_IT+0x150>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	6a1a      	ldr	r2, [r3, #32]
 8012d2e:	f240 4344 	movw	r3, #1092	; 0x444
 8012d32:	4013      	ands	r3, r2
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d107      	bne.n	8012d48 <HAL_TIM_OC_Stop_IT+0x150>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	f022 0201 	bic.w	r2, r2, #1
 8012d46:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d104      	bne.n	8012d58 <HAL_TIM_OC_Stop_IT+0x160>
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2201      	movs	r2, #1
 8012d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012d56:	e023      	b.n	8012da0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	2b04      	cmp	r3, #4
 8012d5c:	d104      	bne.n	8012d68 <HAL_TIM_OC_Stop_IT+0x170>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2201      	movs	r2, #1
 8012d62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012d66:	e01b      	b.n	8012da0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	2b08      	cmp	r3, #8
 8012d6c:	d104      	bne.n	8012d78 <HAL_TIM_OC_Stop_IT+0x180>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2201      	movs	r2, #1
 8012d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012d76:	e013      	b.n	8012da0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	2b0c      	cmp	r3, #12
 8012d7c:	d104      	bne.n	8012d88 <HAL_TIM_OC_Stop_IT+0x190>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2201      	movs	r2, #1
 8012d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012d86:	e00b      	b.n	8012da0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	2b10      	cmp	r3, #16
 8012d8c:	d104      	bne.n	8012d98 <HAL_TIM_OC_Stop_IT+0x1a0>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2201      	movs	r2, #1
 8012d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d96:	e003      	b.n	8012da0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3710      	adds	r7, #16
 8012da6:	46bd      	mov	sp, r7
 8012da8:	bd80      	pop	{r7, pc}
 8012daa:	bf00      	nop
 8012dac:	40010000 	.word	0x40010000
 8012db0:	40010400 	.word	0x40010400
 8012db4:	40014000 	.word	0x40014000
 8012db8:	40014400 	.word	0x40014400
 8012dbc:	40014800 	.word	0x40014800

08012dc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d101      	bne.n	8012dd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012dce:	2301      	movs	r3, #1
 8012dd0:	e049      	b.n	8012e66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d106      	bne.n	8012dec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2200      	movs	r2, #0
 8012de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f000 f841 	bl	8012e6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2202      	movs	r2, #2
 8012df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681a      	ldr	r2, [r3, #0]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	3304      	adds	r3, #4
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	4610      	mov	r0, r2
 8012e00:	f000 fb70 	bl	80134e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2201      	movs	r2, #1
 8012e08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2201      	movs	r2, #1
 8012e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2201      	movs	r2, #1
 8012e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2201      	movs	r2, #1
 8012e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2201      	movs	r2, #1
 8012e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2201      	movs	r2, #1
 8012e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2201      	movs	r2, #1
 8012e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2201      	movs	r2, #1
 8012e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2201      	movs	r2, #1
 8012e58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2201      	movs	r2, #1
 8012e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012e64:	2300      	movs	r3, #0
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3708      	adds	r7, #8
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012e6e:	b480      	push	{r7}
 8012e70:	b083      	sub	sp, #12
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012e76:	bf00      	nop
 8012e78:	370c      	adds	r7, #12
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr

08012e82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012e82:	b580      	push	{r7, lr}
 8012e84:	b084      	sub	sp, #16
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	68db      	ldr	r3, [r3, #12]
 8012e90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	691b      	ldr	r3, [r3, #16]
 8012e98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	f003 0302 	and.w	r3, r3, #2
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d020      	beq.n	8012ee6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f003 0302 	and.w	r3, r3, #2
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d01b      	beq.n	8012ee6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	f06f 0202 	mvn.w	r2, #2
 8012eb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2201      	movs	r2, #1
 8012ebc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	699b      	ldr	r3, [r3, #24]
 8012ec4:	f003 0303 	and.w	r3, r3, #3
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d003      	beq.n	8012ed4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f000 faeb 	bl	80134a8 <HAL_TIM_IC_CaptureCallback>
 8012ed2:	e005      	b.n	8012ee0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f7ef fe1d 	bl	8002b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f000 faee 	bl	80134bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	f003 0304 	and.w	r3, r3, #4
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d020      	beq.n	8012f32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f003 0304 	and.w	r3, r3, #4
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d01b      	beq.n	8012f32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	f06f 0204 	mvn.w	r2, #4
 8012f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2202      	movs	r2, #2
 8012f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	699b      	ldr	r3, [r3, #24]
 8012f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d003      	beq.n	8012f20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f000 fac5 	bl	80134a8 <HAL_TIM_IC_CaptureCallback>
 8012f1e:	e005      	b.n	8012f2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f7ef fdf7 	bl	8002b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f000 fac8 	bl	80134bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	f003 0308 	and.w	r3, r3, #8
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d020      	beq.n	8012f7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f003 0308 	and.w	r3, r3, #8
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d01b      	beq.n	8012f7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	f06f 0208 	mvn.w	r2, #8
 8012f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2204      	movs	r2, #4
 8012f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	69db      	ldr	r3, [r3, #28]
 8012f5c:	f003 0303 	and.w	r3, r3, #3
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d003      	beq.n	8012f6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f000 fa9f 	bl	80134a8 <HAL_TIM_IC_CaptureCallback>
 8012f6a:	e005      	b.n	8012f78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ef fdd1 	bl	8002b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f000 faa2 	bl	80134bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	f003 0310 	and.w	r3, r3, #16
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d020      	beq.n	8012fca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	f003 0310 	and.w	r3, r3, #16
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d01b      	beq.n	8012fca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	f06f 0210 	mvn.w	r2, #16
 8012f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2208      	movs	r2, #8
 8012fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	69db      	ldr	r3, [r3, #28]
 8012fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d003      	beq.n	8012fb8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f000 fa79 	bl	80134a8 <HAL_TIM_IC_CaptureCallback>
 8012fb6:	e005      	b.n	8012fc4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f7ef fdab 	bl	8002b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f000 fa7c 	bl	80134bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	f003 0301 	and.w	r3, r3, #1
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d00c      	beq.n	8012fee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	f003 0301 	and.w	r3, r3, #1
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d007      	beq.n	8012fee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f06f 0201 	mvn.w	r2, #1
 8012fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f7f0 fcdb 	bl	80039a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d104      	bne.n	8013002 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d00c      	beq.n	801301c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013008:	2b00      	cmp	r3, #0
 801300a:	d007      	beq.n	801301c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8013014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f000 ffba 	bl	8013f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801301c:	68bb      	ldr	r3, [r7, #8]
 801301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013022:	2b00      	cmp	r3, #0
 8013024:	d00c      	beq.n	8013040 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801302c:	2b00      	cmp	r3, #0
 801302e:	d007      	beq.n	8013040 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 ffb2 	bl	8013fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013046:	2b00      	cmp	r3, #0
 8013048:	d00c      	beq.n	8013064 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013050:	2b00      	cmp	r3, #0
 8013052:	d007      	beq.n	8013064 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fa36 	bl	80134d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	f003 0320 	and.w	r3, r3, #32
 801306a:	2b00      	cmp	r3, #0
 801306c:	d00c      	beq.n	8013088 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	f003 0320 	and.w	r3, r3, #32
 8013074:	2b00      	cmp	r3, #0
 8013076:	d007      	beq.n	8013088 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	f06f 0220 	mvn.w	r2, #32
 8013080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 ff7a 	bl	8013f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013088:	bf00      	nop
 801308a:	3710      	adds	r7, #16
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801309c:	2300      	movs	r3, #0
 801309e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80130a6:	2b01      	cmp	r3, #1
 80130a8:	d101      	bne.n	80130ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80130aa:	2302      	movs	r3, #2
 80130ac:	e0ff      	b.n	80132ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2201      	movs	r2, #1
 80130b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2b14      	cmp	r3, #20
 80130ba:	f200 80f0 	bhi.w	801329e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80130be:	a201      	add	r2, pc, #4	; (adr r2, 80130c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80130c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130c4:	08013119 	.word	0x08013119
 80130c8:	0801329f 	.word	0x0801329f
 80130cc:	0801329f 	.word	0x0801329f
 80130d0:	0801329f 	.word	0x0801329f
 80130d4:	08013159 	.word	0x08013159
 80130d8:	0801329f 	.word	0x0801329f
 80130dc:	0801329f 	.word	0x0801329f
 80130e0:	0801329f 	.word	0x0801329f
 80130e4:	0801319b 	.word	0x0801319b
 80130e8:	0801329f 	.word	0x0801329f
 80130ec:	0801329f 	.word	0x0801329f
 80130f0:	0801329f 	.word	0x0801329f
 80130f4:	080131db 	.word	0x080131db
 80130f8:	0801329f 	.word	0x0801329f
 80130fc:	0801329f 	.word	0x0801329f
 8013100:	0801329f 	.word	0x0801329f
 8013104:	0801321d 	.word	0x0801321d
 8013108:	0801329f 	.word	0x0801329f
 801310c:	0801329f 	.word	0x0801329f
 8013110:	0801329f 	.word	0x0801329f
 8013114:	0801325d 	.word	0x0801325d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	68b9      	ldr	r1, [r7, #8]
 801311e:	4618      	mov	r0, r3
 8013120:	f000 fa86 	bl	8013630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	699a      	ldr	r2, [r3, #24]
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f042 0208 	orr.w	r2, r2, #8
 8013132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	699a      	ldr	r2, [r3, #24]
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f022 0204 	bic.w	r2, r2, #4
 8013142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	6999      	ldr	r1, [r3, #24]
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	691a      	ldr	r2, [r3, #16]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	430a      	orrs	r2, r1
 8013154:	619a      	str	r2, [r3, #24]
      break;
 8013156:	e0a5      	b.n	80132a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68b9      	ldr	r1, [r7, #8]
 801315e:	4618      	mov	r0, r3
 8013160:	f000 faf6 	bl	8013750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	699a      	ldr	r2, [r3, #24]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	699a      	ldr	r2, [r3, #24]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	6999      	ldr	r1, [r3, #24]
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	691b      	ldr	r3, [r3, #16]
 801318e:	021a      	lsls	r2, r3, #8
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	430a      	orrs	r2, r1
 8013196:	619a      	str	r2, [r3, #24]
      break;
 8013198:	e084      	b.n	80132a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	68b9      	ldr	r1, [r7, #8]
 80131a0:	4618      	mov	r0, r3
 80131a2:	f000 fb5f 	bl	8013864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	69da      	ldr	r2, [r3, #28]
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	f042 0208 	orr.w	r2, r2, #8
 80131b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	69da      	ldr	r2, [r3, #28]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	f022 0204 	bic.w	r2, r2, #4
 80131c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	69d9      	ldr	r1, [r3, #28]
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	691a      	ldr	r2, [r3, #16]
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	430a      	orrs	r2, r1
 80131d6:	61da      	str	r2, [r3, #28]
      break;
 80131d8:	e064      	b.n	80132a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	68b9      	ldr	r1, [r7, #8]
 80131e0:	4618      	mov	r0, r3
 80131e2:	f000 fbc7 	bl	8013974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	69da      	ldr	r2, [r3, #28]
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80131f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	69da      	ldr	r2, [r3, #28]
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	69d9      	ldr	r1, [r3, #28]
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	691b      	ldr	r3, [r3, #16]
 8013210:	021a      	lsls	r2, r3, #8
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	430a      	orrs	r2, r1
 8013218:	61da      	str	r2, [r3, #28]
      break;
 801321a:	e043      	b.n	80132a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	68b9      	ldr	r1, [r7, #8]
 8013222:	4618      	mov	r0, r3
 8013224:	f000 fc10 	bl	8013a48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	f042 0208 	orr.w	r2, r2, #8
 8013236:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	f022 0204 	bic.w	r2, r2, #4
 8013246:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	691a      	ldr	r2, [r3, #16]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	430a      	orrs	r2, r1
 8013258:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801325a:	e023      	b.n	80132a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	68b9      	ldr	r1, [r7, #8]
 8013262:	4618      	mov	r0, r3
 8013264:	f000 fc54 	bl	8013b10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013286:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	691b      	ldr	r3, [r3, #16]
 8013292:	021a      	lsls	r2, r3, #8
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	430a      	orrs	r2, r1
 801329a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801329c:	e002      	b.n	80132a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801329e:	2301      	movs	r3, #1
 80132a0:	75fb      	strb	r3, [r7, #23]
      break;
 80132a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2200      	movs	r2, #0
 80132a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80132ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3718      	adds	r7, #24
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop

080132b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b084      	sub	sp, #16
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
 80132c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80132c2:	2300      	movs	r3, #0
 80132c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d101      	bne.n	80132d4 <HAL_TIM_ConfigClockSource+0x1c>
 80132d0:	2302      	movs	r3, #2
 80132d2:	e0dc      	b.n	801348e <HAL_TIM_ConfigClockSource+0x1d6>
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2201      	movs	r2, #1
 80132d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2202      	movs	r2, #2
 80132e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	689b      	ldr	r3, [r3, #8]
 80132ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80132ec:	68ba      	ldr	r2, [r7, #8]
 80132ee:	4b6a      	ldr	r3, [pc, #424]	; (8013498 <HAL_TIM_ConfigClockSource+0x1e0>)
 80132f0:	4013      	ands	r3, r2
 80132f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80132fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	68ba      	ldr	r2, [r7, #8]
 8013302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	4a64      	ldr	r2, [pc, #400]	; (801349c <HAL_TIM_ConfigClockSource+0x1e4>)
 801330a:	4293      	cmp	r3, r2
 801330c:	f000 80a9 	beq.w	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 8013310:	4a62      	ldr	r2, [pc, #392]	; (801349c <HAL_TIM_ConfigClockSource+0x1e4>)
 8013312:	4293      	cmp	r3, r2
 8013314:	f200 80ae 	bhi.w	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013318:	4a61      	ldr	r2, [pc, #388]	; (80134a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801331a:	4293      	cmp	r3, r2
 801331c:	f000 80a1 	beq.w	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 8013320:	4a5f      	ldr	r2, [pc, #380]	; (80134a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013322:	4293      	cmp	r3, r2
 8013324:	f200 80a6 	bhi.w	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013328:	4a5e      	ldr	r2, [pc, #376]	; (80134a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801332a:	4293      	cmp	r3, r2
 801332c:	f000 8099 	beq.w	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 8013330:	4a5c      	ldr	r2, [pc, #368]	; (80134a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013332:	4293      	cmp	r3, r2
 8013334:	f200 809e 	bhi.w	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013338:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801333c:	f000 8091 	beq.w	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 8013340:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013344:	f200 8096 	bhi.w	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801334c:	f000 8089 	beq.w	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 8013350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013354:	f200 808e 	bhi.w	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801335c:	d03e      	beq.n	80133dc <HAL_TIM_ConfigClockSource+0x124>
 801335e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013362:	f200 8087 	bhi.w	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801336a:	f000 8086 	beq.w	801347a <HAL_TIM_ConfigClockSource+0x1c2>
 801336e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013372:	d87f      	bhi.n	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013374:	2b70      	cmp	r3, #112	; 0x70
 8013376:	d01a      	beq.n	80133ae <HAL_TIM_ConfigClockSource+0xf6>
 8013378:	2b70      	cmp	r3, #112	; 0x70
 801337a:	d87b      	bhi.n	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 801337c:	2b60      	cmp	r3, #96	; 0x60
 801337e:	d050      	beq.n	8013422 <HAL_TIM_ConfigClockSource+0x16a>
 8013380:	2b60      	cmp	r3, #96	; 0x60
 8013382:	d877      	bhi.n	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013384:	2b50      	cmp	r3, #80	; 0x50
 8013386:	d03c      	beq.n	8013402 <HAL_TIM_ConfigClockSource+0x14a>
 8013388:	2b50      	cmp	r3, #80	; 0x50
 801338a:	d873      	bhi.n	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 801338c:	2b40      	cmp	r3, #64	; 0x40
 801338e:	d058      	beq.n	8013442 <HAL_TIM_ConfigClockSource+0x18a>
 8013390:	2b40      	cmp	r3, #64	; 0x40
 8013392:	d86f      	bhi.n	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 8013394:	2b30      	cmp	r3, #48	; 0x30
 8013396:	d064      	beq.n	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 8013398:	2b30      	cmp	r3, #48	; 0x30
 801339a:	d86b      	bhi.n	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 801339c:	2b20      	cmp	r3, #32
 801339e:	d060      	beq.n	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 80133a0:	2b20      	cmp	r3, #32
 80133a2:	d867      	bhi.n	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d05c      	beq.n	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 80133a8:	2b10      	cmp	r3, #16
 80133aa:	d05a      	beq.n	8013462 <HAL_TIM_ConfigClockSource+0x1aa>
 80133ac:	e062      	b.n	8013474 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6818      	ldr	r0, [r3, #0]
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	6899      	ldr	r1, [r3, #8]
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	685a      	ldr	r2, [r3, #4]
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	68db      	ldr	r3, [r3, #12]
 80133be:	f000 fc8b 	bl	8013cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	689b      	ldr	r3, [r3, #8]
 80133c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80133d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	68ba      	ldr	r2, [r7, #8]
 80133d8:	609a      	str	r2, [r3, #8]
      break;
 80133da:	e04f      	b.n	801347c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6818      	ldr	r0, [r3, #0]
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	6899      	ldr	r1, [r3, #8]
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	685a      	ldr	r2, [r3, #4]
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	68db      	ldr	r3, [r3, #12]
 80133ec:	f000 fc74 	bl	8013cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	689a      	ldr	r2, [r3, #8]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80133fe:	609a      	str	r2, [r3, #8]
      break;
 8013400:	e03c      	b.n	801347c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6818      	ldr	r0, [r3, #0]
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	6859      	ldr	r1, [r3, #4]
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	461a      	mov	r2, r3
 8013410:	f000 fbe4 	bl	8013bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	2150      	movs	r1, #80	; 0x50
 801341a:	4618      	mov	r0, r3
 801341c:	f000 fc3e 	bl	8013c9c <TIM_ITRx_SetConfig>
      break;
 8013420:	e02c      	b.n	801347c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6818      	ldr	r0, [r3, #0]
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	6859      	ldr	r1, [r3, #4]
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	461a      	mov	r2, r3
 8013430:	f000 fc03 	bl	8013c3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	2160      	movs	r1, #96	; 0x60
 801343a:	4618      	mov	r0, r3
 801343c:	f000 fc2e 	bl	8013c9c <TIM_ITRx_SetConfig>
      break;
 8013440:	e01c      	b.n	801347c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6818      	ldr	r0, [r3, #0]
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	6859      	ldr	r1, [r3, #4]
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	68db      	ldr	r3, [r3, #12]
 801344e:	461a      	mov	r2, r3
 8013450:	f000 fbc4 	bl	8013bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	2140      	movs	r1, #64	; 0x40
 801345a:	4618      	mov	r0, r3
 801345c:	f000 fc1e 	bl	8013c9c <TIM_ITRx_SetConfig>
      break;
 8013460:	e00c      	b.n	801347c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	4619      	mov	r1, r3
 801346c:	4610      	mov	r0, r2
 801346e:	f000 fc15 	bl	8013c9c <TIM_ITRx_SetConfig>
      break;
 8013472:	e003      	b.n	801347c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013474:	2301      	movs	r3, #1
 8013476:	73fb      	strb	r3, [r7, #15]
      break;
 8013478:	e000      	b.n	801347c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801347a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2201      	movs	r2, #1
 8013480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2200      	movs	r2, #0
 8013488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801348c:	7bfb      	ldrb	r3, [r7, #15]
}
 801348e:	4618      	mov	r0, r3
 8013490:	3710      	adds	r7, #16
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	ffceff88 	.word	0xffceff88
 801349c:	00100040 	.word	0x00100040
 80134a0:	00100030 	.word	0x00100030
 80134a4:	00100020 	.word	0x00100020

080134a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80134b0:	bf00      	nop
 80134b2:	370c      	adds	r7, #12
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr

080134bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80134bc:	b480      	push	{r7}
 80134be:	b083      	sub	sp, #12
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80134c4:	bf00      	nop
 80134c6:	370c      	adds	r7, #12
 80134c8:	46bd      	mov	sp, r7
 80134ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ce:	4770      	bx	lr

080134d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80134d8:	bf00      	nop
 80134da:	370c      	adds	r7, #12
 80134dc:	46bd      	mov	sp, r7
 80134de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e2:	4770      	bx	lr

080134e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b085      	sub	sp, #20
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	4a46      	ldr	r2, [pc, #280]	; (8013610 <TIM_Base_SetConfig+0x12c>)
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d013      	beq.n	8013524 <TIM_Base_SetConfig+0x40>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013502:	d00f      	beq.n	8013524 <TIM_Base_SetConfig+0x40>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	4a43      	ldr	r2, [pc, #268]	; (8013614 <TIM_Base_SetConfig+0x130>)
 8013508:	4293      	cmp	r3, r2
 801350a:	d00b      	beq.n	8013524 <TIM_Base_SetConfig+0x40>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	4a42      	ldr	r2, [pc, #264]	; (8013618 <TIM_Base_SetConfig+0x134>)
 8013510:	4293      	cmp	r3, r2
 8013512:	d007      	beq.n	8013524 <TIM_Base_SetConfig+0x40>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	4a41      	ldr	r2, [pc, #260]	; (801361c <TIM_Base_SetConfig+0x138>)
 8013518:	4293      	cmp	r3, r2
 801351a:	d003      	beq.n	8013524 <TIM_Base_SetConfig+0x40>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	4a40      	ldr	r2, [pc, #256]	; (8013620 <TIM_Base_SetConfig+0x13c>)
 8013520:	4293      	cmp	r3, r2
 8013522:	d108      	bne.n	8013536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801352a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	68fa      	ldr	r2, [r7, #12]
 8013532:	4313      	orrs	r3, r2
 8013534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	4a35      	ldr	r2, [pc, #212]	; (8013610 <TIM_Base_SetConfig+0x12c>)
 801353a:	4293      	cmp	r3, r2
 801353c:	d01f      	beq.n	801357e <TIM_Base_SetConfig+0x9a>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013544:	d01b      	beq.n	801357e <TIM_Base_SetConfig+0x9a>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	4a32      	ldr	r2, [pc, #200]	; (8013614 <TIM_Base_SetConfig+0x130>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d017      	beq.n	801357e <TIM_Base_SetConfig+0x9a>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	4a31      	ldr	r2, [pc, #196]	; (8013618 <TIM_Base_SetConfig+0x134>)
 8013552:	4293      	cmp	r3, r2
 8013554:	d013      	beq.n	801357e <TIM_Base_SetConfig+0x9a>
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	4a30      	ldr	r2, [pc, #192]	; (801361c <TIM_Base_SetConfig+0x138>)
 801355a:	4293      	cmp	r3, r2
 801355c:	d00f      	beq.n	801357e <TIM_Base_SetConfig+0x9a>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	4a2f      	ldr	r2, [pc, #188]	; (8013620 <TIM_Base_SetConfig+0x13c>)
 8013562:	4293      	cmp	r3, r2
 8013564:	d00b      	beq.n	801357e <TIM_Base_SetConfig+0x9a>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	4a2e      	ldr	r2, [pc, #184]	; (8013624 <TIM_Base_SetConfig+0x140>)
 801356a:	4293      	cmp	r3, r2
 801356c:	d007      	beq.n	801357e <TIM_Base_SetConfig+0x9a>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4a2d      	ldr	r2, [pc, #180]	; (8013628 <TIM_Base_SetConfig+0x144>)
 8013572:	4293      	cmp	r3, r2
 8013574:	d003      	beq.n	801357e <TIM_Base_SetConfig+0x9a>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	4a2c      	ldr	r2, [pc, #176]	; (801362c <TIM_Base_SetConfig+0x148>)
 801357a:	4293      	cmp	r3, r2
 801357c:	d108      	bne.n	8013590 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	68db      	ldr	r3, [r3, #12]
 801358a:	68fa      	ldr	r2, [r7, #12]
 801358c:	4313      	orrs	r3, r2
 801358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	695b      	ldr	r3, [r3, #20]
 801359a:	4313      	orrs	r3, r2
 801359c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	68fa      	ldr	r2, [r7, #12]
 80135a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	689a      	ldr	r2, [r3, #8]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	4a16      	ldr	r2, [pc, #88]	; (8013610 <TIM_Base_SetConfig+0x12c>)
 80135b8:	4293      	cmp	r3, r2
 80135ba:	d00f      	beq.n	80135dc <TIM_Base_SetConfig+0xf8>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	4a18      	ldr	r2, [pc, #96]	; (8013620 <TIM_Base_SetConfig+0x13c>)
 80135c0:	4293      	cmp	r3, r2
 80135c2:	d00b      	beq.n	80135dc <TIM_Base_SetConfig+0xf8>
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	4a17      	ldr	r2, [pc, #92]	; (8013624 <TIM_Base_SetConfig+0x140>)
 80135c8:	4293      	cmp	r3, r2
 80135ca:	d007      	beq.n	80135dc <TIM_Base_SetConfig+0xf8>
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	4a16      	ldr	r2, [pc, #88]	; (8013628 <TIM_Base_SetConfig+0x144>)
 80135d0:	4293      	cmp	r3, r2
 80135d2:	d003      	beq.n	80135dc <TIM_Base_SetConfig+0xf8>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	4a15      	ldr	r2, [pc, #84]	; (801362c <TIM_Base_SetConfig+0x148>)
 80135d8:	4293      	cmp	r3, r2
 80135da:	d103      	bne.n	80135e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	691a      	ldr	r2, [r3, #16]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2201      	movs	r2, #1
 80135e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	691b      	ldr	r3, [r3, #16]
 80135ee:	f003 0301 	and.w	r3, r3, #1
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	d105      	bne.n	8013602 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	691b      	ldr	r3, [r3, #16]
 80135fa:	f023 0201 	bic.w	r2, r3, #1
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	611a      	str	r2, [r3, #16]
  }
}
 8013602:	bf00      	nop
 8013604:	3714      	adds	r7, #20
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr
 801360e:	bf00      	nop
 8013610:	40010000 	.word	0x40010000
 8013614:	40000400 	.word	0x40000400
 8013618:	40000800 	.word	0x40000800
 801361c:	40000c00 	.word	0x40000c00
 8013620:	40010400 	.word	0x40010400
 8013624:	40014000 	.word	0x40014000
 8013628:	40014400 	.word	0x40014400
 801362c:	40014800 	.word	0x40014800

08013630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013630:	b480      	push	{r7}
 8013632:	b087      	sub	sp, #28
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6a1b      	ldr	r3, [r3, #32]
 801363e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6a1b      	ldr	r3, [r3, #32]
 8013644:	f023 0201 	bic.w	r2, r3, #1
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	699b      	ldr	r3, [r3, #24]
 8013656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013658:	68fa      	ldr	r2, [r7, #12]
 801365a:	4b37      	ldr	r3, [pc, #220]	; (8013738 <TIM_OC1_SetConfig+0x108>)
 801365c:	4013      	ands	r3, r2
 801365e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f023 0303 	bic.w	r3, r3, #3
 8013666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	68fa      	ldr	r2, [r7, #12]
 801366e:	4313      	orrs	r3, r2
 8013670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	f023 0302 	bic.w	r3, r3, #2
 8013678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	689b      	ldr	r3, [r3, #8]
 801367e:	697a      	ldr	r2, [r7, #20]
 8013680:	4313      	orrs	r3, r2
 8013682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	4a2d      	ldr	r2, [pc, #180]	; (801373c <TIM_OC1_SetConfig+0x10c>)
 8013688:	4293      	cmp	r3, r2
 801368a:	d00f      	beq.n	80136ac <TIM_OC1_SetConfig+0x7c>
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	4a2c      	ldr	r2, [pc, #176]	; (8013740 <TIM_OC1_SetConfig+0x110>)
 8013690:	4293      	cmp	r3, r2
 8013692:	d00b      	beq.n	80136ac <TIM_OC1_SetConfig+0x7c>
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	4a2b      	ldr	r2, [pc, #172]	; (8013744 <TIM_OC1_SetConfig+0x114>)
 8013698:	4293      	cmp	r3, r2
 801369a:	d007      	beq.n	80136ac <TIM_OC1_SetConfig+0x7c>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	4a2a      	ldr	r2, [pc, #168]	; (8013748 <TIM_OC1_SetConfig+0x118>)
 80136a0:	4293      	cmp	r3, r2
 80136a2:	d003      	beq.n	80136ac <TIM_OC1_SetConfig+0x7c>
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	4a29      	ldr	r2, [pc, #164]	; (801374c <TIM_OC1_SetConfig+0x11c>)
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d10c      	bne.n	80136c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	f023 0308 	bic.w	r3, r3, #8
 80136b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80136b4:	683b      	ldr	r3, [r7, #0]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	697a      	ldr	r2, [r7, #20]
 80136ba:	4313      	orrs	r3, r2
 80136bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	f023 0304 	bic.w	r3, r3, #4
 80136c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4a1c      	ldr	r2, [pc, #112]	; (801373c <TIM_OC1_SetConfig+0x10c>)
 80136ca:	4293      	cmp	r3, r2
 80136cc:	d00f      	beq.n	80136ee <TIM_OC1_SetConfig+0xbe>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4a1b      	ldr	r2, [pc, #108]	; (8013740 <TIM_OC1_SetConfig+0x110>)
 80136d2:	4293      	cmp	r3, r2
 80136d4:	d00b      	beq.n	80136ee <TIM_OC1_SetConfig+0xbe>
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4a1a      	ldr	r2, [pc, #104]	; (8013744 <TIM_OC1_SetConfig+0x114>)
 80136da:	4293      	cmp	r3, r2
 80136dc:	d007      	beq.n	80136ee <TIM_OC1_SetConfig+0xbe>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4a19      	ldr	r2, [pc, #100]	; (8013748 <TIM_OC1_SetConfig+0x118>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d003      	beq.n	80136ee <TIM_OC1_SetConfig+0xbe>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	4a18      	ldr	r2, [pc, #96]	; (801374c <TIM_OC1_SetConfig+0x11c>)
 80136ea:	4293      	cmp	r3, r2
 80136ec:	d111      	bne.n	8013712 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80136f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80136f6:	693b      	ldr	r3, [r7, #16]
 80136f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80136fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	695b      	ldr	r3, [r3, #20]
 8013702:	693a      	ldr	r2, [r7, #16]
 8013704:	4313      	orrs	r3, r2
 8013706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	699b      	ldr	r3, [r3, #24]
 801370c:	693a      	ldr	r2, [r7, #16]
 801370e:	4313      	orrs	r3, r2
 8013710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	693a      	ldr	r2, [r7, #16]
 8013716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	68fa      	ldr	r2, [r7, #12]
 801371c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	685a      	ldr	r2, [r3, #4]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	697a      	ldr	r2, [r7, #20]
 801372a:	621a      	str	r2, [r3, #32]
}
 801372c:	bf00      	nop
 801372e:	371c      	adds	r7, #28
 8013730:	46bd      	mov	sp, r7
 8013732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013736:	4770      	bx	lr
 8013738:	fffeff8f 	.word	0xfffeff8f
 801373c:	40010000 	.word	0x40010000
 8013740:	40010400 	.word	0x40010400
 8013744:	40014000 	.word	0x40014000
 8013748:	40014400 	.word	0x40014400
 801374c:	40014800 	.word	0x40014800

08013750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013750:	b480      	push	{r7}
 8013752:	b087      	sub	sp, #28
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6a1b      	ldr	r3, [r3, #32]
 801375e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6a1b      	ldr	r3, [r3, #32]
 8013764:	f023 0210 	bic.w	r2, r3, #16
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	699b      	ldr	r3, [r3, #24]
 8013776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013778:	68fa      	ldr	r2, [r7, #12]
 801377a:	4b34      	ldr	r3, [pc, #208]	; (801384c <TIM_OC2_SetConfig+0xfc>)
 801377c:	4013      	ands	r3, r2
 801377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	021b      	lsls	r3, r3, #8
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	4313      	orrs	r3, r2
 8013792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	f023 0320 	bic.w	r3, r3, #32
 801379a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	689b      	ldr	r3, [r3, #8]
 80137a0:	011b      	lsls	r3, r3, #4
 80137a2:	697a      	ldr	r2, [r7, #20]
 80137a4:	4313      	orrs	r3, r2
 80137a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	4a29      	ldr	r2, [pc, #164]	; (8013850 <TIM_OC2_SetConfig+0x100>)
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d003      	beq.n	80137b8 <TIM_OC2_SetConfig+0x68>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	4a28      	ldr	r2, [pc, #160]	; (8013854 <TIM_OC2_SetConfig+0x104>)
 80137b4:	4293      	cmp	r3, r2
 80137b6:	d10d      	bne.n	80137d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80137be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	011b      	lsls	r3, r3, #4
 80137c6:	697a      	ldr	r2, [r7, #20]
 80137c8:	4313      	orrs	r3, r2
 80137ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80137d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	4a1e      	ldr	r2, [pc, #120]	; (8013850 <TIM_OC2_SetConfig+0x100>)
 80137d8:	4293      	cmp	r3, r2
 80137da:	d00f      	beq.n	80137fc <TIM_OC2_SetConfig+0xac>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	4a1d      	ldr	r2, [pc, #116]	; (8013854 <TIM_OC2_SetConfig+0x104>)
 80137e0:	4293      	cmp	r3, r2
 80137e2:	d00b      	beq.n	80137fc <TIM_OC2_SetConfig+0xac>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4a1c      	ldr	r2, [pc, #112]	; (8013858 <TIM_OC2_SetConfig+0x108>)
 80137e8:	4293      	cmp	r3, r2
 80137ea:	d007      	beq.n	80137fc <TIM_OC2_SetConfig+0xac>
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	4a1b      	ldr	r2, [pc, #108]	; (801385c <TIM_OC2_SetConfig+0x10c>)
 80137f0:	4293      	cmp	r3, r2
 80137f2:	d003      	beq.n	80137fc <TIM_OC2_SetConfig+0xac>
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	4a1a      	ldr	r2, [pc, #104]	; (8013860 <TIM_OC2_SetConfig+0x110>)
 80137f8:	4293      	cmp	r3, r2
 80137fa:	d113      	bne.n	8013824 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801380a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	695b      	ldr	r3, [r3, #20]
 8013810:	009b      	lsls	r3, r3, #2
 8013812:	693a      	ldr	r2, [r7, #16]
 8013814:	4313      	orrs	r3, r2
 8013816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	699b      	ldr	r3, [r3, #24]
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	693a      	ldr	r2, [r7, #16]
 8013820:	4313      	orrs	r3, r2
 8013822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	693a      	ldr	r2, [r7, #16]
 8013828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	685a      	ldr	r2, [r3, #4]
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	697a      	ldr	r2, [r7, #20]
 801383c:	621a      	str	r2, [r3, #32]
}
 801383e:	bf00      	nop
 8013840:	371c      	adds	r7, #28
 8013842:	46bd      	mov	sp, r7
 8013844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013848:	4770      	bx	lr
 801384a:	bf00      	nop
 801384c:	feff8fff 	.word	0xfeff8fff
 8013850:	40010000 	.word	0x40010000
 8013854:	40010400 	.word	0x40010400
 8013858:	40014000 	.word	0x40014000
 801385c:	40014400 	.word	0x40014400
 8013860:	40014800 	.word	0x40014800

08013864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013864:	b480      	push	{r7}
 8013866:	b087      	sub	sp, #28
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6a1b      	ldr	r3, [r3, #32]
 8013872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	6a1b      	ldr	r3, [r3, #32]
 8013878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	69db      	ldr	r3, [r3, #28]
 801388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801388c:	68fa      	ldr	r2, [r7, #12]
 801388e:	4b33      	ldr	r3, [pc, #204]	; (801395c <TIM_OC3_SetConfig+0xf8>)
 8013890:	4013      	ands	r3, r2
 8013892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f023 0303 	bic.w	r3, r3, #3
 801389a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	68fa      	ldr	r2, [r7, #12]
 80138a2:	4313      	orrs	r3, r2
 80138a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80138ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	021b      	lsls	r3, r3, #8
 80138b4:	697a      	ldr	r2, [r7, #20]
 80138b6:	4313      	orrs	r3, r2
 80138b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4a28      	ldr	r2, [pc, #160]	; (8013960 <TIM_OC3_SetConfig+0xfc>)
 80138be:	4293      	cmp	r3, r2
 80138c0:	d003      	beq.n	80138ca <TIM_OC3_SetConfig+0x66>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	4a27      	ldr	r2, [pc, #156]	; (8013964 <TIM_OC3_SetConfig+0x100>)
 80138c6:	4293      	cmp	r3, r2
 80138c8:	d10d      	bne.n	80138e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80138d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	68db      	ldr	r3, [r3, #12]
 80138d6:	021b      	lsls	r3, r3, #8
 80138d8:	697a      	ldr	r2, [r7, #20]
 80138da:	4313      	orrs	r3, r2
 80138dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80138e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	4a1d      	ldr	r2, [pc, #116]	; (8013960 <TIM_OC3_SetConfig+0xfc>)
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d00f      	beq.n	801390e <TIM_OC3_SetConfig+0xaa>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	4a1c      	ldr	r2, [pc, #112]	; (8013964 <TIM_OC3_SetConfig+0x100>)
 80138f2:	4293      	cmp	r3, r2
 80138f4:	d00b      	beq.n	801390e <TIM_OC3_SetConfig+0xaa>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	4a1b      	ldr	r2, [pc, #108]	; (8013968 <TIM_OC3_SetConfig+0x104>)
 80138fa:	4293      	cmp	r3, r2
 80138fc:	d007      	beq.n	801390e <TIM_OC3_SetConfig+0xaa>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	4a1a      	ldr	r2, [pc, #104]	; (801396c <TIM_OC3_SetConfig+0x108>)
 8013902:	4293      	cmp	r3, r2
 8013904:	d003      	beq.n	801390e <TIM_OC3_SetConfig+0xaa>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	4a19      	ldr	r2, [pc, #100]	; (8013970 <TIM_OC3_SetConfig+0x10c>)
 801390a:	4293      	cmp	r3, r2
 801390c:	d113      	bne.n	8013936 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801391c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	695b      	ldr	r3, [r3, #20]
 8013922:	011b      	lsls	r3, r3, #4
 8013924:	693a      	ldr	r2, [r7, #16]
 8013926:	4313      	orrs	r3, r2
 8013928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	699b      	ldr	r3, [r3, #24]
 801392e:	011b      	lsls	r3, r3, #4
 8013930:	693a      	ldr	r2, [r7, #16]
 8013932:	4313      	orrs	r3, r2
 8013934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	693a      	ldr	r2, [r7, #16]
 801393a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	685a      	ldr	r2, [r3, #4]
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	697a      	ldr	r2, [r7, #20]
 801394e:	621a      	str	r2, [r3, #32]
}
 8013950:	bf00      	nop
 8013952:	371c      	adds	r7, #28
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr
 801395c:	fffeff8f 	.word	0xfffeff8f
 8013960:	40010000 	.word	0x40010000
 8013964:	40010400 	.word	0x40010400
 8013968:	40014000 	.word	0x40014000
 801396c:	40014400 	.word	0x40014400
 8013970:	40014800 	.word	0x40014800

08013974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013974:	b480      	push	{r7}
 8013976:	b087      	sub	sp, #28
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	6a1b      	ldr	r3, [r3, #32]
 8013982:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6a1b      	ldr	r3, [r3, #32]
 8013988:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	69db      	ldr	r3, [r3, #28]
 801399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801399c:	68fa      	ldr	r2, [r7, #12]
 801399e:	4b24      	ldr	r3, [pc, #144]	; (8013a30 <TIM_OC4_SetConfig+0xbc>)
 80139a0:	4013      	ands	r3, r2
 80139a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80139aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	021b      	lsls	r3, r3, #8
 80139b2:	68fa      	ldr	r2, [r7, #12]
 80139b4:	4313      	orrs	r3, r2
 80139b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80139be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	689b      	ldr	r3, [r3, #8]
 80139c4:	031b      	lsls	r3, r3, #12
 80139c6:	693a      	ldr	r2, [r7, #16]
 80139c8:	4313      	orrs	r3, r2
 80139ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4a19      	ldr	r2, [pc, #100]	; (8013a34 <TIM_OC4_SetConfig+0xc0>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d00f      	beq.n	80139f4 <TIM_OC4_SetConfig+0x80>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	4a18      	ldr	r2, [pc, #96]	; (8013a38 <TIM_OC4_SetConfig+0xc4>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	d00b      	beq.n	80139f4 <TIM_OC4_SetConfig+0x80>
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	4a17      	ldr	r2, [pc, #92]	; (8013a3c <TIM_OC4_SetConfig+0xc8>)
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d007      	beq.n	80139f4 <TIM_OC4_SetConfig+0x80>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	4a16      	ldr	r2, [pc, #88]	; (8013a40 <TIM_OC4_SetConfig+0xcc>)
 80139e8:	4293      	cmp	r3, r2
 80139ea:	d003      	beq.n	80139f4 <TIM_OC4_SetConfig+0x80>
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	4a15      	ldr	r2, [pc, #84]	; (8013a44 <TIM_OC4_SetConfig+0xd0>)
 80139f0:	4293      	cmp	r3, r2
 80139f2:	d109      	bne.n	8013a08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80139fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	695b      	ldr	r3, [r3, #20]
 8013a00:	019b      	lsls	r3, r3, #6
 8013a02:	697a      	ldr	r2, [r7, #20]
 8013a04:	4313      	orrs	r3, r2
 8013a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	697a      	ldr	r2, [r7, #20]
 8013a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	68fa      	ldr	r2, [r7, #12]
 8013a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	685a      	ldr	r2, [r3, #4]
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	693a      	ldr	r2, [r7, #16]
 8013a20:	621a      	str	r2, [r3, #32]
}
 8013a22:	bf00      	nop
 8013a24:	371c      	adds	r7, #28
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop
 8013a30:	feff8fff 	.word	0xfeff8fff
 8013a34:	40010000 	.word	0x40010000
 8013a38:	40010400 	.word	0x40010400
 8013a3c:	40014000 	.word	0x40014000
 8013a40:	40014400 	.word	0x40014400
 8013a44:	40014800 	.word	0x40014800

08013a48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b087      	sub	sp, #28
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6a1b      	ldr	r3, [r3, #32]
 8013a56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6a1b      	ldr	r3, [r3, #32]
 8013a5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013a70:	68fa      	ldr	r2, [r7, #12]
 8013a72:	4b21      	ldr	r3, [pc, #132]	; (8013af8 <TIM_OC5_SetConfig+0xb0>)
 8013a74:	4013      	ands	r3, r2
 8013a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	68fa      	ldr	r2, [r7, #12]
 8013a7e:	4313      	orrs	r3, r2
 8013a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013a88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	689b      	ldr	r3, [r3, #8]
 8013a8e:	041b      	lsls	r3, r3, #16
 8013a90:	693a      	ldr	r2, [r7, #16]
 8013a92:	4313      	orrs	r3, r2
 8013a94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	4a18      	ldr	r2, [pc, #96]	; (8013afc <TIM_OC5_SetConfig+0xb4>)
 8013a9a:	4293      	cmp	r3, r2
 8013a9c:	d00f      	beq.n	8013abe <TIM_OC5_SetConfig+0x76>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	4a17      	ldr	r2, [pc, #92]	; (8013b00 <TIM_OC5_SetConfig+0xb8>)
 8013aa2:	4293      	cmp	r3, r2
 8013aa4:	d00b      	beq.n	8013abe <TIM_OC5_SetConfig+0x76>
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	4a16      	ldr	r2, [pc, #88]	; (8013b04 <TIM_OC5_SetConfig+0xbc>)
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d007      	beq.n	8013abe <TIM_OC5_SetConfig+0x76>
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	4a15      	ldr	r2, [pc, #84]	; (8013b08 <TIM_OC5_SetConfig+0xc0>)
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d003      	beq.n	8013abe <TIM_OC5_SetConfig+0x76>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	4a14      	ldr	r2, [pc, #80]	; (8013b0c <TIM_OC5_SetConfig+0xc4>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	d109      	bne.n	8013ad2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	695b      	ldr	r3, [r3, #20]
 8013aca:	021b      	lsls	r3, r3, #8
 8013acc:	697a      	ldr	r2, [r7, #20]
 8013ace:	4313      	orrs	r3, r2
 8013ad0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	697a      	ldr	r2, [r7, #20]
 8013ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	685a      	ldr	r2, [r3, #4]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	693a      	ldr	r2, [r7, #16]
 8013aea:	621a      	str	r2, [r3, #32]
}
 8013aec:	bf00      	nop
 8013aee:	371c      	adds	r7, #28
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr
 8013af8:	fffeff8f 	.word	0xfffeff8f
 8013afc:	40010000 	.word	0x40010000
 8013b00:	40010400 	.word	0x40010400
 8013b04:	40014000 	.word	0x40014000
 8013b08:	40014400 	.word	0x40014400
 8013b0c:	40014800 	.word	0x40014800

08013b10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013b10:	b480      	push	{r7}
 8013b12:	b087      	sub	sp, #28
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	6a1b      	ldr	r3, [r3, #32]
 8013b1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6a1b      	ldr	r3, [r3, #32]
 8013b24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	685b      	ldr	r3, [r3, #4]
 8013b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013b38:	68fa      	ldr	r2, [r7, #12]
 8013b3a:	4b22      	ldr	r3, [pc, #136]	; (8013bc4 <TIM_OC6_SetConfig+0xb4>)
 8013b3c:	4013      	ands	r3, r2
 8013b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	021b      	lsls	r3, r3, #8
 8013b46:	68fa      	ldr	r2, [r7, #12]
 8013b48:	4313      	orrs	r3, r2
 8013b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013b4c:	693b      	ldr	r3, [r7, #16]
 8013b4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	689b      	ldr	r3, [r3, #8]
 8013b58:	051b      	lsls	r3, r3, #20
 8013b5a:	693a      	ldr	r2, [r7, #16]
 8013b5c:	4313      	orrs	r3, r2
 8013b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	4a19      	ldr	r2, [pc, #100]	; (8013bc8 <TIM_OC6_SetConfig+0xb8>)
 8013b64:	4293      	cmp	r3, r2
 8013b66:	d00f      	beq.n	8013b88 <TIM_OC6_SetConfig+0x78>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	4a18      	ldr	r2, [pc, #96]	; (8013bcc <TIM_OC6_SetConfig+0xbc>)
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	d00b      	beq.n	8013b88 <TIM_OC6_SetConfig+0x78>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	4a17      	ldr	r2, [pc, #92]	; (8013bd0 <TIM_OC6_SetConfig+0xc0>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d007      	beq.n	8013b88 <TIM_OC6_SetConfig+0x78>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	4a16      	ldr	r2, [pc, #88]	; (8013bd4 <TIM_OC6_SetConfig+0xc4>)
 8013b7c:	4293      	cmp	r3, r2
 8013b7e:	d003      	beq.n	8013b88 <TIM_OC6_SetConfig+0x78>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	4a15      	ldr	r2, [pc, #84]	; (8013bd8 <TIM_OC6_SetConfig+0xc8>)
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d109      	bne.n	8013b9c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	695b      	ldr	r3, [r3, #20]
 8013b94:	029b      	lsls	r3, r3, #10
 8013b96:	697a      	ldr	r2, [r7, #20]
 8013b98:	4313      	orrs	r3, r2
 8013b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	697a      	ldr	r2, [r7, #20]
 8013ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	68fa      	ldr	r2, [r7, #12]
 8013ba6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	685a      	ldr	r2, [r3, #4]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	693a      	ldr	r2, [r7, #16]
 8013bb4:	621a      	str	r2, [r3, #32]
}
 8013bb6:	bf00      	nop
 8013bb8:	371c      	adds	r7, #28
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop
 8013bc4:	feff8fff 	.word	0xfeff8fff
 8013bc8:	40010000 	.word	0x40010000
 8013bcc:	40010400 	.word	0x40010400
 8013bd0:	40014000 	.word	0x40014000
 8013bd4:	40014400 	.word	0x40014400
 8013bd8:	40014800 	.word	0x40014800

08013bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b087      	sub	sp, #28
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	60f8      	str	r0, [r7, #12]
 8013be4:	60b9      	str	r1, [r7, #8]
 8013be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	6a1b      	ldr	r3, [r3, #32]
 8013bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	6a1b      	ldr	r3, [r3, #32]
 8013bf2:	f023 0201 	bic.w	r2, r3, #1
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	699b      	ldr	r3, [r3, #24]
 8013bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	011b      	lsls	r3, r3, #4
 8013c0c:	693a      	ldr	r2, [r7, #16]
 8013c0e:	4313      	orrs	r3, r2
 8013c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	f023 030a 	bic.w	r3, r3, #10
 8013c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013c1a:	697a      	ldr	r2, [r7, #20]
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	4313      	orrs	r3, r2
 8013c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	693a      	ldr	r2, [r7, #16]
 8013c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	697a      	ldr	r2, [r7, #20]
 8013c2c:	621a      	str	r2, [r3, #32]
}
 8013c2e:	bf00      	nop
 8013c30:	371c      	adds	r7, #28
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr

08013c3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013c3a:	b480      	push	{r7}
 8013c3c:	b087      	sub	sp, #28
 8013c3e:	af00      	add	r7, sp, #0
 8013c40:	60f8      	str	r0, [r7, #12]
 8013c42:	60b9      	str	r1, [r7, #8]
 8013c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	6a1b      	ldr	r3, [r3, #32]
 8013c4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	6a1b      	ldr	r3, [r3, #32]
 8013c50:	f023 0210 	bic.w	r2, r3, #16
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	699b      	ldr	r3, [r3, #24]
 8013c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	031b      	lsls	r3, r3, #12
 8013c6a:	693a      	ldr	r2, [r7, #16]
 8013c6c:	4313      	orrs	r3, r2
 8013c6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013c76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	011b      	lsls	r3, r3, #4
 8013c7c:	697a      	ldr	r2, [r7, #20]
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	693a      	ldr	r2, [r7, #16]
 8013c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	697a      	ldr	r2, [r7, #20]
 8013c8c:	621a      	str	r2, [r3, #32]
}
 8013c8e:	bf00      	nop
 8013c90:	371c      	adds	r7, #28
 8013c92:	46bd      	mov	sp, r7
 8013c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c98:	4770      	bx	lr
	...

08013c9c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b085      	sub	sp, #20
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	689b      	ldr	r3, [r3, #8]
 8013caa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013cac:	68fa      	ldr	r2, [r7, #12]
 8013cae:	4b09      	ldr	r3, [pc, #36]	; (8013cd4 <TIM_ITRx_SetConfig+0x38>)
 8013cb0:	4013      	ands	r3, r2
 8013cb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013cb4:	683a      	ldr	r2, [r7, #0]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	4313      	orrs	r3, r2
 8013cba:	f043 0307 	orr.w	r3, r3, #7
 8013cbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	68fa      	ldr	r2, [r7, #12]
 8013cc4:	609a      	str	r2, [r3, #8]
}
 8013cc6:	bf00      	nop
 8013cc8:	3714      	adds	r7, #20
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd0:	4770      	bx	lr
 8013cd2:	bf00      	nop
 8013cd4:	ffcfff8f 	.word	0xffcfff8f

08013cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013cd8:	b480      	push	{r7}
 8013cda:	b087      	sub	sp, #28
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	607a      	str	r2, [r7, #4]
 8013ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	689b      	ldr	r3, [r3, #8]
 8013cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013cf4:	683b      	ldr	r3, [r7, #0]
 8013cf6:	021a      	lsls	r2, r3, #8
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	431a      	orrs	r2, r3
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	4313      	orrs	r3, r2
 8013d00:	697a      	ldr	r2, [r7, #20]
 8013d02:	4313      	orrs	r3, r2
 8013d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	697a      	ldr	r2, [r7, #20]
 8013d0a:	609a      	str	r2, [r3, #8]
}
 8013d0c:	bf00      	nop
 8013d0e:	371c      	adds	r7, #28
 8013d10:	46bd      	mov	sp, r7
 8013d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d16:	4770      	bx	lr

08013d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b087      	sub	sp, #28
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	f003 031f 	and.w	r3, r3, #31
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8013d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	6a1a      	ldr	r2, [r3, #32]
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	43db      	mvns	r3, r3
 8013d3a:	401a      	ands	r2, r3
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	6a1a      	ldr	r2, [r3, #32]
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	f003 031f 	and.w	r3, r3, #31
 8013d4a:	6879      	ldr	r1, [r7, #4]
 8013d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8013d50:	431a      	orrs	r2, r3
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	621a      	str	r2, [r3, #32]
}
 8013d56:	bf00      	nop
 8013d58:	371c      	adds	r7, #28
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr
	...

08013d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013d64:	b480      	push	{r7}
 8013d66:	b085      	sub	sp, #20
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d74:	2b01      	cmp	r3, #1
 8013d76:	d101      	bne.n	8013d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013d78:	2302      	movs	r3, #2
 8013d7a:	e06d      	b.n	8013e58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2202      	movs	r2, #2
 8013d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	4a30      	ldr	r2, [pc, #192]	; (8013e64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013da2:	4293      	cmp	r3, r2
 8013da4:	d004      	beq.n	8013db0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	4a2f      	ldr	r2, [pc, #188]	; (8013e68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013dac:	4293      	cmp	r3, r2
 8013dae:	d108      	bne.n	8013dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013db6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	685b      	ldr	r3, [r3, #4]
 8013dbc:	68fa      	ldr	r2, [r7, #12]
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013dc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	68fa      	ldr	r2, [r7, #12]
 8013dd0:	4313      	orrs	r3, r2
 8013dd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	68fa      	ldr	r2, [r7, #12]
 8013dda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	4a20      	ldr	r2, [pc, #128]	; (8013e64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013de2:	4293      	cmp	r3, r2
 8013de4:	d022      	beq.n	8013e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013dee:	d01d      	beq.n	8013e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4a1d      	ldr	r2, [pc, #116]	; (8013e6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013df6:	4293      	cmp	r3, r2
 8013df8:	d018      	beq.n	8013e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	4a1c      	ldr	r2, [pc, #112]	; (8013e70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013e00:	4293      	cmp	r3, r2
 8013e02:	d013      	beq.n	8013e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	4a1a      	ldr	r2, [pc, #104]	; (8013e74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013e0a:	4293      	cmp	r3, r2
 8013e0c:	d00e      	beq.n	8013e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	4a15      	ldr	r2, [pc, #84]	; (8013e68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d009      	beq.n	8013e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	4a16      	ldr	r2, [pc, #88]	; (8013e78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013e1e:	4293      	cmp	r3, r2
 8013e20:	d004      	beq.n	8013e2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	4a15      	ldr	r2, [pc, #84]	; (8013e7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	d10c      	bne.n	8013e46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013e32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	689b      	ldr	r3, [r3, #8]
 8013e38:	68ba      	ldr	r2, [r7, #8]
 8013e3a:	4313      	orrs	r3, r2
 8013e3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	68ba      	ldr	r2, [r7, #8]
 8013e44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2201      	movs	r2, #1
 8013e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	2200      	movs	r2, #0
 8013e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013e56:	2300      	movs	r3, #0
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3714      	adds	r7, #20
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr
 8013e64:	40010000 	.word	0x40010000
 8013e68:	40010400 	.word	0x40010400
 8013e6c:	40000400 	.word	0x40000400
 8013e70:	40000800 	.word	0x40000800
 8013e74:	40000c00 	.word	0x40000c00
 8013e78:	40001800 	.word	0x40001800
 8013e7c:	40014000 	.word	0x40014000

08013e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013e80:	b480      	push	{r7}
 8013e82:	b085      	sub	sp, #20
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d101      	bne.n	8013e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013e98:	2302      	movs	r3, #2
 8013e9a:	e065      	b.n	8013f68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	68db      	ldr	r3, [r3, #12]
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	4313      	orrs	r3, r2
 8013ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	4313      	orrs	r3, r2
 8013ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	4313      	orrs	r3, r2
 8013eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013ee2:	683b      	ldr	r3, [r7, #0]
 8013ee4:	691b      	ldr	r3, [r3, #16]
 8013ee6:	4313      	orrs	r3, r2
 8013ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	695b      	ldr	r3, [r3, #20]
 8013ef4:	4313      	orrs	r3, r2
 8013ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f02:	4313      	orrs	r3, r2
 8013f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	699b      	ldr	r3, [r3, #24]
 8013f10:	041b      	lsls	r3, r3, #16
 8013f12:	4313      	orrs	r3, r2
 8013f14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	4a16      	ldr	r2, [pc, #88]	; (8013f74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	d004      	beq.n	8013f2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	4a14      	ldr	r2, [pc, #80]	; (8013f78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013f26:	4293      	cmp	r3, r2
 8013f28:	d115      	bne.n	8013f56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f34:	051b      	lsls	r3, r3, #20
 8013f36:	4313      	orrs	r3, r2
 8013f38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	69db      	ldr	r3, [r3, #28]
 8013f44:	4313      	orrs	r3, r2
 8013f46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	6a1b      	ldr	r3, [r3, #32]
 8013f52:	4313      	orrs	r3, r2
 8013f54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	68fa      	ldr	r2, [r7, #12]
 8013f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2200      	movs	r2, #0
 8013f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013f66:	2300      	movs	r3, #0
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3714      	adds	r7, #20
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f72:	4770      	bx	lr
 8013f74:	40010000 	.word	0x40010000
 8013f78:	40010400 	.word	0x40010400

08013f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b083      	sub	sp, #12
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013f84:	bf00      	nop
 8013f86:	370c      	adds	r7, #12
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8e:	4770      	bx	lr

08013f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013f90:	b480      	push	{r7}
 8013f92:	b083      	sub	sp, #12
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013f98:	bf00      	nop
 8013f9a:	370c      	adds	r7, #12
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa2:	4770      	bx	lr

08013fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b083      	sub	sp, #12
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013fac:	bf00      	nop
 8013fae:	370c      	adds	r7, #12
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr

08013fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d101      	bne.n	8013fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	e042      	b.n	8014050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d106      	bne.n	8013fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7f1 f8c1 	bl	8005164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2224      	movs	r2, #36	; 0x24
 8013fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	681a      	ldr	r2, [r3, #0]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	f022 0201 	bic.w	r2, r2, #1
 8013ff8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d002      	beq.n	8014008 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f001 fbc2 	bl	801578c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 fe57 	bl	8014cbc <UART_SetConfig>
 801400e:	4603      	mov	r3, r0
 8014010:	2b01      	cmp	r3, #1
 8014012:	d101      	bne.n	8014018 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8014014:	2301      	movs	r3, #1
 8014016:	e01b      	b.n	8014050 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	685a      	ldr	r2, [r3, #4]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	689a      	ldr	r2, [r3, #8]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	f042 0201 	orr.w	r2, r2, #1
 8014046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f001 fc41 	bl	80158d0 <UART_CheckIdleState>
 801404e:	4603      	mov	r3, r0
}
 8014050:	4618      	mov	r0, r3
 8014052:	3708      	adds	r7, #8
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b08a      	sub	sp, #40	; 0x28
 801405c:	af02      	add	r7, sp, #8
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	603b      	str	r3, [r7, #0]
 8014064:	4613      	mov	r3, r2
 8014066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801406e:	2b20      	cmp	r3, #32
 8014070:	d17b      	bne.n	801416a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d002      	beq.n	801407e <HAL_UART_Transmit+0x26>
 8014078:	88fb      	ldrh	r3, [r7, #6]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d101      	bne.n	8014082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801407e:	2301      	movs	r3, #1
 8014080:	e074      	b.n	801416c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2200      	movs	r2, #0
 8014086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	2221      	movs	r2, #33	; 0x21
 801408e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014092:	f7f1 fcb5 	bl	8005a00 <HAL_GetTick>
 8014096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	88fa      	ldrh	r2, [r7, #6]
 801409c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	88fa      	ldrh	r2, [r7, #6]
 80140a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	689b      	ldr	r3, [r3, #8]
 80140ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80140b0:	d108      	bne.n	80140c4 <HAL_UART_Transmit+0x6c>
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	691b      	ldr	r3, [r3, #16]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d104      	bne.n	80140c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80140ba:	2300      	movs	r3, #0
 80140bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	61bb      	str	r3, [r7, #24]
 80140c2:	e003      	b.n	80140cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80140c8:	2300      	movs	r3, #0
 80140ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80140cc:	e030      	b.n	8014130 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	2200      	movs	r2, #0
 80140d6:	2180      	movs	r1, #128	; 0x80
 80140d8:	68f8      	ldr	r0, [r7, #12]
 80140da:	f001 fca3 	bl	8015a24 <UART_WaitOnFlagUntilTimeout>
 80140de:	4603      	mov	r3, r0
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d005      	beq.n	80140f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	2220      	movs	r2, #32
 80140e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80140ec:	2303      	movs	r3, #3
 80140ee:	e03d      	b.n	801416c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d10b      	bne.n	801410e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	881b      	ldrh	r3, [r3, #0]
 80140fa:	461a      	mov	r2, r3
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	3302      	adds	r3, #2
 801410a:	61bb      	str	r3, [r7, #24]
 801410c:	e007      	b.n	801411e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	781a      	ldrb	r2, [r3, #0]
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	3301      	adds	r3, #1
 801411c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014124:	b29b      	uxth	r3, r3
 8014126:	3b01      	subs	r3, #1
 8014128:	b29a      	uxth	r2, r3
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014136:	b29b      	uxth	r3, r3
 8014138:	2b00      	cmp	r3, #0
 801413a:	d1c8      	bne.n	80140ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	9300      	str	r3, [sp, #0]
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	2200      	movs	r2, #0
 8014144:	2140      	movs	r1, #64	; 0x40
 8014146:	68f8      	ldr	r0, [r7, #12]
 8014148:	f001 fc6c 	bl	8015a24 <UART_WaitOnFlagUntilTimeout>
 801414c:	4603      	mov	r3, r0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d005      	beq.n	801415e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	2220      	movs	r2, #32
 8014156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801415a:	2303      	movs	r3, #3
 801415c:	e006      	b.n	801416c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2220      	movs	r2, #32
 8014162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8014166:	2300      	movs	r3, #0
 8014168:	e000      	b.n	801416c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801416a:	2302      	movs	r3, #2
  }
}
 801416c:	4618      	mov	r0, r3
 801416e:	3720      	adds	r7, #32
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b08a      	sub	sp, #40	; 0x28
 8014178:	af02      	add	r7, sp, #8
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	603b      	str	r3, [r7, #0]
 8014180:	4613      	mov	r3, r2
 8014182:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801418a:	2b20      	cmp	r3, #32
 801418c:	f040 80b5 	bne.w	80142fa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d002      	beq.n	801419c <HAL_UART_Receive+0x28>
 8014196:	88fb      	ldrh	r3, [r7, #6]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d101      	bne.n	80141a0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801419c:	2301      	movs	r3, #1
 801419e:	e0ad      	b.n	80142fc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2200      	movs	r2, #0
 80141a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2222      	movs	r2, #34	; 0x22
 80141ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	2200      	movs	r2, #0
 80141b4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80141b6:	f7f1 fc23 	bl	8005a00 <HAL_GetTick>
 80141ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	88fa      	ldrh	r2, [r7, #6]
 80141c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	88fa      	ldrh	r2, [r7, #6]
 80141c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	689b      	ldr	r3, [r3, #8]
 80141d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141d4:	d10e      	bne.n	80141f4 <HAL_UART_Receive+0x80>
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	691b      	ldr	r3, [r3, #16]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d105      	bne.n	80141ea <HAL_UART_Receive+0x76>
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80141e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141e8:	e02d      	b.n	8014246 <HAL_UART_Receive+0xd2>
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	22ff      	movs	r2, #255	; 0xff
 80141ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141f2:	e028      	b.n	8014246 <HAL_UART_Receive+0xd2>
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	689b      	ldr	r3, [r3, #8]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d10d      	bne.n	8014218 <HAL_UART_Receive+0xa4>
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	691b      	ldr	r3, [r3, #16]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d104      	bne.n	801420e <HAL_UART_Receive+0x9a>
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	22ff      	movs	r2, #255	; 0xff
 8014208:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801420c:	e01b      	b.n	8014246 <HAL_UART_Receive+0xd2>
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	227f      	movs	r2, #127	; 0x7f
 8014212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014216:	e016      	b.n	8014246 <HAL_UART_Receive+0xd2>
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	689b      	ldr	r3, [r3, #8]
 801421c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014220:	d10d      	bne.n	801423e <HAL_UART_Receive+0xca>
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	691b      	ldr	r3, [r3, #16]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d104      	bne.n	8014234 <HAL_UART_Receive+0xc0>
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	227f      	movs	r2, #127	; 0x7f
 801422e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014232:	e008      	b.n	8014246 <HAL_UART_Receive+0xd2>
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	223f      	movs	r2, #63	; 0x3f
 8014238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801423c:	e003      	b.n	8014246 <HAL_UART_Receive+0xd2>
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	2200      	movs	r2, #0
 8014242:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801424c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	689b      	ldr	r3, [r3, #8]
 8014252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014256:	d108      	bne.n	801426a <HAL_UART_Receive+0xf6>
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	691b      	ldr	r3, [r3, #16]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d104      	bne.n	801426a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014260:	2300      	movs	r3, #0
 8014262:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	61bb      	str	r3, [r7, #24]
 8014268:	e003      	b.n	8014272 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801426e:	2300      	movs	r3, #0
 8014270:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014272:	e036      	b.n	80142e2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	9300      	str	r3, [sp, #0]
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	2200      	movs	r2, #0
 801427c:	2120      	movs	r1, #32
 801427e:	68f8      	ldr	r0, [r7, #12]
 8014280:	f001 fbd0 	bl	8015a24 <UART_WaitOnFlagUntilTimeout>
 8014284:	4603      	mov	r3, r0
 8014286:	2b00      	cmp	r3, #0
 8014288:	d005      	beq.n	8014296 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	2220      	movs	r2, #32
 801428e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8014292:	2303      	movs	r3, #3
 8014294:	e032      	b.n	80142fc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d10c      	bne.n	80142b6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142a2:	b29a      	uxth	r2, r3
 80142a4:	8a7b      	ldrh	r3, [r7, #18]
 80142a6:	4013      	ands	r3, r2
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	69bb      	ldr	r3, [r7, #24]
 80142ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80142ae:	69bb      	ldr	r3, [r7, #24]
 80142b0:	3302      	adds	r3, #2
 80142b2:	61bb      	str	r3, [r7, #24]
 80142b4:	e00c      	b.n	80142d0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142bc:	b2da      	uxtb	r2, r3
 80142be:	8a7b      	ldrh	r3, [r7, #18]
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	4013      	ands	r3, r2
 80142c4:	b2da      	uxtb	r2, r3
 80142c6:	69fb      	ldr	r3, [r7, #28]
 80142c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	3301      	adds	r3, #1
 80142ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	3b01      	subs	r3, #1
 80142da:	b29a      	uxth	r2, r3
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80142e8:	b29b      	uxth	r3, r3
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d1c2      	bne.n	8014274 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2220      	movs	r2, #32
 80142f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80142f6:	2300      	movs	r3, #0
 80142f8:	e000      	b.n	80142fc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80142fa:	2302      	movs	r3, #2
  }
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3720      	adds	r7, #32
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b08a      	sub	sp, #40	; 0x28
 8014308:	af00      	add	r7, sp, #0
 801430a:	60f8      	str	r0, [r7, #12]
 801430c:	60b9      	str	r1, [r7, #8]
 801430e:	4613      	mov	r3, r2
 8014310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014318:	2b20      	cmp	r3, #32
 801431a:	d137      	bne.n	801438c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d002      	beq.n	8014328 <HAL_UART_Receive_IT+0x24>
 8014322:	88fb      	ldrh	r3, [r7, #6]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d101      	bne.n	801432c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014328:	2301      	movs	r3, #1
 801432a:	e030      	b.n	801438e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	2200      	movs	r2, #0
 8014330:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	4a18      	ldr	r2, [pc, #96]	; (8014398 <HAL_UART_Receive_IT+0x94>)
 8014338:	4293      	cmp	r3, r2
 801433a:	d01f      	beq.n	801437c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014346:	2b00      	cmp	r3, #0
 8014348:	d018      	beq.n	801437c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	e853 3f00 	ldrex	r3, [r3]
 8014356:	613b      	str	r3, [r7, #16]
   return(result);
 8014358:	693b      	ldr	r3, [r7, #16]
 801435a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801435e:	627b      	str	r3, [r7, #36]	; 0x24
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	461a      	mov	r2, r3
 8014366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014368:	623b      	str	r3, [r7, #32]
 801436a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801436c:	69f9      	ldr	r1, [r7, #28]
 801436e:	6a3a      	ldr	r2, [r7, #32]
 8014370:	e841 2300 	strex	r3, r2, [r1]
 8014374:	61bb      	str	r3, [r7, #24]
   return(result);
 8014376:	69bb      	ldr	r3, [r7, #24]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d1e6      	bne.n	801434a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801437c:	88fb      	ldrh	r3, [r7, #6]
 801437e:	461a      	mov	r2, r3
 8014380:	68b9      	ldr	r1, [r7, #8]
 8014382:	68f8      	ldr	r0, [r7, #12]
 8014384:	f001 fbbc 	bl	8015b00 <UART_Start_Receive_IT>
 8014388:	4603      	mov	r3, r0
 801438a:	e000      	b.n	801438e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801438c:	2302      	movs	r3, #2
  }
}
 801438e:	4618      	mov	r0, r3
 8014390:	3728      	adds	r7, #40	; 0x28
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	58000c00 	.word	0x58000c00

0801439c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b09a      	sub	sp, #104	; 0x68
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143ac:	e853 3f00 	ldrex	r3, [r3]
 80143b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80143b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80143b8:	667b      	str	r3, [r7, #100]	; 0x64
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	461a      	mov	r2, r3
 80143c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80143c2:	657b      	str	r3, [r7, #84]	; 0x54
 80143c4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80143c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80143ca:	e841 2300 	strex	r3, r2, [r1]
 80143ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80143d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d1e6      	bne.n	80143a4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	3308      	adds	r3, #8
 80143dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143e0:	e853 3f00 	ldrex	r3, [r3]
 80143e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80143e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143e8:	4b46      	ldr	r3, [pc, #280]	; (8014504 <HAL_UART_AbortReceive+0x168>)
 80143ea:	4013      	ands	r3, r2
 80143ec:	663b      	str	r3, [r7, #96]	; 0x60
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	3308      	adds	r3, #8
 80143f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80143f6:	643a      	str	r2, [r7, #64]	; 0x40
 80143f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80143fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80143fe:	e841 2300 	strex	r3, r2, [r1]
 8014402:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014406:	2b00      	cmp	r3, #0
 8014408:	d1e5      	bne.n	80143d6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801440e:	2b01      	cmp	r3, #1
 8014410:	d118      	bne.n	8014444 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014418:	6a3b      	ldr	r3, [r7, #32]
 801441a:	e853 3f00 	ldrex	r3, [r3]
 801441e:	61fb      	str	r3, [r7, #28]
   return(result);
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	f023 0310 	bic.w	r3, r3, #16
 8014426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	461a      	mov	r2, r3
 801442e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014432:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014438:	e841 2300 	strex	r3, r2, [r1]
 801443c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014440:	2b00      	cmp	r3, #0
 8014442:	d1e6      	bne.n	8014412 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	689b      	ldr	r3, [r3, #8]
 801444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801444e:	2b40      	cmp	r3, #64	; 0x40
 8014450:	d13b      	bne.n	80144ca <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	3308      	adds	r3, #8
 8014458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	e853 3f00 	ldrex	r3, [r3]
 8014460:	60bb      	str	r3, [r7, #8]
   return(result);
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014468:	65bb      	str	r3, [r7, #88]	; 0x58
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	3308      	adds	r3, #8
 8014470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014472:	61ba      	str	r2, [r7, #24]
 8014474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014476:	6979      	ldr	r1, [r7, #20]
 8014478:	69ba      	ldr	r2, [r7, #24]
 801447a:	e841 2300 	strex	r3, r2, [r1]
 801447e:	613b      	str	r3, [r7, #16]
   return(result);
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d1e5      	bne.n	8014452 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801448c:	2b00      	cmp	r3, #0
 801448e:	d01c      	beq.n	80144ca <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014496:	2200      	movs	r2, #0
 8014498:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7f4 fa13 	bl	80088cc <HAL_DMA_Abort>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d00e      	beq.n	80144ca <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7f5 fea6 	bl	800a204 <HAL_DMA_GetError>
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b20      	cmp	r3, #32
 80144bc:	d105      	bne.n	80144ca <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2210      	movs	r2, #16
 80144c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80144c6:	2303      	movs	r3, #3
 80144c8:	e017      	b.n	80144fa <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2200      	movs	r2, #0
 80144ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	220f      	movs	r2, #15
 80144d8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	699a      	ldr	r2, [r3, #24]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	f042 0208 	orr.w	r2, r2, #8
 80144e8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	2220      	movs	r2, #32
 80144ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2200      	movs	r2, #0
 80144f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80144f8:	2300      	movs	r3, #0
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3768      	adds	r7, #104	; 0x68
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	effffffe 	.word	0xeffffffe

08014508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b0ba      	sub	sp, #232	; 0xe8
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	69db      	ldr	r3, [r3, #28]
 8014516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	689b      	ldr	r3, [r3, #8]
 801452a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801452e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014532:	f640 030f 	movw	r3, #2063	; 0x80f
 8014536:	4013      	ands	r3, r2
 8014538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801453c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014540:	2b00      	cmp	r3, #0
 8014542:	d11b      	bne.n	801457c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014548:	f003 0320 	and.w	r3, r3, #32
 801454c:	2b00      	cmp	r3, #0
 801454e:	d015      	beq.n	801457c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014554:	f003 0320 	and.w	r3, r3, #32
 8014558:	2b00      	cmp	r3, #0
 801455a:	d105      	bne.n	8014568 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801455c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014564:	2b00      	cmp	r3, #0
 8014566:	d009      	beq.n	801457c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801456c:	2b00      	cmp	r3, #0
 801456e:	f000 8377 	beq.w	8014c60 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	4798      	blx	r3
      }
      return;
 801457a:	e371      	b.n	8014c60 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801457c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014580:	2b00      	cmp	r3, #0
 8014582:	f000 8123 	beq.w	80147cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014586:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801458a:	4b8d      	ldr	r3, [pc, #564]	; (80147c0 <HAL_UART_IRQHandler+0x2b8>)
 801458c:	4013      	ands	r3, r2
 801458e:	2b00      	cmp	r3, #0
 8014590:	d106      	bne.n	80145a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014596:	4b8b      	ldr	r3, [pc, #556]	; (80147c4 <HAL_UART_IRQHandler+0x2bc>)
 8014598:	4013      	ands	r3, r2
 801459a:	2b00      	cmp	r3, #0
 801459c:	f000 8116 	beq.w	80147cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80145a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80145a4:	f003 0301 	and.w	r3, r3, #1
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d011      	beq.n	80145d0 <HAL_UART_IRQHandler+0xc8>
 80145ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80145b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d00b      	beq.n	80145d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	2201      	movs	r2, #1
 80145be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145c6:	f043 0201 	orr.w	r2, r3, #1
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80145d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80145d4:	f003 0302 	and.w	r3, r3, #2
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d011      	beq.n	8014600 <HAL_UART_IRQHandler+0xf8>
 80145dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80145e0:	f003 0301 	and.w	r3, r3, #1
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d00b      	beq.n	8014600 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	2202      	movs	r2, #2
 80145ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145f6:	f043 0204 	orr.w	r2, r3, #4
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014604:	f003 0304 	and.w	r3, r3, #4
 8014608:	2b00      	cmp	r3, #0
 801460a:	d011      	beq.n	8014630 <HAL_UART_IRQHandler+0x128>
 801460c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014610:	f003 0301 	and.w	r3, r3, #1
 8014614:	2b00      	cmp	r3, #0
 8014616:	d00b      	beq.n	8014630 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2204      	movs	r2, #4
 801461e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014626:	f043 0202 	orr.w	r2, r3, #2
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014634:	f003 0308 	and.w	r3, r3, #8
 8014638:	2b00      	cmp	r3, #0
 801463a:	d017      	beq.n	801466c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014640:	f003 0320 	and.w	r3, r3, #32
 8014644:	2b00      	cmp	r3, #0
 8014646:	d105      	bne.n	8014654 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014648:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801464c:	4b5c      	ldr	r3, [pc, #368]	; (80147c0 <HAL_UART_IRQHandler+0x2b8>)
 801464e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014650:	2b00      	cmp	r3, #0
 8014652:	d00b      	beq.n	801466c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	2208      	movs	r2, #8
 801465a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014662:	f043 0208 	orr.w	r2, r3, #8
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014674:	2b00      	cmp	r3, #0
 8014676:	d012      	beq.n	801469e <HAL_UART_IRQHandler+0x196>
 8014678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801467c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014680:	2b00      	cmp	r3, #0
 8014682:	d00c      	beq.n	801469e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801468c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014694:	f043 0220 	orr.w	r2, r3, #32
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	f000 82dd 	beq.w	8014c64 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80146aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80146ae:	f003 0320 	and.w	r3, r3, #32
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d013      	beq.n	80146de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80146b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80146ba:	f003 0320 	and.w	r3, r3, #32
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d105      	bne.n	80146ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80146c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80146c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d007      	beq.n	80146de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d003      	beq.n	80146de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	689b      	ldr	r3, [r3, #8]
 80146ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146f2:	2b40      	cmp	r3, #64	; 0x40
 80146f4:	d005      	beq.n	8014702 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80146f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80146fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d054      	beq.n	80147ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f001 fb1e 	bl	8015d44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	689b      	ldr	r3, [r3, #8]
 801470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014712:	2b40      	cmp	r3, #64	; 0x40
 8014714:	d146      	bne.n	80147a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	3308      	adds	r3, #8
 801471c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014724:	e853 3f00 	ldrex	r3, [r3]
 8014728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801472c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	3308      	adds	r3, #8
 801473e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801474a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801474e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014752:	e841 2300 	strex	r3, r2, [r1]
 8014756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801475a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801475e:	2b00      	cmp	r3, #0
 8014760:	d1d9      	bne.n	8014716 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014768:	2b00      	cmp	r3, #0
 801476a:	d017      	beq.n	801479c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014772:	4a15      	ldr	r2, [pc, #84]	; (80147c8 <HAL_UART_IRQHandler+0x2c0>)
 8014774:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801477c:	4618      	mov	r0, r3
 801477e:	f7f4 fbc3 	bl	8008f08 <HAL_DMA_Abort_IT>
 8014782:	4603      	mov	r3, r0
 8014784:	2b00      	cmp	r3, #0
 8014786:	d019      	beq.n	80147bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014796:	4610      	mov	r0, r2
 8014798:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801479a:	e00f      	b.n	80147bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f000 fa77 	bl	8014c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80147a2:	e00b      	b.n	80147bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f000 fa73 	bl	8014c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80147aa:	e007      	b.n	80147bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f000 fa6f 	bl	8014c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2200      	movs	r2, #0
 80147b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80147ba:	e253      	b.n	8014c64 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80147bc:	bf00      	nop
    return;
 80147be:	e251      	b.n	8014c64 <HAL_UART_IRQHandler+0x75c>
 80147c0:	10000001 	.word	0x10000001
 80147c4:	04000120 	.word	0x04000120
 80147c8:	08015e11 	.word	0x08015e11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147d0:	2b01      	cmp	r3, #1
 80147d2:	f040 81e7 	bne.w	8014ba4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80147d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80147da:	f003 0310 	and.w	r3, r3, #16
 80147de:	2b00      	cmp	r3, #0
 80147e0:	f000 81e0 	beq.w	8014ba4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80147e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80147e8:	f003 0310 	and.w	r3, r3, #16
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	f000 81d9 	beq.w	8014ba4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	2210      	movs	r2, #16
 80147f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	689b      	ldr	r3, [r3, #8]
 8014800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014804:	2b40      	cmp	r3, #64	; 0x40
 8014806:	f040 8151 	bne.w	8014aac <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	4a96      	ldr	r2, [pc, #600]	; (8014a6c <HAL_UART_IRQHandler+0x564>)
 8014814:	4293      	cmp	r3, r2
 8014816:	d068      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	4a93      	ldr	r2, [pc, #588]	; (8014a70 <HAL_UART_IRQHandler+0x568>)
 8014822:	4293      	cmp	r3, r2
 8014824:	d061      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	4a91      	ldr	r2, [pc, #580]	; (8014a74 <HAL_UART_IRQHandler+0x56c>)
 8014830:	4293      	cmp	r3, r2
 8014832:	d05a      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4a8e      	ldr	r2, [pc, #568]	; (8014a78 <HAL_UART_IRQHandler+0x570>)
 801483e:	4293      	cmp	r3, r2
 8014840:	d053      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	4a8c      	ldr	r2, [pc, #560]	; (8014a7c <HAL_UART_IRQHandler+0x574>)
 801484c:	4293      	cmp	r3, r2
 801484e:	d04c      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	4a89      	ldr	r2, [pc, #548]	; (8014a80 <HAL_UART_IRQHandler+0x578>)
 801485a:	4293      	cmp	r3, r2
 801485c:	d045      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	4a87      	ldr	r2, [pc, #540]	; (8014a84 <HAL_UART_IRQHandler+0x57c>)
 8014868:	4293      	cmp	r3, r2
 801486a:	d03e      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	4a84      	ldr	r2, [pc, #528]	; (8014a88 <HAL_UART_IRQHandler+0x580>)
 8014876:	4293      	cmp	r3, r2
 8014878:	d037      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4a82      	ldr	r2, [pc, #520]	; (8014a8c <HAL_UART_IRQHandler+0x584>)
 8014884:	4293      	cmp	r3, r2
 8014886:	d030      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	4a7f      	ldr	r2, [pc, #508]	; (8014a90 <HAL_UART_IRQHandler+0x588>)
 8014892:	4293      	cmp	r3, r2
 8014894:	d029      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	4a7d      	ldr	r2, [pc, #500]	; (8014a94 <HAL_UART_IRQHandler+0x58c>)
 80148a0:	4293      	cmp	r3, r2
 80148a2:	d022      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4a7a      	ldr	r2, [pc, #488]	; (8014a98 <HAL_UART_IRQHandler+0x590>)
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d01b      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	4a78      	ldr	r2, [pc, #480]	; (8014a9c <HAL_UART_IRQHandler+0x594>)
 80148bc:	4293      	cmp	r3, r2
 80148be:	d014      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	4a75      	ldr	r2, [pc, #468]	; (8014aa0 <HAL_UART_IRQHandler+0x598>)
 80148ca:	4293      	cmp	r3, r2
 80148cc:	d00d      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	4a73      	ldr	r2, [pc, #460]	; (8014aa4 <HAL_UART_IRQHandler+0x59c>)
 80148d8:	4293      	cmp	r3, r2
 80148da:	d006      	beq.n	80148ea <HAL_UART_IRQHandler+0x3e2>
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4a70      	ldr	r2, [pc, #448]	; (8014aa8 <HAL_UART_IRQHandler+0x5a0>)
 80148e6:	4293      	cmp	r3, r2
 80148e8:	d106      	bne.n	80148f8 <HAL_UART_IRQHandler+0x3f0>
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	b29b      	uxth	r3, r3
 80148f6:	e005      	b.n	8014904 <HAL_UART_IRQHandler+0x3fc>
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	b29b      	uxth	r3, r3
 8014904:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801490c:	2b00      	cmp	r3, #0
 801490e:	f000 81ab 	beq.w	8014c68 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014918:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801491c:	429a      	cmp	r2, r3
 801491e:	f080 81a3 	bcs.w	8014c68 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014928:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014932:	69db      	ldr	r3, [r3, #28]
 8014934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014938:	f000 8087 	beq.w	8014a4a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014948:	e853 3f00 	ldrex	r3, [r3]
 801494c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	461a      	mov	r2, r3
 8014962:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801496a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801496e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014972:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014976:	e841 2300 	strex	r3, r2, [r1]
 801497a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801497e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014982:	2b00      	cmp	r3, #0
 8014984:	d1da      	bne.n	801493c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	3308      	adds	r3, #8
 801498c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801498e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014990:	e853 3f00 	ldrex	r3, [r3]
 8014994:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014998:	f023 0301 	bic.w	r3, r3, #1
 801499c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	3308      	adds	r3, #8
 80149a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80149aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80149ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80149b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80149b6:	e841 2300 	strex	r3, r2, [r1]
 80149ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80149bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d1e1      	bne.n	8014986 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	3308      	adds	r3, #8
 80149c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80149cc:	e853 3f00 	ldrex	r3, [r3]
 80149d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80149d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80149d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80149d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	3308      	adds	r3, #8
 80149e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80149e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80149e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80149ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80149ee:	e841 2300 	strex	r3, r2, [r1]
 80149f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80149f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d1e3      	bne.n	80149c2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2220      	movs	r2, #32
 80149fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	2200      	movs	r2, #0
 8014a06:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a10:	e853 3f00 	ldrex	r3, [r3]
 8014a14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014a18:	f023 0310 	bic.w	r3, r3, #16
 8014a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	461a      	mov	r2, r3
 8014a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8014a2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014a32:	e841 2300 	strex	r3, r2, [r1]
 8014a36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d1e4      	bne.n	8014a08 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7f3 ff41 	bl	80088cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2202      	movs	r2, #2
 8014a4e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a5c:	b29b      	uxth	r3, r3
 8014a5e:	1ad3      	subs	r3, r2, r3
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	4619      	mov	r1, r3
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f000 f91d 	bl	8014ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014a6a:	e0fd      	b.n	8014c68 <HAL_UART_IRQHandler+0x760>
 8014a6c:	40020010 	.word	0x40020010
 8014a70:	40020028 	.word	0x40020028
 8014a74:	40020040 	.word	0x40020040
 8014a78:	40020058 	.word	0x40020058
 8014a7c:	40020070 	.word	0x40020070
 8014a80:	40020088 	.word	0x40020088
 8014a84:	400200a0 	.word	0x400200a0
 8014a88:	400200b8 	.word	0x400200b8
 8014a8c:	40020410 	.word	0x40020410
 8014a90:	40020428 	.word	0x40020428
 8014a94:	40020440 	.word	0x40020440
 8014a98:	40020458 	.word	0x40020458
 8014a9c:	40020470 	.word	0x40020470
 8014aa0:	40020488 	.word	0x40020488
 8014aa4:	400204a0 	.word	0x400204a0
 8014aa8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ab8:	b29b      	uxth	r3, r3
 8014aba:	1ad3      	subs	r3, r2, r3
 8014abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f000 80cf 	beq.w	8014c6c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014ace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	f000 80ca 	beq.w	8014c6c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae0:	e853 3f00 	ldrex	r3, [r3]
 8014ae4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	461a      	mov	r2, r3
 8014af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014afa:	647b      	str	r3, [r7, #68]	; 0x44
 8014afc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014afe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014b00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b02:	e841 2300 	strex	r3, r2, [r1]
 8014b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d1e4      	bne.n	8014ad8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	3308      	adds	r3, #8
 8014b14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b18:	e853 3f00 	ldrex	r3, [r3]
 8014b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8014b1e:	6a3a      	ldr	r2, [r7, #32]
 8014b20:	4b55      	ldr	r3, [pc, #340]	; (8014c78 <HAL_UART_IRQHandler+0x770>)
 8014b22:	4013      	ands	r3, r2
 8014b24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	3308      	adds	r3, #8
 8014b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014b32:	633a      	str	r2, [r7, #48]	; 0x30
 8014b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b3a:	e841 2300 	strex	r3, r2, [r1]
 8014b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d1e3      	bne.n	8014b0e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2220      	movs	r2, #32
 8014b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2200      	movs	r2, #0
 8014b52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2200      	movs	r2, #0
 8014b58:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b60:	693b      	ldr	r3, [r7, #16]
 8014b62:	e853 3f00 	ldrex	r3, [r3]
 8014b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	f023 0310 	bic.w	r3, r3, #16
 8014b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	461a      	mov	r2, r3
 8014b78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014b7c:	61fb      	str	r3, [r7, #28]
 8014b7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b80:	69b9      	ldr	r1, [r7, #24]
 8014b82:	69fa      	ldr	r2, [r7, #28]
 8014b84:	e841 2300 	strex	r3, r2, [r1]
 8014b88:	617b      	str	r3, [r7, #20]
   return(result);
 8014b8a:	697b      	ldr	r3, [r7, #20]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d1e4      	bne.n	8014b5a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2202      	movs	r2, #2
 8014b94:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f000 f881 	bl	8014ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014ba2:	e063      	b.n	8014c6c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d00e      	beq.n	8014bce <HAL_UART_IRQHandler+0x6c6>
 8014bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d008      	beq.n	8014bce <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014bc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f001 fe80 	bl	80168cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014bcc:	e051      	b.n	8014c72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d014      	beq.n	8014c04 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d105      	bne.n	8014bf2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014bea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d008      	beq.n	8014c04 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d03a      	beq.n	8014c70 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	4798      	blx	r3
    }
    return;
 8014c02:	e035      	b.n	8014c70 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d009      	beq.n	8014c24 <HAL_UART_IRQHandler+0x71c>
 8014c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d003      	beq.n	8014c24 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f001 f90d 	bl	8015e3c <UART_EndTransmit_IT>
    return;
 8014c22:	e026      	b.n	8014c72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d009      	beq.n	8014c44 <HAL_UART_IRQHandler+0x73c>
 8014c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014c34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d003      	beq.n	8014c44 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f001 fe59 	bl	80168f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014c42:	e016      	b.n	8014c72 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d010      	beq.n	8014c72 <HAL_UART_IRQHandler+0x76a>
 8014c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	da0c      	bge.n	8014c72 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f001 fe41 	bl	80168e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014c5e:	e008      	b.n	8014c72 <HAL_UART_IRQHandler+0x76a>
      return;
 8014c60:	bf00      	nop
 8014c62:	e006      	b.n	8014c72 <HAL_UART_IRQHandler+0x76a>
    return;
 8014c64:	bf00      	nop
 8014c66:	e004      	b.n	8014c72 <HAL_UART_IRQHandler+0x76a>
      return;
 8014c68:	bf00      	nop
 8014c6a:	e002      	b.n	8014c72 <HAL_UART_IRQHandler+0x76a>
      return;
 8014c6c:	bf00      	nop
 8014c6e:	e000      	b.n	8014c72 <HAL_UART_IRQHandler+0x76a>
    return;
 8014c70:	bf00      	nop
  }
}
 8014c72:	37e8      	adds	r7, #232	; 0xe8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	effffffe 	.word	0xeffffffe

08014c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014c84:	bf00      	nop
 8014c86:	370c      	adds	r7, #12
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr

08014c90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b083      	sub	sp, #12
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014c98:	bf00      	nop
 8014c9a:	370c      	adds	r7, #12
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr

08014ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b083      	sub	sp, #12
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	460b      	mov	r3, r1
 8014cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014cb0:	bf00      	nop
 8014cb2:	370c      	adds	r7, #12
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr

08014cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014cc0:	b092      	sub	sp, #72	; 0x48
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	689a      	ldr	r2, [r3, #8]
 8014cd0:	697b      	ldr	r3, [r7, #20]
 8014cd2:	691b      	ldr	r3, [r3, #16]
 8014cd4:	431a      	orrs	r2, r3
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	695b      	ldr	r3, [r3, #20]
 8014cda:	431a      	orrs	r2, r3
 8014cdc:	697b      	ldr	r3, [r7, #20]
 8014cde:	69db      	ldr	r3, [r3, #28]
 8014ce0:	4313      	orrs	r3, r2
 8014ce2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014ce4:	697b      	ldr	r3, [r7, #20]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	681a      	ldr	r2, [r3, #0]
 8014cea:	4bbe      	ldr	r3, [pc, #760]	; (8014fe4 <UART_SetConfig+0x328>)
 8014cec:	4013      	ands	r3, r2
 8014cee:	697a      	ldr	r2, [r7, #20]
 8014cf0:	6812      	ldr	r2, [r2, #0]
 8014cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014cf4:	430b      	orrs	r3, r1
 8014cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	685b      	ldr	r3, [r3, #4]
 8014cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	68da      	ldr	r2, [r3, #12]
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	430a      	orrs	r2, r1
 8014d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	699b      	ldr	r3, [r3, #24]
 8014d12:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	4ab3      	ldr	r2, [pc, #716]	; (8014fe8 <UART_SetConfig+0x32c>)
 8014d1a:	4293      	cmp	r3, r2
 8014d1c:	d004      	beq.n	8014d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014d1e:	697b      	ldr	r3, [r7, #20]
 8014d20:	6a1b      	ldr	r3, [r3, #32]
 8014d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d24:	4313      	orrs	r3, r2
 8014d26:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014d28:	697b      	ldr	r3, [r7, #20]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	689a      	ldr	r2, [r3, #8]
 8014d2e:	4baf      	ldr	r3, [pc, #700]	; (8014fec <UART_SetConfig+0x330>)
 8014d30:	4013      	ands	r3, r2
 8014d32:	697a      	ldr	r2, [r7, #20]
 8014d34:	6812      	ldr	r2, [r2, #0]
 8014d36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014d38:	430b      	orrs	r3, r1
 8014d3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d42:	f023 010f 	bic.w	r1, r3, #15
 8014d46:	697b      	ldr	r3, [r7, #20]
 8014d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d4a:	697b      	ldr	r3, [r7, #20]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	430a      	orrs	r2, r1
 8014d50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	4aa6      	ldr	r2, [pc, #664]	; (8014ff0 <UART_SetConfig+0x334>)
 8014d58:	4293      	cmp	r3, r2
 8014d5a:	d177      	bne.n	8014e4c <UART_SetConfig+0x190>
 8014d5c:	4ba5      	ldr	r3, [pc, #660]	; (8014ff4 <UART_SetConfig+0x338>)
 8014d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014d64:	2b28      	cmp	r3, #40	; 0x28
 8014d66:	d86d      	bhi.n	8014e44 <UART_SetConfig+0x188>
 8014d68:	a201      	add	r2, pc, #4	; (adr r2, 8014d70 <UART_SetConfig+0xb4>)
 8014d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d6e:	bf00      	nop
 8014d70:	08014e15 	.word	0x08014e15
 8014d74:	08014e45 	.word	0x08014e45
 8014d78:	08014e45 	.word	0x08014e45
 8014d7c:	08014e45 	.word	0x08014e45
 8014d80:	08014e45 	.word	0x08014e45
 8014d84:	08014e45 	.word	0x08014e45
 8014d88:	08014e45 	.word	0x08014e45
 8014d8c:	08014e45 	.word	0x08014e45
 8014d90:	08014e1d 	.word	0x08014e1d
 8014d94:	08014e45 	.word	0x08014e45
 8014d98:	08014e45 	.word	0x08014e45
 8014d9c:	08014e45 	.word	0x08014e45
 8014da0:	08014e45 	.word	0x08014e45
 8014da4:	08014e45 	.word	0x08014e45
 8014da8:	08014e45 	.word	0x08014e45
 8014dac:	08014e45 	.word	0x08014e45
 8014db0:	08014e25 	.word	0x08014e25
 8014db4:	08014e45 	.word	0x08014e45
 8014db8:	08014e45 	.word	0x08014e45
 8014dbc:	08014e45 	.word	0x08014e45
 8014dc0:	08014e45 	.word	0x08014e45
 8014dc4:	08014e45 	.word	0x08014e45
 8014dc8:	08014e45 	.word	0x08014e45
 8014dcc:	08014e45 	.word	0x08014e45
 8014dd0:	08014e2d 	.word	0x08014e2d
 8014dd4:	08014e45 	.word	0x08014e45
 8014dd8:	08014e45 	.word	0x08014e45
 8014ddc:	08014e45 	.word	0x08014e45
 8014de0:	08014e45 	.word	0x08014e45
 8014de4:	08014e45 	.word	0x08014e45
 8014de8:	08014e45 	.word	0x08014e45
 8014dec:	08014e45 	.word	0x08014e45
 8014df0:	08014e35 	.word	0x08014e35
 8014df4:	08014e45 	.word	0x08014e45
 8014df8:	08014e45 	.word	0x08014e45
 8014dfc:	08014e45 	.word	0x08014e45
 8014e00:	08014e45 	.word	0x08014e45
 8014e04:	08014e45 	.word	0x08014e45
 8014e08:	08014e45 	.word	0x08014e45
 8014e0c:	08014e45 	.word	0x08014e45
 8014e10:	08014e3d 	.word	0x08014e3d
 8014e14:	2301      	movs	r3, #1
 8014e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e1a:	e222      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e1c:	2304      	movs	r3, #4
 8014e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e22:	e21e      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e24:	2308      	movs	r3, #8
 8014e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e2a:	e21a      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e2c:	2310      	movs	r3, #16
 8014e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e32:	e216      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e34:	2320      	movs	r3, #32
 8014e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e3a:	e212      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e3c:	2340      	movs	r3, #64	; 0x40
 8014e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e42:	e20e      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e44:	2380      	movs	r3, #128	; 0x80
 8014e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e4a:	e20a      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4a69      	ldr	r2, [pc, #420]	; (8014ff8 <UART_SetConfig+0x33c>)
 8014e52:	4293      	cmp	r3, r2
 8014e54:	d130      	bne.n	8014eb8 <UART_SetConfig+0x1fc>
 8014e56:	4b67      	ldr	r3, [pc, #412]	; (8014ff4 <UART_SetConfig+0x338>)
 8014e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e5a:	f003 0307 	and.w	r3, r3, #7
 8014e5e:	2b05      	cmp	r3, #5
 8014e60:	d826      	bhi.n	8014eb0 <UART_SetConfig+0x1f4>
 8014e62:	a201      	add	r2, pc, #4	; (adr r2, 8014e68 <UART_SetConfig+0x1ac>)
 8014e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e68:	08014e81 	.word	0x08014e81
 8014e6c:	08014e89 	.word	0x08014e89
 8014e70:	08014e91 	.word	0x08014e91
 8014e74:	08014e99 	.word	0x08014e99
 8014e78:	08014ea1 	.word	0x08014ea1
 8014e7c:	08014ea9 	.word	0x08014ea9
 8014e80:	2300      	movs	r3, #0
 8014e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e86:	e1ec      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e88:	2304      	movs	r3, #4
 8014e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e8e:	e1e8      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e90:	2308      	movs	r3, #8
 8014e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e96:	e1e4      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014e98:	2310      	movs	r3, #16
 8014e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e9e:	e1e0      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014ea0:	2320      	movs	r3, #32
 8014ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ea6:	e1dc      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014ea8:	2340      	movs	r3, #64	; 0x40
 8014eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eae:	e1d8      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014eb0:	2380      	movs	r3, #128	; 0x80
 8014eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eb6:	e1d4      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	4a4f      	ldr	r2, [pc, #316]	; (8014ffc <UART_SetConfig+0x340>)
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	d130      	bne.n	8014f24 <UART_SetConfig+0x268>
 8014ec2:	4b4c      	ldr	r3, [pc, #304]	; (8014ff4 <UART_SetConfig+0x338>)
 8014ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ec6:	f003 0307 	and.w	r3, r3, #7
 8014eca:	2b05      	cmp	r3, #5
 8014ecc:	d826      	bhi.n	8014f1c <UART_SetConfig+0x260>
 8014ece:	a201      	add	r2, pc, #4	; (adr r2, 8014ed4 <UART_SetConfig+0x218>)
 8014ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ed4:	08014eed 	.word	0x08014eed
 8014ed8:	08014ef5 	.word	0x08014ef5
 8014edc:	08014efd 	.word	0x08014efd
 8014ee0:	08014f05 	.word	0x08014f05
 8014ee4:	08014f0d 	.word	0x08014f0d
 8014ee8:	08014f15 	.word	0x08014f15
 8014eec:	2300      	movs	r3, #0
 8014eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ef2:	e1b6      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014ef4:	2304      	movs	r3, #4
 8014ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014efa:	e1b2      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014efc:	2308      	movs	r3, #8
 8014efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f02:	e1ae      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f04:	2310      	movs	r3, #16
 8014f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f0a:	e1aa      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f0c:	2320      	movs	r3, #32
 8014f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f12:	e1a6      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f14:	2340      	movs	r3, #64	; 0x40
 8014f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f1a:	e1a2      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f1c:	2380      	movs	r3, #128	; 0x80
 8014f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f22:	e19e      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	4a35      	ldr	r2, [pc, #212]	; (8015000 <UART_SetConfig+0x344>)
 8014f2a:	4293      	cmp	r3, r2
 8014f2c:	d130      	bne.n	8014f90 <UART_SetConfig+0x2d4>
 8014f2e:	4b31      	ldr	r3, [pc, #196]	; (8014ff4 <UART_SetConfig+0x338>)
 8014f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f32:	f003 0307 	and.w	r3, r3, #7
 8014f36:	2b05      	cmp	r3, #5
 8014f38:	d826      	bhi.n	8014f88 <UART_SetConfig+0x2cc>
 8014f3a:	a201      	add	r2, pc, #4	; (adr r2, 8014f40 <UART_SetConfig+0x284>)
 8014f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f40:	08014f59 	.word	0x08014f59
 8014f44:	08014f61 	.word	0x08014f61
 8014f48:	08014f69 	.word	0x08014f69
 8014f4c:	08014f71 	.word	0x08014f71
 8014f50:	08014f79 	.word	0x08014f79
 8014f54:	08014f81 	.word	0x08014f81
 8014f58:	2300      	movs	r3, #0
 8014f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f5e:	e180      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f60:	2304      	movs	r3, #4
 8014f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f66:	e17c      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f68:	2308      	movs	r3, #8
 8014f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f6e:	e178      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f70:	2310      	movs	r3, #16
 8014f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f76:	e174      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f78:	2320      	movs	r3, #32
 8014f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f7e:	e170      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f80:	2340      	movs	r3, #64	; 0x40
 8014f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f86:	e16c      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f88:	2380      	movs	r3, #128	; 0x80
 8014f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f8e:	e168      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	4a1b      	ldr	r2, [pc, #108]	; (8015004 <UART_SetConfig+0x348>)
 8014f96:	4293      	cmp	r3, r2
 8014f98:	d142      	bne.n	8015020 <UART_SetConfig+0x364>
 8014f9a:	4b16      	ldr	r3, [pc, #88]	; (8014ff4 <UART_SetConfig+0x338>)
 8014f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f9e:	f003 0307 	and.w	r3, r3, #7
 8014fa2:	2b05      	cmp	r3, #5
 8014fa4:	d838      	bhi.n	8015018 <UART_SetConfig+0x35c>
 8014fa6:	a201      	add	r2, pc, #4	; (adr r2, 8014fac <UART_SetConfig+0x2f0>)
 8014fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fac:	08014fc5 	.word	0x08014fc5
 8014fb0:	08014fcd 	.word	0x08014fcd
 8014fb4:	08014fd5 	.word	0x08014fd5
 8014fb8:	08014fdd 	.word	0x08014fdd
 8014fbc:	08015009 	.word	0x08015009
 8014fc0:	08015011 	.word	0x08015011
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fca:	e14a      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014fcc:	2304      	movs	r3, #4
 8014fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fd2:	e146      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014fd4:	2308      	movs	r3, #8
 8014fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fda:	e142      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014fdc:	2310      	movs	r3, #16
 8014fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fe2:	e13e      	b.n	8015262 <UART_SetConfig+0x5a6>
 8014fe4:	cfff69f3 	.word	0xcfff69f3
 8014fe8:	58000c00 	.word	0x58000c00
 8014fec:	11fff4ff 	.word	0x11fff4ff
 8014ff0:	40011000 	.word	0x40011000
 8014ff4:	58024400 	.word	0x58024400
 8014ff8:	40004400 	.word	0x40004400
 8014ffc:	40004800 	.word	0x40004800
 8015000:	40004c00 	.word	0x40004c00
 8015004:	40005000 	.word	0x40005000
 8015008:	2320      	movs	r3, #32
 801500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801500e:	e128      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015010:	2340      	movs	r3, #64	; 0x40
 8015012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015016:	e124      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015018:	2380      	movs	r3, #128	; 0x80
 801501a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801501e:	e120      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	4acb      	ldr	r2, [pc, #812]	; (8015354 <UART_SetConfig+0x698>)
 8015026:	4293      	cmp	r3, r2
 8015028:	d176      	bne.n	8015118 <UART_SetConfig+0x45c>
 801502a:	4bcb      	ldr	r3, [pc, #812]	; (8015358 <UART_SetConfig+0x69c>)
 801502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801502e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015032:	2b28      	cmp	r3, #40	; 0x28
 8015034:	d86c      	bhi.n	8015110 <UART_SetConfig+0x454>
 8015036:	a201      	add	r2, pc, #4	; (adr r2, 801503c <UART_SetConfig+0x380>)
 8015038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801503c:	080150e1 	.word	0x080150e1
 8015040:	08015111 	.word	0x08015111
 8015044:	08015111 	.word	0x08015111
 8015048:	08015111 	.word	0x08015111
 801504c:	08015111 	.word	0x08015111
 8015050:	08015111 	.word	0x08015111
 8015054:	08015111 	.word	0x08015111
 8015058:	08015111 	.word	0x08015111
 801505c:	080150e9 	.word	0x080150e9
 8015060:	08015111 	.word	0x08015111
 8015064:	08015111 	.word	0x08015111
 8015068:	08015111 	.word	0x08015111
 801506c:	08015111 	.word	0x08015111
 8015070:	08015111 	.word	0x08015111
 8015074:	08015111 	.word	0x08015111
 8015078:	08015111 	.word	0x08015111
 801507c:	080150f1 	.word	0x080150f1
 8015080:	08015111 	.word	0x08015111
 8015084:	08015111 	.word	0x08015111
 8015088:	08015111 	.word	0x08015111
 801508c:	08015111 	.word	0x08015111
 8015090:	08015111 	.word	0x08015111
 8015094:	08015111 	.word	0x08015111
 8015098:	08015111 	.word	0x08015111
 801509c:	080150f9 	.word	0x080150f9
 80150a0:	08015111 	.word	0x08015111
 80150a4:	08015111 	.word	0x08015111
 80150a8:	08015111 	.word	0x08015111
 80150ac:	08015111 	.word	0x08015111
 80150b0:	08015111 	.word	0x08015111
 80150b4:	08015111 	.word	0x08015111
 80150b8:	08015111 	.word	0x08015111
 80150bc:	08015101 	.word	0x08015101
 80150c0:	08015111 	.word	0x08015111
 80150c4:	08015111 	.word	0x08015111
 80150c8:	08015111 	.word	0x08015111
 80150cc:	08015111 	.word	0x08015111
 80150d0:	08015111 	.word	0x08015111
 80150d4:	08015111 	.word	0x08015111
 80150d8:	08015111 	.word	0x08015111
 80150dc:	08015109 	.word	0x08015109
 80150e0:	2301      	movs	r3, #1
 80150e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150e6:	e0bc      	b.n	8015262 <UART_SetConfig+0x5a6>
 80150e8:	2304      	movs	r3, #4
 80150ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ee:	e0b8      	b.n	8015262 <UART_SetConfig+0x5a6>
 80150f0:	2308      	movs	r3, #8
 80150f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150f6:	e0b4      	b.n	8015262 <UART_SetConfig+0x5a6>
 80150f8:	2310      	movs	r3, #16
 80150fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150fe:	e0b0      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015100:	2320      	movs	r3, #32
 8015102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015106:	e0ac      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015108:	2340      	movs	r3, #64	; 0x40
 801510a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801510e:	e0a8      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015110:	2380      	movs	r3, #128	; 0x80
 8015112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015116:	e0a4      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	4a8f      	ldr	r2, [pc, #572]	; (801535c <UART_SetConfig+0x6a0>)
 801511e:	4293      	cmp	r3, r2
 8015120:	d130      	bne.n	8015184 <UART_SetConfig+0x4c8>
 8015122:	4b8d      	ldr	r3, [pc, #564]	; (8015358 <UART_SetConfig+0x69c>)
 8015124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015126:	f003 0307 	and.w	r3, r3, #7
 801512a:	2b05      	cmp	r3, #5
 801512c:	d826      	bhi.n	801517c <UART_SetConfig+0x4c0>
 801512e:	a201      	add	r2, pc, #4	; (adr r2, 8015134 <UART_SetConfig+0x478>)
 8015130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015134:	0801514d 	.word	0x0801514d
 8015138:	08015155 	.word	0x08015155
 801513c:	0801515d 	.word	0x0801515d
 8015140:	08015165 	.word	0x08015165
 8015144:	0801516d 	.word	0x0801516d
 8015148:	08015175 	.word	0x08015175
 801514c:	2300      	movs	r3, #0
 801514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015152:	e086      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015154:	2304      	movs	r3, #4
 8015156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801515a:	e082      	b.n	8015262 <UART_SetConfig+0x5a6>
 801515c:	2308      	movs	r3, #8
 801515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015162:	e07e      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015164:	2310      	movs	r3, #16
 8015166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801516a:	e07a      	b.n	8015262 <UART_SetConfig+0x5a6>
 801516c:	2320      	movs	r3, #32
 801516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015172:	e076      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015174:	2340      	movs	r3, #64	; 0x40
 8015176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801517a:	e072      	b.n	8015262 <UART_SetConfig+0x5a6>
 801517c:	2380      	movs	r3, #128	; 0x80
 801517e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015182:	e06e      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	4a75      	ldr	r2, [pc, #468]	; (8015360 <UART_SetConfig+0x6a4>)
 801518a:	4293      	cmp	r3, r2
 801518c:	d130      	bne.n	80151f0 <UART_SetConfig+0x534>
 801518e:	4b72      	ldr	r3, [pc, #456]	; (8015358 <UART_SetConfig+0x69c>)
 8015190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015192:	f003 0307 	and.w	r3, r3, #7
 8015196:	2b05      	cmp	r3, #5
 8015198:	d826      	bhi.n	80151e8 <UART_SetConfig+0x52c>
 801519a:	a201      	add	r2, pc, #4	; (adr r2, 80151a0 <UART_SetConfig+0x4e4>)
 801519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151a0:	080151b9 	.word	0x080151b9
 80151a4:	080151c1 	.word	0x080151c1
 80151a8:	080151c9 	.word	0x080151c9
 80151ac:	080151d1 	.word	0x080151d1
 80151b0:	080151d9 	.word	0x080151d9
 80151b4:	080151e1 	.word	0x080151e1
 80151b8:	2300      	movs	r3, #0
 80151ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151be:	e050      	b.n	8015262 <UART_SetConfig+0x5a6>
 80151c0:	2304      	movs	r3, #4
 80151c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151c6:	e04c      	b.n	8015262 <UART_SetConfig+0x5a6>
 80151c8:	2308      	movs	r3, #8
 80151ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ce:	e048      	b.n	8015262 <UART_SetConfig+0x5a6>
 80151d0:	2310      	movs	r3, #16
 80151d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151d6:	e044      	b.n	8015262 <UART_SetConfig+0x5a6>
 80151d8:	2320      	movs	r3, #32
 80151da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151de:	e040      	b.n	8015262 <UART_SetConfig+0x5a6>
 80151e0:	2340      	movs	r3, #64	; 0x40
 80151e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151e6:	e03c      	b.n	8015262 <UART_SetConfig+0x5a6>
 80151e8:	2380      	movs	r3, #128	; 0x80
 80151ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ee:	e038      	b.n	8015262 <UART_SetConfig+0x5a6>
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	4a5b      	ldr	r2, [pc, #364]	; (8015364 <UART_SetConfig+0x6a8>)
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d130      	bne.n	801525c <UART_SetConfig+0x5a0>
 80151fa:	4b57      	ldr	r3, [pc, #348]	; (8015358 <UART_SetConfig+0x69c>)
 80151fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80151fe:	f003 0307 	and.w	r3, r3, #7
 8015202:	2b05      	cmp	r3, #5
 8015204:	d826      	bhi.n	8015254 <UART_SetConfig+0x598>
 8015206:	a201      	add	r2, pc, #4	; (adr r2, 801520c <UART_SetConfig+0x550>)
 8015208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801520c:	08015225 	.word	0x08015225
 8015210:	0801522d 	.word	0x0801522d
 8015214:	08015235 	.word	0x08015235
 8015218:	0801523d 	.word	0x0801523d
 801521c:	08015245 	.word	0x08015245
 8015220:	0801524d 	.word	0x0801524d
 8015224:	2302      	movs	r3, #2
 8015226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801522a:	e01a      	b.n	8015262 <UART_SetConfig+0x5a6>
 801522c:	2304      	movs	r3, #4
 801522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015232:	e016      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015234:	2308      	movs	r3, #8
 8015236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801523a:	e012      	b.n	8015262 <UART_SetConfig+0x5a6>
 801523c:	2310      	movs	r3, #16
 801523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015242:	e00e      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015244:	2320      	movs	r3, #32
 8015246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801524a:	e00a      	b.n	8015262 <UART_SetConfig+0x5a6>
 801524c:	2340      	movs	r3, #64	; 0x40
 801524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015252:	e006      	b.n	8015262 <UART_SetConfig+0x5a6>
 8015254:	2380      	movs	r3, #128	; 0x80
 8015256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801525a:	e002      	b.n	8015262 <UART_SetConfig+0x5a6>
 801525c:	2380      	movs	r3, #128	; 0x80
 801525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	4a3f      	ldr	r2, [pc, #252]	; (8015364 <UART_SetConfig+0x6a8>)
 8015268:	4293      	cmp	r3, r2
 801526a:	f040 80f8 	bne.w	801545e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801526e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015272:	2b20      	cmp	r3, #32
 8015274:	dc46      	bgt.n	8015304 <UART_SetConfig+0x648>
 8015276:	2b02      	cmp	r3, #2
 8015278:	f2c0 8082 	blt.w	8015380 <UART_SetConfig+0x6c4>
 801527c:	3b02      	subs	r3, #2
 801527e:	2b1e      	cmp	r3, #30
 8015280:	d87e      	bhi.n	8015380 <UART_SetConfig+0x6c4>
 8015282:	a201      	add	r2, pc, #4	; (adr r2, 8015288 <UART_SetConfig+0x5cc>)
 8015284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015288:	0801530b 	.word	0x0801530b
 801528c:	08015381 	.word	0x08015381
 8015290:	08015313 	.word	0x08015313
 8015294:	08015381 	.word	0x08015381
 8015298:	08015381 	.word	0x08015381
 801529c:	08015381 	.word	0x08015381
 80152a0:	08015323 	.word	0x08015323
 80152a4:	08015381 	.word	0x08015381
 80152a8:	08015381 	.word	0x08015381
 80152ac:	08015381 	.word	0x08015381
 80152b0:	08015381 	.word	0x08015381
 80152b4:	08015381 	.word	0x08015381
 80152b8:	08015381 	.word	0x08015381
 80152bc:	08015381 	.word	0x08015381
 80152c0:	08015333 	.word	0x08015333
 80152c4:	08015381 	.word	0x08015381
 80152c8:	08015381 	.word	0x08015381
 80152cc:	08015381 	.word	0x08015381
 80152d0:	08015381 	.word	0x08015381
 80152d4:	08015381 	.word	0x08015381
 80152d8:	08015381 	.word	0x08015381
 80152dc:	08015381 	.word	0x08015381
 80152e0:	08015381 	.word	0x08015381
 80152e4:	08015381 	.word	0x08015381
 80152e8:	08015381 	.word	0x08015381
 80152ec:	08015381 	.word	0x08015381
 80152f0:	08015381 	.word	0x08015381
 80152f4:	08015381 	.word	0x08015381
 80152f8:	08015381 	.word	0x08015381
 80152fc:	08015381 	.word	0x08015381
 8015300:	08015373 	.word	0x08015373
 8015304:	2b40      	cmp	r3, #64	; 0x40
 8015306:	d037      	beq.n	8015378 <UART_SetConfig+0x6bc>
 8015308:	e03a      	b.n	8015380 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801530a:	f7fb fc17 	bl	8010b3c <HAL_RCCEx_GetD3PCLK1Freq>
 801530e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015310:	e03c      	b.n	801538c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015316:	4618      	mov	r0, r3
 8015318:	f7fb fc26 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801531e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015320:	e034      	b.n	801538c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015322:	f107 0318 	add.w	r3, r7, #24
 8015326:	4618      	mov	r0, r3
 8015328:	f7fb fd72 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015330:	e02c      	b.n	801538c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015332:	4b09      	ldr	r3, [pc, #36]	; (8015358 <UART_SetConfig+0x69c>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	f003 0320 	and.w	r3, r3, #32
 801533a:	2b00      	cmp	r3, #0
 801533c:	d016      	beq.n	801536c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801533e:	4b06      	ldr	r3, [pc, #24]	; (8015358 <UART_SetConfig+0x69c>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	08db      	lsrs	r3, r3, #3
 8015344:	f003 0303 	and.w	r3, r3, #3
 8015348:	4a07      	ldr	r2, [pc, #28]	; (8015368 <UART_SetConfig+0x6ac>)
 801534a:	fa22 f303 	lsr.w	r3, r2, r3
 801534e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015350:	e01c      	b.n	801538c <UART_SetConfig+0x6d0>
 8015352:	bf00      	nop
 8015354:	40011400 	.word	0x40011400
 8015358:	58024400 	.word	0x58024400
 801535c:	40007800 	.word	0x40007800
 8015360:	40007c00 	.word	0x40007c00
 8015364:	58000c00 	.word	0x58000c00
 8015368:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801536c:	4b9d      	ldr	r3, [pc, #628]	; (80155e4 <UART_SetConfig+0x928>)
 801536e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015370:	e00c      	b.n	801538c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015372:	4b9d      	ldr	r3, [pc, #628]	; (80155e8 <UART_SetConfig+0x92c>)
 8015374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015376:	e009      	b.n	801538c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801537c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801537e:	e005      	b.n	801538c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015380:	2300      	movs	r3, #0
 8015382:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015384:	2301      	movs	r3, #1
 8015386:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801538a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801538e:	2b00      	cmp	r3, #0
 8015390:	f000 81de 	beq.w	8015750 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015398:	4a94      	ldr	r2, [pc, #592]	; (80155ec <UART_SetConfig+0x930>)
 801539a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801539e:	461a      	mov	r2, r3
 80153a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80153a6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	685a      	ldr	r2, [r3, #4]
 80153ac:	4613      	mov	r3, r2
 80153ae:	005b      	lsls	r3, r3, #1
 80153b0:	4413      	add	r3, r2
 80153b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153b4:	429a      	cmp	r2, r3
 80153b6:	d305      	bcc.n	80153c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80153be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d903      	bls.n	80153cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80153c4:	2301      	movs	r3, #1
 80153c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80153ca:	e1c1      	b.n	8015750 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80153cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153ce:	2200      	movs	r2, #0
 80153d0:	60bb      	str	r3, [r7, #8]
 80153d2:	60fa      	str	r2, [r7, #12]
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153d8:	4a84      	ldr	r2, [pc, #528]	; (80155ec <UART_SetConfig+0x930>)
 80153da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	2200      	movs	r2, #0
 80153e2:	603b      	str	r3, [r7, #0]
 80153e4:	607a      	str	r2, [r7, #4]
 80153e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80153ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80153ee:	f7ea ff77 	bl	80002e0 <__aeabi_uldivmod>
 80153f2:	4602      	mov	r2, r0
 80153f4:	460b      	mov	r3, r1
 80153f6:	4610      	mov	r0, r2
 80153f8:	4619      	mov	r1, r3
 80153fa:	f04f 0200 	mov.w	r2, #0
 80153fe:	f04f 0300 	mov.w	r3, #0
 8015402:	020b      	lsls	r3, r1, #8
 8015404:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015408:	0202      	lsls	r2, r0, #8
 801540a:	6979      	ldr	r1, [r7, #20]
 801540c:	6849      	ldr	r1, [r1, #4]
 801540e:	0849      	lsrs	r1, r1, #1
 8015410:	2000      	movs	r0, #0
 8015412:	460c      	mov	r4, r1
 8015414:	4605      	mov	r5, r0
 8015416:	eb12 0804 	adds.w	r8, r2, r4
 801541a:	eb43 0905 	adc.w	r9, r3, r5
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	2200      	movs	r2, #0
 8015424:	469a      	mov	sl, r3
 8015426:	4693      	mov	fp, r2
 8015428:	4652      	mov	r2, sl
 801542a:	465b      	mov	r3, fp
 801542c:	4640      	mov	r0, r8
 801542e:	4649      	mov	r1, r9
 8015430:	f7ea ff56 	bl	80002e0 <__aeabi_uldivmod>
 8015434:	4602      	mov	r2, r0
 8015436:	460b      	mov	r3, r1
 8015438:	4613      	mov	r3, r2
 801543a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801543e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015442:	d308      	bcc.n	8015456 <UART_SetConfig+0x79a>
 8015444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801544a:	d204      	bcs.n	8015456 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015452:	60da      	str	r2, [r3, #12]
 8015454:	e17c      	b.n	8015750 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8015456:	2301      	movs	r3, #1
 8015458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801545c:	e178      	b.n	8015750 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	69db      	ldr	r3, [r3, #28]
 8015462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015466:	f040 80c5 	bne.w	80155f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801546a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801546e:	2b20      	cmp	r3, #32
 8015470:	dc48      	bgt.n	8015504 <UART_SetConfig+0x848>
 8015472:	2b00      	cmp	r3, #0
 8015474:	db7b      	blt.n	801556e <UART_SetConfig+0x8b2>
 8015476:	2b20      	cmp	r3, #32
 8015478:	d879      	bhi.n	801556e <UART_SetConfig+0x8b2>
 801547a:	a201      	add	r2, pc, #4	; (adr r2, 8015480 <UART_SetConfig+0x7c4>)
 801547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015480:	0801550b 	.word	0x0801550b
 8015484:	08015513 	.word	0x08015513
 8015488:	0801556f 	.word	0x0801556f
 801548c:	0801556f 	.word	0x0801556f
 8015490:	0801551b 	.word	0x0801551b
 8015494:	0801556f 	.word	0x0801556f
 8015498:	0801556f 	.word	0x0801556f
 801549c:	0801556f 	.word	0x0801556f
 80154a0:	0801552b 	.word	0x0801552b
 80154a4:	0801556f 	.word	0x0801556f
 80154a8:	0801556f 	.word	0x0801556f
 80154ac:	0801556f 	.word	0x0801556f
 80154b0:	0801556f 	.word	0x0801556f
 80154b4:	0801556f 	.word	0x0801556f
 80154b8:	0801556f 	.word	0x0801556f
 80154bc:	0801556f 	.word	0x0801556f
 80154c0:	0801553b 	.word	0x0801553b
 80154c4:	0801556f 	.word	0x0801556f
 80154c8:	0801556f 	.word	0x0801556f
 80154cc:	0801556f 	.word	0x0801556f
 80154d0:	0801556f 	.word	0x0801556f
 80154d4:	0801556f 	.word	0x0801556f
 80154d8:	0801556f 	.word	0x0801556f
 80154dc:	0801556f 	.word	0x0801556f
 80154e0:	0801556f 	.word	0x0801556f
 80154e4:	0801556f 	.word	0x0801556f
 80154e8:	0801556f 	.word	0x0801556f
 80154ec:	0801556f 	.word	0x0801556f
 80154f0:	0801556f 	.word	0x0801556f
 80154f4:	0801556f 	.word	0x0801556f
 80154f8:	0801556f 	.word	0x0801556f
 80154fc:	0801556f 	.word	0x0801556f
 8015500:	08015561 	.word	0x08015561
 8015504:	2b40      	cmp	r3, #64	; 0x40
 8015506:	d02e      	beq.n	8015566 <UART_SetConfig+0x8aa>
 8015508:	e031      	b.n	801556e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801550a:	f7f9 fb1f 	bl	800eb4c <HAL_RCC_GetPCLK1Freq>
 801550e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015510:	e033      	b.n	801557a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015512:	f7f9 fb31 	bl	800eb78 <HAL_RCC_GetPCLK2Freq>
 8015516:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015518:	e02f      	b.n	801557a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801551a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801551e:	4618      	mov	r0, r3
 8015520:	f7fb fb22 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015528:	e027      	b.n	801557a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801552a:	f107 0318 	add.w	r3, r7, #24
 801552e:	4618      	mov	r0, r3
 8015530:	f7fb fc6e 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015534:	69fb      	ldr	r3, [r7, #28]
 8015536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015538:	e01f      	b.n	801557a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801553a:	4b2d      	ldr	r3, [pc, #180]	; (80155f0 <UART_SetConfig+0x934>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f003 0320 	and.w	r3, r3, #32
 8015542:	2b00      	cmp	r3, #0
 8015544:	d009      	beq.n	801555a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015546:	4b2a      	ldr	r3, [pc, #168]	; (80155f0 <UART_SetConfig+0x934>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	08db      	lsrs	r3, r3, #3
 801554c:	f003 0303 	and.w	r3, r3, #3
 8015550:	4a24      	ldr	r2, [pc, #144]	; (80155e4 <UART_SetConfig+0x928>)
 8015552:	fa22 f303 	lsr.w	r3, r2, r3
 8015556:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015558:	e00f      	b.n	801557a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801555a:	4b22      	ldr	r3, [pc, #136]	; (80155e4 <UART_SetConfig+0x928>)
 801555c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801555e:	e00c      	b.n	801557a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015560:	4b21      	ldr	r3, [pc, #132]	; (80155e8 <UART_SetConfig+0x92c>)
 8015562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015564:	e009      	b.n	801557a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801556a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801556c:	e005      	b.n	801557a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801556e:	2300      	movs	r3, #0
 8015570:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015572:	2301      	movs	r3, #1
 8015574:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015578:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801557c:	2b00      	cmp	r3, #0
 801557e:	f000 80e7 	beq.w	8015750 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015586:	4a19      	ldr	r2, [pc, #100]	; (80155ec <UART_SetConfig+0x930>)
 8015588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801558c:	461a      	mov	r2, r3
 801558e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015590:	fbb3 f3f2 	udiv	r3, r3, r2
 8015594:	005a      	lsls	r2, r3, #1
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	085b      	lsrs	r3, r3, #1
 801559c:	441a      	add	r2, r3
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80155a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80155a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155aa:	2b0f      	cmp	r3, #15
 80155ac:	d916      	bls.n	80155dc <UART_SetConfig+0x920>
 80155ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155b4:	d212      	bcs.n	80155dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80155b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	f023 030f 	bic.w	r3, r3, #15
 80155be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80155c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155c2:	085b      	lsrs	r3, r3, #1
 80155c4:	b29b      	uxth	r3, r3
 80155c6:	f003 0307 	and.w	r3, r3, #7
 80155ca:	b29a      	uxth	r2, r3
 80155cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80155ce:	4313      	orrs	r3, r2
 80155d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80155d8:	60da      	str	r2, [r3, #12]
 80155da:	e0b9      	b.n	8015750 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80155dc:	2301      	movs	r3, #1
 80155de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80155e2:	e0b5      	b.n	8015750 <UART_SetConfig+0xa94>
 80155e4:	03d09000 	.word	0x03d09000
 80155e8:	003d0900 	.word	0x003d0900
 80155ec:	0801aedc 	.word	0x0801aedc
 80155f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80155f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80155f8:	2b20      	cmp	r3, #32
 80155fa:	dc49      	bgt.n	8015690 <UART_SetConfig+0x9d4>
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	db7c      	blt.n	80156fa <UART_SetConfig+0xa3e>
 8015600:	2b20      	cmp	r3, #32
 8015602:	d87a      	bhi.n	80156fa <UART_SetConfig+0xa3e>
 8015604:	a201      	add	r2, pc, #4	; (adr r2, 801560c <UART_SetConfig+0x950>)
 8015606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801560a:	bf00      	nop
 801560c:	08015697 	.word	0x08015697
 8015610:	0801569f 	.word	0x0801569f
 8015614:	080156fb 	.word	0x080156fb
 8015618:	080156fb 	.word	0x080156fb
 801561c:	080156a7 	.word	0x080156a7
 8015620:	080156fb 	.word	0x080156fb
 8015624:	080156fb 	.word	0x080156fb
 8015628:	080156fb 	.word	0x080156fb
 801562c:	080156b7 	.word	0x080156b7
 8015630:	080156fb 	.word	0x080156fb
 8015634:	080156fb 	.word	0x080156fb
 8015638:	080156fb 	.word	0x080156fb
 801563c:	080156fb 	.word	0x080156fb
 8015640:	080156fb 	.word	0x080156fb
 8015644:	080156fb 	.word	0x080156fb
 8015648:	080156fb 	.word	0x080156fb
 801564c:	080156c7 	.word	0x080156c7
 8015650:	080156fb 	.word	0x080156fb
 8015654:	080156fb 	.word	0x080156fb
 8015658:	080156fb 	.word	0x080156fb
 801565c:	080156fb 	.word	0x080156fb
 8015660:	080156fb 	.word	0x080156fb
 8015664:	080156fb 	.word	0x080156fb
 8015668:	080156fb 	.word	0x080156fb
 801566c:	080156fb 	.word	0x080156fb
 8015670:	080156fb 	.word	0x080156fb
 8015674:	080156fb 	.word	0x080156fb
 8015678:	080156fb 	.word	0x080156fb
 801567c:	080156fb 	.word	0x080156fb
 8015680:	080156fb 	.word	0x080156fb
 8015684:	080156fb 	.word	0x080156fb
 8015688:	080156fb 	.word	0x080156fb
 801568c:	080156ed 	.word	0x080156ed
 8015690:	2b40      	cmp	r3, #64	; 0x40
 8015692:	d02e      	beq.n	80156f2 <UART_SetConfig+0xa36>
 8015694:	e031      	b.n	80156fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015696:	f7f9 fa59 	bl	800eb4c <HAL_RCC_GetPCLK1Freq>
 801569a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801569c:	e033      	b.n	8015706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801569e:	f7f9 fa6b 	bl	800eb78 <HAL_RCC_GetPCLK2Freq>
 80156a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80156a4:	e02f      	b.n	8015706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80156a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7fb fa5c 	bl	8010b68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80156b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80156b4:	e027      	b.n	8015706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80156b6:	f107 0318 	add.w	r3, r7, #24
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7fb fba8 	bl	8010e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80156c0:	69fb      	ldr	r3, [r7, #28]
 80156c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80156c4:	e01f      	b.n	8015706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80156c6:	4b2d      	ldr	r3, [pc, #180]	; (801577c <UART_SetConfig+0xac0>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	f003 0320 	and.w	r3, r3, #32
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d009      	beq.n	80156e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80156d2:	4b2a      	ldr	r3, [pc, #168]	; (801577c <UART_SetConfig+0xac0>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	08db      	lsrs	r3, r3, #3
 80156d8:	f003 0303 	and.w	r3, r3, #3
 80156dc:	4a28      	ldr	r2, [pc, #160]	; (8015780 <UART_SetConfig+0xac4>)
 80156de:	fa22 f303 	lsr.w	r3, r2, r3
 80156e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80156e4:	e00f      	b.n	8015706 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80156e6:	4b26      	ldr	r3, [pc, #152]	; (8015780 <UART_SetConfig+0xac4>)
 80156e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80156ea:	e00c      	b.n	8015706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80156ec:	4b25      	ldr	r3, [pc, #148]	; (8015784 <UART_SetConfig+0xac8>)
 80156ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80156f0:	e009      	b.n	8015706 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80156f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80156f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80156f8:	e005      	b.n	8015706 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80156fa:	2300      	movs	r3, #0
 80156fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80156fe:	2301      	movs	r3, #1
 8015700:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015704:	bf00      	nop
    }

    if (pclk != 0U)
 8015706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015708:	2b00      	cmp	r3, #0
 801570a:	d021      	beq.n	8015750 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015710:	4a1d      	ldr	r2, [pc, #116]	; (8015788 <UART_SetConfig+0xacc>)
 8015712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015716:	461a      	mov	r2, r3
 8015718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801571a:	fbb3 f2f2 	udiv	r2, r3, r2
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	685b      	ldr	r3, [r3, #4]
 8015722:	085b      	lsrs	r3, r3, #1
 8015724:	441a      	add	r2, r3
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	fbb2 f3f3 	udiv	r3, r2, r3
 801572e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015732:	2b0f      	cmp	r3, #15
 8015734:	d909      	bls.n	801574a <UART_SetConfig+0xa8e>
 8015736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801573c:	d205      	bcs.n	801574a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015740:	b29a      	uxth	r2, r3
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	60da      	str	r2, [r3, #12]
 8015748:	e002      	b.n	8015750 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801574a:	2301      	movs	r3, #1
 801574c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	2201      	movs	r2, #1
 8015754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	2201      	movs	r2, #1
 801575c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	2200      	movs	r2, #0
 8015764:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	2200      	movs	r2, #0
 801576a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801576c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015770:	4618      	mov	r0, r3
 8015772:	3748      	adds	r7, #72	; 0x48
 8015774:	46bd      	mov	sp, r7
 8015776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801577a:	bf00      	nop
 801577c:	58024400 	.word	0x58024400
 8015780:	03d09000 	.word	0x03d09000
 8015784:	003d0900 	.word	0x003d0900
 8015788:	0801aedc 	.word	0x0801aedc

0801578c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801578c:	b480      	push	{r7}
 801578e:	b083      	sub	sp, #12
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015798:	f003 0308 	and.w	r3, r3, #8
 801579c:	2b00      	cmp	r3, #0
 801579e:	d00a      	beq.n	80157b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	685b      	ldr	r3, [r3, #4]
 80157a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	430a      	orrs	r2, r1
 80157b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157ba:	f003 0301 	and.w	r3, r3, #1
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d00a      	beq.n	80157d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	685b      	ldr	r3, [r3, #4]
 80157c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	430a      	orrs	r2, r1
 80157d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157dc:	f003 0302 	and.w	r3, r3, #2
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00a      	beq.n	80157fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	430a      	orrs	r2, r1
 80157f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157fe:	f003 0304 	and.w	r3, r3, #4
 8015802:	2b00      	cmp	r3, #0
 8015804:	d00a      	beq.n	801581c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	685b      	ldr	r3, [r3, #4]
 801580c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	430a      	orrs	r2, r1
 801581a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015820:	f003 0310 	and.w	r3, r3, #16
 8015824:	2b00      	cmp	r3, #0
 8015826:	d00a      	beq.n	801583e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	689b      	ldr	r3, [r3, #8]
 801582e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	430a      	orrs	r2, r1
 801583c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015842:	f003 0320 	and.w	r3, r3, #32
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00a      	beq.n	8015860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	689b      	ldr	r3, [r3, #8]
 8015850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	430a      	orrs	r2, r1
 801585e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015868:	2b00      	cmp	r3, #0
 801586a:	d01a      	beq.n	80158a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	430a      	orrs	r2, r1
 8015880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801588a:	d10a      	bne.n	80158a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	685b      	ldr	r3, [r3, #4]
 8015892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	430a      	orrs	r2, r1
 80158a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00a      	beq.n	80158c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	430a      	orrs	r2, r1
 80158c2:	605a      	str	r2, [r3, #4]
  }
}
 80158c4:	bf00      	nop
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr

080158d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b098      	sub	sp, #96	; 0x60
 80158d4:	af02      	add	r7, sp, #8
 80158d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2200      	movs	r2, #0
 80158dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80158e0:	f7f0 f88e 	bl	8005a00 <HAL_GetTick>
 80158e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	f003 0308 	and.w	r3, r3, #8
 80158f0:	2b08      	cmp	r3, #8
 80158f2:	d12f      	bne.n	8015954 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80158f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158fc:	2200      	movs	r2, #0
 80158fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f000 f88e 	bl	8015a24 <UART_WaitOnFlagUntilTimeout>
 8015908:	4603      	mov	r3, r0
 801590a:	2b00      	cmp	r3, #0
 801590c:	d022      	beq.n	8015954 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015916:	e853 3f00 	ldrex	r3, [r3]
 801591a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801591e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015922:	653b      	str	r3, [r7, #80]	; 0x50
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	461a      	mov	r2, r3
 801592a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801592c:	647b      	str	r3, [r7, #68]	; 0x44
 801592e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015930:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015934:	e841 2300 	strex	r3, r2, [r1]
 8015938:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801593a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801593c:	2b00      	cmp	r3, #0
 801593e:	d1e6      	bne.n	801590e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2220      	movs	r2, #32
 8015944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2200      	movs	r2, #0
 801594c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015950:	2303      	movs	r3, #3
 8015952:	e063      	b.n	8015a1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f003 0304 	and.w	r3, r3, #4
 801595e:	2b04      	cmp	r3, #4
 8015960:	d149      	bne.n	80159f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015962:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015966:	9300      	str	r3, [sp, #0]
 8015968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801596a:	2200      	movs	r2, #0
 801596c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f000 f857 	bl	8015a24 <UART_WaitOnFlagUntilTimeout>
 8015976:	4603      	mov	r3, r0
 8015978:	2b00      	cmp	r3, #0
 801597a:	d03c      	beq.n	80159f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015984:	e853 3f00 	ldrex	r3, [r3]
 8015988:	623b      	str	r3, [r7, #32]
   return(result);
 801598a:	6a3b      	ldr	r3, [r7, #32]
 801598c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	461a      	mov	r2, r3
 8015998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801599a:	633b      	str	r3, [r7, #48]	; 0x30
 801599c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801599e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80159a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159a2:	e841 2300 	strex	r3, r2, [r1]
 80159a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80159a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d1e6      	bne.n	801597c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	3308      	adds	r3, #8
 80159b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	e853 3f00 	ldrex	r3, [r3]
 80159bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	f023 0301 	bic.w	r3, r3, #1
 80159c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	3308      	adds	r3, #8
 80159cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80159ce:	61fa      	str	r2, [r7, #28]
 80159d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159d2:	69b9      	ldr	r1, [r7, #24]
 80159d4:	69fa      	ldr	r2, [r7, #28]
 80159d6:	e841 2300 	strex	r3, r2, [r1]
 80159da:	617b      	str	r3, [r7, #20]
   return(result);
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d1e5      	bne.n	80159ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2220      	movs	r2, #32
 80159e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2200      	movs	r2, #0
 80159ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80159f2:	2303      	movs	r3, #3
 80159f4:	e012      	b.n	8015a1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2220      	movs	r2, #32
 80159fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2220      	movs	r2, #32
 8015a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2200      	movs	r2, #0
 8015a16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8015a1a:	2300      	movs	r3, #0
}
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	3758      	adds	r7, #88	; 0x58
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}

08015a24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	603b      	str	r3, [r7, #0]
 8015a30:	4613      	mov	r3, r2
 8015a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015a34:	e04f      	b.n	8015ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015a36:	69bb      	ldr	r3, [r7, #24]
 8015a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a3c:	d04b      	beq.n	8015ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015a3e:	f7ef ffdf 	bl	8005a00 <HAL_GetTick>
 8015a42:	4602      	mov	r2, r0
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	1ad3      	subs	r3, r2, r3
 8015a48:	69ba      	ldr	r2, [r7, #24]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d302      	bcc.n	8015a54 <UART_WaitOnFlagUntilTimeout+0x30>
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d101      	bne.n	8015a58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015a54:	2303      	movs	r3, #3
 8015a56:	e04e      	b.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	f003 0304 	and.w	r3, r3, #4
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d037      	beq.n	8015ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	2b80      	cmp	r3, #128	; 0x80
 8015a6a:	d034      	beq.n	8015ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	2b40      	cmp	r3, #64	; 0x40
 8015a70:	d031      	beq.n	8015ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	69db      	ldr	r3, [r3, #28]
 8015a78:	f003 0308 	and.w	r3, r3, #8
 8015a7c:	2b08      	cmp	r3, #8
 8015a7e:	d110      	bne.n	8015aa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	2208      	movs	r2, #8
 8015a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015a88:	68f8      	ldr	r0, [r7, #12]
 8015a8a:	f000 f95b 	bl	8015d44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	2208      	movs	r2, #8
 8015a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	e029      	b.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	69db      	ldr	r3, [r3, #28]
 8015aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015ab0:	d111      	bne.n	8015ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015abc:	68f8      	ldr	r0, [r7, #12]
 8015abe:	f000 f941 	bl	8015d44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	2220      	movs	r2, #32
 8015ac6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	2200      	movs	r2, #0
 8015ace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015ad2:	2303      	movs	r3, #3
 8015ad4:	e00f      	b.n	8015af6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	69da      	ldr	r2, [r3, #28]
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	4013      	ands	r3, r2
 8015ae0:	68ba      	ldr	r2, [r7, #8]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	bf0c      	ite	eq
 8015ae6:	2301      	moveq	r3, #1
 8015ae8:	2300      	movne	r3, #0
 8015aea:	b2db      	uxtb	r3, r3
 8015aec:	461a      	mov	r2, r3
 8015aee:	79fb      	ldrb	r3, [r7, #7]
 8015af0:	429a      	cmp	r2, r3
 8015af2:	d0a0      	beq.n	8015a36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015af4:	2300      	movs	r3, #0
}
 8015af6:	4618      	mov	r0, r3
 8015af8:	3710      	adds	r7, #16
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}
	...

08015b00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b00:	b480      	push	{r7}
 8015b02:	b0a3      	sub	sp, #140	; 0x8c
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	60f8      	str	r0, [r7, #12]
 8015b08:	60b9      	str	r1, [r7, #8]
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	68ba      	ldr	r2, [r7, #8]
 8015b12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	88fa      	ldrh	r2, [r7, #6]
 8015b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	88fa      	ldrh	r2, [r7, #6]
 8015b20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	2200      	movs	r2, #0
 8015b28:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	689b      	ldr	r3, [r3, #8]
 8015b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b32:	d10e      	bne.n	8015b52 <UART_Start_Receive_IT+0x52>
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	691b      	ldr	r3, [r3, #16]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d105      	bne.n	8015b48 <UART_Start_Receive_IT+0x48>
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015b42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b46:	e02d      	b.n	8015ba4 <UART_Start_Receive_IT+0xa4>
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	22ff      	movs	r2, #255	; 0xff
 8015b4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b50:	e028      	b.n	8015ba4 <UART_Start_Receive_IT+0xa4>
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	689b      	ldr	r3, [r3, #8]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d10d      	bne.n	8015b76 <UART_Start_Receive_IT+0x76>
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	691b      	ldr	r3, [r3, #16]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d104      	bne.n	8015b6c <UART_Start_Receive_IT+0x6c>
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	22ff      	movs	r2, #255	; 0xff
 8015b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b6a:	e01b      	b.n	8015ba4 <UART_Start_Receive_IT+0xa4>
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	227f      	movs	r2, #127	; 0x7f
 8015b70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b74:	e016      	b.n	8015ba4 <UART_Start_Receive_IT+0xa4>
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	689b      	ldr	r3, [r3, #8]
 8015b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015b7e:	d10d      	bne.n	8015b9c <UART_Start_Receive_IT+0x9c>
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	691b      	ldr	r3, [r3, #16]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d104      	bne.n	8015b92 <UART_Start_Receive_IT+0x92>
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	227f      	movs	r2, #127	; 0x7f
 8015b8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b90:	e008      	b.n	8015ba4 <UART_Start_Receive_IT+0xa4>
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	223f      	movs	r2, #63	; 0x3f
 8015b96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b9a:	e003      	b.n	8015ba4 <UART_Start_Receive_IT+0xa4>
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	2222      	movs	r2, #34	; 0x22
 8015bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	3308      	adds	r3, #8
 8015bba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015bbe:	e853 3f00 	ldrex	r3, [r3]
 8015bc2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015bc6:	f043 0301 	orr.w	r3, r3, #1
 8015bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	3308      	adds	r3, #8
 8015bd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015bd8:	673a      	str	r2, [r7, #112]	; 0x70
 8015bda:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bdc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015bde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015be0:	e841 2300 	strex	r3, r2, [r1]
 8015be4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d1e3      	bne.n	8015bb4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015bf4:	d14f      	bne.n	8015c96 <UART_Start_Receive_IT+0x196>
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015bfc:	88fa      	ldrh	r2, [r7, #6]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d349      	bcc.n	8015c96 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	689b      	ldr	r3, [r3, #8]
 8015c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c0a:	d107      	bne.n	8015c1c <UART_Start_Receive_IT+0x11c>
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	691b      	ldr	r3, [r3, #16]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d103      	bne.n	8015c1c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	4a47      	ldr	r2, [pc, #284]	; (8015d34 <UART_Start_Receive_IT+0x234>)
 8015c18:	675a      	str	r2, [r3, #116]	; 0x74
 8015c1a:	e002      	b.n	8015c22 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	4a46      	ldr	r2, [pc, #280]	; (8015d38 <UART_Start_Receive_IT+0x238>)
 8015c20:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	691b      	ldr	r3, [r3, #16]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d01a      	beq.n	8015c60 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c32:	e853 3f00 	ldrex	r3, [r3]
 8015c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015c3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	461a      	mov	r2, r3
 8015c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015c4e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015c52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015c54:	e841 2300 	strex	r3, r2, [r1]
 8015c58:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d1e4      	bne.n	8015c2a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	3308      	adds	r3, #8
 8015c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c6a:	e853 3f00 	ldrex	r3, [r3]
 8015c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	3308      	adds	r3, #8
 8015c7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015c80:	64ba      	str	r2, [r7, #72]	; 0x48
 8015c82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c88:	e841 2300 	strex	r3, r2, [r1]
 8015c8c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d1e5      	bne.n	8015c60 <UART_Start_Receive_IT+0x160>
 8015c94:	e046      	b.n	8015d24 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	689b      	ldr	r3, [r3, #8]
 8015c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c9e:	d107      	bne.n	8015cb0 <UART_Start_Receive_IT+0x1b0>
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	691b      	ldr	r3, [r3, #16]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d103      	bne.n	8015cb0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	4a24      	ldr	r2, [pc, #144]	; (8015d3c <UART_Start_Receive_IT+0x23c>)
 8015cac:	675a      	str	r2, [r3, #116]	; 0x74
 8015cae:	e002      	b.n	8015cb6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	4a23      	ldr	r2, [pc, #140]	; (8015d40 <UART_Start_Receive_IT+0x240>)
 8015cb4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	691b      	ldr	r3, [r3, #16]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d019      	beq.n	8015cf2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc6:	e853 3f00 	ldrex	r3, [r3]
 8015cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8015cd2:	677b      	str	r3, [r7, #116]	; 0x74
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	461a      	mov	r2, r3
 8015cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8015cde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ce0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015ce4:	e841 2300 	strex	r3, r2, [r1]
 8015ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d1e6      	bne.n	8015cbe <UART_Start_Receive_IT+0x1be>
 8015cf0:	e018      	b.n	8015d24 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cf8:	697b      	ldr	r3, [r7, #20]
 8015cfa:	e853 3f00 	ldrex	r3, [r3]
 8015cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	f043 0320 	orr.w	r3, r3, #32
 8015d06:	67bb      	str	r3, [r7, #120]	; 0x78
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	461a      	mov	r2, r3
 8015d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d10:	623b      	str	r3, [r7, #32]
 8015d12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d14:	69f9      	ldr	r1, [r7, #28]
 8015d16:	6a3a      	ldr	r2, [r7, #32]
 8015d18:	e841 2300 	strex	r3, r2, [r1]
 8015d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8015d1e:	69bb      	ldr	r3, [r7, #24]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d1e6      	bne.n	8015cf2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015d24:	2300      	movs	r3, #0
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	378c      	adds	r7, #140	; 0x8c
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d30:	4770      	bx	lr
 8015d32:	bf00      	nop
 8015d34:	08016565 	.word	0x08016565
 8015d38:	08016205 	.word	0x08016205
 8015d3c:	0801604d 	.word	0x0801604d
 8015d40:	08015e95 	.word	0x08015e95

08015d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015d44:	b480      	push	{r7}
 8015d46:	b095      	sub	sp, #84	; 0x54
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d54:	e853 3f00 	ldrex	r3, [r3]
 8015d58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015d60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	461a      	mov	r2, r3
 8015d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8015d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015d72:	e841 2300 	strex	r3, r2, [r1]
 8015d76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d1e6      	bne.n	8015d4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	3308      	adds	r3, #8
 8015d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d86:	6a3b      	ldr	r3, [r7, #32]
 8015d88:	e853 3f00 	ldrex	r3, [r3]
 8015d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8015d8e:	69fa      	ldr	r2, [r7, #28]
 8015d90:	4b1e      	ldr	r3, [pc, #120]	; (8015e0c <UART_EndRxTransfer+0xc8>)
 8015d92:	4013      	ands	r3, r2
 8015d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	3308      	adds	r3, #8
 8015d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015da6:	e841 2300 	strex	r3, r2, [r1]
 8015daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d1e5      	bne.n	8015d7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015db6:	2b01      	cmp	r3, #1
 8015db8:	d118      	bne.n	8015dec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	e853 3f00 	ldrex	r3, [r3]
 8015dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	f023 0310 	bic.w	r3, r3, #16
 8015dce:	647b      	str	r3, [r7, #68]	; 0x44
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015dd8:	61bb      	str	r3, [r7, #24]
 8015dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ddc:	6979      	ldr	r1, [r7, #20]
 8015dde:	69ba      	ldr	r2, [r7, #24]
 8015de0:	e841 2300 	strex	r3, r2, [r1]
 8015de4:	613b      	str	r3, [r7, #16]
   return(result);
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d1e6      	bne.n	8015dba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2220      	movs	r2, #32
 8015df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2200      	movs	r2, #0
 8015df8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015e00:	bf00      	nop
 8015e02:	3754      	adds	r7, #84	; 0x54
 8015e04:	46bd      	mov	sp, r7
 8015e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0a:	4770      	bx	lr
 8015e0c:	effffffe 	.word	0xeffffffe

08015e10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	2200      	movs	r2, #0
 8015e22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015e2e:	68f8      	ldr	r0, [r7, #12]
 8015e30:	f7fe ff2e 	bl	8014c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015e34:	bf00      	nop
 8015e36:	3710      	adds	r7, #16
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b088      	sub	sp, #32
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	e853 3f00 	ldrex	r3, [r3]
 8015e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8015e52:	68bb      	ldr	r3, [r7, #8]
 8015e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e58:	61fb      	str	r3, [r7, #28]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	461a      	mov	r2, r3
 8015e60:	69fb      	ldr	r3, [r7, #28]
 8015e62:	61bb      	str	r3, [r7, #24]
 8015e64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e66:	6979      	ldr	r1, [r7, #20]
 8015e68:	69ba      	ldr	r2, [r7, #24]
 8015e6a:	e841 2300 	strex	r3, r2, [r1]
 8015e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d1e6      	bne.n	8015e44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2220      	movs	r2, #32
 8015e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2200      	movs	r2, #0
 8015e82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f7fe fef9 	bl	8014c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015e8a:	bf00      	nop
 8015e8c:	3720      	adds	r7, #32
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	bd80      	pop	{r7, pc}
	...

08015e94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b09c      	sub	sp, #112	; 0x70
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015ea2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015eac:	2b22      	cmp	r3, #34	; 0x22
 8015eae:	f040 80be 	bne.w	801602e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015ebc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015ec0:	b2d9      	uxtb	r1, r3
 8015ec2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015ec6:	b2da      	uxtb	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ecc:	400a      	ands	r2, r1
 8015ece:	b2d2      	uxtb	r2, r2
 8015ed0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ed6:	1c5a      	adds	r2, r3, #1
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015ee2:	b29b      	uxth	r3, r3
 8015ee4:	3b01      	subs	r3, #1
 8015ee6:	b29a      	uxth	r2, r3
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015ef4:	b29b      	uxth	r3, r3
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	f040 80a1 	bne.w	801603e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f04:	e853 3f00 	ldrex	r3, [r3]
 8015f08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	461a      	mov	r2, r3
 8015f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015f1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8015f1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015f20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015f22:	e841 2300 	strex	r3, r2, [r1]
 8015f26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d1e6      	bne.n	8015efc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	3308      	adds	r3, #8
 8015f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f38:	e853 3f00 	ldrex	r3, [r3]
 8015f3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f40:	f023 0301 	bic.w	r3, r3, #1
 8015f44:	667b      	str	r3, [r7, #100]	; 0x64
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	3308      	adds	r3, #8
 8015f4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f4e:	647a      	str	r2, [r7, #68]	; 0x44
 8015f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015f56:	e841 2300 	strex	r3, r2, [r1]
 8015f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1e5      	bne.n	8015f2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2220      	movs	r2, #32
 8015f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2200      	movs	r2, #0
 8015f74:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	4a33      	ldr	r2, [pc, #204]	; (8016048 <UART_RxISR_8BIT+0x1b4>)
 8015f7c:	4293      	cmp	r3, r2
 8015f7e:	d01f      	beq.n	8015fc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d018      	beq.n	8015fc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f96:	e853 3f00 	ldrex	r3, [r3]
 8015f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8015f9c:	6a3b      	ldr	r3, [r7, #32]
 8015f9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015fa2:	663b      	str	r3, [r7, #96]	; 0x60
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	461a      	mov	r2, r3
 8015faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015fac:	633b      	str	r3, [r7, #48]	; 0x30
 8015fae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fb4:	e841 2300 	strex	r3, r2, [r1]
 8015fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d1e6      	bne.n	8015f8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fc4:	2b01      	cmp	r3, #1
 8015fc6:	d12e      	bne.n	8016026 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2200      	movs	r2, #0
 8015fcc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fd4:	693b      	ldr	r3, [r7, #16]
 8015fd6:	e853 3f00 	ldrex	r3, [r3]
 8015fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	f023 0310 	bic.w	r3, r3, #16
 8015fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	461a      	mov	r2, r3
 8015fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015fec:	61fb      	str	r3, [r7, #28]
 8015fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ff0:	69b9      	ldr	r1, [r7, #24]
 8015ff2:	69fa      	ldr	r2, [r7, #28]
 8015ff4:	e841 2300 	strex	r3, r2, [r1]
 8015ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8015ffa:	697b      	ldr	r3, [r7, #20]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d1e6      	bne.n	8015fce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	69db      	ldr	r3, [r3, #28]
 8016006:	f003 0310 	and.w	r3, r3, #16
 801600a:	2b10      	cmp	r3, #16
 801600c:	d103      	bne.n	8016016 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	2210      	movs	r2, #16
 8016014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801601c:	4619      	mov	r1, r3
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f7fe fe40 	bl	8014ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016024:	e00b      	b.n	801603e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f7ec fdca 	bl	8002bc0 <HAL_UART_RxCpltCallback>
}
 801602c:	e007      	b.n	801603e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	699a      	ldr	r2, [r3, #24]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f042 0208 	orr.w	r2, r2, #8
 801603c:	619a      	str	r2, [r3, #24]
}
 801603e:	bf00      	nop
 8016040:	3770      	adds	r7, #112	; 0x70
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop
 8016048:	58000c00 	.word	0x58000c00

0801604c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b09c      	sub	sp, #112	; 0x70
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801605a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016064:	2b22      	cmp	r3, #34	; 0x22
 8016066:	f040 80be 	bne.w	80161e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016070:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016078:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801607a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801607e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8016082:	4013      	ands	r3, r2
 8016084:	b29a      	uxth	r2, r3
 8016086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016088:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801608e:	1c9a      	adds	r2, r3, #2
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801609a:	b29b      	uxth	r3, r3
 801609c:	3b01      	subs	r3, #1
 801609e:	b29a      	uxth	r2, r3
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	f040 80a1 	bne.w	80161f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160bc:	e853 3f00 	ldrex	r3, [r3]
 80160c0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80160c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80160c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80160c8:	667b      	str	r3, [r7, #100]	; 0x64
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	461a      	mov	r2, r3
 80160d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80160d2:	657b      	str	r3, [r7, #84]	; 0x54
 80160d4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80160d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80160da:	e841 2300 	strex	r3, r2, [r1]
 80160de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80160e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d1e6      	bne.n	80160b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	3308      	adds	r3, #8
 80160ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160f0:	e853 3f00 	ldrex	r3, [r3]
 80160f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80160f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f8:	f023 0301 	bic.w	r3, r3, #1
 80160fc:	663b      	str	r3, [r7, #96]	; 0x60
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	3308      	adds	r3, #8
 8016104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016106:	643a      	str	r2, [r7, #64]	; 0x40
 8016108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801610a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801610c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801610e:	e841 2300 	strex	r3, r2, [r1]
 8016112:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016116:	2b00      	cmp	r3, #0
 8016118:	d1e5      	bne.n	80160e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	2220      	movs	r2, #32
 801611e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2200      	movs	r2, #0
 8016126:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2200      	movs	r2, #0
 801612c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	4a33      	ldr	r2, [pc, #204]	; (8016200 <UART_RxISR_16BIT+0x1b4>)
 8016134:	4293      	cmp	r3, r2
 8016136:	d01f      	beq.n	8016178 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	685b      	ldr	r3, [r3, #4]
 801613e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016142:	2b00      	cmp	r3, #0
 8016144:	d018      	beq.n	8016178 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801614c:	6a3b      	ldr	r3, [r7, #32]
 801614e:	e853 3f00 	ldrex	r3, [r3]
 8016152:	61fb      	str	r3, [r7, #28]
   return(result);
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801615a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	461a      	mov	r2, r3
 8016162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016166:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801616a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801616c:	e841 2300 	strex	r3, r2, [r1]
 8016170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016174:	2b00      	cmp	r3, #0
 8016176:	d1e6      	bne.n	8016146 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801617c:	2b01      	cmp	r3, #1
 801617e:	d12e      	bne.n	80161de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2200      	movs	r2, #0
 8016184:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	e853 3f00 	ldrex	r3, [r3]
 8016192:	60bb      	str	r3, [r7, #8]
   return(result);
 8016194:	68bb      	ldr	r3, [r7, #8]
 8016196:	f023 0310 	bic.w	r3, r3, #16
 801619a:	65bb      	str	r3, [r7, #88]	; 0x58
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	461a      	mov	r2, r3
 80161a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80161a4:	61bb      	str	r3, [r7, #24]
 80161a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161a8:	6979      	ldr	r1, [r7, #20]
 80161aa:	69ba      	ldr	r2, [r7, #24]
 80161ac:	e841 2300 	strex	r3, r2, [r1]
 80161b0:	613b      	str	r3, [r7, #16]
   return(result);
 80161b2:	693b      	ldr	r3, [r7, #16]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d1e6      	bne.n	8016186 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	69db      	ldr	r3, [r3, #28]
 80161be:	f003 0310 	and.w	r3, r3, #16
 80161c2:	2b10      	cmp	r3, #16
 80161c4:	d103      	bne.n	80161ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	2210      	movs	r2, #16
 80161cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80161d4:	4619      	mov	r1, r3
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f7fe fd64 	bl	8014ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80161dc:	e00b      	b.n	80161f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f7ec fcee 	bl	8002bc0 <HAL_UART_RxCpltCallback>
}
 80161e4:	e007      	b.n	80161f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	699a      	ldr	r2, [r3, #24]
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	f042 0208 	orr.w	r2, r2, #8
 80161f4:	619a      	str	r2, [r3, #24]
}
 80161f6:	bf00      	nop
 80161f8:	3770      	adds	r7, #112	; 0x70
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	58000c00 	.word	0x58000c00

08016204 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b0ac      	sub	sp, #176	; 0xb0
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016212:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	69db      	ldr	r3, [r3, #28]
 801621c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	689b      	ldr	r3, [r3, #8]
 8016230:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801623a:	2b22      	cmp	r3, #34	; 0x22
 801623c:	f040 8180 	bne.w	8016540 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016246:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801624a:	e123      	b.n	8016494 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016252:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016256:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801625a:	b2d9      	uxtb	r1, r3
 801625c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016260:	b2da      	uxtb	r2, r3
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016266:	400a      	ands	r2, r1
 8016268:	b2d2      	uxtb	r2, r2
 801626a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016270:	1c5a      	adds	r2, r3, #1
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801627c:	b29b      	uxth	r3, r3
 801627e:	3b01      	subs	r3, #1
 8016280:	b29a      	uxth	r2, r3
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	69db      	ldr	r3, [r3, #28]
 801628e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016296:	f003 0307 	and.w	r3, r3, #7
 801629a:	2b00      	cmp	r3, #0
 801629c:	d053      	beq.n	8016346 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801629e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80162a2:	f003 0301 	and.w	r3, r3, #1
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d011      	beq.n	80162ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80162aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80162ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d00b      	beq.n	80162ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	2201      	movs	r2, #1
 80162bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162c4:	f043 0201 	orr.w	r2, r3, #1
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80162ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80162d2:	f003 0302 	and.w	r3, r3, #2
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d011      	beq.n	80162fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80162da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80162de:	f003 0301 	and.w	r3, r3, #1
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d00b      	beq.n	80162fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	2202      	movs	r2, #2
 80162ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162f4:	f043 0204 	orr.w	r2, r3, #4
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80162fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016302:	f003 0304 	and.w	r3, r3, #4
 8016306:	2b00      	cmp	r3, #0
 8016308:	d011      	beq.n	801632e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801630a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801630e:	f003 0301 	and.w	r3, r3, #1
 8016312:	2b00      	cmp	r3, #0
 8016314:	d00b      	beq.n	801632e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	2204      	movs	r2, #4
 801631c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016324:	f043 0202 	orr.w	r2, r3, #2
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016334:	2b00      	cmp	r3, #0
 8016336:	d006      	beq.n	8016346 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f7fe fca9 	bl	8014c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	2200      	movs	r2, #0
 8016342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801634c:	b29b      	uxth	r3, r3
 801634e:	2b00      	cmp	r3, #0
 8016350:	f040 80a0 	bne.w	8016494 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801635a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801635c:	e853 3f00 	ldrex	r3, [r3]
 8016360:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8016362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	461a      	mov	r2, r3
 8016372:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016376:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016378:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801637a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801637c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801637e:	e841 2300 	strex	r3, r2, [r1]
 8016382:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016386:	2b00      	cmp	r3, #0
 8016388:	d1e4      	bne.n	8016354 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	3308      	adds	r3, #8
 8016390:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016394:	e853 3f00 	ldrex	r3, [r3]
 8016398:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801639a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801639c:	4b6e      	ldr	r3, [pc, #440]	; (8016558 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801639e:	4013      	ands	r3, r2
 80163a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	3308      	adds	r3, #8
 80163aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80163ae:	66ba      	str	r2, [r7, #104]	; 0x68
 80163b0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80163b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80163b6:	e841 2300 	strex	r3, r2, [r1]
 80163ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80163bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d1e3      	bne.n	801638a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2220      	movs	r2, #32
 80163c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	2200      	movs	r2, #0
 80163ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	2200      	movs	r2, #0
 80163d4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	4a60      	ldr	r2, [pc, #384]	; (801655c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80163dc:	4293      	cmp	r3, r2
 80163de:	d021      	beq.n	8016424 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	685b      	ldr	r3, [r3, #4]
 80163e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d01a      	beq.n	8016424 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163f6:	e853 3f00 	ldrex	r3, [r3]
 80163fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80163fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	461a      	mov	r2, r3
 801640c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016410:	657b      	str	r3, [r7, #84]	; 0x54
 8016412:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016414:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016416:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016418:	e841 2300 	strex	r3, r2, [r1]
 801641c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801641e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016420:	2b00      	cmp	r3, #0
 8016422:	d1e4      	bne.n	80163ee <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016428:	2b01      	cmp	r3, #1
 801642a:	d130      	bne.n	801648e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2200      	movs	r2, #0
 8016430:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801643a:	e853 3f00 	ldrex	r3, [r3]
 801643e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016442:	f023 0310 	bic.w	r3, r3, #16
 8016446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	461a      	mov	r2, r3
 8016450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016454:	643b      	str	r3, [r7, #64]	; 0x40
 8016456:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801645a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801645c:	e841 2300 	strex	r3, r2, [r1]
 8016460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016464:	2b00      	cmp	r3, #0
 8016466:	d1e4      	bne.n	8016432 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	69db      	ldr	r3, [r3, #28]
 801646e:	f003 0310 	and.w	r3, r3, #16
 8016472:	2b10      	cmp	r3, #16
 8016474:	d103      	bne.n	801647e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	2210      	movs	r2, #16
 801647c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016484:	4619      	mov	r1, r3
 8016486:	6878      	ldr	r0, [r7, #4]
 8016488:	f7fe fc0c 	bl	8014ca4 <HAL_UARTEx_RxEventCallback>
 801648c:	e002      	b.n	8016494 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f7ec fb96 	bl	8002bc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016494:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016498:	2b00      	cmp	r3, #0
 801649a:	d006      	beq.n	80164aa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801649c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80164a0:	f003 0320 	and.w	r3, r3, #32
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	f47f aed1 	bne.w	801624c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80164b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80164b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d049      	beq.n	8016550 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80164c2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80164c6:	429a      	cmp	r2, r3
 80164c8:	d242      	bcs.n	8016550 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	3308      	adds	r3, #8
 80164d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164d2:	6a3b      	ldr	r3, [r7, #32]
 80164d4:	e853 3f00 	ldrex	r3, [r3]
 80164d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80164da:	69fb      	ldr	r3, [r7, #28]
 80164dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80164e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	3308      	adds	r3, #8
 80164ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80164ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80164f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80164f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164f6:	e841 2300 	strex	r3, r2, [r1]
 80164fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80164fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d1e3      	bne.n	80164ca <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	4a16      	ldr	r2, [pc, #88]	; (8016560 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8016506:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	e853 3f00 	ldrex	r3, [r3]
 8016514:	60bb      	str	r3, [r7, #8]
   return(result);
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	f043 0320 	orr.w	r3, r3, #32
 801651c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	461a      	mov	r2, r3
 8016526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801652a:	61bb      	str	r3, [r7, #24]
 801652c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801652e:	6979      	ldr	r1, [r7, #20]
 8016530:	69ba      	ldr	r2, [r7, #24]
 8016532:	e841 2300 	strex	r3, r2, [r1]
 8016536:	613b      	str	r3, [r7, #16]
   return(result);
 8016538:	693b      	ldr	r3, [r7, #16]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d1e4      	bne.n	8016508 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801653e:	e007      	b.n	8016550 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	699a      	ldr	r2, [r3, #24]
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	f042 0208 	orr.w	r2, r2, #8
 801654e:	619a      	str	r2, [r3, #24]
}
 8016550:	bf00      	nop
 8016552:	37b0      	adds	r7, #176	; 0xb0
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}
 8016558:	effffffe 	.word	0xeffffffe
 801655c:	58000c00 	.word	0x58000c00
 8016560:	08015e95 	.word	0x08015e95

08016564 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b0ae      	sub	sp, #184	; 0xb8
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016572:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	69db      	ldr	r3, [r3, #28]
 801657c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	689b      	ldr	r3, [r3, #8]
 8016590:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801659a:	2b22      	cmp	r3, #34	; 0x22
 801659c:	f040 8184 	bne.w	80168a8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80165a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80165aa:	e127      	b.n	80167fc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80165be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80165c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80165c6:	4013      	ands	r3, r2
 80165c8:	b29a      	uxth	r2, r3
 80165ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80165ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165d4:	1c9a      	adds	r2, r3, #2
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	3b01      	subs	r3, #1
 80165e4:	b29a      	uxth	r2, r3
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	69db      	ldr	r3, [r3, #28]
 80165f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80165f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80165fa:	f003 0307 	and.w	r3, r3, #7
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d053      	beq.n	80166aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016602:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016606:	f003 0301 	and.w	r3, r3, #1
 801660a:	2b00      	cmp	r3, #0
 801660c:	d011      	beq.n	8016632 <UART_RxISR_16BIT_FIFOEN+0xce>
 801660e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016616:	2b00      	cmp	r3, #0
 8016618:	d00b      	beq.n	8016632 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	2201      	movs	r2, #1
 8016620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016628:	f043 0201 	orr.w	r2, r3, #1
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016636:	f003 0302 	and.w	r3, r3, #2
 801663a:	2b00      	cmp	r3, #0
 801663c:	d011      	beq.n	8016662 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801663e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016642:	f003 0301 	and.w	r3, r3, #1
 8016646:	2b00      	cmp	r3, #0
 8016648:	d00b      	beq.n	8016662 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	2202      	movs	r2, #2
 8016650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016658:	f043 0204 	orr.w	r2, r3, #4
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016662:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016666:	f003 0304 	and.w	r3, r3, #4
 801666a:	2b00      	cmp	r3, #0
 801666c:	d011      	beq.n	8016692 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801666e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016672:	f003 0301 	and.w	r3, r3, #1
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00b      	beq.n	8016692 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2204      	movs	r2, #4
 8016680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016688:	f043 0202 	orr.w	r2, r3, #2
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016698:	2b00      	cmp	r3, #0
 801669a:	d006      	beq.n	80166aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f7fe faf7 	bl	8014c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2200      	movs	r2, #0
 80166a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80166b0:	b29b      	uxth	r3, r3
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	f040 80a2 	bne.w	80167fc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166c0:	e853 3f00 	ldrex	r3, [r3]
 80166c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80166c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80166c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80166cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	461a      	mov	r2, r3
 80166d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80166da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80166de:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80166e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80166e6:	e841 2300 	strex	r3, r2, [r1]
 80166ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80166ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d1e2      	bne.n	80166b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	3308      	adds	r3, #8
 80166f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80166fc:	e853 3f00 	ldrex	r3, [r3]
 8016700:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016702:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016704:	4b6e      	ldr	r3, [pc, #440]	; (80168c0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016706:	4013      	ands	r3, r2
 8016708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	3308      	adds	r3, #8
 8016712:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016716:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016718:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801671a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801671c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801671e:	e841 2300 	strex	r3, r2, [r1]
 8016722:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016726:	2b00      	cmp	r3, #0
 8016728:	d1e3      	bne.n	80166f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2220      	movs	r2, #32
 801672e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	2200      	movs	r2, #0
 8016736:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2200      	movs	r2, #0
 801673c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	4a60      	ldr	r2, [pc, #384]	; (80168c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016744:	4293      	cmp	r3, r2
 8016746:	d021      	beq.n	801678c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	685b      	ldr	r3, [r3, #4]
 801674e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016752:	2b00      	cmp	r3, #0
 8016754:	d01a      	beq.n	801678c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801675c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801675e:	e853 3f00 	ldrex	r3, [r3]
 8016762:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801676a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	461a      	mov	r2, r3
 8016774:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016778:	65bb      	str	r3, [r7, #88]	; 0x58
 801677a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801677c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801677e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016780:	e841 2300 	strex	r3, r2, [r1]
 8016784:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016788:	2b00      	cmp	r3, #0
 801678a:	d1e4      	bne.n	8016756 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016790:	2b01      	cmp	r3, #1
 8016792:	d130      	bne.n	80167f6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2200      	movs	r2, #0
 8016798:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a2:	e853 3f00 	ldrex	r3, [r3]
 80167a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80167a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167aa:	f023 0310 	bic.w	r3, r3, #16
 80167ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	461a      	mov	r2, r3
 80167b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80167bc:	647b      	str	r3, [r7, #68]	; 0x44
 80167be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80167c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167c4:	e841 2300 	strex	r3, r2, [r1]
 80167c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80167ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d1e4      	bne.n	801679a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	69db      	ldr	r3, [r3, #28]
 80167d6:	f003 0310 	and.w	r3, r3, #16
 80167da:	2b10      	cmp	r3, #16
 80167dc:	d103      	bne.n	80167e6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2210      	movs	r2, #16
 80167e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80167ec:	4619      	mov	r1, r3
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f7fe fa58 	bl	8014ca4 <HAL_UARTEx_RxEventCallback>
 80167f4:	e002      	b.n	80167fc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f7ec f9e2 	bl	8002bc0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80167fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016800:	2b00      	cmp	r3, #0
 8016802:	d006      	beq.n	8016812 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016808:	f003 0320 	and.w	r3, r3, #32
 801680c:	2b00      	cmp	r3, #0
 801680e:	f47f aecd 	bne.w	80165ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016818:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801681c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016820:	2b00      	cmp	r3, #0
 8016822:	d049      	beq.n	80168b8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801682a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801682e:	429a      	cmp	r2, r3
 8016830:	d242      	bcs.n	80168b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	3308      	adds	r3, #8
 8016838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801683c:	e853 3f00 	ldrex	r3, [r3]
 8016840:	623b      	str	r3, [r7, #32]
   return(result);
 8016842:	6a3b      	ldr	r3, [r7, #32]
 8016844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	3308      	adds	r3, #8
 8016852:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016856:	633a      	str	r2, [r7, #48]	; 0x30
 8016858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801685a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801685c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801685e:	e841 2300 	strex	r3, r2, [r1]
 8016862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016866:	2b00      	cmp	r3, #0
 8016868:	d1e3      	bne.n	8016832 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	4a16      	ldr	r2, [pc, #88]	; (80168c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801686e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016876:	693b      	ldr	r3, [r7, #16]
 8016878:	e853 3f00 	ldrex	r3, [r3]
 801687c:	60fb      	str	r3, [r7, #12]
   return(result);
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	f043 0320 	orr.w	r3, r3, #32
 8016884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	461a      	mov	r2, r3
 801688e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016892:	61fb      	str	r3, [r7, #28]
 8016894:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016896:	69b9      	ldr	r1, [r7, #24]
 8016898:	69fa      	ldr	r2, [r7, #28]
 801689a:	e841 2300 	strex	r3, r2, [r1]
 801689e:	617b      	str	r3, [r7, #20]
   return(result);
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d1e4      	bne.n	8016870 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80168a6:	e007      	b.n	80168b8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	699a      	ldr	r2, [r3, #24]
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	f042 0208 	orr.w	r2, r2, #8
 80168b6:	619a      	str	r2, [r3, #24]
}
 80168b8:	bf00      	nop
 80168ba:	37b8      	adds	r7, #184	; 0xb8
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}
 80168c0:	effffffe 	.word	0xeffffffe
 80168c4:	58000c00 	.word	0x58000c00
 80168c8:	0801604d 	.word	0x0801604d

080168cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80168cc:	b480      	push	{r7}
 80168ce:	b083      	sub	sp, #12
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80168d4:	bf00      	nop
 80168d6:	370c      	adds	r7, #12
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr

080168e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80168e0:	b480      	push	{r7}
 80168e2:	b083      	sub	sp, #12
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80168e8:	bf00      	nop
 80168ea:	370c      	adds	r7, #12
 80168ec:	46bd      	mov	sp, r7
 80168ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f2:	4770      	bx	lr

080168f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80168fc:	bf00      	nop
 80168fe:	370c      	adds	r7, #12
 8016900:	46bd      	mov	sp, r7
 8016902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016906:	4770      	bx	lr

08016908 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016908:	b480      	push	{r7}
 801690a:	b089      	sub	sp, #36	; 0x24
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016916:	2b01      	cmp	r3, #1
 8016918:	d101      	bne.n	801691e <HAL_UARTEx_EnableStopMode+0x16>
 801691a:	2302      	movs	r3, #2
 801691c:	e021      	b.n	8016962 <HAL_UARTEx_EnableStopMode+0x5a>
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2201      	movs	r2, #1
 8016922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	e853 3f00 	ldrex	r3, [r3]
 8016932:	60bb      	str	r3, [r7, #8]
   return(result);
 8016934:	68bb      	ldr	r3, [r7, #8]
 8016936:	f043 0302 	orr.w	r3, r3, #2
 801693a:	61fb      	str	r3, [r7, #28]
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	461a      	mov	r2, r3
 8016942:	69fb      	ldr	r3, [r7, #28]
 8016944:	61bb      	str	r3, [r7, #24]
 8016946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016948:	6979      	ldr	r1, [r7, #20]
 801694a:	69ba      	ldr	r2, [r7, #24]
 801694c:	e841 2300 	strex	r3, r2, [r1]
 8016950:	613b      	str	r3, [r7, #16]
   return(result);
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d1e6      	bne.n	8016926 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2200      	movs	r2, #0
 801695c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016960:	2300      	movs	r3, #0
}
 8016962:	4618      	mov	r0, r3
 8016964:	3724      	adds	r7, #36	; 0x24
 8016966:	46bd      	mov	sp, r7
 8016968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696c:	4770      	bx	lr

0801696e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801696e:	b580      	push	{r7, lr}
 8016970:	b084      	sub	sp, #16
 8016972:	af00      	add	r7, sp, #0
 8016974:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801697c:	2b01      	cmp	r3, #1
 801697e:	d101      	bne.n	8016984 <HAL_UARTEx_EnableFifoMode+0x16>
 8016980:	2302      	movs	r3, #2
 8016982:	e02b      	b.n	80169dc <HAL_UARTEx_EnableFifoMode+0x6e>
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2201      	movs	r2, #1
 8016988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2224      	movs	r2, #36	; 0x24
 8016990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	681a      	ldr	r2, [r3, #0]
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f022 0201 	bic.w	r2, r2, #1
 80169aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80169b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80169ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	68fa      	ldr	r2, [r7, #12]
 80169c2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80169c4:	6878      	ldr	r0, [r7, #4]
 80169c6:	f000 f8c3 	bl	8016b50 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2220      	movs	r2, #32
 80169ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2200      	movs	r2, #0
 80169d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80169da:	2300      	movs	r3, #0
}
 80169dc:	4618      	mov	r0, r3
 80169de:	3710      	adds	r7, #16
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}

080169e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80169e4:	b480      	push	{r7}
 80169e6:	b085      	sub	sp, #20
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80169f2:	2b01      	cmp	r3, #1
 80169f4:	d101      	bne.n	80169fa <HAL_UARTEx_DisableFifoMode+0x16>
 80169f6:	2302      	movs	r3, #2
 80169f8:	e027      	b.n	8016a4a <HAL_UARTEx_DisableFifoMode+0x66>
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2201      	movs	r2, #1
 80169fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2224      	movs	r2, #36	; 0x24
 8016a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	681a      	ldr	r2, [r3, #0]
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	f022 0201 	bic.w	r2, r2, #1
 8016a20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8016a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	68fa      	ldr	r2, [r7, #12]
 8016a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	2220      	movs	r2, #32
 8016a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2200      	movs	r2, #0
 8016a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016a48:	2300      	movs	r3, #0
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3714      	adds	r7, #20
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a54:	4770      	bx	lr

08016a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016a56:	b580      	push	{r7, lr}
 8016a58:	b084      	sub	sp, #16
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	6078      	str	r0, [r7, #4]
 8016a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016a66:	2b01      	cmp	r3, #1
 8016a68:	d101      	bne.n	8016a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8016a6a:	2302      	movs	r3, #2
 8016a6c:	e02d      	b.n	8016aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2201      	movs	r2, #1
 8016a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	2224      	movs	r2, #36	; 0x24
 8016a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	681a      	ldr	r2, [r3, #0]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	f022 0201 	bic.w	r2, r2, #1
 8016a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	689b      	ldr	r3, [r3, #8]
 8016a9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	683a      	ldr	r2, [r7, #0]
 8016aa6:	430a      	orrs	r2, r1
 8016aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f000 f850 	bl	8016b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	68fa      	ldr	r2, [r7, #12]
 8016ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	2220      	movs	r2, #32
 8016abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016ac8:	2300      	movs	r3, #0
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3710      	adds	r7, #16
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}

08016ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016ad2:	b580      	push	{r7, lr}
 8016ad4:	b084      	sub	sp, #16
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	6078      	str	r0, [r7, #4]
 8016ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016ae2:	2b01      	cmp	r3, #1
 8016ae4:	d101      	bne.n	8016aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016ae6:	2302      	movs	r3, #2
 8016ae8:	e02d      	b.n	8016b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	2201      	movs	r2, #1
 8016aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2224      	movs	r2, #36	; 0x24
 8016af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	681a      	ldr	r2, [r3, #0]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	f022 0201 	bic.w	r2, r2, #1
 8016b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	689b      	ldr	r3, [r3, #8]
 8016b18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	683a      	ldr	r2, [r7, #0]
 8016b22:	430a      	orrs	r2, r1
 8016b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016b26:	6878      	ldr	r0, [r7, #4]
 8016b28:	f000 f812 	bl	8016b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	68fa      	ldr	r2, [r7, #12]
 8016b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2220      	movs	r2, #32
 8016b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2200      	movs	r2, #0
 8016b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016b44:	2300      	movs	r3, #0
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	3710      	adds	r7, #16
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}
	...

08016b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016b50:	b480      	push	{r7}
 8016b52:	b085      	sub	sp, #20
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d108      	bne.n	8016b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2201      	movs	r2, #1
 8016b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	2201      	movs	r2, #1
 8016b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016b70:	e031      	b.n	8016bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016b72:	2310      	movs	r3, #16
 8016b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016b76:	2310      	movs	r3, #16
 8016b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	689b      	ldr	r3, [r3, #8]
 8016b80:	0e5b      	lsrs	r3, r3, #25
 8016b82:	b2db      	uxtb	r3, r3
 8016b84:	f003 0307 	and.w	r3, r3, #7
 8016b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	689b      	ldr	r3, [r3, #8]
 8016b90:	0f5b      	lsrs	r3, r3, #29
 8016b92:	b2db      	uxtb	r3, r3
 8016b94:	f003 0307 	and.w	r3, r3, #7
 8016b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016b9a:	7bbb      	ldrb	r3, [r7, #14]
 8016b9c:	7b3a      	ldrb	r2, [r7, #12]
 8016b9e:	4911      	ldr	r1, [pc, #68]	; (8016be4 <UARTEx_SetNbDataToProcess+0x94>)
 8016ba0:	5c8a      	ldrb	r2, [r1, r2]
 8016ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016ba6:	7b3a      	ldrb	r2, [r7, #12]
 8016ba8:	490f      	ldr	r1, [pc, #60]	; (8016be8 <UARTEx_SetNbDataToProcess+0x98>)
 8016baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8016bb0:	b29a      	uxth	r2, r3
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016bb8:	7bfb      	ldrb	r3, [r7, #15]
 8016bba:	7b7a      	ldrb	r2, [r7, #13]
 8016bbc:	4909      	ldr	r1, [pc, #36]	; (8016be4 <UARTEx_SetNbDataToProcess+0x94>)
 8016bbe:	5c8a      	ldrb	r2, [r1, r2]
 8016bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016bc4:	7b7a      	ldrb	r2, [r7, #13]
 8016bc6:	4908      	ldr	r1, [pc, #32]	; (8016be8 <UARTEx_SetNbDataToProcess+0x98>)
 8016bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016bd6:	bf00      	nop
 8016bd8:	3714      	adds	r7, #20
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be0:	4770      	bx	lr
 8016be2:	bf00      	nop
 8016be4:	0801aef4 	.word	0x0801aef4
 8016be8:	0801aefc 	.word	0x0801aefc

08016bec <__NVIC_SetPriority>:
{
 8016bec:	b480      	push	{r7}
 8016bee:	b083      	sub	sp, #12
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	6039      	str	r1, [r7, #0]
 8016bf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	db0a      	blt.n	8016c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	b2da      	uxtb	r2, r3
 8016c04:	490c      	ldr	r1, [pc, #48]	; (8016c38 <__NVIC_SetPriority+0x4c>)
 8016c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016c0a:	0112      	lsls	r2, r2, #4
 8016c0c:	b2d2      	uxtb	r2, r2
 8016c0e:	440b      	add	r3, r1
 8016c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016c14:	e00a      	b.n	8016c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	b2da      	uxtb	r2, r3
 8016c1a:	4908      	ldr	r1, [pc, #32]	; (8016c3c <__NVIC_SetPriority+0x50>)
 8016c1c:	88fb      	ldrh	r3, [r7, #6]
 8016c1e:	f003 030f 	and.w	r3, r3, #15
 8016c22:	3b04      	subs	r3, #4
 8016c24:	0112      	lsls	r2, r2, #4
 8016c26:	b2d2      	uxtb	r2, r2
 8016c28:	440b      	add	r3, r1
 8016c2a:	761a      	strb	r2, [r3, #24]
}
 8016c2c:	bf00      	nop
 8016c2e:	370c      	adds	r7, #12
 8016c30:	46bd      	mov	sp, r7
 8016c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c36:	4770      	bx	lr
 8016c38:	e000e100 	.word	0xe000e100
 8016c3c:	e000ed00 	.word	0xe000ed00

08016c40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016c40:	b580      	push	{r7, lr}
 8016c42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016c44:	4b05      	ldr	r3, [pc, #20]	; (8016c5c <SysTick_Handler+0x1c>)
 8016c46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016c48:	f002 f958 	bl	8018efc <xTaskGetSchedulerState>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	2b01      	cmp	r3, #1
 8016c50:	d001      	beq.n	8016c56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016c52:	f002 ff79 	bl	8019b48 <xPortSysTickHandler>
  }
}
 8016c56:	bf00      	nop
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	e000e010 	.word	0xe000e010

08016c60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016c60:	b580      	push	{r7, lr}
 8016c62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016c64:	2100      	movs	r1, #0
 8016c66:	f06f 0004 	mvn.w	r0, #4
 8016c6a:	f7ff ffbf 	bl	8016bec <__NVIC_SetPriority>
#endif
}
 8016c6e:	bf00      	nop
 8016c70:	bd80      	pop	{r7, pc}
	...

08016c74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016c74:	b480      	push	{r7}
 8016c76:	b083      	sub	sp, #12
 8016c78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c7a:	f3ef 8305 	mrs	r3, IPSR
 8016c7e:	603b      	str	r3, [r7, #0]
  return(result);
 8016c80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d003      	beq.n	8016c8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016c86:	f06f 0305 	mvn.w	r3, #5
 8016c8a:	607b      	str	r3, [r7, #4]
 8016c8c:	e00c      	b.n	8016ca8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016c8e:	4b0a      	ldr	r3, [pc, #40]	; (8016cb8 <osKernelInitialize+0x44>)
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d105      	bne.n	8016ca2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016c96:	4b08      	ldr	r3, [pc, #32]	; (8016cb8 <osKernelInitialize+0x44>)
 8016c98:	2201      	movs	r2, #1
 8016c9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	607b      	str	r3, [r7, #4]
 8016ca0:	e002      	b.n	8016ca8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ca6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016ca8:	687b      	ldr	r3, [r7, #4]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	370c      	adds	r7, #12
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	2400205c 	.word	0x2400205c

08016cbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016cc2:	f3ef 8305 	mrs	r3, IPSR
 8016cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8016cc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d003      	beq.n	8016cd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016cce:	f06f 0305 	mvn.w	r3, #5
 8016cd2:	607b      	str	r3, [r7, #4]
 8016cd4:	e010      	b.n	8016cf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016cd6:	4b0b      	ldr	r3, [pc, #44]	; (8016d04 <osKernelStart+0x48>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	2b01      	cmp	r3, #1
 8016cdc:	d109      	bne.n	8016cf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016cde:	f7ff ffbf 	bl	8016c60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016ce2:	4b08      	ldr	r3, [pc, #32]	; (8016d04 <osKernelStart+0x48>)
 8016ce4:	2202      	movs	r2, #2
 8016ce6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016ce8:	f001 fc0c 	bl	8018504 <vTaskStartScheduler>
      stat = osOK;
 8016cec:	2300      	movs	r3, #0
 8016cee:	607b      	str	r3, [r7, #4]
 8016cf0:	e002      	b.n	8016cf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016cf8:	687b      	ldr	r3, [r7, #4]
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3708      	adds	r7, #8
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop
 8016d04:	2400205c 	.word	0x2400205c

08016d08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b08e      	sub	sp, #56	; 0x38
 8016d0c:	af04      	add	r7, sp, #16
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016d14:	2300      	movs	r3, #0
 8016d16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016d18:	f3ef 8305 	mrs	r3, IPSR
 8016d1c:	617b      	str	r3, [r7, #20]
  return(result);
 8016d1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d17e      	bne.n	8016e22 <osThreadNew+0x11a>
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d07b      	beq.n	8016e22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016d2a:	2380      	movs	r3, #128	; 0x80
 8016d2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016d2e:	2318      	movs	r3, #24
 8016d30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016d32:	2300      	movs	r3, #0
 8016d34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d045      	beq.n	8016dce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d002      	beq.n	8016d50 <osThreadNew+0x48>
        name = attr->name;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	699b      	ldr	r3, [r3, #24]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d002      	beq.n	8016d5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	699b      	ldr	r3, [r3, #24]
 8016d5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016d5e:	69fb      	ldr	r3, [r7, #28]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d008      	beq.n	8016d76 <osThreadNew+0x6e>
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	2b38      	cmp	r3, #56	; 0x38
 8016d68:	d805      	bhi.n	8016d76 <osThreadNew+0x6e>
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	685b      	ldr	r3, [r3, #4]
 8016d6e:	f003 0301 	and.w	r3, r3, #1
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d001      	beq.n	8016d7a <osThreadNew+0x72>
        return (NULL);
 8016d76:	2300      	movs	r3, #0
 8016d78:	e054      	b.n	8016e24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	695b      	ldr	r3, [r3, #20]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d003      	beq.n	8016d8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	695b      	ldr	r3, [r3, #20]
 8016d86:	089b      	lsrs	r3, r3, #2
 8016d88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	689b      	ldr	r3, [r3, #8]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d00e      	beq.n	8016db0 <osThreadNew+0xa8>
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	2b5b      	cmp	r3, #91	; 0x5b
 8016d98:	d90a      	bls.n	8016db0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d006      	beq.n	8016db0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	695b      	ldr	r3, [r3, #20]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d002      	beq.n	8016db0 <osThreadNew+0xa8>
        mem = 1;
 8016daa:	2301      	movs	r3, #1
 8016dac:	61bb      	str	r3, [r7, #24]
 8016dae:	e010      	b.n	8016dd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	689b      	ldr	r3, [r3, #8]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d10c      	bne.n	8016dd2 <osThreadNew+0xca>
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	68db      	ldr	r3, [r3, #12]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d108      	bne.n	8016dd2 <osThreadNew+0xca>
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	691b      	ldr	r3, [r3, #16]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d104      	bne.n	8016dd2 <osThreadNew+0xca>
          mem = 0;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	61bb      	str	r3, [r7, #24]
 8016dcc:	e001      	b.n	8016dd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016dce:	2300      	movs	r3, #0
 8016dd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016dd2:	69bb      	ldr	r3, [r7, #24]
 8016dd4:	2b01      	cmp	r3, #1
 8016dd6:	d110      	bne.n	8016dfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016de0:	9202      	str	r2, [sp, #8]
 8016de2:	9301      	str	r3, [sp, #4]
 8016de4:	69fb      	ldr	r3, [r7, #28]
 8016de6:	9300      	str	r3, [sp, #0]
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	6a3a      	ldr	r2, [r7, #32]
 8016dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016dee:	68f8      	ldr	r0, [r7, #12]
 8016df0:	f001 f9b2 	bl	8018158 <xTaskCreateStatic>
 8016df4:	4603      	mov	r3, r0
 8016df6:	613b      	str	r3, [r7, #16]
 8016df8:	e013      	b.n	8016e22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016dfa:	69bb      	ldr	r3, [r7, #24]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d110      	bne.n	8016e22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016e00:	6a3b      	ldr	r3, [r7, #32]
 8016e02:	b29a      	uxth	r2, r3
 8016e04:	f107 0310 	add.w	r3, r7, #16
 8016e08:	9301      	str	r3, [sp, #4]
 8016e0a:	69fb      	ldr	r3, [r7, #28]
 8016e0c:	9300      	str	r3, [sp, #0]
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e12:	68f8      	ldr	r0, [r7, #12]
 8016e14:	f001 f9fd 	bl	8018212 <xTaskCreate>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	2b01      	cmp	r3, #1
 8016e1c:	d001      	beq.n	8016e22 <osThreadNew+0x11a>
            hTask = NULL;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016e22:	693b      	ldr	r3, [r7, #16]
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3728      	adds	r7, #40	; 0x28
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}

08016e2c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016e2c:	b480      	push	{r7}
 8016e2e:	b083      	sub	sp, #12
 8016e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e32:	f3ef 8305 	mrs	r3, IPSR
 8016e36:	603b      	str	r3, [r7, #0]
  return(result);
 8016e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d003      	beq.n	8016e46 <osThreadYield+0x1a>
    stat = osErrorISR;
 8016e3e:	f06f 0305 	mvn.w	r3, #5
 8016e42:	607b      	str	r3, [r7, #4]
 8016e44:	e009      	b.n	8016e5a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016e46:	2300      	movs	r3, #0
 8016e48:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016e4a:	4b07      	ldr	r3, [pc, #28]	; (8016e68 <osThreadYield+0x3c>)
 8016e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e50:	601a      	str	r2, [r3, #0]
 8016e52:	f3bf 8f4f 	dsb	sy
 8016e56:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016e5a:	687b      	ldr	r3, [r7, #4]
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	370c      	adds	r7, #12
 8016e60:	46bd      	mov	sp, r7
 8016e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e66:	4770      	bx	lr
 8016e68:	e000ed04 	.word	0xe000ed04

08016e6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e74:	f3ef 8305 	mrs	r3, IPSR
 8016e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8016e7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d003      	beq.n	8016e88 <osDelay+0x1c>
    stat = osErrorISR;
 8016e80:	f06f 0305 	mvn.w	r3, #5
 8016e84:	60fb      	str	r3, [r7, #12]
 8016e86:	e007      	b.n	8016e98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016e88:	2300      	movs	r3, #0
 8016e8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d002      	beq.n	8016e98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016e92:	6878      	ldr	r0, [r7, #4]
 8016e94:	f001 fb02 	bl	801849c <vTaskDelay>
    }
  }

  return (stat);
 8016e98:	68fb      	ldr	r3, [r7, #12]
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	3710      	adds	r7, #16
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd80      	pop	{r7, pc}

08016ea2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016ea2:	b580      	push	{r7, lr}
 8016ea4:	b086      	sub	sp, #24
 8016ea6:	af00      	add	r7, sp, #0
 8016ea8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016eae:	f3ef 8305 	mrs	r3, IPSR
 8016eb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8016eb4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d12d      	bne.n	8016f16 <osEventFlagsNew+0x74>
    mem = -1;
 8016eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ebe:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d015      	beq.n	8016ef2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	689b      	ldr	r3, [r3, #8]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d006      	beq.n	8016edc <osEventFlagsNew+0x3a>
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	68db      	ldr	r3, [r3, #12]
 8016ed2:	2b1f      	cmp	r3, #31
 8016ed4:	d902      	bls.n	8016edc <osEventFlagsNew+0x3a>
        mem = 1;
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	613b      	str	r3, [r7, #16]
 8016eda:	e00c      	b.n	8016ef6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	689b      	ldr	r3, [r3, #8]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d108      	bne.n	8016ef6 <osEventFlagsNew+0x54>
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d104      	bne.n	8016ef6 <osEventFlagsNew+0x54>
          mem = 0;
 8016eec:	2300      	movs	r3, #0
 8016eee:	613b      	str	r3, [r7, #16]
 8016ef0:	e001      	b.n	8016ef6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016ef6:	693b      	ldr	r3, [r7, #16]
 8016ef8:	2b01      	cmp	r3, #1
 8016efa:	d106      	bne.n	8016f0a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	689b      	ldr	r3, [r3, #8]
 8016f00:	4618      	mov	r0, r3
 8016f02:	f000 f91d 	bl	8017140 <xEventGroupCreateStatic>
 8016f06:	6178      	str	r0, [r7, #20]
 8016f08:	e005      	b.n	8016f16 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d102      	bne.n	8016f16 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016f10:	f000 f94d 	bl	80171ae <xEventGroupCreate>
 8016f14:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016f16:	697b      	ldr	r3, [r7, #20]
}
 8016f18:	4618      	mov	r0, r3
 8016f1a:	3718      	adds	r7, #24
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}

08016f20 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b086      	sub	sp, #24
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016f2e:	693b      	ldr	r3, [r7, #16]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d004      	beq.n	8016f3e <osEventFlagsSet+0x1e>
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d003      	beq.n	8016f46 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016f3e:	f06f 0303 	mvn.w	r3, #3
 8016f42:	617b      	str	r3, [r7, #20]
 8016f44:	e028      	b.n	8016f98 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f46:	f3ef 8305 	mrs	r3, IPSR
 8016f4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f4c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d01d      	beq.n	8016f8e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016f52:	2300      	movs	r3, #0
 8016f54:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016f56:	f107 0308 	add.w	r3, r7, #8
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	6839      	ldr	r1, [r7, #0]
 8016f5e:	6938      	ldr	r0, [r7, #16]
 8016f60:	f000 fb46 	bl	80175f0 <xEventGroupSetBitsFromISR>
 8016f64:	4603      	mov	r3, r0
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d103      	bne.n	8016f72 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016f6a:	f06f 0302 	mvn.w	r3, #2
 8016f6e:	617b      	str	r3, [r7, #20]
 8016f70:	e012      	b.n	8016f98 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d00d      	beq.n	8016f98 <osEventFlagsSet+0x78>
 8016f7c:	4b09      	ldr	r3, [pc, #36]	; (8016fa4 <osEventFlagsSet+0x84>)
 8016f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f82:	601a      	str	r2, [r3, #0]
 8016f84:	f3bf 8f4f 	dsb	sy
 8016f88:	f3bf 8f6f 	isb	sy
 8016f8c:	e004      	b.n	8016f98 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016f8e:	6839      	ldr	r1, [r7, #0]
 8016f90:	6938      	ldr	r0, [r7, #16]
 8016f92:	f000 fa65 	bl	8017460 <xEventGroupSetBits>
 8016f96:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016f98:	697b      	ldr	r3, [r7, #20]
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3718      	adds	r7, #24
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}
 8016fa2:	bf00      	nop
 8016fa4:	e000ed04 	.word	0xe000ed04

08016fa8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b086      	sub	sp, #24
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
 8016fb0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d004      	beq.n	8016fc6 <osEventFlagsClear+0x1e>
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d003      	beq.n	8016fce <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016fc6:	f06f 0303 	mvn.w	r3, #3
 8016fca:	617b      	str	r3, [r7, #20]
 8016fcc:	e019      	b.n	8017002 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016fce:	f3ef 8305 	mrs	r3, IPSR
 8016fd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d00e      	beq.n	8016ff8 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016fda:	6938      	ldr	r0, [r7, #16]
 8016fdc:	f000 fa1c 	bl	8017418 <xEventGroupGetBitsFromISR>
 8016fe0:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016fe2:	6839      	ldr	r1, [r7, #0]
 8016fe4:	6938      	ldr	r0, [r7, #16]
 8016fe6:	f000 fa03 	bl	80173f0 <xEventGroupClearBitsFromISR>
 8016fea:	4603      	mov	r3, r0
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d108      	bne.n	8017002 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016ff0:	f06f 0302 	mvn.w	r3, #2
 8016ff4:	617b      	str	r3, [r7, #20]
 8016ff6:	e004      	b.n	8017002 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016ff8:	6839      	ldr	r1, [r7, #0]
 8016ffa:	6938      	ldr	r0, [r7, #16]
 8016ffc:	f000 f9c0 	bl	8017380 <xEventGroupClearBits>
 8017000:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8017002:	697b      	ldr	r3, [r7, #20]
}
 8017004:	4618      	mov	r0, r3
 8017006:	3718      	adds	r7, #24
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}

0801700c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801700c:	b580      	push	{r7, lr}
 801700e:	b08c      	sub	sp, #48	; 0x30
 8017010:	af02      	add	r7, sp, #8
 8017012:	60f8      	str	r0, [r7, #12]
 8017014:	60b9      	str	r1, [r7, #8]
 8017016:	607a      	str	r2, [r7, #4]
 8017018:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801701e:	69bb      	ldr	r3, [r7, #24]
 8017020:	2b00      	cmp	r3, #0
 8017022:	d004      	beq.n	801702e <osEventFlagsWait+0x22>
 8017024:	68bb      	ldr	r3, [r7, #8]
 8017026:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801702a:	2b00      	cmp	r3, #0
 801702c:	d003      	beq.n	8017036 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801702e:	f06f 0303 	mvn.w	r3, #3
 8017032:	61fb      	str	r3, [r7, #28]
 8017034:	e04b      	b.n	80170ce <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017036:	f3ef 8305 	mrs	r3, IPSR
 801703a:	617b      	str	r3, [r7, #20]
  return(result);
 801703c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801703e:	2b00      	cmp	r3, #0
 8017040:	d003      	beq.n	801704a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8017042:	f06f 0305 	mvn.w	r3, #5
 8017046:	61fb      	str	r3, [r7, #28]
 8017048:	e041      	b.n	80170ce <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f003 0301 	and.w	r3, r3, #1
 8017050:	2b00      	cmp	r3, #0
 8017052:	d002      	beq.n	801705a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8017054:	2301      	movs	r3, #1
 8017056:	627b      	str	r3, [r7, #36]	; 0x24
 8017058:	e001      	b.n	801705e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801705a:	2300      	movs	r3, #0
 801705c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	f003 0302 	and.w	r3, r3, #2
 8017064:	2b00      	cmp	r3, #0
 8017066:	d002      	beq.n	801706e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8017068:	2300      	movs	r3, #0
 801706a:	623b      	str	r3, [r7, #32]
 801706c:	e001      	b.n	8017072 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801706e:	2301      	movs	r3, #1
 8017070:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	9300      	str	r3, [sp, #0]
 8017076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017078:	6a3a      	ldr	r2, [r7, #32]
 801707a:	68b9      	ldr	r1, [r7, #8]
 801707c:	69b8      	ldr	r0, [r7, #24]
 801707e:	f000 f8b1 	bl	80171e4 <xEventGroupWaitBits>
 8017082:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	f003 0301 	and.w	r3, r3, #1
 801708a:	2b00      	cmp	r3, #0
 801708c:	d010      	beq.n	80170b0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801708e:	68ba      	ldr	r2, [r7, #8]
 8017090:	69fb      	ldr	r3, [r7, #28]
 8017092:	4013      	ands	r3, r2
 8017094:	68ba      	ldr	r2, [r7, #8]
 8017096:	429a      	cmp	r2, r3
 8017098:	d019      	beq.n	80170ce <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d003      	beq.n	80170a8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80170a0:	f06f 0301 	mvn.w	r3, #1
 80170a4:	61fb      	str	r3, [r7, #28]
 80170a6:	e012      	b.n	80170ce <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80170a8:	f06f 0302 	mvn.w	r3, #2
 80170ac:	61fb      	str	r3, [r7, #28]
 80170ae:	e00e      	b.n	80170ce <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80170b0:	68ba      	ldr	r2, [r7, #8]
 80170b2:	69fb      	ldr	r3, [r7, #28]
 80170b4:	4013      	ands	r3, r2
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d109      	bne.n	80170ce <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d003      	beq.n	80170c8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80170c0:	f06f 0301 	mvn.w	r3, #1
 80170c4:	61fb      	str	r3, [r7, #28]
 80170c6:	e002      	b.n	80170ce <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80170c8:	f06f 0302 	mvn.w	r3, #2
 80170cc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80170ce:	69fb      	ldr	r3, [r7, #28]
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3728      	adds	r7, #40	; 0x28
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}

080170d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80170d8:	b480      	push	{r7}
 80170da:	b085      	sub	sp, #20
 80170dc:	af00      	add	r7, sp, #0
 80170de:	60f8      	str	r0, [r7, #12]
 80170e0:	60b9      	str	r1, [r7, #8]
 80170e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	4a07      	ldr	r2, [pc, #28]	; (8017104 <vApplicationGetIdleTaskMemory+0x2c>)
 80170e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	4a06      	ldr	r2, [pc, #24]	; (8017108 <vApplicationGetIdleTaskMemory+0x30>)
 80170ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	2280      	movs	r2, #128	; 0x80
 80170f4:	601a      	str	r2, [r3, #0]
}
 80170f6:	bf00      	nop
 80170f8:	3714      	adds	r7, #20
 80170fa:	46bd      	mov	sp, r7
 80170fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017100:	4770      	bx	lr
 8017102:	bf00      	nop
 8017104:	24002060 	.word	0x24002060
 8017108:	240020bc 	.word	0x240020bc

0801710c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801710c:	b480      	push	{r7}
 801710e:	b085      	sub	sp, #20
 8017110:	af00      	add	r7, sp, #0
 8017112:	60f8      	str	r0, [r7, #12]
 8017114:	60b9      	str	r1, [r7, #8]
 8017116:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	4a07      	ldr	r2, [pc, #28]	; (8017138 <vApplicationGetTimerTaskMemory+0x2c>)
 801711c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	4a06      	ldr	r2, [pc, #24]	; (801713c <vApplicationGetTimerTaskMemory+0x30>)
 8017122:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	f44f 7280 	mov.w	r2, #256	; 0x100
 801712a:	601a      	str	r2, [r3, #0]
}
 801712c:	bf00      	nop
 801712e:	3714      	adds	r7, #20
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr
 8017138:	240022bc 	.word	0x240022bc
 801713c:	24002318 	.word	0x24002318

08017140 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8017140:	b580      	push	{r7, lr}
 8017142:	b086      	sub	sp, #24
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d10a      	bne.n	8017164 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017152:	f383 8811 	msr	BASEPRI, r3
 8017156:	f3bf 8f6f 	isb	sy
 801715a:	f3bf 8f4f 	dsb	sy
 801715e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017160:	bf00      	nop
 8017162:	e7fe      	b.n	8017162 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8017164:	2320      	movs	r3, #32
 8017166:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8017168:	68bb      	ldr	r3, [r7, #8]
 801716a:	2b20      	cmp	r3, #32
 801716c:	d00a      	beq.n	8017184 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017172:	f383 8811 	msr	BASEPRI, r3
 8017176:	f3bf 8f6f 	isb	sy
 801717a:	f3bf 8f4f 	dsb	sy
 801717e:	60fb      	str	r3, [r7, #12]
}
 8017180:	bf00      	nop
 8017182:	e7fe      	b.n	8017182 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017188:	697b      	ldr	r3, [r7, #20]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d00a      	beq.n	80171a4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	2200      	movs	r2, #0
 8017192:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017194:	697b      	ldr	r3, [r7, #20]
 8017196:	3304      	adds	r3, #4
 8017198:	4618      	mov	r0, r3
 801719a:	f000 fa3d 	bl	8017618 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801719e:	697b      	ldr	r3, [r7, #20]
 80171a0:	2201      	movs	r2, #1
 80171a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80171a4:	697b      	ldr	r3, [r7, #20]
	}
 80171a6:	4618      	mov	r0, r3
 80171a8:	3718      	adds	r7, #24
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}

080171ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80171ae:	b580      	push	{r7, lr}
 80171b0:	b082      	sub	sp, #8
 80171b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80171b4:	2020      	movs	r0, #32
 80171b6:	f002 fd57 	bl	8019c68 <pvPortMalloc>
 80171ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d00a      	beq.n	80171d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	2200      	movs	r2, #0
 80171c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	3304      	adds	r3, #4
 80171cc:	4618      	mov	r0, r3
 80171ce:	f000 fa23 	bl	8017618 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	2200      	movs	r2, #0
 80171d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80171d8:	687b      	ldr	r3, [r7, #4]
	}
 80171da:	4618      	mov	r0, r3
 80171dc:	3708      	adds	r7, #8
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}
	...

080171e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b090      	sub	sp, #64	; 0x40
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	607a      	str	r2, [r7, #4]
 80171f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80171f6:	2300      	movs	r3, #0
 80171f8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80171fa:	2300      	movs	r3, #0
 80171fc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d10a      	bne.n	801721a <xEventGroupWaitBits+0x36>
	__asm volatile
 8017204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017208:	f383 8811 	msr	BASEPRI, r3
 801720c:	f3bf 8f6f 	isb	sy
 8017210:	f3bf 8f4f 	dsb	sy
 8017214:	623b      	str	r3, [r7, #32]
}
 8017216:	bf00      	nop
 8017218:	e7fe      	b.n	8017218 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017220:	2b00      	cmp	r3, #0
 8017222:	d00a      	beq.n	801723a <xEventGroupWaitBits+0x56>
	__asm volatile
 8017224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017228:	f383 8811 	msr	BASEPRI, r3
 801722c:	f3bf 8f6f 	isb	sy
 8017230:	f3bf 8f4f 	dsb	sy
 8017234:	61fb      	str	r3, [r7, #28]
}
 8017236:	bf00      	nop
 8017238:	e7fe      	b.n	8017238 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801723a:	68bb      	ldr	r3, [r7, #8]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d10a      	bne.n	8017256 <xEventGroupWaitBits+0x72>
	__asm volatile
 8017240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017244:	f383 8811 	msr	BASEPRI, r3
 8017248:	f3bf 8f6f 	isb	sy
 801724c:	f3bf 8f4f 	dsb	sy
 8017250:	61bb      	str	r3, [r7, #24]
}
 8017252:	bf00      	nop
 8017254:	e7fe      	b.n	8017254 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017256:	f001 fe51 	bl	8018efc <xTaskGetSchedulerState>
 801725a:	4603      	mov	r3, r0
 801725c:	2b00      	cmp	r3, #0
 801725e:	d102      	bne.n	8017266 <xEventGroupWaitBits+0x82>
 8017260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017262:	2b00      	cmp	r3, #0
 8017264:	d101      	bne.n	801726a <xEventGroupWaitBits+0x86>
 8017266:	2301      	movs	r3, #1
 8017268:	e000      	b.n	801726c <xEventGroupWaitBits+0x88>
 801726a:	2300      	movs	r3, #0
 801726c:	2b00      	cmp	r3, #0
 801726e:	d10a      	bne.n	8017286 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8017270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017274:	f383 8811 	msr	BASEPRI, r3
 8017278:	f3bf 8f6f 	isb	sy
 801727c:	f3bf 8f4f 	dsb	sy
 8017280:	617b      	str	r3, [r7, #20]
}
 8017282:	bf00      	nop
 8017284:	e7fe      	b.n	8017284 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017286:	f001 f9a3 	bl	80185d0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8017290:	683a      	ldr	r2, [r7, #0]
 8017292:	68b9      	ldr	r1, [r7, #8]
 8017294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017296:	f000 f988 	bl	80175aa <prvTestWaitCondition>
 801729a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d00e      	beq.n	80172c0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80172a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80172a6:	2300      	movs	r3, #0
 80172a8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d028      	beq.n	8017302 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80172b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172b2:	681a      	ldr	r2, [r3, #0]
 80172b4:	68bb      	ldr	r3, [r7, #8]
 80172b6:	43db      	mvns	r3, r3
 80172b8:	401a      	ands	r2, r3
 80172ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172bc:	601a      	str	r2, [r3, #0]
 80172be:	e020      	b.n	8017302 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80172c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d104      	bne.n	80172d0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80172c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80172ca:	2301      	movs	r3, #1
 80172cc:	633b      	str	r3, [r7, #48]	; 0x30
 80172ce:	e018      	b.n	8017302 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d003      	beq.n	80172de <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80172d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80172dc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d003      	beq.n	80172ec <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80172e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80172ea:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80172ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172ee:	1d18      	adds	r0, r3, #4
 80172f0:	68ba      	ldr	r2, [r7, #8]
 80172f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172f4:	4313      	orrs	r3, r2
 80172f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80172f8:	4619      	mov	r1, r3
 80172fa:	f001 fb77 	bl	80189ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80172fe:	2300      	movs	r3, #0
 8017300:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8017302:	f001 f973 	bl	80185ec <xTaskResumeAll>
 8017306:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801730a:	2b00      	cmp	r3, #0
 801730c:	d031      	beq.n	8017372 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017310:	2b00      	cmp	r3, #0
 8017312:	d107      	bne.n	8017324 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017314:	4b19      	ldr	r3, [pc, #100]	; (801737c <xEventGroupWaitBits+0x198>)
 8017316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801731a:	601a      	str	r2, [r3, #0]
 801731c:	f3bf 8f4f 	dsb	sy
 8017320:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017324:	f001 fe76 	bl	8019014 <uxTaskResetEventItemValue>
 8017328:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801732c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017330:	2b00      	cmp	r3, #0
 8017332:	d11a      	bne.n	801736a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017334:	f002 fb76 	bl	8019a24 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801733e:	683a      	ldr	r2, [r7, #0]
 8017340:	68b9      	ldr	r1, [r7, #8]
 8017342:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017344:	f000 f931 	bl	80175aa <prvTestWaitCondition>
 8017348:	4603      	mov	r3, r0
 801734a:	2b00      	cmp	r3, #0
 801734c:	d009      	beq.n	8017362 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d006      	beq.n	8017362 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017356:	681a      	ldr	r2, [r3, #0]
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	43db      	mvns	r3, r3
 801735c:	401a      	ands	r2, r3
 801735e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017360:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8017362:	2301      	movs	r3, #1
 8017364:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017366:	f002 fb8d 	bl	8019a84 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801736c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017370:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8017372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017374:	4618      	mov	r0, r3
 8017376:	3740      	adds	r7, #64	; 0x40
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}
 801737c:	e000ed04 	.word	0xe000ed04

08017380 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b086      	sub	sp, #24
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d10a      	bne.n	80173aa <xEventGroupClearBits+0x2a>
	__asm volatile
 8017394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017398:	f383 8811 	msr	BASEPRI, r3
 801739c:	f3bf 8f6f 	isb	sy
 80173a0:	f3bf 8f4f 	dsb	sy
 80173a4:	60fb      	str	r3, [r7, #12]
}
 80173a6:	bf00      	nop
 80173a8:	e7fe      	b.n	80173a8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d00a      	beq.n	80173ca <xEventGroupClearBits+0x4a>
	__asm volatile
 80173b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173b8:	f383 8811 	msr	BASEPRI, r3
 80173bc:	f3bf 8f6f 	isb	sy
 80173c0:	f3bf 8f4f 	dsb	sy
 80173c4:	60bb      	str	r3, [r7, #8]
}
 80173c6:	bf00      	nop
 80173c8:	e7fe      	b.n	80173c8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80173ca:	f002 fb2b 	bl	8019a24 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80173d4:	697b      	ldr	r3, [r7, #20]
 80173d6:	681a      	ldr	r2, [r3, #0]
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	43db      	mvns	r3, r3
 80173dc:	401a      	ands	r2, r3
 80173de:	697b      	ldr	r3, [r7, #20]
 80173e0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80173e2:	f002 fb4f 	bl	8019a84 <vPortExitCritical>

	return uxReturn;
 80173e6:	693b      	ldr	r3, [r7, #16]
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3718      	adds	r7, #24
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}

080173f0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b084      	sub	sp, #16
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80173fa:	2300      	movs	r3, #0
 80173fc:	683a      	ldr	r2, [r7, #0]
 80173fe:	6879      	ldr	r1, [r7, #4]
 8017400:	4804      	ldr	r0, [pc, #16]	; (8017414 <xEventGroupClearBitsFromISR+0x24>)
 8017402:	f002 f9c1 	bl	8019788 <xTimerPendFunctionCallFromISR>
 8017406:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017408:	68fb      	ldr	r3, [r7, #12]
	}
 801740a:	4618      	mov	r0, r3
 801740c:	3710      	adds	r7, #16
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}
 8017412:	bf00      	nop
 8017414:	08017591 	.word	0x08017591

08017418 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017418:	b480      	push	{r7}
 801741a:	b089      	sub	sp, #36	; 0x24
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017424:	f3ef 8211 	mrs	r2, BASEPRI
 8017428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801742c:	f383 8811 	msr	BASEPRI, r3
 8017430:	f3bf 8f6f 	isb	sy
 8017434:	f3bf 8f4f 	dsb	sy
 8017438:	60fa      	str	r2, [r7, #12]
 801743a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801743c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801743e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8017440:	69fb      	ldr	r3, [r7, #28]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	617b      	str	r3, [r7, #20]
 8017446:	69bb      	ldr	r3, [r7, #24]
 8017448:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017450:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8017452:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017454:	4618      	mov	r0, r3
 8017456:	3724      	adds	r7, #36	; 0x24
 8017458:	46bd      	mov	sp, r7
 801745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801745e:	4770      	bx	lr

08017460 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8017460:	b580      	push	{r7, lr}
 8017462:	b08e      	sub	sp, #56	; 0x38
 8017464:	af00      	add	r7, sp, #0
 8017466:	6078      	str	r0, [r7, #4]
 8017468:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801746a:	2300      	movs	r3, #0
 801746c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017472:	2300      	movs	r3, #0
 8017474:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d10a      	bne.n	8017492 <xEventGroupSetBits+0x32>
	__asm volatile
 801747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017480:	f383 8811 	msr	BASEPRI, r3
 8017484:	f3bf 8f6f 	isb	sy
 8017488:	f3bf 8f4f 	dsb	sy
 801748c:	613b      	str	r3, [r7, #16]
}
 801748e:	bf00      	nop
 8017490:	e7fe      	b.n	8017490 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017498:	2b00      	cmp	r3, #0
 801749a:	d00a      	beq.n	80174b2 <xEventGroupSetBits+0x52>
	__asm volatile
 801749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174a0:	f383 8811 	msr	BASEPRI, r3
 80174a4:	f3bf 8f6f 	isb	sy
 80174a8:	f3bf 8f4f 	dsb	sy
 80174ac:	60fb      	str	r3, [r7, #12]
}
 80174ae:	bf00      	nop
 80174b0:	e7fe      	b.n	80174b0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80174b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b4:	3304      	adds	r3, #4
 80174b6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80174b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ba:	3308      	adds	r3, #8
 80174bc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80174be:	f001 f887 	bl	80185d0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80174c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c4:	68db      	ldr	r3, [r3, #12]
 80174c6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80174c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ca:	681a      	ldr	r2, [r3, #0]
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	431a      	orrs	r2, r3
 80174d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80174d4:	e03c      	b.n	8017550 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80174d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174d8:	685b      	ldr	r3, [r3, #4]
 80174da:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80174dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80174e2:	2300      	movs	r3, #0
 80174e4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80174e6:	69bb      	ldr	r3, [r7, #24]
 80174e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80174ec:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80174ee:	69bb      	ldr	r3, [r7, #24]
 80174f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80174f4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80174f6:	697b      	ldr	r3, [r7, #20]
 80174f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d108      	bne.n	8017512 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017502:	681a      	ldr	r2, [r3, #0]
 8017504:	69bb      	ldr	r3, [r7, #24]
 8017506:	4013      	ands	r3, r2
 8017508:	2b00      	cmp	r3, #0
 801750a:	d00b      	beq.n	8017524 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801750c:	2301      	movs	r3, #1
 801750e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017510:	e008      	b.n	8017524 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8017512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017514:	681a      	ldr	r2, [r3, #0]
 8017516:	69bb      	ldr	r3, [r7, #24]
 8017518:	4013      	ands	r3, r2
 801751a:	69ba      	ldr	r2, [r7, #24]
 801751c:	429a      	cmp	r2, r3
 801751e:	d101      	bne.n	8017524 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8017520:	2301      	movs	r3, #1
 8017522:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017526:	2b00      	cmp	r3, #0
 8017528:	d010      	beq.n	801754c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801752a:	697b      	ldr	r3, [r7, #20]
 801752c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017530:	2b00      	cmp	r3, #0
 8017532:	d003      	beq.n	801753c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017536:	69bb      	ldr	r3, [r7, #24]
 8017538:	4313      	orrs	r3, r2
 801753a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017544:	4619      	mov	r1, r3
 8017546:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017548:	f001 fb1c 	bl	8018b84 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801754c:	69fb      	ldr	r3, [r7, #28]
 801754e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8017550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017552:	6a3b      	ldr	r3, [r7, #32]
 8017554:	429a      	cmp	r2, r3
 8017556:	d1be      	bne.n	80174d6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755a:	681a      	ldr	r2, [r3, #0]
 801755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801755e:	43db      	mvns	r3, r3
 8017560:	401a      	ands	r2, r3
 8017562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017564:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017566:	f001 f841 	bl	80185ec <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801756c:	681b      	ldr	r3, [r3, #0]
}
 801756e:	4618      	mov	r0, r3
 8017570:	3738      	adds	r7, #56	; 0x38
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}

08017576 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017576:	b580      	push	{r7, lr}
 8017578:	b082      	sub	sp, #8
 801757a:	af00      	add	r7, sp, #0
 801757c:	6078      	str	r0, [r7, #4]
 801757e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017580:	6839      	ldr	r1, [r7, #0]
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	f7ff ff6c 	bl	8017460 <xEventGroupSetBits>
}
 8017588:	bf00      	nop
 801758a:	3708      	adds	r7, #8
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801759a:	6839      	ldr	r1, [r7, #0]
 801759c:	6878      	ldr	r0, [r7, #4]
 801759e:	f7ff feef 	bl	8017380 <xEventGroupClearBits>
}
 80175a2:	bf00      	nop
 80175a4:	3708      	adds	r7, #8
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}

080175aa <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80175aa:	b480      	push	{r7}
 80175ac:	b087      	sub	sp, #28
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	60f8      	str	r0, [r7, #12]
 80175b2:	60b9      	str	r1, [r7, #8]
 80175b4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80175b6:	2300      	movs	r3, #0
 80175b8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d107      	bne.n	80175d0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80175c0:	68fa      	ldr	r2, [r7, #12]
 80175c2:	68bb      	ldr	r3, [r7, #8]
 80175c4:	4013      	ands	r3, r2
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d00a      	beq.n	80175e0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80175ca:	2301      	movs	r3, #1
 80175cc:	617b      	str	r3, [r7, #20]
 80175ce:	e007      	b.n	80175e0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80175d0:	68fa      	ldr	r2, [r7, #12]
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	4013      	ands	r3, r2
 80175d6:	68ba      	ldr	r2, [r7, #8]
 80175d8:	429a      	cmp	r2, r3
 80175da:	d101      	bne.n	80175e0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80175dc:	2301      	movs	r3, #1
 80175de:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80175e0:	697b      	ldr	r3, [r7, #20]
}
 80175e2:	4618      	mov	r0, r3
 80175e4:	371c      	adds	r7, #28
 80175e6:	46bd      	mov	sp, r7
 80175e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ec:	4770      	bx	lr
	...

080175f0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b086      	sub	sp, #24
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	68ba      	ldr	r2, [r7, #8]
 8017600:	68f9      	ldr	r1, [r7, #12]
 8017602:	4804      	ldr	r0, [pc, #16]	; (8017614 <xEventGroupSetBitsFromISR+0x24>)
 8017604:	f002 f8c0 	bl	8019788 <xTimerPendFunctionCallFromISR>
 8017608:	6178      	str	r0, [r7, #20]

		return xReturn;
 801760a:	697b      	ldr	r3, [r7, #20]
	}
 801760c:	4618      	mov	r0, r3
 801760e:	3718      	adds	r7, #24
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}
 8017614:	08017577 	.word	0x08017577

08017618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017618:	b480      	push	{r7}
 801761a:	b083      	sub	sp, #12
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f103 0208 	add.w	r2, r3, #8
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f103 0208 	add.w	r2, r3, #8
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f103 0208 	add.w	r2, r3, #8
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2200      	movs	r2, #0
 801764a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801764c:	bf00      	nop
 801764e:	370c      	adds	r7, #12
 8017650:	46bd      	mov	sp, r7
 8017652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017656:	4770      	bx	lr

08017658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017658:	b480      	push	{r7}
 801765a:	b083      	sub	sp, #12
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2200      	movs	r2, #0
 8017664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017666:	bf00      	nop
 8017668:	370c      	adds	r7, #12
 801766a:	46bd      	mov	sp, r7
 801766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017670:	4770      	bx	lr

08017672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017672:	b480      	push	{r7}
 8017674:	b085      	sub	sp, #20
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
 801767a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017682:	683b      	ldr	r3, [r7, #0]
 8017684:	68fa      	ldr	r2, [r7, #12]
 8017686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	689a      	ldr	r2, [r3, #8]
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	689b      	ldr	r3, [r3, #8]
 8017694:	683a      	ldr	r2, [r7, #0]
 8017696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	683a      	ldr	r2, [r7, #0]
 801769c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	687a      	ldr	r2, [r7, #4]
 80176a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	1c5a      	adds	r2, r3, #1
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	601a      	str	r2, [r3, #0]
}
 80176ae:	bf00      	nop
 80176b0:	3714      	adds	r7, #20
 80176b2:	46bd      	mov	sp, r7
 80176b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b8:	4770      	bx	lr

080176ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80176ba:	b480      	push	{r7}
 80176bc:	b085      	sub	sp, #20
 80176be:	af00      	add	r7, sp, #0
 80176c0:	6078      	str	r0, [r7, #4]
 80176c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176d0:	d103      	bne.n	80176da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	691b      	ldr	r3, [r3, #16]
 80176d6:	60fb      	str	r3, [r7, #12]
 80176d8:	e00c      	b.n	80176f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	3308      	adds	r3, #8
 80176de:	60fb      	str	r3, [r7, #12]
 80176e0:	e002      	b.n	80176e8 <vListInsert+0x2e>
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	685b      	ldr	r3, [r3, #4]
 80176e6:	60fb      	str	r3, [r7, #12]
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	685b      	ldr	r3, [r3, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	68ba      	ldr	r2, [r7, #8]
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d2f6      	bcs.n	80176e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	683b      	ldr	r3, [r7, #0]
 80176fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80176fc:	683b      	ldr	r3, [r7, #0]
 80176fe:	685b      	ldr	r3, [r3, #4]
 8017700:	683a      	ldr	r2, [r7, #0]
 8017702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	68fa      	ldr	r2, [r7, #12]
 8017708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	683a      	ldr	r2, [r7, #0]
 801770e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017710:	683b      	ldr	r3, [r7, #0]
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	1c5a      	adds	r2, r3, #1
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	601a      	str	r2, [r3, #0]
}
 8017720:	bf00      	nop
 8017722:	3714      	adds	r7, #20
 8017724:	46bd      	mov	sp, r7
 8017726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772a:	4770      	bx	lr

0801772c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801772c:	b480      	push	{r7}
 801772e:	b085      	sub	sp, #20
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	691b      	ldr	r3, [r3, #16]
 8017738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	685b      	ldr	r3, [r3, #4]
 801773e:	687a      	ldr	r2, [r7, #4]
 8017740:	6892      	ldr	r2, [r2, #8]
 8017742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	689b      	ldr	r3, [r3, #8]
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	6852      	ldr	r2, [r2, #4]
 801774c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	685b      	ldr	r3, [r3, #4]
 8017752:	687a      	ldr	r2, [r7, #4]
 8017754:	429a      	cmp	r2, r3
 8017756:	d103      	bne.n	8017760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	689a      	ldr	r2, [r3, #8]
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	2200      	movs	r2, #0
 8017764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	1e5a      	subs	r2, r3, #1
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	681b      	ldr	r3, [r3, #0]
}
 8017774:	4618      	mov	r0, r3
 8017776:	3714      	adds	r7, #20
 8017778:	46bd      	mov	sp, r7
 801777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801777e:	4770      	bx	lr

08017780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b084      	sub	sp, #16
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
 8017788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d10a      	bne.n	80177aa <xQueueGenericReset+0x2a>
	__asm volatile
 8017794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017798:	f383 8811 	msr	BASEPRI, r3
 801779c:	f3bf 8f6f 	isb	sy
 80177a0:	f3bf 8f4f 	dsb	sy
 80177a4:	60bb      	str	r3, [r7, #8]
}
 80177a6:	bf00      	nop
 80177a8:	e7fe      	b.n	80177a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80177aa:	f002 f93b 	bl	8019a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	681a      	ldr	r2, [r3, #0]
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177b6:	68f9      	ldr	r1, [r7, #12]
 80177b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80177ba:	fb01 f303 	mul.w	r3, r1, r3
 80177be:	441a      	add	r2, r3
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2200      	movs	r2, #0
 80177c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	681a      	ldr	r2, [r3, #0]
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	681a      	ldr	r2, [r3, #0]
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177da:	3b01      	subs	r3, #1
 80177dc:	68f9      	ldr	r1, [r7, #12]
 80177de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80177e0:	fb01 f303 	mul.w	r3, r1, r3
 80177e4:	441a      	add	r2, r3
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	22ff      	movs	r2, #255	; 0xff
 80177ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	22ff      	movs	r2, #255	; 0xff
 80177f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d114      	bne.n	801782a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	691b      	ldr	r3, [r3, #16]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d01a      	beq.n	801783e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	3310      	adds	r3, #16
 801780c:	4618      	mov	r0, r3
 801780e:	f001 f955 	bl	8018abc <xTaskRemoveFromEventList>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d012      	beq.n	801783e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017818:	4b0c      	ldr	r3, [pc, #48]	; (801784c <xQueueGenericReset+0xcc>)
 801781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801781e:	601a      	str	r2, [r3, #0]
 8017820:	f3bf 8f4f 	dsb	sy
 8017824:	f3bf 8f6f 	isb	sy
 8017828:	e009      	b.n	801783e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	3310      	adds	r3, #16
 801782e:	4618      	mov	r0, r3
 8017830:	f7ff fef2 	bl	8017618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	3324      	adds	r3, #36	; 0x24
 8017838:	4618      	mov	r0, r3
 801783a:	f7ff feed 	bl	8017618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801783e:	f002 f921 	bl	8019a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017842:	2301      	movs	r3, #1
}
 8017844:	4618      	mov	r0, r3
 8017846:	3710      	adds	r7, #16
 8017848:	46bd      	mov	sp, r7
 801784a:	bd80      	pop	{r7, pc}
 801784c:	e000ed04 	.word	0xe000ed04

08017850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017850:	b580      	push	{r7, lr}
 8017852:	b08e      	sub	sp, #56	; 0x38
 8017854:	af02      	add	r7, sp, #8
 8017856:	60f8      	str	r0, [r7, #12]
 8017858:	60b9      	str	r1, [r7, #8]
 801785a:	607a      	str	r2, [r7, #4]
 801785c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d10a      	bne.n	801787a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017868:	f383 8811 	msr	BASEPRI, r3
 801786c:	f3bf 8f6f 	isb	sy
 8017870:	f3bf 8f4f 	dsb	sy
 8017874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017876:	bf00      	nop
 8017878:	e7fe      	b.n	8017878 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d10a      	bne.n	8017896 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017884:	f383 8811 	msr	BASEPRI, r3
 8017888:	f3bf 8f6f 	isb	sy
 801788c:	f3bf 8f4f 	dsb	sy
 8017890:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017892:	bf00      	nop
 8017894:	e7fe      	b.n	8017894 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d002      	beq.n	80178a2 <xQueueGenericCreateStatic+0x52>
 801789c:	68bb      	ldr	r3, [r7, #8]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d001      	beq.n	80178a6 <xQueueGenericCreateStatic+0x56>
 80178a2:	2301      	movs	r3, #1
 80178a4:	e000      	b.n	80178a8 <xQueueGenericCreateStatic+0x58>
 80178a6:	2300      	movs	r3, #0
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d10a      	bne.n	80178c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80178ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178b0:	f383 8811 	msr	BASEPRI, r3
 80178b4:	f3bf 8f6f 	isb	sy
 80178b8:	f3bf 8f4f 	dsb	sy
 80178bc:	623b      	str	r3, [r7, #32]
}
 80178be:	bf00      	nop
 80178c0:	e7fe      	b.n	80178c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d102      	bne.n	80178ce <xQueueGenericCreateStatic+0x7e>
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d101      	bne.n	80178d2 <xQueueGenericCreateStatic+0x82>
 80178ce:	2301      	movs	r3, #1
 80178d0:	e000      	b.n	80178d4 <xQueueGenericCreateStatic+0x84>
 80178d2:	2300      	movs	r3, #0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d10a      	bne.n	80178ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80178d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178dc:	f383 8811 	msr	BASEPRI, r3
 80178e0:	f3bf 8f6f 	isb	sy
 80178e4:	f3bf 8f4f 	dsb	sy
 80178e8:	61fb      	str	r3, [r7, #28]
}
 80178ea:	bf00      	nop
 80178ec:	e7fe      	b.n	80178ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80178ee:	2350      	movs	r3, #80	; 0x50
 80178f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80178f2:	697b      	ldr	r3, [r7, #20]
 80178f4:	2b50      	cmp	r3, #80	; 0x50
 80178f6:	d00a      	beq.n	801790e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80178f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178fc:	f383 8811 	msr	BASEPRI, r3
 8017900:	f3bf 8f6f 	isb	sy
 8017904:	f3bf 8f4f 	dsb	sy
 8017908:	61bb      	str	r3, [r7, #24]
}
 801790a:	bf00      	nop
 801790c:	e7fe      	b.n	801790c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801790e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017910:	683b      	ldr	r3, [r7, #0]
 8017912:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017916:	2b00      	cmp	r3, #0
 8017918:	d00d      	beq.n	8017936 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791c:	2201      	movs	r2, #1
 801791e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017922:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017928:	9300      	str	r3, [sp, #0]
 801792a:	4613      	mov	r3, r2
 801792c:	687a      	ldr	r2, [r7, #4]
 801792e:	68b9      	ldr	r1, [r7, #8]
 8017930:	68f8      	ldr	r0, [r7, #12]
 8017932:	f000 f805 	bl	8017940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017938:	4618      	mov	r0, r3
 801793a:	3730      	adds	r7, #48	; 0x30
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}

08017940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b084      	sub	sp, #16
 8017944:	af00      	add	r7, sp, #0
 8017946:	60f8      	str	r0, [r7, #12]
 8017948:	60b9      	str	r1, [r7, #8]
 801794a:	607a      	str	r2, [r7, #4]
 801794c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d103      	bne.n	801795c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017954:	69bb      	ldr	r3, [r7, #24]
 8017956:	69ba      	ldr	r2, [r7, #24]
 8017958:	601a      	str	r2, [r3, #0]
 801795a:	e002      	b.n	8017962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801795c:	69bb      	ldr	r3, [r7, #24]
 801795e:	687a      	ldr	r2, [r7, #4]
 8017960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017962:	69bb      	ldr	r3, [r7, #24]
 8017964:	68fa      	ldr	r2, [r7, #12]
 8017966:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017968:	69bb      	ldr	r3, [r7, #24]
 801796a:	68ba      	ldr	r2, [r7, #8]
 801796c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801796e:	2101      	movs	r1, #1
 8017970:	69b8      	ldr	r0, [r7, #24]
 8017972:	f7ff ff05 	bl	8017780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017976:	69bb      	ldr	r3, [r7, #24]
 8017978:	78fa      	ldrb	r2, [r7, #3]
 801797a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801797e:	bf00      	nop
 8017980:	3710      	adds	r7, #16
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}
	...

08017988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b08e      	sub	sp, #56	; 0x38
 801798c:	af00      	add	r7, sp, #0
 801798e:	60f8      	str	r0, [r7, #12]
 8017990:	60b9      	str	r1, [r7, #8]
 8017992:	607a      	str	r2, [r7, #4]
 8017994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017996:	2300      	movs	r3, #0
 8017998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d10a      	bne.n	80179ba <xQueueGenericSend+0x32>
	__asm volatile
 80179a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179a8:	f383 8811 	msr	BASEPRI, r3
 80179ac:	f3bf 8f6f 	isb	sy
 80179b0:	f3bf 8f4f 	dsb	sy
 80179b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80179b6:	bf00      	nop
 80179b8:	e7fe      	b.n	80179b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d103      	bne.n	80179c8 <xQueueGenericSend+0x40>
 80179c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d101      	bne.n	80179cc <xQueueGenericSend+0x44>
 80179c8:	2301      	movs	r3, #1
 80179ca:	e000      	b.n	80179ce <xQueueGenericSend+0x46>
 80179cc:	2300      	movs	r3, #0
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d10a      	bne.n	80179e8 <xQueueGenericSend+0x60>
	__asm volatile
 80179d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179d6:	f383 8811 	msr	BASEPRI, r3
 80179da:	f3bf 8f6f 	isb	sy
 80179de:	f3bf 8f4f 	dsb	sy
 80179e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80179e4:	bf00      	nop
 80179e6:	e7fe      	b.n	80179e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	2b02      	cmp	r3, #2
 80179ec:	d103      	bne.n	80179f6 <xQueueGenericSend+0x6e>
 80179ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179f2:	2b01      	cmp	r3, #1
 80179f4:	d101      	bne.n	80179fa <xQueueGenericSend+0x72>
 80179f6:	2301      	movs	r3, #1
 80179f8:	e000      	b.n	80179fc <xQueueGenericSend+0x74>
 80179fa:	2300      	movs	r3, #0
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d10a      	bne.n	8017a16 <xQueueGenericSend+0x8e>
	__asm volatile
 8017a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a04:	f383 8811 	msr	BASEPRI, r3
 8017a08:	f3bf 8f6f 	isb	sy
 8017a0c:	f3bf 8f4f 	dsb	sy
 8017a10:	623b      	str	r3, [r7, #32]
}
 8017a12:	bf00      	nop
 8017a14:	e7fe      	b.n	8017a14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017a16:	f001 fa71 	bl	8018efc <xTaskGetSchedulerState>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d102      	bne.n	8017a26 <xQueueGenericSend+0x9e>
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d101      	bne.n	8017a2a <xQueueGenericSend+0xa2>
 8017a26:	2301      	movs	r3, #1
 8017a28:	e000      	b.n	8017a2c <xQueueGenericSend+0xa4>
 8017a2a:	2300      	movs	r3, #0
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d10a      	bne.n	8017a46 <xQueueGenericSend+0xbe>
	__asm volatile
 8017a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a34:	f383 8811 	msr	BASEPRI, r3
 8017a38:	f3bf 8f6f 	isb	sy
 8017a3c:	f3bf 8f4f 	dsb	sy
 8017a40:	61fb      	str	r3, [r7, #28]
}
 8017a42:	bf00      	nop
 8017a44:	e7fe      	b.n	8017a44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017a46:	f001 ffed 	bl	8019a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a52:	429a      	cmp	r2, r3
 8017a54:	d302      	bcc.n	8017a5c <xQueueGenericSend+0xd4>
 8017a56:	683b      	ldr	r3, [r7, #0]
 8017a58:	2b02      	cmp	r3, #2
 8017a5a:	d129      	bne.n	8017ab0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017a5c:	683a      	ldr	r2, [r7, #0]
 8017a5e:	68b9      	ldr	r1, [r7, #8]
 8017a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a62:	f000 fa0b 	bl	8017e7c <prvCopyDataToQueue>
 8017a66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d010      	beq.n	8017a92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a72:	3324      	adds	r3, #36	; 0x24
 8017a74:	4618      	mov	r0, r3
 8017a76:	f001 f821 	bl	8018abc <xTaskRemoveFromEventList>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d013      	beq.n	8017aa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017a80:	4b3f      	ldr	r3, [pc, #252]	; (8017b80 <xQueueGenericSend+0x1f8>)
 8017a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a86:	601a      	str	r2, [r3, #0]
 8017a88:	f3bf 8f4f 	dsb	sy
 8017a8c:	f3bf 8f6f 	isb	sy
 8017a90:	e00a      	b.n	8017aa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d007      	beq.n	8017aa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017a98:	4b39      	ldr	r3, [pc, #228]	; (8017b80 <xQueueGenericSend+0x1f8>)
 8017a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a9e:	601a      	str	r2, [r3, #0]
 8017aa0:	f3bf 8f4f 	dsb	sy
 8017aa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017aa8:	f001 ffec 	bl	8019a84 <vPortExitCritical>
				return pdPASS;
 8017aac:	2301      	movs	r3, #1
 8017aae:	e063      	b.n	8017b78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d103      	bne.n	8017abe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017ab6:	f001 ffe5 	bl	8019a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017aba:	2300      	movs	r3, #0
 8017abc:	e05c      	b.n	8017b78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d106      	bne.n	8017ad2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017ac4:	f107 0314 	add.w	r3, r7, #20
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f001 f8bd 	bl	8018c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017ace:	2301      	movs	r3, #1
 8017ad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017ad2:	f001 ffd7 	bl	8019a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017ad6:	f000 fd7b 	bl	80185d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017ada:	f001 ffa3 	bl	8019a24 <vPortEnterCritical>
 8017ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ae4:	b25b      	sxtb	r3, r3
 8017ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017aea:	d103      	bne.n	8017af4 <xQueueGenericSend+0x16c>
 8017aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aee:	2200      	movs	r2, #0
 8017af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017afa:	b25b      	sxtb	r3, r3
 8017afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b00:	d103      	bne.n	8017b0a <xQueueGenericSend+0x182>
 8017b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b04:	2200      	movs	r2, #0
 8017b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b0a:	f001 ffbb 	bl	8019a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017b0e:	1d3a      	adds	r2, r7, #4
 8017b10:	f107 0314 	add.w	r3, r7, #20
 8017b14:	4611      	mov	r1, r2
 8017b16:	4618      	mov	r0, r3
 8017b18:	f001 f8ac 	bl	8018c74 <xTaskCheckForTimeOut>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d124      	bne.n	8017b6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b24:	f000 faa2 	bl	801806c <prvIsQueueFull>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d018      	beq.n	8017b60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b30:	3310      	adds	r3, #16
 8017b32:	687a      	ldr	r2, [r7, #4]
 8017b34:	4611      	mov	r1, r2
 8017b36:	4618      	mov	r0, r3
 8017b38:	f000 ff34 	bl	80189a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b3e:	f000 fa2d 	bl	8017f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017b42:	f000 fd53 	bl	80185ec <xTaskResumeAll>
 8017b46:	4603      	mov	r3, r0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	f47f af7c 	bne.w	8017a46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017b4e:	4b0c      	ldr	r3, [pc, #48]	; (8017b80 <xQueueGenericSend+0x1f8>)
 8017b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b54:	601a      	str	r2, [r3, #0]
 8017b56:	f3bf 8f4f 	dsb	sy
 8017b5a:	f3bf 8f6f 	isb	sy
 8017b5e:	e772      	b.n	8017a46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b62:	f000 fa1b 	bl	8017f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017b66:	f000 fd41 	bl	80185ec <xTaskResumeAll>
 8017b6a:	e76c      	b.n	8017a46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b6e:	f000 fa15 	bl	8017f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017b72:	f000 fd3b 	bl	80185ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017b76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017b78:	4618      	mov	r0, r3
 8017b7a:	3738      	adds	r7, #56	; 0x38
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}
 8017b80:	e000ed04 	.word	0xe000ed04

08017b84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b090      	sub	sp, #64	; 0x40
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	60f8      	str	r0, [r7, #12]
 8017b8c:	60b9      	str	r1, [r7, #8]
 8017b8e:	607a      	str	r2, [r7, #4]
 8017b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d10a      	bne.n	8017bb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ba0:	f383 8811 	msr	BASEPRI, r3
 8017ba4:	f3bf 8f6f 	isb	sy
 8017ba8:	f3bf 8f4f 	dsb	sy
 8017bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017bae:	bf00      	nop
 8017bb0:	e7fe      	b.n	8017bb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017bb2:	68bb      	ldr	r3, [r7, #8]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d103      	bne.n	8017bc0 <xQueueGenericSendFromISR+0x3c>
 8017bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d101      	bne.n	8017bc4 <xQueueGenericSendFromISR+0x40>
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	e000      	b.n	8017bc6 <xQueueGenericSendFromISR+0x42>
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d10a      	bne.n	8017be0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bce:	f383 8811 	msr	BASEPRI, r3
 8017bd2:	f3bf 8f6f 	isb	sy
 8017bd6:	f3bf 8f4f 	dsb	sy
 8017bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017bdc:	bf00      	nop
 8017bde:	e7fe      	b.n	8017bde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	2b02      	cmp	r3, #2
 8017be4:	d103      	bne.n	8017bee <xQueueGenericSendFromISR+0x6a>
 8017be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bea:	2b01      	cmp	r3, #1
 8017bec:	d101      	bne.n	8017bf2 <xQueueGenericSendFromISR+0x6e>
 8017bee:	2301      	movs	r3, #1
 8017bf0:	e000      	b.n	8017bf4 <xQueueGenericSendFromISR+0x70>
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d10a      	bne.n	8017c0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bfc:	f383 8811 	msr	BASEPRI, r3
 8017c00:	f3bf 8f6f 	isb	sy
 8017c04:	f3bf 8f4f 	dsb	sy
 8017c08:	623b      	str	r3, [r7, #32]
}
 8017c0a:	bf00      	nop
 8017c0c:	e7fe      	b.n	8017c0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017c0e:	f001 ffeb 	bl	8019be8 <vPortValidateInterruptPriority>
	__asm volatile
 8017c12:	f3ef 8211 	mrs	r2, BASEPRI
 8017c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c1a:	f383 8811 	msr	BASEPRI, r3
 8017c1e:	f3bf 8f6f 	isb	sy
 8017c22:	f3bf 8f4f 	dsb	sy
 8017c26:	61fa      	str	r2, [r7, #28]
 8017c28:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017c2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017c2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c36:	429a      	cmp	r2, r3
 8017c38:	d302      	bcc.n	8017c40 <xQueueGenericSendFromISR+0xbc>
 8017c3a:	683b      	ldr	r3, [r7, #0]
 8017c3c:	2b02      	cmp	r3, #2
 8017c3e:	d12f      	bne.n	8017ca0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017c50:	683a      	ldr	r2, [r7, #0]
 8017c52:	68b9      	ldr	r1, [r7, #8]
 8017c54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017c56:	f000 f911 	bl	8017e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017c5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017c62:	d112      	bne.n	8017c8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d016      	beq.n	8017c9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c6e:	3324      	adds	r3, #36	; 0x24
 8017c70:	4618      	mov	r0, r3
 8017c72:	f000 ff23 	bl	8018abc <xTaskRemoveFromEventList>
 8017c76:	4603      	mov	r3, r0
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d00e      	beq.n	8017c9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d00b      	beq.n	8017c9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	2201      	movs	r2, #1
 8017c86:	601a      	str	r2, [r3, #0]
 8017c88:	e007      	b.n	8017c9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017c8e:	3301      	adds	r3, #1
 8017c90:	b2db      	uxtb	r3, r3
 8017c92:	b25a      	sxtb	r2, r3
 8017c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017c9a:	2301      	movs	r3, #1
 8017c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017c9e:	e001      	b.n	8017ca4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ca6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	f383 8811 	msr	BASEPRI, r3
}
 8017cae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3740      	adds	r7, #64	; 0x40
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}
	...

08017cbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b08c      	sub	sp, #48	; 0x30
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	60f8      	str	r0, [r7, #12]
 8017cc4:	60b9      	str	r1, [r7, #8]
 8017cc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017cc8:	2300      	movs	r3, #0
 8017cca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d10a      	bne.n	8017cec <xQueueReceive+0x30>
	__asm volatile
 8017cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cda:	f383 8811 	msr	BASEPRI, r3
 8017cde:	f3bf 8f6f 	isb	sy
 8017ce2:	f3bf 8f4f 	dsb	sy
 8017ce6:	623b      	str	r3, [r7, #32]
}
 8017ce8:	bf00      	nop
 8017cea:	e7fe      	b.n	8017cea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d103      	bne.n	8017cfa <xQueueReceive+0x3e>
 8017cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d101      	bne.n	8017cfe <xQueueReceive+0x42>
 8017cfa:	2301      	movs	r3, #1
 8017cfc:	e000      	b.n	8017d00 <xQueueReceive+0x44>
 8017cfe:	2300      	movs	r3, #0
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d10a      	bne.n	8017d1a <xQueueReceive+0x5e>
	__asm volatile
 8017d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d08:	f383 8811 	msr	BASEPRI, r3
 8017d0c:	f3bf 8f6f 	isb	sy
 8017d10:	f3bf 8f4f 	dsb	sy
 8017d14:	61fb      	str	r3, [r7, #28]
}
 8017d16:	bf00      	nop
 8017d18:	e7fe      	b.n	8017d18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017d1a:	f001 f8ef 	bl	8018efc <xTaskGetSchedulerState>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d102      	bne.n	8017d2a <xQueueReceive+0x6e>
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d101      	bne.n	8017d2e <xQueueReceive+0x72>
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	e000      	b.n	8017d30 <xQueueReceive+0x74>
 8017d2e:	2300      	movs	r3, #0
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d10a      	bne.n	8017d4a <xQueueReceive+0x8e>
	__asm volatile
 8017d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d38:	f383 8811 	msr	BASEPRI, r3
 8017d3c:	f3bf 8f6f 	isb	sy
 8017d40:	f3bf 8f4f 	dsb	sy
 8017d44:	61bb      	str	r3, [r7, #24]
}
 8017d46:	bf00      	nop
 8017d48:	e7fe      	b.n	8017d48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017d4a:	f001 fe6b 	bl	8019a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d01f      	beq.n	8017d9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017d5a:	68b9      	ldr	r1, [r7, #8]
 8017d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d5e:	f000 f8f7 	bl	8017f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d64:	1e5a      	subs	r2, r3, #1
 8017d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d6c:	691b      	ldr	r3, [r3, #16]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d00f      	beq.n	8017d92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d74:	3310      	adds	r3, #16
 8017d76:	4618      	mov	r0, r3
 8017d78:	f000 fea0 	bl	8018abc <xTaskRemoveFromEventList>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d007      	beq.n	8017d92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017d82:	4b3d      	ldr	r3, [pc, #244]	; (8017e78 <xQueueReceive+0x1bc>)
 8017d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d88:	601a      	str	r2, [r3, #0]
 8017d8a:	f3bf 8f4f 	dsb	sy
 8017d8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017d92:	f001 fe77 	bl	8019a84 <vPortExitCritical>
				return pdPASS;
 8017d96:	2301      	movs	r3, #1
 8017d98:	e069      	b.n	8017e6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d103      	bne.n	8017da8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017da0:	f001 fe70 	bl	8019a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017da4:	2300      	movs	r3, #0
 8017da6:	e062      	b.n	8017e6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d106      	bne.n	8017dbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017dae:	f107 0310 	add.w	r3, r7, #16
 8017db2:	4618      	mov	r0, r3
 8017db4:	f000 ff48 	bl	8018c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017db8:	2301      	movs	r3, #1
 8017dba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017dbc:	f001 fe62 	bl	8019a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017dc0:	f000 fc06 	bl	80185d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017dc4:	f001 fe2e 	bl	8019a24 <vPortEnterCritical>
 8017dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017dce:	b25b      	sxtb	r3, r3
 8017dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017dd4:	d103      	bne.n	8017dde <xQueueReceive+0x122>
 8017dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd8:	2200      	movs	r2, #0
 8017dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017de4:	b25b      	sxtb	r3, r3
 8017de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017dea:	d103      	bne.n	8017df4 <xQueueReceive+0x138>
 8017dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dee:	2200      	movs	r2, #0
 8017df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017df4:	f001 fe46 	bl	8019a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017df8:	1d3a      	adds	r2, r7, #4
 8017dfa:	f107 0310 	add.w	r3, r7, #16
 8017dfe:	4611      	mov	r1, r2
 8017e00:	4618      	mov	r0, r3
 8017e02:	f000 ff37 	bl	8018c74 <xTaskCheckForTimeOut>
 8017e06:	4603      	mov	r3, r0
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d123      	bne.n	8017e54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e0e:	f000 f917 	bl	8018040 <prvIsQueueEmpty>
 8017e12:	4603      	mov	r3, r0
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d017      	beq.n	8017e48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e1a:	3324      	adds	r3, #36	; 0x24
 8017e1c:	687a      	ldr	r2, [r7, #4]
 8017e1e:	4611      	mov	r1, r2
 8017e20:	4618      	mov	r0, r3
 8017e22:	f000 fdbf 	bl	80189a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e28:	f000 f8b8 	bl	8017f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017e2c:	f000 fbde 	bl	80185ec <xTaskResumeAll>
 8017e30:	4603      	mov	r3, r0
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d189      	bne.n	8017d4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017e36:	4b10      	ldr	r3, [pc, #64]	; (8017e78 <xQueueReceive+0x1bc>)
 8017e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e3c:	601a      	str	r2, [r3, #0]
 8017e3e:	f3bf 8f4f 	dsb	sy
 8017e42:	f3bf 8f6f 	isb	sy
 8017e46:	e780      	b.n	8017d4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e4a:	f000 f8a7 	bl	8017f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017e4e:	f000 fbcd 	bl	80185ec <xTaskResumeAll>
 8017e52:	e77a      	b.n	8017d4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e56:	f000 f8a1 	bl	8017f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017e5a:	f000 fbc7 	bl	80185ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e60:	f000 f8ee 	bl	8018040 <prvIsQueueEmpty>
 8017e64:	4603      	mov	r3, r0
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	f43f af6f 	beq.w	8017d4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017e6e:	4618      	mov	r0, r3
 8017e70:	3730      	adds	r7, #48	; 0x30
 8017e72:	46bd      	mov	sp, r7
 8017e74:	bd80      	pop	{r7, pc}
 8017e76:	bf00      	nop
 8017e78:	e000ed04 	.word	0xe000ed04

08017e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b086      	sub	sp, #24
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017e88:	2300      	movs	r3, #0
 8017e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d10d      	bne.n	8017eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d14d      	bne.n	8017f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	689b      	ldr	r3, [r3, #8]
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f001 f846 	bl	8018f38 <xTaskPriorityDisinherit>
 8017eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	609a      	str	r2, [r3, #8]
 8017eb4:	e043      	b.n	8017f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d119      	bne.n	8017ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	6858      	ldr	r0, [r3, #4]
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ec4:	461a      	mov	r2, r3
 8017ec6:	68b9      	ldr	r1, [r7, #8]
 8017ec8:	f002 f8e2 	bl	801a090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	685a      	ldr	r2, [r3, #4]
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ed4:	441a      	add	r2, r3
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	685a      	ldr	r2, [r3, #4]
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	689b      	ldr	r3, [r3, #8]
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	d32b      	bcc.n	8017f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	681a      	ldr	r2, [r3, #0]
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	605a      	str	r2, [r3, #4]
 8017eee:	e026      	b.n	8017f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	68d8      	ldr	r0, [r3, #12]
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ef8:	461a      	mov	r2, r3
 8017efa:	68b9      	ldr	r1, [r7, #8]
 8017efc:	f002 f8c8 	bl	801a090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	68da      	ldr	r2, [r3, #12]
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f08:	425b      	negs	r3, r3
 8017f0a:	441a      	add	r2, r3
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	68da      	ldr	r2, [r3, #12]
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	d207      	bcs.n	8017f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	689a      	ldr	r2, [r3, #8]
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f24:	425b      	negs	r3, r3
 8017f26:	441a      	add	r2, r3
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	2b02      	cmp	r3, #2
 8017f30:	d105      	bne.n	8017f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017f32:	693b      	ldr	r3, [r7, #16]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d002      	beq.n	8017f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017f38:	693b      	ldr	r3, [r7, #16]
 8017f3a:	3b01      	subs	r3, #1
 8017f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	1c5a      	adds	r2, r3, #1
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017f46:	697b      	ldr	r3, [r7, #20]
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	3718      	adds	r7, #24
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}

08017f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b082      	sub	sp, #8
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d018      	beq.n	8017f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	68da      	ldr	r2, [r3, #12]
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f6a:	441a      	add	r2, r3
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	68da      	ldr	r2, [r3, #12]
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	689b      	ldr	r3, [r3, #8]
 8017f78:	429a      	cmp	r2, r3
 8017f7a:	d303      	bcc.n	8017f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681a      	ldr	r2, [r3, #0]
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	68d9      	ldr	r1, [r3, #12]
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f8c:	461a      	mov	r2, r3
 8017f8e:	6838      	ldr	r0, [r7, #0]
 8017f90:	f002 f87e 	bl	801a090 <memcpy>
	}
}
 8017f94:	bf00      	nop
 8017f96:	3708      	adds	r7, #8
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}

08017f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b084      	sub	sp, #16
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017fa4:	f001 fd3e 	bl	8019a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017fb0:	e011      	b.n	8017fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d012      	beq.n	8017fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	3324      	adds	r3, #36	; 0x24
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f000 fd7c 	bl	8018abc <xTaskRemoveFromEventList>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d001      	beq.n	8017fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017fca:	f000 feb5 	bl	8018d38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017fce:	7bfb      	ldrb	r3, [r7, #15]
 8017fd0:	3b01      	subs	r3, #1
 8017fd2:	b2db      	uxtb	r3, r3
 8017fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	dce9      	bgt.n	8017fb2 <prvUnlockQueue+0x16>
 8017fde:	e000      	b.n	8017fe2 <prvUnlockQueue+0x46>
					break;
 8017fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	22ff      	movs	r2, #255	; 0xff
 8017fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017fea:	f001 fd4b 	bl	8019a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017fee:	f001 fd19 	bl	8019a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017ffa:	e011      	b.n	8018020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	691b      	ldr	r3, [r3, #16]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d012      	beq.n	801802a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	3310      	adds	r3, #16
 8018008:	4618      	mov	r0, r3
 801800a:	f000 fd57 	bl	8018abc <xTaskRemoveFromEventList>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d001      	beq.n	8018018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018014:	f000 fe90 	bl	8018d38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018018:	7bbb      	ldrb	r3, [r7, #14]
 801801a:	3b01      	subs	r3, #1
 801801c:	b2db      	uxtb	r3, r3
 801801e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018024:	2b00      	cmp	r3, #0
 8018026:	dce9      	bgt.n	8017ffc <prvUnlockQueue+0x60>
 8018028:	e000      	b.n	801802c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801802a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	22ff      	movs	r2, #255	; 0xff
 8018030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018034:	f001 fd26 	bl	8019a84 <vPortExitCritical>
}
 8018038:	bf00      	nop
 801803a:	3710      	adds	r7, #16
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b084      	sub	sp, #16
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018048:	f001 fcec 	bl	8019a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018050:	2b00      	cmp	r3, #0
 8018052:	d102      	bne.n	801805a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018054:	2301      	movs	r3, #1
 8018056:	60fb      	str	r3, [r7, #12]
 8018058:	e001      	b.n	801805e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801805a:	2300      	movs	r3, #0
 801805c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801805e:	f001 fd11 	bl	8019a84 <vPortExitCritical>

	return xReturn;
 8018062:	68fb      	ldr	r3, [r7, #12]
}
 8018064:	4618      	mov	r0, r3
 8018066:	3710      	adds	r7, #16
 8018068:	46bd      	mov	sp, r7
 801806a:	bd80      	pop	{r7, pc}

0801806c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801806c:	b580      	push	{r7, lr}
 801806e:	b084      	sub	sp, #16
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018074:	f001 fcd6 	bl	8019a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018080:	429a      	cmp	r2, r3
 8018082:	d102      	bne.n	801808a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018084:	2301      	movs	r3, #1
 8018086:	60fb      	str	r3, [r7, #12]
 8018088:	e001      	b.n	801808e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801808a:	2300      	movs	r3, #0
 801808c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801808e:	f001 fcf9 	bl	8019a84 <vPortExitCritical>

	return xReturn;
 8018092:	68fb      	ldr	r3, [r7, #12]
}
 8018094:	4618      	mov	r0, r3
 8018096:	3710      	adds	r7, #16
 8018098:	46bd      	mov	sp, r7
 801809a:	bd80      	pop	{r7, pc}

0801809c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801809c:	b480      	push	{r7}
 801809e:	b085      	sub	sp, #20
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
 80180a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80180a6:	2300      	movs	r3, #0
 80180a8:	60fb      	str	r3, [r7, #12]
 80180aa:	e014      	b.n	80180d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80180ac:	4a0f      	ldr	r2, [pc, #60]	; (80180ec <vQueueAddToRegistry+0x50>)
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d10b      	bne.n	80180d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80180b8:	490c      	ldr	r1, [pc, #48]	; (80180ec <vQueueAddToRegistry+0x50>)
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	683a      	ldr	r2, [r7, #0]
 80180be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80180c2:	4a0a      	ldr	r2, [pc, #40]	; (80180ec <vQueueAddToRegistry+0x50>)
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	00db      	lsls	r3, r3, #3
 80180c8:	4413      	add	r3, r2
 80180ca:	687a      	ldr	r2, [r7, #4]
 80180cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80180ce:	e006      	b.n	80180de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	3301      	adds	r3, #1
 80180d4:	60fb      	str	r3, [r7, #12]
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	2b07      	cmp	r3, #7
 80180da:	d9e7      	bls.n	80180ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80180dc:	bf00      	nop
 80180de:	bf00      	nop
 80180e0:	3714      	adds	r7, #20
 80180e2:	46bd      	mov	sp, r7
 80180e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e8:	4770      	bx	lr
 80180ea:	bf00      	nop
 80180ec:	24002718 	.word	0x24002718

080180f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b086      	sub	sp, #24
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	60f8      	str	r0, [r7, #12]
 80180f8:	60b9      	str	r1, [r7, #8]
 80180fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018100:	f001 fc90 	bl	8019a24 <vPortEnterCritical>
 8018104:	697b      	ldr	r3, [r7, #20]
 8018106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801810a:	b25b      	sxtb	r3, r3
 801810c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018110:	d103      	bne.n	801811a <vQueueWaitForMessageRestricted+0x2a>
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	2200      	movs	r2, #0
 8018116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801811a:	697b      	ldr	r3, [r7, #20]
 801811c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018120:	b25b      	sxtb	r3, r3
 8018122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018126:	d103      	bne.n	8018130 <vQueueWaitForMessageRestricted+0x40>
 8018128:	697b      	ldr	r3, [r7, #20]
 801812a:	2200      	movs	r2, #0
 801812c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018130:	f001 fca8 	bl	8019a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018134:	697b      	ldr	r3, [r7, #20]
 8018136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018138:	2b00      	cmp	r3, #0
 801813a:	d106      	bne.n	801814a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801813c:	697b      	ldr	r3, [r7, #20]
 801813e:	3324      	adds	r3, #36	; 0x24
 8018140:	687a      	ldr	r2, [r7, #4]
 8018142:	68b9      	ldr	r1, [r7, #8]
 8018144:	4618      	mov	r0, r3
 8018146:	f000 fc8d 	bl	8018a64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801814a:	6978      	ldr	r0, [r7, #20]
 801814c:	f7ff ff26 	bl	8017f9c <prvUnlockQueue>
	}
 8018150:	bf00      	nop
 8018152:	3718      	adds	r7, #24
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}

08018158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018158:	b580      	push	{r7, lr}
 801815a:	b08e      	sub	sp, #56	; 0x38
 801815c:	af04      	add	r7, sp, #16
 801815e:	60f8      	str	r0, [r7, #12]
 8018160:	60b9      	str	r1, [r7, #8]
 8018162:	607a      	str	r2, [r7, #4]
 8018164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018168:	2b00      	cmp	r3, #0
 801816a:	d10a      	bne.n	8018182 <xTaskCreateStatic+0x2a>
	__asm volatile
 801816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018170:	f383 8811 	msr	BASEPRI, r3
 8018174:	f3bf 8f6f 	isb	sy
 8018178:	f3bf 8f4f 	dsb	sy
 801817c:	623b      	str	r3, [r7, #32]
}
 801817e:	bf00      	nop
 8018180:	e7fe      	b.n	8018180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018184:	2b00      	cmp	r3, #0
 8018186:	d10a      	bne.n	801819e <xTaskCreateStatic+0x46>
	__asm volatile
 8018188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801818c:	f383 8811 	msr	BASEPRI, r3
 8018190:	f3bf 8f6f 	isb	sy
 8018194:	f3bf 8f4f 	dsb	sy
 8018198:	61fb      	str	r3, [r7, #28]
}
 801819a:	bf00      	nop
 801819c:	e7fe      	b.n	801819c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801819e:	235c      	movs	r3, #92	; 0x5c
 80181a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80181a2:	693b      	ldr	r3, [r7, #16]
 80181a4:	2b5c      	cmp	r3, #92	; 0x5c
 80181a6:	d00a      	beq.n	80181be <xTaskCreateStatic+0x66>
	__asm volatile
 80181a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ac:	f383 8811 	msr	BASEPRI, r3
 80181b0:	f3bf 8f6f 	isb	sy
 80181b4:	f3bf 8f4f 	dsb	sy
 80181b8:	61bb      	str	r3, [r7, #24]
}
 80181ba:	bf00      	nop
 80181bc:	e7fe      	b.n	80181bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80181be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80181c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d01e      	beq.n	8018204 <xTaskCreateStatic+0xac>
 80181c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d01b      	beq.n	8018204 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80181cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80181d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80181d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80181d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d8:	2202      	movs	r2, #2
 80181da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80181de:	2300      	movs	r3, #0
 80181e0:	9303      	str	r3, [sp, #12]
 80181e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e4:	9302      	str	r3, [sp, #8]
 80181e6:	f107 0314 	add.w	r3, r7, #20
 80181ea:	9301      	str	r3, [sp, #4]
 80181ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ee:	9300      	str	r3, [sp, #0]
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	687a      	ldr	r2, [r7, #4]
 80181f4:	68b9      	ldr	r1, [r7, #8]
 80181f6:	68f8      	ldr	r0, [r7, #12]
 80181f8:	f000 f850 	bl	801829c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80181fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181fe:	f000 f8dd 	bl	80183bc <prvAddNewTaskToReadyList>
 8018202:	e001      	b.n	8018208 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018204:	2300      	movs	r3, #0
 8018206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018208:	697b      	ldr	r3, [r7, #20]
	}
 801820a:	4618      	mov	r0, r3
 801820c:	3728      	adds	r7, #40	; 0x28
 801820e:	46bd      	mov	sp, r7
 8018210:	bd80      	pop	{r7, pc}

08018212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018212:	b580      	push	{r7, lr}
 8018214:	b08c      	sub	sp, #48	; 0x30
 8018216:	af04      	add	r7, sp, #16
 8018218:	60f8      	str	r0, [r7, #12]
 801821a:	60b9      	str	r1, [r7, #8]
 801821c:	603b      	str	r3, [r7, #0]
 801821e:	4613      	mov	r3, r2
 8018220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018222:	88fb      	ldrh	r3, [r7, #6]
 8018224:	009b      	lsls	r3, r3, #2
 8018226:	4618      	mov	r0, r3
 8018228:	f001 fd1e 	bl	8019c68 <pvPortMalloc>
 801822c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801822e:	697b      	ldr	r3, [r7, #20]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d00e      	beq.n	8018252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018234:	205c      	movs	r0, #92	; 0x5c
 8018236:	f001 fd17 	bl	8019c68 <pvPortMalloc>
 801823a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801823c:	69fb      	ldr	r3, [r7, #28]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d003      	beq.n	801824a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018242:	69fb      	ldr	r3, [r7, #28]
 8018244:	697a      	ldr	r2, [r7, #20]
 8018246:	631a      	str	r2, [r3, #48]	; 0x30
 8018248:	e005      	b.n	8018256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801824a:	6978      	ldr	r0, [r7, #20]
 801824c:	f001 fdd8 	bl	8019e00 <vPortFree>
 8018250:	e001      	b.n	8018256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018252:	2300      	movs	r3, #0
 8018254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018256:	69fb      	ldr	r3, [r7, #28]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d017      	beq.n	801828c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801825c:	69fb      	ldr	r3, [r7, #28]
 801825e:	2200      	movs	r2, #0
 8018260:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018264:	88fa      	ldrh	r2, [r7, #6]
 8018266:	2300      	movs	r3, #0
 8018268:	9303      	str	r3, [sp, #12]
 801826a:	69fb      	ldr	r3, [r7, #28]
 801826c:	9302      	str	r3, [sp, #8]
 801826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018270:	9301      	str	r3, [sp, #4]
 8018272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018274:	9300      	str	r3, [sp, #0]
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	68b9      	ldr	r1, [r7, #8]
 801827a:	68f8      	ldr	r0, [r7, #12]
 801827c:	f000 f80e 	bl	801829c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018280:	69f8      	ldr	r0, [r7, #28]
 8018282:	f000 f89b 	bl	80183bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018286:	2301      	movs	r3, #1
 8018288:	61bb      	str	r3, [r7, #24]
 801828a:	e002      	b.n	8018292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801828c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018292:	69bb      	ldr	r3, [r7, #24]
	}
 8018294:	4618      	mov	r0, r3
 8018296:	3720      	adds	r7, #32
 8018298:	46bd      	mov	sp, r7
 801829a:	bd80      	pop	{r7, pc}

0801829c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b088      	sub	sp, #32
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	60f8      	str	r0, [r7, #12]
 80182a4:	60b9      	str	r1, [r7, #8]
 80182a6:	607a      	str	r2, [r7, #4]
 80182a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80182aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	461a      	mov	r2, r3
 80182b4:	21a5      	movs	r1, #165	; 0xa5
 80182b6:	f001 fef9 	bl	801a0ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80182ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80182be:	6879      	ldr	r1, [r7, #4]
 80182c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80182c4:	440b      	add	r3, r1
 80182c6:	009b      	lsls	r3, r3, #2
 80182c8:	4413      	add	r3, r2
 80182ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80182cc:	69bb      	ldr	r3, [r7, #24]
 80182ce:	f023 0307 	bic.w	r3, r3, #7
 80182d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80182d4:	69bb      	ldr	r3, [r7, #24]
 80182d6:	f003 0307 	and.w	r3, r3, #7
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d00a      	beq.n	80182f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80182de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182e2:	f383 8811 	msr	BASEPRI, r3
 80182e6:	f3bf 8f6f 	isb	sy
 80182ea:	f3bf 8f4f 	dsb	sy
 80182ee:	617b      	str	r3, [r7, #20]
}
 80182f0:	bf00      	nop
 80182f2:	e7fe      	b.n	80182f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d01f      	beq.n	801833a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80182fa:	2300      	movs	r3, #0
 80182fc:	61fb      	str	r3, [r7, #28]
 80182fe:	e012      	b.n	8018326 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018300:	68ba      	ldr	r2, [r7, #8]
 8018302:	69fb      	ldr	r3, [r7, #28]
 8018304:	4413      	add	r3, r2
 8018306:	7819      	ldrb	r1, [r3, #0]
 8018308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801830a:	69fb      	ldr	r3, [r7, #28]
 801830c:	4413      	add	r3, r2
 801830e:	3334      	adds	r3, #52	; 0x34
 8018310:	460a      	mov	r2, r1
 8018312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018314:	68ba      	ldr	r2, [r7, #8]
 8018316:	69fb      	ldr	r3, [r7, #28]
 8018318:	4413      	add	r3, r2
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d006      	beq.n	801832e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018320:	69fb      	ldr	r3, [r7, #28]
 8018322:	3301      	adds	r3, #1
 8018324:	61fb      	str	r3, [r7, #28]
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	2b0f      	cmp	r3, #15
 801832a:	d9e9      	bls.n	8018300 <prvInitialiseNewTask+0x64>
 801832c:	e000      	b.n	8018330 <prvInitialiseNewTask+0x94>
			{
				break;
 801832e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018332:	2200      	movs	r2, #0
 8018334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018338:	e003      	b.n	8018342 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801833c:	2200      	movs	r2, #0
 801833e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018344:	2b37      	cmp	r3, #55	; 0x37
 8018346:	d901      	bls.n	801834c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018348:	2337      	movs	r3, #55	; 0x37
 801834a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801834e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018350:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018356:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801835a:	2200      	movs	r2, #0
 801835c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018360:	3304      	adds	r3, #4
 8018362:	4618      	mov	r0, r3
 8018364:	f7ff f978 	bl	8017658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801836a:	3318      	adds	r3, #24
 801836c:	4618      	mov	r0, r3
 801836e:	f7ff f973 	bl	8017658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801837a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018386:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801838a:	2200      	movs	r2, #0
 801838c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018390:	2200      	movs	r2, #0
 8018392:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018396:	683a      	ldr	r2, [r7, #0]
 8018398:	68f9      	ldr	r1, [r7, #12]
 801839a:	69b8      	ldr	r0, [r7, #24]
 801839c:	f001 fa14 	bl	80197c8 <pxPortInitialiseStack>
 80183a0:	4602      	mov	r2, r0
 80183a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80183a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d002      	beq.n	80183b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80183ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80183b2:	bf00      	nop
 80183b4:	3720      	adds	r7, #32
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}
	...

080183bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80183bc:	b580      	push	{r7, lr}
 80183be:	b082      	sub	sp, #8
 80183c0:	af00      	add	r7, sp, #0
 80183c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80183c4:	f001 fb2e 	bl	8019a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80183c8:	4b2d      	ldr	r3, [pc, #180]	; (8018480 <prvAddNewTaskToReadyList+0xc4>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	3301      	adds	r3, #1
 80183ce:	4a2c      	ldr	r2, [pc, #176]	; (8018480 <prvAddNewTaskToReadyList+0xc4>)
 80183d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80183d2:	4b2c      	ldr	r3, [pc, #176]	; (8018484 <prvAddNewTaskToReadyList+0xc8>)
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d109      	bne.n	80183ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80183da:	4a2a      	ldr	r2, [pc, #168]	; (8018484 <prvAddNewTaskToReadyList+0xc8>)
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80183e0:	4b27      	ldr	r3, [pc, #156]	; (8018480 <prvAddNewTaskToReadyList+0xc4>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	2b01      	cmp	r3, #1
 80183e6:	d110      	bne.n	801840a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80183e8:	f000 fcca 	bl	8018d80 <prvInitialiseTaskLists>
 80183ec:	e00d      	b.n	801840a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80183ee:	4b26      	ldr	r3, [pc, #152]	; (8018488 <prvAddNewTaskToReadyList+0xcc>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d109      	bne.n	801840a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80183f6:	4b23      	ldr	r3, [pc, #140]	; (8018484 <prvAddNewTaskToReadyList+0xc8>)
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018400:	429a      	cmp	r2, r3
 8018402:	d802      	bhi.n	801840a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018404:	4a1f      	ldr	r2, [pc, #124]	; (8018484 <prvAddNewTaskToReadyList+0xc8>)
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801840a:	4b20      	ldr	r3, [pc, #128]	; (801848c <prvAddNewTaskToReadyList+0xd0>)
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	3301      	adds	r3, #1
 8018410:	4a1e      	ldr	r2, [pc, #120]	; (801848c <prvAddNewTaskToReadyList+0xd0>)
 8018412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018414:	4b1d      	ldr	r3, [pc, #116]	; (801848c <prvAddNewTaskToReadyList+0xd0>)
 8018416:	681a      	ldr	r2, [r3, #0]
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018420:	4b1b      	ldr	r3, [pc, #108]	; (8018490 <prvAddNewTaskToReadyList+0xd4>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	429a      	cmp	r2, r3
 8018426:	d903      	bls.n	8018430 <prvAddNewTaskToReadyList+0x74>
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801842c:	4a18      	ldr	r2, [pc, #96]	; (8018490 <prvAddNewTaskToReadyList+0xd4>)
 801842e:	6013      	str	r3, [r2, #0]
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018434:	4613      	mov	r3, r2
 8018436:	009b      	lsls	r3, r3, #2
 8018438:	4413      	add	r3, r2
 801843a:	009b      	lsls	r3, r3, #2
 801843c:	4a15      	ldr	r2, [pc, #84]	; (8018494 <prvAddNewTaskToReadyList+0xd8>)
 801843e:	441a      	add	r2, r3
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	3304      	adds	r3, #4
 8018444:	4619      	mov	r1, r3
 8018446:	4610      	mov	r0, r2
 8018448:	f7ff f913 	bl	8017672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801844c:	f001 fb1a 	bl	8019a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018450:	4b0d      	ldr	r3, [pc, #52]	; (8018488 <prvAddNewTaskToReadyList+0xcc>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d00e      	beq.n	8018476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018458:	4b0a      	ldr	r3, [pc, #40]	; (8018484 <prvAddNewTaskToReadyList+0xc8>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018462:	429a      	cmp	r2, r3
 8018464:	d207      	bcs.n	8018476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018466:	4b0c      	ldr	r3, [pc, #48]	; (8018498 <prvAddNewTaskToReadyList+0xdc>)
 8018468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801846c:	601a      	str	r2, [r3, #0]
 801846e:	f3bf 8f4f 	dsb	sy
 8018472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018476:	bf00      	nop
 8018478:	3708      	adds	r7, #8
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}
 801847e:	bf00      	nop
 8018480:	24002c2c 	.word	0x24002c2c
 8018484:	24002758 	.word	0x24002758
 8018488:	24002c38 	.word	0x24002c38
 801848c:	24002c48 	.word	0x24002c48
 8018490:	24002c34 	.word	0x24002c34
 8018494:	2400275c 	.word	0x2400275c
 8018498:	e000ed04 	.word	0xe000ed04

0801849c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801849c:	b580      	push	{r7, lr}
 801849e:	b084      	sub	sp, #16
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80184a4:	2300      	movs	r3, #0
 80184a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d017      	beq.n	80184de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80184ae:	4b13      	ldr	r3, [pc, #76]	; (80184fc <vTaskDelay+0x60>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d00a      	beq.n	80184cc <vTaskDelay+0x30>
	__asm volatile
 80184b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ba:	f383 8811 	msr	BASEPRI, r3
 80184be:	f3bf 8f6f 	isb	sy
 80184c2:	f3bf 8f4f 	dsb	sy
 80184c6:	60bb      	str	r3, [r7, #8]
}
 80184c8:	bf00      	nop
 80184ca:	e7fe      	b.n	80184ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80184cc:	f000 f880 	bl	80185d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80184d0:	2100      	movs	r1, #0
 80184d2:	6878      	ldr	r0, [r7, #4]
 80184d4:	f000 fdb6 	bl	8019044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80184d8:	f000 f888 	bl	80185ec <xTaskResumeAll>
 80184dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d107      	bne.n	80184f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80184e4:	4b06      	ldr	r3, [pc, #24]	; (8018500 <vTaskDelay+0x64>)
 80184e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80184ea:	601a      	str	r2, [r3, #0]
 80184ec:	f3bf 8f4f 	dsb	sy
 80184f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80184f4:	bf00      	nop
 80184f6:	3710      	adds	r7, #16
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}
 80184fc:	24002c54 	.word	0x24002c54
 8018500:	e000ed04 	.word	0xe000ed04

08018504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b08a      	sub	sp, #40	; 0x28
 8018508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801850a:	2300      	movs	r3, #0
 801850c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801850e:	2300      	movs	r3, #0
 8018510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8018512:	463a      	mov	r2, r7
 8018514:	1d39      	adds	r1, r7, #4
 8018516:	f107 0308 	add.w	r3, r7, #8
 801851a:	4618      	mov	r0, r3
 801851c:	f7fe fddc 	bl	80170d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8018520:	6839      	ldr	r1, [r7, #0]
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	68ba      	ldr	r2, [r7, #8]
 8018526:	9202      	str	r2, [sp, #8]
 8018528:	9301      	str	r3, [sp, #4]
 801852a:	2300      	movs	r3, #0
 801852c:	9300      	str	r3, [sp, #0]
 801852e:	2300      	movs	r3, #0
 8018530:	460a      	mov	r2, r1
 8018532:	4921      	ldr	r1, [pc, #132]	; (80185b8 <vTaskStartScheduler+0xb4>)
 8018534:	4821      	ldr	r0, [pc, #132]	; (80185bc <vTaskStartScheduler+0xb8>)
 8018536:	f7ff fe0f 	bl	8018158 <xTaskCreateStatic>
 801853a:	4603      	mov	r3, r0
 801853c:	4a20      	ldr	r2, [pc, #128]	; (80185c0 <vTaskStartScheduler+0xbc>)
 801853e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018540:	4b1f      	ldr	r3, [pc, #124]	; (80185c0 <vTaskStartScheduler+0xbc>)
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d002      	beq.n	801854e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018548:	2301      	movs	r3, #1
 801854a:	617b      	str	r3, [r7, #20]
 801854c:	e001      	b.n	8018552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801854e:	2300      	movs	r3, #0
 8018550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018552:	697b      	ldr	r3, [r7, #20]
 8018554:	2b01      	cmp	r3, #1
 8018556:	d102      	bne.n	801855e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018558:	f000 fdc8 	bl	80190ec <xTimerCreateTimerTask>
 801855c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	2b01      	cmp	r3, #1
 8018562:	d116      	bne.n	8018592 <vTaskStartScheduler+0x8e>
	__asm volatile
 8018564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018568:	f383 8811 	msr	BASEPRI, r3
 801856c:	f3bf 8f6f 	isb	sy
 8018570:	f3bf 8f4f 	dsb	sy
 8018574:	613b      	str	r3, [r7, #16]
}
 8018576:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018578:	4b12      	ldr	r3, [pc, #72]	; (80185c4 <vTaskStartScheduler+0xc0>)
 801857a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801857e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018580:	4b11      	ldr	r3, [pc, #68]	; (80185c8 <vTaskStartScheduler+0xc4>)
 8018582:	2201      	movs	r2, #1
 8018584:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018586:	4b11      	ldr	r3, [pc, #68]	; (80185cc <vTaskStartScheduler+0xc8>)
 8018588:	2200      	movs	r2, #0
 801858a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801858c:	f001 f9a8 	bl	80198e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018590:	e00e      	b.n	80185b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018592:	697b      	ldr	r3, [r7, #20]
 8018594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018598:	d10a      	bne.n	80185b0 <vTaskStartScheduler+0xac>
	__asm volatile
 801859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801859e:	f383 8811 	msr	BASEPRI, r3
 80185a2:	f3bf 8f6f 	isb	sy
 80185a6:	f3bf 8f4f 	dsb	sy
 80185aa:	60fb      	str	r3, [r7, #12]
}
 80185ac:	bf00      	nop
 80185ae:	e7fe      	b.n	80185ae <vTaskStartScheduler+0xaa>
}
 80185b0:	bf00      	nop
 80185b2:	3718      	adds	r7, #24
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}
 80185b8:	0801ad20 	.word	0x0801ad20
 80185bc:	08018d51 	.word	0x08018d51
 80185c0:	24002c50 	.word	0x24002c50
 80185c4:	24002c4c 	.word	0x24002c4c
 80185c8:	24002c38 	.word	0x24002c38
 80185cc:	24002c30 	.word	0x24002c30

080185d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80185d0:	b480      	push	{r7}
 80185d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80185d4:	4b04      	ldr	r3, [pc, #16]	; (80185e8 <vTaskSuspendAll+0x18>)
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	3301      	adds	r3, #1
 80185da:	4a03      	ldr	r2, [pc, #12]	; (80185e8 <vTaskSuspendAll+0x18>)
 80185dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80185de:	bf00      	nop
 80185e0:	46bd      	mov	sp, r7
 80185e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e6:	4770      	bx	lr
 80185e8:	24002c54 	.word	0x24002c54

080185ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b084      	sub	sp, #16
 80185f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80185f2:	2300      	movs	r3, #0
 80185f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80185f6:	2300      	movs	r3, #0
 80185f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80185fa:	4b42      	ldr	r3, [pc, #264]	; (8018704 <xTaskResumeAll+0x118>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d10a      	bne.n	8018618 <xTaskResumeAll+0x2c>
	__asm volatile
 8018602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018606:	f383 8811 	msr	BASEPRI, r3
 801860a:	f3bf 8f6f 	isb	sy
 801860e:	f3bf 8f4f 	dsb	sy
 8018612:	603b      	str	r3, [r7, #0]
}
 8018614:	bf00      	nop
 8018616:	e7fe      	b.n	8018616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8018618:	f001 fa04 	bl	8019a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801861c:	4b39      	ldr	r3, [pc, #228]	; (8018704 <xTaskResumeAll+0x118>)
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	3b01      	subs	r3, #1
 8018622:	4a38      	ldr	r2, [pc, #224]	; (8018704 <xTaskResumeAll+0x118>)
 8018624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018626:	4b37      	ldr	r3, [pc, #220]	; (8018704 <xTaskResumeAll+0x118>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d162      	bne.n	80186f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801862e:	4b36      	ldr	r3, [pc, #216]	; (8018708 <xTaskResumeAll+0x11c>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d05e      	beq.n	80186f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018636:	e02f      	b.n	8018698 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018638:	4b34      	ldr	r3, [pc, #208]	; (801870c <xTaskResumeAll+0x120>)
 801863a:	68db      	ldr	r3, [r3, #12]
 801863c:	68db      	ldr	r3, [r3, #12]
 801863e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	3318      	adds	r3, #24
 8018644:	4618      	mov	r0, r3
 8018646:	f7ff f871 	bl	801772c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	3304      	adds	r3, #4
 801864e:	4618      	mov	r0, r3
 8018650:	f7ff f86c 	bl	801772c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018658:	4b2d      	ldr	r3, [pc, #180]	; (8018710 <xTaskResumeAll+0x124>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	429a      	cmp	r2, r3
 801865e:	d903      	bls.n	8018668 <xTaskResumeAll+0x7c>
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018664:	4a2a      	ldr	r2, [pc, #168]	; (8018710 <xTaskResumeAll+0x124>)
 8018666:	6013      	str	r3, [r2, #0]
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801866c:	4613      	mov	r3, r2
 801866e:	009b      	lsls	r3, r3, #2
 8018670:	4413      	add	r3, r2
 8018672:	009b      	lsls	r3, r3, #2
 8018674:	4a27      	ldr	r2, [pc, #156]	; (8018714 <xTaskResumeAll+0x128>)
 8018676:	441a      	add	r2, r3
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	3304      	adds	r3, #4
 801867c:	4619      	mov	r1, r3
 801867e:	4610      	mov	r0, r2
 8018680:	f7fe fff7 	bl	8017672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018688:	4b23      	ldr	r3, [pc, #140]	; (8018718 <xTaskResumeAll+0x12c>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801868e:	429a      	cmp	r2, r3
 8018690:	d302      	bcc.n	8018698 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018692:	4b22      	ldr	r3, [pc, #136]	; (801871c <xTaskResumeAll+0x130>)
 8018694:	2201      	movs	r2, #1
 8018696:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018698:	4b1c      	ldr	r3, [pc, #112]	; (801870c <xTaskResumeAll+0x120>)
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d1cb      	bne.n	8018638 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d001      	beq.n	80186aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80186a6:	f000 fc09 	bl	8018ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80186aa:	4b1d      	ldr	r3, [pc, #116]	; (8018720 <xTaskResumeAll+0x134>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d010      	beq.n	80186d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80186b6:	f000 f847 	bl	8018748 <xTaskIncrementTick>
 80186ba:	4603      	mov	r3, r0
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d002      	beq.n	80186c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80186c0:	4b16      	ldr	r3, [pc, #88]	; (801871c <xTaskResumeAll+0x130>)
 80186c2:	2201      	movs	r2, #1
 80186c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	3b01      	subs	r3, #1
 80186ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d1f1      	bne.n	80186b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80186d2:	4b13      	ldr	r3, [pc, #76]	; (8018720 <xTaskResumeAll+0x134>)
 80186d4:	2200      	movs	r2, #0
 80186d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80186d8:	4b10      	ldr	r3, [pc, #64]	; (801871c <xTaskResumeAll+0x130>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d009      	beq.n	80186f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80186e0:	2301      	movs	r3, #1
 80186e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80186e4:	4b0f      	ldr	r3, [pc, #60]	; (8018724 <xTaskResumeAll+0x138>)
 80186e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186ea:	601a      	str	r2, [r3, #0]
 80186ec:	f3bf 8f4f 	dsb	sy
 80186f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80186f4:	f001 f9c6 	bl	8019a84 <vPortExitCritical>

	return xAlreadyYielded;
 80186f8:	68bb      	ldr	r3, [r7, #8]
}
 80186fa:	4618      	mov	r0, r3
 80186fc:	3710      	adds	r7, #16
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}
 8018702:	bf00      	nop
 8018704:	24002c54 	.word	0x24002c54
 8018708:	24002c2c 	.word	0x24002c2c
 801870c:	24002bec 	.word	0x24002bec
 8018710:	24002c34 	.word	0x24002c34
 8018714:	2400275c 	.word	0x2400275c
 8018718:	24002758 	.word	0x24002758
 801871c:	24002c40 	.word	0x24002c40
 8018720:	24002c3c 	.word	0x24002c3c
 8018724:	e000ed04 	.word	0xe000ed04

08018728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018728:	b480      	push	{r7}
 801872a:	b083      	sub	sp, #12
 801872c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801872e:	4b05      	ldr	r3, [pc, #20]	; (8018744 <xTaskGetTickCount+0x1c>)
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018734:	687b      	ldr	r3, [r7, #4]
}
 8018736:	4618      	mov	r0, r3
 8018738:	370c      	adds	r7, #12
 801873a:	46bd      	mov	sp, r7
 801873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018740:	4770      	bx	lr
 8018742:	bf00      	nop
 8018744:	24002c30 	.word	0x24002c30

08018748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b086      	sub	sp, #24
 801874c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801874e:	2300      	movs	r3, #0
 8018750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018752:	4b53      	ldr	r3, [pc, #332]	; (80188a0 <xTaskIncrementTick+0x158>)
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	2b00      	cmp	r3, #0
 8018758:	f040 8095 	bne.w	8018886 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801875c:	4b51      	ldr	r3, [pc, #324]	; (80188a4 <xTaskIncrementTick+0x15c>)
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	3301      	adds	r3, #1
 8018762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018764:	4a4f      	ldr	r2, [pc, #316]	; (80188a4 <xTaskIncrementTick+0x15c>)
 8018766:	693b      	ldr	r3, [r7, #16]
 8018768:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801876a:	693b      	ldr	r3, [r7, #16]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d120      	bne.n	80187b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018770:	4b4d      	ldr	r3, [pc, #308]	; (80188a8 <xTaskIncrementTick+0x160>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d00a      	beq.n	8018790 <xTaskIncrementTick+0x48>
	__asm volatile
 801877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801877e:	f383 8811 	msr	BASEPRI, r3
 8018782:	f3bf 8f6f 	isb	sy
 8018786:	f3bf 8f4f 	dsb	sy
 801878a:	603b      	str	r3, [r7, #0]
}
 801878c:	bf00      	nop
 801878e:	e7fe      	b.n	801878e <xTaskIncrementTick+0x46>
 8018790:	4b45      	ldr	r3, [pc, #276]	; (80188a8 <xTaskIncrementTick+0x160>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	60fb      	str	r3, [r7, #12]
 8018796:	4b45      	ldr	r3, [pc, #276]	; (80188ac <xTaskIncrementTick+0x164>)
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	4a43      	ldr	r2, [pc, #268]	; (80188a8 <xTaskIncrementTick+0x160>)
 801879c:	6013      	str	r3, [r2, #0]
 801879e:	4a43      	ldr	r2, [pc, #268]	; (80188ac <xTaskIncrementTick+0x164>)
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	6013      	str	r3, [r2, #0]
 80187a4:	4b42      	ldr	r3, [pc, #264]	; (80188b0 <xTaskIncrementTick+0x168>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	3301      	adds	r3, #1
 80187aa:	4a41      	ldr	r2, [pc, #260]	; (80188b0 <xTaskIncrementTick+0x168>)
 80187ac:	6013      	str	r3, [r2, #0]
 80187ae:	f000 fb85 	bl	8018ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80187b2:	4b40      	ldr	r3, [pc, #256]	; (80188b4 <xTaskIncrementTick+0x16c>)
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	693a      	ldr	r2, [r7, #16]
 80187b8:	429a      	cmp	r2, r3
 80187ba:	d349      	bcc.n	8018850 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80187bc:	4b3a      	ldr	r3, [pc, #232]	; (80188a8 <xTaskIncrementTick+0x160>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d104      	bne.n	80187d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80187c6:	4b3b      	ldr	r3, [pc, #236]	; (80188b4 <xTaskIncrementTick+0x16c>)
 80187c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80187cc:	601a      	str	r2, [r3, #0]
					break;
 80187ce:	e03f      	b.n	8018850 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187d0:	4b35      	ldr	r3, [pc, #212]	; (80188a8 <xTaskIncrementTick+0x160>)
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	68db      	ldr	r3, [r3, #12]
 80187d6:	68db      	ldr	r3, [r3, #12]
 80187d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80187da:	68bb      	ldr	r3, [r7, #8]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80187e0:	693a      	ldr	r2, [r7, #16]
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d203      	bcs.n	80187f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80187e8:	4a32      	ldr	r2, [pc, #200]	; (80188b4 <xTaskIncrementTick+0x16c>)
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80187ee:	e02f      	b.n	8018850 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80187f0:	68bb      	ldr	r3, [r7, #8]
 80187f2:	3304      	adds	r3, #4
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7fe ff99 	bl	801772c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d004      	beq.n	801880c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018802:	68bb      	ldr	r3, [r7, #8]
 8018804:	3318      	adds	r3, #24
 8018806:	4618      	mov	r0, r3
 8018808:	f7fe ff90 	bl	801772c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018810:	4b29      	ldr	r3, [pc, #164]	; (80188b8 <xTaskIncrementTick+0x170>)
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	429a      	cmp	r2, r3
 8018816:	d903      	bls.n	8018820 <xTaskIncrementTick+0xd8>
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801881c:	4a26      	ldr	r2, [pc, #152]	; (80188b8 <xTaskIncrementTick+0x170>)
 801881e:	6013      	str	r3, [r2, #0]
 8018820:	68bb      	ldr	r3, [r7, #8]
 8018822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018824:	4613      	mov	r3, r2
 8018826:	009b      	lsls	r3, r3, #2
 8018828:	4413      	add	r3, r2
 801882a:	009b      	lsls	r3, r3, #2
 801882c:	4a23      	ldr	r2, [pc, #140]	; (80188bc <xTaskIncrementTick+0x174>)
 801882e:	441a      	add	r2, r3
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	3304      	adds	r3, #4
 8018834:	4619      	mov	r1, r3
 8018836:	4610      	mov	r0, r2
 8018838:	f7fe ff1b 	bl	8017672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018840:	4b1f      	ldr	r3, [pc, #124]	; (80188c0 <xTaskIncrementTick+0x178>)
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018846:	429a      	cmp	r2, r3
 8018848:	d3b8      	bcc.n	80187bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801884a:	2301      	movs	r3, #1
 801884c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801884e:	e7b5      	b.n	80187bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018850:	4b1b      	ldr	r3, [pc, #108]	; (80188c0 <xTaskIncrementTick+0x178>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018856:	4919      	ldr	r1, [pc, #100]	; (80188bc <xTaskIncrementTick+0x174>)
 8018858:	4613      	mov	r3, r2
 801885a:	009b      	lsls	r3, r3, #2
 801885c:	4413      	add	r3, r2
 801885e:	009b      	lsls	r3, r3, #2
 8018860:	440b      	add	r3, r1
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	2b01      	cmp	r3, #1
 8018866:	d901      	bls.n	801886c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018868:	2301      	movs	r3, #1
 801886a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801886c:	4b15      	ldr	r3, [pc, #84]	; (80188c4 <xTaskIncrementTick+0x17c>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d101      	bne.n	8018878 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018874:	f7e9 fd42 	bl	80022fc <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018878:	4b13      	ldr	r3, [pc, #76]	; (80188c8 <xTaskIncrementTick+0x180>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d009      	beq.n	8018894 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018880:	2301      	movs	r3, #1
 8018882:	617b      	str	r3, [r7, #20]
 8018884:	e006      	b.n	8018894 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018886:	4b0f      	ldr	r3, [pc, #60]	; (80188c4 <xTaskIncrementTick+0x17c>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	3301      	adds	r3, #1
 801888c:	4a0d      	ldr	r2, [pc, #52]	; (80188c4 <xTaskIncrementTick+0x17c>)
 801888e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018890:	f7e9 fd34 	bl	80022fc <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018894:	697b      	ldr	r3, [r7, #20]
}
 8018896:	4618      	mov	r0, r3
 8018898:	3718      	adds	r7, #24
 801889a:	46bd      	mov	sp, r7
 801889c:	bd80      	pop	{r7, pc}
 801889e:	bf00      	nop
 80188a0:	24002c54 	.word	0x24002c54
 80188a4:	24002c30 	.word	0x24002c30
 80188a8:	24002be4 	.word	0x24002be4
 80188ac:	24002be8 	.word	0x24002be8
 80188b0:	24002c44 	.word	0x24002c44
 80188b4:	24002c4c 	.word	0x24002c4c
 80188b8:	24002c34 	.word	0x24002c34
 80188bc:	2400275c 	.word	0x2400275c
 80188c0:	24002758 	.word	0x24002758
 80188c4:	24002c3c 	.word	0x24002c3c
 80188c8:	24002c40 	.word	0x24002c40

080188cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b084      	sub	sp, #16
 80188d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80188d2:	4b2f      	ldr	r3, [pc, #188]	; (8018990 <vTaskSwitchContext+0xc4>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d003      	beq.n	80188e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80188da:	4b2e      	ldr	r3, [pc, #184]	; (8018994 <vTaskSwitchContext+0xc8>)
 80188dc:	2201      	movs	r2, #1
 80188de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80188e0:	e052      	b.n	8018988 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80188e2:	4b2c      	ldr	r3, [pc, #176]	; (8018994 <vTaskSwitchContext+0xc8>)
 80188e4:	2200      	movs	r2, #0
 80188e6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80188e8:	4b2b      	ldr	r3, [pc, #172]	; (8018998 <vTaskSwitchContext+0xcc>)
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	681a      	ldr	r2, [r3, #0]
 80188ee:	4b2a      	ldr	r3, [pc, #168]	; (8018998 <vTaskSwitchContext+0xcc>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188f4:	429a      	cmp	r2, r3
 80188f6:	d808      	bhi.n	801890a <vTaskSwitchContext+0x3e>
 80188f8:	4b27      	ldr	r3, [pc, #156]	; (8018998 <vTaskSwitchContext+0xcc>)
 80188fa:	681a      	ldr	r2, [r3, #0]
 80188fc:	4b26      	ldr	r3, [pc, #152]	; (8018998 <vTaskSwitchContext+0xcc>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	3334      	adds	r3, #52	; 0x34
 8018902:	4619      	mov	r1, r3
 8018904:	4610      	mov	r0, r2
 8018906:	f7e9 fd07 	bl	8002318 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801890a:	4b24      	ldr	r3, [pc, #144]	; (801899c <vTaskSwitchContext+0xd0>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	60fb      	str	r3, [r7, #12]
 8018910:	e010      	b.n	8018934 <vTaskSwitchContext+0x68>
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d10a      	bne.n	801892e <vTaskSwitchContext+0x62>
	__asm volatile
 8018918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801891c:	f383 8811 	msr	BASEPRI, r3
 8018920:	f3bf 8f6f 	isb	sy
 8018924:	f3bf 8f4f 	dsb	sy
 8018928:	607b      	str	r3, [r7, #4]
}
 801892a:	bf00      	nop
 801892c:	e7fe      	b.n	801892c <vTaskSwitchContext+0x60>
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	3b01      	subs	r3, #1
 8018932:	60fb      	str	r3, [r7, #12]
 8018934:	491a      	ldr	r1, [pc, #104]	; (80189a0 <vTaskSwitchContext+0xd4>)
 8018936:	68fa      	ldr	r2, [r7, #12]
 8018938:	4613      	mov	r3, r2
 801893a:	009b      	lsls	r3, r3, #2
 801893c:	4413      	add	r3, r2
 801893e:	009b      	lsls	r3, r3, #2
 8018940:	440b      	add	r3, r1
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d0e4      	beq.n	8018912 <vTaskSwitchContext+0x46>
 8018948:	68fa      	ldr	r2, [r7, #12]
 801894a:	4613      	mov	r3, r2
 801894c:	009b      	lsls	r3, r3, #2
 801894e:	4413      	add	r3, r2
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	4a13      	ldr	r2, [pc, #76]	; (80189a0 <vTaskSwitchContext+0xd4>)
 8018954:	4413      	add	r3, r2
 8018956:	60bb      	str	r3, [r7, #8]
 8018958:	68bb      	ldr	r3, [r7, #8]
 801895a:	685b      	ldr	r3, [r3, #4]
 801895c:	685a      	ldr	r2, [r3, #4]
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	605a      	str	r2, [r3, #4]
 8018962:	68bb      	ldr	r3, [r7, #8]
 8018964:	685a      	ldr	r2, [r3, #4]
 8018966:	68bb      	ldr	r3, [r7, #8]
 8018968:	3308      	adds	r3, #8
 801896a:	429a      	cmp	r2, r3
 801896c:	d104      	bne.n	8018978 <vTaskSwitchContext+0xac>
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	685b      	ldr	r3, [r3, #4]
 8018972:	685a      	ldr	r2, [r3, #4]
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	605a      	str	r2, [r3, #4]
 8018978:	68bb      	ldr	r3, [r7, #8]
 801897a:	685b      	ldr	r3, [r3, #4]
 801897c:	68db      	ldr	r3, [r3, #12]
 801897e:	4a06      	ldr	r2, [pc, #24]	; (8018998 <vTaskSwitchContext+0xcc>)
 8018980:	6013      	str	r3, [r2, #0]
 8018982:	4a06      	ldr	r2, [pc, #24]	; (801899c <vTaskSwitchContext+0xd0>)
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	6013      	str	r3, [r2, #0]
}
 8018988:	bf00      	nop
 801898a:	3710      	adds	r7, #16
 801898c:	46bd      	mov	sp, r7
 801898e:	bd80      	pop	{r7, pc}
 8018990:	24002c54 	.word	0x24002c54
 8018994:	24002c40 	.word	0x24002c40
 8018998:	24002758 	.word	0x24002758
 801899c:	24002c34 	.word	0x24002c34
 80189a0:	2400275c 	.word	0x2400275c

080189a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
 80189ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d10a      	bne.n	80189ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80189b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189b8:	f383 8811 	msr	BASEPRI, r3
 80189bc:	f3bf 8f6f 	isb	sy
 80189c0:	f3bf 8f4f 	dsb	sy
 80189c4:	60fb      	str	r3, [r7, #12]
}
 80189c6:	bf00      	nop
 80189c8:	e7fe      	b.n	80189c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80189ca:	4b07      	ldr	r3, [pc, #28]	; (80189e8 <vTaskPlaceOnEventList+0x44>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	3318      	adds	r3, #24
 80189d0:	4619      	mov	r1, r3
 80189d2:	6878      	ldr	r0, [r7, #4]
 80189d4:	f7fe fe71 	bl	80176ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80189d8:	2101      	movs	r1, #1
 80189da:	6838      	ldr	r0, [r7, #0]
 80189dc:	f000 fb32 	bl	8019044 <prvAddCurrentTaskToDelayedList>
}
 80189e0:	bf00      	nop
 80189e2:	3710      	adds	r7, #16
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	24002758 	.word	0x24002758

080189ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b086      	sub	sp, #24
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	60b9      	str	r1, [r7, #8]
 80189f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d10a      	bne.n	8018a14 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80189fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a02:	f383 8811 	msr	BASEPRI, r3
 8018a06:	f3bf 8f6f 	isb	sy
 8018a0a:	f3bf 8f4f 	dsb	sy
 8018a0e:	617b      	str	r3, [r7, #20]
}
 8018a10:	bf00      	nop
 8018a12:	e7fe      	b.n	8018a12 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018a14:	4b11      	ldr	r3, [pc, #68]	; (8018a5c <vTaskPlaceOnUnorderedEventList+0x70>)
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d10a      	bne.n	8018a32 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a20:	f383 8811 	msr	BASEPRI, r3
 8018a24:	f3bf 8f6f 	isb	sy
 8018a28:	f3bf 8f4f 	dsb	sy
 8018a2c:	613b      	str	r3, [r7, #16]
}
 8018a2e:	bf00      	nop
 8018a30:	e7fe      	b.n	8018a30 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018a32:	4b0b      	ldr	r3, [pc, #44]	; (8018a60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	68ba      	ldr	r2, [r7, #8]
 8018a38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018a3c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018a3e:	4b08      	ldr	r3, [pc, #32]	; (8018a60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	3318      	adds	r3, #24
 8018a44:	4619      	mov	r1, r3
 8018a46:	68f8      	ldr	r0, [r7, #12]
 8018a48:	f7fe fe13 	bl	8017672 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018a4c:	2101      	movs	r1, #1
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	f000 faf8 	bl	8019044 <prvAddCurrentTaskToDelayedList>
}
 8018a54:	bf00      	nop
 8018a56:	3718      	adds	r7, #24
 8018a58:	46bd      	mov	sp, r7
 8018a5a:	bd80      	pop	{r7, pc}
 8018a5c:	24002c54 	.word	0x24002c54
 8018a60:	24002758 	.word	0x24002758

08018a64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b086      	sub	sp, #24
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	60f8      	str	r0, [r7, #12]
 8018a6c:	60b9      	str	r1, [r7, #8]
 8018a6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d10a      	bne.n	8018a8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a7a:	f383 8811 	msr	BASEPRI, r3
 8018a7e:	f3bf 8f6f 	isb	sy
 8018a82:	f3bf 8f4f 	dsb	sy
 8018a86:	617b      	str	r3, [r7, #20]
}
 8018a88:	bf00      	nop
 8018a8a:	e7fe      	b.n	8018a8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018a8c:	4b0a      	ldr	r3, [pc, #40]	; (8018ab8 <vTaskPlaceOnEventListRestricted+0x54>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	3318      	adds	r3, #24
 8018a92:	4619      	mov	r1, r3
 8018a94:	68f8      	ldr	r0, [r7, #12]
 8018a96:	f7fe fdec 	bl	8017672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d002      	beq.n	8018aa6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018aa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018aa6:	6879      	ldr	r1, [r7, #4]
 8018aa8:	68b8      	ldr	r0, [r7, #8]
 8018aaa:	f000 facb 	bl	8019044 <prvAddCurrentTaskToDelayedList>
	}
 8018aae:	bf00      	nop
 8018ab0:	3718      	adds	r7, #24
 8018ab2:	46bd      	mov	sp, r7
 8018ab4:	bd80      	pop	{r7, pc}
 8018ab6:	bf00      	nop
 8018ab8:	24002758 	.word	0x24002758

08018abc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b086      	sub	sp, #24
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	68db      	ldr	r3, [r3, #12]
 8018ac8:	68db      	ldr	r3, [r3, #12]
 8018aca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018acc:	693b      	ldr	r3, [r7, #16]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d10a      	bne.n	8018ae8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad6:	f383 8811 	msr	BASEPRI, r3
 8018ada:	f3bf 8f6f 	isb	sy
 8018ade:	f3bf 8f4f 	dsb	sy
 8018ae2:	60fb      	str	r3, [r7, #12]
}
 8018ae4:	bf00      	nop
 8018ae6:	e7fe      	b.n	8018ae6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018ae8:	693b      	ldr	r3, [r7, #16]
 8018aea:	3318      	adds	r3, #24
 8018aec:	4618      	mov	r0, r3
 8018aee:	f7fe fe1d 	bl	801772c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018af2:	4b1e      	ldr	r3, [pc, #120]	; (8018b6c <xTaskRemoveFromEventList+0xb0>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d11d      	bne.n	8018b36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018afa:	693b      	ldr	r3, [r7, #16]
 8018afc:	3304      	adds	r3, #4
 8018afe:	4618      	mov	r0, r3
 8018b00:	f7fe fe14 	bl	801772c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018b04:	693b      	ldr	r3, [r7, #16]
 8018b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b08:	4b19      	ldr	r3, [pc, #100]	; (8018b70 <xTaskRemoveFromEventList+0xb4>)
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	d903      	bls.n	8018b18 <xTaskRemoveFromEventList+0x5c>
 8018b10:	693b      	ldr	r3, [r7, #16]
 8018b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b14:	4a16      	ldr	r2, [pc, #88]	; (8018b70 <xTaskRemoveFromEventList+0xb4>)
 8018b16:	6013      	str	r3, [r2, #0]
 8018b18:	693b      	ldr	r3, [r7, #16]
 8018b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b1c:	4613      	mov	r3, r2
 8018b1e:	009b      	lsls	r3, r3, #2
 8018b20:	4413      	add	r3, r2
 8018b22:	009b      	lsls	r3, r3, #2
 8018b24:	4a13      	ldr	r2, [pc, #76]	; (8018b74 <xTaskRemoveFromEventList+0xb8>)
 8018b26:	441a      	add	r2, r3
 8018b28:	693b      	ldr	r3, [r7, #16]
 8018b2a:	3304      	adds	r3, #4
 8018b2c:	4619      	mov	r1, r3
 8018b2e:	4610      	mov	r0, r2
 8018b30:	f7fe fd9f 	bl	8017672 <vListInsertEnd>
 8018b34:	e005      	b.n	8018b42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018b36:	693b      	ldr	r3, [r7, #16]
 8018b38:	3318      	adds	r3, #24
 8018b3a:	4619      	mov	r1, r3
 8018b3c:	480e      	ldr	r0, [pc, #56]	; (8018b78 <xTaskRemoveFromEventList+0xbc>)
 8018b3e:	f7fe fd98 	bl	8017672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018b42:	693b      	ldr	r3, [r7, #16]
 8018b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b46:	4b0d      	ldr	r3, [pc, #52]	; (8018b7c <xTaskRemoveFromEventList+0xc0>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	d905      	bls.n	8018b5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018b50:	2301      	movs	r3, #1
 8018b52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018b54:	4b0a      	ldr	r3, [pc, #40]	; (8018b80 <xTaskRemoveFromEventList+0xc4>)
 8018b56:	2201      	movs	r2, #1
 8018b58:	601a      	str	r2, [r3, #0]
 8018b5a:	e001      	b.n	8018b60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018b60:	697b      	ldr	r3, [r7, #20]
}
 8018b62:	4618      	mov	r0, r3
 8018b64:	3718      	adds	r7, #24
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bd80      	pop	{r7, pc}
 8018b6a:	bf00      	nop
 8018b6c:	24002c54 	.word	0x24002c54
 8018b70:	24002c34 	.word	0x24002c34
 8018b74:	2400275c 	.word	0x2400275c
 8018b78:	24002bec 	.word	0x24002bec
 8018b7c:	24002758 	.word	0x24002758
 8018b80:	24002c40 	.word	0x24002c40

08018b84 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b086      	sub	sp, #24
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018b8e:	4b29      	ldr	r3, [pc, #164]	; (8018c34 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d10a      	bne.n	8018bac <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b9a:	f383 8811 	msr	BASEPRI, r3
 8018b9e:	f3bf 8f6f 	isb	sy
 8018ba2:	f3bf 8f4f 	dsb	sy
 8018ba6:	613b      	str	r3, [r7, #16]
}
 8018ba8:	bf00      	nop
 8018baa:	e7fe      	b.n	8018baa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018bac:	683b      	ldr	r3, [r7, #0]
 8018bae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	68db      	ldr	r3, [r3, #12]
 8018bba:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d10a      	bne.n	8018bd8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bc6:	f383 8811 	msr	BASEPRI, r3
 8018bca:	f3bf 8f6f 	isb	sy
 8018bce:	f3bf 8f4f 	dsb	sy
 8018bd2:	60fb      	str	r3, [r7, #12]
}
 8018bd4:	bf00      	nop
 8018bd6:	e7fe      	b.n	8018bd6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018bd8:	6878      	ldr	r0, [r7, #4]
 8018bda:	f7fe fda7 	bl	801772c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018bde:	697b      	ldr	r3, [r7, #20]
 8018be0:	3304      	adds	r3, #4
 8018be2:	4618      	mov	r0, r3
 8018be4:	f7fe fda2 	bl	801772c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018be8:	697b      	ldr	r3, [r7, #20]
 8018bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bec:	4b12      	ldr	r3, [pc, #72]	; (8018c38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	429a      	cmp	r2, r3
 8018bf2:	d903      	bls.n	8018bfc <vTaskRemoveFromUnorderedEventList+0x78>
 8018bf4:	697b      	ldr	r3, [r7, #20]
 8018bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bf8:	4a0f      	ldr	r2, [pc, #60]	; (8018c38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018bfa:	6013      	str	r3, [r2, #0]
 8018bfc:	697b      	ldr	r3, [r7, #20]
 8018bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c00:	4613      	mov	r3, r2
 8018c02:	009b      	lsls	r3, r3, #2
 8018c04:	4413      	add	r3, r2
 8018c06:	009b      	lsls	r3, r3, #2
 8018c08:	4a0c      	ldr	r2, [pc, #48]	; (8018c3c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018c0a:	441a      	add	r2, r3
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	3304      	adds	r3, #4
 8018c10:	4619      	mov	r1, r3
 8018c12:	4610      	mov	r0, r2
 8018c14:	f7fe fd2d 	bl	8017672 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018c18:	697b      	ldr	r3, [r7, #20]
 8018c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c1c:	4b08      	ldr	r3, [pc, #32]	; (8018c40 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c22:	429a      	cmp	r2, r3
 8018c24:	d902      	bls.n	8018c2c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018c26:	4b07      	ldr	r3, [pc, #28]	; (8018c44 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018c28:	2201      	movs	r2, #1
 8018c2a:	601a      	str	r2, [r3, #0]
	}
}
 8018c2c:	bf00      	nop
 8018c2e:	3718      	adds	r7, #24
 8018c30:	46bd      	mov	sp, r7
 8018c32:	bd80      	pop	{r7, pc}
 8018c34:	24002c54 	.word	0x24002c54
 8018c38:	24002c34 	.word	0x24002c34
 8018c3c:	2400275c 	.word	0x2400275c
 8018c40:	24002758 	.word	0x24002758
 8018c44:	24002c40 	.word	0x24002c40

08018c48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018c48:	b480      	push	{r7}
 8018c4a:	b083      	sub	sp, #12
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018c50:	4b06      	ldr	r3, [pc, #24]	; (8018c6c <vTaskInternalSetTimeOutState+0x24>)
 8018c52:	681a      	ldr	r2, [r3, #0]
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018c58:	4b05      	ldr	r3, [pc, #20]	; (8018c70 <vTaskInternalSetTimeOutState+0x28>)
 8018c5a:	681a      	ldr	r2, [r3, #0]
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	605a      	str	r2, [r3, #4]
}
 8018c60:	bf00      	nop
 8018c62:	370c      	adds	r7, #12
 8018c64:	46bd      	mov	sp, r7
 8018c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6a:	4770      	bx	lr
 8018c6c:	24002c44 	.word	0x24002c44
 8018c70:	24002c30 	.word	0x24002c30

08018c74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b088      	sub	sp, #32
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
 8018c7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d10a      	bne.n	8018c9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c88:	f383 8811 	msr	BASEPRI, r3
 8018c8c:	f3bf 8f6f 	isb	sy
 8018c90:	f3bf 8f4f 	dsb	sy
 8018c94:	613b      	str	r3, [r7, #16]
}
 8018c96:	bf00      	nop
 8018c98:	e7fe      	b.n	8018c98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d10a      	bne.n	8018cb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ca4:	f383 8811 	msr	BASEPRI, r3
 8018ca8:	f3bf 8f6f 	isb	sy
 8018cac:	f3bf 8f4f 	dsb	sy
 8018cb0:	60fb      	str	r3, [r7, #12]
}
 8018cb2:	bf00      	nop
 8018cb4:	e7fe      	b.n	8018cb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018cb6:	f000 feb5 	bl	8019a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018cba:	4b1d      	ldr	r3, [pc, #116]	; (8018d30 <xTaskCheckForTimeOut+0xbc>)
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	685b      	ldr	r3, [r3, #4]
 8018cc4:	69ba      	ldr	r2, [r7, #24]
 8018cc6:	1ad3      	subs	r3, r2, r3
 8018cc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018cd2:	d102      	bne.n	8018cda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	61fb      	str	r3, [r7, #28]
 8018cd8:	e023      	b.n	8018d22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681a      	ldr	r2, [r3, #0]
 8018cde:	4b15      	ldr	r3, [pc, #84]	; (8018d34 <xTaskCheckForTimeOut+0xc0>)
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d007      	beq.n	8018cf6 <xTaskCheckForTimeOut+0x82>
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	685b      	ldr	r3, [r3, #4]
 8018cea:	69ba      	ldr	r2, [r7, #24]
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d302      	bcc.n	8018cf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018cf0:	2301      	movs	r3, #1
 8018cf2:	61fb      	str	r3, [r7, #28]
 8018cf4:	e015      	b.n	8018d22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018cf6:	683b      	ldr	r3, [r7, #0]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	697a      	ldr	r2, [r7, #20]
 8018cfc:	429a      	cmp	r2, r3
 8018cfe:	d20b      	bcs.n	8018d18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018d00:	683b      	ldr	r3, [r7, #0]
 8018d02:	681a      	ldr	r2, [r3, #0]
 8018d04:	697b      	ldr	r3, [r7, #20]
 8018d06:	1ad2      	subs	r2, r2, r3
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f7ff ff9b 	bl	8018c48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018d12:	2300      	movs	r3, #0
 8018d14:	61fb      	str	r3, [r7, #28]
 8018d16:	e004      	b.n	8018d22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018d18:	683b      	ldr	r3, [r7, #0]
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018d1e:	2301      	movs	r3, #1
 8018d20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018d22:	f000 feaf 	bl	8019a84 <vPortExitCritical>

	return xReturn;
 8018d26:	69fb      	ldr	r3, [r7, #28]
}
 8018d28:	4618      	mov	r0, r3
 8018d2a:	3720      	adds	r7, #32
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	24002c30 	.word	0x24002c30
 8018d34:	24002c44 	.word	0x24002c44

08018d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018d38:	b480      	push	{r7}
 8018d3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018d3c:	4b03      	ldr	r3, [pc, #12]	; (8018d4c <vTaskMissedYield+0x14>)
 8018d3e:	2201      	movs	r2, #1
 8018d40:	601a      	str	r2, [r3, #0]
}
 8018d42:	bf00      	nop
 8018d44:	46bd      	mov	sp, r7
 8018d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d4a:	4770      	bx	lr
 8018d4c:	24002c40 	.word	0x24002c40

08018d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018d58:	f000 f852 	bl	8018e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018d5c:	4b06      	ldr	r3, [pc, #24]	; (8018d78 <prvIdleTask+0x28>)
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	2b01      	cmp	r3, #1
 8018d62:	d9f9      	bls.n	8018d58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018d64:	4b05      	ldr	r3, [pc, #20]	; (8018d7c <prvIdleTask+0x2c>)
 8018d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d6a:	601a      	str	r2, [r3, #0]
 8018d6c:	f3bf 8f4f 	dsb	sy
 8018d70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018d74:	e7f0      	b.n	8018d58 <prvIdleTask+0x8>
 8018d76:	bf00      	nop
 8018d78:	2400275c 	.word	0x2400275c
 8018d7c:	e000ed04 	.word	0xe000ed04

08018d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b082      	sub	sp, #8
 8018d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018d86:	2300      	movs	r3, #0
 8018d88:	607b      	str	r3, [r7, #4]
 8018d8a:	e00c      	b.n	8018da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018d8c:	687a      	ldr	r2, [r7, #4]
 8018d8e:	4613      	mov	r3, r2
 8018d90:	009b      	lsls	r3, r3, #2
 8018d92:	4413      	add	r3, r2
 8018d94:	009b      	lsls	r3, r3, #2
 8018d96:	4a12      	ldr	r2, [pc, #72]	; (8018de0 <prvInitialiseTaskLists+0x60>)
 8018d98:	4413      	add	r3, r2
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7fe fc3c 	bl	8017618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	3301      	adds	r3, #1
 8018da4:	607b      	str	r3, [r7, #4]
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	2b37      	cmp	r3, #55	; 0x37
 8018daa:	d9ef      	bls.n	8018d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018dac:	480d      	ldr	r0, [pc, #52]	; (8018de4 <prvInitialiseTaskLists+0x64>)
 8018dae:	f7fe fc33 	bl	8017618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018db2:	480d      	ldr	r0, [pc, #52]	; (8018de8 <prvInitialiseTaskLists+0x68>)
 8018db4:	f7fe fc30 	bl	8017618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018db8:	480c      	ldr	r0, [pc, #48]	; (8018dec <prvInitialiseTaskLists+0x6c>)
 8018dba:	f7fe fc2d 	bl	8017618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018dbe:	480c      	ldr	r0, [pc, #48]	; (8018df0 <prvInitialiseTaskLists+0x70>)
 8018dc0:	f7fe fc2a 	bl	8017618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018dc4:	480b      	ldr	r0, [pc, #44]	; (8018df4 <prvInitialiseTaskLists+0x74>)
 8018dc6:	f7fe fc27 	bl	8017618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018dca:	4b0b      	ldr	r3, [pc, #44]	; (8018df8 <prvInitialiseTaskLists+0x78>)
 8018dcc:	4a05      	ldr	r2, [pc, #20]	; (8018de4 <prvInitialiseTaskLists+0x64>)
 8018dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018dd0:	4b0a      	ldr	r3, [pc, #40]	; (8018dfc <prvInitialiseTaskLists+0x7c>)
 8018dd2:	4a05      	ldr	r2, [pc, #20]	; (8018de8 <prvInitialiseTaskLists+0x68>)
 8018dd4:	601a      	str	r2, [r3, #0]
}
 8018dd6:	bf00      	nop
 8018dd8:	3708      	adds	r7, #8
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bd80      	pop	{r7, pc}
 8018dde:	bf00      	nop
 8018de0:	2400275c 	.word	0x2400275c
 8018de4:	24002bbc 	.word	0x24002bbc
 8018de8:	24002bd0 	.word	0x24002bd0
 8018dec:	24002bec 	.word	0x24002bec
 8018df0:	24002c00 	.word	0x24002c00
 8018df4:	24002c18 	.word	0x24002c18
 8018df8:	24002be4 	.word	0x24002be4
 8018dfc:	24002be8 	.word	0x24002be8

08018e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b082      	sub	sp, #8
 8018e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018e06:	e019      	b.n	8018e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018e08:	f000 fe0c 	bl	8019a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e0c:	4b10      	ldr	r3, [pc, #64]	; (8018e50 <prvCheckTasksWaitingTermination+0x50>)
 8018e0e:	68db      	ldr	r3, [r3, #12]
 8018e10:	68db      	ldr	r3, [r3, #12]
 8018e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	3304      	adds	r3, #4
 8018e18:	4618      	mov	r0, r3
 8018e1a:	f7fe fc87 	bl	801772c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018e1e:	4b0d      	ldr	r3, [pc, #52]	; (8018e54 <prvCheckTasksWaitingTermination+0x54>)
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	3b01      	subs	r3, #1
 8018e24:	4a0b      	ldr	r2, [pc, #44]	; (8018e54 <prvCheckTasksWaitingTermination+0x54>)
 8018e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018e28:	4b0b      	ldr	r3, [pc, #44]	; (8018e58 <prvCheckTasksWaitingTermination+0x58>)
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	3b01      	subs	r3, #1
 8018e2e:	4a0a      	ldr	r2, [pc, #40]	; (8018e58 <prvCheckTasksWaitingTermination+0x58>)
 8018e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018e32:	f000 fe27 	bl	8019a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018e36:	6878      	ldr	r0, [r7, #4]
 8018e38:	f000 f810 	bl	8018e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018e3c:	4b06      	ldr	r3, [pc, #24]	; (8018e58 <prvCheckTasksWaitingTermination+0x58>)
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d1e1      	bne.n	8018e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018e44:	bf00      	nop
 8018e46:	bf00      	nop
 8018e48:	3708      	adds	r7, #8
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}
 8018e4e:	bf00      	nop
 8018e50:	24002c00 	.word	0x24002c00
 8018e54:	24002c2c 	.word	0x24002c2c
 8018e58:	24002c14 	.word	0x24002c14

08018e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b084      	sub	sp, #16
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d108      	bne.n	8018e80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e72:	4618      	mov	r0, r3
 8018e74:	f000 ffc4 	bl	8019e00 <vPortFree>
				vPortFree( pxTCB );
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f000 ffc1 	bl	8019e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018e7e:	e018      	b.n	8018eb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018e86:	2b01      	cmp	r3, #1
 8018e88:	d103      	bne.n	8018e92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f000 ffb8 	bl	8019e00 <vPortFree>
	}
 8018e90:	e00f      	b.n	8018eb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018e98:	2b02      	cmp	r3, #2
 8018e9a:	d00a      	beq.n	8018eb2 <prvDeleteTCB+0x56>
	__asm volatile
 8018e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ea0:	f383 8811 	msr	BASEPRI, r3
 8018ea4:	f3bf 8f6f 	isb	sy
 8018ea8:	f3bf 8f4f 	dsb	sy
 8018eac:	60fb      	str	r3, [r7, #12]
}
 8018eae:	bf00      	nop
 8018eb0:	e7fe      	b.n	8018eb0 <prvDeleteTCB+0x54>
	}
 8018eb2:	bf00      	nop
 8018eb4:	3710      	adds	r7, #16
 8018eb6:	46bd      	mov	sp, r7
 8018eb8:	bd80      	pop	{r7, pc}
	...

08018ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018ebc:	b480      	push	{r7}
 8018ebe:	b083      	sub	sp, #12
 8018ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018ec2:	4b0c      	ldr	r3, [pc, #48]	; (8018ef4 <prvResetNextTaskUnblockTime+0x38>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d104      	bne.n	8018ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018ecc:	4b0a      	ldr	r3, [pc, #40]	; (8018ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8018ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018ed4:	e008      	b.n	8018ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018ed6:	4b07      	ldr	r3, [pc, #28]	; (8018ef4 <prvResetNextTaskUnblockTime+0x38>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	68db      	ldr	r3, [r3, #12]
 8018edc:	68db      	ldr	r3, [r3, #12]
 8018ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	685b      	ldr	r3, [r3, #4]
 8018ee4:	4a04      	ldr	r2, [pc, #16]	; (8018ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8018ee6:	6013      	str	r3, [r2, #0]
}
 8018ee8:	bf00      	nop
 8018eea:	370c      	adds	r7, #12
 8018eec:	46bd      	mov	sp, r7
 8018eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ef2:	4770      	bx	lr
 8018ef4:	24002be4 	.word	0x24002be4
 8018ef8:	24002c4c 	.word	0x24002c4c

08018efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018efc:	b480      	push	{r7}
 8018efe:	b083      	sub	sp, #12
 8018f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018f02:	4b0b      	ldr	r3, [pc, #44]	; (8018f30 <xTaskGetSchedulerState+0x34>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d102      	bne.n	8018f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018f0a:	2301      	movs	r3, #1
 8018f0c:	607b      	str	r3, [r7, #4]
 8018f0e:	e008      	b.n	8018f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018f10:	4b08      	ldr	r3, [pc, #32]	; (8018f34 <xTaskGetSchedulerState+0x38>)
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d102      	bne.n	8018f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018f18:	2302      	movs	r3, #2
 8018f1a:	607b      	str	r3, [r7, #4]
 8018f1c:	e001      	b.n	8018f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018f1e:	2300      	movs	r3, #0
 8018f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018f22:	687b      	ldr	r3, [r7, #4]
	}
 8018f24:	4618      	mov	r0, r3
 8018f26:	370c      	adds	r7, #12
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2e:	4770      	bx	lr
 8018f30:	24002c38 	.word	0x24002c38
 8018f34:	24002c54 	.word	0x24002c54

08018f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b086      	sub	sp, #24
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018f44:	2300      	movs	r3, #0
 8018f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d056      	beq.n	8018ffc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018f4e:	4b2e      	ldr	r3, [pc, #184]	; (8019008 <xTaskPriorityDisinherit+0xd0>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	693a      	ldr	r2, [r7, #16]
 8018f54:	429a      	cmp	r2, r3
 8018f56:	d00a      	beq.n	8018f6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f5c:	f383 8811 	msr	BASEPRI, r3
 8018f60:	f3bf 8f6f 	isb	sy
 8018f64:	f3bf 8f4f 	dsb	sy
 8018f68:	60fb      	str	r3, [r7, #12]
}
 8018f6a:	bf00      	nop
 8018f6c:	e7fe      	b.n	8018f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018f6e:	693b      	ldr	r3, [r7, #16]
 8018f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d10a      	bne.n	8018f8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f7a:	f383 8811 	msr	BASEPRI, r3
 8018f7e:	f3bf 8f6f 	isb	sy
 8018f82:	f3bf 8f4f 	dsb	sy
 8018f86:	60bb      	str	r3, [r7, #8]
}
 8018f88:	bf00      	nop
 8018f8a:	e7fe      	b.n	8018f8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018f8c:	693b      	ldr	r3, [r7, #16]
 8018f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f90:	1e5a      	subs	r2, r3, #1
 8018f92:	693b      	ldr	r3, [r7, #16]
 8018f94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f9a:	693b      	ldr	r3, [r7, #16]
 8018f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f9e:	429a      	cmp	r2, r3
 8018fa0:	d02c      	beq.n	8018ffc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018fa2:	693b      	ldr	r3, [r7, #16]
 8018fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d128      	bne.n	8018ffc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018faa:	693b      	ldr	r3, [r7, #16]
 8018fac:	3304      	adds	r3, #4
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7fe fbbc 	bl	801772c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018fb4:	693b      	ldr	r3, [r7, #16]
 8018fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018fb8:	693b      	ldr	r3, [r7, #16]
 8018fba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fbc:	693b      	ldr	r3, [r7, #16]
 8018fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018fc4:	693b      	ldr	r3, [r7, #16]
 8018fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018fc8:	693b      	ldr	r3, [r7, #16]
 8018fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fcc:	4b0f      	ldr	r3, [pc, #60]	; (801900c <xTaskPriorityDisinherit+0xd4>)
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d903      	bls.n	8018fdc <xTaskPriorityDisinherit+0xa4>
 8018fd4:	693b      	ldr	r3, [r7, #16]
 8018fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fd8:	4a0c      	ldr	r2, [pc, #48]	; (801900c <xTaskPriorityDisinherit+0xd4>)
 8018fda:	6013      	str	r3, [r2, #0]
 8018fdc:	693b      	ldr	r3, [r7, #16]
 8018fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fe0:	4613      	mov	r3, r2
 8018fe2:	009b      	lsls	r3, r3, #2
 8018fe4:	4413      	add	r3, r2
 8018fe6:	009b      	lsls	r3, r3, #2
 8018fe8:	4a09      	ldr	r2, [pc, #36]	; (8019010 <xTaskPriorityDisinherit+0xd8>)
 8018fea:	441a      	add	r2, r3
 8018fec:	693b      	ldr	r3, [r7, #16]
 8018fee:	3304      	adds	r3, #4
 8018ff0:	4619      	mov	r1, r3
 8018ff2:	4610      	mov	r0, r2
 8018ff4:	f7fe fb3d 	bl	8017672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018ff8:	2301      	movs	r3, #1
 8018ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018ffc:	697b      	ldr	r3, [r7, #20]
	}
 8018ffe:	4618      	mov	r0, r3
 8019000:	3718      	adds	r7, #24
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}
 8019006:	bf00      	nop
 8019008:	24002758 	.word	0x24002758
 801900c:	24002c34 	.word	0x24002c34
 8019010:	2400275c 	.word	0x2400275c

08019014 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8019014:	b480      	push	{r7}
 8019016:	b083      	sub	sp, #12
 8019018:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801901a:	4b09      	ldr	r3, [pc, #36]	; (8019040 <uxTaskResetEventItemValue+0x2c>)
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	699b      	ldr	r3, [r3, #24]
 8019020:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019022:	4b07      	ldr	r3, [pc, #28]	; (8019040 <uxTaskResetEventItemValue+0x2c>)
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019028:	4b05      	ldr	r3, [pc, #20]	; (8019040 <uxTaskResetEventItemValue+0x2c>)
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8019030:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8019032:	687b      	ldr	r3, [r7, #4]
}
 8019034:	4618      	mov	r0, r3
 8019036:	370c      	adds	r7, #12
 8019038:	46bd      	mov	sp, r7
 801903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903e:	4770      	bx	lr
 8019040:	24002758 	.word	0x24002758

08019044 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019044:	b580      	push	{r7, lr}
 8019046:	b084      	sub	sp, #16
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
 801904c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801904e:	4b21      	ldr	r3, [pc, #132]	; (80190d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019054:	4b20      	ldr	r3, [pc, #128]	; (80190d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	3304      	adds	r3, #4
 801905a:	4618      	mov	r0, r3
 801905c:	f7fe fb66 	bl	801772c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019066:	d10a      	bne.n	801907e <prvAddCurrentTaskToDelayedList+0x3a>
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d007      	beq.n	801907e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801906e:	4b1a      	ldr	r3, [pc, #104]	; (80190d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	3304      	adds	r3, #4
 8019074:	4619      	mov	r1, r3
 8019076:	4819      	ldr	r0, [pc, #100]	; (80190dc <prvAddCurrentTaskToDelayedList+0x98>)
 8019078:	f7fe fafb 	bl	8017672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801907c:	e026      	b.n	80190cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801907e:	68fa      	ldr	r2, [r7, #12]
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	4413      	add	r3, r2
 8019084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019086:	4b14      	ldr	r3, [pc, #80]	; (80190d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	68ba      	ldr	r2, [r7, #8]
 801908c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801908e:	68ba      	ldr	r2, [r7, #8]
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	429a      	cmp	r2, r3
 8019094:	d209      	bcs.n	80190aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019096:	4b12      	ldr	r3, [pc, #72]	; (80190e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019098:	681a      	ldr	r2, [r3, #0]
 801909a:	4b0f      	ldr	r3, [pc, #60]	; (80190d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	3304      	adds	r3, #4
 80190a0:	4619      	mov	r1, r3
 80190a2:	4610      	mov	r0, r2
 80190a4:	f7fe fb09 	bl	80176ba <vListInsert>
}
 80190a8:	e010      	b.n	80190cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80190aa:	4b0e      	ldr	r3, [pc, #56]	; (80190e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80190ac:	681a      	ldr	r2, [r3, #0]
 80190ae:	4b0a      	ldr	r3, [pc, #40]	; (80190d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	3304      	adds	r3, #4
 80190b4:	4619      	mov	r1, r3
 80190b6:	4610      	mov	r0, r2
 80190b8:	f7fe faff 	bl	80176ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80190bc:	4b0a      	ldr	r3, [pc, #40]	; (80190e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	68ba      	ldr	r2, [r7, #8]
 80190c2:	429a      	cmp	r2, r3
 80190c4:	d202      	bcs.n	80190cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80190c6:	4a08      	ldr	r2, [pc, #32]	; (80190e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	6013      	str	r3, [r2, #0]
}
 80190cc:	bf00      	nop
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	24002c30 	.word	0x24002c30
 80190d8:	24002758 	.word	0x24002758
 80190dc:	24002c18 	.word	0x24002c18
 80190e0:	24002be8 	.word	0x24002be8
 80190e4:	24002be4 	.word	0x24002be4
 80190e8:	24002c4c 	.word	0x24002c4c

080190ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b08a      	sub	sp, #40	; 0x28
 80190f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80190f2:	2300      	movs	r3, #0
 80190f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80190f6:	f000 fb07 	bl	8019708 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80190fa:	4b1c      	ldr	r3, [pc, #112]	; (801916c <xTimerCreateTimerTask+0x80>)
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d021      	beq.n	8019146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019102:	2300      	movs	r3, #0
 8019104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019106:	2300      	movs	r3, #0
 8019108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801910a:	1d3a      	adds	r2, r7, #4
 801910c:	f107 0108 	add.w	r1, r7, #8
 8019110:	f107 030c 	add.w	r3, r7, #12
 8019114:	4618      	mov	r0, r3
 8019116:	f7fd fff9 	bl	801710c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801911a:	6879      	ldr	r1, [r7, #4]
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	68fa      	ldr	r2, [r7, #12]
 8019120:	9202      	str	r2, [sp, #8]
 8019122:	9301      	str	r3, [sp, #4]
 8019124:	2302      	movs	r3, #2
 8019126:	9300      	str	r3, [sp, #0]
 8019128:	2300      	movs	r3, #0
 801912a:	460a      	mov	r2, r1
 801912c:	4910      	ldr	r1, [pc, #64]	; (8019170 <xTimerCreateTimerTask+0x84>)
 801912e:	4811      	ldr	r0, [pc, #68]	; (8019174 <xTimerCreateTimerTask+0x88>)
 8019130:	f7ff f812 	bl	8018158 <xTaskCreateStatic>
 8019134:	4603      	mov	r3, r0
 8019136:	4a10      	ldr	r2, [pc, #64]	; (8019178 <xTimerCreateTimerTask+0x8c>)
 8019138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801913a:	4b0f      	ldr	r3, [pc, #60]	; (8019178 <xTimerCreateTimerTask+0x8c>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d001      	beq.n	8019146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019142:	2301      	movs	r3, #1
 8019144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019146:	697b      	ldr	r3, [r7, #20]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d10a      	bne.n	8019162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019150:	f383 8811 	msr	BASEPRI, r3
 8019154:	f3bf 8f6f 	isb	sy
 8019158:	f3bf 8f4f 	dsb	sy
 801915c:	613b      	str	r3, [r7, #16]
}
 801915e:	bf00      	nop
 8019160:	e7fe      	b.n	8019160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019162:	697b      	ldr	r3, [r7, #20]
}
 8019164:	4618      	mov	r0, r3
 8019166:	3718      	adds	r7, #24
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}
 801916c:	24002c88 	.word	0x24002c88
 8019170:	0801ad28 	.word	0x0801ad28
 8019174:	080192b1 	.word	0x080192b1
 8019178:	24002c8c 	.word	0x24002c8c

0801917c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b08a      	sub	sp, #40	; 0x28
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	607a      	str	r2, [r7, #4]
 8019188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801918a:	2300      	movs	r3, #0
 801918c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d10a      	bne.n	80191aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8019194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019198:	f383 8811 	msr	BASEPRI, r3
 801919c:	f3bf 8f6f 	isb	sy
 80191a0:	f3bf 8f4f 	dsb	sy
 80191a4:	623b      	str	r3, [r7, #32]
}
 80191a6:	bf00      	nop
 80191a8:	e7fe      	b.n	80191a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80191aa:	4b1a      	ldr	r3, [pc, #104]	; (8019214 <xTimerGenericCommand+0x98>)
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d02a      	beq.n	8019208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80191b2:	68bb      	ldr	r3, [r7, #8]
 80191b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80191be:	68bb      	ldr	r3, [r7, #8]
 80191c0:	2b05      	cmp	r3, #5
 80191c2:	dc18      	bgt.n	80191f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80191c4:	f7ff fe9a 	bl	8018efc <xTaskGetSchedulerState>
 80191c8:	4603      	mov	r3, r0
 80191ca:	2b02      	cmp	r3, #2
 80191cc:	d109      	bne.n	80191e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80191ce:	4b11      	ldr	r3, [pc, #68]	; (8019214 <xTimerGenericCommand+0x98>)
 80191d0:	6818      	ldr	r0, [r3, #0]
 80191d2:	f107 0110 	add.w	r1, r7, #16
 80191d6:	2300      	movs	r3, #0
 80191d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80191da:	f7fe fbd5 	bl	8017988 <xQueueGenericSend>
 80191de:	6278      	str	r0, [r7, #36]	; 0x24
 80191e0:	e012      	b.n	8019208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80191e2:	4b0c      	ldr	r3, [pc, #48]	; (8019214 <xTimerGenericCommand+0x98>)
 80191e4:	6818      	ldr	r0, [r3, #0]
 80191e6:	f107 0110 	add.w	r1, r7, #16
 80191ea:	2300      	movs	r3, #0
 80191ec:	2200      	movs	r2, #0
 80191ee:	f7fe fbcb 	bl	8017988 <xQueueGenericSend>
 80191f2:	6278      	str	r0, [r7, #36]	; 0x24
 80191f4:	e008      	b.n	8019208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80191f6:	4b07      	ldr	r3, [pc, #28]	; (8019214 <xTimerGenericCommand+0x98>)
 80191f8:	6818      	ldr	r0, [r3, #0]
 80191fa:	f107 0110 	add.w	r1, r7, #16
 80191fe:	2300      	movs	r3, #0
 8019200:	683a      	ldr	r2, [r7, #0]
 8019202:	f7fe fcbf 	bl	8017b84 <xQueueGenericSendFromISR>
 8019206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801920a:	4618      	mov	r0, r3
 801920c:	3728      	adds	r7, #40	; 0x28
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	24002c88 	.word	0x24002c88

08019218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b088      	sub	sp, #32
 801921c:	af02      	add	r7, sp, #8
 801921e:	6078      	str	r0, [r7, #4]
 8019220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019222:	4b22      	ldr	r3, [pc, #136]	; (80192ac <prvProcessExpiredTimer+0x94>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	68db      	ldr	r3, [r3, #12]
 8019228:	68db      	ldr	r3, [r3, #12]
 801922a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	3304      	adds	r3, #4
 8019230:	4618      	mov	r0, r3
 8019232:	f7fe fa7b 	bl	801772c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801923c:	f003 0304 	and.w	r3, r3, #4
 8019240:	2b00      	cmp	r3, #0
 8019242:	d022      	beq.n	801928a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	699a      	ldr	r2, [r3, #24]
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	18d1      	adds	r1, r2, r3
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	683a      	ldr	r2, [r7, #0]
 8019250:	6978      	ldr	r0, [r7, #20]
 8019252:	f000 f8d1 	bl	80193f8 <prvInsertTimerInActiveList>
 8019256:	4603      	mov	r3, r0
 8019258:	2b00      	cmp	r3, #0
 801925a:	d01f      	beq.n	801929c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801925c:	2300      	movs	r3, #0
 801925e:	9300      	str	r3, [sp, #0]
 8019260:	2300      	movs	r3, #0
 8019262:	687a      	ldr	r2, [r7, #4]
 8019264:	2100      	movs	r1, #0
 8019266:	6978      	ldr	r0, [r7, #20]
 8019268:	f7ff ff88 	bl	801917c <xTimerGenericCommand>
 801926c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801926e:	693b      	ldr	r3, [r7, #16]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d113      	bne.n	801929c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019278:	f383 8811 	msr	BASEPRI, r3
 801927c:	f3bf 8f6f 	isb	sy
 8019280:	f3bf 8f4f 	dsb	sy
 8019284:	60fb      	str	r3, [r7, #12]
}
 8019286:	bf00      	nop
 8019288:	e7fe      	b.n	8019288 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801928a:	697b      	ldr	r3, [r7, #20]
 801928c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019290:	f023 0301 	bic.w	r3, r3, #1
 8019294:	b2da      	uxtb	r2, r3
 8019296:	697b      	ldr	r3, [r7, #20]
 8019298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801929c:	697b      	ldr	r3, [r7, #20]
 801929e:	6a1b      	ldr	r3, [r3, #32]
 80192a0:	6978      	ldr	r0, [r7, #20]
 80192a2:	4798      	blx	r3
}
 80192a4:	bf00      	nop
 80192a6:	3718      	adds	r7, #24
 80192a8:	46bd      	mov	sp, r7
 80192aa:	bd80      	pop	{r7, pc}
 80192ac:	24002c80 	.word	0x24002c80

080192b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b084      	sub	sp, #16
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80192b8:	f107 0308 	add.w	r3, r7, #8
 80192bc:	4618      	mov	r0, r3
 80192be:	f000 f857 	bl	8019370 <prvGetNextExpireTime>
 80192c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	4619      	mov	r1, r3
 80192c8:	68f8      	ldr	r0, [r7, #12]
 80192ca:	f000 f803 	bl	80192d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80192ce:	f000 f8d5 	bl	801947c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80192d2:	e7f1      	b.n	80192b8 <prvTimerTask+0x8>

080192d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b084      	sub	sp, #16
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
 80192dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80192de:	f7ff f977 	bl	80185d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80192e2:	f107 0308 	add.w	r3, r7, #8
 80192e6:	4618      	mov	r0, r3
 80192e8:	f000 f866 	bl	80193b8 <prvSampleTimeNow>
 80192ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80192ee:	68bb      	ldr	r3, [r7, #8]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d130      	bne.n	8019356 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80192f4:	683b      	ldr	r3, [r7, #0]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d10a      	bne.n	8019310 <prvProcessTimerOrBlockTask+0x3c>
 80192fa:	687a      	ldr	r2, [r7, #4]
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	429a      	cmp	r2, r3
 8019300:	d806      	bhi.n	8019310 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019302:	f7ff f973 	bl	80185ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019306:	68f9      	ldr	r1, [r7, #12]
 8019308:	6878      	ldr	r0, [r7, #4]
 801930a:	f7ff ff85 	bl	8019218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801930e:	e024      	b.n	801935a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d008      	beq.n	8019328 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019316:	4b13      	ldr	r3, [pc, #76]	; (8019364 <prvProcessTimerOrBlockTask+0x90>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	2b00      	cmp	r3, #0
 801931e:	d101      	bne.n	8019324 <prvProcessTimerOrBlockTask+0x50>
 8019320:	2301      	movs	r3, #1
 8019322:	e000      	b.n	8019326 <prvProcessTimerOrBlockTask+0x52>
 8019324:	2300      	movs	r3, #0
 8019326:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019328:	4b0f      	ldr	r3, [pc, #60]	; (8019368 <prvProcessTimerOrBlockTask+0x94>)
 801932a:	6818      	ldr	r0, [r3, #0]
 801932c:	687a      	ldr	r2, [r7, #4]
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	1ad3      	subs	r3, r2, r3
 8019332:	683a      	ldr	r2, [r7, #0]
 8019334:	4619      	mov	r1, r3
 8019336:	f7fe fedb 	bl	80180f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801933a:	f7ff f957 	bl	80185ec <xTaskResumeAll>
 801933e:	4603      	mov	r3, r0
 8019340:	2b00      	cmp	r3, #0
 8019342:	d10a      	bne.n	801935a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019344:	4b09      	ldr	r3, [pc, #36]	; (801936c <prvProcessTimerOrBlockTask+0x98>)
 8019346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801934a:	601a      	str	r2, [r3, #0]
 801934c:	f3bf 8f4f 	dsb	sy
 8019350:	f3bf 8f6f 	isb	sy
}
 8019354:	e001      	b.n	801935a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019356:	f7ff f949 	bl	80185ec <xTaskResumeAll>
}
 801935a:	bf00      	nop
 801935c:	3710      	adds	r7, #16
 801935e:	46bd      	mov	sp, r7
 8019360:	bd80      	pop	{r7, pc}
 8019362:	bf00      	nop
 8019364:	24002c84 	.word	0x24002c84
 8019368:	24002c88 	.word	0x24002c88
 801936c:	e000ed04 	.word	0xe000ed04

08019370 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019370:	b480      	push	{r7}
 8019372:	b085      	sub	sp, #20
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019378:	4b0e      	ldr	r3, [pc, #56]	; (80193b4 <prvGetNextExpireTime+0x44>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d101      	bne.n	8019386 <prvGetNextExpireTime+0x16>
 8019382:	2201      	movs	r2, #1
 8019384:	e000      	b.n	8019388 <prvGetNextExpireTime+0x18>
 8019386:	2200      	movs	r2, #0
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d105      	bne.n	80193a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019394:	4b07      	ldr	r3, [pc, #28]	; (80193b4 <prvGetNextExpireTime+0x44>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	68db      	ldr	r3, [r3, #12]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	60fb      	str	r3, [r7, #12]
 801939e:	e001      	b.n	80193a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80193a0:	2300      	movs	r3, #0
 80193a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80193a4:	68fb      	ldr	r3, [r7, #12]
}
 80193a6:	4618      	mov	r0, r3
 80193a8:	3714      	adds	r7, #20
 80193aa:	46bd      	mov	sp, r7
 80193ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b0:	4770      	bx	lr
 80193b2:	bf00      	nop
 80193b4:	24002c80 	.word	0x24002c80

080193b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b084      	sub	sp, #16
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80193c0:	f7ff f9b2 	bl	8018728 <xTaskGetTickCount>
 80193c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80193c6:	4b0b      	ldr	r3, [pc, #44]	; (80193f4 <prvSampleTimeNow+0x3c>)
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	68fa      	ldr	r2, [r7, #12]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d205      	bcs.n	80193dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80193d0:	f000 f936 	bl	8019640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	2201      	movs	r2, #1
 80193d8:	601a      	str	r2, [r3, #0]
 80193da:	e002      	b.n	80193e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	2200      	movs	r2, #0
 80193e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80193e2:	4a04      	ldr	r2, [pc, #16]	; (80193f4 <prvSampleTimeNow+0x3c>)
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80193e8:	68fb      	ldr	r3, [r7, #12]
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	3710      	adds	r7, #16
 80193ee:	46bd      	mov	sp, r7
 80193f0:	bd80      	pop	{r7, pc}
 80193f2:	bf00      	nop
 80193f4:	24002c90 	.word	0x24002c90

080193f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b086      	sub	sp, #24
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	60f8      	str	r0, [r7, #12]
 8019400:	60b9      	str	r1, [r7, #8]
 8019402:	607a      	str	r2, [r7, #4]
 8019404:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019406:	2300      	movs	r3, #0
 8019408:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	68ba      	ldr	r2, [r7, #8]
 801940e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	68fa      	ldr	r2, [r7, #12]
 8019414:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019416:	68ba      	ldr	r2, [r7, #8]
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	429a      	cmp	r2, r3
 801941c:	d812      	bhi.n	8019444 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801941e:	687a      	ldr	r2, [r7, #4]
 8019420:	683b      	ldr	r3, [r7, #0]
 8019422:	1ad2      	subs	r2, r2, r3
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	699b      	ldr	r3, [r3, #24]
 8019428:	429a      	cmp	r2, r3
 801942a:	d302      	bcc.n	8019432 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801942c:	2301      	movs	r3, #1
 801942e:	617b      	str	r3, [r7, #20]
 8019430:	e01b      	b.n	801946a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019432:	4b10      	ldr	r3, [pc, #64]	; (8019474 <prvInsertTimerInActiveList+0x7c>)
 8019434:	681a      	ldr	r2, [r3, #0]
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	3304      	adds	r3, #4
 801943a:	4619      	mov	r1, r3
 801943c:	4610      	mov	r0, r2
 801943e:	f7fe f93c 	bl	80176ba <vListInsert>
 8019442:	e012      	b.n	801946a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019444:	687a      	ldr	r2, [r7, #4]
 8019446:	683b      	ldr	r3, [r7, #0]
 8019448:	429a      	cmp	r2, r3
 801944a:	d206      	bcs.n	801945a <prvInsertTimerInActiveList+0x62>
 801944c:	68ba      	ldr	r2, [r7, #8]
 801944e:	683b      	ldr	r3, [r7, #0]
 8019450:	429a      	cmp	r2, r3
 8019452:	d302      	bcc.n	801945a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019454:	2301      	movs	r3, #1
 8019456:	617b      	str	r3, [r7, #20]
 8019458:	e007      	b.n	801946a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801945a:	4b07      	ldr	r3, [pc, #28]	; (8019478 <prvInsertTimerInActiveList+0x80>)
 801945c:	681a      	ldr	r2, [r3, #0]
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	3304      	adds	r3, #4
 8019462:	4619      	mov	r1, r3
 8019464:	4610      	mov	r0, r2
 8019466:	f7fe f928 	bl	80176ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 801946a:	697b      	ldr	r3, [r7, #20]
}
 801946c:	4618      	mov	r0, r3
 801946e:	3718      	adds	r7, #24
 8019470:	46bd      	mov	sp, r7
 8019472:	bd80      	pop	{r7, pc}
 8019474:	24002c84 	.word	0x24002c84
 8019478:	24002c80 	.word	0x24002c80

0801947c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b08e      	sub	sp, #56	; 0x38
 8019480:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019482:	e0ca      	b.n	801961a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2b00      	cmp	r3, #0
 8019488:	da18      	bge.n	80194bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801948a:	1d3b      	adds	r3, r7, #4
 801948c:	3304      	adds	r3, #4
 801948e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019492:	2b00      	cmp	r3, #0
 8019494:	d10a      	bne.n	80194ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801949a:	f383 8811 	msr	BASEPRI, r3
 801949e:	f3bf 8f6f 	isb	sy
 80194a2:	f3bf 8f4f 	dsb	sy
 80194a6:	61fb      	str	r3, [r7, #28]
}
 80194a8:	bf00      	nop
 80194aa:	e7fe      	b.n	80194aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80194ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194b2:	6850      	ldr	r0, [r2, #4]
 80194b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194b6:	6892      	ldr	r2, [r2, #8]
 80194b8:	4611      	mov	r1, r2
 80194ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	f2c0 80aa 	blt.w	8019618 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80194c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ca:	695b      	ldr	r3, [r3, #20]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d004      	beq.n	80194da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d2:	3304      	adds	r3, #4
 80194d4:	4618      	mov	r0, r3
 80194d6:	f7fe f929 	bl	801772c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80194da:	463b      	mov	r3, r7
 80194dc:	4618      	mov	r0, r3
 80194de:	f7ff ff6b 	bl	80193b8 <prvSampleTimeNow>
 80194e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	2b09      	cmp	r3, #9
 80194e8:	f200 8097 	bhi.w	801961a <prvProcessReceivedCommands+0x19e>
 80194ec:	a201      	add	r2, pc, #4	; (adr r2, 80194f4 <prvProcessReceivedCommands+0x78>)
 80194ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194f2:	bf00      	nop
 80194f4:	0801951d 	.word	0x0801951d
 80194f8:	0801951d 	.word	0x0801951d
 80194fc:	0801951d 	.word	0x0801951d
 8019500:	08019591 	.word	0x08019591
 8019504:	080195a5 	.word	0x080195a5
 8019508:	080195ef 	.word	0x080195ef
 801950c:	0801951d 	.word	0x0801951d
 8019510:	0801951d 	.word	0x0801951d
 8019514:	08019591 	.word	0x08019591
 8019518:	080195a5 	.word	0x080195a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801951e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019522:	f043 0301 	orr.w	r3, r3, #1
 8019526:	b2da      	uxtb	r2, r3
 8019528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801952e:	68ba      	ldr	r2, [r7, #8]
 8019530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019532:	699b      	ldr	r3, [r3, #24]
 8019534:	18d1      	adds	r1, r2, r3
 8019536:	68bb      	ldr	r3, [r7, #8]
 8019538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801953a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801953c:	f7ff ff5c 	bl	80193f8 <prvInsertTimerInActiveList>
 8019540:	4603      	mov	r3, r0
 8019542:	2b00      	cmp	r3, #0
 8019544:	d069      	beq.n	801961a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019548:	6a1b      	ldr	r3, [r3, #32]
 801954a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801954c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019554:	f003 0304 	and.w	r3, r3, #4
 8019558:	2b00      	cmp	r3, #0
 801955a:	d05e      	beq.n	801961a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801955c:	68ba      	ldr	r2, [r7, #8]
 801955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019560:	699b      	ldr	r3, [r3, #24]
 8019562:	441a      	add	r2, r3
 8019564:	2300      	movs	r3, #0
 8019566:	9300      	str	r3, [sp, #0]
 8019568:	2300      	movs	r3, #0
 801956a:	2100      	movs	r1, #0
 801956c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801956e:	f7ff fe05 	bl	801917c <xTimerGenericCommand>
 8019572:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019574:	6a3b      	ldr	r3, [r7, #32]
 8019576:	2b00      	cmp	r3, #0
 8019578:	d14f      	bne.n	801961a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801957e:	f383 8811 	msr	BASEPRI, r3
 8019582:	f3bf 8f6f 	isb	sy
 8019586:	f3bf 8f4f 	dsb	sy
 801958a:	61bb      	str	r3, [r7, #24]
}
 801958c:	bf00      	nop
 801958e:	e7fe      	b.n	801958e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019596:	f023 0301 	bic.w	r3, r3, #1
 801959a:	b2da      	uxtb	r2, r3
 801959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80195a2:	e03a      	b.n	801961a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80195a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80195aa:	f043 0301 	orr.w	r3, r3, #1
 80195ae:	b2da      	uxtb	r2, r3
 80195b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80195b6:	68ba      	ldr	r2, [r7, #8]
 80195b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80195bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195be:	699b      	ldr	r3, [r3, #24]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d10a      	bne.n	80195da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80195c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195c8:	f383 8811 	msr	BASEPRI, r3
 80195cc:	f3bf 8f6f 	isb	sy
 80195d0:	f3bf 8f4f 	dsb	sy
 80195d4:	617b      	str	r3, [r7, #20]
}
 80195d6:	bf00      	nop
 80195d8:	e7fe      	b.n	80195d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80195da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195dc:	699a      	ldr	r2, [r3, #24]
 80195de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e0:	18d1      	adds	r1, r2, r3
 80195e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195e8:	f7ff ff06 	bl	80193f8 <prvInsertTimerInActiveList>
					break;
 80195ec:	e015      	b.n	801961a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80195ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80195f4:	f003 0302 	and.w	r3, r3, #2
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d103      	bne.n	8019604 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80195fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195fe:	f000 fbff 	bl	8019e00 <vPortFree>
 8019602:	e00a      	b.n	801961a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801960a:	f023 0301 	bic.w	r3, r3, #1
 801960e:	b2da      	uxtb	r2, r3
 8019610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019616:	e000      	b.n	801961a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801961a:	4b08      	ldr	r3, [pc, #32]	; (801963c <prvProcessReceivedCommands+0x1c0>)
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	1d39      	adds	r1, r7, #4
 8019620:	2200      	movs	r2, #0
 8019622:	4618      	mov	r0, r3
 8019624:	f7fe fb4a 	bl	8017cbc <xQueueReceive>
 8019628:	4603      	mov	r3, r0
 801962a:	2b00      	cmp	r3, #0
 801962c:	f47f af2a 	bne.w	8019484 <prvProcessReceivedCommands+0x8>
	}
}
 8019630:	bf00      	nop
 8019632:	bf00      	nop
 8019634:	3730      	adds	r7, #48	; 0x30
 8019636:	46bd      	mov	sp, r7
 8019638:	bd80      	pop	{r7, pc}
 801963a:	bf00      	nop
 801963c:	24002c88 	.word	0x24002c88

08019640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b088      	sub	sp, #32
 8019644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019646:	e048      	b.n	80196da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019648:	4b2d      	ldr	r3, [pc, #180]	; (8019700 <prvSwitchTimerLists+0xc0>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	68db      	ldr	r3, [r3, #12]
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019652:	4b2b      	ldr	r3, [pc, #172]	; (8019700 <prvSwitchTimerLists+0xc0>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	68db      	ldr	r3, [r3, #12]
 8019658:	68db      	ldr	r3, [r3, #12]
 801965a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	3304      	adds	r3, #4
 8019660:	4618      	mov	r0, r3
 8019662:	f7fe f863 	bl	801772c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	6a1b      	ldr	r3, [r3, #32]
 801966a:	68f8      	ldr	r0, [r7, #12]
 801966c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019674:	f003 0304 	and.w	r3, r3, #4
 8019678:	2b00      	cmp	r3, #0
 801967a:	d02e      	beq.n	80196da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	699b      	ldr	r3, [r3, #24]
 8019680:	693a      	ldr	r2, [r7, #16]
 8019682:	4413      	add	r3, r2
 8019684:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019686:	68ba      	ldr	r2, [r7, #8]
 8019688:	693b      	ldr	r3, [r7, #16]
 801968a:	429a      	cmp	r2, r3
 801968c:	d90e      	bls.n	80196ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	68ba      	ldr	r2, [r7, #8]
 8019692:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	68fa      	ldr	r2, [r7, #12]
 8019698:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801969a:	4b19      	ldr	r3, [pc, #100]	; (8019700 <prvSwitchTimerLists+0xc0>)
 801969c:	681a      	ldr	r2, [r3, #0]
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	3304      	adds	r3, #4
 80196a2:	4619      	mov	r1, r3
 80196a4:	4610      	mov	r0, r2
 80196a6:	f7fe f808 	bl	80176ba <vListInsert>
 80196aa:	e016      	b.n	80196da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80196ac:	2300      	movs	r3, #0
 80196ae:	9300      	str	r3, [sp, #0]
 80196b0:	2300      	movs	r3, #0
 80196b2:	693a      	ldr	r2, [r7, #16]
 80196b4:	2100      	movs	r1, #0
 80196b6:	68f8      	ldr	r0, [r7, #12]
 80196b8:	f7ff fd60 	bl	801917c <xTimerGenericCommand>
 80196bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d10a      	bne.n	80196da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80196c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196c8:	f383 8811 	msr	BASEPRI, r3
 80196cc:	f3bf 8f6f 	isb	sy
 80196d0:	f3bf 8f4f 	dsb	sy
 80196d4:	603b      	str	r3, [r7, #0]
}
 80196d6:	bf00      	nop
 80196d8:	e7fe      	b.n	80196d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80196da:	4b09      	ldr	r3, [pc, #36]	; (8019700 <prvSwitchTimerLists+0xc0>)
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d1b1      	bne.n	8019648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80196e4:	4b06      	ldr	r3, [pc, #24]	; (8019700 <prvSwitchTimerLists+0xc0>)
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80196ea:	4b06      	ldr	r3, [pc, #24]	; (8019704 <prvSwitchTimerLists+0xc4>)
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	4a04      	ldr	r2, [pc, #16]	; (8019700 <prvSwitchTimerLists+0xc0>)
 80196f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80196f2:	4a04      	ldr	r2, [pc, #16]	; (8019704 <prvSwitchTimerLists+0xc4>)
 80196f4:	697b      	ldr	r3, [r7, #20]
 80196f6:	6013      	str	r3, [r2, #0]
}
 80196f8:	bf00      	nop
 80196fa:	3718      	adds	r7, #24
 80196fc:	46bd      	mov	sp, r7
 80196fe:	bd80      	pop	{r7, pc}
 8019700:	24002c80 	.word	0x24002c80
 8019704:	24002c84 	.word	0x24002c84

08019708 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019708:	b580      	push	{r7, lr}
 801970a:	b082      	sub	sp, #8
 801970c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801970e:	f000 f989 	bl	8019a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019712:	4b15      	ldr	r3, [pc, #84]	; (8019768 <prvCheckForValidListAndQueue+0x60>)
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d120      	bne.n	801975c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801971a:	4814      	ldr	r0, [pc, #80]	; (801976c <prvCheckForValidListAndQueue+0x64>)
 801971c:	f7fd ff7c 	bl	8017618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019720:	4813      	ldr	r0, [pc, #76]	; (8019770 <prvCheckForValidListAndQueue+0x68>)
 8019722:	f7fd ff79 	bl	8017618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019726:	4b13      	ldr	r3, [pc, #76]	; (8019774 <prvCheckForValidListAndQueue+0x6c>)
 8019728:	4a10      	ldr	r2, [pc, #64]	; (801976c <prvCheckForValidListAndQueue+0x64>)
 801972a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801972c:	4b12      	ldr	r3, [pc, #72]	; (8019778 <prvCheckForValidListAndQueue+0x70>)
 801972e:	4a10      	ldr	r2, [pc, #64]	; (8019770 <prvCheckForValidListAndQueue+0x68>)
 8019730:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8019732:	2300      	movs	r3, #0
 8019734:	9300      	str	r3, [sp, #0]
 8019736:	4b11      	ldr	r3, [pc, #68]	; (801977c <prvCheckForValidListAndQueue+0x74>)
 8019738:	4a11      	ldr	r2, [pc, #68]	; (8019780 <prvCheckForValidListAndQueue+0x78>)
 801973a:	2110      	movs	r1, #16
 801973c:	200a      	movs	r0, #10
 801973e:	f7fe f887 	bl	8017850 <xQueueGenericCreateStatic>
 8019742:	4603      	mov	r3, r0
 8019744:	4a08      	ldr	r2, [pc, #32]	; (8019768 <prvCheckForValidListAndQueue+0x60>)
 8019746:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019748:	4b07      	ldr	r3, [pc, #28]	; (8019768 <prvCheckForValidListAndQueue+0x60>)
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d005      	beq.n	801975c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019750:	4b05      	ldr	r3, [pc, #20]	; (8019768 <prvCheckForValidListAndQueue+0x60>)
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	490b      	ldr	r1, [pc, #44]	; (8019784 <prvCheckForValidListAndQueue+0x7c>)
 8019756:	4618      	mov	r0, r3
 8019758:	f7fe fca0 	bl	801809c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801975c:	f000 f992 	bl	8019a84 <vPortExitCritical>
}
 8019760:	bf00      	nop
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}
 8019766:	bf00      	nop
 8019768:	24002c88 	.word	0x24002c88
 801976c:	24002c58 	.word	0x24002c58
 8019770:	24002c6c 	.word	0x24002c6c
 8019774:	24002c80 	.word	0x24002c80
 8019778:	24002c84 	.word	0x24002c84
 801977c:	24002d34 	.word	0x24002d34
 8019780:	24002c94 	.word	0x24002c94
 8019784:	0801ad30 	.word	0x0801ad30

08019788 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019788:	b580      	push	{r7, lr}
 801978a:	b08a      	sub	sp, #40	; 0x28
 801978c:	af00      	add	r7, sp, #0
 801978e:	60f8      	str	r0, [r7, #12]
 8019790:	60b9      	str	r1, [r7, #8]
 8019792:	607a      	str	r2, [r7, #4]
 8019794:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019796:	f06f 0301 	mvn.w	r3, #1
 801979a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80197a0:	68bb      	ldr	r3, [r7, #8]
 80197a2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80197a8:	4b06      	ldr	r3, [pc, #24]	; (80197c4 <xTimerPendFunctionCallFromISR+0x3c>)
 80197aa:	6818      	ldr	r0, [r3, #0]
 80197ac:	f107 0114 	add.w	r1, r7, #20
 80197b0:	2300      	movs	r3, #0
 80197b2:	683a      	ldr	r2, [r7, #0]
 80197b4:	f7fe f9e6 	bl	8017b84 <xQueueGenericSendFromISR>
 80197b8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80197ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80197bc:	4618      	mov	r0, r3
 80197be:	3728      	adds	r7, #40	; 0x28
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}
 80197c4:	24002c88 	.word	0x24002c88

080197c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80197c8:	b480      	push	{r7}
 80197ca:	b085      	sub	sp, #20
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	3b04      	subs	r3, #4
 80197d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80197e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	3b04      	subs	r3, #4
 80197e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	f023 0201 	bic.w	r2, r3, #1
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	3b04      	subs	r3, #4
 80197f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80197f8:	4a0c      	ldr	r2, [pc, #48]	; (801982c <pxPortInitialiseStack+0x64>)
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	3b14      	subs	r3, #20
 8019802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019804:	687a      	ldr	r2, [r7, #4]
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	3b04      	subs	r3, #4
 801980e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	f06f 0202 	mvn.w	r2, #2
 8019816:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	3b20      	subs	r3, #32
 801981c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801981e:	68fb      	ldr	r3, [r7, #12]
}
 8019820:	4618      	mov	r0, r3
 8019822:	3714      	adds	r7, #20
 8019824:	46bd      	mov	sp, r7
 8019826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982a:	4770      	bx	lr
 801982c:	08019831 	.word	0x08019831

08019830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019830:	b480      	push	{r7}
 8019832:	b085      	sub	sp, #20
 8019834:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019836:	2300      	movs	r3, #0
 8019838:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801983a:	4b12      	ldr	r3, [pc, #72]	; (8019884 <prvTaskExitError+0x54>)
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019842:	d00a      	beq.n	801985a <prvTaskExitError+0x2a>
	__asm volatile
 8019844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019848:	f383 8811 	msr	BASEPRI, r3
 801984c:	f3bf 8f6f 	isb	sy
 8019850:	f3bf 8f4f 	dsb	sy
 8019854:	60fb      	str	r3, [r7, #12]
}
 8019856:	bf00      	nop
 8019858:	e7fe      	b.n	8019858 <prvTaskExitError+0x28>
	__asm volatile
 801985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801985e:	f383 8811 	msr	BASEPRI, r3
 8019862:	f3bf 8f6f 	isb	sy
 8019866:	f3bf 8f4f 	dsb	sy
 801986a:	60bb      	str	r3, [r7, #8]
}
 801986c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801986e:	bf00      	nop
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d0fc      	beq.n	8019870 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019876:	bf00      	nop
 8019878:	bf00      	nop
 801987a:	3714      	adds	r7, #20
 801987c:	46bd      	mov	sp, r7
 801987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019882:	4770      	bx	lr
 8019884:	240000cc 	.word	0x240000cc
	...

08019890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019890:	4b07      	ldr	r3, [pc, #28]	; (80198b0 <pxCurrentTCBConst2>)
 8019892:	6819      	ldr	r1, [r3, #0]
 8019894:	6808      	ldr	r0, [r1, #0]
 8019896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801989a:	f380 8809 	msr	PSP, r0
 801989e:	f3bf 8f6f 	isb	sy
 80198a2:	f04f 0000 	mov.w	r0, #0
 80198a6:	f380 8811 	msr	BASEPRI, r0
 80198aa:	4770      	bx	lr
 80198ac:	f3af 8000 	nop.w

080198b0 <pxCurrentTCBConst2>:
 80198b0:	24002758 	.word	0x24002758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80198b4:	bf00      	nop
 80198b6:	bf00      	nop

080198b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80198b8:	4808      	ldr	r0, [pc, #32]	; (80198dc <prvPortStartFirstTask+0x24>)
 80198ba:	6800      	ldr	r0, [r0, #0]
 80198bc:	6800      	ldr	r0, [r0, #0]
 80198be:	f380 8808 	msr	MSP, r0
 80198c2:	f04f 0000 	mov.w	r0, #0
 80198c6:	f380 8814 	msr	CONTROL, r0
 80198ca:	b662      	cpsie	i
 80198cc:	b661      	cpsie	f
 80198ce:	f3bf 8f4f 	dsb	sy
 80198d2:	f3bf 8f6f 	isb	sy
 80198d6:	df00      	svc	0
 80198d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80198da:	bf00      	nop
 80198dc:	e000ed08 	.word	0xe000ed08

080198e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b086      	sub	sp, #24
 80198e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80198e6:	4b46      	ldr	r3, [pc, #280]	; (8019a00 <xPortStartScheduler+0x120>)
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	4a46      	ldr	r2, [pc, #280]	; (8019a04 <xPortStartScheduler+0x124>)
 80198ec:	4293      	cmp	r3, r2
 80198ee:	d10a      	bne.n	8019906 <xPortStartScheduler+0x26>
	__asm volatile
 80198f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198f4:	f383 8811 	msr	BASEPRI, r3
 80198f8:	f3bf 8f6f 	isb	sy
 80198fc:	f3bf 8f4f 	dsb	sy
 8019900:	613b      	str	r3, [r7, #16]
}
 8019902:	bf00      	nop
 8019904:	e7fe      	b.n	8019904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019906:	4b3e      	ldr	r3, [pc, #248]	; (8019a00 <xPortStartScheduler+0x120>)
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	4a3f      	ldr	r2, [pc, #252]	; (8019a08 <xPortStartScheduler+0x128>)
 801990c:	4293      	cmp	r3, r2
 801990e:	d10a      	bne.n	8019926 <xPortStartScheduler+0x46>
	__asm volatile
 8019910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019914:	f383 8811 	msr	BASEPRI, r3
 8019918:	f3bf 8f6f 	isb	sy
 801991c:	f3bf 8f4f 	dsb	sy
 8019920:	60fb      	str	r3, [r7, #12]
}
 8019922:	bf00      	nop
 8019924:	e7fe      	b.n	8019924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019926:	4b39      	ldr	r3, [pc, #228]	; (8019a0c <xPortStartScheduler+0x12c>)
 8019928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801992a:	697b      	ldr	r3, [r7, #20]
 801992c:	781b      	ldrb	r3, [r3, #0]
 801992e:	b2db      	uxtb	r3, r3
 8019930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019932:	697b      	ldr	r3, [r7, #20]
 8019934:	22ff      	movs	r2, #255	; 0xff
 8019936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019938:	697b      	ldr	r3, [r7, #20]
 801993a:	781b      	ldrb	r3, [r3, #0]
 801993c:	b2db      	uxtb	r3, r3
 801993e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019940:	78fb      	ldrb	r3, [r7, #3]
 8019942:	b2db      	uxtb	r3, r3
 8019944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019948:	b2da      	uxtb	r2, r3
 801994a:	4b31      	ldr	r3, [pc, #196]	; (8019a10 <xPortStartScheduler+0x130>)
 801994c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801994e:	4b31      	ldr	r3, [pc, #196]	; (8019a14 <xPortStartScheduler+0x134>)
 8019950:	2207      	movs	r2, #7
 8019952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019954:	e009      	b.n	801996a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019956:	4b2f      	ldr	r3, [pc, #188]	; (8019a14 <xPortStartScheduler+0x134>)
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	3b01      	subs	r3, #1
 801995c:	4a2d      	ldr	r2, [pc, #180]	; (8019a14 <xPortStartScheduler+0x134>)
 801995e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019960:	78fb      	ldrb	r3, [r7, #3]
 8019962:	b2db      	uxtb	r3, r3
 8019964:	005b      	lsls	r3, r3, #1
 8019966:	b2db      	uxtb	r3, r3
 8019968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801996a:	78fb      	ldrb	r3, [r7, #3]
 801996c:	b2db      	uxtb	r3, r3
 801996e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019972:	2b80      	cmp	r3, #128	; 0x80
 8019974:	d0ef      	beq.n	8019956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019976:	4b27      	ldr	r3, [pc, #156]	; (8019a14 <xPortStartScheduler+0x134>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	f1c3 0307 	rsb	r3, r3, #7
 801997e:	2b04      	cmp	r3, #4
 8019980:	d00a      	beq.n	8019998 <xPortStartScheduler+0xb8>
	__asm volatile
 8019982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019986:	f383 8811 	msr	BASEPRI, r3
 801998a:	f3bf 8f6f 	isb	sy
 801998e:	f3bf 8f4f 	dsb	sy
 8019992:	60bb      	str	r3, [r7, #8]
}
 8019994:	bf00      	nop
 8019996:	e7fe      	b.n	8019996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019998:	4b1e      	ldr	r3, [pc, #120]	; (8019a14 <xPortStartScheduler+0x134>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	021b      	lsls	r3, r3, #8
 801999e:	4a1d      	ldr	r2, [pc, #116]	; (8019a14 <xPortStartScheduler+0x134>)
 80199a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80199a2:	4b1c      	ldr	r3, [pc, #112]	; (8019a14 <xPortStartScheduler+0x134>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80199aa:	4a1a      	ldr	r2, [pc, #104]	; (8019a14 <xPortStartScheduler+0x134>)
 80199ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	b2da      	uxtb	r2, r3
 80199b2:	697b      	ldr	r3, [r7, #20]
 80199b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80199b6:	4b18      	ldr	r3, [pc, #96]	; (8019a18 <xPortStartScheduler+0x138>)
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	4a17      	ldr	r2, [pc, #92]	; (8019a18 <xPortStartScheduler+0x138>)
 80199bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80199c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80199c2:	4b15      	ldr	r3, [pc, #84]	; (8019a18 <xPortStartScheduler+0x138>)
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	4a14      	ldr	r2, [pc, #80]	; (8019a18 <xPortStartScheduler+0x138>)
 80199c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80199cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80199ce:	f000 f8dd 	bl	8019b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80199d2:	4b12      	ldr	r3, [pc, #72]	; (8019a1c <xPortStartScheduler+0x13c>)
 80199d4:	2200      	movs	r2, #0
 80199d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80199d8:	f000 f8fc 	bl	8019bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80199dc:	4b10      	ldr	r3, [pc, #64]	; (8019a20 <xPortStartScheduler+0x140>)
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	4a0f      	ldr	r2, [pc, #60]	; (8019a20 <xPortStartScheduler+0x140>)
 80199e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80199e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80199e8:	f7ff ff66 	bl	80198b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80199ec:	f7fe ff6e 	bl	80188cc <vTaskSwitchContext>
	prvTaskExitError();
 80199f0:	f7ff ff1e 	bl	8019830 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80199f4:	2300      	movs	r3, #0
}
 80199f6:	4618      	mov	r0, r3
 80199f8:	3718      	adds	r7, #24
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}
 80199fe:	bf00      	nop
 8019a00:	e000ed00 	.word	0xe000ed00
 8019a04:	410fc271 	.word	0x410fc271
 8019a08:	410fc270 	.word	0x410fc270
 8019a0c:	e000e400 	.word	0xe000e400
 8019a10:	24002d84 	.word	0x24002d84
 8019a14:	24002d88 	.word	0x24002d88
 8019a18:	e000ed20 	.word	0xe000ed20
 8019a1c:	240000cc 	.word	0x240000cc
 8019a20:	e000ef34 	.word	0xe000ef34

08019a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019a24:	b480      	push	{r7}
 8019a26:	b083      	sub	sp, #12
 8019a28:	af00      	add	r7, sp, #0
	__asm volatile
 8019a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a2e:	f383 8811 	msr	BASEPRI, r3
 8019a32:	f3bf 8f6f 	isb	sy
 8019a36:	f3bf 8f4f 	dsb	sy
 8019a3a:	607b      	str	r3, [r7, #4]
}
 8019a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019a3e:	4b0f      	ldr	r3, [pc, #60]	; (8019a7c <vPortEnterCritical+0x58>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	3301      	adds	r3, #1
 8019a44:	4a0d      	ldr	r2, [pc, #52]	; (8019a7c <vPortEnterCritical+0x58>)
 8019a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019a48:	4b0c      	ldr	r3, [pc, #48]	; (8019a7c <vPortEnterCritical+0x58>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	2b01      	cmp	r3, #1
 8019a4e:	d10f      	bne.n	8019a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019a50:	4b0b      	ldr	r3, [pc, #44]	; (8019a80 <vPortEnterCritical+0x5c>)
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	b2db      	uxtb	r3, r3
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d00a      	beq.n	8019a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8019a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a5e:	f383 8811 	msr	BASEPRI, r3
 8019a62:	f3bf 8f6f 	isb	sy
 8019a66:	f3bf 8f4f 	dsb	sy
 8019a6a:	603b      	str	r3, [r7, #0]
}
 8019a6c:	bf00      	nop
 8019a6e:	e7fe      	b.n	8019a6e <vPortEnterCritical+0x4a>
	}
}
 8019a70:	bf00      	nop
 8019a72:	370c      	adds	r7, #12
 8019a74:	46bd      	mov	sp, r7
 8019a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a7a:	4770      	bx	lr
 8019a7c:	240000cc 	.word	0x240000cc
 8019a80:	e000ed04 	.word	0xe000ed04

08019a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019a84:	b480      	push	{r7}
 8019a86:	b083      	sub	sp, #12
 8019a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019a8a:	4b12      	ldr	r3, [pc, #72]	; (8019ad4 <vPortExitCritical+0x50>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d10a      	bne.n	8019aa8 <vPortExitCritical+0x24>
	__asm volatile
 8019a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a96:	f383 8811 	msr	BASEPRI, r3
 8019a9a:	f3bf 8f6f 	isb	sy
 8019a9e:	f3bf 8f4f 	dsb	sy
 8019aa2:	607b      	str	r3, [r7, #4]
}
 8019aa4:	bf00      	nop
 8019aa6:	e7fe      	b.n	8019aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019aa8:	4b0a      	ldr	r3, [pc, #40]	; (8019ad4 <vPortExitCritical+0x50>)
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	3b01      	subs	r3, #1
 8019aae:	4a09      	ldr	r2, [pc, #36]	; (8019ad4 <vPortExitCritical+0x50>)
 8019ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019ab2:	4b08      	ldr	r3, [pc, #32]	; (8019ad4 <vPortExitCritical+0x50>)
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d105      	bne.n	8019ac6 <vPortExitCritical+0x42>
 8019aba:	2300      	movs	r3, #0
 8019abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	f383 8811 	msr	BASEPRI, r3
}
 8019ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019ac6:	bf00      	nop
 8019ac8:	370c      	adds	r7, #12
 8019aca:	46bd      	mov	sp, r7
 8019acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad0:	4770      	bx	lr
 8019ad2:	bf00      	nop
 8019ad4:	240000cc 	.word	0x240000cc
	...

08019ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019ae0:	f3ef 8009 	mrs	r0, PSP
 8019ae4:	f3bf 8f6f 	isb	sy
 8019ae8:	4b15      	ldr	r3, [pc, #84]	; (8019b40 <pxCurrentTCBConst>)
 8019aea:	681a      	ldr	r2, [r3, #0]
 8019aec:	f01e 0f10 	tst.w	lr, #16
 8019af0:	bf08      	it	eq
 8019af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afa:	6010      	str	r0, [r2, #0]
 8019afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019b04:	f380 8811 	msr	BASEPRI, r0
 8019b08:	f3bf 8f4f 	dsb	sy
 8019b0c:	f3bf 8f6f 	isb	sy
 8019b10:	f7fe fedc 	bl	80188cc <vTaskSwitchContext>
 8019b14:	f04f 0000 	mov.w	r0, #0
 8019b18:	f380 8811 	msr	BASEPRI, r0
 8019b1c:	bc09      	pop	{r0, r3}
 8019b1e:	6819      	ldr	r1, [r3, #0]
 8019b20:	6808      	ldr	r0, [r1, #0]
 8019b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b26:	f01e 0f10 	tst.w	lr, #16
 8019b2a:	bf08      	it	eq
 8019b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019b30:	f380 8809 	msr	PSP, r0
 8019b34:	f3bf 8f6f 	isb	sy
 8019b38:	4770      	bx	lr
 8019b3a:	bf00      	nop
 8019b3c:	f3af 8000 	nop.w

08019b40 <pxCurrentTCBConst>:
 8019b40:	24002758 	.word	0x24002758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019b44:	bf00      	nop
 8019b46:	bf00      	nop

08019b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b082      	sub	sp, #8
 8019b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8019b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b52:	f383 8811 	msr	BASEPRI, r3
 8019b56:	f3bf 8f6f 	isb	sy
 8019b5a:	f3bf 8f4f 	dsb	sy
 8019b5e:	607b      	str	r3, [r7, #4]
}
 8019b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019b62:	f7fe fdf1 	bl	8018748 <xTaskIncrementTick>
 8019b66:	4603      	mov	r3, r0
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d003      	beq.n	8019b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019b6c:	4b06      	ldr	r3, [pc, #24]	; (8019b88 <xPortSysTickHandler+0x40>)
 8019b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b72:	601a      	str	r2, [r3, #0]
 8019b74:	2300      	movs	r3, #0
 8019b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019b78:	683b      	ldr	r3, [r7, #0]
 8019b7a:	f383 8811 	msr	BASEPRI, r3
}
 8019b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019b80:	bf00      	nop
 8019b82:	3708      	adds	r7, #8
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}
 8019b88:	e000ed04 	.word	0xe000ed04

08019b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019b8c:	b480      	push	{r7}
 8019b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019b90:	4b0b      	ldr	r3, [pc, #44]	; (8019bc0 <vPortSetupTimerInterrupt+0x34>)
 8019b92:	2200      	movs	r2, #0
 8019b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019b96:	4b0b      	ldr	r3, [pc, #44]	; (8019bc4 <vPortSetupTimerInterrupt+0x38>)
 8019b98:	2200      	movs	r2, #0
 8019b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019b9c:	4b0a      	ldr	r3, [pc, #40]	; (8019bc8 <vPortSetupTimerInterrupt+0x3c>)
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	4a0a      	ldr	r2, [pc, #40]	; (8019bcc <vPortSetupTimerInterrupt+0x40>)
 8019ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8019ba6:	099b      	lsrs	r3, r3, #6
 8019ba8:	4a09      	ldr	r2, [pc, #36]	; (8019bd0 <vPortSetupTimerInterrupt+0x44>)
 8019baa:	3b01      	subs	r3, #1
 8019bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019bae:	4b04      	ldr	r3, [pc, #16]	; (8019bc0 <vPortSetupTimerInterrupt+0x34>)
 8019bb0:	2207      	movs	r2, #7
 8019bb2:	601a      	str	r2, [r3, #0]
}
 8019bb4:	bf00      	nop
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbc:	4770      	bx	lr
 8019bbe:	bf00      	nop
 8019bc0:	e000e010 	.word	0xe000e010
 8019bc4:	e000e018 	.word	0xe000e018
 8019bc8:	240000bc 	.word	0x240000bc
 8019bcc:	10624dd3 	.word	0x10624dd3
 8019bd0:	e000e014 	.word	0xe000e014

08019bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019be4 <vPortEnableVFP+0x10>
 8019bd8:	6801      	ldr	r1, [r0, #0]
 8019bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019bde:	6001      	str	r1, [r0, #0]
 8019be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019be2:	bf00      	nop
 8019be4:	e000ed88 	.word	0xe000ed88

08019be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019be8:	b480      	push	{r7}
 8019bea:	b085      	sub	sp, #20
 8019bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019bee:	f3ef 8305 	mrs	r3, IPSR
 8019bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	2b0f      	cmp	r3, #15
 8019bf8:	d914      	bls.n	8019c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019bfa:	4a17      	ldr	r2, [pc, #92]	; (8019c58 <vPortValidateInterruptPriority+0x70>)
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	4413      	add	r3, r2
 8019c00:	781b      	ldrb	r3, [r3, #0]
 8019c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019c04:	4b15      	ldr	r3, [pc, #84]	; (8019c5c <vPortValidateInterruptPriority+0x74>)
 8019c06:	781b      	ldrb	r3, [r3, #0]
 8019c08:	7afa      	ldrb	r2, [r7, #11]
 8019c0a:	429a      	cmp	r2, r3
 8019c0c:	d20a      	bcs.n	8019c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c12:	f383 8811 	msr	BASEPRI, r3
 8019c16:	f3bf 8f6f 	isb	sy
 8019c1a:	f3bf 8f4f 	dsb	sy
 8019c1e:	607b      	str	r3, [r7, #4]
}
 8019c20:	bf00      	nop
 8019c22:	e7fe      	b.n	8019c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019c24:	4b0e      	ldr	r3, [pc, #56]	; (8019c60 <vPortValidateInterruptPriority+0x78>)
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019c2c:	4b0d      	ldr	r3, [pc, #52]	; (8019c64 <vPortValidateInterruptPriority+0x7c>)
 8019c2e:	681b      	ldr	r3, [r3, #0]
 8019c30:	429a      	cmp	r2, r3
 8019c32:	d90a      	bls.n	8019c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c38:	f383 8811 	msr	BASEPRI, r3
 8019c3c:	f3bf 8f6f 	isb	sy
 8019c40:	f3bf 8f4f 	dsb	sy
 8019c44:	603b      	str	r3, [r7, #0]
}
 8019c46:	bf00      	nop
 8019c48:	e7fe      	b.n	8019c48 <vPortValidateInterruptPriority+0x60>
	}
 8019c4a:	bf00      	nop
 8019c4c:	3714      	adds	r7, #20
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c54:	4770      	bx	lr
 8019c56:	bf00      	nop
 8019c58:	e000e3f0 	.word	0xe000e3f0
 8019c5c:	24002d84 	.word	0x24002d84
 8019c60:	e000ed0c 	.word	0xe000ed0c
 8019c64:	24002d88 	.word	0x24002d88

08019c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b08a      	sub	sp, #40	; 0x28
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019c70:	2300      	movs	r3, #0
 8019c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019c74:	f7fe fcac 	bl	80185d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019c78:	4b5b      	ldr	r3, [pc, #364]	; (8019de8 <pvPortMalloc+0x180>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d101      	bne.n	8019c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019c80:	f000 f920 	bl	8019ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019c84:	4b59      	ldr	r3, [pc, #356]	; (8019dec <pvPortMalloc+0x184>)
 8019c86:	681a      	ldr	r2, [r3, #0]
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	4013      	ands	r3, r2
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	f040 8093 	bne.w	8019db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d01d      	beq.n	8019cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019c98:	2208      	movs	r2, #8
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	4413      	add	r3, r2
 8019c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	f003 0307 	and.w	r3, r3, #7
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d014      	beq.n	8019cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	f023 0307 	bic.w	r3, r3, #7
 8019cb0:	3308      	adds	r3, #8
 8019cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	f003 0307 	and.w	r3, r3, #7
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d00a      	beq.n	8019cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8019cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cc2:	f383 8811 	msr	BASEPRI, r3
 8019cc6:	f3bf 8f6f 	isb	sy
 8019cca:	f3bf 8f4f 	dsb	sy
 8019cce:	617b      	str	r3, [r7, #20]
}
 8019cd0:	bf00      	nop
 8019cd2:	e7fe      	b.n	8019cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d06e      	beq.n	8019db8 <pvPortMalloc+0x150>
 8019cda:	4b45      	ldr	r3, [pc, #276]	; (8019df0 <pvPortMalloc+0x188>)
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	687a      	ldr	r2, [r7, #4]
 8019ce0:	429a      	cmp	r2, r3
 8019ce2:	d869      	bhi.n	8019db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019ce4:	4b43      	ldr	r3, [pc, #268]	; (8019df4 <pvPortMalloc+0x18c>)
 8019ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019ce8:	4b42      	ldr	r3, [pc, #264]	; (8019df4 <pvPortMalloc+0x18c>)
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019cee:	e004      	b.n	8019cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	429a      	cmp	r2, r3
 8019d02:	d903      	bls.n	8019d0c <pvPortMalloc+0xa4>
 8019d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d1f1      	bne.n	8019cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019d0c:	4b36      	ldr	r3, [pc, #216]	; (8019de8 <pvPortMalloc+0x180>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d12:	429a      	cmp	r2, r3
 8019d14:	d050      	beq.n	8019db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019d16:	6a3b      	ldr	r3, [r7, #32]
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	2208      	movs	r2, #8
 8019d1c:	4413      	add	r3, r2
 8019d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d22:	681a      	ldr	r2, [r3, #0]
 8019d24:	6a3b      	ldr	r3, [r7, #32]
 8019d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2a:	685a      	ldr	r2, [r3, #4]
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	1ad2      	subs	r2, r2, r3
 8019d30:	2308      	movs	r3, #8
 8019d32:	005b      	lsls	r3, r3, #1
 8019d34:	429a      	cmp	r2, r3
 8019d36:	d91f      	bls.n	8019d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	4413      	add	r3, r2
 8019d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019d40:	69bb      	ldr	r3, [r7, #24]
 8019d42:	f003 0307 	and.w	r3, r3, #7
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d00a      	beq.n	8019d60 <pvPortMalloc+0xf8>
	__asm volatile
 8019d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d4e:	f383 8811 	msr	BASEPRI, r3
 8019d52:	f3bf 8f6f 	isb	sy
 8019d56:	f3bf 8f4f 	dsb	sy
 8019d5a:	613b      	str	r3, [r7, #16]
}
 8019d5c:	bf00      	nop
 8019d5e:	e7fe      	b.n	8019d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d62:	685a      	ldr	r2, [r3, #4]
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	1ad2      	subs	r2, r2, r3
 8019d68:	69bb      	ldr	r3, [r7, #24]
 8019d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6e:	687a      	ldr	r2, [r7, #4]
 8019d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019d72:	69b8      	ldr	r0, [r7, #24]
 8019d74:	f000 f908 	bl	8019f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019d78:	4b1d      	ldr	r3, [pc, #116]	; (8019df0 <pvPortMalloc+0x188>)
 8019d7a:	681a      	ldr	r2, [r3, #0]
 8019d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d7e:	685b      	ldr	r3, [r3, #4]
 8019d80:	1ad3      	subs	r3, r2, r3
 8019d82:	4a1b      	ldr	r2, [pc, #108]	; (8019df0 <pvPortMalloc+0x188>)
 8019d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019d86:	4b1a      	ldr	r3, [pc, #104]	; (8019df0 <pvPortMalloc+0x188>)
 8019d88:	681a      	ldr	r2, [r3, #0]
 8019d8a:	4b1b      	ldr	r3, [pc, #108]	; (8019df8 <pvPortMalloc+0x190>)
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	429a      	cmp	r2, r3
 8019d90:	d203      	bcs.n	8019d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019d92:	4b17      	ldr	r3, [pc, #92]	; (8019df0 <pvPortMalloc+0x188>)
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	4a18      	ldr	r2, [pc, #96]	; (8019df8 <pvPortMalloc+0x190>)
 8019d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d9c:	685a      	ldr	r2, [r3, #4]
 8019d9e:	4b13      	ldr	r3, [pc, #76]	; (8019dec <pvPortMalloc+0x184>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	431a      	orrs	r2, r3
 8019da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019daa:	2200      	movs	r2, #0
 8019dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019dae:	4b13      	ldr	r3, [pc, #76]	; (8019dfc <pvPortMalloc+0x194>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	3301      	adds	r3, #1
 8019db4:	4a11      	ldr	r2, [pc, #68]	; (8019dfc <pvPortMalloc+0x194>)
 8019db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019db8:	f7fe fc18 	bl	80185ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019dbc:	69fb      	ldr	r3, [r7, #28]
 8019dbe:	f003 0307 	and.w	r3, r3, #7
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d00a      	beq.n	8019ddc <pvPortMalloc+0x174>
	__asm volatile
 8019dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dca:	f383 8811 	msr	BASEPRI, r3
 8019dce:	f3bf 8f6f 	isb	sy
 8019dd2:	f3bf 8f4f 	dsb	sy
 8019dd6:	60fb      	str	r3, [r7, #12]
}
 8019dd8:	bf00      	nop
 8019dda:	e7fe      	b.n	8019dda <pvPortMalloc+0x172>
	return pvReturn;
 8019ddc:	69fb      	ldr	r3, [r7, #28]
}
 8019dde:	4618      	mov	r0, r3
 8019de0:	3728      	adds	r7, #40	; 0x28
 8019de2:	46bd      	mov	sp, r7
 8019de4:	bd80      	pop	{r7, pc}
 8019de6:	bf00      	nop
 8019de8:	24006994 	.word	0x24006994
 8019dec:	240069a8 	.word	0x240069a8
 8019df0:	24006998 	.word	0x24006998
 8019df4:	2400698c 	.word	0x2400698c
 8019df8:	2400699c 	.word	0x2400699c
 8019dfc:	240069a0 	.word	0x240069a0

08019e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b086      	sub	sp, #24
 8019e04:	af00      	add	r7, sp, #0
 8019e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d04d      	beq.n	8019eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019e12:	2308      	movs	r3, #8
 8019e14:	425b      	negs	r3, r3
 8019e16:	697a      	ldr	r2, [r7, #20]
 8019e18:	4413      	add	r3, r2
 8019e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019e1c:	697b      	ldr	r3, [r7, #20]
 8019e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019e20:	693b      	ldr	r3, [r7, #16]
 8019e22:	685a      	ldr	r2, [r3, #4]
 8019e24:	4b24      	ldr	r3, [pc, #144]	; (8019eb8 <vPortFree+0xb8>)
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	4013      	ands	r3, r2
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d10a      	bne.n	8019e44 <vPortFree+0x44>
	__asm volatile
 8019e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e32:	f383 8811 	msr	BASEPRI, r3
 8019e36:	f3bf 8f6f 	isb	sy
 8019e3a:	f3bf 8f4f 	dsb	sy
 8019e3e:	60fb      	str	r3, [r7, #12]
}
 8019e40:	bf00      	nop
 8019e42:	e7fe      	b.n	8019e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019e44:	693b      	ldr	r3, [r7, #16]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d00a      	beq.n	8019e62 <vPortFree+0x62>
	__asm volatile
 8019e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e50:	f383 8811 	msr	BASEPRI, r3
 8019e54:	f3bf 8f6f 	isb	sy
 8019e58:	f3bf 8f4f 	dsb	sy
 8019e5c:	60bb      	str	r3, [r7, #8]
}
 8019e5e:	bf00      	nop
 8019e60:	e7fe      	b.n	8019e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019e62:	693b      	ldr	r3, [r7, #16]
 8019e64:	685a      	ldr	r2, [r3, #4]
 8019e66:	4b14      	ldr	r3, [pc, #80]	; (8019eb8 <vPortFree+0xb8>)
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	4013      	ands	r3, r2
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d01e      	beq.n	8019eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019e70:	693b      	ldr	r3, [r7, #16]
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d11a      	bne.n	8019eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019e78:	693b      	ldr	r3, [r7, #16]
 8019e7a:	685a      	ldr	r2, [r3, #4]
 8019e7c:	4b0e      	ldr	r3, [pc, #56]	; (8019eb8 <vPortFree+0xb8>)
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	43db      	mvns	r3, r3
 8019e82:	401a      	ands	r2, r3
 8019e84:	693b      	ldr	r3, [r7, #16]
 8019e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019e88:	f7fe fba2 	bl	80185d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019e8c:	693b      	ldr	r3, [r7, #16]
 8019e8e:	685a      	ldr	r2, [r3, #4]
 8019e90:	4b0a      	ldr	r3, [pc, #40]	; (8019ebc <vPortFree+0xbc>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	4413      	add	r3, r2
 8019e96:	4a09      	ldr	r2, [pc, #36]	; (8019ebc <vPortFree+0xbc>)
 8019e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019e9a:	6938      	ldr	r0, [r7, #16]
 8019e9c:	f000 f874 	bl	8019f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019ea0:	4b07      	ldr	r3, [pc, #28]	; (8019ec0 <vPortFree+0xc0>)
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	3301      	adds	r3, #1
 8019ea6:	4a06      	ldr	r2, [pc, #24]	; (8019ec0 <vPortFree+0xc0>)
 8019ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019eaa:	f7fe fb9f 	bl	80185ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019eae:	bf00      	nop
 8019eb0:	3718      	adds	r7, #24
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	bd80      	pop	{r7, pc}
 8019eb6:	bf00      	nop
 8019eb8:	240069a8 	.word	0x240069a8
 8019ebc:	24006998 	.word	0x24006998
 8019ec0:	240069a4 	.word	0x240069a4

08019ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019ec4:	b480      	push	{r7}
 8019ec6:	b085      	sub	sp, #20
 8019ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019ed0:	4b27      	ldr	r3, [pc, #156]	; (8019f70 <prvHeapInit+0xac>)
 8019ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	f003 0307 	and.w	r3, r3, #7
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d00c      	beq.n	8019ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	3307      	adds	r3, #7
 8019ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	f023 0307 	bic.w	r3, r3, #7
 8019eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019eec:	68ba      	ldr	r2, [r7, #8]
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	1ad3      	subs	r3, r2, r3
 8019ef2:	4a1f      	ldr	r2, [pc, #124]	; (8019f70 <prvHeapInit+0xac>)
 8019ef4:	4413      	add	r3, r2
 8019ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019efc:	4a1d      	ldr	r2, [pc, #116]	; (8019f74 <prvHeapInit+0xb0>)
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019f02:	4b1c      	ldr	r3, [pc, #112]	; (8019f74 <prvHeapInit+0xb0>)
 8019f04:	2200      	movs	r2, #0
 8019f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	68ba      	ldr	r2, [r7, #8]
 8019f0c:	4413      	add	r3, r2
 8019f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019f10:	2208      	movs	r2, #8
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	1a9b      	subs	r3, r3, r2
 8019f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	f023 0307 	bic.w	r3, r3, #7
 8019f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019f20:	68fb      	ldr	r3, [r7, #12]
 8019f22:	4a15      	ldr	r2, [pc, #84]	; (8019f78 <prvHeapInit+0xb4>)
 8019f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019f26:	4b14      	ldr	r3, [pc, #80]	; (8019f78 <prvHeapInit+0xb4>)
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019f2e:	4b12      	ldr	r3, [pc, #72]	; (8019f78 <prvHeapInit+0xb4>)
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	2200      	movs	r2, #0
 8019f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019f3a:	683b      	ldr	r3, [r7, #0]
 8019f3c:	68fa      	ldr	r2, [r7, #12]
 8019f3e:	1ad2      	subs	r2, r2, r3
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019f44:	4b0c      	ldr	r3, [pc, #48]	; (8019f78 <prvHeapInit+0xb4>)
 8019f46:	681a      	ldr	r2, [r3, #0]
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019f4c:	683b      	ldr	r3, [r7, #0]
 8019f4e:	685b      	ldr	r3, [r3, #4]
 8019f50:	4a0a      	ldr	r2, [pc, #40]	; (8019f7c <prvHeapInit+0xb8>)
 8019f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019f54:	683b      	ldr	r3, [r7, #0]
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	4a09      	ldr	r2, [pc, #36]	; (8019f80 <prvHeapInit+0xbc>)
 8019f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019f5c:	4b09      	ldr	r3, [pc, #36]	; (8019f84 <prvHeapInit+0xc0>)
 8019f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019f62:	601a      	str	r2, [r3, #0]
}
 8019f64:	bf00      	nop
 8019f66:	3714      	adds	r7, #20
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6e:	4770      	bx	lr
 8019f70:	24002d8c 	.word	0x24002d8c
 8019f74:	2400698c 	.word	0x2400698c
 8019f78:	24006994 	.word	0x24006994
 8019f7c:	2400699c 	.word	0x2400699c
 8019f80:	24006998 	.word	0x24006998
 8019f84:	240069a8 	.word	0x240069a8

08019f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019f88:	b480      	push	{r7}
 8019f8a:	b085      	sub	sp, #20
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019f90:	4b28      	ldr	r3, [pc, #160]	; (801a034 <prvInsertBlockIntoFreeList+0xac>)
 8019f92:	60fb      	str	r3, [r7, #12]
 8019f94:	e002      	b.n	8019f9c <prvInsertBlockIntoFreeList+0x14>
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	60fb      	str	r3, [r7, #12]
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	687a      	ldr	r2, [r7, #4]
 8019fa2:	429a      	cmp	r2, r3
 8019fa4:	d8f7      	bhi.n	8019f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	685b      	ldr	r3, [r3, #4]
 8019fae:	68ba      	ldr	r2, [r7, #8]
 8019fb0:	4413      	add	r3, r2
 8019fb2:	687a      	ldr	r2, [r7, #4]
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d108      	bne.n	8019fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	685a      	ldr	r2, [r3, #4]
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	685b      	ldr	r3, [r3, #4]
 8019fc0:	441a      	add	r2, r3
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	685b      	ldr	r3, [r3, #4]
 8019fd2:	68ba      	ldr	r2, [r7, #8]
 8019fd4:	441a      	add	r2, r3
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	429a      	cmp	r2, r3
 8019fdc:	d118      	bne.n	801a010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	681a      	ldr	r2, [r3, #0]
 8019fe2:	4b15      	ldr	r3, [pc, #84]	; (801a038 <prvInsertBlockIntoFreeList+0xb0>)
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	429a      	cmp	r2, r3
 8019fe8:	d00d      	beq.n	801a006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	685a      	ldr	r2, [r3, #4]
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	685b      	ldr	r3, [r3, #4]
 8019ff4:	441a      	add	r2, r3
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	681a      	ldr	r2, [r3, #0]
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	601a      	str	r2, [r3, #0]
 801a004:	e008      	b.n	801a018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a006:	4b0c      	ldr	r3, [pc, #48]	; (801a038 <prvInsertBlockIntoFreeList+0xb0>)
 801a008:	681a      	ldr	r2, [r3, #0]
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	601a      	str	r2, [r3, #0]
 801a00e:	e003      	b.n	801a018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	681a      	ldr	r2, [r3, #0]
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a018:	68fa      	ldr	r2, [r7, #12]
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	429a      	cmp	r2, r3
 801a01e:	d002      	beq.n	801a026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	687a      	ldr	r2, [r7, #4]
 801a024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a026:	bf00      	nop
 801a028:	3714      	adds	r7, #20
 801a02a:	46bd      	mov	sp, r7
 801a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a030:	4770      	bx	lr
 801a032:	bf00      	nop
 801a034:	2400698c 	.word	0x2400698c
 801a038:	24006994 	.word	0x24006994

0801a03c <__errno>:
 801a03c:	4b01      	ldr	r3, [pc, #4]	; (801a044 <__errno+0x8>)
 801a03e:	6818      	ldr	r0, [r3, #0]
 801a040:	4770      	bx	lr
 801a042:	bf00      	nop
 801a044:	240000d0 	.word	0x240000d0

0801a048 <__libc_init_array>:
 801a048:	b570      	push	{r4, r5, r6, lr}
 801a04a:	4d0d      	ldr	r5, [pc, #52]	; (801a080 <__libc_init_array+0x38>)
 801a04c:	4c0d      	ldr	r4, [pc, #52]	; (801a084 <__libc_init_array+0x3c>)
 801a04e:	1b64      	subs	r4, r4, r5
 801a050:	10a4      	asrs	r4, r4, #2
 801a052:	2600      	movs	r6, #0
 801a054:	42a6      	cmp	r6, r4
 801a056:	d109      	bne.n	801a06c <__libc_init_array+0x24>
 801a058:	4d0b      	ldr	r5, [pc, #44]	; (801a088 <__libc_init_array+0x40>)
 801a05a:	4c0c      	ldr	r4, [pc, #48]	; (801a08c <__libc_init_array+0x44>)
 801a05c:	f000 fd2c 	bl	801aab8 <_init>
 801a060:	1b64      	subs	r4, r4, r5
 801a062:	10a4      	asrs	r4, r4, #2
 801a064:	2600      	movs	r6, #0
 801a066:	42a6      	cmp	r6, r4
 801a068:	d105      	bne.n	801a076 <__libc_init_array+0x2e>
 801a06a:	bd70      	pop	{r4, r5, r6, pc}
 801a06c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a070:	4798      	blx	r3
 801a072:	3601      	adds	r6, #1
 801a074:	e7ee      	b.n	801a054 <__libc_init_array+0xc>
 801a076:	f855 3b04 	ldr.w	r3, [r5], #4
 801a07a:	4798      	blx	r3
 801a07c:	3601      	adds	r6, #1
 801a07e:	e7f2      	b.n	801a066 <__libc_init_array+0x1e>
 801a080:	0801af70 	.word	0x0801af70
 801a084:	0801af70 	.word	0x0801af70
 801a088:	0801af70 	.word	0x0801af70
 801a08c:	0801af74 	.word	0x0801af74

0801a090 <memcpy>:
 801a090:	440a      	add	r2, r1
 801a092:	4291      	cmp	r1, r2
 801a094:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a098:	d100      	bne.n	801a09c <memcpy+0xc>
 801a09a:	4770      	bx	lr
 801a09c:	b510      	push	{r4, lr}
 801a09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a0a6:	4291      	cmp	r1, r2
 801a0a8:	d1f9      	bne.n	801a09e <memcpy+0xe>
 801a0aa:	bd10      	pop	{r4, pc}

0801a0ac <memset>:
 801a0ac:	4402      	add	r2, r0
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	4293      	cmp	r3, r2
 801a0b2:	d100      	bne.n	801a0b6 <memset+0xa>
 801a0b4:	4770      	bx	lr
 801a0b6:	f803 1b01 	strb.w	r1, [r3], #1
 801a0ba:	e7f9      	b.n	801a0b0 <memset+0x4>

0801a0bc <_puts_r>:
 801a0bc:	b570      	push	{r4, r5, r6, lr}
 801a0be:	460e      	mov	r6, r1
 801a0c0:	4605      	mov	r5, r0
 801a0c2:	b118      	cbz	r0, 801a0cc <_puts_r+0x10>
 801a0c4:	6983      	ldr	r3, [r0, #24]
 801a0c6:	b90b      	cbnz	r3, 801a0cc <_puts_r+0x10>
 801a0c8:	f000 fa48 	bl	801a55c <__sinit>
 801a0cc:	69ab      	ldr	r3, [r5, #24]
 801a0ce:	68ac      	ldr	r4, [r5, #8]
 801a0d0:	b913      	cbnz	r3, 801a0d8 <_puts_r+0x1c>
 801a0d2:	4628      	mov	r0, r5
 801a0d4:	f000 fa42 	bl	801a55c <__sinit>
 801a0d8:	4b2c      	ldr	r3, [pc, #176]	; (801a18c <_puts_r+0xd0>)
 801a0da:	429c      	cmp	r4, r3
 801a0dc:	d120      	bne.n	801a120 <_puts_r+0x64>
 801a0de:	686c      	ldr	r4, [r5, #4]
 801a0e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0e2:	07db      	lsls	r3, r3, #31
 801a0e4:	d405      	bmi.n	801a0f2 <_puts_r+0x36>
 801a0e6:	89a3      	ldrh	r3, [r4, #12]
 801a0e8:	0598      	lsls	r0, r3, #22
 801a0ea:	d402      	bmi.n	801a0f2 <_puts_r+0x36>
 801a0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0ee:	f000 fad3 	bl	801a698 <__retarget_lock_acquire_recursive>
 801a0f2:	89a3      	ldrh	r3, [r4, #12]
 801a0f4:	0719      	lsls	r1, r3, #28
 801a0f6:	d51d      	bpl.n	801a134 <_puts_r+0x78>
 801a0f8:	6923      	ldr	r3, [r4, #16]
 801a0fa:	b1db      	cbz	r3, 801a134 <_puts_r+0x78>
 801a0fc:	3e01      	subs	r6, #1
 801a0fe:	68a3      	ldr	r3, [r4, #8]
 801a100:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a104:	3b01      	subs	r3, #1
 801a106:	60a3      	str	r3, [r4, #8]
 801a108:	bb39      	cbnz	r1, 801a15a <_puts_r+0x9e>
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	da38      	bge.n	801a180 <_puts_r+0xc4>
 801a10e:	4622      	mov	r2, r4
 801a110:	210a      	movs	r1, #10
 801a112:	4628      	mov	r0, r5
 801a114:	f000 f848 	bl	801a1a8 <__swbuf_r>
 801a118:	3001      	adds	r0, #1
 801a11a:	d011      	beq.n	801a140 <_puts_r+0x84>
 801a11c:	250a      	movs	r5, #10
 801a11e:	e011      	b.n	801a144 <_puts_r+0x88>
 801a120:	4b1b      	ldr	r3, [pc, #108]	; (801a190 <_puts_r+0xd4>)
 801a122:	429c      	cmp	r4, r3
 801a124:	d101      	bne.n	801a12a <_puts_r+0x6e>
 801a126:	68ac      	ldr	r4, [r5, #8]
 801a128:	e7da      	b.n	801a0e0 <_puts_r+0x24>
 801a12a:	4b1a      	ldr	r3, [pc, #104]	; (801a194 <_puts_r+0xd8>)
 801a12c:	429c      	cmp	r4, r3
 801a12e:	bf08      	it	eq
 801a130:	68ec      	ldreq	r4, [r5, #12]
 801a132:	e7d5      	b.n	801a0e0 <_puts_r+0x24>
 801a134:	4621      	mov	r1, r4
 801a136:	4628      	mov	r0, r5
 801a138:	f000 f888 	bl	801a24c <__swsetup_r>
 801a13c:	2800      	cmp	r0, #0
 801a13e:	d0dd      	beq.n	801a0fc <_puts_r+0x40>
 801a140:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a146:	07da      	lsls	r2, r3, #31
 801a148:	d405      	bmi.n	801a156 <_puts_r+0x9a>
 801a14a:	89a3      	ldrh	r3, [r4, #12]
 801a14c:	059b      	lsls	r3, r3, #22
 801a14e:	d402      	bmi.n	801a156 <_puts_r+0x9a>
 801a150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a152:	f000 faa2 	bl	801a69a <__retarget_lock_release_recursive>
 801a156:	4628      	mov	r0, r5
 801a158:	bd70      	pop	{r4, r5, r6, pc}
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	da04      	bge.n	801a168 <_puts_r+0xac>
 801a15e:	69a2      	ldr	r2, [r4, #24]
 801a160:	429a      	cmp	r2, r3
 801a162:	dc06      	bgt.n	801a172 <_puts_r+0xb6>
 801a164:	290a      	cmp	r1, #10
 801a166:	d004      	beq.n	801a172 <_puts_r+0xb6>
 801a168:	6823      	ldr	r3, [r4, #0]
 801a16a:	1c5a      	adds	r2, r3, #1
 801a16c:	6022      	str	r2, [r4, #0]
 801a16e:	7019      	strb	r1, [r3, #0]
 801a170:	e7c5      	b.n	801a0fe <_puts_r+0x42>
 801a172:	4622      	mov	r2, r4
 801a174:	4628      	mov	r0, r5
 801a176:	f000 f817 	bl	801a1a8 <__swbuf_r>
 801a17a:	3001      	adds	r0, #1
 801a17c:	d1bf      	bne.n	801a0fe <_puts_r+0x42>
 801a17e:	e7df      	b.n	801a140 <_puts_r+0x84>
 801a180:	6823      	ldr	r3, [r4, #0]
 801a182:	250a      	movs	r5, #10
 801a184:	1c5a      	adds	r2, r3, #1
 801a186:	6022      	str	r2, [r4, #0]
 801a188:	701d      	strb	r5, [r3, #0]
 801a18a:	e7db      	b.n	801a144 <_puts_r+0x88>
 801a18c:	0801af28 	.word	0x0801af28
 801a190:	0801af48 	.word	0x0801af48
 801a194:	0801af08 	.word	0x0801af08

0801a198 <puts>:
 801a198:	4b02      	ldr	r3, [pc, #8]	; (801a1a4 <puts+0xc>)
 801a19a:	4601      	mov	r1, r0
 801a19c:	6818      	ldr	r0, [r3, #0]
 801a19e:	f7ff bf8d 	b.w	801a0bc <_puts_r>
 801a1a2:	bf00      	nop
 801a1a4:	240000d0 	.word	0x240000d0

0801a1a8 <__swbuf_r>:
 801a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1aa:	460e      	mov	r6, r1
 801a1ac:	4614      	mov	r4, r2
 801a1ae:	4605      	mov	r5, r0
 801a1b0:	b118      	cbz	r0, 801a1ba <__swbuf_r+0x12>
 801a1b2:	6983      	ldr	r3, [r0, #24]
 801a1b4:	b90b      	cbnz	r3, 801a1ba <__swbuf_r+0x12>
 801a1b6:	f000 f9d1 	bl	801a55c <__sinit>
 801a1ba:	4b21      	ldr	r3, [pc, #132]	; (801a240 <__swbuf_r+0x98>)
 801a1bc:	429c      	cmp	r4, r3
 801a1be:	d12b      	bne.n	801a218 <__swbuf_r+0x70>
 801a1c0:	686c      	ldr	r4, [r5, #4]
 801a1c2:	69a3      	ldr	r3, [r4, #24]
 801a1c4:	60a3      	str	r3, [r4, #8]
 801a1c6:	89a3      	ldrh	r3, [r4, #12]
 801a1c8:	071a      	lsls	r2, r3, #28
 801a1ca:	d52f      	bpl.n	801a22c <__swbuf_r+0x84>
 801a1cc:	6923      	ldr	r3, [r4, #16]
 801a1ce:	b36b      	cbz	r3, 801a22c <__swbuf_r+0x84>
 801a1d0:	6923      	ldr	r3, [r4, #16]
 801a1d2:	6820      	ldr	r0, [r4, #0]
 801a1d4:	1ac0      	subs	r0, r0, r3
 801a1d6:	6963      	ldr	r3, [r4, #20]
 801a1d8:	b2f6      	uxtb	r6, r6
 801a1da:	4283      	cmp	r3, r0
 801a1dc:	4637      	mov	r7, r6
 801a1de:	dc04      	bgt.n	801a1ea <__swbuf_r+0x42>
 801a1e0:	4621      	mov	r1, r4
 801a1e2:	4628      	mov	r0, r5
 801a1e4:	f000 f926 	bl	801a434 <_fflush_r>
 801a1e8:	bb30      	cbnz	r0, 801a238 <__swbuf_r+0x90>
 801a1ea:	68a3      	ldr	r3, [r4, #8]
 801a1ec:	3b01      	subs	r3, #1
 801a1ee:	60a3      	str	r3, [r4, #8]
 801a1f0:	6823      	ldr	r3, [r4, #0]
 801a1f2:	1c5a      	adds	r2, r3, #1
 801a1f4:	6022      	str	r2, [r4, #0]
 801a1f6:	701e      	strb	r6, [r3, #0]
 801a1f8:	6963      	ldr	r3, [r4, #20]
 801a1fa:	3001      	adds	r0, #1
 801a1fc:	4283      	cmp	r3, r0
 801a1fe:	d004      	beq.n	801a20a <__swbuf_r+0x62>
 801a200:	89a3      	ldrh	r3, [r4, #12]
 801a202:	07db      	lsls	r3, r3, #31
 801a204:	d506      	bpl.n	801a214 <__swbuf_r+0x6c>
 801a206:	2e0a      	cmp	r6, #10
 801a208:	d104      	bne.n	801a214 <__swbuf_r+0x6c>
 801a20a:	4621      	mov	r1, r4
 801a20c:	4628      	mov	r0, r5
 801a20e:	f000 f911 	bl	801a434 <_fflush_r>
 801a212:	b988      	cbnz	r0, 801a238 <__swbuf_r+0x90>
 801a214:	4638      	mov	r0, r7
 801a216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a218:	4b0a      	ldr	r3, [pc, #40]	; (801a244 <__swbuf_r+0x9c>)
 801a21a:	429c      	cmp	r4, r3
 801a21c:	d101      	bne.n	801a222 <__swbuf_r+0x7a>
 801a21e:	68ac      	ldr	r4, [r5, #8]
 801a220:	e7cf      	b.n	801a1c2 <__swbuf_r+0x1a>
 801a222:	4b09      	ldr	r3, [pc, #36]	; (801a248 <__swbuf_r+0xa0>)
 801a224:	429c      	cmp	r4, r3
 801a226:	bf08      	it	eq
 801a228:	68ec      	ldreq	r4, [r5, #12]
 801a22a:	e7ca      	b.n	801a1c2 <__swbuf_r+0x1a>
 801a22c:	4621      	mov	r1, r4
 801a22e:	4628      	mov	r0, r5
 801a230:	f000 f80c 	bl	801a24c <__swsetup_r>
 801a234:	2800      	cmp	r0, #0
 801a236:	d0cb      	beq.n	801a1d0 <__swbuf_r+0x28>
 801a238:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a23c:	e7ea      	b.n	801a214 <__swbuf_r+0x6c>
 801a23e:	bf00      	nop
 801a240:	0801af28 	.word	0x0801af28
 801a244:	0801af48 	.word	0x0801af48
 801a248:	0801af08 	.word	0x0801af08

0801a24c <__swsetup_r>:
 801a24c:	4b32      	ldr	r3, [pc, #200]	; (801a318 <__swsetup_r+0xcc>)
 801a24e:	b570      	push	{r4, r5, r6, lr}
 801a250:	681d      	ldr	r5, [r3, #0]
 801a252:	4606      	mov	r6, r0
 801a254:	460c      	mov	r4, r1
 801a256:	b125      	cbz	r5, 801a262 <__swsetup_r+0x16>
 801a258:	69ab      	ldr	r3, [r5, #24]
 801a25a:	b913      	cbnz	r3, 801a262 <__swsetup_r+0x16>
 801a25c:	4628      	mov	r0, r5
 801a25e:	f000 f97d 	bl	801a55c <__sinit>
 801a262:	4b2e      	ldr	r3, [pc, #184]	; (801a31c <__swsetup_r+0xd0>)
 801a264:	429c      	cmp	r4, r3
 801a266:	d10f      	bne.n	801a288 <__swsetup_r+0x3c>
 801a268:	686c      	ldr	r4, [r5, #4]
 801a26a:	89a3      	ldrh	r3, [r4, #12]
 801a26c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a270:	0719      	lsls	r1, r3, #28
 801a272:	d42c      	bmi.n	801a2ce <__swsetup_r+0x82>
 801a274:	06dd      	lsls	r5, r3, #27
 801a276:	d411      	bmi.n	801a29c <__swsetup_r+0x50>
 801a278:	2309      	movs	r3, #9
 801a27a:	6033      	str	r3, [r6, #0]
 801a27c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a280:	81a3      	strh	r3, [r4, #12]
 801a282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a286:	e03e      	b.n	801a306 <__swsetup_r+0xba>
 801a288:	4b25      	ldr	r3, [pc, #148]	; (801a320 <__swsetup_r+0xd4>)
 801a28a:	429c      	cmp	r4, r3
 801a28c:	d101      	bne.n	801a292 <__swsetup_r+0x46>
 801a28e:	68ac      	ldr	r4, [r5, #8]
 801a290:	e7eb      	b.n	801a26a <__swsetup_r+0x1e>
 801a292:	4b24      	ldr	r3, [pc, #144]	; (801a324 <__swsetup_r+0xd8>)
 801a294:	429c      	cmp	r4, r3
 801a296:	bf08      	it	eq
 801a298:	68ec      	ldreq	r4, [r5, #12]
 801a29a:	e7e6      	b.n	801a26a <__swsetup_r+0x1e>
 801a29c:	0758      	lsls	r0, r3, #29
 801a29e:	d512      	bpl.n	801a2c6 <__swsetup_r+0x7a>
 801a2a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2a2:	b141      	cbz	r1, 801a2b6 <__swsetup_r+0x6a>
 801a2a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a2a8:	4299      	cmp	r1, r3
 801a2aa:	d002      	beq.n	801a2b2 <__swsetup_r+0x66>
 801a2ac:	4630      	mov	r0, r6
 801a2ae:	f000 fa5b 	bl	801a768 <_free_r>
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	6363      	str	r3, [r4, #52]	; 0x34
 801a2b6:	89a3      	ldrh	r3, [r4, #12]
 801a2b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a2bc:	81a3      	strh	r3, [r4, #12]
 801a2be:	2300      	movs	r3, #0
 801a2c0:	6063      	str	r3, [r4, #4]
 801a2c2:	6923      	ldr	r3, [r4, #16]
 801a2c4:	6023      	str	r3, [r4, #0]
 801a2c6:	89a3      	ldrh	r3, [r4, #12]
 801a2c8:	f043 0308 	orr.w	r3, r3, #8
 801a2cc:	81a3      	strh	r3, [r4, #12]
 801a2ce:	6923      	ldr	r3, [r4, #16]
 801a2d0:	b94b      	cbnz	r3, 801a2e6 <__swsetup_r+0x9a>
 801a2d2:	89a3      	ldrh	r3, [r4, #12]
 801a2d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2dc:	d003      	beq.n	801a2e6 <__swsetup_r+0x9a>
 801a2de:	4621      	mov	r1, r4
 801a2e0:	4630      	mov	r0, r6
 801a2e2:	f000 fa01 	bl	801a6e8 <__smakebuf_r>
 801a2e6:	89a0      	ldrh	r0, [r4, #12]
 801a2e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a2ec:	f010 0301 	ands.w	r3, r0, #1
 801a2f0:	d00a      	beq.n	801a308 <__swsetup_r+0xbc>
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	60a3      	str	r3, [r4, #8]
 801a2f6:	6963      	ldr	r3, [r4, #20]
 801a2f8:	425b      	negs	r3, r3
 801a2fa:	61a3      	str	r3, [r4, #24]
 801a2fc:	6923      	ldr	r3, [r4, #16]
 801a2fe:	b943      	cbnz	r3, 801a312 <__swsetup_r+0xc6>
 801a300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a304:	d1ba      	bne.n	801a27c <__swsetup_r+0x30>
 801a306:	bd70      	pop	{r4, r5, r6, pc}
 801a308:	0781      	lsls	r1, r0, #30
 801a30a:	bf58      	it	pl
 801a30c:	6963      	ldrpl	r3, [r4, #20]
 801a30e:	60a3      	str	r3, [r4, #8]
 801a310:	e7f4      	b.n	801a2fc <__swsetup_r+0xb0>
 801a312:	2000      	movs	r0, #0
 801a314:	e7f7      	b.n	801a306 <__swsetup_r+0xba>
 801a316:	bf00      	nop
 801a318:	240000d0 	.word	0x240000d0
 801a31c:	0801af28 	.word	0x0801af28
 801a320:	0801af48 	.word	0x0801af48
 801a324:	0801af08 	.word	0x0801af08

0801a328 <__sflush_r>:
 801a328:	898a      	ldrh	r2, [r1, #12]
 801a32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a32e:	4605      	mov	r5, r0
 801a330:	0710      	lsls	r0, r2, #28
 801a332:	460c      	mov	r4, r1
 801a334:	d458      	bmi.n	801a3e8 <__sflush_r+0xc0>
 801a336:	684b      	ldr	r3, [r1, #4]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	dc05      	bgt.n	801a348 <__sflush_r+0x20>
 801a33c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a33e:	2b00      	cmp	r3, #0
 801a340:	dc02      	bgt.n	801a348 <__sflush_r+0x20>
 801a342:	2000      	movs	r0, #0
 801a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a34a:	2e00      	cmp	r6, #0
 801a34c:	d0f9      	beq.n	801a342 <__sflush_r+0x1a>
 801a34e:	2300      	movs	r3, #0
 801a350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a354:	682f      	ldr	r7, [r5, #0]
 801a356:	602b      	str	r3, [r5, #0]
 801a358:	d032      	beq.n	801a3c0 <__sflush_r+0x98>
 801a35a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a35c:	89a3      	ldrh	r3, [r4, #12]
 801a35e:	075a      	lsls	r2, r3, #29
 801a360:	d505      	bpl.n	801a36e <__sflush_r+0x46>
 801a362:	6863      	ldr	r3, [r4, #4]
 801a364:	1ac0      	subs	r0, r0, r3
 801a366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a368:	b10b      	cbz	r3, 801a36e <__sflush_r+0x46>
 801a36a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a36c:	1ac0      	subs	r0, r0, r3
 801a36e:	2300      	movs	r3, #0
 801a370:	4602      	mov	r2, r0
 801a372:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a374:	6a21      	ldr	r1, [r4, #32]
 801a376:	4628      	mov	r0, r5
 801a378:	47b0      	blx	r6
 801a37a:	1c43      	adds	r3, r0, #1
 801a37c:	89a3      	ldrh	r3, [r4, #12]
 801a37e:	d106      	bne.n	801a38e <__sflush_r+0x66>
 801a380:	6829      	ldr	r1, [r5, #0]
 801a382:	291d      	cmp	r1, #29
 801a384:	d82c      	bhi.n	801a3e0 <__sflush_r+0xb8>
 801a386:	4a2a      	ldr	r2, [pc, #168]	; (801a430 <__sflush_r+0x108>)
 801a388:	40ca      	lsrs	r2, r1
 801a38a:	07d6      	lsls	r6, r2, #31
 801a38c:	d528      	bpl.n	801a3e0 <__sflush_r+0xb8>
 801a38e:	2200      	movs	r2, #0
 801a390:	6062      	str	r2, [r4, #4]
 801a392:	04d9      	lsls	r1, r3, #19
 801a394:	6922      	ldr	r2, [r4, #16]
 801a396:	6022      	str	r2, [r4, #0]
 801a398:	d504      	bpl.n	801a3a4 <__sflush_r+0x7c>
 801a39a:	1c42      	adds	r2, r0, #1
 801a39c:	d101      	bne.n	801a3a2 <__sflush_r+0x7a>
 801a39e:	682b      	ldr	r3, [r5, #0]
 801a3a0:	b903      	cbnz	r3, 801a3a4 <__sflush_r+0x7c>
 801a3a2:	6560      	str	r0, [r4, #84]	; 0x54
 801a3a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3a6:	602f      	str	r7, [r5, #0]
 801a3a8:	2900      	cmp	r1, #0
 801a3aa:	d0ca      	beq.n	801a342 <__sflush_r+0x1a>
 801a3ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3b0:	4299      	cmp	r1, r3
 801a3b2:	d002      	beq.n	801a3ba <__sflush_r+0x92>
 801a3b4:	4628      	mov	r0, r5
 801a3b6:	f000 f9d7 	bl	801a768 <_free_r>
 801a3ba:	2000      	movs	r0, #0
 801a3bc:	6360      	str	r0, [r4, #52]	; 0x34
 801a3be:	e7c1      	b.n	801a344 <__sflush_r+0x1c>
 801a3c0:	6a21      	ldr	r1, [r4, #32]
 801a3c2:	2301      	movs	r3, #1
 801a3c4:	4628      	mov	r0, r5
 801a3c6:	47b0      	blx	r6
 801a3c8:	1c41      	adds	r1, r0, #1
 801a3ca:	d1c7      	bne.n	801a35c <__sflush_r+0x34>
 801a3cc:	682b      	ldr	r3, [r5, #0]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d0c4      	beq.n	801a35c <__sflush_r+0x34>
 801a3d2:	2b1d      	cmp	r3, #29
 801a3d4:	d001      	beq.n	801a3da <__sflush_r+0xb2>
 801a3d6:	2b16      	cmp	r3, #22
 801a3d8:	d101      	bne.n	801a3de <__sflush_r+0xb6>
 801a3da:	602f      	str	r7, [r5, #0]
 801a3dc:	e7b1      	b.n	801a342 <__sflush_r+0x1a>
 801a3de:	89a3      	ldrh	r3, [r4, #12]
 801a3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3e4:	81a3      	strh	r3, [r4, #12]
 801a3e6:	e7ad      	b.n	801a344 <__sflush_r+0x1c>
 801a3e8:	690f      	ldr	r7, [r1, #16]
 801a3ea:	2f00      	cmp	r7, #0
 801a3ec:	d0a9      	beq.n	801a342 <__sflush_r+0x1a>
 801a3ee:	0793      	lsls	r3, r2, #30
 801a3f0:	680e      	ldr	r6, [r1, #0]
 801a3f2:	bf08      	it	eq
 801a3f4:	694b      	ldreq	r3, [r1, #20]
 801a3f6:	600f      	str	r7, [r1, #0]
 801a3f8:	bf18      	it	ne
 801a3fa:	2300      	movne	r3, #0
 801a3fc:	eba6 0807 	sub.w	r8, r6, r7
 801a400:	608b      	str	r3, [r1, #8]
 801a402:	f1b8 0f00 	cmp.w	r8, #0
 801a406:	dd9c      	ble.n	801a342 <__sflush_r+0x1a>
 801a408:	6a21      	ldr	r1, [r4, #32]
 801a40a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a40c:	4643      	mov	r3, r8
 801a40e:	463a      	mov	r2, r7
 801a410:	4628      	mov	r0, r5
 801a412:	47b0      	blx	r6
 801a414:	2800      	cmp	r0, #0
 801a416:	dc06      	bgt.n	801a426 <__sflush_r+0xfe>
 801a418:	89a3      	ldrh	r3, [r4, #12]
 801a41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a41e:	81a3      	strh	r3, [r4, #12]
 801a420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a424:	e78e      	b.n	801a344 <__sflush_r+0x1c>
 801a426:	4407      	add	r7, r0
 801a428:	eba8 0800 	sub.w	r8, r8, r0
 801a42c:	e7e9      	b.n	801a402 <__sflush_r+0xda>
 801a42e:	bf00      	nop
 801a430:	20400001 	.word	0x20400001

0801a434 <_fflush_r>:
 801a434:	b538      	push	{r3, r4, r5, lr}
 801a436:	690b      	ldr	r3, [r1, #16]
 801a438:	4605      	mov	r5, r0
 801a43a:	460c      	mov	r4, r1
 801a43c:	b913      	cbnz	r3, 801a444 <_fflush_r+0x10>
 801a43e:	2500      	movs	r5, #0
 801a440:	4628      	mov	r0, r5
 801a442:	bd38      	pop	{r3, r4, r5, pc}
 801a444:	b118      	cbz	r0, 801a44e <_fflush_r+0x1a>
 801a446:	6983      	ldr	r3, [r0, #24]
 801a448:	b90b      	cbnz	r3, 801a44e <_fflush_r+0x1a>
 801a44a:	f000 f887 	bl	801a55c <__sinit>
 801a44e:	4b14      	ldr	r3, [pc, #80]	; (801a4a0 <_fflush_r+0x6c>)
 801a450:	429c      	cmp	r4, r3
 801a452:	d11b      	bne.n	801a48c <_fflush_r+0x58>
 801a454:	686c      	ldr	r4, [r5, #4]
 801a456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d0ef      	beq.n	801a43e <_fflush_r+0xa>
 801a45e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a460:	07d0      	lsls	r0, r2, #31
 801a462:	d404      	bmi.n	801a46e <_fflush_r+0x3a>
 801a464:	0599      	lsls	r1, r3, #22
 801a466:	d402      	bmi.n	801a46e <_fflush_r+0x3a>
 801a468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a46a:	f000 f915 	bl	801a698 <__retarget_lock_acquire_recursive>
 801a46e:	4628      	mov	r0, r5
 801a470:	4621      	mov	r1, r4
 801a472:	f7ff ff59 	bl	801a328 <__sflush_r>
 801a476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a478:	07da      	lsls	r2, r3, #31
 801a47a:	4605      	mov	r5, r0
 801a47c:	d4e0      	bmi.n	801a440 <_fflush_r+0xc>
 801a47e:	89a3      	ldrh	r3, [r4, #12]
 801a480:	059b      	lsls	r3, r3, #22
 801a482:	d4dd      	bmi.n	801a440 <_fflush_r+0xc>
 801a484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a486:	f000 f908 	bl	801a69a <__retarget_lock_release_recursive>
 801a48a:	e7d9      	b.n	801a440 <_fflush_r+0xc>
 801a48c:	4b05      	ldr	r3, [pc, #20]	; (801a4a4 <_fflush_r+0x70>)
 801a48e:	429c      	cmp	r4, r3
 801a490:	d101      	bne.n	801a496 <_fflush_r+0x62>
 801a492:	68ac      	ldr	r4, [r5, #8]
 801a494:	e7df      	b.n	801a456 <_fflush_r+0x22>
 801a496:	4b04      	ldr	r3, [pc, #16]	; (801a4a8 <_fflush_r+0x74>)
 801a498:	429c      	cmp	r4, r3
 801a49a:	bf08      	it	eq
 801a49c:	68ec      	ldreq	r4, [r5, #12]
 801a49e:	e7da      	b.n	801a456 <_fflush_r+0x22>
 801a4a0:	0801af28 	.word	0x0801af28
 801a4a4:	0801af48 	.word	0x0801af48
 801a4a8:	0801af08 	.word	0x0801af08

0801a4ac <std>:
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	b510      	push	{r4, lr}
 801a4b0:	4604      	mov	r4, r0
 801a4b2:	e9c0 3300 	strd	r3, r3, [r0]
 801a4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a4ba:	6083      	str	r3, [r0, #8]
 801a4bc:	8181      	strh	r1, [r0, #12]
 801a4be:	6643      	str	r3, [r0, #100]	; 0x64
 801a4c0:	81c2      	strh	r2, [r0, #14]
 801a4c2:	6183      	str	r3, [r0, #24]
 801a4c4:	4619      	mov	r1, r3
 801a4c6:	2208      	movs	r2, #8
 801a4c8:	305c      	adds	r0, #92	; 0x5c
 801a4ca:	f7ff fdef 	bl	801a0ac <memset>
 801a4ce:	4b05      	ldr	r3, [pc, #20]	; (801a4e4 <std+0x38>)
 801a4d0:	6263      	str	r3, [r4, #36]	; 0x24
 801a4d2:	4b05      	ldr	r3, [pc, #20]	; (801a4e8 <std+0x3c>)
 801a4d4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a4d6:	4b05      	ldr	r3, [pc, #20]	; (801a4ec <std+0x40>)
 801a4d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a4da:	4b05      	ldr	r3, [pc, #20]	; (801a4f0 <std+0x44>)
 801a4dc:	6224      	str	r4, [r4, #32]
 801a4de:	6323      	str	r3, [r4, #48]	; 0x30
 801a4e0:	bd10      	pop	{r4, pc}
 801a4e2:	bf00      	nop
 801a4e4:	0801a949 	.word	0x0801a949
 801a4e8:	0801a96b 	.word	0x0801a96b
 801a4ec:	0801a9a3 	.word	0x0801a9a3
 801a4f0:	0801a9c7 	.word	0x0801a9c7

0801a4f4 <_cleanup_r>:
 801a4f4:	4901      	ldr	r1, [pc, #4]	; (801a4fc <_cleanup_r+0x8>)
 801a4f6:	f000 b8af 	b.w	801a658 <_fwalk_reent>
 801a4fa:	bf00      	nop
 801a4fc:	0801a435 	.word	0x0801a435

0801a500 <__sfmoreglue>:
 801a500:	b570      	push	{r4, r5, r6, lr}
 801a502:	2268      	movs	r2, #104	; 0x68
 801a504:	1e4d      	subs	r5, r1, #1
 801a506:	4355      	muls	r5, r2
 801a508:	460e      	mov	r6, r1
 801a50a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a50e:	f000 f997 	bl	801a840 <_malloc_r>
 801a512:	4604      	mov	r4, r0
 801a514:	b140      	cbz	r0, 801a528 <__sfmoreglue+0x28>
 801a516:	2100      	movs	r1, #0
 801a518:	e9c0 1600 	strd	r1, r6, [r0]
 801a51c:	300c      	adds	r0, #12
 801a51e:	60a0      	str	r0, [r4, #8]
 801a520:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a524:	f7ff fdc2 	bl	801a0ac <memset>
 801a528:	4620      	mov	r0, r4
 801a52a:	bd70      	pop	{r4, r5, r6, pc}

0801a52c <__sfp_lock_acquire>:
 801a52c:	4801      	ldr	r0, [pc, #4]	; (801a534 <__sfp_lock_acquire+0x8>)
 801a52e:	f000 b8b3 	b.w	801a698 <__retarget_lock_acquire_recursive>
 801a532:	bf00      	nop
 801a534:	240069ad 	.word	0x240069ad

0801a538 <__sfp_lock_release>:
 801a538:	4801      	ldr	r0, [pc, #4]	; (801a540 <__sfp_lock_release+0x8>)
 801a53a:	f000 b8ae 	b.w	801a69a <__retarget_lock_release_recursive>
 801a53e:	bf00      	nop
 801a540:	240069ad 	.word	0x240069ad

0801a544 <__sinit_lock_acquire>:
 801a544:	4801      	ldr	r0, [pc, #4]	; (801a54c <__sinit_lock_acquire+0x8>)
 801a546:	f000 b8a7 	b.w	801a698 <__retarget_lock_acquire_recursive>
 801a54a:	bf00      	nop
 801a54c:	240069ae 	.word	0x240069ae

0801a550 <__sinit_lock_release>:
 801a550:	4801      	ldr	r0, [pc, #4]	; (801a558 <__sinit_lock_release+0x8>)
 801a552:	f000 b8a2 	b.w	801a69a <__retarget_lock_release_recursive>
 801a556:	bf00      	nop
 801a558:	240069ae 	.word	0x240069ae

0801a55c <__sinit>:
 801a55c:	b510      	push	{r4, lr}
 801a55e:	4604      	mov	r4, r0
 801a560:	f7ff fff0 	bl	801a544 <__sinit_lock_acquire>
 801a564:	69a3      	ldr	r3, [r4, #24]
 801a566:	b11b      	cbz	r3, 801a570 <__sinit+0x14>
 801a568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a56c:	f7ff bff0 	b.w	801a550 <__sinit_lock_release>
 801a570:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a574:	6523      	str	r3, [r4, #80]	; 0x50
 801a576:	4b13      	ldr	r3, [pc, #76]	; (801a5c4 <__sinit+0x68>)
 801a578:	4a13      	ldr	r2, [pc, #76]	; (801a5c8 <__sinit+0x6c>)
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a57e:	42a3      	cmp	r3, r4
 801a580:	bf04      	itt	eq
 801a582:	2301      	moveq	r3, #1
 801a584:	61a3      	streq	r3, [r4, #24]
 801a586:	4620      	mov	r0, r4
 801a588:	f000 f820 	bl	801a5cc <__sfp>
 801a58c:	6060      	str	r0, [r4, #4]
 801a58e:	4620      	mov	r0, r4
 801a590:	f000 f81c 	bl	801a5cc <__sfp>
 801a594:	60a0      	str	r0, [r4, #8]
 801a596:	4620      	mov	r0, r4
 801a598:	f000 f818 	bl	801a5cc <__sfp>
 801a59c:	2200      	movs	r2, #0
 801a59e:	60e0      	str	r0, [r4, #12]
 801a5a0:	2104      	movs	r1, #4
 801a5a2:	6860      	ldr	r0, [r4, #4]
 801a5a4:	f7ff ff82 	bl	801a4ac <std>
 801a5a8:	68a0      	ldr	r0, [r4, #8]
 801a5aa:	2201      	movs	r2, #1
 801a5ac:	2109      	movs	r1, #9
 801a5ae:	f7ff ff7d 	bl	801a4ac <std>
 801a5b2:	68e0      	ldr	r0, [r4, #12]
 801a5b4:	2202      	movs	r2, #2
 801a5b6:	2112      	movs	r1, #18
 801a5b8:	f7ff ff78 	bl	801a4ac <std>
 801a5bc:	2301      	movs	r3, #1
 801a5be:	61a3      	str	r3, [r4, #24]
 801a5c0:	e7d2      	b.n	801a568 <__sinit+0xc>
 801a5c2:	bf00      	nop
 801a5c4:	0801af04 	.word	0x0801af04
 801a5c8:	0801a4f5 	.word	0x0801a4f5

0801a5cc <__sfp>:
 801a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5ce:	4607      	mov	r7, r0
 801a5d0:	f7ff ffac 	bl	801a52c <__sfp_lock_acquire>
 801a5d4:	4b1e      	ldr	r3, [pc, #120]	; (801a650 <__sfp+0x84>)
 801a5d6:	681e      	ldr	r6, [r3, #0]
 801a5d8:	69b3      	ldr	r3, [r6, #24]
 801a5da:	b913      	cbnz	r3, 801a5e2 <__sfp+0x16>
 801a5dc:	4630      	mov	r0, r6
 801a5de:	f7ff ffbd 	bl	801a55c <__sinit>
 801a5e2:	3648      	adds	r6, #72	; 0x48
 801a5e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a5e8:	3b01      	subs	r3, #1
 801a5ea:	d503      	bpl.n	801a5f4 <__sfp+0x28>
 801a5ec:	6833      	ldr	r3, [r6, #0]
 801a5ee:	b30b      	cbz	r3, 801a634 <__sfp+0x68>
 801a5f0:	6836      	ldr	r6, [r6, #0]
 801a5f2:	e7f7      	b.n	801a5e4 <__sfp+0x18>
 801a5f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a5f8:	b9d5      	cbnz	r5, 801a630 <__sfp+0x64>
 801a5fa:	4b16      	ldr	r3, [pc, #88]	; (801a654 <__sfp+0x88>)
 801a5fc:	60e3      	str	r3, [r4, #12]
 801a5fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a602:	6665      	str	r5, [r4, #100]	; 0x64
 801a604:	f000 f847 	bl	801a696 <__retarget_lock_init_recursive>
 801a608:	f7ff ff96 	bl	801a538 <__sfp_lock_release>
 801a60c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a610:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a614:	6025      	str	r5, [r4, #0]
 801a616:	61a5      	str	r5, [r4, #24]
 801a618:	2208      	movs	r2, #8
 801a61a:	4629      	mov	r1, r5
 801a61c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a620:	f7ff fd44 	bl	801a0ac <memset>
 801a624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a62c:	4620      	mov	r0, r4
 801a62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a630:	3468      	adds	r4, #104	; 0x68
 801a632:	e7d9      	b.n	801a5e8 <__sfp+0x1c>
 801a634:	2104      	movs	r1, #4
 801a636:	4638      	mov	r0, r7
 801a638:	f7ff ff62 	bl	801a500 <__sfmoreglue>
 801a63c:	4604      	mov	r4, r0
 801a63e:	6030      	str	r0, [r6, #0]
 801a640:	2800      	cmp	r0, #0
 801a642:	d1d5      	bne.n	801a5f0 <__sfp+0x24>
 801a644:	f7ff ff78 	bl	801a538 <__sfp_lock_release>
 801a648:	230c      	movs	r3, #12
 801a64a:	603b      	str	r3, [r7, #0]
 801a64c:	e7ee      	b.n	801a62c <__sfp+0x60>
 801a64e:	bf00      	nop
 801a650:	0801af04 	.word	0x0801af04
 801a654:	ffff0001 	.word	0xffff0001

0801a658 <_fwalk_reent>:
 801a658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a65c:	4606      	mov	r6, r0
 801a65e:	4688      	mov	r8, r1
 801a660:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a664:	2700      	movs	r7, #0
 801a666:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a66a:	f1b9 0901 	subs.w	r9, r9, #1
 801a66e:	d505      	bpl.n	801a67c <_fwalk_reent+0x24>
 801a670:	6824      	ldr	r4, [r4, #0]
 801a672:	2c00      	cmp	r4, #0
 801a674:	d1f7      	bne.n	801a666 <_fwalk_reent+0xe>
 801a676:	4638      	mov	r0, r7
 801a678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a67c:	89ab      	ldrh	r3, [r5, #12]
 801a67e:	2b01      	cmp	r3, #1
 801a680:	d907      	bls.n	801a692 <_fwalk_reent+0x3a>
 801a682:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a686:	3301      	adds	r3, #1
 801a688:	d003      	beq.n	801a692 <_fwalk_reent+0x3a>
 801a68a:	4629      	mov	r1, r5
 801a68c:	4630      	mov	r0, r6
 801a68e:	47c0      	blx	r8
 801a690:	4307      	orrs	r7, r0
 801a692:	3568      	adds	r5, #104	; 0x68
 801a694:	e7e9      	b.n	801a66a <_fwalk_reent+0x12>

0801a696 <__retarget_lock_init_recursive>:
 801a696:	4770      	bx	lr

0801a698 <__retarget_lock_acquire_recursive>:
 801a698:	4770      	bx	lr

0801a69a <__retarget_lock_release_recursive>:
 801a69a:	4770      	bx	lr

0801a69c <__swhatbuf_r>:
 801a69c:	b570      	push	{r4, r5, r6, lr}
 801a69e:	460e      	mov	r6, r1
 801a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6a4:	2900      	cmp	r1, #0
 801a6a6:	b096      	sub	sp, #88	; 0x58
 801a6a8:	4614      	mov	r4, r2
 801a6aa:	461d      	mov	r5, r3
 801a6ac:	da08      	bge.n	801a6c0 <__swhatbuf_r+0x24>
 801a6ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	602a      	str	r2, [r5, #0]
 801a6b6:	061a      	lsls	r2, r3, #24
 801a6b8:	d410      	bmi.n	801a6dc <__swhatbuf_r+0x40>
 801a6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a6be:	e00e      	b.n	801a6de <__swhatbuf_r+0x42>
 801a6c0:	466a      	mov	r2, sp
 801a6c2:	f000 f9a7 	bl	801aa14 <_fstat_r>
 801a6c6:	2800      	cmp	r0, #0
 801a6c8:	dbf1      	blt.n	801a6ae <__swhatbuf_r+0x12>
 801a6ca:	9a01      	ldr	r2, [sp, #4]
 801a6cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a6d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a6d4:	425a      	negs	r2, r3
 801a6d6:	415a      	adcs	r2, r3
 801a6d8:	602a      	str	r2, [r5, #0]
 801a6da:	e7ee      	b.n	801a6ba <__swhatbuf_r+0x1e>
 801a6dc:	2340      	movs	r3, #64	; 0x40
 801a6de:	2000      	movs	r0, #0
 801a6e0:	6023      	str	r3, [r4, #0]
 801a6e2:	b016      	add	sp, #88	; 0x58
 801a6e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a6e8 <__smakebuf_r>:
 801a6e8:	898b      	ldrh	r3, [r1, #12]
 801a6ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6ec:	079d      	lsls	r5, r3, #30
 801a6ee:	4606      	mov	r6, r0
 801a6f0:	460c      	mov	r4, r1
 801a6f2:	d507      	bpl.n	801a704 <__smakebuf_r+0x1c>
 801a6f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	6123      	str	r3, [r4, #16]
 801a6fc:	2301      	movs	r3, #1
 801a6fe:	6163      	str	r3, [r4, #20]
 801a700:	b002      	add	sp, #8
 801a702:	bd70      	pop	{r4, r5, r6, pc}
 801a704:	ab01      	add	r3, sp, #4
 801a706:	466a      	mov	r2, sp
 801a708:	f7ff ffc8 	bl	801a69c <__swhatbuf_r>
 801a70c:	9900      	ldr	r1, [sp, #0]
 801a70e:	4605      	mov	r5, r0
 801a710:	4630      	mov	r0, r6
 801a712:	f000 f895 	bl	801a840 <_malloc_r>
 801a716:	b948      	cbnz	r0, 801a72c <__smakebuf_r+0x44>
 801a718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a71c:	059a      	lsls	r2, r3, #22
 801a71e:	d4ef      	bmi.n	801a700 <__smakebuf_r+0x18>
 801a720:	f023 0303 	bic.w	r3, r3, #3
 801a724:	f043 0302 	orr.w	r3, r3, #2
 801a728:	81a3      	strh	r3, [r4, #12]
 801a72a:	e7e3      	b.n	801a6f4 <__smakebuf_r+0xc>
 801a72c:	4b0d      	ldr	r3, [pc, #52]	; (801a764 <__smakebuf_r+0x7c>)
 801a72e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a730:	89a3      	ldrh	r3, [r4, #12]
 801a732:	6020      	str	r0, [r4, #0]
 801a734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a738:	81a3      	strh	r3, [r4, #12]
 801a73a:	9b00      	ldr	r3, [sp, #0]
 801a73c:	6163      	str	r3, [r4, #20]
 801a73e:	9b01      	ldr	r3, [sp, #4]
 801a740:	6120      	str	r0, [r4, #16]
 801a742:	b15b      	cbz	r3, 801a75c <__smakebuf_r+0x74>
 801a744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a748:	4630      	mov	r0, r6
 801a74a:	f000 f975 	bl	801aa38 <_isatty_r>
 801a74e:	b128      	cbz	r0, 801a75c <__smakebuf_r+0x74>
 801a750:	89a3      	ldrh	r3, [r4, #12]
 801a752:	f023 0303 	bic.w	r3, r3, #3
 801a756:	f043 0301 	orr.w	r3, r3, #1
 801a75a:	81a3      	strh	r3, [r4, #12]
 801a75c:	89a0      	ldrh	r0, [r4, #12]
 801a75e:	4305      	orrs	r5, r0
 801a760:	81a5      	strh	r5, [r4, #12]
 801a762:	e7cd      	b.n	801a700 <__smakebuf_r+0x18>
 801a764:	0801a4f5 	.word	0x0801a4f5

0801a768 <_free_r>:
 801a768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a76a:	2900      	cmp	r1, #0
 801a76c:	d044      	beq.n	801a7f8 <_free_r+0x90>
 801a76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a772:	9001      	str	r0, [sp, #4]
 801a774:	2b00      	cmp	r3, #0
 801a776:	f1a1 0404 	sub.w	r4, r1, #4
 801a77a:	bfb8      	it	lt
 801a77c:	18e4      	addlt	r4, r4, r3
 801a77e:	f000 f97d 	bl	801aa7c <__malloc_lock>
 801a782:	4a1e      	ldr	r2, [pc, #120]	; (801a7fc <_free_r+0x94>)
 801a784:	9801      	ldr	r0, [sp, #4]
 801a786:	6813      	ldr	r3, [r2, #0]
 801a788:	b933      	cbnz	r3, 801a798 <_free_r+0x30>
 801a78a:	6063      	str	r3, [r4, #4]
 801a78c:	6014      	str	r4, [r2, #0]
 801a78e:	b003      	add	sp, #12
 801a790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a794:	f000 b978 	b.w	801aa88 <__malloc_unlock>
 801a798:	42a3      	cmp	r3, r4
 801a79a:	d908      	bls.n	801a7ae <_free_r+0x46>
 801a79c:	6825      	ldr	r5, [r4, #0]
 801a79e:	1961      	adds	r1, r4, r5
 801a7a0:	428b      	cmp	r3, r1
 801a7a2:	bf01      	itttt	eq
 801a7a4:	6819      	ldreq	r1, [r3, #0]
 801a7a6:	685b      	ldreq	r3, [r3, #4]
 801a7a8:	1949      	addeq	r1, r1, r5
 801a7aa:	6021      	streq	r1, [r4, #0]
 801a7ac:	e7ed      	b.n	801a78a <_free_r+0x22>
 801a7ae:	461a      	mov	r2, r3
 801a7b0:	685b      	ldr	r3, [r3, #4]
 801a7b2:	b10b      	cbz	r3, 801a7b8 <_free_r+0x50>
 801a7b4:	42a3      	cmp	r3, r4
 801a7b6:	d9fa      	bls.n	801a7ae <_free_r+0x46>
 801a7b8:	6811      	ldr	r1, [r2, #0]
 801a7ba:	1855      	adds	r5, r2, r1
 801a7bc:	42a5      	cmp	r5, r4
 801a7be:	d10b      	bne.n	801a7d8 <_free_r+0x70>
 801a7c0:	6824      	ldr	r4, [r4, #0]
 801a7c2:	4421      	add	r1, r4
 801a7c4:	1854      	adds	r4, r2, r1
 801a7c6:	42a3      	cmp	r3, r4
 801a7c8:	6011      	str	r1, [r2, #0]
 801a7ca:	d1e0      	bne.n	801a78e <_free_r+0x26>
 801a7cc:	681c      	ldr	r4, [r3, #0]
 801a7ce:	685b      	ldr	r3, [r3, #4]
 801a7d0:	6053      	str	r3, [r2, #4]
 801a7d2:	4421      	add	r1, r4
 801a7d4:	6011      	str	r1, [r2, #0]
 801a7d6:	e7da      	b.n	801a78e <_free_r+0x26>
 801a7d8:	d902      	bls.n	801a7e0 <_free_r+0x78>
 801a7da:	230c      	movs	r3, #12
 801a7dc:	6003      	str	r3, [r0, #0]
 801a7de:	e7d6      	b.n	801a78e <_free_r+0x26>
 801a7e0:	6825      	ldr	r5, [r4, #0]
 801a7e2:	1961      	adds	r1, r4, r5
 801a7e4:	428b      	cmp	r3, r1
 801a7e6:	bf04      	itt	eq
 801a7e8:	6819      	ldreq	r1, [r3, #0]
 801a7ea:	685b      	ldreq	r3, [r3, #4]
 801a7ec:	6063      	str	r3, [r4, #4]
 801a7ee:	bf04      	itt	eq
 801a7f0:	1949      	addeq	r1, r1, r5
 801a7f2:	6021      	streq	r1, [r4, #0]
 801a7f4:	6054      	str	r4, [r2, #4]
 801a7f6:	e7ca      	b.n	801a78e <_free_r+0x26>
 801a7f8:	b003      	add	sp, #12
 801a7fa:	bd30      	pop	{r4, r5, pc}
 801a7fc:	240069b0 	.word	0x240069b0

0801a800 <sbrk_aligned>:
 801a800:	b570      	push	{r4, r5, r6, lr}
 801a802:	4e0e      	ldr	r6, [pc, #56]	; (801a83c <sbrk_aligned+0x3c>)
 801a804:	460c      	mov	r4, r1
 801a806:	6831      	ldr	r1, [r6, #0]
 801a808:	4605      	mov	r5, r0
 801a80a:	b911      	cbnz	r1, 801a812 <sbrk_aligned+0x12>
 801a80c:	f000 f88c 	bl	801a928 <_sbrk_r>
 801a810:	6030      	str	r0, [r6, #0]
 801a812:	4621      	mov	r1, r4
 801a814:	4628      	mov	r0, r5
 801a816:	f000 f887 	bl	801a928 <_sbrk_r>
 801a81a:	1c43      	adds	r3, r0, #1
 801a81c:	d00a      	beq.n	801a834 <sbrk_aligned+0x34>
 801a81e:	1cc4      	adds	r4, r0, #3
 801a820:	f024 0403 	bic.w	r4, r4, #3
 801a824:	42a0      	cmp	r0, r4
 801a826:	d007      	beq.n	801a838 <sbrk_aligned+0x38>
 801a828:	1a21      	subs	r1, r4, r0
 801a82a:	4628      	mov	r0, r5
 801a82c:	f000 f87c 	bl	801a928 <_sbrk_r>
 801a830:	3001      	adds	r0, #1
 801a832:	d101      	bne.n	801a838 <sbrk_aligned+0x38>
 801a834:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a838:	4620      	mov	r0, r4
 801a83a:	bd70      	pop	{r4, r5, r6, pc}
 801a83c:	240069b4 	.word	0x240069b4

0801a840 <_malloc_r>:
 801a840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a844:	1ccd      	adds	r5, r1, #3
 801a846:	f025 0503 	bic.w	r5, r5, #3
 801a84a:	3508      	adds	r5, #8
 801a84c:	2d0c      	cmp	r5, #12
 801a84e:	bf38      	it	cc
 801a850:	250c      	movcc	r5, #12
 801a852:	2d00      	cmp	r5, #0
 801a854:	4607      	mov	r7, r0
 801a856:	db01      	blt.n	801a85c <_malloc_r+0x1c>
 801a858:	42a9      	cmp	r1, r5
 801a85a:	d905      	bls.n	801a868 <_malloc_r+0x28>
 801a85c:	230c      	movs	r3, #12
 801a85e:	603b      	str	r3, [r7, #0]
 801a860:	2600      	movs	r6, #0
 801a862:	4630      	mov	r0, r6
 801a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a868:	4e2e      	ldr	r6, [pc, #184]	; (801a924 <_malloc_r+0xe4>)
 801a86a:	f000 f907 	bl	801aa7c <__malloc_lock>
 801a86e:	6833      	ldr	r3, [r6, #0]
 801a870:	461c      	mov	r4, r3
 801a872:	bb34      	cbnz	r4, 801a8c2 <_malloc_r+0x82>
 801a874:	4629      	mov	r1, r5
 801a876:	4638      	mov	r0, r7
 801a878:	f7ff ffc2 	bl	801a800 <sbrk_aligned>
 801a87c:	1c43      	adds	r3, r0, #1
 801a87e:	4604      	mov	r4, r0
 801a880:	d14d      	bne.n	801a91e <_malloc_r+0xde>
 801a882:	6834      	ldr	r4, [r6, #0]
 801a884:	4626      	mov	r6, r4
 801a886:	2e00      	cmp	r6, #0
 801a888:	d140      	bne.n	801a90c <_malloc_r+0xcc>
 801a88a:	6823      	ldr	r3, [r4, #0]
 801a88c:	4631      	mov	r1, r6
 801a88e:	4638      	mov	r0, r7
 801a890:	eb04 0803 	add.w	r8, r4, r3
 801a894:	f000 f848 	bl	801a928 <_sbrk_r>
 801a898:	4580      	cmp	r8, r0
 801a89a:	d13a      	bne.n	801a912 <_malloc_r+0xd2>
 801a89c:	6821      	ldr	r1, [r4, #0]
 801a89e:	3503      	adds	r5, #3
 801a8a0:	1a6d      	subs	r5, r5, r1
 801a8a2:	f025 0503 	bic.w	r5, r5, #3
 801a8a6:	3508      	adds	r5, #8
 801a8a8:	2d0c      	cmp	r5, #12
 801a8aa:	bf38      	it	cc
 801a8ac:	250c      	movcc	r5, #12
 801a8ae:	4629      	mov	r1, r5
 801a8b0:	4638      	mov	r0, r7
 801a8b2:	f7ff ffa5 	bl	801a800 <sbrk_aligned>
 801a8b6:	3001      	adds	r0, #1
 801a8b8:	d02b      	beq.n	801a912 <_malloc_r+0xd2>
 801a8ba:	6823      	ldr	r3, [r4, #0]
 801a8bc:	442b      	add	r3, r5
 801a8be:	6023      	str	r3, [r4, #0]
 801a8c0:	e00e      	b.n	801a8e0 <_malloc_r+0xa0>
 801a8c2:	6822      	ldr	r2, [r4, #0]
 801a8c4:	1b52      	subs	r2, r2, r5
 801a8c6:	d41e      	bmi.n	801a906 <_malloc_r+0xc6>
 801a8c8:	2a0b      	cmp	r2, #11
 801a8ca:	d916      	bls.n	801a8fa <_malloc_r+0xba>
 801a8cc:	1961      	adds	r1, r4, r5
 801a8ce:	42a3      	cmp	r3, r4
 801a8d0:	6025      	str	r5, [r4, #0]
 801a8d2:	bf18      	it	ne
 801a8d4:	6059      	strne	r1, [r3, #4]
 801a8d6:	6863      	ldr	r3, [r4, #4]
 801a8d8:	bf08      	it	eq
 801a8da:	6031      	streq	r1, [r6, #0]
 801a8dc:	5162      	str	r2, [r4, r5]
 801a8de:	604b      	str	r3, [r1, #4]
 801a8e0:	4638      	mov	r0, r7
 801a8e2:	f104 060b 	add.w	r6, r4, #11
 801a8e6:	f000 f8cf 	bl	801aa88 <__malloc_unlock>
 801a8ea:	f026 0607 	bic.w	r6, r6, #7
 801a8ee:	1d23      	adds	r3, r4, #4
 801a8f0:	1af2      	subs	r2, r6, r3
 801a8f2:	d0b6      	beq.n	801a862 <_malloc_r+0x22>
 801a8f4:	1b9b      	subs	r3, r3, r6
 801a8f6:	50a3      	str	r3, [r4, r2]
 801a8f8:	e7b3      	b.n	801a862 <_malloc_r+0x22>
 801a8fa:	6862      	ldr	r2, [r4, #4]
 801a8fc:	42a3      	cmp	r3, r4
 801a8fe:	bf0c      	ite	eq
 801a900:	6032      	streq	r2, [r6, #0]
 801a902:	605a      	strne	r2, [r3, #4]
 801a904:	e7ec      	b.n	801a8e0 <_malloc_r+0xa0>
 801a906:	4623      	mov	r3, r4
 801a908:	6864      	ldr	r4, [r4, #4]
 801a90a:	e7b2      	b.n	801a872 <_malloc_r+0x32>
 801a90c:	4634      	mov	r4, r6
 801a90e:	6876      	ldr	r6, [r6, #4]
 801a910:	e7b9      	b.n	801a886 <_malloc_r+0x46>
 801a912:	230c      	movs	r3, #12
 801a914:	603b      	str	r3, [r7, #0]
 801a916:	4638      	mov	r0, r7
 801a918:	f000 f8b6 	bl	801aa88 <__malloc_unlock>
 801a91c:	e7a1      	b.n	801a862 <_malloc_r+0x22>
 801a91e:	6025      	str	r5, [r4, #0]
 801a920:	e7de      	b.n	801a8e0 <_malloc_r+0xa0>
 801a922:	bf00      	nop
 801a924:	240069b0 	.word	0x240069b0

0801a928 <_sbrk_r>:
 801a928:	b538      	push	{r3, r4, r5, lr}
 801a92a:	4d06      	ldr	r5, [pc, #24]	; (801a944 <_sbrk_r+0x1c>)
 801a92c:	2300      	movs	r3, #0
 801a92e:	4604      	mov	r4, r0
 801a930:	4608      	mov	r0, r1
 801a932:	602b      	str	r3, [r5, #0]
 801a934:	f7ea f86a 	bl	8004a0c <_sbrk>
 801a938:	1c43      	adds	r3, r0, #1
 801a93a:	d102      	bne.n	801a942 <_sbrk_r+0x1a>
 801a93c:	682b      	ldr	r3, [r5, #0]
 801a93e:	b103      	cbz	r3, 801a942 <_sbrk_r+0x1a>
 801a940:	6023      	str	r3, [r4, #0]
 801a942:	bd38      	pop	{r3, r4, r5, pc}
 801a944:	240069b8 	.word	0x240069b8

0801a948 <__sread>:
 801a948:	b510      	push	{r4, lr}
 801a94a:	460c      	mov	r4, r1
 801a94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a950:	f000 f8a0 	bl	801aa94 <_read_r>
 801a954:	2800      	cmp	r0, #0
 801a956:	bfab      	itete	ge
 801a958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a95a:	89a3      	ldrhlt	r3, [r4, #12]
 801a95c:	181b      	addge	r3, r3, r0
 801a95e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a962:	bfac      	ite	ge
 801a964:	6563      	strge	r3, [r4, #84]	; 0x54
 801a966:	81a3      	strhlt	r3, [r4, #12]
 801a968:	bd10      	pop	{r4, pc}

0801a96a <__swrite>:
 801a96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a96e:	461f      	mov	r7, r3
 801a970:	898b      	ldrh	r3, [r1, #12]
 801a972:	05db      	lsls	r3, r3, #23
 801a974:	4605      	mov	r5, r0
 801a976:	460c      	mov	r4, r1
 801a978:	4616      	mov	r6, r2
 801a97a:	d505      	bpl.n	801a988 <__swrite+0x1e>
 801a97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a980:	2302      	movs	r3, #2
 801a982:	2200      	movs	r2, #0
 801a984:	f000 f868 	bl	801aa58 <_lseek_r>
 801a988:	89a3      	ldrh	r3, [r4, #12]
 801a98a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a98e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a992:	81a3      	strh	r3, [r4, #12]
 801a994:	4632      	mov	r2, r6
 801a996:	463b      	mov	r3, r7
 801a998:	4628      	mov	r0, r5
 801a99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a99e:	f000 b817 	b.w	801a9d0 <_write_r>

0801a9a2 <__sseek>:
 801a9a2:	b510      	push	{r4, lr}
 801a9a4:	460c      	mov	r4, r1
 801a9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9aa:	f000 f855 	bl	801aa58 <_lseek_r>
 801a9ae:	1c43      	adds	r3, r0, #1
 801a9b0:	89a3      	ldrh	r3, [r4, #12]
 801a9b2:	bf15      	itete	ne
 801a9b4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a9b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a9ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a9be:	81a3      	strheq	r3, [r4, #12]
 801a9c0:	bf18      	it	ne
 801a9c2:	81a3      	strhne	r3, [r4, #12]
 801a9c4:	bd10      	pop	{r4, pc}

0801a9c6 <__sclose>:
 801a9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9ca:	f000 b813 	b.w	801a9f4 <_close_r>
	...

0801a9d0 <_write_r>:
 801a9d0:	b538      	push	{r3, r4, r5, lr}
 801a9d2:	4d07      	ldr	r5, [pc, #28]	; (801a9f0 <_write_r+0x20>)
 801a9d4:	4604      	mov	r4, r0
 801a9d6:	4608      	mov	r0, r1
 801a9d8:	4611      	mov	r1, r2
 801a9da:	2200      	movs	r2, #0
 801a9dc:	602a      	str	r2, [r5, #0]
 801a9de:	461a      	mov	r2, r3
 801a9e0:	f7e9 ffc3 	bl	800496a <_write>
 801a9e4:	1c43      	adds	r3, r0, #1
 801a9e6:	d102      	bne.n	801a9ee <_write_r+0x1e>
 801a9e8:	682b      	ldr	r3, [r5, #0]
 801a9ea:	b103      	cbz	r3, 801a9ee <_write_r+0x1e>
 801a9ec:	6023      	str	r3, [r4, #0]
 801a9ee:	bd38      	pop	{r3, r4, r5, pc}
 801a9f0:	240069b8 	.word	0x240069b8

0801a9f4 <_close_r>:
 801a9f4:	b538      	push	{r3, r4, r5, lr}
 801a9f6:	4d06      	ldr	r5, [pc, #24]	; (801aa10 <_close_r+0x1c>)
 801a9f8:	2300      	movs	r3, #0
 801a9fa:	4604      	mov	r4, r0
 801a9fc:	4608      	mov	r0, r1
 801a9fe:	602b      	str	r3, [r5, #0]
 801aa00:	f7e9 ffcf 	bl	80049a2 <_close>
 801aa04:	1c43      	adds	r3, r0, #1
 801aa06:	d102      	bne.n	801aa0e <_close_r+0x1a>
 801aa08:	682b      	ldr	r3, [r5, #0]
 801aa0a:	b103      	cbz	r3, 801aa0e <_close_r+0x1a>
 801aa0c:	6023      	str	r3, [r4, #0]
 801aa0e:	bd38      	pop	{r3, r4, r5, pc}
 801aa10:	240069b8 	.word	0x240069b8

0801aa14 <_fstat_r>:
 801aa14:	b538      	push	{r3, r4, r5, lr}
 801aa16:	4d07      	ldr	r5, [pc, #28]	; (801aa34 <_fstat_r+0x20>)
 801aa18:	2300      	movs	r3, #0
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	4608      	mov	r0, r1
 801aa1e:	4611      	mov	r1, r2
 801aa20:	602b      	str	r3, [r5, #0]
 801aa22:	f7e9 ffca 	bl	80049ba <_fstat>
 801aa26:	1c43      	adds	r3, r0, #1
 801aa28:	d102      	bne.n	801aa30 <_fstat_r+0x1c>
 801aa2a:	682b      	ldr	r3, [r5, #0]
 801aa2c:	b103      	cbz	r3, 801aa30 <_fstat_r+0x1c>
 801aa2e:	6023      	str	r3, [r4, #0]
 801aa30:	bd38      	pop	{r3, r4, r5, pc}
 801aa32:	bf00      	nop
 801aa34:	240069b8 	.word	0x240069b8

0801aa38 <_isatty_r>:
 801aa38:	b538      	push	{r3, r4, r5, lr}
 801aa3a:	4d06      	ldr	r5, [pc, #24]	; (801aa54 <_isatty_r+0x1c>)
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	4604      	mov	r4, r0
 801aa40:	4608      	mov	r0, r1
 801aa42:	602b      	str	r3, [r5, #0]
 801aa44:	f7e9 ffc9 	bl	80049da <_isatty>
 801aa48:	1c43      	adds	r3, r0, #1
 801aa4a:	d102      	bne.n	801aa52 <_isatty_r+0x1a>
 801aa4c:	682b      	ldr	r3, [r5, #0]
 801aa4e:	b103      	cbz	r3, 801aa52 <_isatty_r+0x1a>
 801aa50:	6023      	str	r3, [r4, #0]
 801aa52:	bd38      	pop	{r3, r4, r5, pc}
 801aa54:	240069b8 	.word	0x240069b8

0801aa58 <_lseek_r>:
 801aa58:	b538      	push	{r3, r4, r5, lr}
 801aa5a:	4d07      	ldr	r5, [pc, #28]	; (801aa78 <_lseek_r+0x20>)
 801aa5c:	4604      	mov	r4, r0
 801aa5e:	4608      	mov	r0, r1
 801aa60:	4611      	mov	r1, r2
 801aa62:	2200      	movs	r2, #0
 801aa64:	602a      	str	r2, [r5, #0]
 801aa66:	461a      	mov	r2, r3
 801aa68:	f7e9 ffc2 	bl	80049f0 <_lseek>
 801aa6c:	1c43      	adds	r3, r0, #1
 801aa6e:	d102      	bne.n	801aa76 <_lseek_r+0x1e>
 801aa70:	682b      	ldr	r3, [r5, #0]
 801aa72:	b103      	cbz	r3, 801aa76 <_lseek_r+0x1e>
 801aa74:	6023      	str	r3, [r4, #0]
 801aa76:	bd38      	pop	{r3, r4, r5, pc}
 801aa78:	240069b8 	.word	0x240069b8

0801aa7c <__malloc_lock>:
 801aa7c:	4801      	ldr	r0, [pc, #4]	; (801aa84 <__malloc_lock+0x8>)
 801aa7e:	f7ff be0b 	b.w	801a698 <__retarget_lock_acquire_recursive>
 801aa82:	bf00      	nop
 801aa84:	240069ac 	.word	0x240069ac

0801aa88 <__malloc_unlock>:
 801aa88:	4801      	ldr	r0, [pc, #4]	; (801aa90 <__malloc_unlock+0x8>)
 801aa8a:	f7ff be06 	b.w	801a69a <__retarget_lock_release_recursive>
 801aa8e:	bf00      	nop
 801aa90:	240069ac 	.word	0x240069ac

0801aa94 <_read_r>:
 801aa94:	b538      	push	{r3, r4, r5, lr}
 801aa96:	4d07      	ldr	r5, [pc, #28]	; (801aab4 <_read_r+0x20>)
 801aa98:	4604      	mov	r4, r0
 801aa9a:	4608      	mov	r0, r1
 801aa9c:	4611      	mov	r1, r2
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	602a      	str	r2, [r5, #0]
 801aaa2:	461a      	mov	r2, r3
 801aaa4:	f7e9 ff44 	bl	8004930 <_read>
 801aaa8:	1c43      	adds	r3, r0, #1
 801aaaa:	d102      	bne.n	801aab2 <_read_r+0x1e>
 801aaac:	682b      	ldr	r3, [r5, #0]
 801aaae:	b103      	cbz	r3, 801aab2 <_read_r+0x1e>
 801aab0:	6023      	str	r3, [r4, #0]
 801aab2:	bd38      	pop	{r3, r4, r5, pc}
 801aab4:	240069b8 	.word	0x240069b8

0801aab8 <_init>:
 801aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaba:	bf00      	nop
 801aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aabe:	bc08      	pop	{r3}
 801aac0:	469e      	mov	lr, r3
 801aac2:	4770      	bx	lr

0801aac4 <_fini>:
 801aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aac6:	bf00      	nop
 801aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aaca:	bc08      	pop	{r3}
 801aacc:	469e      	mov	lr, r3
 801aace:	4770      	bx	lr
