
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08006f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a2c  24000078  08007014  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24004aa4  08007014  00024aa4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018f5d  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000334e  00000000  00000000  00039003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001500  00000000  00000000  0003c358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000013a8  00000000  00000000  0003d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000049e5  00000000  00000000  0003ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00016504  00000000  00000000  000435e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001690d1  00000000  00000000  00059ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c2bba  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005fd0  00000000  00000000  001c2c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006e44 	.word	0x08006e44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08006e44 	.word	0x08006e44

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <HAL_TIM_OC_DelayElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a08      	ldr	r2, [pc, #32]	; (80003ac <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d108      	bne.n	80003a2 <HAL_TIM_OC_DelayElapsedCallback+0x22>
  {
	  printf("Sample PMT\n");
 8000390:	4807      	ldr	r0, [pc, #28]	; (80003b0 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000392:	f005 fdd9 	bl	8005f48 <puts>
	  osEventFlagsSet(evt_id, 0x0001); // Set the event flag for Task1
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2101      	movs	r1, #1
 800039c:	4618      	mov	r0, r3
 800039e:	f002 fd43 	bl	8002e28 <osEventFlagsSet>

  }
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	24000094 	.word	0x24000094
 80003b0:	08006e6c 	.word	0x08006e6c
 80003b4:	240000ec 	.word	0x240000ec

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 fbc8 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f832 	bl	8000428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM1_Init();
 80003c4:	f000 f89a 	bl	80004fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80003c8:	2100      	movs	r1, #0
 80003ca:	480f      	ldr	r0, [pc, #60]	; (8000408 <main+0x50>)
 80003cc:	f001 fe24 	bl	8002018 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003d0:	f002 fbf4 	bl	8002bbc <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <main+0x54>)
 80003d6:	2100      	movs	r1, #0
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <main+0x58>)
 80003da:	f002 fc39 	bl	8002c50 <osThreadNew>
 80003de:	4603      	mov	r3, r0
 80003e0:	4a0c      	ldr	r2, [pc, #48]	; (8000414 <main+0x5c>)
 80003e2:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80003e4:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <main+0x60>)
 80003e6:	2100      	movs	r1, #0
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <main+0x64>)
 80003ea:	f002 fc31 	bl	8002c50 <osThreadNew>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a0b      	ldr	r2, [pc, #44]	; (8000420 <main+0x68>)
 80003f2:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  evt_id = osEventFlagsNew(NULL); // Create an event flags group
 80003f4:	2000      	movs	r0, #0
 80003f6:	f002 fcd8 	bl	8002daa <osEventFlagsNew>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a09      	ldr	r2, [pc, #36]	; (8000424 <main+0x6c>)
 80003fe:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000400:	f002 fc00 	bl	8002c04 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000404:	e7fe      	b.n	8000404 <main+0x4c>
 8000406:	bf00      	nop
 8000408:	24000094 	.word	0x24000094
 800040c:	08006ea4 	.word	0x08006ea4
 8000410:	080005a5 	.word	0x080005a5
 8000414:	240000e0 	.word	0x240000e0
 8000418:	08006ec8 	.word	0x08006ec8
 800041c:	080005e5 	.word	0x080005e5
 8000420:	240000e4 	.word	0x240000e4
 8000424:	240000ec 	.word	0x240000ec

08000428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b09c      	sub	sp, #112	; 0x70
 800042c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800042e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000432:	224c      	movs	r2, #76	; 0x4c
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f005 fcf8 	bl	8005e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2220      	movs	r2, #32
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f005 fcf2 	bl	8005e2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000448:	2002      	movs	r0, #2
 800044a:	f000 fcc9 	bl	8000de0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800044e:	2300      	movs	r3, #0
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <SystemClock_Config+0xcc>)
 8000454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000456:	4a27      	ldr	r2, [pc, #156]	; (80004f4 <SystemClock_Config+0xcc>)
 8000458:	f023 0301 	bic.w	r3, r3, #1
 800045c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <SystemClock_Config+0xcc>)
 8000460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	4b23      	ldr	r3, [pc, #140]	; (80004f8 <SystemClock_Config+0xd0>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000470:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <SystemClock_Config+0xd0>)
 8000472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <SystemClock_Config+0xd0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000484:	bf00      	nop
 8000486:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <SystemClock_Config+0xd0>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800048e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000492:	d1f8      	bne.n	8000486 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000494:	2302      	movs	r3, #2
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000498:	2301      	movs	r3, #1
 800049a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049c:	2340      	movs	r3, #64	; 0x40
 800049e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fcd3 	bl	8000e54 <HAL_RCC_OscConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004b4:	f000 f8b6 	bl	8000624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	233f      	movs	r3, #63	; 0x3f
 80004ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2101      	movs	r1, #1
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 f913 	bl	8001708 <HAL_RCC_ClockConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80004e8:	f000 f89c 	bl	8000624 <Error_Handler>
  }
}
 80004ec:	bf00      	nop
 80004ee:	3770      	adds	r7, #112	; 0x70
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	58000400 	.word	0x58000400
 80004f8:	58024800 	.word	0x58024800

080004fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	f107 0310 	add.w	r3, r7, #16
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_TIM1_Init+0xa0>)
 800051c:	4a20      	ldr	r2, [pc, #128]	; (80005a0 <MX_TIM1_Init+0xa4>)
 800051e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_TIM1_Init+0xa0>)
 8000522:	227f      	movs	r2, #127	; 0x7f
 8000524:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_TIM1_Init+0xa0>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_TIM1_Init+0xa0>)
 800052e:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000532:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_TIM1_Init+0xa0>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_TIM1_Init+0xa0>)
 800053c:	2200      	movs	r2, #0
 800053e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_TIM1_Init+0xa0>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000546:	4815      	ldr	r0, [pc, #84]	; (800059c <MX_TIM1_Init+0xa0>)
 8000548:	f001 fc96 	bl	8001e78 <HAL_TIM_Base_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000552:	f000 f867 	bl	8000624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	480e      	ldr	r0, [pc, #56]	; (800059c <MX_TIM1_Init+0xa0>)
 8000564:	f001 ffba 	bl	80024dc <HAL_TIM_ConfigClockSource>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800056e:	f000 f859 	bl	8000624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_TIM1_Init+0xa0>)
 8000584:	f002 fa2a 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800058e:	f000 f849 	bl	8000624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	3720      	adds	r7, #32
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	24000094 	.word	0x24000094
 80005a0:	40010000 	.word	0x40010000

080005a4 <StartTask1>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(evt_id, 0x0001, osFlagsWaitAny, osWaitForever);
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <StartTask1+0x34>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	f002 fc7a 	bl	8002eb0 <osEventFlagsWait>
		pmt_seq++;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <StartTask1+0x38>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <StartTask1+0x38>)
 80005c6:	701a      	strb	r2, [r3, #0]
		printf("PMT: %d\n", pmt_seq);
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <StartTask1+0x38>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <StartTask1+0x3c>)
 80005d0:	f005 fc34 	bl	8005e3c <iprintf>
	    osEventFlagsWait(evt_id, 0x0001, osFlagsWaitAny, osWaitForever);
 80005d4:	e7ea      	b.n	80005ac <StartTask1+0x8>
 80005d6:	bf00      	nop
 80005d8:	240000ec 	.word	0x240000ec
 80005dc:	240000e8 	.word	0x240000e8
 80005e0:	08006e78 	.word	0x08006e78

080005e4 <StartTask2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	/* Infinite loop */
	for (;;) {
		printf("Task-2\n");
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <StartTask2+0x18>)
 80005ee:	f005 fcab 	bl	8005f48 <puts>
		osDelay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f002 fbbd 	bl	8002d74 <osDelay>
		printf("Task-2\n");
 80005fa:	e7f7      	b.n	80005ec <StartTask2+0x8>
 80005fc:	08006e84 	.word	0x08006e84

08000600 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d101      	bne.n	8000616 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000612:	f000 fad9 	bl	8000bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40001000 	.word	0x40001000

08000624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800062c:	e7fe      	b.n	800062c <Error_Handler+0x8>
	...

08000630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <HAL_MspInit+0x38>)
 8000638:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <HAL_MspInit+0x38>)
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <HAL_MspInit+0x38>)
 8000648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	210f      	movs	r1, #15
 8000658:	f06f 0001 	mvn.w	r0, #1
 800065c:	f000 fb98 	bl	8000d90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58024400 	.word	0x58024400

0800066c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <HAL_TIM_Base_MspInit+0x78>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d12e      	bne.n	80006dc <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 8000680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000684:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <HAL_TIM_Base_MspInit+0x7c>)
 8000690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2105      	movs	r1, #5
 80006a0:	2018      	movs	r0, #24
 80006a2:	f000 fb75 	bl	8000d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80006a6:	2018      	movs	r0, #24
 80006a8:	f000 fb8c 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2105      	movs	r1, #5
 80006b0:	2019      	movs	r0, #25
 80006b2:	f000 fb6d 	bl	8000d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006b6:	2019      	movs	r0, #25
 80006b8:	f000 fb84 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2105      	movs	r1, #5
 80006c0:	201a      	movs	r0, #26
 80006c2:	f000 fb65 	bl	8000d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80006c6:	201a      	movs	r0, #26
 80006c8:	f000 fb7c 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2105      	movs	r1, #5
 80006d0:	201b      	movs	r0, #27
 80006d2:	f000 fb5d 	bl	8000d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80006d6:	201b      	movs	r0, #27
 80006d8:	f000 fb74 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40010000 	.word	0x40010000
 80006e8:	58024400 	.word	0x58024400

080006ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b090      	sub	sp, #64	; 0x40
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d827      	bhi.n	800074a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80006fa:	2200      	movs	r2, #0
 80006fc:	6879      	ldr	r1, [r7, #4]
 80006fe:	2036      	movs	r0, #54	; 0x36
 8000700:	f000 fb46 	bl	8000d90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000704:	2036      	movs	r0, #54	; 0x36
 8000706:	f000 fb5d 	bl	8000dc4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800070a:	4a29      	ldr	r2, [pc, #164]	; (80007b0 <HAL_InitTick+0xc4>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <HAL_InitTick+0xc8>)
 8000712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000716:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <HAL_InitTick+0xc8>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <HAL_InitTick+0xc8>)
 8000722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000726:	f003 0310 	and.w	r3, r3, #16
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800072e:	f107 0210 	add.w	r2, r7, #16
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fb5b 	bl	8001df4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000744:	2b00      	cmp	r3, #0
 8000746:	d106      	bne.n	8000756 <HAL_InitTick+0x6a>
 8000748:	e001      	b.n	800074e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e02b      	b.n	80007a6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800074e:	f001 fb3b 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8000752:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000754:	e004      	b.n	8000760 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000756:	f001 fb37 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 800075a:	4603      	mov	r3, r0
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <HAL_InitTick+0xcc>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	0c9b      	lsrs	r3, r3, #18
 800076a:	3b01      	subs	r3, #1
 800076c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_InitTick+0xd0>)
 8000770:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <HAL_InitTick+0xd4>)
 8000772:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <HAL_InitTick+0xd0>)
 8000776:	f240 32e7 	movw	r2, #999	; 0x3e7
 800077a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_InitTick+0xd0>)
 800077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000780:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_InitTick+0xd0>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_InitTick+0xd0>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_InitTick+0xd0>)
 8000790:	f001 fb72 	bl	8001e78 <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d104      	bne.n	80007a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800079a:	4808      	ldr	r0, [pc, #32]	; (80007bc <HAL_InitTick+0xd0>)
 800079c:	f001 fbc4 	bl	8001f28 <HAL_TIM_Base_Start_IT>
 80007a0:	4603      	mov	r3, r0
 80007a2:	e000      	b.n	80007a6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3740      	adds	r7, #64	; 0x40
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	24000008 	.word	0x24000008
 80007b4:	58024400 	.word	0x58024400
 80007b8:	431bde83 	.word	0x431bde83
 80007bc:	240000f0 	.word	0x240000f0
 80007c0:	40001000 	.word	0x40001000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <TIM1_BRK_IRQHandler+0x10>)
 80007f6:	f001 fd69 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	24000094 	.word	0x24000094

08000804 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <TIM1_UP_IRQHandler+0x10>)
 800080a:	f001 fd5f 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	24000094 	.word	0x24000094

08000818 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <TIM1_TRG_COM_IRQHandler+0x10>)
 800081e:	f001 fd55 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	24000094 	.word	0x24000094

0800082c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <TIM1_CC_IRQHandler+0x10>)
 8000832:	f001 fd4b 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	24000094 	.word	0x24000094

08000840 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <TIM6_DAC_IRQHandler+0x10>)
 8000846:	f001 fd41 	bl	80022cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	240000f0 	.word	0x240000f0

08000854 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <ITM_SendChar+0x48>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <ITM_SendChar+0x48>)
 8000864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000868:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ITM_SendChar+0x4c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <ITM_SendChar+0x4c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8000876:	bf00      	nop
 8000878:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f8      	beq.n	8000878 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8000886:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	6013      	str	r3, [r2, #0]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000edfc 	.word	0xe000edfc
 80008a0:	e0000e00 	.word	0xe0000e00

080008a4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e00a      	b.n	80008cc <_read+0x28>
		*ptr++ = __io_getchar();
 80008b6:	f3af 8000 	nop.w
 80008ba:	4601      	mov	r1, r0
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	60ba      	str	r2, [r7, #8]
 80008c2:	b2ca      	uxtb	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf0      	blt.n	80008b6 <_read+0x12>
	}

	return len;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e009      	b.n	8000904 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffab 	bl	8000854 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf1      	blt.n	80008f0 <_write+0x12>
	}
	return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <_close>:

int _close(int file) {
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_fstat>:

int _fstat(int file, struct stat *st) {
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093e:	605a      	str	r2, [r3, #4]
	return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_isatty>:

int _isatty(int file) {
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
		errno = ENOMEM;
 80009b0:	f005 fa04 	bl	8005dbc <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	24080000 	.word	0x24080000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	2400013c 	.word	0x2400013c
 80009e8:	24004aa8 	.word	0x24004aa8

080009ec <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <SystemInit+0xe4>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f6:	4a36      	ldr	r2, [pc, #216]	; (8000ad0 <SystemInit+0xe4>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <SystemInit+0xe8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f003 030f 	and.w	r3, r3, #15
 8000a08:	2b06      	cmp	r3, #6
 8000a0a:	d807      	bhi.n	8000a1c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <SystemInit+0xe8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f023 030f 	bic.w	r3, r3, #15
 8000a14:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <SystemInit+0xe8>)
 8000a16:	f043 0307 	orr.w	r3, r3, #7
 8000a1a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <SystemInit+0xec>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <SystemInit+0xec>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <SystemInit+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <SystemInit+0xec>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4929      	ldr	r1, [pc, #164]	; (8000ad8 <SystemInit+0xec>)
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <SystemInit+0xf0>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <SystemInit+0xe8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d007      	beq.n	8000a56 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <SystemInit+0xe8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f023 030f 	bic.w	r3, r3, #15
 8000a4e:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <SystemInit+0xe8>)
 8000a50:	f043 0307 	orr.w	r3, r3, #7
 8000a54:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <SystemInit+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <SystemInit+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <SystemInit+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <SystemInit+0xec>)
 8000a6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <SystemInit+0xf4>)
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <SystemInit+0xec>)
 8000a70:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <SystemInit+0xf8>)
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <SystemInit+0xec>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <SystemInit+0xfc>)
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <SystemInit+0xec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <SystemInit+0xec>)
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <SystemInit+0xfc>)
 8000a84:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <SystemInit+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <SystemInit+0xec>)
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <SystemInit+0xfc>)
 8000a90:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <SystemInit+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <SystemInit+0xec>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <SystemInit+0xec>)
 8000a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <SystemInit+0xec>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <SystemInit+0x100>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <SystemInit+0x104>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab6:	d202      	bcs.n	8000abe <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <SystemInit+0x108>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <SystemInit+0x10c>)
 8000ac0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ac4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	52002000 	.word	0x52002000
 8000ad8:	58024400 	.word	0x58024400
 8000adc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae0:	02020200 	.word	0x02020200
 8000ae4:	01ff0000 	.word	0x01ff0000
 8000ae8:	01010280 	.word	0x01010280
 8000aec:	5c001000 	.word	0x5c001000
 8000af0:	ffff0000 	.word	0xffff0000
 8000af4:	51008108 	.word	0x51008108
 8000af8:	52004000 	.word	0x52004000

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b00:	f7ff ff74 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f005 f94d 	bl	8005dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fc43 	bl	80003b8 <main>
  bx  lr
 8000b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b3c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000b40:	08006f9c 	.word	0x08006f9c
  ldr r2, =_sbss
 8000b44:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000b48:	24004aa4 	.word	0x24004aa4

08000b4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC3_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b56:	2003      	movs	r0, #3
 8000b58:	f000 f90f 	bl	8000d7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b5c:	f000 ff8a 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8000b60:	4602      	mov	r2, r0
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_Init+0x68>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	0a1b      	lsrs	r3, r3, #8
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	4913      	ldr	r1, [pc, #76]	; (8000bbc <HAL_Init+0x6c>)
 8000b6e:	5ccb      	ldrb	r3, [r1, r3]
 8000b70:	f003 031f 	and.w	r3, r3, #31
 8000b74:	fa22 f303 	lsr.w	r3, r2, r3
 8000b78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_Init+0x68>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_Init+0x6c>)
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	f003 031f 	and.w	r3, r3, #31
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <HAL_Init+0x70>)
 8000b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <HAL_Init+0x74>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f7ff fda6 	bl	80006ec <HAL_InitTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e002      	b.n	8000bb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000baa:	f7ff fd41 	bl	8000630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	08006eec 	.word	0x08006eec
 8000bc0:	24000004 	.word	0x24000004
 8000bc4:	24000000 	.word	0x24000000

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2400000c 	.word	0x2400000c
 8000bec:	24000140 	.word	0x24000140

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	24000140 	.word	0x24000140

08000c08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetREVID+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	0c1b      	lsrs	r3, r3, #16
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	5c001000 	.word	0x5c001000

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <__NVIC_SetPriorityGrouping+0x40>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <__NVIC_SetPriorityGrouping+0x40>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	60d3      	str	r3, [r2, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	05fa0000 	.word	0x05fa0000

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ff4c 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9e:	f7ff ff63 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000da2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68b9      	ldr	r1, [r7, #8]
 8000da8:	6978      	ldr	r0, [r7, #20]
 8000daa:	f7ff ffb3 	bl	8000d14 <NVIC_EncodePriority>
 8000dae:	4602      	mov	r2, r0
 8000db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff82 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff56 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_PWREx_ConfigSupply+0x70>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d00a      	beq.n	8000e0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_PWREx_ConfigSupply+0x70>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d001      	beq.n	8000e06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e01f      	b.n	8000e46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e01d      	b.n	8000e46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_PWREx_ConfigSupply+0x70>)
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	f023 0207 	bic.w	r2, r3, #7
 8000e12:	490f      	ldr	r1, [pc, #60]	; (8000e50 <HAL_PWREx_ConfigSupply+0x70>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000e1a:	f7ff fee9 	bl	8000bf0 <HAL_GetTick>
 8000e1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e20:	e009      	b.n	8000e36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000e22:	f7ff fee5 	bl	8000bf0 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e30:	d901      	bls.n	8000e36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e007      	b.n	8000e46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_PWREx_ConfigSupply+0x70>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e42:	d1ee      	bne.n	8000e22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	58024800 	.word	0x58024800

08000e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	f000 bc48 	b.w	80016f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 8088 	beq.w	8000f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e76:	4b99      	ldr	r3, [pc, #612]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e80:	4b96      	ldr	r3, [pc, #600]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e88:	2b10      	cmp	r3, #16
 8000e8a:	d007      	beq.n	8000e9c <HAL_RCC_OscConfig+0x48>
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	2b18      	cmp	r3, #24
 8000e90:	d111      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x62>
 8000e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d10c      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	4b8f      	ldr	r3, [pc, #572]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d06d      	beq.n	8000f84 <HAL_RCC_OscConfig+0x130>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d169      	bne.n	8000f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f000 bc21 	b.w	80016f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x7a>
 8000ec0:	4b86      	ldr	r3, [pc, #536]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a85      	ldr	r2, [pc, #532]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e02e      	b.n	8000f2c <HAL_RCC_OscConfig+0xd8>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x9c>
 8000ed6:	4b81      	ldr	r3, [pc, #516]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a80      	ldr	r2, [pc, #512]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b7e      	ldr	r3, [pc, #504]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a7d      	ldr	r2, [pc, #500]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e01d      	b.n	8000f2c <HAL_RCC_OscConfig+0xd8>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0xc0>
 8000efa:	4b78      	ldr	r3, [pc, #480]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a77      	ldr	r2, [pc, #476]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b75      	ldr	r3, [pc, #468]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a74      	ldr	r2, [pc, #464]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e00b      	b.n	8000f2c <HAL_RCC_OscConfig+0xd8>
 8000f14:	4b71      	ldr	r3, [pc, #452]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a70      	ldr	r2, [pc, #448]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b6e      	ldr	r3, [pc, #440]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a6d      	ldr	r2, [pc, #436]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d013      	beq.n	8000f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff fe5c 	bl	8000bf0 <HAL_GetTick>
 8000f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fe58 	bl	8000bf0 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	; 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e3d4      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f4e:	4b63      	ldr	r3, [pc, #396]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0xe8>
 8000f5a:	e014      	b.n	8000f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fe48 	bl	8000bf0 <HAL_GetTick>
 8000f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fe44 	bl	8000bf0 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e3c0      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f76:	4b59      	ldr	r3, [pc, #356]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x110>
 8000f82:	e000      	b.n	8000f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80ca 	beq.w	8001128 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f94:	4b51      	ldr	r3, [pc, #324]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <HAL_RCC_OscConfig+0x166>
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	2b18      	cmp	r3, #24
 8000fae:	d156      	bne.n	800105e <HAL_RCC_OscConfig+0x20a>
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d151      	bne.n	800105e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x17e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e392      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000fd2:	4b42      	ldr	r3, [pc, #264]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 0219 	bic.w	r2, r3, #25
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	493f      	ldr	r1, [pc, #252]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fe04 	bl	8000bf0 <HAL_GetTick>
 8000fe8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fec:	f7ff fe00 	bl	8000bf0 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e37c      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ffe:	4b37      	ldr	r3, [pc, #220]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	f7ff fdfd 	bl	8000c08 <HAL_GetREVID>
 800100e:	4603      	mov	r3, r0
 8001010:	f241 0203 	movw	r2, #4099	; 0x1003
 8001014:	4293      	cmp	r3, r2
 8001016:	d817      	bhi.n	8001048 <HAL_RCC_OscConfig+0x1f4>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b40      	cmp	r3, #64	; 0x40
 800101e:	d108      	bne.n	8001032 <HAL_RCC_OscConfig+0x1de>
 8001020:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001028:	4a2c      	ldr	r2, [pc, #176]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 800102a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001030:	e07a      	b.n	8001128 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	031b      	lsls	r3, r3, #12
 8001040:	4926      	ldr	r1, [pc, #152]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8001042:	4313      	orrs	r3, r2
 8001044:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001046:	e06f      	b.n	8001128 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	061b      	lsls	r3, r3, #24
 8001056:	4921      	ldr	r1, [pc, #132]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8001058:	4313      	orrs	r3, r2
 800105a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800105c:	e064      	b.n	8001128 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d047      	beq.n	80010f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 0219 	bic.w	r2, r3, #25
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	491a      	ldr	r1, [pc, #104]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8001074:	4313      	orrs	r3, r2
 8001076:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fdba 	bl	8000bf0 <HAL_GetTick>
 800107c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001080:	f7ff fdb6 	bl	8000bf0 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e332      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	f7ff fdb3 	bl	8000c08 <HAL_GetREVID>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d819      	bhi.n	80010e0 <HAL_RCC_OscConfig+0x28c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	2b40      	cmp	r3, #64	; 0x40
 80010b2:	d108      	bne.n	80010c6 <HAL_RCC_OscConfig+0x272>
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 80010be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c2:	6053      	str	r3, [r2, #4]
 80010c4:	e030      	b.n	8001128 <HAL_RCC_OscConfig+0x2d4>
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	031b      	lsls	r3, r3, #12
 80010d4:	4901      	ldr	r1, [pc, #4]	; (80010dc <HAL_RCC_OscConfig+0x288>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	604b      	str	r3, [r1, #4]
 80010da:	e025      	b.n	8001128 <HAL_RCC_OscConfig+0x2d4>
 80010dc:	58024400 	.word	0x58024400
 80010e0:	4b9a      	ldr	r3, [pc, #616]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	061b      	lsls	r3, r3, #24
 80010ee:	4997      	ldr	r1, [pc, #604]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
 80010f4:	e018      	b.n	8001128 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b95      	ldr	r3, [pc, #596]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a94      	ldr	r2, [pc, #592]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001102:	f7ff fd75 	bl	8000bf0 <HAL_GetTick>
 8001106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fd71 	bl	8000bf0 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e2ed      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800111c:	4b8b      	ldr	r3, [pc, #556]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0310 	and.w	r3, r3, #16
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80a9 	beq.w	8001288 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001136:	4b85      	ldr	r3, [pc, #532]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800113e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001140:	4b82      	ldr	r3, [pc, #520]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b08      	cmp	r3, #8
 800114a:	d007      	beq.n	800115c <HAL_RCC_OscConfig+0x308>
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2b18      	cmp	r3, #24
 8001150:	d13a      	bne.n	80011c8 <HAL_RCC_OscConfig+0x374>
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d135      	bne.n	80011c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800115c:	4b7b      	ldr	r3, [pc, #492]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_OscConfig+0x320>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	2b80      	cmp	r3, #128	; 0x80
 800116e:	d001      	beq.n	8001174 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e2c1      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001174:	f7ff fd48 	bl	8000c08 <HAL_GetREVID>
 8001178:	4603      	mov	r3, r0
 800117a:	f241 0203 	movw	r2, #4099	; 0x1003
 800117e:	4293      	cmp	r3, r2
 8001180:	d817      	bhi.n	80011b2 <HAL_RCC_OscConfig+0x35e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	2b20      	cmp	r3, #32
 8001188:	d108      	bne.n	800119c <HAL_RCC_OscConfig+0x348>
 800118a:	4b70      	ldr	r3, [pc, #448]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001192:	4a6e      	ldr	r2, [pc, #440]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001198:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800119a:	e075      	b.n	8001288 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800119c:	4b6b      	ldr	r3, [pc, #428]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	069b      	lsls	r3, r3, #26
 80011aa:	4968      	ldr	r1, [pc, #416]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011b0:	e06a      	b.n	8001288 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011b2:	4b66      	ldr	r3, [pc, #408]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	061b      	lsls	r3, r3, #24
 80011c0:	4962      	ldr	r1, [pc, #392]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80011c6:	e05f      	b.n	8001288 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d042      	beq.n	8001256 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80011d0:	4b5e      	ldr	r3, [pc, #376]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a5d      	ldr	r2, [pc, #372]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80011d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011dc:	f7ff fd08 	bl	8000bf0 <HAL_GetTick>
 80011e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80011e4:	f7ff fd04 	bl	8000bf0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e280      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011f6:	4b55      	ldr	r3, [pc, #340]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001202:	f7ff fd01 	bl	8000c08 <HAL_GetREVID>
 8001206:	4603      	mov	r3, r0
 8001208:	f241 0203 	movw	r2, #4099	; 0x1003
 800120c:	4293      	cmp	r3, r2
 800120e:	d817      	bhi.n	8001240 <HAL_RCC_OscConfig+0x3ec>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	2b20      	cmp	r3, #32
 8001216:	d108      	bne.n	800122a <HAL_RCC_OscConfig+0x3d6>
 8001218:	4b4c      	ldr	r3, [pc, #304]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001220:	4a4a      	ldr	r2, [pc, #296]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001226:	6053      	str	r3, [r2, #4]
 8001228:	e02e      	b.n	8001288 <HAL_RCC_OscConfig+0x434>
 800122a:	4b48      	ldr	r3, [pc, #288]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	069b      	lsls	r3, r3, #26
 8001238:	4944      	ldr	r1, [pc, #272]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
 800123e:	e023      	b.n	8001288 <HAL_RCC_OscConfig+0x434>
 8001240:	4b42      	ldr	r3, [pc, #264]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	061b      	lsls	r3, r3, #24
 800124e:	493f      	ldr	r1, [pc, #252]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
 8001254:	e018      	b.n	8001288 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a3c      	ldr	r2, [pc, #240]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800125c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fcc5 	bl	8000bf0 <HAL_GetTick>
 8001266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800126a:	f7ff fcc1 	bl	8000bf0 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e23d      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	2b00      	cmp	r3, #0
 8001292:	d036      	beq.n	8001302 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d019      	beq.n	80012d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	4a2a      	ldr	r2, [pc, #168]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fca2 	bl	8000bf0 <HAL_GetTick>
 80012ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc9e 	bl	8000bf0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e21a      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80012c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x45c>
 80012ce:	e018      	b.n	8001302 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80012d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80012d6:	f023 0301 	bic.w	r3, r3, #1
 80012da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012dc:	f7ff fc88 	bl	8000bf0 <HAL_GetTick>
 80012e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff fc84 	bl	8000bf0 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e200      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 80012f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	2b00      	cmp	r3, #0
 800130c:	d039      	beq.n	8001382 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01c      	beq.n	8001350 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a0c      	ldr	r2, [pc, #48]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800131c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc65 	bl	8000bf0 <HAL_GetTick>
 8001326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800132a:	f7ff fc61 	bl	8000bf0 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e1dd      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_RCC_OscConfig+0x4f8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x4d6>
 8001348:	e01b      	b.n	8001382 <HAL_RCC_OscConfig+0x52e>
 800134a:	bf00      	nop
 800134c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001350:	4b9b      	ldr	r3, [pc, #620]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a9a      	ldr	r2, [pc, #616]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800135a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800135c:	f7ff fc48 	bl	8000bf0 <HAL_GetTick>
 8001360:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001364:	f7ff fc44 	bl	8000bf0 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e1c0      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001376:	4b92      	ldr	r3, [pc, #584]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8081 	beq.w	8001492 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001390:	4b8c      	ldr	r3, [pc, #560]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a8b      	ldr	r2, [pc, #556]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800139c:	f7ff fc28 	bl	8000bf0 <HAL_GetTick>
 80013a0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a4:	f7ff fc24 	bl	8000bf0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1a0      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80013b6:	4b83      	ldr	r3, [pc, #524]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x584>
 80013ca:	4b7d      	ldr	r3, [pc, #500]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a7c      	ldr	r2, [pc, #496]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
 80013d6:	e02d      	b.n	8001434 <HAL_RCC_OscConfig+0x5e0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10c      	bne.n	80013fa <HAL_RCC_OscConfig+0x5a6>
 80013e0:	4b77      	ldr	r3, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a76      	ldr	r2, [pc, #472]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70
 80013ec:	4b74      	ldr	r3, [pc, #464]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a73      	ldr	r2, [pc, #460]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80013f2:	f023 0304 	bic.w	r3, r3, #4
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	e01c      	b.n	8001434 <HAL_RCC_OscConfig+0x5e0>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x5c8>
 8001402:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a6e      	ldr	r2, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a6b      	ldr	r2, [pc, #428]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0x5e0>
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a67      	ldr	r2, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a64      	ldr	r2, [pc, #400]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800142e:	f023 0304 	bic.w	r3, r3, #4
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d015      	beq.n	8001468 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fbd8 	bl	8000bf0 <HAL_GetTick>
 8001440:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001442:	e00a      	b.n	800145a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001444:	f7ff fbd4 	bl	8000bf0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e14e      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800145a:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0ee      	beq.n	8001444 <HAL_RCC_OscConfig+0x5f0>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff fbc2 	bl	8000bf0 <HAL_GetTick>
 800146c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800146e:	e00a      	b.n	8001486 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff fbbe 	bl	8000bf0 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e138      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ee      	bne.n	8001470 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 812d 	beq.w	80016f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800149c:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014a4:	2b18      	cmp	r3, #24
 80014a6:	f000 80bd 	beq.w	8001624 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	f040 809e 	bne.w	80015f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a41      	ldr	r2, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80014ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb96 	bl	8000bf0 <HAL_GetTick>
 80014c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fb92 	bl	8000bf0 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e10e      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80014e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <HAL_RCC_OscConfig+0x774>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	430a      	orrs	r2, r1
 80014fa:	4931      	ldr	r1, [pc, #196]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	628b      	str	r3, [r1, #40]	; 0x28
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	3b01      	subs	r3, #1
 8001506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150e:	3b01      	subs	r3, #1
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	b29b      	uxth	r3, r3
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	3b01      	subs	r3, #1
 800152a:	061b      	lsls	r3, r3, #24
 800152c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001530:	4923      	ldr	r1, [pc, #140]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <HAL_RCC_OscConfig+0x778>)
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800154e:	00d2      	lsls	r2, r2, #3
 8001550:	491b      	ldr	r1, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001552:	4313      	orrs	r3, r2
 8001554:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	f023 020c 	bic.w	r2, r3, #12
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4917      	ldr	r1, [pc, #92]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001564:	4313      	orrs	r3, r2
 8001566:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	f023 0202 	bic.w	r2, r3, #2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	4912      	ldr	r1, [pc, #72]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001576:	4313      	orrs	r3, r2
 8001578:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_RCC_OscConfig+0x76c>)
 80015b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb1b 	bl	8000bf0 <HAL_GetTick>
 80015ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015bc:	e011      	b.n	80015e2 <HAL_RCC_OscConfig+0x78e>
 80015be:	bf00      	nop
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58024800 	.word	0x58024800
 80015c8:	fffffc0c 	.word	0xfffffc0c
 80015cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fb0e 	bl	8000bf0 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e08a      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x77c>
 80015ee:	e082      	b.n	80016f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f0:	4b43      	ldr	r3, [pc, #268]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a42      	ldr	r2, [pc, #264]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80015f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff faf8 	bl	8000bf0 <HAL_GetTick>
 8001600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff faf4 	bl	8000bf0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e070      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001616:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x7b0>
 8001622:	e068      	b.n	80016f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	2b01      	cmp	r3, #1
 8001636:	d031      	beq.n	800169c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0203 	and.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d12a      	bne.n	800169c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d122      	bne.n	800169c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d11a      	bne.n	800169c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0a5b      	lsrs	r3, r3, #9
 800166a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001672:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d111      	bne.n	800169c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d108      	bne.n	800169c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	0e1b      	lsrs	r3, r3, #24
 800168e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e02b      	b.n	80016f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80016aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d01f      	beq.n	80016f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016c2:	f7ff fa95 	bl	8000bf0 <HAL_GetTick>
 80016c6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80016c8:	bf00      	nop
 80016ca:	f7ff fa91 	bl	8000bf0 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d0f9      	beq.n	80016ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80016d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RCC_OscConfig+0x8b0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016e2:	00d2      	lsls	r2, r2, #3
 80016e4:	4906      	ldr	r1, [pc, #24]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_RCC_OscConfig+0x8ac>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3730      	adds	r7, #48	; 0x30
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58024400 	.word	0x58024400
 8001704:	ffff0007 	.word	0xffff0007

08001708 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e19c      	b.n	8001a56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b8a      	ldr	r3, [pc, #552]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 030f 	and.w	r3, r3, #15
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d910      	bls.n	800174c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b87      	ldr	r3, [pc, #540]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 020f 	bic.w	r2, r3, #15
 8001732:	4985      	ldr	r1, [pc, #532]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b83      	ldr	r3, [pc, #524]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e184      	b.n	8001a56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d010      	beq.n	800177a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	4b7b      	ldr	r3, [pc, #492]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001764:	429a      	cmp	r2, r3
 8001766:	d908      	bls.n	800177a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001768:	4b78      	ldr	r3, [pc, #480]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	4975      	ldr	r1, [pc, #468]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001776:	4313      	orrs	r3, r2
 8001778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d010      	beq.n	80017a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	4b70      	ldr	r3, [pc, #448]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001792:	429a      	cmp	r2, r3
 8001794:	d908      	bls.n	80017a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001796:	4b6d      	ldr	r3, [pc, #436]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	496a      	ldr	r1, [pc, #424]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d010      	beq.n	80017d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699a      	ldr	r2, [r3, #24]
 80017b8:	4b64      	ldr	r3, [pc, #400]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d908      	bls.n	80017d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017c4:	4b61      	ldr	r3, [pc, #388]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	495e      	ldr	r1, [pc, #376]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d010      	beq.n	8001804 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d908      	bls.n	8001804 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80017f2:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4953      	ldr	r1, [pc, #332]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001800:	4313      	orrs	r3, r2
 8001802:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d010      	beq.n	8001832 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	429a      	cmp	r2, r3
 800181e:	d908      	bls.n	8001832 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f023 020f 	bic.w	r2, r3, #15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4947      	ldr	r1, [pc, #284]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 800182e:	4313      	orrs	r3, r2
 8001830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d055      	beq.n	80018ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800183e:	4b43      	ldr	r3, [pc, #268]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4940      	ldr	r1, [pc, #256]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 800184c:	4313      	orrs	r3, r2
 800184e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d107      	bne.n	8001868 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001858:	4b3c      	ldr	r3, [pc, #240]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d121      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0f6      	b.n	8001a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d107      	bne.n	8001880 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d115      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0ea      	b.n	8001a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0de      	b.n	8001a56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0d6      	b.n	8001a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018a8:	4b28      	ldr	r3, [pc, #160]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f023 0207 	bic.w	r2, r3, #7
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4925      	ldr	r1, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ba:	f7ff f999 	bl	8000bf0 <HAL_GetTick>
 80018be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c2:	f7ff f995 	bl	8000bf0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0be      	b.n	8001a56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d1eb      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d010      	beq.n	8001918 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	429a      	cmp	r2, r3
 8001904:	d208      	bcs.n	8001918 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f023 020f 	bic.w	r2, r3, #15
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 8001914:	4313      	orrs	r3, r2
 8001916:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d214      	bcs.n	8001950 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 020f 	bic.w	r2, r3, #15
 800192e:	4906      	ldr	r1, [pc, #24]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e086      	b.n	8001a56 <HAL_RCC_ClockConfig+0x34e>
 8001948:	52002000 	.word	0x52002000
 800194c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d010      	beq.n	800197e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001968:	429a      	cmp	r2, r3
 800196a:	d208      	bcs.n	800197e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800196c:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	4939      	ldr	r1, [pc, #228]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 800197a:	4313      	orrs	r3, r2
 800197c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d010      	beq.n	80019ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001996:	429a      	cmp	r2, r3
 8001998:	d208      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	492e      	ldr	r1, [pc, #184]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d010      	beq.n	80019da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d208      	bcs.n	80019da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4922      	ldr	r1, [pc, #136]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0320 	and.w	r3, r3, #32
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d010      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d208      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4917      	ldr	r1, [pc, #92]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a08:	f000 f834 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	f003 030f 	and.w	r3, r3, #15
 8001a18:	4912      	ldr	r1, [pc, #72]	; (8001a64 <HAL_RCC_ClockConfig+0x35c>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x358>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_RCC_ClockConfig+0x35c>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_RCC_ClockConfig+0x360>)
 8001a3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x364>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_RCC_ClockConfig+0x368>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fe4e 	bl	80006ec <HAL_InitTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	58024400 	.word	0x58024400
 8001a64:	08006eec 	.word	0x08006eec
 8001a68:	24000004 	.word	0x24000004
 8001a6c:	24000000 	.word	0x24000000
 8001a70:	24000008 	.word	0x24000008

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7a:	4bb3      	ldr	r3, [pc, #716]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a82:	2b18      	cmp	r3, #24
 8001a84:	f200 8155 	bhi.w	8001d32 <HAL_RCC_GetSysClockFreq+0x2be>
 8001a88:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001af5 	.word	0x08001af5
 8001a94:	08001d33 	.word	0x08001d33
 8001a98:	08001d33 	.word	0x08001d33
 8001a9c:	08001d33 	.word	0x08001d33
 8001aa0:	08001d33 	.word	0x08001d33
 8001aa4:	08001d33 	.word	0x08001d33
 8001aa8:	08001d33 	.word	0x08001d33
 8001aac:	08001d33 	.word	0x08001d33
 8001ab0:	08001b1b 	.word	0x08001b1b
 8001ab4:	08001d33 	.word	0x08001d33
 8001ab8:	08001d33 	.word	0x08001d33
 8001abc:	08001d33 	.word	0x08001d33
 8001ac0:	08001d33 	.word	0x08001d33
 8001ac4:	08001d33 	.word	0x08001d33
 8001ac8:	08001d33 	.word	0x08001d33
 8001acc:	08001d33 	.word	0x08001d33
 8001ad0:	08001b21 	.word	0x08001b21
 8001ad4:	08001d33 	.word	0x08001d33
 8001ad8:	08001d33 	.word	0x08001d33
 8001adc:	08001d33 	.word	0x08001d33
 8001ae0:	08001d33 	.word	0x08001d33
 8001ae4:	08001d33 	.word	0x08001d33
 8001ae8:	08001d33 	.word	0x08001d33
 8001aec:	08001d33 	.word	0x08001d33
 8001af0:	08001b27 	.word	0x08001b27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001af4:	4b94      	ldr	r3, [pc, #592]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d009      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b00:	4b91      	ldr	r3, [pc, #580]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	4a90      	ldr	r2, [pc, #576]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001b12:	e111      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001b14:	4b8d      	ldr	r3, [pc, #564]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b16:	61bb      	str	r3, [r7, #24]
      break;
 8001b18:	e10e      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001b1a:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001b1c:	61bb      	str	r3, [r7, #24]
      break;
 8001b1e:	e10b      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001b20:	4b8c      	ldr	r3, [pc, #560]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001b22:	61bb      	str	r3, [r7, #24]
      break;
 8001b24:	e108      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001b26:	4b88      	ldr	r3, [pc, #544]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001b30:	4b85      	ldr	r3, [pc, #532]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001b3c:	4b82      	ldr	r3, [pc, #520]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001b46:	4b80      	ldr	r3, [pc, #512]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	08db      	lsrs	r3, r3, #3
 8001b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80e1 	beq.w	8001d2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	f000 8083 	beq.w	8001c78 <HAL_RCC_GetSysClockFreq+0x204>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f200 80a1 	bhi.w	8001cbc <HAL_RCC_GetSysClockFreq+0x248>
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x114>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d056      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b86:	e099      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b88:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d02d      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b94:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	08db      	lsrs	r3, r3, #3
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	4a6b      	ldr	r2, [pc, #428]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	ee07 3a90 	vmov	s15, r3
 8001bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bbe:	4b62      	ldr	r3, [pc, #392]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bd2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001bee:	e087      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001d5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c02:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c16:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c32:	e065      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001d60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4e:	ee07 3a90 	vmov	s15, r3
 8001c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c76:	e043      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c82:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001d64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c8a:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001cba:	e021      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001d60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ce2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001cfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	0a5b      	lsrs	r3, r3, #9
 8001d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d24:	ee17 3a90 	vmov	r3, s15
 8001d28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001d2a:	e005      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
      break;
 8001d30:	e002      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d34:	61bb      	str	r3, [r7, #24]
      break;
 8001d36:	bf00      	nop
  }

  return sysclockfreq;
 8001d38:	69bb      	ldr	r3, [r7, #24]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	03d09000 	.word	0x03d09000
 8001d50:	003d0900 	.word	0x003d0900
 8001d54:	017d7840 	.word	0x017d7840
 8001d58:	46000000 	.word	0x46000000
 8001d5c:	4c742400 	.word	0x4c742400
 8001d60:	4a742400 	.word	0x4a742400
 8001d64:	4bbebc20 	.word	0x4bbebc20

08001d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001d6e:	f7ff fe81 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x50>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	490f      	ldr	r1, [pc, #60]	; (8001dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x50>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8001da4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001da6:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	08006eec 	.word	0x08006eec
 8001dc0:	24000004 	.word	0x24000004
 8001dc4:	24000000 	.word	0x24000000

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001dcc:	f7ff ffcc 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4904      	ldr	r1, [pc, #16]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	58024400 	.word	0x58024400
 8001df0:	08006eec 	.word	0x08006eec

08001df4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	223f      	movs	r2, #63	; 0x3f
 8001e02:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_RCC_GetClockConfig+0x7c>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0207 	and.w	r2, r3, #7
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_RCC_GetClockConfig+0x7c>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_RCC_GetClockConfig+0x7c>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 020f 	and.w	r2, r3, #15
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_GetClockConfig+0x7c>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_RCC_GetClockConfig+0x7c>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_GetClockConfig+0x7c>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_RCC_GetClockConfig+0x7c>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_RCC_GetClockConfig+0x80>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 020f 	and.w	r2, r3, #15
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	58024400 	.word	0x58024400
 8001e74:	52002000 	.word	0x52002000

08001e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e049      	b.n	8001f1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fbe4 	bl	800066c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f000 fc26 	bl	8002708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e054      	b.n	8001fea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d022      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a22      	ldr	r2, [pc, #136]	; (8001ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d018      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00e      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_TIM_Base_Start_IT+0xe0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_TIM_Base_Start_IT+0xe4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d004      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_TIM_Base_Start_IT+0xe8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d115      	bne.n	8001fd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_TIM_Base_Start_IT+0xec>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d015      	beq.n	8001fe6 <HAL_TIM_Base_Start_IT+0xbe>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc0:	d011      	beq.n	8001fe6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd2:	e008      	b.n	8001fe6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e000      	b.n	8001fe8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40010400 	.word	0x40010400
 800200c:	40001800 	.word	0x40001800
 8002010:	40014000 	.word	0x40014000
 8002014:	00010007 	.word	0x00010007

08002018 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_TIM_OC_Start_IT+0x28>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e03c      	b.n	80020ba <HAL_TIM_OC_Start_IT+0xa2>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d109      	bne.n	800205a <HAL_TIM_OC_Start_IT+0x42>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	e02f      	b.n	80020ba <HAL_TIM_OC_Start_IT+0xa2>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d109      	bne.n	8002074 <HAL_TIM_OC_Start_IT+0x5c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e022      	b.n	80020ba <HAL_TIM_OC_Start_IT+0xa2>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d109      	bne.n	800208e <HAL_TIM_OC_Start_IT+0x76>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	e015      	b.n	80020ba <HAL_TIM_OC_Start_IT+0xa2>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b10      	cmp	r3, #16
 8002092:	d109      	bne.n	80020a8 <HAL_TIM_OC_Start_IT+0x90>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e008      	b.n	80020ba <HAL_TIM_OC_Start_IT+0xa2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0ec      	b.n	800229c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d104      	bne.n	80020d2 <HAL_TIM_OC_Start_IT+0xba>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d0:	e023      	b.n	800211a <HAL_TIM_OC_Start_IT+0x102>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_OC_Start_IT+0xca>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	e01b      	b.n	800211a <HAL_TIM_OC_Start_IT+0x102>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d104      	bne.n	80020f2 <HAL_TIM_OC_Start_IT+0xda>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f0:	e013      	b.n	800211a <HAL_TIM_OC_Start_IT+0x102>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	d104      	bne.n	8002102 <HAL_TIM_OC_Start_IT+0xea>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002100:	e00b      	b.n	800211a <HAL_TIM_OC_Start_IT+0x102>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b10      	cmp	r3, #16
 8002106:	d104      	bne.n	8002112 <HAL_TIM_OC_Start_IT+0xfa>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002110:	e003      	b.n	800211a <HAL_TIM_OC_Start_IT+0x102>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d841      	bhi.n	80021a4 <HAL_TIM_OC_Start_IT+0x18c>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_TIM_OC_Start_IT+0x110>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	0800215d 	.word	0x0800215d
 800212c:	080021a5 	.word	0x080021a5
 8002130:	080021a5 	.word	0x080021a5
 8002134:	080021a5 	.word	0x080021a5
 8002138:	0800216f 	.word	0x0800216f
 800213c:	080021a5 	.word	0x080021a5
 8002140:	080021a5 	.word	0x080021a5
 8002144:	080021a5 	.word	0x080021a5
 8002148:	08002181 	.word	0x08002181
 800214c:	080021a5 	.word	0x080021a5
 8002150:	080021a5 	.word	0x080021a5
 8002154:	080021a5 	.word	0x080021a5
 8002158:	08002193 	.word	0x08002193
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0202 	orr.w	r2, r2, #2
 800216a:	60da      	str	r2, [r3, #12]
      break;
 800216c:	e01d      	b.n	80021aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0204 	orr.w	r2, r2, #4
 800217c:	60da      	str	r2, [r3, #12]
      break;
 800217e:	e014      	b.n	80021aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0208 	orr.w	r2, r2, #8
 800218e:	60da      	str	r2, [r3, #12]
      break;
 8002190:	e00b      	b.n	80021aa <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0210 	orr.w	r2, r2, #16
 80021a0:	60da      	str	r2, [r3, #12]
      break;
 80021a2:	e002      	b.n	80021aa <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
      break;
 80021a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d174      	bne.n	800229a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fbe9 	bl	8002990 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a38      	ldr	r2, [pc, #224]	; (80022a4 <HAL_TIM_OC_Start_IT+0x28c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_TIM_OC_Start_IT+0x1d8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a36      	ldr	r2, [pc, #216]	; (80022a8 <HAL_TIM_OC_Start_IT+0x290>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_TIM_OC_Start_IT+0x1d8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <HAL_TIM_OC_Start_IT+0x294>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_TIM_OC_Start_IT+0x1d8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a33      	ldr	r2, [pc, #204]	; (80022b0 <HAL_TIM_OC_Start_IT+0x298>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_TIM_OC_Start_IT+0x1d8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a32      	ldr	r2, [pc, #200]	; (80022b4 <HAL_TIM_OC_Start_IT+0x29c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_TIM_OC_Start_IT+0x1dc>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_TIM_OC_Start_IT+0x1de>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <HAL_TIM_OC_Start_IT+0x28c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d022      	beq.n	800225a <HAL_TIM_OC_Start_IT+0x242>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221c:	d01d      	beq.n	800225a <HAL_TIM_OC_Start_IT+0x242>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a25      	ldr	r2, [pc, #148]	; (80022b8 <HAL_TIM_OC_Start_IT+0x2a0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d018      	beq.n	800225a <HAL_TIM_OC_Start_IT+0x242>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_TIM_OC_Start_IT+0x2a4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_TIM_OC_Start_IT+0x242>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <HAL_TIM_OC_Start_IT+0x2a8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00e      	beq.n	800225a <HAL_TIM_OC_Start_IT+0x242>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_TIM_OC_Start_IT+0x290>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_TIM_OC_Start_IT+0x242>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <HAL_TIM_OC_Start_IT+0x2ac>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d004      	beq.n	800225a <HAL_TIM_OC_Start_IT+0x242>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a15      	ldr	r2, [pc, #84]	; (80022ac <HAL_TIM_OC_Start_IT+0x294>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d115      	bne.n	8002286 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_TIM_OC_Start_IT+0x2b0>)
 8002262:	4013      	ands	r3, r2
 8002264:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b06      	cmp	r3, #6
 800226a:	d015      	beq.n	8002298 <HAL_TIM_OC_Start_IT+0x280>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002272:	d011      	beq.n	8002298 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002284:	e008      	b.n	8002298 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e000      	b.n	800229a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002298:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40010400 	.word	0x40010400
 80022ac:	40014000 	.word	0x40014000
 80022b0:	40014400 	.word	0x40014400
 80022b4:	40014800 	.word	0x40014800
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800
 80022c0:	40000c00 	.word	0x40000c00
 80022c4:	40001800 	.word	0x40001800
 80022c8:	00010007 	.word	0x00010007

080022cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d020      	beq.n	8002330 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0202 	mvn.w	r2, #2
 8002300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f9d8 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 800231c:	e005      	b.n	800232a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe f82e 	bl	8000380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f9db 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0204 	mvn.w	r2, #4
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2202      	movs	r2, #2
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f9b2 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe f808 	bl	8000380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f9b5 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0208 	mvn.w	r2, #8
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f98c 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fd ffe2 	bl	8000380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f98f 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d020      	beq.n	8002414 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0210 	mvn.w	r2, #16
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2208      	movs	r2, #8
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f966 	bl	80026cc <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fd ffbc 	bl	8000380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f969 	bl	80026e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00c      	beq.n	8002438 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0201 	mvn.w	r2, #1
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe f8e4 	bl	8000600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00c      	beq.n	8002466 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800245e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fb53 	bl	8002b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00c      	beq.n	800248a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fb4b 	bl	8002b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00c      	beq.n	80024ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f923 	bl	80026f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00c      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0220 	mvn.w	r2, #32
 80024ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fb13 	bl	8002af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_TIM_ConfigClockSource+0x1c>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e0dc      	b.n	80026b2 <HAL_TIM_ConfigClockSource+0x1d6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_TIM_ConfigClockSource+0x1e0>)
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a64      	ldr	r2, [pc, #400]	; (80026c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	f000 80a9 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 8002534:	4a62      	ldr	r2, [pc, #392]	; (80026c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	f200 80ae 	bhi.w	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 800253c:	4a61      	ldr	r2, [pc, #388]	; (80026c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	f000 80a1 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 8002544:	4a5f      	ldr	r2, [pc, #380]	; (80026c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	f200 80a6 	bhi.w	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 800254c:	4a5e      	ldr	r2, [pc, #376]	; (80026c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800254e:	4293      	cmp	r3, r2
 8002550:	f000 8099 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 8002554:	4a5c      	ldr	r2, [pc, #368]	; (80026c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002556:	4293      	cmp	r3, r2
 8002558:	f200 809e 	bhi.w	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 800255c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002560:	f000 8091 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 8002564:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002568:	f200 8096 	bhi.w	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 800256c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002570:	f000 8089 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 8002574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002578:	f200 808e 	bhi.w	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 800257c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002580:	d03e      	beq.n	8002600 <HAL_TIM_ConfigClockSource+0x124>
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	f200 8087 	bhi.w	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 800258a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258e:	f000 8086 	beq.w	800269e <HAL_TIM_ConfigClockSource+0x1c2>
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	d87f      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 8002598:	2b70      	cmp	r3, #112	; 0x70
 800259a:	d01a      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0xf6>
 800259c:	2b70      	cmp	r3, #112	; 0x70
 800259e:	d87b      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 80025a0:	2b60      	cmp	r3, #96	; 0x60
 80025a2:	d050      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x16a>
 80025a4:	2b60      	cmp	r3, #96	; 0x60
 80025a6:	d877      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 80025a8:	2b50      	cmp	r3, #80	; 0x50
 80025aa:	d03c      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0x14a>
 80025ac:	2b50      	cmp	r3, #80	; 0x50
 80025ae:	d873      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d058      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x18a>
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d86f      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 80025b8:	2b30      	cmp	r3, #48	; 0x30
 80025ba:	d064      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d86b      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d060      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d867      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d05c      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d05a      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x1aa>
 80025d0:	e062      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f000 f9b5 	bl	8002950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	609a      	str	r2, [r3, #8]
      break;
 80025fe:	e04f      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f000 f99e 	bl	8002950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002622:	609a      	str	r2, [r3, #8]
      break;
 8002624:	e03c      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	461a      	mov	r2, r3
 8002634:	f000 f90e 	bl	8002854 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2150      	movs	r1, #80	; 0x50
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f968 	bl	8002914 <TIM_ITRx_SetConfig>
      break;
 8002644:	e02c      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	f000 f92d 	bl	80028b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2160      	movs	r1, #96	; 0x60
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f958 	bl	8002914 <TIM_ITRx_SetConfig>
      break;
 8002664:	e01c      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	461a      	mov	r2, r3
 8002674:	f000 f8ee 	bl	8002854 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2140      	movs	r1, #64	; 0x40
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f948 	bl	8002914 <TIM_ITRx_SetConfig>
      break;
 8002684:	e00c      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f000 f93f 	bl	8002914 <TIM_ITRx_SetConfig>
      break;
 8002696:	e003      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e000      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800269e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	ffceff88 	.word	0xffceff88
 80026c0:	00100040 	.word	0x00100040
 80026c4:	00100030 	.word	0x00100030
 80026c8:	00100020 	.word	0x00100020

080026cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a46      	ldr	r2, [pc, #280]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002726:	d00f      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a43      	ldr	r2, [pc, #268]	; (8002838 <TIM_Base_SetConfig+0x130>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00b      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a42      	ldr	r2, [pc, #264]	; (800283c <TIM_Base_SetConfig+0x134>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d007      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a41      	ldr	r2, [pc, #260]	; (8002840 <TIM_Base_SetConfig+0x138>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0x40>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a40      	ldr	r2, [pc, #256]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a35      	ldr	r2, [pc, #212]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <TIM_Base_SetConfig+0x9a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002768:	d01b      	beq.n	80027a2 <TIM_Base_SetConfig+0x9a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a32      	ldr	r2, [pc, #200]	; (8002838 <TIM_Base_SetConfig+0x130>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d017      	beq.n	80027a2 <TIM_Base_SetConfig+0x9a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <TIM_Base_SetConfig+0x134>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <TIM_Base_SetConfig+0x9a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a30      	ldr	r2, [pc, #192]	; (8002840 <TIM_Base_SetConfig+0x138>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00f      	beq.n	80027a2 <TIM_Base_SetConfig+0x9a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2f      	ldr	r2, [pc, #188]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00b      	beq.n	80027a2 <TIM_Base_SetConfig+0x9a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a2e      	ldr	r2, [pc, #184]	; (8002848 <TIM_Base_SetConfig+0x140>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <TIM_Base_SetConfig+0x9a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a2d      	ldr	r2, [pc, #180]	; (800284c <TIM_Base_SetConfig+0x144>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d003      	beq.n	80027a2 <TIM_Base_SetConfig+0x9a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <TIM_Base_SetConfig+0x148>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d108      	bne.n	80027b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a16      	ldr	r2, [pc, #88]	; (8002834 <TIM_Base_SetConfig+0x12c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00f      	beq.n	8002800 <TIM_Base_SetConfig+0xf8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <TIM_Base_SetConfig+0x13c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00b      	beq.n	8002800 <TIM_Base_SetConfig+0xf8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a17      	ldr	r2, [pc, #92]	; (8002848 <TIM_Base_SetConfig+0x140>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d007      	beq.n	8002800 <TIM_Base_SetConfig+0xf8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a16      	ldr	r2, [pc, #88]	; (800284c <TIM_Base_SetConfig+0x144>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d003      	beq.n	8002800 <TIM_Base_SetConfig+0xf8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a15      	ldr	r2, [pc, #84]	; (8002850 <TIM_Base_SetConfig+0x148>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d103      	bne.n	8002808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f023 0201 	bic.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
  }
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40010400 	.word	0x40010400
 8002848:	40014000 	.word	0x40014000
 800284c:	40014400 	.word	0x40014400
 8002850:	40014800 	.word	0x40014800

08002854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0201 	bic.w	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800287e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f023 030a 	bic.w	r3, r3, #10
 8002890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	621a      	str	r2, [r3, #32]
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f023 0210 	bic.w	r2, r3, #16
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	031b      	lsls	r3, r3, #12
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <TIM_ITRx_SetConfig+0x38>)
 8002928:	4013      	ands	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	f043 0307 	orr.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	609a      	str	r2, [r3, #8]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	ffcfff8f 	.word	0xffcfff8f

08002950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800296a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	021a      	lsls	r2, r3, #8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	431a      	orrs	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	609a      	str	r2, [r3, #8]
}
 8002984:	bf00      	nop
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 031f 	and.w	r3, r3, #31
 80029a2:	2201      	movs	r2, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a1a      	ldr	r2, [r3, #32]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e06d      	b.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a30      	ldr	r2, [pc, #192]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a2f      	ldr	r2, [pc, #188]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d108      	bne.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a20      	ldr	r2, [pc, #128]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d022      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a66:	d01d      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d018      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d013      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d009      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10c      	bne.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40010400 	.word	0x40010400
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800
 8002aec:	40000c00 	.word	0x40000c00
 8002af0:	40001800 	.word	0x40001800
 8002af4:	40014000 	.word	0x40014000

08002af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <__NVIC_SetPriority>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <SysTick_Handler+0x1c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002b90:	f002 f872 	bl	8004c78 <xTaskGetSchedulerState>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002b9a:	f002 fe95 	bl	80058c8 <xPortSysTickHandler>
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e000e010 	.word	0xe000e010

08002ba8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bac:	2100      	movs	r1, #0
 8002bae:	f06f 0004 	mvn.w	r0, #4
 8002bb2:	f7ff ffbf 	bl	8002b34 <__NVIC_SetPriority>
#endif
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bc2:	f3ef 8305 	mrs	r3, IPSR
 8002bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8002bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002bce:	f06f 0305 	mvn.w	r3, #5
 8002bd2:	607b      	str	r3, [r7, #4]
 8002bd4:	e00c      	b.n	8002bf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <osKernelInitialize+0x44>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <osKernelInitialize+0x44>)
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	e002      	b.n	8002bf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bf0:	687b      	ldr	r3, [r7, #4]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	24000144 	.word	0x24000144

08002c04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c0a:	f3ef 8305 	mrs	r3, IPSR
 8002c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c16:	f06f 0305 	mvn.w	r3, #5
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	e010      	b.n	8002c40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <osKernelStart+0x48>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d109      	bne.n	8002c3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c26:	f7ff ffbf 	bl	8002ba8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <osKernelStart+0x48>)
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c30:	f001 fb3c 	bl	80042ac <vTaskStartScheduler>
      stat = osOK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	e002      	b.n	8002c40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	24000144 	.word	0x24000144

08002c50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af04      	add	r7, sp, #16
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c60:	f3ef 8305 	mrs	r3, IPSR
 8002c64:	617b      	str	r3, [r7, #20]
  return(result);
 8002c66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d17e      	bne.n	8002d6a <osThreadNew+0x11a>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d07b      	beq.n	8002d6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c72:	2380      	movs	r3, #128	; 0x80
 8002c74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c76:	2318      	movs	r3, #24
 8002c78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d045      	beq.n	8002d16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <osThreadNew+0x48>
        name = attr->name;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <osThreadNew+0x6e>
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b38      	cmp	r3, #56	; 0x38
 8002cb0:	d805      	bhi.n	8002cbe <osThreadNew+0x6e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <osThreadNew+0x72>
        return (NULL);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e054      	b.n	8002d6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <osThreadNew+0xa8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	2b5b      	cmp	r3, #91	; 0x5b
 8002ce0:	d90a      	bls.n	8002cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <osThreadNew+0xa8>
        mem = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e010      	b.n	8002d1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10c      	bne.n	8002d1a <osThreadNew+0xca>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d108      	bne.n	8002d1a <osThreadNew+0xca>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <osThreadNew+0xca>
          mem = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	e001      	b.n	8002d1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d110      	bne.n	8002d42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d28:	9202      	str	r2, [sp, #8]
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6a3a      	ldr	r2, [r7, #32]
 8002d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f001 f8e2 	bl	8003f00 <xTaskCreateStatic>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e013      	b.n	8002d6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d110      	bne.n	8002d6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f001 f92d 	bl	8003fba <xTaskCreate>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <osThreadNew+0x11a>
            hTask = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d6a:	693b      	ldr	r3, [r7, #16]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d7c:	f3ef 8305 	mrs	r3, IPSR
 8002d80:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <osDelay+0x1c>
    stat = osErrorISR;
 8002d88:	f06f 0305 	mvn.w	r3, #5
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e007      	b.n	8002da0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f001 fa52 	bl	8004244 <vTaskDelay>
    }
  }

  return (stat);
 8002da0:	68fb      	ldr	r3, [r7, #12]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002db6:	f3ef 8305 	mrs	r3, IPSR
 8002dba:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dbc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d12d      	bne.n	8002e1e <osEventFlagsNew+0x74>
    mem = -1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dc6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <osEventFlagsNew+0x3a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b1f      	cmp	r3, #31
 8002ddc:	d902      	bls.n	8002de4 <osEventFlagsNew+0x3a>
        mem = 1;
 8002dde:	2301      	movs	r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	e00c      	b.n	8002dfe <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <osEventFlagsNew+0x54>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <osEventFlagsNew+0x54>
          mem = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	e001      	b.n	8002dfe <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d106      	bne.n	8002e12 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f8eb 	bl	8002fe4 <xEventGroupCreateStatic>
 8002e0e:	6178      	str	r0, [r7, #20]
 8002e10:	e005      	b.n	8002e1e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002e18:	f000 f91b 	bl	8003052 <xEventGroupCreate>
 8002e1c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002e1e:	697b      	ldr	r3, [r7, #20]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <osEventFlagsSet+0x1e>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8002e46:	f06f 0303 	mvn.w	r3, #3
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e028      	b.n	8002ea0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e4e:	f3ef 8305 	mrs	r3, IPSR
 8002e52:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e54:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01d      	beq.n	8002e96 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	461a      	mov	r2, r3
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f000 fa96 	bl	8003398 <xEventGroupSetBitsFromISR>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8002e72:	f06f 0302 	mvn.w	r3, #2
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e012      	b.n	8002ea0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <osEventFlagsSet+0x78>
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <osEventFlagsSet+0x84>)
 8002e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	e004      	b.n	8002ea0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002e96:	6839      	ldr	r1, [r7, #0]
 8002e98:	6938      	ldr	r0, [r7, #16]
 8002e9a:	f000 f9c3 	bl	8003224 <xEventGroupSetBits>
 8002e9e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002ea0:	697b      	ldr	r3, [r7, #20]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	e000ed04 	.word	0xe000ed04

08002eb0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <osEventFlagsWait+0x22>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8002ed2:	f06f 0303 	mvn.w	r3, #3
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	e04b      	b.n	8002f72 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eda:	f3ef 8305 	mrs	r3, IPSR
 8002ede:	617b      	str	r3, [r7, #20]
  return(result);
 8002ee0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8002ee6:	f06f 0305 	mvn.w	r3, #5
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	e041      	b.n	8002f72 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
 8002efc:	e001      	b.n	8002f02 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	623b      	str	r3, [r7, #32]
 8002f10:	e001      	b.n	8002f16 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8002f12:	2301      	movs	r3, #1
 8002f14:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	69b8      	ldr	r0, [r7, #24]
 8002f22:	f000 f8b1 	bl	8003088 <xEventGroupWaitBits>
 8002f26:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4013      	ands	r3, r2
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d019      	beq.n	8002f72 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8002f44:	f06f 0301 	mvn.w	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e012      	b.n	8002f72 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002f4c:	f06f 0302 	mvn.w	r3, #2
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e00e      	b.n	8002f72 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8002f64:	f06f 0301 	mvn.w	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e002      	b.n	8002f72 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002f6c:	f06f 0302 	mvn.w	r3, #2
 8002f70:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8002f72:	69fb      	ldr	r3, [r7, #28]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4a06      	ldr	r2, [pc, #24]	; (8002fac <vApplicationGetIdleTaskMemory+0x30>)
 8002f92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	24000148 	.word	0x24000148
 8002fac:	240001a4 	.word	0x240001a4

08002fb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <vApplicationGetTimerTaskMemory+0x2c>)
 8002fc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <vApplicationGetTimerTaskMemory+0x30>)
 8002fc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fce:	601a      	str	r2, [r3, #0]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	240003a4 	.word	0x240003a4
 8002fe0:	24000400 	.word	0x24000400

08002fe4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10a      	bne.n	8003008 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003008:	2320      	movs	r3, #32
 800300a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b20      	cmp	r3, #32
 8003010:	d00a      	beq.n	8003028 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60fb      	str	r3, [r7, #12]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3304      	adds	r3, #4
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f9bf 	bl	80033c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2201      	movs	r2, #1
 8003046:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003048:	697b      	ldr	r3, [r7, #20]
	}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003058:	2020      	movs	r0, #32
 800305a:	f002 fcc5 	bl	80059e8 <pvPortMalloc>
 800305e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f9a5 	bl	80033c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800307c:	687b      	ldr	r3, [r7, #4]
	}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b090      	sub	sp, #64	; 0x40
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800309e:	2300      	movs	r3, #0
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <xEventGroupWaitBits+0x36>
	__asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	623b      	str	r3, [r7, #32]
}
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <xEventGroupWaitBits+0x56>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	61fb      	str	r3, [r7, #28]
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <xEventGroupWaitBits+0x72>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	61bb      	str	r3, [r7, #24]
}
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030fa:	f001 fdbd 	bl	8004c78 <xTaskGetSchedulerState>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <xEventGroupWaitBits+0x82>
 8003104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <xEventGroupWaitBits+0x86>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <xEventGroupWaitBits+0x88>
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	617b      	str	r3, [r7, #20]
}
 8003126:	bf00      	nop
 8003128:	e7fe      	b.n	8003128 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800312a:	f001 f925 	bl	8004378 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800313a:	f000 f90b 	bl	8003354 <prvTestWaitCondition>
 800313e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00e      	beq.n	8003164 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800314a:	2300      	movs	r3, #0
 800314c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d028      	beq.n	80031a6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	43db      	mvns	r3, r3
 800315c:	401a      	ands	r2, r3
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e020      	b.n	80031a6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800316e:	2301      	movs	r3, #1
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
 8003172:	e018      	b.n	80031a6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003180:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800318e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003192:	1d18      	adds	r0, r3, #4
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	4313      	orrs	r3, r2
 800319a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319c:	4619      	mov	r1, r3
 800319e:	f001 fae3 	bl	8004768 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80031a6:	f001 f8f5 	bl	8004394 <xTaskResumeAll>
 80031aa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80031ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d031      	beq.n	8003216 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <xEventGroupWaitBits+0x198>)
 80031ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80031c8:	f001 fde2 	bl	8004d90 <uxTaskResetEventItemValue>
 80031cc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80031ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d11a      	bne.n	800320e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80031d8:	f002 fae4 	bl	80057a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031e8:	f000 f8b4 	bl	8003354 <prvTestWaitCondition>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80031f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	43db      	mvns	r3, r3
 8003200:	401a      	ands	r2, r3
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800320a:	f002 fafb 	bl	8005804 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003210:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003214:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003218:	4618      	mov	r0, r3
 800321a:	3740      	adds	r7, #64	; 0x40
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	; 0x38
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800322e:	2300      	movs	r3, #0
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003236:	2300      	movs	r3, #0
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xEventGroupSetBits+0x32>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	613b      	str	r3, [r7, #16]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <xEventGroupSetBits+0x52>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60fb      	str	r3, [r7, #12]
}
 8003272:	bf00      	nop
 8003274:	e7fe      	b.n	8003274 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	3304      	adds	r3, #4
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	3308      	adds	r3, #8
 8003280:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003282:	f001 f879 	bl	8004378 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	431a      	orrs	r2, r3
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003298:	e03c      	b.n	8003314 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80032a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80032b0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032b8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d108      	bne.n	80032d6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d4:	e008      	b.n	80032e8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d101      	bne.n	80032e8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80032f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003308:	4619      	mov	r1, r3
 800330a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800330c:	f001 faf8 	bl	8004900 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	429a      	cmp	r2, r3
 800331a:	d1be      	bne.n	800329a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	43db      	mvns	r3, r3
 8003324:	401a      	ands	r2, r3
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800332a:	f001 f833 	bl	8004394 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	681b      	ldr	r3, [r3, #0]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3738      	adds	r7, #56	; 0x38
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff6c 	bl	8003224 <xEventGroupSetBits>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d107      	bne.n	800337a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003374:	2301      	movs	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e007      	b.n	800338a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4013      	ands	r3, r2
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d101      	bne.n	800338a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003386:	2301      	movs	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800338a:	697b      	ldr	r3, [r7, #20]
}
 800338c:	4618      	mov	r0, r3
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	4804      	ldr	r0, [pc, #16]	; (80033bc <xEventGroupSetBitsFromISR+0x24>)
 80033ac:	f002 f8aa 	bl	8005504 <xTimerPendFunctionCallFromISR>
 80033b0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80033b2:	697b      	ldr	r3, [r7, #20]
	}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	0800333b 	.word	0x0800333b

080033c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f103 0208 	add.w	r2, r3, #8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f103 0208 	add.w	r2, r3, #8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f103 0208 	add.w	r2, r3, #8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	601a      	str	r2, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003478:	d103      	bne.n	8003482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e00c      	b.n	800349c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3308      	adds	r3, #8
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e002      	b.n	8003490 <vListInsert+0x2e>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	429a      	cmp	r2, r3
 800349a:	d2f6      	bcs.n	800348a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6892      	ldr	r2, [r2, #8]
 80034ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6852      	ldr	r2, [r2, #4]
 80034f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d103      	bne.n	8003508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xQueueGenericReset+0x2a>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	60bb      	str	r3, [r7, #8]
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003552:	f002 f927 	bl	80057a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	441a      	add	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	3b01      	subs	r3, #1
 8003584:	68f9      	ldr	r1, [r7, #12]
 8003586:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	441a      	add	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	22ff      	movs	r2, #255	; 0xff
 8003596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22ff      	movs	r2, #255	; 0xff
 800359e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d114      	bne.n	80035d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01a      	beq.n	80035e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3310      	adds	r3, #16
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f93f 	bl	8004838 <xTaskRemoveFromEventList>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d012      	beq.n	80035e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <xQueueGenericReset+0xcc>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	e009      	b.n	80035e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3310      	adds	r3, #16
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fef2 	bl	80033c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3324      	adds	r3, #36	; 0x24
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff feed 	bl	80033c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035e6:	f002 f90d 	bl	8005804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035ea:	2301      	movs	r3, #1
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	e000ed04 	.word	0xe000ed04

080035f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08e      	sub	sp, #56	; 0x38
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800361e:	bf00      	nop
 8003620:	e7fe      	b.n	8003620 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
}
 800363a:	bf00      	nop
 800363c:	e7fe      	b.n	800363c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <xQueueGenericCreateStatic+0x52>
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <xQueueGenericCreateStatic+0x56>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <xQueueGenericCreateStatic+0x58>
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	623b      	str	r3, [r7, #32]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <xQueueGenericCreateStatic+0x7e>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <xQueueGenericCreateStatic+0x82>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <xQueueGenericCreateStatic+0x84>
 800367a:	2300      	movs	r3, #0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	61fb      	str	r3, [r7, #28]
}
 8003692:	bf00      	nop
 8003694:	e7fe      	b.n	8003694 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003696:	2350      	movs	r3, #80	; 0x50
 8003698:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b50      	cmp	r3, #80	; 0x50
 800369e:	d00a      	beq.n	80036b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	61bb      	str	r3, [r7, #24]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80036b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00d      	beq.n	80036de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f805 	bl	80036e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3730      	adds	r7, #48	; 0x30
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e002      	b.n	800370a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003716:	2101      	movs	r1, #1
 8003718:	69b8      	ldr	r0, [r7, #24]
 800371a:	f7ff ff05 	bl	8003528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08e      	sub	sp, #56	; 0x38
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueGenericSend+0x32>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d103      	bne.n	8003770 <xQueueGenericSend+0x40>
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <xQueueGenericSend+0x44>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <xQueueGenericSend+0x46>
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <xQueueGenericSend+0x60>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800378c:	bf00      	nop
 800378e:	e7fe      	b.n	800378e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d103      	bne.n	800379e <xQueueGenericSend+0x6e>
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <xQueueGenericSend+0x72>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <xQueueGenericSend+0x74>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <xQueueGenericSend+0x8e>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	623b      	str	r3, [r7, #32]
}
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037be:	f001 fa5b 	bl	8004c78 <xTaskGetSchedulerState>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <xQueueGenericSend+0x9e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <xQueueGenericSend+0xa2>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xQueueGenericSend+0xa4>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xQueueGenericSend+0xbe>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	61fb      	str	r3, [r7, #28]
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ee:	f001 ffd9 	bl	80057a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d302      	bcc.n	8003804 <xQueueGenericSend+0xd4>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d129      	bne.n	8003858 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800380a:	f000 fa0b 	bl	8003c24 <prvCopyDataToQueue>
 800380e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	3324      	adds	r3, #36	; 0x24
 800381c:	4618      	mov	r0, r3
 800381e:	f001 f80b 	bl	8004838 <xTaskRemoveFromEventList>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003828:	4b3f      	ldr	r3, [pc, #252]	; (8003928 <xQueueGenericSend+0x1f8>)
 800382a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	e00a      	b.n	8003850 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003840:	4b39      	ldr	r3, [pc, #228]	; (8003928 <xQueueGenericSend+0x1f8>)
 8003842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003850:	f001 ffd8 	bl	8005804 <vPortExitCritical>
				return pdPASS;
 8003854:	2301      	movs	r3, #1
 8003856:	e063      	b.n	8003920 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800385e:	f001 ffd1 	bl	8005804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003862:	2300      	movs	r3, #0
 8003864:	e05c      	b.n	8003920 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	4618      	mov	r0, r3
 8003872:	f001 f8a7 	bl	80049c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800387a:	f001 ffc3 	bl	8005804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800387e:	f000 fd7b 	bl	8004378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003882:	f001 ff8f 	bl	80057a4 <vPortEnterCritical>
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800388c:	b25b      	sxtb	r3, r3
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003892:	d103      	bne.n	800389c <xQueueGenericSend+0x16c>
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a2:	b25b      	sxtb	r3, r3
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSend+0x182>
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b2:	f001 ffa7 	bl	8005804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038b6:	1d3a      	adds	r2, r7, #4
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 f896 	bl	80049f0 <xTaskCheckForTimeOut>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d124      	bne.n	8003914 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038cc:	f000 faa2 	bl	8003e14 <prvIsQueueFull>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d018      	beq.n	8003908 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	3310      	adds	r3, #16
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 ff1e 	bl	8004720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038e6:	f000 fa2d 	bl	8003d44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038ea:	f000 fd53 	bl	8004394 <xTaskResumeAll>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f47f af7c 	bne.w	80037ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <xQueueGenericSend+0x1f8>)
 80038f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	e772      	b.n	80037ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800390a:	f000 fa1b 	bl	8003d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800390e:	f000 fd41 	bl	8004394 <xTaskResumeAll>
 8003912:	e76c      	b.n	80037ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003916:	f000 fa15 	bl	8003d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800391a:	f000 fd3b 	bl	8004394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800391e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003920:	4618      	mov	r0, r3
 8003922:	3738      	adds	r7, #56	; 0x38
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	e000ed04 	.word	0xe000ed04

0800392c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b090      	sub	sp, #64	; 0x40
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003956:	bf00      	nop
 8003958:	e7fe      	b.n	8003958 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <xQueueGenericSendFromISR+0x3c>
 8003960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <xQueueGenericSendFromISR+0x40>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <xQueueGenericSendFromISR+0x42>
 800396c:	2300      	movs	r3, #0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10a      	bne.n	8003988 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d103      	bne.n	8003996 <xQueueGenericSendFromISR+0x6a>
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <xQueueGenericSendFromISR+0x6e>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <xQueueGenericSendFromISR+0x70>
 800399a:	2300      	movs	r3, #0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10a      	bne.n	80039b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	623b      	str	r3, [r7, #32]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039b6:	f001 ffd7 	bl	8005968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039ba:	f3ef 8211 	mrs	r2, BASEPRI
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	61fa      	str	r2, [r7, #28]
 80039d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <xQueueGenericSendFromISR+0xbc>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d12f      	bne.n	8003a48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039fe:	f000 f911 	bl	8003c24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a0a:	d112      	bne.n	8003a32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d016      	beq.n	8003a42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a16:	3324      	adds	r3, #36	; 0x24
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 ff0d 	bl	8004838 <xTaskRemoveFromEventList>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e007      	b.n	8003a42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a36:	3301      	adds	r3, #1
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	b25a      	sxtb	r2, r3
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a42:	2301      	movs	r3, #1
 8003a44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003a46:	e001      	b.n	8003a4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3740      	adds	r7, #64	; 0x40
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08c      	sub	sp, #48	; 0x30
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <xQueueReceive+0x30>
	__asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	623b      	str	r3, [r7, #32]
}
 8003a90:	bf00      	nop
 8003a92:	e7fe      	b.n	8003a92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <xQueueReceive+0x3e>
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <xQueueReceive+0x42>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueReceive+0x44>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueReceive+0x5e>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	61fb      	str	r3, [r7, #28]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ac2:	f001 f8d9 	bl	8004c78 <xTaskGetSchedulerState>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <xQueueReceive+0x6e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <xQueueReceive+0x72>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e000      	b.n	8003ad8 <xQueueReceive+0x74>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <xQueueReceive+0x8e>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	61bb      	str	r3, [r7, #24]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003af2:	f001 fe57 	bl	80057a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01f      	beq.n	8003b42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b06:	f000 f8f7 	bl	8003cf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	1e5a      	subs	r2, r3, #1
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00f      	beq.n	8003b3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	3310      	adds	r3, #16
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fe8a 	bl	8004838 <xTaskRemoveFromEventList>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <xQueueReceive+0x1bc>)
 8003b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b3a:	f001 fe63 	bl	8005804 <vPortExitCritical>
				return pdPASS;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e069      	b.n	8003c16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b48:	f001 fe5c 	bl	8005804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e062      	b.n	8003c16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b56:	f107 0310 	add.w	r3, r7, #16
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 ff32 	bl	80049c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b60:	2301      	movs	r3, #1
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b64:	f001 fe4e 	bl	8005804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b68:	f000 fc06 	bl	8004378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b6c:	f001 fe1a 	bl	80057a4 <vPortEnterCritical>
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b7c:	d103      	bne.n	8003b86 <xQueueReceive+0x122>
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b8c:	b25b      	sxtb	r3, r3
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b92:	d103      	bne.n	8003b9c <xQueueReceive+0x138>
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9c:	f001 fe32 	bl	8005804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ba0:	1d3a      	adds	r2, r7, #4
 8003ba2:	f107 0310 	add.w	r3, r7, #16
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 ff21 	bl	80049f0 <xTaskCheckForTimeOut>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d123      	bne.n	8003bfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb6:	f000 f917 	bl	8003de8 <prvIsQueueEmpty>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d017      	beq.n	8003bf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	3324      	adds	r3, #36	; 0x24
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fda9 	bl	8004720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bd0:	f000 f8b8 	bl	8003d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bd4:	f000 fbde 	bl	8004394 <xTaskResumeAll>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d189      	bne.n	8003af2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <xQueueReceive+0x1bc>)
 8003be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	e780      	b.n	8003af2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf2:	f000 f8a7 	bl	8003d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bf6:	f000 fbcd 	bl	8004394 <xTaskResumeAll>
 8003bfa:	e77a      	b.n	8003af2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bfe:	f000 f8a1 	bl	8003d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c02:	f000 fbc7 	bl	8004394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c08:	f000 f8ee 	bl	8003de8 <prvIsQueueEmpty>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f43f af6f 	beq.w	8003af2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3730      	adds	r7, #48	; 0x30
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10d      	bne.n	8003c5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d14d      	bne.n	8003ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 f830 	bl	8004cb4 <xTaskPriorityDisinherit>
 8003c54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	e043      	b.n	8003ce6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d119      	bne.n	8003c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6858      	ldr	r0, [r3, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	f002 f8ce 	bl	8005e10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d32b      	bcc.n	8003ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	e026      	b.n	8003ce6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68d8      	ldr	r0, [r3, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	f002 f8b4 	bl	8005e10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d207      	bcs.n	8003cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	425b      	negs	r3, r3
 8003cce:	441a      	add	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d105      	bne.n	8003ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003cee:	697b      	ldr	r3, [r7, #20]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d018      	beq.n	8003d3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	441a      	add	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d303      	bcc.n	8003d2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68d9      	ldr	r1, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	461a      	mov	r2, r3
 8003d36:	6838      	ldr	r0, [r7, #0]
 8003d38:	f002 f86a 	bl	8005e10 <memcpy>
	}
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d4c:	f001 fd2a 	bl	80057a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d58:	e011      	b.n	8003d7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d012      	beq.n	8003d88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3324      	adds	r3, #36	; 0x24
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fd66 	bl	8004838 <xTaskRemoveFromEventList>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d72:	f000 fe9f 	bl	8004ab4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	dce9      	bgt.n	8003d5a <prvUnlockQueue+0x16>
 8003d86:	e000      	b.n	8003d8a <prvUnlockQueue+0x46>
					break;
 8003d88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	22ff      	movs	r2, #255	; 0xff
 8003d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d92:	f001 fd37 	bl	8005804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d96:	f001 fd05 	bl	80057a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003da2:	e011      	b.n	8003dc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d012      	beq.n	8003dd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3310      	adds	r3, #16
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fd41 	bl	8004838 <xTaskRemoveFromEventList>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003dbc:	f000 fe7a 	bl	8004ab4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003dc0:	7bbb      	ldrb	r3, [r7, #14]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dce9      	bgt.n	8003da4 <prvUnlockQueue+0x60>
 8003dd0:	e000      	b.n	8003dd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003dd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	22ff      	movs	r2, #255	; 0xff
 8003dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ddc:	f001 fd12 	bl	8005804 <vPortExitCritical>
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003df0:	f001 fcd8 	bl	80057a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e001      	b.n	8003e06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e06:	f001 fcfd 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e1c:	f001 fcc2 	bl	80057a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d102      	bne.n	8003e32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e001      	b.n	8003e36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e36:	f001 fce5 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e014      	b.n	8003e7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e54:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <vQueueAddToRegistry+0x50>)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e60:	490c      	ldr	r1, [pc, #48]	; (8003e94 <vQueueAddToRegistry+0x50>)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e6a:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <vQueueAddToRegistry+0x50>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e76:	e006      	b.n	8003e86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	d9e7      	bls.n	8003e54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	24000800 	.word	0x24000800

08003e98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ea8:	f001 fc7c 	bl	80057a4 <vPortEnterCritical>
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb8:	d103      	bne.n	8003ec2 <vQueueWaitForMessageRestricted+0x2a>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ec8:	b25b      	sxtb	r3, r3
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ece:	d103      	bne.n	8003ed8 <vQueueWaitForMessageRestricted+0x40>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed8:	f001 fc94 	bl	8005804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fc77 	bl	80047e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ef2:	6978      	ldr	r0, [r7, #20]
 8003ef4:	f7ff ff26 	bl	8003d44 <prvUnlockQueue>
	}
 8003ef8:	bf00      	nop
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08e      	sub	sp, #56	; 0x38
 8003f04:	af04      	add	r7, sp, #16
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	623b      	str	r3, [r7, #32]
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	61fb      	str	r3, [r7, #28]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f46:	235c      	movs	r3, #92	; 0x5c
 8003f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b5c      	cmp	r3, #92	; 0x5c
 8003f4e:	d00a      	beq.n	8003f66 <xTaskCreateStatic+0x66>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	61bb      	str	r3, [r7, #24]
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01e      	beq.n	8003fac <xTaskCreateStatic+0xac>
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01b      	beq.n	8003fac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f86:	2300      	movs	r3, #0
 8003f88:	9303      	str	r3, [sp, #12]
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	9302      	str	r3, [sp, #8]
 8003f8e:	f107 0314 	add.w	r3, r7, #20
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f850 	bl	8004044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fa6:	f000 f8dd 	bl	8004164 <prvAddNewTaskToReadyList>
 8003faa:	e001      	b.n	8003fb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fb0:	697b      	ldr	r3, [r7, #20]
	}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3728      	adds	r7, #40	; 0x28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b08c      	sub	sp, #48	; 0x30
 8003fbe:	af04      	add	r7, sp, #16
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 fd0a 	bl	80059e8 <pvPortMalloc>
 8003fd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00e      	beq.n	8003ffa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fdc:	205c      	movs	r0, #92	; 0x5c
 8003fde:	f001 fd03 	bl	80059e8 <pvPortMalloc>
 8003fe2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff0:	e005      	b.n	8003ffe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ff2:	6978      	ldr	r0, [r7, #20]
 8003ff4:	f001 fdc4 	bl	8005b80 <vPortFree>
 8003ff8:	e001      	b.n	8003ffe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d017      	beq.n	8004034 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	2300      	movs	r3, #0
 8004010:	9303      	str	r3, [sp, #12]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	9302      	str	r3, [sp, #8]
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f80e 	bl	8004044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004028:	69f8      	ldr	r0, [r7, #28]
 800402a:	f000 f89b 	bl	8004164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800402e:	2301      	movs	r3, #1
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	e002      	b.n	800403a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004038:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800403a:	69bb      	ldr	r3, [r7, #24]
	}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	461a      	mov	r2, r3
 800405c:	21a5      	movs	r1, #165	; 0xa5
 800405e:	f001 fee5 	bl	8005e2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800406c:	440b      	add	r3, r1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	617b      	str	r3, [r7, #20]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01f      	beq.n	80040e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e012      	b.n	80040ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	7819      	ldrb	r1, [r3, #0]
 80040b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	3334      	adds	r3, #52	; 0x34
 80040b8:	460a      	mov	r2, r1
 80040ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d006      	beq.n	80040d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b0f      	cmp	r3, #15
 80040d2:	d9e9      	bls.n	80040a8 <prvInitialiseNewTask+0x64>
 80040d4:	e000      	b.n	80040d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80040d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e0:	e003      	b.n	80040ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	2b37      	cmp	r3, #55	; 0x37
 80040ee:	d901      	bls.n	80040f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040f0:	2337      	movs	r3, #55	; 0x37
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	2200      	movs	r2, #0
 8004104:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	3304      	adds	r3, #4
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff f978 	bl	8003400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	3318      	adds	r3, #24
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f973 	bl	8003400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	2200      	movs	r2, #0
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	69b8      	ldr	r0, [r7, #24]
 8004144:	f001 f9fe 	bl	8005544 <pxPortInitialiseStack>
 8004148:	4602      	mov	r2, r0
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800415a:	bf00      	nop
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800416c:	f001 fb1a 	bl	80057a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004170:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <prvAddNewTaskToReadyList+0xc4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	4a2c      	ldr	r2, [pc, #176]	; (8004228 <prvAddNewTaskToReadyList+0xc4>)
 8004178:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800417a:	4b2c      	ldr	r3, [pc, #176]	; (800422c <prvAddNewTaskToReadyList+0xc8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004182:	4a2a      	ldr	r2, [pc, #168]	; (800422c <prvAddNewTaskToReadyList+0xc8>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <prvAddNewTaskToReadyList+0xc4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d110      	bne.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004190:	f000 fcb4 	bl	8004afc <prvInitialiseTaskLists>
 8004194:	e00d      	b.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004196:	4b26      	ldr	r3, [pc, #152]	; (8004230 <prvAddNewTaskToReadyList+0xcc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <prvAddNewTaskToReadyList+0xc8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d802      	bhi.n	80041b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041ac:	4a1f      	ldr	r2, [pc, #124]	; (800422c <prvAddNewTaskToReadyList+0xc8>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041b2:	4b20      	ldr	r3, [pc, #128]	; (8004234 <prvAddNewTaskToReadyList+0xd0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	4a1e      	ldr	r2, [pc, #120]	; (8004234 <prvAddNewTaskToReadyList+0xd0>)
 80041ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <prvAddNewTaskToReadyList+0xd0>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <prvAddNewTaskToReadyList+0xd4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d903      	bls.n	80041d8 <prvAddNewTaskToReadyList+0x74>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <prvAddNewTaskToReadyList+0xd4>)
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4a15      	ldr	r2, [pc, #84]	; (800423c <prvAddNewTaskToReadyList+0xd8>)
 80041e6:	441a      	add	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f7ff f913 	bl	800341a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041f4:	f001 fb06 	bl	8005804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <prvAddNewTaskToReadyList+0xcc>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00e      	beq.n	800421e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <prvAddNewTaskToReadyList+0xc8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	429a      	cmp	r2, r3
 800420c:	d207      	bcs.n	800421e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <prvAddNewTaskToReadyList+0xdc>)
 8004210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	24000d14 	.word	0x24000d14
 800422c:	24000840 	.word	0x24000840
 8004230:	24000d20 	.word	0x24000d20
 8004234:	24000d30 	.word	0x24000d30
 8004238:	24000d1c 	.word	0x24000d1c
 800423c:	24000844 	.word	0x24000844
 8004240:	e000ed04 	.word	0xe000ed04

08004244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d017      	beq.n	8004286 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <vTaskDelay+0x60>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <vTaskDelay+0x30>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	60bb      	str	r3, [r7, #8]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004274:	f000 f880 	bl	8004378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004278:	2100      	movs	r1, #0
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fda0 	bl	8004dc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004280:	f000 f888 	bl	8004394 <xTaskResumeAll>
 8004284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <vTaskDelay+0x64>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	24000d3c 	.word	0x24000d3c
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042ba:	463a      	mov	r2, r7
 80042bc:	1d39      	adds	r1, r7, #4
 80042be:	f107 0308 	add.w	r3, r7, #8
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe fe5a 	bl	8002f7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	9202      	str	r2, [sp, #8]
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	2300      	movs	r3, #0
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	460a      	mov	r2, r1
 80042da:	4921      	ldr	r1, [pc, #132]	; (8004360 <vTaskStartScheduler+0xb4>)
 80042dc:	4821      	ldr	r0, [pc, #132]	; (8004364 <vTaskStartScheduler+0xb8>)
 80042de:	f7ff fe0f 	bl	8003f00 <xTaskCreateStatic>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4a20      	ldr	r2, [pc, #128]	; (8004368 <vTaskStartScheduler+0xbc>)
 80042e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <vTaskStartScheduler+0xbc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042f0:	2301      	movs	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e001      	b.n	80042fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d102      	bne.n	8004306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004300:	f000 fdb2 	bl	8004e68 <xTimerCreateTimerTask>
 8004304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d116      	bne.n	800433a <vTaskStartScheduler+0x8e>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	613b      	str	r3, [r7, #16]
}
 800431e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <vTaskStartScheduler+0xc0>)
 8004322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004326:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <vTaskStartScheduler+0xc4>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <vTaskStartScheduler+0xc8>)
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004334:	f001 f994 	bl	8005660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004338:	e00e      	b.n	8004358 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004340:	d10a      	bne.n	8004358 <vTaskStartScheduler+0xac>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	60fb      	str	r3, [r7, #12]
}
 8004354:	bf00      	nop
 8004356:	e7fe      	b.n	8004356 <vTaskStartScheduler+0xaa>
}
 8004358:	bf00      	nop
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	08006e8c 	.word	0x08006e8c
 8004364:	08004acd 	.word	0x08004acd
 8004368:	24000d38 	.word	0x24000d38
 800436c:	24000d34 	.word	0x24000d34
 8004370:	24000d20 	.word	0x24000d20
 8004374:	24000d18 	.word	0x24000d18

08004378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <vTaskSuspendAll+0x18>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	4a03      	ldr	r2, [pc, #12]	; (8004390 <vTaskSuspendAll+0x18>)
 8004384:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	24000d3c 	.word	0x24000d3c

08004394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043a2:	4b42      	ldr	r3, [pc, #264]	; (80044ac <xTaskResumeAll+0x118>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	603b      	str	r3, [r7, #0]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043c0:	f001 f9f0 	bl	80057a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043c4:	4b39      	ldr	r3, [pc, #228]	; (80044ac <xTaskResumeAll+0x118>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	4a38      	ldr	r2, [pc, #224]	; (80044ac <xTaskResumeAll+0x118>)
 80043cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <xTaskResumeAll+0x118>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d162      	bne.n	800449c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <xTaskResumeAll+0x11c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d05e      	beq.n	800449c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043de:	e02f      	b.n	8004440 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e0:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <xTaskResumeAll+0x120>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3318      	adds	r3, #24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f871 	bl	80034d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff f86c 	bl	80034d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <xTaskResumeAll+0x124>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d903      	bls.n	8004410 <xTaskResumeAll+0x7c>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <xTaskResumeAll+0x124>)
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4a27      	ldr	r2, [pc, #156]	; (80044bc <xTaskResumeAll+0x128>)
 800441e:	441a      	add	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f7fe fff7 	bl	800341a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <xTaskResumeAll+0x12c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800443a:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <xTaskResumeAll+0x130>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004440:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <xTaskResumeAll+0x120>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1cb      	bne.n	80043e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800444e:	f000 fbf3 	bl	8004c38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <xTaskResumeAll+0x134>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d010      	beq.n	8004480 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800445e:	f000 f847 	bl	80044f0 <xTaskIncrementTick>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004468:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <xTaskResumeAll+0x130>)
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3b01      	subs	r3, #1
 8004472:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f1      	bne.n	800445e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800447a:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <xTaskResumeAll+0x134>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <xTaskResumeAll+0x130>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004488:	2301      	movs	r3, #1
 800448a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <xTaskResumeAll+0x138>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800449c:	f001 f9b2 	bl	8005804 <vPortExitCritical>

	return xAlreadyYielded;
 80044a0:	68bb      	ldr	r3, [r7, #8]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	24000d3c 	.word	0x24000d3c
 80044b0:	24000d14 	.word	0x24000d14
 80044b4:	24000cd4 	.word	0x24000cd4
 80044b8:	24000d1c 	.word	0x24000d1c
 80044bc:	24000844 	.word	0x24000844
 80044c0:	24000840 	.word	0x24000840
 80044c4:	24000d28 	.word	0x24000d28
 80044c8:	24000d24 	.word	0x24000d24
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <xTaskGetTickCount+0x1c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044dc:	687b      	ldr	r3, [r7, #4]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	24000d18 	.word	0x24000d18

080044f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fa:	4b4f      	ldr	r3, [pc, #316]	; (8004638 <xTaskIncrementTick+0x148>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f040 808f 	bne.w	8004622 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004504:	4b4d      	ldr	r3, [pc, #308]	; (800463c <xTaskIncrementTick+0x14c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800450c:	4a4b      	ldr	r2, [pc, #300]	; (800463c <xTaskIncrementTick+0x14c>)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d120      	bne.n	800455a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004518:	4b49      	ldr	r3, [pc, #292]	; (8004640 <xTaskIncrementTick+0x150>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <xTaskIncrementTick+0x48>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	603b      	str	r3, [r7, #0]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <xTaskIncrementTick+0x46>
 8004538:	4b41      	ldr	r3, [pc, #260]	; (8004640 <xTaskIncrementTick+0x150>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	4b41      	ldr	r3, [pc, #260]	; (8004644 <xTaskIncrementTick+0x154>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a3f      	ldr	r2, [pc, #252]	; (8004640 <xTaskIncrementTick+0x150>)
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4a3f      	ldr	r2, [pc, #252]	; (8004644 <xTaskIncrementTick+0x154>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <xTaskIncrementTick+0x158>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	4a3d      	ldr	r2, [pc, #244]	; (8004648 <xTaskIncrementTick+0x158>)
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	f000 fb6f 	bl	8004c38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800455a:	4b3c      	ldr	r3, [pc, #240]	; (800464c <xTaskIncrementTick+0x15c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	429a      	cmp	r2, r3
 8004562:	d349      	bcc.n	80045f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004564:	4b36      	ldr	r3, [pc, #216]	; (8004640 <xTaskIncrementTick+0x150>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d104      	bne.n	8004578 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456e:	4b37      	ldr	r3, [pc, #220]	; (800464c <xTaskIncrementTick+0x15c>)
 8004570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004574:	601a      	str	r2, [r3, #0]
					break;
 8004576:	e03f      	b.n	80045f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004578:	4b31      	ldr	r3, [pc, #196]	; (8004640 <xTaskIncrementTick+0x150>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d203      	bcs.n	8004598 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004590:	4a2e      	ldr	r2, [pc, #184]	; (800464c <xTaskIncrementTick+0x15c>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004596:	e02f      	b.n	80045f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	3304      	adds	r3, #4
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe ff99 	bl	80034d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3318      	adds	r3, #24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe ff90 	bl	80034d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b25      	ldr	r3, [pc, #148]	; (8004650 <xTaskIncrementTick+0x160>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <xTaskIncrementTick+0xd8>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a22      	ldr	r2, [pc, #136]	; (8004650 <xTaskIncrementTick+0x160>)
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <xTaskIncrementTick+0x164>)
 80045d6:	441a      	add	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe ff1b 	bl	800341a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <xTaskIncrementTick+0x168>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d3b8      	bcc.n	8004564 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f6:	e7b5      	b.n	8004564 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045f8:	4b17      	ldr	r3, [pc, #92]	; (8004658 <xTaskIncrementTick+0x168>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	4915      	ldr	r1, [pc, #84]	; (8004654 <xTaskIncrementTick+0x164>)
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d901      	bls.n	8004614 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <xTaskIncrementTick+0x16c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800461c:	2301      	movs	r3, #1
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e004      	b.n	800462c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <xTaskIncrementTick+0x170>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <xTaskIncrementTick+0x170>)
 800462a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800462c:	697b      	ldr	r3, [r7, #20]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	24000d3c 	.word	0x24000d3c
 800463c:	24000d18 	.word	0x24000d18
 8004640:	24000ccc 	.word	0x24000ccc
 8004644:	24000cd0 	.word	0x24000cd0
 8004648:	24000d2c 	.word	0x24000d2c
 800464c:	24000d34 	.word	0x24000d34
 8004650:	24000d1c 	.word	0x24000d1c
 8004654:	24000844 	.word	0x24000844
 8004658:	24000840 	.word	0x24000840
 800465c:	24000d28 	.word	0x24000d28
 8004660:	24000d24 	.word	0x24000d24

08004664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800466a:	4b28      	ldr	r3, [pc, #160]	; (800470c <vTaskSwitchContext+0xa8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004672:	4b27      	ldr	r3, [pc, #156]	; (8004710 <vTaskSwitchContext+0xac>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004678:	e041      	b.n	80046fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800467a:	4b25      	ldr	r3, [pc, #148]	; (8004710 <vTaskSwitchContext+0xac>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004680:	4b24      	ldr	r3, [pc, #144]	; (8004714 <vTaskSwitchContext+0xb0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e010      	b.n	80046aa <vTaskSwitchContext+0x46>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <vTaskSwitchContext+0x3e>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	491b      	ldr	r1, [pc, #108]	; (8004718 <vTaskSwitchContext+0xb4>)
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0e4      	beq.n	8004688 <vTaskSwitchContext+0x24>
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <vTaskSwitchContext+0xb4>)
 80046ca:	4413      	add	r3, r2
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	3308      	adds	r3, #8
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d104      	bne.n	80046ee <vTaskSwitchContext+0x8a>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a09      	ldr	r2, [pc, #36]	; (800471c <vTaskSwitchContext+0xb8>)
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4a06      	ldr	r2, [pc, #24]	; (8004714 <vTaskSwitchContext+0xb0>)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6013      	str	r3, [r2, #0]
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	24000d3c 	.word	0x24000d3c
 8004710:	24000d28 	.word	0x24000d28
 8004714:	24000d1c 	.word	0x24000d1c
 8004718:	24000844 	.word	0x24000844
 800471c:	24000840 	.word	0x24000840

08004720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	60fb      	str	r3, [r7, #12]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <vTaskPlaceOnEventList+0x44>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3318      	adds	r3, #24
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fe fe87 	bl	8003462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004754:	2101      	movs	r1, #1
 8004756:	6838      	ldr	r0, [r7, #0]
 8004758:	f000 fb32 	bl	8004dc0 <prvAddCurrentTaskToDelayedList>
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	24000840 	.word	0x24000840

08004768 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	617b      	str	r3, [r7, #20]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004790:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	613b      	str	r3, [r7, #16]
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80047b8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <vTaskPlaceOnUnorderedEventList+0x74>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3318      	adds	r3, #24
 80047c0:	4619      	mov	r1, r3
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7fe fe29 	bl	800341a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047c8:	2101      	movs	r1, #1
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 faf8 	bl	8004dc0 <prvAddCurrentTaskToDelayedList>
}
 80047d0:	bf00      	nop
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	24000d3c 	.word	0x24000d3c
 80047dc:	24000840 	.word	0x24000840

080047e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	617b      	str	r3, [r7, #20]
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <vTaskPlaceOnEventListRestricted+0x54>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3318      	adds	r3, #24
 800480e:	4619      	mov	r1, r3
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f7fe fe02 	bl	800341a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800481c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004820:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	68b8      	ldr	r0, [r7, #8]
 8004826:	f000 facb 	bl	8004dc0 <prvAddCurrentTaskToDelayedList>
	}
 800482a:	bf00      	nop
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	24000840 	.word	0x24000840

08004838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	60fb      	str	r3, [r7, #12]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3318      	adds	r3, #24
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe fe33 	bl	80034d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800486e:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <xTaskRemoveFromEventList+0xb0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d11d      	bne.n	80048b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3304      	adds	r3, #4
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fe2a 	bl	80034d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <xTaskRemoveFromEventList+0xb4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d903      	bls.n	8004894 <xTaskRemoveFromEventList+0x5c>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4a16      	ldr	r2, [pc, #88]	; (80048ec <xTaskRemoveFromEventList+0xb4>)
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <xTaskRemoveFromEventList+0xb8>)
 80048a2:	441a      	add	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f7fe fdb5 	bl	800341a <vListInsertEnd>
 80048b0:	e005      	b.n	80048be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3318      	adds	r3, #24
 80048b6:	4619      	mov	r1, r3
 80048b8:	480e      	ldr	r0, [pc, #56]	; (80048f4 <xTaskRemoveFromEventList+0xbc>)
 80048ba:	f7fe fdae 	bl	800341a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <xTaskRemoveFromEventList+0xc0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d905      	bls.n	80048d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048cc:	2301      	movs	r3, #1
 80048ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <xTaskRemoveFromEventList+0xc4>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e001      	b.n	80048dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80048dc:	697b      	ldr	r3, [r7, #20]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	24000d3c 	.word	0x24000d3c
 80048ec:	24000d1c 	.word	0x24000d1c
 80048f0:	24000844 	.word	0x24000844
 80048f4:	24000cd4 	.word	0x24000cd4
 80048f8:	24000840 	.word	0x24000840
 80048fc:	24000d28 	.word	0x24000d28

08004900 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800490a:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	613b      	str	r3, [r7, #16]
}
 8004924:	bf00      	nop
 8004926:	e7fe      	b.n	8004926 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60fb      	str	r3, [r7, #12]
}
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fe fdbd 	bl	80034d4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	3304      	adds	r3, #4
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fdb8 	bl	80034d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d903      	bls.n	8004978 <vTaskRemoveFromUnorderedEventList+0x78>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	4a0f      	ldr	r2, [pc, #60]	; (80049b4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004986:	441a      	add	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f7fe fd43 	bl	800341a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4b08      	ldr	r3, [pc, #32]	; (80049bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	429a      	cmp	r2, r3
 80049a0:	d902      	bls.n	80049a8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80049a2:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
	}
}
 80049a8:	bf00      	nop
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	24000d3c 	.word	0x24000d3c
 80049b4:	24000d1c 	.word	0x24000d1c
 80049b8:	24000844 	.word	0x24000844
 80049bc:	24000840 	.word	0x24000840
 80049c0:	24000d28 	.word	0x24000d28

080049c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <vTaskInternalSetTimeOutState+0x24>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <vTaskInternalSetTimeOutState+0x28>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	605a      	str	r2, [r3, #4]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	24000d2c 	.word	0x24000d2c
 80049ec:	24000d18 	.word	0x24000d18

080049f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	613b      	str	r3, [r7, #16]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	60fb      	str	r3, [r7, #12]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a32:	f000 feb7 	bl	80057a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a36:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <xTaskCheckForTimeOut+0xbc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a4e:	d102      	bne.n	8004a56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e023      	b.n	8004a9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b15      	ldr	r3, [pc, #84]	; (8004ab0 <xTaskCheckForTimeOut+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d007      	beq.n	8004a72 <xTaskCheckForTimeOut+0x82>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d302      	bcc.n	8004a72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	e015      	b.n	8004a9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d20b      	bcs.n	8004a94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	1ad2      	subs	r2, r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff ff9b 	bl	80049c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	e004      	b.n	8004a9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a9e:	f000 feb1 	bl	8005804 <vPortExitCritical>

	return xReturn;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3720      	adds	r7, #32
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	24000d18 	.word	0x24000d18
 8004ab0:	24000d2c 	.word	0x24000d2c

08004ab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <vTaskMissedYield+0x14>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	24000d28 	.word	0x24000d28

08004acc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ad4:	f000 f852 	bl	8004b7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <prvIdleTask+0x28>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d9f9      	bls.n	8004ad4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <prvIdleTask+0x2c>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004af0:	e7f0      	b.n	8004ad4 <prvIdleTask+0x8>
 8004af2:	bf00      	nop
 8004af4:	24000844 	.word	0x24000844
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	e00c      	b.n	8004b22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <prvInitialiseTaskLists+0x60>)
 8004b14:	4413      	add	r3, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fc52 	bl	80033c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b37      	cmp	r3, #55	; 0x37
 8004b26:	d9ef      	bls.n	8004b08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b28:	480d      	ldr	r0, [pc, #52]	; (8004b60 <prvInitialiseTaskLists+0x64>)
 8004b2a:	f7fe fc49 	bl	80033c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b2e:	480d      	ldr	r0, [pc, #52]	; (8004b64 <prvInitialiseTaskLists+0x68>)
 8004b30:	f7fe fc46 	bl	80033c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b34:	480c      	ldr	r0, [pc, #48]	; (8004b68 <prvInitialiseTaskLists+0x6c>)
 8004b36:	f7fe fc43 	bl	80033c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b3a:	480c      	ldr	r0, [pc, #48]	; (8004b6c <prvInitialiseTaskLists+0x70>)
 8004b3c:	f7fe fc40 	bl	80033c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b40:	480b      	ldr	r0, [pc, #44]	; (8004b70 <prvInitialiseTaskLists+0x74>)
 8004b42:	f7fe fc3d 	bl	80033c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <prvInitialiseTaskLists+0x78>)
 8004b48:	4a05      	ldr	r2, [pc, #20]	; (8004b60 <prvInitialiseTaskLists+0x64>)
 8004b4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <prvInitialiseTaskLists+0x7c>)
 8004b4e:	4a05      	ldr	r2, [pc, #20]	; (8004b64 <prvInitialiseTaskLists+0x68>)
 8004b50:	601a      	str	r2, [r3, #0]
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	24000844 	.word	0x24000844
 8004b60:	24000ca4 	.word	0x24000ca4
 8004b64:	24000cb8 	.word	0x24000cb8
 8004b68:	24000cd4 	.word	0x24000cd4
 8004b6c:	24000ce8 	.word	0x24000ce8
 8004b70:	24000d00 	.word	0x24000d00
 8004b74:	24000ccc 	.word	0x24000ccc
 8004b78:	24000cd0 	.word	0x24000cd0

08004b7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b82:	e019      	b.n	8004bb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b84:	f000 fe0e 	bl	80057a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <prvCheckTasksWaitingTermination+0x50>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fe fc9d 	bl	80034d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <prvCheckTasksWaitingTermination+0x54>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <prvCheckTasksWaitingTermination+0x54>)
 8004ba2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004bac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bae:	f000 fe29 	bl	8005804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f810 	bl	8004bd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <prvCheckTasksWaitingTermination+0x58>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e1      	bne.n	8004b84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bc0:	bf00      	nop
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	24000ce8 	.word	0x24000ce8
 8004bd0:	24000d14 	.word	0x24000d14
 8004bd4:	24000cfc 	.word	0x24000cfc

08004bd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d108      	bne.n	8004bfc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 ffc6 	bl	8005b80 <vPortFree>
				vPortFree( pxTCB );
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 ffc3 	bl	8005b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bfa:	e018      	b.n	8004c2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d103      	bne.n	8004c0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 ffba 	bl	8005b80 <vPortFree>
	}
 8004c0c:	e00f      	b.n	8004c2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d00a      	beq.n	8004c2e <prvDeleteTCB+0x56>
	__asm volatile
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	60fb      	str	r3, [r7, #12]
}
 8004c2a:	bf00      	nop
 8004c2c:	e7fe      	b.n	8004c2c <prvDeleteTCB+0x54>
	}
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <prvResetNextTaskUnblockTime+0x38>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d104      	bne.n	8004c52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <prvResetNextTaskUnblockTime+0x3c>)
 8004c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c50:	e008      	b.n	8004c64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <prvResetNextTaskUnblockTime+0x38>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <prvResetNextTaskUnblockTime+0x3c>)
 8004c62:	6013      	str	r3, [r2, #0]
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	24000ccc 	.word	0x24000ccc
 8004c74:	24000d34 	.word	0x24000d34

08004c78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <xTaskGetSchedulerState+0x34>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c86:	2301      	movs	r3, #1
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	e008      	b.n	8004c9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c8c:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <xTaskGetSchedulerState+0x38>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c94:	2302      	movs	r3, #2
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	e001      	b.n	8004c9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c9e:	687b      	ldr	r3, [r7, #4]
	}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	24000d20 	.word	0x24000d20
 8004cb0:	24000d3c 	.word	0x24000d3c

08004cb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d056      	beq.n	8004d78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cca:	4b2e      	ldr	r3, [pc, #184]	; (8004d84 <xTaskPriorityDisinherit+0xd0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d00a      	beq.n	8004cea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60fb      	str	r3, [r7, #12]
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	60bb      	str	r3, [r7, #8]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	1e5a      	subs	r2, r3, #1
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d02c      	beq.n	8004d78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d128      	bne.n	8004d78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fe fbd2 	bl	80034d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <xTaskPriorityDisinherit+0xd4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d903      	bls.n	8004d58 <xTaskPriorityDisinherit+0xa4>
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	4a0c      	ldr	r2, [pc, #48]	; (8004d88 <xTaskPriorityDisinherit+0xd4>)
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <xTaskPriorityDisinherit+0xd8>)
 8004d66:	441a      	add	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7fe fb53 	bl	800341a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d78:	697b      	ldr	r3, [r7, #20]
	}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	24000840 	.word	0x24000840
 8004d88:	24000d1c 	.word	0x24000d1c
 8004d8c:	24000844 	.word	0x24000844

08004d90 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004d96:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <uxTaskResetEventItemValue+0x2c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <uxTaskResetEventItemValue+0x2c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <uxTaskResetEventItemValue+0x2c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004dac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004dae:	687b      	ldr	r3, [r7, #4]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	24000840 	.word	0x24000840

08004dc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dca:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <prvAddCurrentTaskToDelayedList+0x90>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd0:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fb7c 	bl	80034d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de2:	d10a      	bne.n	8004dfa <prvAddCurrentTaskToDelayedList+0x3a>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dea:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4819      	ldr	r0, [pc, #100]	; (8004e58 <prvAddCurrentTaskToDelayedList+0x98>)
 8004df4:	f7fe fb11 	bl	800341a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004df8:	e026      	b.n	8004e48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4413      	add	r3, r2
 8004e00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d209      	bcs.n	8004e26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7fe fb1f 	bl	8003462 <vListInsert>
}
 8004e24:	e010      	b.n	8004e48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e26:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7fe fb15 	bl	8003462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d202      	bcs.n	8004e48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6013      	str	r3, [r2, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	24000d18 	.word	0x24000d18
 8004e54:	24000840 	.word	0x24000840
 8004e58:	24000d00 	.word	0x24000d00
 8004e5c:	24000cd0 	.word	0x24000cd0
 8004e60:	24000ccc 	.word	0x24000ccc
 8004e64:	24000d34 	.word	0x24000d34

08004e68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e72:	f000 fb07 	bl	8005484 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <xTimerCreateTimerTask+0x80>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d021      	beq.n	8004ec2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e86:	1d3a      	adds	r2, r7, #4
 8004e88:	f107 0108 	add.w	r1, r7, #8
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe f88d 	bl	8002fb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	9202      	str	r2, [sp, #8]
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	4910      	ldr	r1, [pc, #64]	; (8004eec <xTimerCreateTimerTask+0x84>)
 8004eaa:	4811      	ldr	r0, [pc, #68]	; (8004ef0 <xTimerCreateTimerTask+0x88>)
 8004eac:	f7ff f828 	bl	8003f00 <xTaskCreateStatic>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <xTimerCreateTimerTask+0x8c>)
 8004eb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <xTimerCreateTimerTask+0x8c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	613b      	str	r3, [r7, #16]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ede:	697b      	ldr	r3, [r7, #20]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	24000d70 	.word	0x24000d70
 8004eec:	08006e94 	.word	0x08006e94
 8004ef0:	0800502d 	.word	0x0800502d
 8004ef4:	24000d74 	.word	0x24000d74

08004ef8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	623b      	str	r3, [r7, #32]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f26:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <xTimerGenericCommand+0x98>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d02a      	beq.n	8004f84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	dc18      	bgt.n	8004f72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f40:	f7ff fe9a 	bl	8004c78 <xTaskGetSchedulerState>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d109      	bne.n	8004f5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <xTimerGenericCommand+0x98>)
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	f107 0110 	add.w	r1, r7, #16
 8004f52:	2300      	movs	r3, #0
 8004f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f56:	f7fe fbeb 	bl	8003730 <xQueueGenericSend>
 8004f5a:	6278      	str	r0, [r7, #36]	; 0x24
 8004f5c:	e012      	b.n	8004f84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <xTimerGenericCommand+0x98>)
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	f107 0110 	add.w	r1, r7, #16
 8004f66:	2300      	movs	r3, #0
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f7fe fbe1 	bl	8003730 <xQueueGenericSend>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f70:	e008      	b.n	8004f84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <xTimerGenericCommand+0x98>)
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f107 0110 	add.w	r1, r7, #16
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	f7fe fcd5 	bl	800392c <xQueueGenericSendFromISR>
 8004f82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3728      	adds	r7, #40	; 0x28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	24000d70 	.word	0x24000d70

08004f94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9e:	4b22      	ldr	r3, [pc, #136]	; (8005028 <prvProcessExpiredTimer+0x94>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe fa91 	bl	80034d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d022      	beq.n	8005006 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	18d1      	adds	r1, r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	6978      	ldr	r0, [r7, #20]
 8004fce:	f000 f8d1 	bl	8005174 <prvInsertTimerInActiveList>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01f      	beq.n	8005018 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	6978      	ldr	r0, [r7, #20]
 8004fe4:	f7ff ff88 	bl	8004ef8 <xTimerGenericCommand>
 8004fe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d113      	bne.n	8005018 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	60fb      	str	r3, [r7, #12]
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	b2da      	uxtb	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	6978      	ldr	r0, [r7, #20]
 800501e:	4798      	blx	r3
}
 8005020:	bf00      	nop
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	24000d68 	.word	0x24000d68

0800502c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005034:	f107 0308 	add.w	r3, r7, #8
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f857 	bl	80050ec <prvGetNextExpireTime>
 800503e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4619      	mov	r1, r3
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f803 	bl	8005050 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800504a:	f000 f8d5 	bl	80051f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800504e:	e7f1      	b.n	8005034 <prvTimerTask+0x8>

08005050 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800505a:	f7ff f98d 	bl	8004378 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800505e:	f107 0308 	add.w	r3, r7, #8
 8005062:	4618      	mov	r0, r3
 8005064:	f000 f866 	bl	8005134 <prvSampleTimeNow>
 8005068:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d130      	bne.n	80050d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <prvProcessTimerOrBlockTask+0x3c>
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	429a      	cmp	r2, r3
 800507c:	d806      	bhi.n	800508c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800507e:	f7ff f989 	bl	8004394 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff85 	bl	8004f94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800508a:	e024      	b.n	80050d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005092:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <prvProcessTimerOrBlockTask+0x90>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <prvProcessTimerOrBlockTask+0x50>
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <prvProcessTimerOrBlockTask+0x52>
 80050a0:	2300      	movs	r3, #0
 80050a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <prvProcessTimerOrBlockTask+0x94>)
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	4619      	mov	r1, r3
 80050b2:	f7fe fef1 	bl	8003e98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050b6:	f7ff f96d 	bl	8004394 <xTaskResumeAll>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10a      	bne.n	80050d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050c0:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <prvProcessTimerOrBlockTask+0x98>)
 80050c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	f3bf 8f6f 	isb	sy
}
 80050d0:	e001      	b.n	80050d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050d2:	f7ff f95f 	bl	8004394 <xTaskResumeAll>
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	24000d6c 	.word	0x24000d6c
 80050e4:	24000d70 	.word	0x24000d70
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <prvGetNextExpireTime+0x44>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <prvGetNextExpireTime+0x16>
 80050fe:	2201      	movs	r2, #1
 8005100:	e000      	b.n	8005104 <prvGetNextExpireTime+0x18>
 8005102:	2200      	movs	r2, #0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d105      	bne.n	800511c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005110:	4b07      	ldr	r3, [pc, #28]	; (8005130 <prvGetNextExpireTime+0x44>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e001      	b.n	8005120 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005120:	68fb      	ldr	r3, [r7, #12]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	24000d68 	.word	0x24000d68

08005134 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800513c:	f7ff f9c8 	bl	80044d0 <xTaskGetTickCount>
 8005140:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005142:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <prvSampleTimeNow+0x3c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	429a      	cmp	r2, r3
 800514a:	d205      	bcs.n	8005158 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800514c:	f000 f936 	bl	80053bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e002      	b.n	800515e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800515e:	4a04      	ldr	r2, [pc, #16]	; (8005170 <prvSampleTimeNow+0x3c>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005164:	68fb      	ldr	r3, [r7, #12]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	24000d78 	.word	0x24000d78

08005174 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d812      	bhi.n	80051c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d302      	bcc.n	80051ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e01b      	b.n	80051e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051ae:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <prvInsertTimerInActiveList+0x7c>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f7fe f952 	bl	8003462 <vListInsert>
 80051be:	e012      	b.n	80051e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d206      	bcs.n	80051d6 <prvInsertTimerInActiveList+0x62>
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d302      	bcc.n	80051d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051d0:	2301      	movs	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	e007      	b.n	80051e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <prvInsertTimerInActiveList+0x80>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3304      	adds	r3, #4
 80051de:	4619      	mov	r1, r3
 80051e0:	4610      	mov	r0, r2
 80051e2:	f7fe f93e 	bl	8003462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051e6:	697b      	ldr	r3, [r7, #20]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	24000d6c 	.word	0x24000d6c
 80051f4:	24000d68 	.word	0x24000d68

080051f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08e      	sub	sp, #56	; 0x38
 80051fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051fe:	e0ca      	b.n	8005396 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	da18      	bge.n	8005238 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	3304      	adds	r3, #4
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	61fb      	str	r3, [r7, #28]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800522e:	6850      	ldr	r0, [r2, #4]
 8005230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005232:	6892      	ldr	r2, [r2, #8]
 8005234:	4611      	mov	r1, r2
 8005236:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f2c0 80aa 	blt.w	8005394 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	3304      	adds	r3, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe f93f 	bl	80034d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005256:	463b      	mov	r3, r7
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff6b 	bl	8005134 <prvSampleTimeNow>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b09      	cmp	r3, #9
 8005264:	f200 8097 	bhi.w	8005396 <prvProcessReceivedCommands+0x19e>
 8005268:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <prvProcessReceivedCommands+0x78>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	08005299 	.word	0x08005299
 8005274:	08005299 	.word	0x08005299
 8005278:	08005299 	.word	0x08005299
 800527c:	0800530d 	.word	0x0800530d
 8005280:	08005321 	.word	0x08005321
 8005284:	0800536b 	.word	0x0800536b
 8005288:	08005299 	.word	0x08005299
 800528c:	08005299 	.word	0x08005299
 8005290:	0800530d 	.word	0x0800530d
 8005294:	08005321 	.word	0x08005321
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	18d1      	adds	r1, r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052b8:	f7ff ff5c 	bl	8005174 <prvInsertTimerInActiveList>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d069      	beq.n	8005396 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d05e      	beq.n	8005396 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	441a      	add	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	2100      	movs	r1, #0
 80052e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ea:	f7ff fe05 	bl	8004ef8 <xTimerGenericCommand>
 80052ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d14f      	bne.n	8005396 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	61bb      	str	r3, [r7, #24]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	b2da      	uxtb	r2, r3
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800531e:	e03a      	b.n	8005396 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	617b      	str	r3, [r7, #20]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	18d1      	adds	r1, r2, r3
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005364:	f7ff ff06 	bl	8005174 <prvInsertTimerInActiveList>
					break;
 8005368:	e015      	b.n	8005396 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537a:	f000 fc01 	bl	8005b80 <vPortFree>
 800537e:	e00a      	b.n	8005396 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	b2da      	uxtb	r2, r3
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005392:	e000      	b.n	8005396 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005394:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <prvProcessReceivedCommands+0x1c0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	1d39      	adds	r1, r7, #4
 800539c:	2200      	movs	r2, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe fb60 	bl	8003a64 <xQueueReceive>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f47f af2a 	bne.w	8005200 <prvProcessReceivedCommands+0x8>
	}
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	3730      	adds	r7, #48	; 0x30
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	24000d70 	.word	0x24000d70

080053bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053c2:	e048      	b.n	8005456 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053c4:	4b2d      	ldr	r3, [pc, #180]	; (800547c <prvSwitchTimerLists+0xc0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ce:	4b2b      	ldr	r3, [pc, #172]	; (800547c <prvSwitchTimerLists+0xc0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3304      	adds	r3, #4
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe f879 	bl	80034d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d02e      	beq.n	8005456 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d90e      	bls.n	8005428 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005416:	4b19      	ldr	r3, [pc, #100]	; (800547c <prvSwitchTimerLists+0xc0>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f7fe f81e 	bl	8003462 <vListInsert>
 8005426:	e016      	b.n	8005456 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005428:	2300      	movs	r3, #0
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	2300      	movs	r3, #0
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	2100      	movs	r1, #0
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fd60 	bl	8004ef8 <xTimerGenericCommand>
 8005438:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	603b      	str	r3, [r7, #0]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005456:	4b09      	ldr	r3, [pc, #36]	; (800547c <prvSwitchTimerLists+0xc0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1b1      	bne.n	80053c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <prvSwitchTimerLists+0xc0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <prvSwitchTimerLists+0xc4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a04      	ldr	r2, [pc, #16]	; (800547c <prvSwitchTimerLists+0xc0>)
 800546c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <prvSwitchTimerLists+0xc4>)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	24000d68 	.word	0x24000d68
 8005480:	24000d6c 	.word	0x24000d6c

08005484 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800548a:	f000 f98b 	bl	80057a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <prvCheckForValidListAndQueue+0x60>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d120      	bne.n	80054d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005496:	4814      	ldr	r0, [pc, #80]	; (80054e8 <prvCheckForValidListAndQueue+0x64>)
 8005498:	f7fd ff92 	bl	80033c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800549c:	4813      	ldr	r0, [pc, #76]	; (80054ec <prvCheckForValidListAndQueue+0x68>)
 800549e:	f7fd ff8f 	bl	80033c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <prvCheckForValidListAndQueue+0x6c>)
 80054a4:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <prvCheckForValidListAndQueue+0x64>)
 80054a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054a8:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <prvCheckForValidListAndQueue+0x70>)
 80054aa:	4a10      	ldr	r2, [pc, #64]	; (80054ec <prvCheckForValidListAndQueue+0x68>)
 80054ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054ae:	2300      	movs	r3, #0
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <prvCheckForValidListAndQueue+0x74>)
 80054b4:	4a11      	ldr	r2, [pc, #68]	; (80054fc <prvCheckForValidListAndQueue+0x78>)
 80054b6:	2110      	movs	r1, #16
 80054b8:	200a      	movs	r0, #10
 80054ba:	f7fe f89d 	bl	80035f8 <xQueueGenericCreateStatic>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <prvCheckForValidListAndQueue+0x60>)
 80054c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <prvCheckForValidListAndQueue+0x60>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <prvCheckForValidListAndQueue+0x60>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	490b      	ldr	r1, [pc, #44]	; (8005500 <prvCheckForValidListAndQueue+0x7c>)
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe fcb6 	bl	8003e44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054d8:	f000 f994 	bl	8005804 <vPortExitCritical>
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	24000d70 	.word	0x24000d70
 80054e8:	24000d40 	.word	0x24000d40
 80054ec:	24000d54 	.word	0x24000d54
 80054f0:	24000d68 	.word	0x24000d68
 80054f4:	24000d6c 	.word	0x24000d6c
 80054f8:	24000e1c 	.word	0x24000e1c
 80054fc:	24000d7c 	.word	0x24000d7c
 8005500:	08006e9c 	.word	0x08006e9c

08005504 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	; 0x28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005512:	f06f 0301 	mvn.w	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <xTimerPendFunctionCallFromISR+0x3c>)
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	f107 0114 	add.w	r1, r7, #20
 800552c:	2300      	movs	r3, #0
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	f7fe f9fc 	bl	800392c <xQueueGenericSendFromISR>
 8005534:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005538:	4618      	mov	r0, r3
 800553a:	3728      	adds	r7, #40	; 0x28
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	24000d70 	.word	0x24000d70

08005544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b04      	subs	r3, #4
 8005554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800555c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3b04      	subs	r3, #4
 8005562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f023 0201 	bic.w	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b04      	subs	r3, #4
 8005572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005574:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <pxPortInitialiseStack+0x64>)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b14      	subs	r3, #20
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b04      	subs	r3, #4
 800558a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f06f 0202 	mvn.w	r2, #2
 8005592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3b20      	subs	r3, #32
 8005598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	080055ad 	.word	0x080055ad

080055ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <prvTaskExitError+0x54>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055be:	d00a      	beq.n	80055d6 <prvTaskExitError+0x2a>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	60fb      	str	r3, [r7, #12]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <prvTaskExitError+0x28>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	60bb      	str	r3, [r7, #8]
}
 80055e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055ea:	bf00      	nop
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0fc      	beq.n	80055ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	24000010 	.word	0x24000010
	...

08005610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <pxCurrentTCBConst2>)
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	6808      	ldr	r0, [r1, #0]
 8005616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	f380 8809 	msr	PSP, r0
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	4770      	bx	lr
 800562c:	f3af 8000 	nop.w

08005630 <pxCurrentTCBConst2>:
 8005630:	24000840 	.word	0x24000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005638:	4808      	ldr	r0, [pc, #32]	; (800565c <prvPortStartFirstTask+0x24>)
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	f380 8808 	msr	MSP, r0
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8814 	msr	CONTROL, r0
 800564a:	b662      	cpsie	i
 800564c:	b661      	cpsie	f
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	df00      	svc	0
 8005658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800565a:	bf00      	nop
 800565c:	e000ed08 	.word	0xe000ed08

08005660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <xPortStartScheduler+0x120>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a46      	ldr	r2, [pc, #280]	; (8005784 <xPortStartScheduler+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10a      	bne.n	8005686 <xPortStartScheduler+0x26>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	613b      	str	r3, [r7, #16]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005686:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <xPortStartScheduler+0x120>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a3f      	ldr	r2, [pc, #252]	; (8005788 <xPortStartScheduler+0x128>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10a      	bne.n	80056a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <xPortStartScheduler+0x12c>)
 80056a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	4b31      	ldr	r3, [pc, #196]	; (8005790 <xPortStartScheduler+0x130>)
 80056cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <xPortStartScheduler+0x134>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056d4:	e009      	b.n	80056ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <xPortStartScheduler+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3b01      	subs	r3, #1
 80056dc:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <xPortStartScheduler+0x134>)
 80056de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d0ef      	beq.n	80056d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056f6:	4b27      	ldr	r3, [pc, #156]	; (8005794 <xPortStartScheduler+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1c3 0307 	rsb	r3, r3, #7
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d00a      	beq.n	8005718 <xPortStartScheduler+0xb8>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <xPortStartScheduler+0x134>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <xPortStartScheduler+0x134>)
 8005720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <xPortStartScheduler+0x134>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <xPortStartScheduler+0x134>)
 800572c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <xPortStartScheduler+0x138>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <xPortStartScheduler+0x138>)
 800573c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <xPortStartScheduler+0x138>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <xPortStartScheduler+0x138>)
 8005748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800574c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800574e:	f000 f8dd 	bl	800590c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <xPortStartScheduler+0x13c>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005758:	f000 f8fc 	bl	8005954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <xPortStartScheduler+0x140>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0f      	ldr	r2, [pc, #60]	; (80057a0 <xPortStartScheduler+0x140>)
 8005762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005768:	f7ff ff66 	bl	8005638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800576c:	f7fe ff7a 	bl	8004664 <vTaskSwitchContext>
	prvTaskExitError();
 8005770:	f7ff ff1c 	bl	80055ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	e000ed00 	.word	0xe000ed00
 8005784:	410fc271 	.word	0x410fc271
 8005788:	410fc270 	.word	0x410fc270
 800578c:	e000e400 	.word	0xe000e400
 8005790:	24000e6c 	.word	0x24000e6c
 8005794:	24000e70 	.word	0x24000e70
 8005798:	e000ed20 	.word	0xe000ed20
 800579c:	24000010 	.word	0x24000010
 80057a0:	e000ef34 	.word	0xe000ef34

080057a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <vPortEnterCritical+0x58>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <vPortEnterCritical+0x58>)
 80057c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <vPortEnterCritical+0x58>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10f      	bne.n	80057f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <vPortEnterCritical+0x5c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vPortEnterCritical+0x4a>
	}
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	24000010 	.word	0x24000010
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <vPortExitCritical+0x50>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <vPortExitCritical+0x24>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	607b      	str	r3, [r7, #4]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <vPortExitCritical+0x50>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <vPortExitCritical+0x50>)
 8005830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <vPortExitCritical+0x50>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <vPortExitCritical+0x42>
 800583a:	2300      	movs	r3, #0
 800583c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f383 8811 	msr	BASEPRI, r3
}
 8005844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	24000010 	.word	0x24000010
	...

08005860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005860:	f3ef 8009 	mrs	r0, PSP
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <pxCurrentTCBConst>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	f01e 0f10 	tst.w	lr, #16
 8005870:	bf08      	it	eq
 8005872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	6010      	str	r0, [r2, #0]
 800587c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005884:	f380 8811 	msr	BASEPRI, r0
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f7fe fee8 	bl	8004664 <vTaskSwitchContext>
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f380 8811 	msr	BASEPRI, r0
 800589c:	bc09      	pop	{r0, r3}
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a6:	f01e 0f10 	tst.w	lr, #16
 80058aa:	bf08      	it	eq
 80058ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058b0:	f380 8809 	msr	PSP, r0
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst>:
 80058c0:	24000840 	.word	0x24000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058e2:	f7fe fe05 	bl	80044f0 <xTaskIncrementTick>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <xPortSysTickHandler+0x40>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <vPortSetupTimerInterrupt+0x38>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <vPortSetupTimerInterrupt+0x3c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <vPortSetupTimerInterrupt+0x40>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <vPortSetupTimerInterrupt+0x44>)
 800592a:	3b01      	subs	r3, #1
 800592c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800592e:	4b04      	ldr	r3, [pc, #16]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005930:	2207      	movs	r2, #7
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	e000e010 	.word	0xe000e010
 8005944:	e000e018 	.word	0xe000e018
 8005948:	24000000 	.word	0x24000000
 800594c:	10624dd3 	.word	0x10624dd3
 8005950:	e000e014 	.word	0xe000e014

08005954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005964 <vPortEnableVFP+0x10>
 8005958:	6801      	ldr	r1, [r0, #0]
 800595a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800595e:	6001      	str	r1, [r0, #0]
 8005960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005962:	bf00      	nop
 8005964:	e000ed88 	.word	0xe000ed88

08005968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800596e:	f3ef 8305 	mrs	r3, IPSR
 8005972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d914      	bls.n	80059a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <vPortValidateInterruptPriority+0x70>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <vPortValidateInterruptPriority+0x74>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	7afa      	ldrb	r2, [r7, #11]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20a      	bcs.n	80059a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059a4:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <vPortValidateInterruptPriority+0x78>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <vPortValidateInterruptPriority+0x7c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d90a      	bls.n	80059ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	603b      	str	r3, [r7, #0]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <vPortValidateInterruptPriority+0x60>
	}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000e3f0 	.word	0xe000e3f0
 80059dc:	24000e6c 	.word	0x24000e6c
 80059e0:	e000ed0c 	.word	0xe000ed0c
 80059e4:	24000e70 	.word	0x24000e70

080059e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059f4:	f7fe fcc0 	bl	8004378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059f8:	4b5b      	ldr	r3, [pc, #364]	; (8005b68 <pvPortMalloc+0x180>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a00:	f000 f920 	bl	8005c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a04:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <pvPortMalloc+0x184>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 8093 	bne.w	8005b38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01d      	beq.n	8005a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a18:	2208      	movs	r2, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d014      	beq.n	8005a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	3308      	adds	r3, #8
 8005a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <pvPortMalloc+0x6c>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	617b      	str	r3, [r7, #20]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d06e      	beq.n	8005b38 <pvPortMalloc+0x150>
 8005a5a:	4b45      	ldr	r3, [pc, #276]	; (8005b70 <pvPortMalloc+0x188>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d869      	bhi.n	8005b38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a64:	4b43      	ldr	r3, [pc, #268]	; (8005b74 <pvPortMalloc+0x18c>)
 8005a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a68:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <pvPortMalloc+0x18c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a6e:	e004      	b.n	8005a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d903      	bls.n	8005a8c <pvPortMalloc+0xa4>
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f1      	bne.n	8005a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a8c:	4b36      	ldr	r3, [pc, #216]	; (8005b68 <pvPortMalloc+0x180>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d050      	beq.n	8005b38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	4413      	add	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d91f      	bls.n	8005af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	613b      	str	r3, [r7, #16]
}
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005af2:	69b8      	ldr	r0, [r7, #24]
 8005af4:	f000 f908 	bl	8005d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <pvPortMalloc+0x188>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <pvPortMalloc+0x188>)
 8005b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b06:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <pvPortMalloc+0x188>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <pvPortMalloc+0x190>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d203      	bcs.n	8005b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b12:	4b17      	ldr	r3, [pc, #92]	; (8005b70 <pvPortMalloc+0x188>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <pvPortMalloc+0x190>)
 8005b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <pvPortMalloc+0x184>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b2e:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <pvPortMalloc+0x194>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <pvPortMalloc+0x194>)
 8005b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b38:	f7fe fc2c 	bl	8004394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <pvPortMalloc+0x174>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60fb      	str	r3, [r7, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <pvPortMalloc+0x172>
	return pvReturn;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3728      	adds	r7, #40	; 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	24004a7c 	.word	0x24004a7c
 8005b6c:	24004a90 	.word	0x24004a90
 8005b70:	24004a80 	.word	0x24004a80
 8005b74:	24004a74 	.word	0x24004a74
 8005b78:	24004a84 	.word	0x24004a84
 8005b7c:	24004a88 	.word	0x24004a88

08005b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d04d      	beq.n	8005c2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b92:	2308      	movs	r3, #8
 8005b94:	425b      	negs	r3, r3
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4413      	add	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <vPortFree+0xb8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <vPortFree+0x44>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60fb      	str	r3, [r7, #12]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <vPortFree+0x62>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60bb      	str	r3, [r7, #8]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <vPortFree+0xb8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01e      	beq.n	8005c2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11a      	bne.n	8005c2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <vPortFree+0xb8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	401a      	ands	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c08:	f7fe fbb6 	bl	8004378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <vPortFree+0xbc>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <vPortFree+0xbc>)
 8005c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c1a:	6938      	ldr	r0, [r7, #16]
 8005c1c:	f000 f874 	bl	8005d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <vPortFree+0xc0>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	4a06      	ldr	r2, [pc, #24]	; (8005c40 <vPortFree+0xc0>)
 8005c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c2a:	f7fe fbb3 	bl	8004394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c2e:	bf00      	nop
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	24004a90 	.word	0x24004a90
 8005c3c:	24004a80 	.word	0x24004a80
 8005c40:	24004a8c 	.word	0x24004a8c

08005c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c50:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <prvHeapInit+0xac>)
 8005c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3307      	adds	r3, #7
 8005c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0307 	bic.w	r3, r3, #7
 8005c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <prvHeapInit+0xac>)
 8005c74:	4413      	add	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <prvHeapInit+0xb0>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <prvHeapInit+0xb0>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c90:	2208      	movs	r2, #8
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <prvHeapInit+0xb4>)
 8005ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ca6:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <prvHeapInit+0xb4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2200      	movs	r2, #0
 8005cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cae:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <prvHeapInit+0xb4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <prvHeapInit+0xb4>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <prvHeapInit+0xb8>)
 8005cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <prvHeapInit+0xbc>)
 8005cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cdc:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <prvHeapInit+0xc0>)
 8005cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	24000e74 	.word	0x24000e74
 8005cf4:	24004a74 	.word	0x24004a74
 8005cf8:	24004a7c 	.word	0x24004a7c
 8005cfc:	24004a84 	.word	0x24004a84
 8005d00:	24004a80 	.word	0x24004a80
 8005d04:	24004a90 	.word	0x24004a90

08005d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d10:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <prvInsertBlockIntoFreeList+0xac>)
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e002      	b.n	8005d1c <prvInsertBlockIntoFreeList+0x14>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d8f7      	bhi.n	8005d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d108      	bne.n	8005d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	441a      	add	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	441a      	add	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d118      	bne.n	8005d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d00d      	beq.n	8005d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e008      	b.n	8005d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e003      	b.n	8005d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d002      	beq.n	8005da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	24004a74 	.word	0x24004a74
 8005db8:	24004a7c 	.word	0x24004a7c

08005dbc <__errno>:
 8005dbc:	4b01      	ldr	r3, [pc, #4]	; (8005dc4 <__errno+0x8>)
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	24000014 	.word	0x24000014

08005dc8 <__libc_init_array>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	4d0d      	ldr	r5, [pc, #52]	; (8005e00 <__libc_init_array+0x38>)
 8005dcc:	4c0d      	ldr	r4, [pc, #52]	; (8005e04 <__libc_init_array+0x3c>)
 8005dce:	1b64      	subs	r4, r4, r5
 8005dd0:	10a4      	asrs	r4, r4, #2
 8005dd2:	2600      	movs	r6, #0
 8005dd4:	42a6      	cmp	r6, r4
 8005dd6:	d109      	bne.n	8005dec <__libc_init_array+0x24>
 8005dd8:	4d0b      	ldr	r5, [pc, #44]	; (8005e08 <__libc_init_array+0x40>)
 8005dda:	4c0c      	ldr	r4, [pc, #48]	; (8005e0c <__libc_init_array+0x44>)
 8005ddc:	f001 f832 	bl	8006e44 <_init>
 8005de0:	1b64      	subs	r4, r4, r5
 8005de2:	10a4      	asrs	r4, r4, #2
 8005de4:	2600      	movs	r6, #0
 8005de6:	42a6      	cmp	r6, r4
 8005de8:	d105      	bne.n	8005df6 <__libc_init_array+0x2e>
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df0:	4798      	blx	r3
 8005df2:	3601      	adds	r6, #1
 8005df4:	e7ee      	b.n	8005dd4 <__libc_init_array+0xc>
 8005df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfa:	4798      	blx	r3
 8005dfc:	3601      	adds	r6, #1
 8005dfe:	e7f2      	b.n	8005de6 <__libc_init_array+0x1e>
 8005e00:	08006f94 	.word	0x08006f94
 8005e04:	08006f94 	.word	0x08006f94
 8005e08:	08006f94 	.word	0x08006f94
 8005e0c:	08006f98 	.word	0x08006f98

08005e10 <memcpy>:
 8005e10:	440a      	add	r2, r1
 8005e12:	4291      	cmp	r1, r2
 8005e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e18:	d100      	bne.n	8005e1c <memcpy+0xc>
 8005e1a:	4770      	bx	lr
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e26:	4291      	cmp	r1, r2
 8005e28:	d1f9      	bne.n	8005e1e <memcpy+0xe>
 8005e2a:	bd10      	pop	{r4, pc}

08005e2c <memset>:
 8005e2c:	4402      	add	r2, r0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d100      	bne.n	8005e36 <memset+0xa>
 8005e34:	4770      	bx	lr
 8005e36:	f803 1b01 	strb.w	r1, [r3], #1
 8005e3a:	e7f9      	b.n	8005e30 <memset+0x4>

08005e3c <iprintf>:
 8005e3c:	b40f      	push	{r0, r1, r2, r3}
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <iprintf+0x2c>)
 8005e40:	b513      	push	{r0, r1, r4, lr}
 8005e42:	681c      	ldr	r4, [r3, #0]
 8005e44:	b124      	cbz	r4, 8005e50 <iprintf+0x14>
 8005e46:	69a3      	ldr	r3, [r4, #24]
 8005e48:	b913      	cbnz	r3, 8005e50 <iprintf+0x14>
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f000 fa5e 	bl	800630c <__sinit>
 8005e50:	ab05      	add	r3, sp, #20
 8005e52:	9a04      	ldr	r2, [sp, #16]
 8005e54:	68a1      	ldr	r1, [r4, #8]
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 fc67 	bl	800672c <_vfiprintf_r>
 8005e5e:	b002      	add	sp, #8
 8005e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e64:	b004      	add	sp, #16
 8005e66:	4770      	bx	lr
 8005e68:	24000014 	.word	0x24000014

08005e6c <_puts_r>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	460e      	mov	r6, r1
 8005e70:	4605      	mov	r5, r0
 8005e72:	b118      	cbz	r0, 8005e7c <_puts_r+0x10>
 8005e74:	6983      	ldr	r3, [r0, #24]
 8005e76:	b90b      	cbnz	r3, 8005e7c <_puts_r+0x10>
 8005e78:	f000 fa48 	bl	800630c <__sinit>
 8005e7c:	69ab      	ldr	r3, [r5, #24]
 8005e7e:	68ac      	ldr	r4, [r5, #8]
 8005e80:	b913      	cbnz	r3, 8005e88 <_puts_r+0x1c>
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fa42 	bl	800630c <__sinit>
 8005e88:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <_puts_r+0xd0>)
 8005e8a:	429c      	cmp	r4, r3
 8005e8c:	d120      	bne.n	8005ed0 <_puts_r+0x64>
 8005e8e:	686c      	ldr	r4, [r5, #4]
 8005e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e92:	07db      	lsls	r3, r3, #31
 8005e94:	d405      	bmi.n	8005ea2 <_puts_r+0x36>
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	0598      	lsls	r0, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_puts_r+0x36>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9e:	f000 fad3 	bl	8006448 <__retarget_lock_acquire_recursive>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	0719      	lsls	r1, r3, #28
 8005ea6:	d51d      	bpl.n	8005ee4 <_puts_r+0x78>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	b1db      	cbz	r3, 8005ee4 <_puts_r+0x78>
 8005eac:	3e01      	subs	r6, #1
 8005eae:	68a3      	ldr	r3, [r4, #8]
 8005eb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	60a3      	str	r3, [r4, #8]
 8005eb8:	bb39      	cbnz	r1, 8005f0a <_puts_r+0x9e>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da38      	bge.n	8005f30 <_puts_r+0xc4>
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	210a      	movs	r1, #10
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f000 f848 	bl	8005f58 <__swbuf_r>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d011      	beq.n	8005ef0 <_puts_r+0x84>
 8005ecc:	250a      	movs	r5, #10
 8005ece:	e011      	b.n	8005ef4 <_puts_r+0x88>
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <_puts_r+0xd4>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d101      	bne.n	8005eda <_puts_r+0x6e>
 8005ed6:	68ac      	ldr	r4, [r5, #8]
 8005ed8:	e7da      	b.n	8005e90 <_puts_r+0x24>
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <_puts_r+0xd8>)
 8005edc:	429c      	cmp	r4, r3
 8005ede:	bf08      	it	eq
 8005ee0:	68ec      	ldreq	r4, [r5, #12]
 8005ee2:	e7d5      	b.n	8005e90 <_puts_r+0x24>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 f888 	bl	8005ffc <__swsetup_r>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d0dd      	beq.n	8005eac <_puts_r+0x40>
 8005ef0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef6:	07da      	lsls	r2, r3, #31
 8005ef8:	d405      	bmi.n	8005f06 <_puts_r+0x9a>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	059b      	lsls	r3, r3, #22
 8005efe:	d402      	bmi.n	8005f06 <_puts_r+0x9a>
 8005f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f02:	f000 faa2 	bl	800644a <__retarget_lock_release_recursive>
 8005f06:	4628      	mov	r0, r5
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da04      	bge.n	8005f18 <_puts_r+0xac>
 8005f0e:	69a2      	ldr	r2, [r4, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	dc06      	bgt.n	8005f22 <_puts_r+0xb6>
 8005f14:	290a      	cmp	r1, #10
 8005f16:	d004      	beq.n	8005f22 <_puts_r+0xb6>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	6022      	str	r2, [r4, #0]
 8005f1e:	7019      	strb	r1, [r3, #0]
 8005f20:	e7c5      	b.n	8005eae <_puts_r+0x42>
 8005f22:	4622      	mov	r2, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	f000 f817 	bl	8005f58 <__swbuf_r>
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d1bf      	bne.n	8005eae <_puts_r+0x42>
 8005f2e:	e7df      	b.n	8005ef0 <_puts_r+0x84>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	250a      	movs	r5, #10
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	6022      	str	r2, [r4, #0]
 8005f38:	701d      	strb	r5, [r3, #0]
 8005f3a:	e7db      	b.n	8005ef4 <_puts_r+0x88>
 8005f3c:	08006f20 	.word	0x08006f20
 8005f40:	08006f40 	.word	0x08006f40
 8005f44:	08006f00 	.word	0x08006f00

08005f48 <puts>:
 8005f48:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <puts+0xc>)
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	f7ff bf8d 	b.w	8005e6c <_puts_r>
 8005f52:	bf00      	nop
 8005f54:	24000014 	.word	0x24000014

08005f58 <__swbuf_r>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	460e      	mov	r6, r1
 8005f5c:	4614      	mov	r4, r2
 8005f5e:	4605      	mov	r5, r0
 8005f60:	b118      	cbz	r0, 8005f6a <__swbuf_r+0x12>
 8005f62:	6983      	ldr	r3, [r0, #24]
 8005f64:	b90b      	cbnz	r3, 8005f6a <__swbuf_r+0x12>
 8005f66:	f000 f9d1 	bl	800630c <__sinit>
 8005f6a:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <__swbuf_r+0x98>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d12b      	bne.n	8005fc8 <__swbuf_r+0x70>
 8005f70:	686c      	ldr	r4, [r5, #4]
 8005f72:	69a3      	ldr	r3, [r4, #24]
 8005f74:	60a3      	str	r3, [r4, #8]
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	071a      	lsls	r2, r3, #28
 8005f7a:	d52f      	bpl.n	8005fdc <__swbuf_r+0x84>
 8005f7c:	6923      	ldr	r3, [r4, #16]
 8005f7e:	b36b      	cbz	r3, 8005fdc <__swbuf_r+0x84>
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	1ac0      	subs	r0, r0, r3
 8005f86:	6963      	ldr	r3, [r4, #20]
 8005f88:	b2f6      	uxtb	r6, r6
 8005f8a:	4283      	cmp	r3, r0
 8005f8c:	4637      	mov	r7, r6
 8005f8e:	dc04      	bgt.n	8005f9a <__swbuf_r+0x42>
 8005f90:	4621      	mov	r1, r4
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 f926 	bl	80061e4 <_fflush_r>
 8005f98:	bb30      	cbnz	r0, 8005fe8 <__swbuf_r+0x90>
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	60a3      	str	r3, [r4, #8]
 8005fa0:	6823      	ldr	r3, [r4, #0]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	6022      	str	r2, [r4, #0]
 8005fa6:	701e      	strb	r6, [r3, #0]
 8005fa8:	6963      	ldr	r3, [r4, #20]
 8005faa:	3001      	adds	r0, #1
 8005fac:	4283      	cmp	r3, r0
 8005fae:	d004      	beq.n	8005fba <__swbuf_r+0x62>
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	07db      	lsls	r3, r3, #31
 8005fb4:	d506      	bpl.n	8005fc4 <__swbuf_r+0x6c>
 8005fb6:	2e0a      	cmp	r6, #10
 8005fb8:	d104      	bne.n	8005fc4 <__swbuf_r+0x6c>
 8005fba:	4621      	mov	r1, r4
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 f911 	bl	80061e4 <_fflush_r>
 8005fc2:	b988      	cbnz	r0, 8005fe8 <__swbuf_r+0x90>
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <__swbuf_r+0x9c>)
 8005fca:	429c      	cmp	r4, r3
 8005fcc:	d101      	bne.n	8005fd2 <__swbuf_r+0x7a>
 8005fce:	68ac      	ldr	r4, [r5, #8]
 8005fd0:	e7cf      	b.n	8005f72 <__swbuf_r+0x1a>
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <__swbuf_r+0xa0>)
 8005fd4:	429c      	cmp	r4, r3
 8005fd6:	bf08      	it	eq
 8005fd8:	68ec      	ldreq	r4, [r5, #12]
 8005fda:	e7ca      	b.n	8005f72 <__swbuf_r+0x1a>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f000 f80c 	bl	8005ffc <__swsetup_r>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d0cb      	beq.n	8005f80 <__swbuf_r+0x28>
 8005fe8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005fec:	e7ea      	b.n	8005fc4 <__swbuf_r+0x6c>
 8005fee:	bf00      	nop
 8005ff0:	08006f20 	.word	0x08006f20
 8005ff4:	08006f40 	.word	0x08006f40
 8005ff8:	08006f00 	.word	0x08006f00

08005ffc <__swsetup_r>:
 8005ffc:	4b32      	ldr	r3, [pc, #200]	; (80060c8 <__swsetup_r+0xcc>)
 8005ffe:	b570      	push	{r4, r5, r6, lr}
 8006000:	681d      	ldr	r5, [r3, #0]
 8006002:	4606      	mov	r6, r0
 8006004:	460c      	mov	r4, r1
 8006006:	b125      	cbz	r5, 8006012 <__swsetup_r+0x16>
 8006008:	69ab      	ldr	r3, [r5, #24]
 800600a:	b913      	cbnz	r3, 8006012 <__swsetup_r+0x16>
 800600c:	4628      	mov	r0, r5
 800600e:	f000 f97d 	bl	800630c <__sinit>
 8006012:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <__swsetup_r+0xd0>)
 8006014:	429c      	cmp	r4, r3
 8006016:	d10f      	bne.n	8006038 <__swsetup_r+0x3c>
 8006018:	686c      	ldr	r4, [r5, #4]
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006020:	0719      	lsls	r1, r3, #28
 8006022:	d42c      	bmi.n	800607e <__swsetup_r+0x82>
 8006024:	06dd      	lsls	r5, r3, #27
 8006026:	d411      	bmi.n	800604c <__swsetup_r+0x50>
 8006028:	2309      	movs	r3, #9
 800602a:	6033      	str	r3, [r6, #0]
 800602c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006036:	e03e      	b.n	80060b6 <__swsetup_r+0xba>
 8006038:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <__swsetup_r+0xd4>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d101      	bne.n	8006042 <__swsetup_r+0x46>
 800603e:	68ac      	ldr	r4, [r5, #8]
 8006040:	e7eb      	b.n	800601a <__swsetup_r+0x1e>
 8006042:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <__swsetup_r+0xd8>)
 8006044:	429c      	cmp	r4, r3
 8006046:	bf08      	it	eq
 8006048:	68ec      	ldreq	r4, [r5, #12]
 800604a:	e7e6      	b.n	800601a <__swsetup_r+0x1e>
 800604c:	0758      	lsls	r0, r3, #29
 800604e:	d512      	bpl.n	8006076 <__swsetup_r+0x7a>
 8006050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006052:	b141      	cbz	r1, 8006066 <__swsetup_r+0x6a>
 8006054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006058:	4299      	cmp	r1, r3
 800605a:	d002      	beq.n	8006062 <__swsetup_r+0x66>
 800605c:	4630      	mov	r0, r6
 800605e:	f000 fa5b 	bl	8006518 <_free_r>
 8006062:	2300      	movs	r3, #0
 8006064:	6363      	str	r3, [r4, #52]	; 0x34
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	2300      	movs	r3, #0
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	f043 0308 	orr.w	r3, r3, #8
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	6923      	ldr	r3, [r4, #16]
 8006080:	b94b      	cbnz	r3, 8006096 <__swsetup_r+0x9a>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800608c:	d003      	beq.n	8006096 <__swsetup_r+0x9a>
 800608e:	4621      	mov	r1, r4
 8006090:	4630      	mov	r0, r6
 8006092:	f000 fa01 	bl	8006498 <__smakebuf_r>
 8006096:	89a0      	ldrh	r0, [r4, #12]
 8006098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800609c:	f010 0301 	ands.w	r3, r0, #1
 80060a0:	d00a      	beq.n	80060b8 <__swsetup_r+0xbc>
 80060a2:	2300      	movs	r3, #0
 80060a4:	60a3      	str	r3, [r4, #8]
 80060a6:	6963      	ldr	r3, [r4, #20]
 80060a8:	425b      	negs	r3, r3
 80060aa:	61a3      	str	r3, [r4, #24]
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	b943      	cbnz	r3, 80060c2 <__swsetup_r+0xc6>
 80060b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060b4:	d1ba      	bne.n	800602c <__swsetup_r+0x30>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	0781      	lsls	r1, r0, #30
 80060ba:	bf58      	it	pl
 80060bc:	6963      	ldrpl	r3, [r4, #20]
 80060be:	60a3      	str	r3, [r4, #8]
 80060c0:	e7f4      	b.n	80060ac <__swsetup_r+0xb0>
 80060c2:	2000      	movs	r0, #0
 80060c4:	e7f7      	b.n	80060b6 <__swsetup_r+0xba>
 80060c6:	bf00      	nop
 80060c8:	24000014 	.word	0x24000014
 80060cc:	08006f20 	.word	0x08006f20
 80060d0:	08006f40 	.word	0x08006f40
 80060d4:	08006f00 	.word	0x08006f00

080060d8 <__sflush_r>:
 80060d8:	898a      	ldrh	r2, [r1, #12]
 80060da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060de:	4605      	mov	r5, r0
 80060e0:	0710      	lsls	r0, r2, #28
 80060e2:	460c      	mov	r4, r1
 80060e4:	d458      	bmi.n	8006198 <__sflush_r+0xc0>
 80060e6:	684b      	ldr	r3, [r1, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	dc05      	bgt.n	80060f8 <__sflush_r+0x20>
 80060ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dc02      	bgt.n	80060f8 <__sflush_r+0x20>
 80060f2:	2000      	movs	r0, #0
 80060f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060fa:	2e00      	cmp	r6, #0
 80060fc:	d0f9      	beq.n	80060f2 <__sflush_r+0x1a>
 80060fe:	2300      	movs	r3, #0
 8006100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006104:	682f      	ldr	r7, [r5, #0]
 8006106:	602b      	str	r3, [r5, #0]
 8006108:	d032      	beq.n	8006170 <__sflush_r+0x98>
 800610a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	075a      	lsls	r2, r3, #29
 8006110:	d505      	bpl.n	800611e <__sflush_r+0x46>
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	1ac0      	subs	r0, r0, r3
 8006116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006118:	b10b      	cbz	r3, 800611e <__sflush_r+0x46>
 800611a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800611c:	1ac0      	subs	r0, r0, r3
 800611e:	2300      	movs	r3, #0
 8006120:	4602      	mov	r2, r0
 8006122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006124:	6a21      	ldr	r1, [r4, #32]
 8006126:	4628      	mov	r0, r5
 8006128:	47b0      	blx	r6
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	d106      	bne.n	800613e <__sflush_r+0x66>
 8006130:	6829      	ldr	r1, [r5, #0]
 8006132:	291d      	cmp	r1, #29
 8006134:	d82c      	bhi.n	8006190 <__sflush_r+0xb8>
 8006136:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <__sflush_r+0x108>)
 8006138:	40ca      	lsrs	r2, r1
 800613a:	07d6      	lsls	r6, r2, #31
 800613c:	d528      	bpl.n	8006190 <__sflush_r+0xb8>
 800613e:	2200      	movs	r2, #0
 8006140:	6062      	str	r2, [r4, #4]
 8006142:	04d9      	lsls	r1, r3, #19
 8006144:	6922      	ldr	r2, [r4, #16]
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	d504      	bpl.n	8006154 <__sflush_r+0x7c>
 800614a:	1c42      	adds	r2, r0, #1
 800614c:	d101      	bne.n	8006152 <__sflush_r+0x7a>
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	b903      	cbnz	r3, 8006154 <__sflush_r+0x7c>
 8006152:	6560      	str	r0, [r4, #84]	; 0x54
 8006154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006156:	602f      	str	r7, [r5, #0]
 8006158:	2900      	cmp	r1, #0
 800615a:	d0ca      	beq.n	80060f2 <__sflush_r+0x1a>
 800615c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006160:	4299      	cmp	r1, r3
 8006162:	d002      	beq.n	800616a <__sflush_r+0x92>
 8006164:	4628      	mov	r0, r5
 8006166:	f000 f9d7 	bl	8006518 <_free_r>
 800616a:	2000      	movs	r0, #0
 800616c:	6360      	str	r0, [r4, #52]	; 0x34
 800616e:	e7c1      	b.n	80060f4 <__sflush_r+0x1c>
 8006170:	6a21      	ldr	r1, [r4, #32]
 8006172:	2301      	movs	r3, #1
 8006174:	4628      	mov	r0, r5
 8006176:	47b0      	blx	r6
 8006178:	1c41      	adds	r1, r0, #1
 800617a:	d1c7      	bne.n	800610c <__sflush_r+0x34>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0c4      	beq.n	800610c <__sflush_r+0x34>
 8006182:	2b1d      	cmp	r3, #29
 8006184:	d001      	beq.n	800618a <__sflush_r+0xb2>
 8006186:	2b16      	cmp	r3, #22
 8006188:	d101      	bne.n	800618e <__sflush_r+0xb6>
 800618a:	602f      	str	r7, [r5, #0]
 800618c:	e7b1      	b.n	80060f2 <__sflush_r+0x1a>
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006194:	81a3      	strh	r3, [r4, #12]
 8006196:	e7ad      	b.n	80060f4 <__sflush_r+0x1c>
 8006198:	690f      	ldr	r7, [r1, #16]
 800619a:	2f00      	cmp	r7, #0
 800619c:	d0a9      	beq.n	80060f2 <__sflush_r+0x1a>
 800619e:	0793      	lsls	r3, r2, #30
 80061a0:	680e      	ldr	r6, [r1, #0]
 80061a2:	bf08      	it	eq
 80061a4:	694b      	ldreq	r3, [r1, #20]
 80061a6:	600f      	str	r7, [r1, #0]
 80061a8:	bf18      	it	ne
 80061aa:	2300      	movne	r3, #0
 80061ac:	eba6 0807 	sub.w	r8, r6, r7
 80061b0:	608b      	str	r3, [r1, #8]
 80061b2:	f1b8 0f00 	cmp.w	r8, #0
 80061b6:	dd9c      	ble.n	80060f2 <__sflush_r+0x1a>
 80061b8:	6a21      	ldr	r1, [r4, #32]
 80061ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061bc:	4643      	mov	r3, r8
 80061be:	463a      	mov	r2, r7
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b0      	blx	r6
 80061c4:	2800      	cmp	r0, #0
 80061c6:	dc06      	bgt.n	80061d6 <__sflush_r+0xfe>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061d4:	e78e      	b.n	80060f4 <__sflush_r+0x1c>
 80061d6:	4407      	add	r7, r0
 80061d8:	eba8 0800 	sub.w	r8, r8, r0
 80061dc:	e7e9      	b.n	80061b2 <__sflush_r+0xda>
 80061de:	bf00      	nop
 80061e0:	20400001 	.word	0x20400001

080061e4 <_fflush_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	690b      	ldr	r3, [r1, #16]
 80061e8:	4605      	mov	r5, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	b913      	cbnz	r3, 80061f4 <_fflush_r+0x10>
 80061ee:	2500      	movs	r5, #0
 80061f0:	4628      	mov	r0, r5
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	b118      	cbz	r0, 80061fe <_fflush_r+0x1a>
 80061f6:	6983      	ldr	r3, [r0, #24]
 80061f8:	b90b      	cbnz	r3, 80061fe <_fflush_r+0x1a>
 80061fa:	f000 f887 	bl	800630c <__sinit>
 80061fe:	4b14      	ldr	r3, [pc, #80]	; (8006250 <_fflush_r+0x6c>)
 8006200:	429c      	cmp	r4, r3
 8006202:	d11b      	bne.n	800623c <_fflush_r+0x58>
 8006204:	686c      	ldr	r4, [r5, #4]
 8006206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0ef      	beq.n	80061ee <_fflush_r+0xa>
 800620e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006210:	07d0      	lsls	r0, r2, #31
 8006212:	d404      	bmi.n	800621e <_fflush_r+0x3a>
 8006214:	0599      	lsls	r1, r3, #22
 8006216:	d402      	bmi.n	800621e <_fflush_r+0x3a>
 8006218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800621a:	f000 f915 	bl	8006448 <__retarget_lock_acquire_recursive>
 800621e:	4628      	mov	r0, r5
 8006220:	4621      	mov	r1, r4
 8006222:	f7ff ff59 	bl	80060d8 <__sflush_r>
 8006226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006228:	07da      	lsls	r2, r3, #31
 800622a:	4605      	mov	r5, r0
 800622c:	d4e0      	bmi.n	80061f0 <_fflush_r+0xc>
 800622e:	89a3      	ldrh	r3, [r4, #12]
 8006230:	059b      	lsls	r3, r3, #22
 8006232:	d4dd      	bmi.n	80061f0 <_fflush_r+0xc>
 8006234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006236:	f000 f908 	bl	800644a <__retarget_lock_release_recursive>
 800623a:	e7d9      	b.n	80061f0 <_fflush_r+0xc>
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <_fflush_r+0x70>)
 800623e:	429c      	cmp	r4, r3
 8006240:	d101      	bne.n	8006246 <_fflush_r+0x62>
 8006242:	68ac      	ldr	r4, [r5, #8]
 8006244:	e7df      	b.n	8006206 <_fflush_r+0x22>
 8006246:	4b04      	ldr	r3, [pc, #16]	; (8006258 <_fflush_r+0x74>)
 8006248:	429c      	cmp	r4, r3
 800624a:	bf08      	it	eq
 800624c:	68ec      	ldreq	r4, [r5, #12]
 800624e:	e7da      	b.n	8006206 <_fflush_r+0x22>
 8006250:	08006f20 	.word	0x08006f20
 8006254:	08006f40 	.word	0x08006f40
 8006258:	08006f00 	.word	0x08006f00

0800625c <std>:
 800625c:	2300      	movs	r3, #0
 800625e:	b510      	push	{r4, lr}
 8006260:	4604      	mov	r4, r0
 8006262:	e9c0 3300 	strd	r3, r3, [r0]
 8006266:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800626a:	6083      	str	r3, [r0, #8]
 800626c:	8181      	strh	r1, [r0, #12]
 800626e:	6643      	str	r3, [r0, #100]	; 0x64
 8006270:	81c2      	strh	r2, [r0, #14]
 8006272:	6183      	str	r3, [r0, #24]
 8006274:	4619      	mov	r1, r3
 8006276:	2208      	movs	r2, #8
 8006278:	305c      	adds	r0, #92	; 0x5c
 800627a:	f7ff fdd7 	bl	8005e2c <memset>
 800627e:	4b05      	ldr	r3, [pc, #20]	; (8006294 <std+0x38>)
 8006280:	6263      	str	r3, [r4, #36]	; 0x24
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <std+0x3c>)
 8006284:	62a3      	str	r3, [r4, #40]	; 0x28
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <std+0x40>)
 8006288:	62e3      	str	r3, [r4, #44]	; 0x2c
 800628a:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <std+0x44>)
 800628c:	6224      	str	r4, [r4, #32]
 800628e:	6323      	str	r3, [r4, #48]	; 0x30
 8006290:	bd10      	pop	{r4, pc}
 8006292:	bf00      	nop
 8006294:	08006cd5 	.word	0x08006cd5
 8006298:	08006cf7 	.word	0x08006cf7
 800629c:	08006d2f 	.word	0x08006d2f
 80062a0:	08006d53 	.word	0x08006d53

080062a4 <_cleanup_r>:
 80062a4:	4901      	ldr	r1, [pc, #4]	; (80062ac <_cleanup_r+0x8>)
 80062a6:	f000 b8af 	b.w	8006408 <_fwalk_reent>
 80062aa:	bf00      	nop
 80062ac:	080061e5 	.word	0x080061e5

080062b0 <__sfmoreglue>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	2268      	movs	r2, #104	; 0x68
 80062b4:	1e4d      	subs	r5, r1, #1
 80062b6:	4355      	muls	r5, r2
 80062b8:	460e      	mov	r6, r1
 80062ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80062be:	f000 f997 	bl	80065f0 <_malloc_r>
 80062c2:	4604      	mov	r4, r0
 80062c4:	b140      	cbz	r0, 80062d8 <__sfmoreglue+0x28>
 80062c6:	2100      	movs	r1, #0
 80062c8:	e9c0 1600 	strd	r1, r6, [r0]
 80062cc:	300c      	adds	r0, #12
 80062ce:	60a0      	str	r0, [r4, #8]
 80062d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80062d4:	f7ff fdaa 	bl	8005e2c <memset>
 80062d8:	4620      	mov	r0, r4
 80062da:	bd70      	pop	{r4, r5, r6, pc}

080062dc <__sfp_lock_acquire>:
 80062dc:	4801      	ldr	r0, [pc, #4]	; (80062e4 <__sfp_lock_acquire+0x8>)
 80062de:	f000 b8b3 	b.w	8006448 <__retarget_lock_acquire_recursive>
 80062e2:	bf00      	nop
 80062e4:	24004a95 	.word	0x24004a95

080062e8 <__sfp_lock_release>:
 80062e8:	4801      	ldr	r0, [pc, #4]	; (80062f0 <__sfp_lock_release+0x8>)
 80062ea:	f000 b8ae 	b.w	800644a <__retarget_lock_release_recursive>
 80062ee:	bf00      	nop
 80062f0:	24004a95 	.word	0x24004a95

080062f4 <__sinit_lock_acquire>:
 80062f4:	4801      	ldr	r0, [pc, #4]	; (80062fc <__sinit_lock_acquire+0x8>)
 80062f6:	f000 b8a7 	b.w	8006448 <__retarget_lock_acquire_recursive>
 80062fa:	bf00      	nop
 80062fc:	24004a96 	.word	0x24004a96

08006300 <__sinit_lock_release>:
 8006300:	4801      	ldr	r0, [pc, #4]	; (8006308 <__sinit_lock_release+0x8>)
 8006302:	f000 b8a2 	b.w	800644a <__retarget_lock_release_recursive>
 8006306:	bf00      	nop
 8006308:	24004a96 	.word	0x24004a96

0800630c <__sinit>:
 800630c:	b510      	push	{r4, lr}
 800630e:	4604      	mov	r4, r0
 8006310:	f7ff fff0 	bl	80062f4 <__sinit_lock_acquire>
 8006314:	69a3      	ldr	r3, [r4, #24]
 8006316:	b11b      	cbz	r3, 8006320 <__sinit+0x14>
 8006318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800631c:	f7ff bff0 	b.w	8006300 <__sinit_lock_release>
 8006320:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006324:	6523      	str	r3, [r4, #80]	; 0x50
 8006326:	4b13      	ldr	r3, [pc, #76]	; (8006374 <__sinit+0x68>)
 8006328:	4a13      	ldr	r2, [pc, #76]	; (8006378 <__sinit+0x6c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	62a2      	str	r2, [r4, #40]	; 0x28
 800632e:	42a3      	cmp	r3, r4
 8006330:	bf04      	itt	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	61a3      	streq	r3, [r4, #24]
 8006336:	4620      	mov	r0, r4
 8006338:	f000 f820 	bl	800637c <__sfp>
 800633c:	6060      	str	r0, [r4, #4]
 800633e:	4620      	mov	r0, r4
 8006340:	f000 f81c 	bl	800637c <__sfp>
 8006344:	60a0      	str	r0, [r4, #8]
 8006346:	4620      	mov	r0, r4
 8006348:	f000 f818 	bl	800637c <__sfp>
 800634c:	2200      	movs	r2, #0
 800634e:	60e0      	str	r0, [r4, #12]
 8006350:	2104      	movs	r1, #4
 8006352:	6860      	ldr	r0, [r4, #4]
 8006354:	f7ff ff82 	bl	800625c <std>
 8006358:	68a0      	ldr	r0, [r4, #8]
 800635a:	2201      	movs	r2, #1
 800635c:	2109      	movs	r1, #9
 800635e:	f7ff ff7d 	bl	800625c <std>
 8006362:	68e0      	ldr	r0, [r4, #12]
 8006364:	2202      	movs	r2, #2
 8006366:	2112      	movs	r1, #18
 8006368:	f7ff ff78 	bl	800625c <std>
 800636c:	2301      	movs	r3, #1
 800636e:	61a3      	str	r3, [r4, #24]
 8006370:	e7d2      	b.n	8006318 <__sinit+0xc>
 8006372:	bf00      	nop
 8006374:	08006efc 	.word	0x08006efc
 8006378:	080062a5 	.word	0x080062a5

0800637c <__sfp>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	4607      	mov	r7, r0
 8006380:	f7ff ffac 	bl	80062dc <__sfp_lock_acquire>
 8006384:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <__sfp+0x84>)
 8006386:	681e      	ldr	r6, [r3, #0]
 8006388:	69b3      	ldr	r3, [r6, #24]
 800638a:	b913      	cbnz	r3, 8006392 <__sfp+0x16>
 800638c:	4630      	mov	r0, r6
 800638e:	f7ff ffbd 	bl	800630c <__sinit>
 8006392:	3648      	adds	r6, #72	; 0x48
 8006394:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006398:	3b01      	subs	r3, #1
 800639a:	d503      	bpl.n	80063a4 <__sfp+0x28>
 800639c:	6833      	ldr	r3, [r6, #0]
 800639e:	b30b      	cbz	r3, 80063e4 <__sfp+0x68>
 80063a0:	6836      	ldr	r6, [r6, #0]
 80063a2:	e7f7      	b.n	8006394 <__sfp+0x18>
 80063a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80063a8:	b9d5      	cbnz	r5, 80063e0 <__sfp+0x64>
 80063aa:	4b16      	ldr	r3, [pc, #88]	; (8006404 <__sfp+0x88>)
 80063ac:	60e3      	str	r3, [r4, #12]
 80063ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063b2:	6665      	str	r5, [r4, #100]	; 0x64
 80063b4:	f000 f847 	bl	8006446 <__retarget_lock_init_recursive>
 80063b8:	f7ff ff96 	bl	80062e8 <__sfp_lock_release>
 80063bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80063c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80063c4:	6025      	str	r5, [r4, #0]
 80063c6:	61a5      	str	r5, [r4, #24]
 80063c8:	2208      	movs	r2, #8
 80063ca:	4629      	mov	r1, r5
 80063cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80063d0:	f7ff fd2c 	bl	8005e2c <memset>
 80063d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80063d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80063dc:	4620      	mov	r0, r4
 80063de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e0:	3468      	adds	r4, #104	; 0x68
 80063e2:	e7d9      	b.n	8006398 <__sfp+0x1c>
 80063e4:	2104      	movs	r1, #4
 80063e6:	4638      	mov	r0, r7
 80063e8:	f7ff ff62 	bl	80062b0 <__sfmoreglue>
 80063ec:	4604      	mov	r4, r0
 80063ee:	6030      	str	r0, [r6, #0]
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d1d5      	bne.n	80063a0 <__sfp+0x24>
 80063f4:	f7ff ff78 	bl	80062e8 <__sfp_lock_release>
 80063f8:	230c      	movs	r3, #12
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	e7ee      	b.n	80063dc <__sfp+0x60>
 80063fe:	bf00      	nop
 8006400:	08006efc 	.word	0x08006efc
 8006404:	ffff0001 	.word	0xffff0001

08006408 <_fwalk_reent>:
 8006408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800640c:	4606      	mov	r6, r0
 800640e:	4688      	mov	r8, r1
 8006410:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006414:	2700      	movs	r7, #0
 8006416:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800641a:	f1b9 0901 	subs.w	r9, r9, #1
 800641e:	d505      	bpl.n	800642c <_fwalk_reent+0x24>
 8006420:	6824      	ldr	r4, [r4, #0]
 8006422:	2c00      	cmp	r4, #0
 8006424:	d1f7      	bne.n	8006416 <_fwalk_reent+0xe>
 8006426:	4638      	mov	r0, r7
 8006428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800642c:	89ab      	ldrh	r3, [r5, #12]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d907      	bls.n	8006442 <_fwalk_reent+0x3a>
 8006432:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006436:	3301      	adds	r3, #1
 8006438:	d003      	beq.n	8006442 <_fwalk_reent+0x3a>
 800643a:	4629      	mov	r1, r5
 800643c:	4630      	mov	r0, r6
 800643e:	47c0      	blx	r8
 8006440:	4307      	orrs	r7, r0
 8006442:	3568      	adds	r5, #104	; 0x68
 8006444:	e7e9      	b.n	800641a <_fwalk_reent+0x12>

08006446 <__retarget_lock_init_recursive>:
 8006446:	4770      	bx	lr

08006448 <__retarget_lock_acquire_recursive>:
 8006448:	4770      	bx	lr

0800644a <__retarget_lock_release_recursive>:
 800644a:	4770      	bx	lr

0800644c <__swhatbuf_r>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	460e      	mov	r6, r1
 8006450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006454:	2900      	cmp	r1, #0
 8006456:	b096      	sub	sp, #88	; 0x58
 8006458:	4614      	mov	r4, r2
 800645a:	461d      	mov	r5, r3
 800645c:	da08      	bge.n	8006470 <__swhatbuf_r+0x24>
 800645e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	602a      	str	r2, [r5, #0]
 8006466:	061a      	lsls	r2, r3, #24
 8006468:	d410      	bmi.n	800648c <__swhatbuf_r+0x40>
 800646a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800646e:	e00e      	b.n	800648e <__swhatbuf_r+0x42>
 8006470:	466a      	mov	r2, sp
 8006472:	f000 fc95 	bl	8006da0 <_fstat_r>
 8006476:	2800      	cmp	r0, #0
 8006478:	dbf1      	blt.n	800645e <__swhatbuf_r+0x12>
 800647a:	9a01      	ldr	r2, [sp, #4]
 800647c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006480:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006484:	425a      	negs	r2, r3
 8006486:	415a      	adcs	r2, r3
 8006488:	602a      	str	r2, [r5, #0]
 800648a:	e7ee      	b.n	800646a <__swhatbuf_r+0x1e>
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	2000      	movs	r0, #0
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	b016      	add	sp, #88	; 0x58
 8006494:	bd70      	pop	{r4, r5, r6, pc}
	...

08006498 <__smakebuf_r>:
 8006498:	898b      	ldrh	r3, [r1, #12]
 800649a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800649c:	079d      	lsls	r5, r3, #30
 800649e:	4606      	mov	r6, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	d507      	bpl.n	80064b4 <__smakebuf_r+0x1c>
 80064a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	6123      	str	r3, [r4, #16]
 80064ac:	2301      	movs	r3, #1
 80064ae:	6163      	str	r3, [r4, #20]
 80064b0:	b002      	add	sp, #8
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	ab01      	add	r3, sp, #4
 80064b6:	466a      	mov	r2, sp
 80064b8:	f7ff ffc8 	bl	800644c <__swhatbuf_r>
 80064bc:	9900      	ldr	r1, [sp, #0]
 80064be:	4605      	mov	r5, r0
 80064c0:	4630      	mov	r0, r6
 80064c2:	f000 f895 	bl	80065f0 <_malloc_r>
 80064c6:	b948      	cbnz	r0, 80064dc <__smakebuf_r+0x44>
 80064c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064cc:	059a      	lsls	r2, r3, #22
 80064ce:	d4ef      	bmi.n	80064b0 <__smakebuf_r+0x18>
 80064d0:	f023 0303 	bic.w	r3, r3, #3
 80064d4:	f043 0302 	orr.w	r3, r3, #2
 80064d8:	81a3      	strh	r3, [r4, #12]
 80064da:	e7e3      	b.n	80064a4 <__smakebuf_r+0xc>
 80064dc:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <__smakebuf_r+0x7c>)
 80064de:	62b3      	str	r3, [r6, #40]	; 0x28
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	6020      	str	r0, [r4, #0]
 80064e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	9b00      	ldr	r3, [sp, #0]
 80064ec:	6163      	str	r3, [r4, #20]
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	6120      	str	r0, [r4, #16]
 80064f2:	b15b      	cbz	r3, 800650c <__smakebuf_r+0x74>
 80064f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f8:	4630      	mov	r0, r6
 80064fa:	f000 fc63 	bl	8006dc4 <_isatty_r>
 80064fe:	b128      	cbz	r0, 800650c <__smakebuf_r+0x74>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	89a0      	ldrh	r0, [r4, #12]
 800650e:	4305      	orrs	r5, r0
 8006510:	81a5      	strh	r5, [r4, #12]
 8006512:	e7cd      	b.n	80064b0 <__smakebuf_r+0x18>
 8006514:	080062a5 	.word	0x080062a5

08006518 <_free_r>:
 8006518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800651a:	2900      	cmp	r1, #0
 800651c:	d044      	beq.n	80065a8 <_free_r+0x90>
 800651e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006522:	9001      	str	r0, [sp, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f1a1 0404 	sub.w	r4, r1, #4
 800652a:	bfb8      	it	lt
 800652c:	18e4      	addlt	r4, r4, r3
 800652e:	f000 fc6b 	bl	8006e08 <__malloc_lock>
 8006532:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <_free_r+0x94>)
 8006534:	9801      	ldr	r0, [sp, #4]
 8006536:	6813      	ldr	r3, [r2, #0]
 8006538:	b933      	cbnz	r3, 8006548 <_free_r+0x30>
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	6014      	str	r4, [r2, #0]
 800653e:	b003      	add	sp, #12
 8006540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006544:	f000 bc66 	b.w	8006e14 <__malloc_unlock>
 8006548:	42a3      	cmp	r3, r4
 800654a:	d908      	bls.n	800655e <_free_r+0x46>
 800654c:	6825      	ldr	r5, [r4, #0]
 800654e:	1961      	adds	r1, r4, r5
 8006550:	428b      	cmp	r3, r1
 8006552:	bf01      	itttt	eq
 8006554:	6819      	ldreq	r1, [r3, #0]
 8006556:	685b      	ldreq	r3, [r3, #4]
 8006558:	1949      	addeq	r1, r1, r5
 800655a:	6021      	streq	r1, [r4, #0]
 800655c:	e7ed      	b.n	800653a <_free_r+0x22>
 800655e:	461a      	mov	r2, r3
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b10b      	cbz	r3, 8006568 <_free_r+0x50>
 8006564:	42a3      	cmp	r3, r4
 8006566:	d9fa      	bls.n	800655e <_free_r+0x46>
 8006568:	6811      	ldr	r1, [r2, #0]
 800656a:	1855      	adds	r5, r2, r1
 800656c:	42a5      	cmp	r5, r4
 800656e:	d10b      	bne.n	8006588 <_free_r+0x70>
 8006570:	6824      	ldr	r4, [r4, #0]
 8006572:	4421      	add	r1, r4
 8006574:	1854      	adds	r4, r2, r1
 8006576:	42a3      	cmp	r3, r4
 8006578:	6011      	str	r1, [r2, #0]
 800657a:	d1e0      	bne.n	800653e <_free_r+0x26>
 800657c:	681c      	ldr	r4, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	6053      	str	r3, [r2, #4]
 8006582:	4421      	add	r1, r4
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	e7da      	b.n	800653e <_free_r+0x26>
 8006588:	d902      	bls.n	8006590 <_free_r+0x78>
 800658a:	230c      	movs	r3, #12
 800658c:	6003      	str	r3, [r0, #0]
 800658e:	e7d6      	b.n	800653e <_free_r+0x26>
 8006590:	6825      	ldr	r5, [r4, #0]
 8006592:	1961      	adds	r1, r4, r5
 8006594:	428b      	cmp	r3, r1
 8006596:	bf04      	itt	eq
 8006598:	6819      	ldreq	r1, [r3, #0]
 800659a:	685b      	ldreq	r3, [r3, #4]
 800659c:	6063      	str	r3, [r4, #4]
 800659e:	bf04      	itt	eq
 80065a0:	1949      	addeq	r1, r1, r5
 80065a2:	6021      	streq	r1, [r4, #0]
 80065a4:	6054      	str	r4, [r2, #4]
 80065a6:	e7ca      	b.n	800653e <_free_r+0x26>
 80065a8:	b003      	add	sp, #12
 80065aa:	bd30      	pop	{r4, r5, pc}
 80065ac:	24004a98 	.word	0x24004a98

080065b0 <sbrk_aligned>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4e0e      	ldr	r6, [pc, #56]	; (80065ec <sbrk_aligned+0x3c>)
 80065b4:	460c      	mov	r4, r1
 80065b6:	6831      	ldr	r1, [r6, #0]
 80065b8:	4605      	mov	r5, r0
 80065ba:	b911      	cbnz	r1, 80065c2 <sbrk_aligned+0x12>
 80065bc:	f000 fb7a 	bl	8006cb4 <_sbrk_r>
 80065c0:	6030      	str	r0, [r6, #0]
 80065c2:	4621      	mov	r1, r4
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 fb75 	bl	8006cb4 <_sbrk_r>
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	d00a      	beq.n	80065e4 <sbrk_aligned+0x34>
 80065ce:	1cc4      	adds	r4, r0, #3
 80065d0:	f024 0403 	bic.w	r4, r4, #3
 80065d4:	42a0      	cmp	r0, r4
 80065d6:	d007      	beq.n	80065e8 <sbrk_aligned+0x38>
 80065d8:	1a21      	subs	r1, r4, r0
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 fb6a 	bl	8006cb4 <_sbrk_r>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d101      	bne.n	80065e8 <sbrk_aligned+0x38>
 80065e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065e8:	4620      	mov	r0, r4
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	24004a9c 	.word	0x24004a9c

080065f0 <_malloc_r>:
 80065f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f4:	1ccd      	adds	r5, r1, #3
 80065f6:	f025 0503 	bic.w	r5, r5, #3
 80065fa:	3508      	adds	r5, #8
 80065fc:	2d0c      	cmp	r5, #12
 80065fe:	bf38      	it	cc
 8006600:	250c      	movcc	r5, #12
 8006602:	2d00      	cmp	r5, #0
 8006604:	4607      	mov	r7, r0
 8006606:	db01      	blt.n	800660c <_malloc_r+0x1c>
 8006608:	42a9      	cmp	r1, r5
 800660a:	d905      	bls.n	8006618 <_malloc_r+0x28>
 800660c:	230c      	movs	r3, #12
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	2600      	movs	r6, #0
 8006612:	4630      	mov	r0, r6
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006618:	4e2e      	ldr	r6, [pc, #184]	; (80066d4 <_malloc_r+0xe4>)
 800661a:	f000 fbf5 	bl	8006e08 <__malloc_lock>
 800661e:	6833      	ldr	r3, [r6, #0]
 8006620:	461c      	mov	r4, r3
 8006622:	bb34      	cbnz	r4, 8006672 <_malloc_r+0x82>
 8006624:	4629      	mov	r1, r5
 8006626:	4638      	mov	r0, r7
 8006628:	f7ff ffc2 	bl	80065b0 <sbrk_aligned>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	4604      	mov	r4, r0
 8006630:	d14d      	bne.n	80066ce <_malloc_r+0xde>
 8006632:	6834      	ldr	r4, [r6, #0]
 8006634:	4626      	mov	r6, r4
 8006636:	2e00      	cmp	r6, #0
 8006638:	d140      	bne.n	80066bc <_malloc_r+0xcc>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	4631      	mov	r1, r6
 800663e:	4638      	mov	r0, r7
 8006640:	eb04 0803 	add.w	r8, r4, r3
 8006644:	f000 fb36 	bl	8006cb4 <_sbrk_r>
 8006648:	4580      	cmp	r8, r0
 800664a:	d13a      	bne.n	80066c2 <_malloc_r+0xd2>
 800664c:	6821      	ldr	r1, [r4, #0]
 800664e:	3503      	adds	r5, #3
 8006650:	1a6d      	subs	r5, r5, r1
 8006652:	f025 0503 	bic.w	r5, r5, #3
 8006656:	3508      	adds	r5, #8
 8006658:	2d0c      	cmp	r5, #12
 800665a:	bf38      	it	cc
 800665c:	250c      	movcc	r5, #12
 800665e:	4629      	mov	r1, r5
 8006660:	4638      	mov	r0, r7
 8006662:	f7ff ffa5 	bl	80065b0 <sbrk_aligned>
 8006666:	3001      	adds	r0, #1
 8006668:	d02b      	beq.n	80066c2 <_malloc_r+0xd2>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	442b      	add	r3, r5
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	e00e      	b.n	8006690 <_malloc_r+0xa0>
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	1b52      	subs	r2, r2, r5
 8006676:	d41e      	bmi.n	80066b6 <_malloc_r+0xc6>
 8006678:	2a0b      	cmp	r2, #11
 800667a:	d916      	bls.n	80066aa <_malloc_r+0xba>
 800667c:	1961      	adds	r1, r4, r5
 800667e:	42a3      	cmp	r3, r4
 8006680:	6025      	str	r5, [r4, #0]
 8006682:	bf18      	it	ne
 8006684:	6059      	strne	r1, [r3, #4]
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	bf08      	it	eq
 800668a:	6031      	streq	r1, [r6, #0]
 800668c:	5162      	str	r2, [r4, r5]
 800668e:	604b      	str	r3, [r1, #4]
 8006690:	4638      	mov	r0, r7
 8006692:	f104 060b 	add.w	r6, r4, #11
 8006696:	f000 fbbd 	bl	8006e14 <__malloc_unlock>
 800669a:	f026 0607 	bic.w	r6, r6, #7
 800669e:	1d23      	adds	r3, r4, #4
 80066a0:	1af2      	subs	r2, r6, r3
 80066a2:	d0b6      	beq.n	8006612 <_malloc_r+0x22>
 80066a4:	1b9b      	subs	r3, r3, r6
 80066a6:	50a3      	str	r3, [r4, r2]
 80066a8:	e7b3      	b.n	8006612 <_malloc_r+0x22>
 80066aa:	6862      	ldr	r2, [r4, #4]
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	bf0c      	ite	eq
 80066b0:	6032      	streq	r2, [r6, #0]
 80066b2:	605a      	strne	r2, [r3, #4]
 80066b4:	e7ec      	b.n	8006690 <_malloc_r+0xa0>
 80066b6:	4623      	mov	r3, r4
 80066b8:	6864      	ldr	r4, [r4, #4]
 80066ba:	e7b2      	b.n	8006622 <_malloc_r+0x32>
 80066bc:	4634      	mov	r4, r6
 80066be:	6876      	ldr	r6, [r6, #4]
 80066c0:	e7b9      	b.n	8006636 <_malloc_r+0x46>
 80066c2:	230c      	movs	r3, #12
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	4638      	mov	r0, r7
 80066c8:	f000 fba4 	bl	8006e14 <__malloc_unlock>
 80066cc:	e7a1      	b.n	8006612 <_malloc_r+0x22>
 80066ce:	6025      	str	r5, [r4, #0]
 80066d0:	e7de      	b.n	8006690 <_malloc_r+0xa0>
 80066d2:	bf00      	nop
 80066d4:	24004a98 	.word	0x24004a98

080066d8 <__sfputc_r>:
 80066d8:	6893      	ldr	r3, [r2, #8]
 80066da:	3b01      	subs	r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	b410      	push	{r4}
 80066e0:	6093      	str	r3, [r2, #8]
 80066e2:	da08      	bge.n	80066f6 <__sfputc_r+0x1e>
 80066e4:	6994      	ldr	r4, [r2, #24]
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	db01      	blt.n	80066ee <__sfputc_r+0x16>
 80066ea:	290a      	cmp	r1, #10
 80066ec:	d103      	bne.n	80066f6 <__sfputc_r+0x1e>
 80066ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066f2:	f7ff bc31 	b.w	8005f58 <__swbuf_r>
 80066f6:	6813      	ldr	r3, [r2, #0]
 80066f8:	1c58      	adds	r0, r3, #1
 80066fa:	6010      	str	r0, [r2, #0]
 80066fc:	7019      	strb	r1, [r3, #0]
 80066fe:	4608      	mov	r0, r1
 8006700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006704:	4770      	bx	lr

08006706 <__sfputs_r>:
 8006706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006708:	4606      	mov	r6, r0
 800670a:	460f      	mov	r7, r1
 800670c:	4614      	mov	r4, r2
 800670e:	18d5      	adds	r5, r2, r3
 8006710:	42ac      	cmp	r4, r5
 8006712:	d101      	bne.n	8006718 <__sfputs_r+0x12>
 8006714:	2000      	movs	r0, #0
 8006716:	e007      	b.n	8006728 <__sfputs_r+0x22>
 8006718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671c:	463a      	mov	r2, r7
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff ffda 	bl	80066d8 <__sfputc_r>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d1f3      	bne.n	8006710 <__sfputs_r+0xa>
 8006728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800672c <_vfiprintf_r>:
 800672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006730:	460d      	mov	r5, r1
 8006732:	b09d      	sub	sp, #116	; 0x74
 8006734:	4614      	mov	r4, r2
 8006736:	4698      	mov	r8, r3
 8006738:	4606      	mov	r6, r0
 800673a:	b118      	cbz	r0, 8006744 <_vfiprintf_r+0x18>
 800673c:	6983      	ldr	r3, [r0, #24]
 800673e:	b90b      	cbnz	r3, 8006744 <_vfiprintf_r+0x18>
 8006740:	f7ff fde4 	bl	800630c <__sinit>
 8006744:	4b89      	ldr	r3, [pc, #548]	; (800696c <_vfiprintf_r+0x240>)
 8006746:	429d      	cmp	r5, r3
 8006748:	d11b      	bne.n	8006782 <_vfiprintf_r+0x56>
 800674a:	6875      	ldr	r5, [r6, #4]
 800674c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800674e:	07d9      	lsls	r1, r3, #31
 8006750:	d405      	bmi.n	800675e <_vfiprintf_r+0x32>
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	059a      	lsls	r2, r3, #22
 8006756:	d402      	bmi.n	800675e <_vfiprintf_r+0x32>
 8006758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800675a:	f7ff fe75 	bl	8006448 <__retarget_lock_acquire_recursive>
 800675e:	89ab      	ldrh	r3, [r5, #12]
 8006760:	071b      	lsls	r3, r3, #28
 8006762:	d501      	bpl.n	8006768 <_vfiprintf_r+0x3c>
 8006764:	692b      	ldr	r3, [r5, #16]
 8006766:	b9eb      	cbnz	r3, 80067a4 <_vfiprintf_r+0x78>
 8006768:	4629      	mov	r1, r5
 800676a:	4630      	mov	r0, r6
 800676c:	f7ff fc46 	bl	8005ffc <__swsetup_r>
 8006770:	b1c0      	cbz	r0, 80067a4 <_vfiprintf_r+0x78>
 8006772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006774:	07dc      	lsls	r4, r3, #31
 8006776:	d50e      	bpl.n	8006796 <_vfiprintf_r+0x6a>
 8006778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800677c:	b01d      	add	sp, #116	; 0x74
 800677e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006782:	4b7b      	ldr	r3, [pc, #492]	; (8006970 <_vfiprintf_r+0x244>)
 8006784:	429d      	cmp	r5, r3
 8006786:	d101      	bne.n	800678c <_vfiprintf_r+0x60>
 8006788:	68b5      	ldr	r5, [r6, #8]
 800678a:	e7df      	b.n	800674c <_vfiprintf_r+0x20>
 800678c:	4b79      	ldr	r3, [pc, #484]	; (8006974 <_vfiprintf_r+0x248>)
 800678e:	429d      	cmp	r5, r3
 8006790:	bf08      	it	eq
 8006792:	68f5      	ldreq	r5, [r6, #12]
 8006794:	e7da      	b.n	800674c <_vfiprintf_r+0x20>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	0598      	lsls	r0, r3, #22
 800679a:	d4ed      	bmi.n	8006778 <_vfiprintf_r+0x4c>
 800679c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679e:	f7ff fe54 	bl	800644a <__retarget_lock_release_recursive>
 80067a2:	e7e9      	b.n	8006778 <_vfiprintf_r+0x4c>
 80067a4:	2300      	movs	r3, #0
 80067a6:	9309      	str	r3, [sp, #36]	; 0x24
 80067a8:	2320      	movs	r3, #32
 80067aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80067b2:	2330      	movs	r3, #48	; 0x30
 80067b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006978 <_vfiprintf_r+0x24c>
 80067b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067bc:	f04f 0901 	mov.w	r9, #1
 80067c0:	4623      	mov	r3, r4
 80067c2:	469a      	mov	sl, r3
 80067c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c8:	b10a      	cbz	r2, 80067ce <_vfiprintf_r+0xa2>
 80067ca:	2a25      	cmp	r2, #37	; 0x25
 80067cc:	d1f9      	bne.n	80067c2 <_vfiprintf_r+0x96>
 80067ce:	ebba 0b04 	subs.w	fp, sl, r4
 80067d2:	d00b      	beq.n	80067ec <_vfiprintf_r+0xc0>
 80067d4:	465b      	mov	r3, fp
 80067d6:	4622      	mov	r2, r4
 80067d8:	4629      	mov	r1, r5
 80067da:	4630      	mov	r0, r6
 80067dc:	f7ff ff93 	bl	8006706 <__sfputs_r>
 80067e0:	3001      	adds	r0, #1
 80067e2:	f000 80aa 	beq.w	800693a <_vfiprintf_r+0x20e>
 80067e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e8:	445a      	add	r2, fp
 80067ea:	9209      	str	r2, [sp, #36]	; 0x24
 80067ec:	f89a 3000 	ldrb.w	r3, [sl]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80a2 	beq.w	800693a <_vfiprintf_r+0x20e>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006800:	f10a 0a01 	add.w	sl, sl, #1
 8006804:	9304      	str	r3, [sp, #16]
 8006806:	9307      	str	r3, [sp, #28]
 8006808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800680c:	931a      	str	r3, [sp, #104]	; 0x68
 800680e:	4654      	mov	r4, sl
 8006810:	2205      	movs	r2, #5
 8006812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006816:	4858      	ldr	r0, [pc, #352]	; (8006978 <_vfiprintf_r+0x24c>)
 8006818:	f7f9 fd62 	bl	80002e0 <memchr>
 800681c:	9a04      	ldr	r2, [sp, #16]
 800681e:	b9d8      	cbnz	r0, 8006858 <_vfiprintf_r+0x12c>
 8006820:	06d1      	lsls	r1, r2, #27
 8006822:	bf44      	itt	mi
 8006824:	2320      	movmi	r3, #32
 8006826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800682a:	0713      	lsls	r3, r2, #28
 800682c:	bf44      	itt	mi
 800682e:	232b      	movmi	r3, #43	; 0x2b
 8006830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006834:	f89a 3000 	ldrb.w	r3, [sl]
 8006838:	2b2a      	cmp	r3, #42	; 0x2a
 800683a:	d015      	beq.n	8006868 <_vfiprintf_r+0x13c>
 800683c:	9a07      	ldr	r2, [sp, #28]
 800683e:	4654      	mov	r4, sl
 8006840:	2000      	movs	r0, #0
 8006842:	f04f 0c0a 	mov.w	ip, #10
 8006846:	4621      	mov	r1, r4
 8006848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800684c:	3b30      	subs	r3, #48	; 0x30
 800684e:	2b09      	cmp	r3, #9
 8006850:	d94e      	bls.n	80068f0 <_vfiprintf_r+0x1c4>
 8006852:	b1b0      	cbz	r0, 8006882 <_vfiprintf_r+0x156>
 8006854:	9207      	str	r2, [sp, #28]
 8006856:	e014      	b.n	8006882 <_vfiprintf_r+0x156>
 8006858:	eba0 0308 	sub.w	r3, r0, r8
 800685c:	fa09 f303 	lsl.w	r3, r9, r3
 8006860:	4313      	orrs	r3, r2
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	46a2      	mov	sl, r4
 8006866:	e7d2      	b.n	800680e <_vfiprintf_r+0xe2>
 8006868:	9b03      	ldr	r3, [sp, #12]
 800686a:	1d19      	adds	r1, r3, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	9103      	str	r1, [sp, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	bfbb      	ittet	lt
 8006874:	425b      	neglt	r3, r3
 8006876:	f042 0202 	orrlt.w	r2, r2, #2
 800687a:	9307      	strge	r3, [sp, #28]
 800687c:	9307      	strlt	r3, [sp, #28]
 800687e:	bfb8      	it	lt
 8006880:	9204      	strlt	r2, [sp, #16]
 8006882:	7823      	ldrb	r3, [r4, #0]
 8006884:	2b2e      	cmp	r3, #46	; 0x2e
 8006886:	d10c      	bne.n	80068a2 <_vfiprintf_r+0x176>
 8006888:	7863      	ldrb	r3, [r4, #1]
 800688a:	2b2a      	cmp	r3, #42	; 0x2a
 800688c:	d135      	bne.n	80068fa <_vfiprintf_r+0x1ce>
 800688e:	9b03      	ldr	r3, [sp, #12]
 8006890:	1d1a      	adds	r2, r3, #4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	9203      	str	r2, [sp, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfb8      	it	lt
 800689a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800689e:	3402      	adds	r4, #2
 80068a0:	9305      	str	r3, [sp, #20]
 80068a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006988 <_vfiprintf_r+0x25c>
 80068a6:	7821      	ldrb	r1, [r4, #0]
 80068a8:	2203      	movs	r2, #3
 80068aa:	4650      	mov	r0, sl
 80068ac:	f7f9 fd18 	bl	80002e0 <memchr>
 80068b0:	b140      	cbz	r0, 80068c4 <_vfiprintf_r+0x198>
 80068b2:	2340      	movs	r3, #64	; 0x40
 80068b4:	eba0 000a 	sub.w	r0, r0, sl
 80068b8:	fa03 f000 	lsl.w	r0, r3, r0
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	4303      	orrs	r3, r0
 80068c0:	3401      	adds	r4, #1
 80068c2:	9304      	str	r3, [sp, #16]
 80068c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c8:	482c      	ldr	r0, [pc, #176]	; (800697c <_vfiprintf_r+0x250>)
 80068ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ce:	2206      	movs	r2, #6
 80068d0:	f7f9 fd06 	bl	80002e0 <memchr>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d03f      	beq.n	8006958 <_vfiprintf_r+0x22c>
 80068d8:	4b29      	ldr	r3, [pc, #164]	; (8006980 <_vfiprintf_r+0x254>)
 80068da:	bb1b      	cbnz	r3, 8006924 <_vfiprintf_r+0x1f8>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	3307      	adds	r3, #7
 80068e0:	f023 0307 	bic.w	r3, r3, #7
 80068e4:	3308      	adds	r3, #8
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ea:	443b      	add	r3, r7
 80068ec:	9309      	str	r3, [sp, #36]	; 0x24
 80068ee:	e767      	b.n	80067c0 <_vfiprintf_r+0x94>
 80068f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068f4:	460c      	mov	r4, r1
 80068f6:	2001      	movs	r0, #1
 80068f8:	e7a5      	b.n	8006846 <_vfiprintf_r+0x11a>
 80068fa:	2300      	movs	r3, #0
 80068fc:	3401      	adds	r4, #1
 80068fe:	9305      	str	r3, [sp, #20]
 8006900:	4619      	mov	r1, r3
 8006902:	f04f 0c0a 	mov.w	ip, #10
 8006906:	4620      	mov	r0, r4
 8006908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800690c:	3a30      	subs	r2, #48	; 0x30
 800690e:	2a09      	cmp	r2, #9
 8006910:	d903      	bls.n	800691a <_vfiprintf_r+0x1ee>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0c5      	beq.n	80068a2 <_vfiprintf_r+0x176>
 8006916:	9105      	str	r1, [sp, #20]
 8006918:	e7c3      	b.n	80068a2 <_vfiprintf_r+0x176>
 800691a:	fb0c 2101 	mla	r1, ip, r1, r2
 800691e:	4604      	mov	r4, r0
 8006920:	2301      	movs	r3, #1
 8006922:	e7f0      	b.n	8006906 <_vfiprintf_r+0x1da>
 8006924:	ab03      	add	r3, sp, #12
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	462a      	mov	r2, r5
 800692a:	4b16      	ldr	r3, [pc, #88]	; (8006984 <_vfiprintf_r+0x258>)
 800692c:	a904      	add	r1, sp, #16
 800692e:	4630      	mov	r0, r6
 8006930:	f3af 8000 	nop.w
 8006934:	4607      	mov	r7, r0
 8006936:	1c78      	adds	r0, r7, #1
 8006938:	d1d6      	bne.n	80068e8 <_vfiprintf_r+0x1bc>
 800693a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800693c:	07d9      	lsls	r1, r3, #31
 800693e:	d405      	bmi.n	800694c <_vfiprintf_r+0x220>
 8006940:	89ab      	ldrh	r3, [r5, #12]
 8006942:	059a      	lsls	r2, r3, #22
 8006944:	d402      	bmi.n	800694c <_vfiprintf_r+0x220>
 8006946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006948:	f7ff fd7f 	bl	800644a <__retarget_lock_release_recursive>
 800694c:	89ab      	ldrh	r3, [r5, #12]
 800694e:	065b      	lsls	r3, r3, #25
 8006950:	f53f af12 	bmi.w	8006778 <_vfiprintf_r+0x4c>
 8006954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006956:	e711      	b.n	800677c <_vfiprintf_r+0x50>
 8006958:	ab03      	add	r3, sp, #12
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	462a      	mov	r2, r5
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <_vfiprintf_r+0x258>)
 8006960:	a904      	add	r1, sp, #16
 8006962:	4630      	mov	r0, r6
 8006964:	f000 f880 	bl	8006a68 <_printf_i>
 8006968:	e7e4      	b.n	8006934 <_vfiprintf_r+0x208>
 800696a:	bf00      	nop
 800696c:	08006f20 	.word	0x08006f20
 8006970:	08006f40 	.word	0x08006f40
 8006974:	08006f00 	.word	0x08006f00
 8006978:	08006f60 	.word	0x08006f60
 800697c:	08006f6a 	.word	0x08006f6a
 8006980:	00000000 	.word	0x00000000
 8006984:	08006707 	.word	0x08006707
 8006988:	08006f66 	.word	0x08006f66

0800698c <_printf_common>:
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	4616      	mov	r6, r2
 8006992:	4699      	mov	r9, r3
 8006994:	688a      	ldr	r2, [r1, #8]
 8006996:	690b      	ldr	r3, [r1, #16]
 8006998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800699c:	4293      	cmp	r3, r2
 800699e:	bfb8      	it	lt
 80069a0:	4613      	movlt	r3, r2
 80069a2:	6033      	str	r3, [r6, #0]
 80069a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069a8:	4607      	mov	r7, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	b10a      	cbz	r2, 80069b2 <_printf_common+0x26>
 80069ae:	3301      	adds	r3, #1
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	0699      	lsls	r1, r3, #26
 80069b6:	bf42      	ittt	mi
 80069b8:	6833      	ldrmi	r3, [r6, #0]
 80069ba:	3302      	addmi	r3, #2
 80069bc:	6033      	strmi	r3, [r6, #0]
 80069be:	6825      	ldr	r5, [r4, #0]
 80069c0:	f015 0506 	ands.w	r5, r5, #6
 80069c4:	d106      	bne.n	80069d4 <_printf_common+0x48>
 80069c6:	f104 0a19 	add.w	sl, r4, #25
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	6832      	ldr	r2, [r6, #0]
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	dc26      	bgt.n	8006a22 <_printf_common+0x96>
 80069d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d8:	1e13      	subs	r3, r2, #0
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	bf18      	it	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	0692      	lsls	r2, r2, #26
 80069e2:	d42b      	bmi.n	8006a3c <_printf_common+0xb0>
 80069e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e8:	4649      	mov	r1, r9
 80069ea:	4638      	mov	r0, r7
 80069ec:	47c0      	blx	r8
 80069ee:	3001      	adds	r0, #1
 80069f0:	d01e      	beq.n	8006a30 <_printf_common+0xa4>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	68e5      	ldr	r5, [r4, #12]
 80069f6:	6832      	ldr	r2, [r6, #0]
 80069f8:	f003 0306 	and.w	r3, r3, #6
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	bf08      	it	eq
 8006a00:	1aad      	subeq	r5, r5, r2
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	bf0c      	ite	eq
 8006a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a0c:	2500      	movne	r5, #0
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	bfc4      	itt	gt
 8006a12:	1a9b      	subgt	r3, r3, r2
 8006a14:	18ed      	addgt	r5, r5, r3
 8006a16:	2600      	movs	r6, #0
 8006a18:	341a      	adds	r4, #26
 8006a1a:	42b5      	cmp	r5, r6
 8006a1c:	d11a      	bne.n	8006a54 <_printf_common+0xc8>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e008      	b.n	8006a34 <_printf_common+0xa8>
 8006a22:	2301      	movs	r3, #1
 8006a24:	4652      	mov	r2, sl
 8006a26:	4649      	mov	r1, r9
 8006a28:	4638      	mov	r0, r7
 8006a2a:	47c0      	blx	r8
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d103      	bne.n	8006a38 <_printf_common+0xac>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a38:	3501      	adds	r5, #1
 8006a3a:	e7c6      	b.n	80069ca <_printf_common+0x3e>
 8006a3c:	18e1      	adds	r1, r4, r3
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	2030      	movs	r0, #48	; 0x30
 8006a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a46:	4422      	add	r2, r4
 8006a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a50:	3302      	adds	r3, #2
 8006a52:	e7c7      	b.n	80069e4 <_printf_common+0x58>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4622      	mov	r2, r4
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	47c0      	blx	r8
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d0e6      	beq.n	8006a30 <_printf_common+0xa4>
 8006a62:	3601      	adds	r6, #1
 8006a64:	e7d9      	b.n	8006a1a <_printf_common+0x8e>
	...

08006a68 <_printf_i>:
 8006a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	7e0f      	ldrb	r7, [r1, #24]
 8006a6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a70:	2f78      	cmp	r7, #120	; 0x78
 8006a72:	4691      	mov	r9, r2
 8006a74:	4680      	mov	r8, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	469a      	mov	sl, r3
 8006a7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a7e:	d807      	bhi.n	8006a90 <_printf_i+0x28>
 8006a80:	2f62      	cmp	r7, #98	; 0x62
 8006a82:	d80a      	bhi.n	8006a9a <_printf_i+0x32>
 8006a84:	2f00      	cmp	r7, #0
 8006a86:	f000 80d8 	beq.w	8006c3a <_printf_i+0x1d2>
 8006a8a:	2f58      	cmp	r7, #88	; 0x58
 8006a8c:	f000 80a3 	beq.w	8006bd6 <_printf_i+0x16e>
 8006a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a98:	e03a      	b.n	8006b10 <_printf_i+0xa8>
 8006a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a9e:	2b15      	cmp	r3, #21
 8006aa0:	d8f6      	bhi.n	8006a90 <_printf_i+0x28>
 8006aa2:	a101      	add	r1, pc, #4	; (adr r1, 8006aa8 <_printf_i+0x40>)
 8006aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa8:	08006b01 	.word	0x08006b01
 8006aac:	08006b15 	.word	0x08006b15
 8006ab0:	08006a91 	.word	0x08006a91
 8006ab4:	08006a91 	.word	0x08006a91
 8006ab8:	08006a91 	.word	0x08006a91
 8006abc:	08006a91 	.word	0x08006a91
 8006ac0:	08006b15 	.word	0x08006b15
 8006ac4:	08006a91 	.word	0x08006a91
 8006ac8:	08006a91 	.word	0x08006a91
 8006acc:	08006a91 	.word	0x08006a91
 8006ad0:	08006a91 	.word	0x08006a91
 8006ad4:	08006c21 	.word	0x08006c21
 8006ad8:	08006b45 	.word	0x08006b45
 8006adc:	08006c03 	.word	0x08006c03
 8006ae0:	08006a91 	.word	0x08006a91
 8006ae4:	08006a91 	.word	0x08006a91
 8006ae8:	08006c43 	.word	0x08006c43
 8006aec:	08006a91 	.word	0x08006a91
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006a91 	.word	0x08006a91
 8006af8:	08006a91 	.word	0x08006a91
 8006afc:	08006c0b 	.word	0x08006c0b
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	1d1a      	adds	r2, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	602a      	str	r2, [r5, #0]
 8006b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0a3      	b.n	8006c5c <_printf_i+0x1f4>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	6829      	ldr	r1, [r5, #0]
 8006b18:	0606      	lsls	r6, r0, #24
 8006b1a:	f101 0304 	add.w	r3, r1, #4
 8006b1e:	d50a      	bpl.n	8006b36 <_printf_i+0xce>
 8006b20:	680e      	ldr	r6, [r1, #0]
 8006b22:	602b      	str	r3, [r5, #0]
 8006b24:	2e00      	cmp	r6, #0
 8006b26:	da03      	bge.n	8006b30 <_printf_i+0xc8>
 8006b28:	232d      	movs	r3, #45	; 0x2d
 8006b2a:	4276      	negs	r6, r6
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b30:	485e      	ldr	r0, [pc, #376]	; (8006cac <_printf_i+0x244>)
 8006b32:	230a      	movs	r3, #10
 8006b34:	e019      	b.n	8006b6a <_printf_i+0x102>
 8006b36:	680e      	ldr	r6, [r1, #0]
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b3e:	bf18      	it	ne
 8006b40:	b236      	sxthne	r6, r6
 8006b42:	e7ef      	b.n	8006b24 <_printf_i+0xbc>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	1d19      	adds	r1, r3, #4
 8006b4a:	6029      	str	r1, [r5, #0]
 8006b4c:	0601      	lsls	r1, r0, #24
 8006b4e:	d501      	bpl.n	8006b54 <_printf_i+0xec>
 8006b50:	681e      	ldr	r6, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <_printf_i+0xf2>
 8006b54:	0646      	lsls	r6, r0, #25
 8006b56:	d5fb      	bpl.n	8006b50 <_printf_i+0xe8>
 8006b58:	881e      	ldrh	r6, [r3, #0]
 8006b5a:	4854      	ldr	r0, [pc, #336]	; (8006cac <_printf_i+0x244>)
 8006b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b5e:	bf0c      	ite	eq
 8006b60:	2308      	moveq	r3, #8
 8006b62:	230a      	movne	r3, #10
 8006b64:	2100      	movs	r1, #0
 8006b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b6a:	6865      	ldr	r5, [r4, #4]
 8006b6c:	60a5      	str	r5, [r4, #8]
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	bfa2      	ittt	ge
 8006b72:	6821      	ldrge	r1, [r4, #0]
 8006b74:	f021 0104 	bicge.w	r1, r1, #4
 8006b78:	6021      	strge	r1, [r4, #0]
 8006b7a:	b90e      	cbnz	r6, 8006b80 <_printf_i+0x118>
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	d04d      	beq.n	8006c1c <_printf_i+0x1b4>
 8006b80:	4615      	mov	r5, r2
 8006b82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b86:	fb03 6711 	mls	r7, r3, r1, r6
 8006b8a:	5dc7      	ldrb	r7, [r0, r7]
 8006b8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b90:	4637      	mov	r7, r6
 8006b92:	42bb      	cmp	r3, r7
 8006b94:	460e      	mov	r6, r1
 8006b96:	d9f4      	bls.n	8006b82 <_printf_i+0x11a>
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d10b      	bne.n	8006bb4 <_printf_i+0x14c>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	07de      	lsls	r6, r3, #31
 8006ba0:	d508      	bpl.n	8006bb4 <_printf_i+0x14c>
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	6861      	ldr	r1, [r4, #4]
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	bfde      	ittt	le
 8006baa:	2330      	movle	r3, #48	; 0x30
 8006bac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bb4:	1b52      	subs	r2, r2, r5
 8006bb6:	6122      	str	r2, [r4, #16]
 8006bb8:	f8cd a000 	str.w	sl, [sp]
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	aa03      	add	r2, sp, #12
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff fee2 	bl	800698c <_printf_common>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d14c      	bne.n	8006c66 <_printf_i+0x1fe>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd0:	b004      	add	sp, #16
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd6:	4835      	ldr	r0, [pc, #212]	; (8006cac <_printf_i+0x244>)
 8006bd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bdc:	6829      	ldr	r1, [r5, #0]
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006be4:	6029      	str	r1, [r5, #0]
 8006be6:	061d      	lsls	r5, r3, #24
 8006be8:	d514      	bpl.n	8006c14 <_printf_i+0x1ac>
 8006bea:	07df      	lsls	r7, r3, #31
 8006bec:	bf44      	itt	mi
 8006bee:	f043 0320 	orrmi.w	r3, r3, #32
 8006bf2:	6023      	strmi	r3, [r4, #0]
 8006bf4:	b91e      	cbnz	r6, 8006bfe <_printf_i+0x196>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	f023 0320 	bic.w	r3, r3, #32
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	2310      	movs	r3, #16
 8006c00:	e7b0      	b.n	8006b64 <_printf_i+0xfc>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	f043 0320 	orr.w	r3, r3, #32
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	2378      	movs	r3, #120	; 0x78
 8006c0c:	4828      	ldr	r0, [pc, #160]	; (8006cb0 <_printf_i+0x248>)
 8006c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c12:	e7e3      	b.n	8006bdc <_printf_i+0x174>
 8006c14:	0659      	lsls	r1, r3, #25
 8006c16:	bf48      	it	mi
 8006c18:	b2b6      	uxthmi	r6, r6
 8006c1a:	e7e6      	b.n	8006bea <_printf_i+0x182>
 8006c1c:	4615      	mov	r5, r2
 8006c1e:	e7bb      	b.n	8006b98 <_printf_i+0x130>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	6826      	ldr	r6, [r4, #0]
 8006c24:	6961      	ldr	r1, [r4, #20]
 8006c26:	1d18      	adds	r0, r3, #4
 8006c28:	6028      	str	r0, [r5, #0]
 8006c2a:	0635      	lsls	r5, r6, #24
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	d501      	bpl.n	8006c34 <_printf_i+0x1cc>
 8006c30:	6019      	str	r1, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <_printf_i+0x1d2>
 8006c34:	0670      	lsls	r0, r6, #25
 8006c36:	d5fb      	bpl.n	8006c30 <_printf_i+0x1c8>
 8006c38:	8019      	strh	r1, [r3, #0]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	4615      	mov	r5, r2
 8006c40:	e7ba      	b.n	8006bb8 <_printf_i+0x150>
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	602a      	str	r2, [r5, #0]
 8006c48:	681d      	ldr	r5, [r3, #0]
 8006c4a:	6862      	ldr	r2, [r4, #4]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f7f9 fb46 	bl	80002e0 <memchr>
 8006c54:	b108      	cbz	r0, 8006c5a <_printf_i+0x1f2>
 8006c56:	1b40      	subs	r0, r0, r5
 8006c58:	6060      	str	r0, [r4, #4]
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c64:	e7a8      	b.n	8006bb8 <_printf_i+0x150>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	47d0      	blx	sl
 8006c70:	3001      	adds	r0, #1
 8006c72:	d0ab      	beq.n	8006bcc <_printf_i+0x164>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	079b      	lsls	r3, r3, #30
 8006c78:	d413      	bmi.n	8006ca2 <_printf_i+0x23a>
 8006c7a:	68e0      	ldr	r0, [r4, #12]
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	4298      	cmp	r0, r3
 8006c80:	bfb8      	it	lt
 8006c82:	4618      	movlt	r0, r3
 8006c84:	e7a4      	b.n	8006bd0 <_printf_i+0x168>
 8006c86:	2301      	movs	r3, #1
 8006c88:	4632      	mov	r2, r6
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	47d0      	blx	sl
 8006c90:	3001      	adds	r0, #1
 8006c92:	d09b      	beq.n	8006bcc <_printf_i+0x164>
 8006c94:	3501      	adds	r5, #1
 8006c96:	68e3      	ldr	r3, [r4, #12]
 8006c98:	9903      	ldr	r1, [sp, #12]
 8006c9a:	1a5b      	subs	r3, r3, r1
 8006c9c:	42ab      	cmp	r3, r5
 8006c9e:	dcf2      	bgt.n	8006c86 <_printf_i+0x21e>
 8006ca0:	e7eb      	b.n	8006c7a <_printf_i+0x212>
 8006ca2:	2500      	movs	r5, #0
 8006ca4:	f104 0619 	add.w	r6, r4, #25
 8006ca8:	e7f5      	b.n	8006c96 <_printf_i+0x22e>
 8006caa:	bf00      	nop
 8006cac:	08006f71 	.word	0x08006f71
 8006cb0:	08006f82 	.word	0x08006f82

08006cb4 <_sbrk_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4d06      	ldr	r5, [pc, #24]	; (8006cd0 <_sbrk_r+0x1c>)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	f7f9 fe5e 	bl	8000980 <_sbrk>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_sbrk_r+0x1a>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_sbrk_r+0x1a>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	24004aa0 	.word	0x24004aa0

08006cd4 <__sread>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cdc:	f000 f8a0 	bl	8006e20 <_read_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	bfab      	itete	ge
 8006ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce8:	181b      	addge	r3, r3, r0
 8006cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cee:	bfac      	ite	ge
 8006cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cf2:	81a3      	strhlt	r3, [r4, #12]
 8006cf4:	bd10      	pop	{r4, pc}

08006cf6 <__swrite>:
 8006cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	898b      	ldrh	r3, [r1, #12]
 8006cfe:	05db      	lsls	r3, r3, #23
 8006d00:	4605      	mov	r5, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	4616      	mov	r6, r2
 8006d06:	d505      	bpl.n	8006d14 <__swrite+0x1e>
 8006d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f000 f868 	bl	8006de4 <_lseek_r>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	4632      	mov	r2, r6
 8006d22:	463b      	mov	r3, r7
 8006d24:	4628      	mov	r0, r5
 8006d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	f000 b817 	b.w	8006d5c <_write_r>

08006d2e <__sseek>:
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 f855 	bl	8006de4 <_lseek_r>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	bf15      	itete	ne
 8006d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d4a:	81a3      	strheq	r3, [r4, #12]
 8006d4c:	bf18      	it	ne
 8006d4e:	81a3      	strhne	r3, [r4, #12]
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__sclose>:
 8006d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d56:	f000 b813 	b.w	8006d80 <_close_r>
	...

08006d5c <_write_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4d07      	ldr	r5, [pc, #28]	; (8006d7c <_write_r+0x20>)
 8006d60:	4604      	mov	r4, r0
 8006d62:	4608      	mov	r0, r1
 8006d64:	4611      	mov	r1, r2
 8006d66:	2200      	movs	r2, #0
 8006d68:	602a      	str	r2, [r5, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f7f9 fdb7 	bl	80008de <_write>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_write_r+0x1e>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_write_r+0x1e>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	24004aa0 	.word	0x24004aa0

08006d80 <_close_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4d06      	ldr	r5, [pc, #24]	; (8006d9c <_close_r+0x1c>)
 8006d84:	2300      	movs	r3, #0
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	f7f9 fdc3 	bl	8000916 <_close>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_close_r+0x1a>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_close_r+0x1a>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	24004aa0 	.word	0x24004aa0

08006da0 <_fstat_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d07      	ldr	r5, [pc, #28]	; (8006dc0 <_fstat_r+0x20>)
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	602b      	str	r3, [r5, #0]
 8006dae:	f7f9 fdbe 	bl	800092e <_fstat>
 8006db2:	1c43      	adds	r3, r0, #1
 8006db4:	d102      	bne.n	8006dbc <_fstat_r+0x1c>
 8006db6:	682b      	ldr	r3, [r5, #0]
 8006db8:	b103      	cbz	r3, 8006dbc <_fstat_r+0x1c>
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	bd38      	pop	{r3, r4, r5, pc}
 8006dbe:	bf00      	nop
 8006dc0:	24004aa0 	.word	0x24004aa0

08006dc4 <_isatty_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4d06      	ldr	r5, [pc, #24]	; (8006de0 <_isatty_r+0x1c>)
 8006dc8:	2300      	movs	r3, #0
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	f7f9 fdbd 	bl	800094e <_isatty>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_isatty_r+0x1a>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_isatty_r+0x1a>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	24004aa0 	.word	0x24004aa0

08006de4 <_lseek_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d07      	ldr	r5, [pc, #28]	; (8006e04 <_lseek_r+0x20>)
 8006de8:	4604      	mov	r4, r0
 8006dea:	4608      	mov	r0, r1
 8006dec:	4611      	mov	r1, r2
 8006dee:	2200      	movs	r2, #0
 8006df0:	602a      	str	r2, [r5, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f7f9 fdb6 	bl	8000964 <_lseek>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_lseek_r+0x1e>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_lseek_r+0x1e>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	24004aa0 	.word	0x24004aa0

08006e08 <__malloc_lock>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__malloc_lock+0x8>)
 8006e0a:	f7ff bb1d 	b.w	8006448 <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	24004a94 	.word	0x24004a94

08006e14 <__malloc_unlock>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__malloc_unlock+0x8>)
 8006e16:	f7ff bb18 	b.w	800644a <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	24004a94 	.word	0x24004a94

08006e20 <_read_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	; (8006e40 <_read_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7f9 fd38 	bl	80008a4 <_read>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_read_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_read_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	24004aa0 	.word	0x24004aa0

08006e44 <_init>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr

08006e50 <_fini>:
 8006e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e52:	bf00      	nop
 8006e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e56:	bc08      	pop	{r3}
 8006e58:	469e      	mov	lr, r3
 8006e5a:	4770      	bx	lr
