
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080130c0  080130c0  000230c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080133f0  080133f0  000233f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080133f8  080133f8  000233f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080133fc  080133fc  000233fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08013400  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f1c  24000080  08013478  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24004f9c  08013478  00034f9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003079b  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005243  00000000  00000000  00060841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002520  00000000  00000000  00065a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002338  00000000  00000000  00067fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007451  00000000  00000000  0006a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ec8a  00000000  00000000  00071731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d48c  00000000  00000000  000a03bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022d847  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a75c  00000000  00000000  0022d898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080130a8 	.word	0x080130a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	080130a8 	.word	0x080130a8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID); // Set the event flag for Task1
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00f f852 	bl	800f6a4 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f00f f847 	bl	800f6a4 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f00f f83c 	bl	800f6a4 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f012 f8aa 	bl	8012788 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	240003bc 	.word	0x240003bc
 8000640:	24000548 	.word	0x24000548
 8000644:	24000408 	.word	0x24000408
 8000648:	24000454 	.word	0x24000454
 800064c:	080130f0 	.word	0x080130f0

08000650 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	496b      	ldr	r1, [pc, #428]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 800065c:	486b      	ldr	r0, [pc, #428]	; (800080c <HAL_UART_RxCpltCallback+0x1bc>)
 800065e:	f00c fb57 	bl	800cd10 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4b69      	ldr	r3, [pc, #420]	; (8000808 <HAL_UART_RxCpltCallback+0x1b8>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b25      	cmp	r3, #37	; 0x25
 800066c:	f200 80c8 	bhi.w	8000800 <HAL_UART_RxCpltCallback+0x1b0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000749 	.word	0x08000749
 800067c:	08000759 	.word	0x08000759
 8000680:	08000769 	.word	0x08000769
 8000684:	08000779 	.word	0x08000779
 8000688:	08000789 	.word	0x08000789
 800068c:	08000799 	.word	0x08000799
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007b9 	.word	0x080007b9
 8000698:	08000801 	.word	0x08000801
 800069c:	08000801 	.word	0x08000801
 80006a0:	08000719 	.word	0x08000719
 80006a4:	08000711 	.word	0x08000711
 80006a8:	080007c9 	.word	0x080007c9
 80006ac:	080007d1 	.word	0x080007d1
 80006b0:	080007e1 	.word	0x080007e1
 80006b4:	080007f1 	.word	0x080007f1
 80006b8:	080007d9 	.word	0x080007d9
 80006bc:	080007e9 	.word	0x080007e9
 80006c0:	080007f9 	.word	0x080007f9
 80006c4:	08000751 	.word	0x08000751
 80006c8:	08000761 	.word	0x08000761
 80006cc:	08000771 	.word	0x08000771
 80006d0:	08000781 	.word	0x08000781
 80006d4:	08000791 	.word	0x08000791
 80006d8:	080007a1 	.word	0x080007a1
 80006dc:	080007b1 	.word	0x080007b1
 80006e0:	080007c1 	.word	0x080007c1
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000731 	.word	0x08000731
 80006f0:	08000801 	.word	0x08000801
 80006f4:	08000801 	.word	0x08000801
 80006f8:	08000801 	.word	0x08000801
 80006fc:	08000801 	.word	0x08000801
 8000700:	08000801 	.word	0x08000801
 8000704:	08000801 	.word	0x08000801
 8000708:	08000739 	.word	0x08000739
 800070c:	08000741 	.word	0x08000741
	case 0x0B: {
		printf("SDN1 ON\n");
 8000710:	483f      	ldr	r0, [pc, #252]	; (8000810 <HAL_UART_RxCpltCallback+0x1c0>)
 8000712:	f012 f839 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 8000716:	e073      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <HAL_UART_RxCpltCallback+0x1c4>)
 800071a:	f012 f835 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 800071e:	e06f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 8000720:	483d      	ldr	r0, [pc, #244]	; (8000818 <HAL_UART_RxCpltCallback+0x1c8>)
 8000722:	f012 f831 	bl	8012788 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 8000726:	e06b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <HAL_UART_RxCpltCallback+0x1cc>)
 800072a:	f012 f82d 	bl	8012788 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 800072e:	e067      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000730:	483b      	ldr	r0, [pc, #236]	; (8000820 <HAL_UART_RxCpltCallback+0x1d0>)
 8000732:	f012 f829 	bl	8012788 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 8000736:	e063      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000738:	483a      	ldr	r0, [pc, #232]	; (8000824 <HAL_UART_RxCpltCallback+0x1d4>)
 800073a:	f012 f825 	bl	8012788 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 800073e:	e05f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <HAL_UART_RxCpltCallback+0x1d8>)
 8000742:	f012 f821 	bl	8012788 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 8000746:	e05b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000748:	4838      	ldr	r0, [pc, #224]	; (800082c <HAL_UART_RxCpltCallback+0x1dc>)
 800074a:	f012 f81d 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 800074e:	e057      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 8000750:	4837      	ldr	r0, [pc, #220]	; (8000830 <HAL_UART_RxCpltCallback+0x1e0>)
 8000752:	f012 f819 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 8000756:	e053      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000758:	4836      	ldr	r0, [pc, #216]	; (8000834 <HAL_UART_RxCpltCallback+0x1e4>)
 800075a:	f012 f815 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 800075e:	e04f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <HAL_UART_RxCpltCallback+0x1e8>)
 8000762:	f012 f811 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000766:	e04b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <HAL_UART_RxCpltCallback+0x1ec>)
 800076a:	f012 f80d 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800076e:	e047      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000770:	4833      	ldr	r0, [pc, #204]	; (8000840 <HAL_UART_RxCpltCallback+0x1f0>)
 8000772:	f012 f809 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000776:	e043      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <HAL_UART_RxCpltCallback+0x1f4>)
 800077a:	f012 f805 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800077e:	e03f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000780:	4831      	ldr	r0, [pc, #196]	; (8000848 <HAL_UART_RxCpltCallback+0x1f8>)
 8000782:	f012 f801 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000786:	e03b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <HAL_UART_RxCpltCallback+0x1fc>)
 800078a:	f011 fffd 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800078e:	e037      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000790:	482f      	ldr	r0, [pc, #188]	; (8000850 <HAL_UART_RxCpltCallback+0x200>)
 8000792:	f011 fff9 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000796:	e033      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000798:	482e      	ldr	r0, [pc, #184]	; (8000854 <HAL_UART_RxCpltCallback+0x204>)
 800079a:	f011 fff5 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800079e:	e02f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <HAL_UART_RxCpltCallback+0x208>)
 80007a2:	f011 fff1 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 80007a6:	e02b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <HAL_UART_RxCpltCallback+0x20c>)
 80007aa:	f011 ffed 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 80007ae:	e027      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <HAL_UART_RxCpltCallback+0x210>)
 80007b2:	f011 ffe9 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 80007b6:	e023      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <HAL_UART_RxCpltCallback+0x214>)
 80007ba:	f011 ffe5 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 80007be:	e01f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 80007c0:	4829      	ldr	r0, [pc, #164]	; (8000868 <HAL_UART_RxCpltCallback+0x218>)
 80007c2:	f011 ffe1 	bl	8012788 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 80007c6:	e01b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <HAL_UART_RxCpltCallback+0x21c>)
 80007ca:	f011 ffdd 	bl	8012788 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 80007ce:	e017      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <HAL_UART_RxCpltCallback+0x220>)
 80007d2:	f011 ffd9 	bl	8012788 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007d6:	e013      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_UART_RxCpltCallback+0x224>)
 80007da:	f011 ffd5 	bl	8012788 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 80007de:	e00f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 80007e0:	4825      	ldr	r0, [pc, #148]	; (8000878 <HAL_UART_RxCpltCallback+0x228>)
 80007e2:	f011 ffd1 	bl	8012788 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007e6:	e00b      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 80007e8:	4824      	ldr	r0, [pc, #144]	; (800087c <HAL_UART_RxCpltCallback+0x22c>)
 80007ea:	f011 ffcd 	bl	8012788 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 80007ee:	e007      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 80007f0:	4823      	ldr	r0, [pc, #140]	; (8000880 <HAL_UART_RxCpltCallback+0x230>)
 80007f2:	f011 ffc9 	bl	8012788 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007f6:	e003      	b.n	8000800 <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <HAL_UART_RxCpltCallback+0x234>)
 80007fa:	f011 ffc5 	bl	8012788 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80007fe:	bf00      	nop
	}
	}
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2400054c 	.word	0x2400054c
 800080c:	240004a0 	.word	0x240004a0
 8000810:	08013108 	.word	0x08013108
 8000814:	08013110 	.word	0x08013110
 8000818:	0801311c 	.word	0x0801311c
 800081c:	08013124 	.word	0x08013124
 8000820:	08013130 	.word	0x08013130
 8000824:	08013144 	.word	0x08013144
 8000828:	08013150 	.word	0x08013150
 800082c:	0801315c 	.word	0x0801315c
 8000830:	08013168 	.word	0x08013168
 8000834:	08013174 	.word	0x08013174
 8000838:	08013180 	.word	0x08013180
 800083c:	08013190 	.word	0x08013190
 8000840:	0801319c 	.word	0x0801319c
 8000844:	080131a8 	.word	0x080131a8
 8000848:	080131b8 	.word	0x080131b8
 800084c:	080131c8 	.word	0x080131c8
 8000850:	080131d4 	.word	0x080131d4
 8000854:	080131e0 	.word	0x080131e0
 8000858:	080131ec 	.word	0x080131ec
 800085c:	080131f8 	.word	0x080131f8
 8000860:	08013204 	.word	0x08013204
 8000864:	08013210 	.word	0x08013210
 8000868:	0801321c 	.word	0x0801321c
 800086c:	0801322c 	.word	0x0801322c
 8000870:	0801323c 	.word	0x0801323c
 8000874:	08013244 	.word	0x08013244
 8000878:	0801324c 	.word	0x0801324c
 800087c:	08013254 	.word	0x08013254
 8000880:	08013260 	.word	0x08013260
 8000884:	08013268 	.word	0x08013268

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f001 fea2 	bl	80025d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f876 	bl	8000980 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000894:	f000 f8f2 	bl	8000a7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 fd90 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 800089c:	f000 fd5e 	bl	800135c <MX_DMA_Init>
  MX_TIM3_Init();
 80008a0:	f000 fcc2 	bl	8001228 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 fd0e 	bl	80012c4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008a8:	f000 fb02 	bl	8000eb0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80008ac:	f000 fb40 	bl	8000f30 <MX_SPI2_Init>
  MX_TIM2_Init();
 80008b0:	f000 fc44 	bl	800113c <MX_TIM2_Init>
  MX_TIM1_Init();
 80008b4:	f000 fb94 	bl	8000fe0 <MX_TIM1_Init>
  MX_ADC3_Init();
 80008b8:	f000 fa36 	bl	8000d28 <MX_ADC3_Init>
  MX_ADC1_Init();
 80008bc:	f000 f90e 	bl	8000adc <MX_ADC1_Init>
  MX_DAC1_Init();
 80008c0:	f000 fac4 	bl	8000e4c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80008c4:	2100      	movs	r1, #0
 80008c6:	481d      	ldr	r0, [pc, #116]	; (800093c <main+0xb4>)
 80008c8:	f00a fe6c 	bl	800b5a4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008cc:	2100      	movs	r1, #0
 80008ce:	481c      	ldr	r0, [pc, #112]	; (8000940 <main+0xb8>)
 80008d0:	f00a fe68 	bl	800b5a4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80008d4:	2100      	movs	r1, #0
 80008d6:	481b      	ldr	r0, [pc, #108]	; (8000944 <main+0xbc>)
 80008d8:	f00a fe64 	bl	800b5a4 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008dc:	f00e fdac 	bl	800f438 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <main+0xc0>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4819      	ldr	r0, [pc, #100]	; (800094c <main+0xc4>)
 80008e6:	f00e fdf1 	bl	800f4cc <osThreadNew>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a18      	ldr	r2, [pc, #96]	; (8000950 <main+0xc8>)
 80008ee:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80008f0:	4a18      	ldr	r2, [pc, #96]	; (8000954 <main+0xcc>)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <main+0xd0>)
 80008f6:	f00e fde9 	bl	800f4cc <osThreadNew>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <main+0xd4>)
 80008fe:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000900:	4a17      	ldr	r2, [pc, #92]	; (8000960 <main+0xd8>)
 8000902:	2100      	movs	r1, #0
 8000904:	4817      	ldr	r0, [pc, #92]	; (8000964 <main+0xdc>)
 8000906:	f00e fde1 	bl	800f4cc <osThreadNew>
 800090a:	4603      	mov	r3, r0
 800090c:	4a16      	ldr	r2, [pc, #88]	; (8000968 <main+0xe0>)
 800090e:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000910:	4a16      	ldr	r2, [pc, #88]	; (800096c <main+0xe4>)
 8000912:	2100      	movs	r1, #0
 8000914:	4816      	ldr	r0, [pc, #88]	; (8000970 <main+0xe8>)
 8000916:	f00e fdd9 	bl	800f4cc <osThreadNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a15      	ldr	r2, [pc, #84]	; (8000974 <main+0xec>)
 800091e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL); // Create an event flags group
 8000920:	2000      	movs	r0, #0
 8000922:	f00e fe80 	bl	800f626 <osEventFlagsNew>
 8000926:	4603      	mov	r3, r0
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <main+0xf0>)
 800092a:	6013      	str	r3, [r2, #0]
  system_setup();
 800092c:	f000 fdb0 	bl	8001490 <system_setup>
  printf("Starting kernal...\n");
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <main+0xf4>)
 8000932:	f011 ff29 	bl	8012788 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000936:	f00e fda3 	bl	800f480 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800093a:	e7fe      	b.n	800093a <main+0xb2>
 800093c:	240003bc 	.word	0x240003bc
 8000940:	24000408 	.word	0x24000408
 8000944:	24000454 	.word	0x24000454
 8000948:	080132bc 	.word	0x080132bc
 800094c:	0800182d 	.word	0x0800182d
 8000950:	24000534 	.word	0x24000534
 8000954:	080132e0 	.word	0x080132e0
 8000958:	08001865 	.word	0x08001865
 800095c:	24000538 	.word	0x24000538
 8000960:	08013304 	.word	0x08013304
 8000964:	0800189d 	.word	0x0800189d
 8000968:	2400053c 	.word	0x2400053c
 800096c:	08013328 	.word	0x08013328
 8000970:	080018d5 	.word	0x080018d5
 8000974:	24000540 	.word	0x24000540
 8000978:	24000548 	.word	0x24000548
 800097c:	08013270 	.word	0x08013270

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b09c      	sub	sp, #112	; 0x70
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098a:	224c      	movs	r2, #76	; 0x4c
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f011 fe84 	bl	801269c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2220      	movs	r2, #32
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f011 fe7e 	bl	801269c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009a0:	2002      	movs	r0, #2
 80009a2:	f006 fe91 	bl	80076c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <SystemClock_Config+0xf4>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	4a31      	ldr	r2, [pc, #196]	; (8000a74 <SystemClock_Config+0xf4>)
 80009b0:	f023 0301 	bic.w	r3, r3, #1
 80009b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <SystemClock_Config+0xf4>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <SystemClock_Config+0xf8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c8:	4a2b      	ldr	r2, [pc, #172]	; (8000a78 <SystemClock_Config+0xf8>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <SystemClock_Config+0xf8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009dc:	bf00      	nop
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <SystemClock_Config+0xf8>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ea:	d1f8      	bne.n	80009de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	2340      	movs	r3, #64	; 0x40
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a04:	2309      	movs	r3, #9
 8000a06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a14:	230c      	movs	r3, #12
 8000a16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a26:	4618      	mov	r0, r3
 8000a28:	f006 fe88 	bl	800773c <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a32:	f000 ff73 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a36:	233f      	movs	r3, #63	; 0x3f
 8000a38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a4a:	2340      	movs	r3, #64	; 0x40
 8000a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f007 fac7 	bl	8007ff0 <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000a68:	f000 ff58 	bl	800191c <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3770      	adds	r7, #112	; 0x70
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	58000400 	.word	0x58000400
 8000a78:	58024800 	.word	0x58024800

08000a7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0b0      	sub	sp, #192	; 0xc0
 8000a80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	22c0      	movs	r2, #192	; 0xc0
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f011 fe07 	bl	801269c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a92:	f04f 0300 	mov.w	r3, #0
 8000a96:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000a9e:	2309      	movs	r3, #9
 8000aa0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000aae:	23c0      	movs	r3, #192	; 0xc0
 8000ab0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ab2:	2320      	movs	r3, #32
 8000ab4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000ab6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f007 fe61 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ad0:	f000 ff24 	bl	800191c <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	37c0      	adds	r7, #192	; 0xc0
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b00:	4b7c      	ldr	r3, [pc, #496]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b02:	4a7d      	ldr	r2, [pc, #500]	; (8000cf8 <MX_ADC1_Init+0x21c>)
 8000b04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b06:	4b7b      	ldr	r3, [pc, #492]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b0e:	4b79      	ldr	r3, [pc, #484]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b14:	4b77      	ldr	r3, [pc, #476]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1a:	4b76      	ldr	r3, [pc, #472]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b20:	4b74      	ldr	r3, [pc, #464]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b26:	4b73      	ldr	r3, [pc, #460]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000b2c:	4b71      	ldr	r3, [pc, #452]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b2e:	220b      	movs	r2, #11
 8000b30:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b70      	ldr	r3, [pc, #448]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b38:	4b6e      	ldr	r3, [pc, #440]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3e:	4b6d      	ldr	r3, [pc, #436]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b44:	4b6b      	ldr	r3, [pc, #428]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b4a:	4b6a      	ldr	r3, [pc, #424]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b52:	4b68      	ldr	r3, [pc, #416]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b58:	4b66      	ldr	r3, [pc, #408]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b60:	4864      	ldr	r0, [pc, #400]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b62:	f001 ffc3 	bl	8002aec <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b6c:	f000 fed6 	bl	800191c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	485e      	ldr	r0, [pc, #376]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000b7c:	f003 f8de 	bl	8003d3c <HAL_ADCEx_MultiModeConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000b86:	f000 fec9 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b8a:	4b5c      	ldr	r3, [pc, #368]	; (8000cfc <MX_ADC1_Init+0x220>)
 8000b8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8e:	2306      	movs	r3, #6
 8000b90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000b92:	2307      	movs	r3, #7
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4851      	ldr	r0, [pc, #324]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000bae:	f002 fa21 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000bb8:	f000 feb0 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bbc:	4b50      	ldr	r3, [pc, #320]	; (8000d00 <MX_ADC1_Init+0x224>)
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	484a      	ldr	r0, [pc, #296]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000bca:	f002 fa13 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000bd4:	f000 fea2 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bd8:	4b4a      	ldr	r3, [pc, #296]	; (8000d04 <MX_ADC1_Init+0x228>)
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bdc:	2312      	movs	r3, #18
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4843      	ldr	r0, [pc, #268]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000be6:	f002 fa05 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000bf0:	f000 fe94 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <MX_ADC1_Init+0x22c>)
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bf8:	2318      	movs	r3, #24
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	483c      	ldr	r0, [pc, #240]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000c02:	f002 f9f7 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000c0c:	f000 fe86 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c10:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <MX_ADC1_Init+0x230>)
 8000c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4835      	ldr	r0, [pc, #212]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000c20:	f002 f9e8 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000c2a:	f000 fe77 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c2e:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <MX_ADC1_Init+0x234>)
 8000c30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000c32:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000c3e:	f002 f9d9 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000c48:	f000 fe68 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_ADC1_Init+0x238>)
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000c50:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000c54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000c5c:	f002 f9ca 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000c66:	f000 fe59 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_ADC1_Init+0x23c>)
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000c6e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000c7a:	f002 f9bb 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000c84:	f000 fe4a 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_ADC1_Init+0x240>)
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000c8c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000c90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	4619      	mov	r1, r3
 8000c96:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000c98:	f002 f9ac 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000ca2:	f000 fe3b 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_ADC1_Init+0x244>)
 8000ca8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000cba:	f002 f99b 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000cc4:	f000 fe2a 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_ADC1_Init+0x248>)
 8000cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000ccc:	f240 2306 	movw	r3, #518	; 0x206
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <MX_ADC1_Init+0x218>)
 8000cdc:	f002 f98a 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000ce6:	f000 fe19 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2400009c 	.word	0x2400009c
 8000cf8:	40022000 	.word	0x40022000
 8000cfc:	0c900008 	.word	0x0c900008
 8000d00:	10c00010 	.word	0x10c00010
 8000d04:	14f00020 	.word	0x14f00020
 8000d08:	1d500080 	.word	0x1d500080
 8000d0c:	21800100 	.word	0x21800100
 8000d10:	25b00200 	.word	0x25b00200
 8000d14:	2a000400 	.word	0x2a000400
 8000d18:	2e300800 	.word	0x2e300800
 8000d1c:	3ac04000 	.word	0x3ac04000
 8000d20:	3ef08000 	.word	0x3ef08000
 8000d24:	47520000 	.word	0x47520000

08000d28 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d40:	4b3d      	ldr	r3, [pc, #244]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d42:	4a3e      	ldr	r2, [pc, #248]	; (8000e3c <MX_ADC3_Init+0x114>)
 8000d44:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d46:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d48:	2208      	movs	r2, #8
 8000d4a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d4c:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d52:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d54:	2204      	movs	r2, #4
 8000d56:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d58:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000d64:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d6a:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d76:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d7c:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d88:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d98:	4827      	ldr	r0, [pc, #156]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000d9a:	f001 fea7 	bl	8002aec <HAL_ADC_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8000da4:	f000 fdba 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <MX_ADC3_Init+0x118>)
 8000daa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dac:	2306      	movs	r3, #6
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000db0:	2307      	movs	r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000db8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481b      	ldr	r0, [pc, #108]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000dcc:	f002 f912 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000dd6:	f000 fda1 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_ADC3_Init+0x11c>)
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dde:	230c      	movs	r3, #12
 8000de0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000de8:	f002 f904 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000df2:	f000 fd93 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000df6:	2301      	movs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dfa:	2312      	movs	r3, #18
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000e04:	f002 f8f6 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000e0e:	f000 fd85 	bl	800191c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <MX_ADC3_Init+0x120>)
 8000e14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e16:	2318      	movs	r3, #24
 8000e18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_ADC3_Init+0x110>)
 8000e20:	f002 f8e8 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8000e2a:	f000 fd77 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24000100 	.word	0x24000100
 8000e3c:	58026000 	.word	0x58026000
 8000e40:	cb840000 	.word	0xcb840000
 8000e44:	cfb80000 	.word	0xcfb80000
 8000e48:	04300002 	.word	0x04300002

08000e4c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2224      	movs	r2, #36	; 0x24
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f011 fc1f 	bl	801269c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e60:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_DAC1_Init+0x60>)
 8000e62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e64:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e66:	f003 f927 	bl	80040b8 <HAL_DAC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e70:	f000 fd54 	bl	800191c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e78:	230a      	movs	r3, #10
 8000e7a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <MX_DAC1_Init+0x5c>)
 8000e90:	f003 f994 	bl	80041bc <HAL_DAC_ConfigChannel>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000e9a:	f000 fd3f 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000254 	.word	0x24000254
 8000eac:	40007400 	.word	0x40007400

08000eb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <MX_I2C1_Init+0x78>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <MX_I2C1_Init+0x7c>)
 8000ebe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eea:	480e      	ldr	r0, [pc, #56]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000eec:	f006 fab8 	bl	8007460 <HAL_I2C_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ef6:	f000 fd11 	bl	800191c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000efe:	f006 fb4b 	bl	8007598 <HAL_I2CEx_ConfigAnalogFilter>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f08:	f000 fd08 	bl	800191c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_I2C1_Init+0x74>)
 8000f10:	f006 fb8d 	bl	800762e <HAL_I2CEx_ConfigDigitalFilter>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f1a:	f000 fcff 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	240002e0 	.word	0x240002e0
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	00707cbb 	.word	0x00707cbb

08000f30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f36:	4a29      	ldr	r2, [pc, #164]	; (8000fdc <MX_SPI2_Init+0xac>)
 8000f38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f3c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f48:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f62:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f66:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000f6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_SPI2_Init+0xa8>)
 8000fc4:	f00a f8e0 	bl	800b188 <HAL_SPI_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000fce:	f000 fca5 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	24000334 	.word	0x24000334
 8000fdc:	40003800 	.word	0x40003800

08000fe0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09a      	sub	sp, #104	; 0x68
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	222c      	movs	r2, #44	; 0x2c
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f011 fb3e 	bl	801269c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <MX_TIM1_Init+0x154>)
 8001022:	4a45      	ldr	r2, [pc, #276]	; (8001138 <MX_TIM1_Init+0x158>)
 8001024:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <MX_TIM1_Init+0x154>)
 8001028:	227f      	movs	r2, #127	; 0x7f
 800102a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b41      	ldr	r3, [pc, #260]	; (8001134 <MX_TIM1_Init+0x154>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001032:	4b40      	ldr	r3, [pc, #256]	; (8001134 <MX_TIM1_Init+0x154>)
 8001034:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001038:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <MX_TIM1_Init+0x154>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001040:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <MX_TIM1_Init+0x154>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <MX_TIM1_Init+0x154>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800104c:	4839      	ldr	r0, [pc, #228]	; (8001134 <MX_TIM1_Init+0x154>)
 800104e:	f00a f9da 	bl	800b406 <HAL_TIM_Base_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001058:	f000 fc60 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001062:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001066:	4619      	mov	r1, r3
 8001068:	4832      	ldr	r0, [pc, #200]	; (8001134 <MX_TIM1_Init+0x154>)
 800106a:	f00a ff81 	bl	800bf70 <HAL_TIM_ConfigClockSource>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001074:	f000 fc52 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001078:	482e      	ldr	r0, [pc, #184]	; (8001134 <MX_TIM1_Init+0x154>)
 800107a:	f00a fbed 	bl	800b858 <HAL_TIM_PWM_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001084:	f000 fc4a 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800108c:	2300      	movs	r3, #0
 800108e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001094:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001098:	4619      	mov	r1, r3
 800109a:	4826      	ldr	r0, [pc, #152]	; (8001134 <MX_TIM1_Init+0x154>)
 800109c:	f00b fcbe 	bl	800ca1c <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010a6:	f000 fc39 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010aa:	2360      	movs	r3, #96	; 0x60
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80010ae:	f240 13df 	movw	r3, #479	; 0x1df
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c4:	2300      	movs	r3, #0
 80010c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010cc:	2200      	movs	r2, #0
 80010ce:	4619      	mov	r1, r3
 80010d0:	4818      	ldr	r0, [pc, #96]	; (8001134 <MX_TIM1_Init+0x154>)
 80010d2:	f00a fe39 	bl	800bd48 <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80010dc:	f000 fc1e 	bl	800191c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <MX_TIM1_Init+0x154>)
 8001116:	f00b fd0f 	bl	800cb38 <HAL_TIMEx_ConfigBreakDeadTime>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001120:	f000 fbfc 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <MX_TIM1_Init+0x154>)
 8001126:	f000 ff07 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 800112a:	bf00      	nop
 800112c:	3768      	adds	r7, #104	; 0x68
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	240003bc 	.word	0x240003bc
 8001138:	40010000 	.word	0x40010000

0800113c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <MX_TIM2_Init+0xe8>)
 8001170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001174:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_TIM2_Init+0xe8>)
 8001178:	223f      	movs	r2, #63	; 0x3f
 800117a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_TIM2_Init+0xe8>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <MX_TIM2_Init+0xe8>)
 8001184:	f640 4234 	movw	r2, #3124	; 0xc34
 8001188:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_TIM2_Init+0xe8>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001190:	4b24      	ldr	r3, [pc, #144]	; (8001224 <MX_TIM2_Init+0xe8>)
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001196:	4823      	ldr	r0, [pc, #140]	; (8001224 <MX_TIM2_Init+0xe8>)
 8001198:	f00a f935 	bl	800b406 <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011a2:	f000 fbbb 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b0:	4619      	mov	r1, r3
 80011b2:	481c      	ldr	r0, [pc, #112]	; (8001224 <MX_TIM2_Init+0xe8>)
 80011b4:	f00a fedc 	bl	800bf70 <HAL_TIM_ConfigClockSource>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011be:	f000 fbad 	bl	800191c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_TIM2_Init+0xe8>)
 80011c4:	f00a fb48 	bl	800b858 <HAL_TIM_PWM_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011ce:	f000 fba5 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011d2:	2320      	movs	r3, #32
 80011d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <MX_TIM2_Init+0xe8>)
 80011e2:	f00b fc1b 	bl	800ca1c <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011ec:	f000 fb96 	bl	800191c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	220c      	movs	r2, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <MX_TIM2_Init+0xe8>)
 8001208:	f00a fd9e 	bl	800bd48 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001212:	f000 fb83 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM2_Init+0xe8>)
 8001218:	f000 fe8e 	bl	8001f38 <HAL_TIM_MspPostInit>

}
 800121c:	bf00      	nop
 800121e:	3738      	adds	r7, #56	; 0x38
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	24000408 	.word	0x24000408

08001228 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_TIM3_Init+0x94>)
 8001248:	4a1d      	ldr	r2, [pc, #116]	; (80012c0 <MX_TIM3_Init+0x98>)
 800124a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_TIM3_Init+0x94>)
 800124e:	223f      	movs	r2, #63	; 0x3f
 8001250:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM3_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_TIM3_Init+0x94>)
 800125a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800125e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_TIM3_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_TIM3_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800126c:	4813      	ldr	r0, [pc, #76]	; (80012bc <MX_TIM3_Init+0x94>)
 800126e:	f00a f8ca 	bl	800b406 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001278:	f000 fb50 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_TIM3_Init+0x94>)
 800128a:	f00a fe71 	bl	800bf70 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001294:	f000 fb42 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_TIM3_Init+0x94>)
 80012a6:	f00b fbb9 	bl	800ca1c <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012b0:	f000 fb34 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	24000454 	.word	0x24000454
 80012c0:	40000400 	.word	0x40000400

080012c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <MX_USART1_UART_Init+0x94>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012d0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80012d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_USART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_USART1_UART_Init+0x90>)
 800130e:	f00b fcaf 	bl	800cc70 <HAL_UART_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001318:	f000 fb00 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001320:	f00d ff7b 	bl	800f21a <HAL_UARTEx_SetTxFifoThreshold>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800132a:	f000 faf7 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132e:	2100      	movs	r1, #0
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001332:	f00d ffb0 	bl	800f296 <HAL_UARTEx_SetRxFifoThreshold>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800133c:	f000 faee 	bl	800191c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_USART1_UART_Init+0x90>)
 8001342:	f00d ff31 	bl	800f1a8 <HAL_UARTEx_DisableFifoMode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800134c:	f000 fae6 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	240004a0 	.word	0x240004a0
 8001358:	40011000 	.word	0x40011000

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_DMA_Init+0x5c>)
 8001364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001368:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <MX_DMA_Init+0x5c>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_DMA_Init+0x5c>)
 8001374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2105      	movs	r1, #5
 8001384:	200b      	movs	r0, #11
 8001386:	f002 fe6f 	bl	8004068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800138a:	200b      	movs	r0, #11
 800138c:	f002 fe86 	bl	800409c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2105      	movs	r1, #5
 8001394:	200c      	movs	r0, #12
 8001396:	f002 fe67 	bl	8004068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800139a:	200c      	movs	r0, #12
 800139c:	f002 fe7e 	bl	800409c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2010      	movs	r0, #16
 80013a6:	f002 fe5f 	bl	8004068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013aa:	2010      	movs	r0, #16
 80013ac:	f002 fe76 	bl	800409c <HAL_NVIC_EnableIRQ>

}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	58024400 	.word	0x58024400

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <MX_GPIO_Init+0xc8>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a2a      	ldr	r2, [pc, #168]	; (8001484 <MX_GPIO_Init+0xc8>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_GPIO_Init+0xc8>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <MX_GPIO_Init+0xc8>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a23      	ldr	r2, [pc, #140]	; (8001484 <MX_GPIO_Init+0xc8>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_GPIO_Init+0xc8>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_GPIO_Init+0xc8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <MX_GPIO_Init+0xc8>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_GPIO_Init+0xc8>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001432:	4815      	ldr	r0, [pc, #84]	; (8001488 <MX_GPIO_Init+0xcc>)
 8001434:	f005 fffa 	bl	800742c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2164      	movs	r1, #100	; 0x64
 800143c:	4813      	ldr	r0, [pc, #76]	; (800148c <MX_GPIO_Init+0xd0>)
 800143e:	f005 fff5 	bl	800742c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001442:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001446:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	4619      	mov	r1, r3
 800145a:	480b      	ldr	r0, [pc, #44]	; (8001488 <MX_GPIO_Init+0xcc>)
 800145c:	f005 fe36 	bl	80070cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_GPIO_Init+0xd0>)
 8001478:	f005 fe28 	bl	80070cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58024400 	.word	0x58024400
 8001488:	58020800 	.word	0x58020800
 800148c:	58020400 	.word	0x58020400

08001490 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	  TIM2->CCR4 = 312;
 8001494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001498:	f44f 729c 	mov.w	r2, #312	; 0x138
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800149e:	210c      	movs	r1, #12
 80014a0:	4818      	ldr	r0, [pc, #96]	; (8001504 <system_setup+0x74>)
 80014a2:	f00a fa3b 	bl	800b91c <HAL_TIM_PWM_Start>




	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80014a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014ae:	4816      	ldr	r0, [pc, #88]	; (8001508 <system_setup+0x78>)
 80014b0:	f002 fbe0 	bl	8003c74 <HAL_ADCEx_Calibration_Start>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80014ba:	f000 fa2f 	bl	800191c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80014be:	220b      	movs	r2, #11
 80014c0:	4912      	ldr	r1, [pc, #72]	; (800150c <system_setup+0x7c>)
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <system_setup+0x78>)
 80014c4:	f001 fcb4 	bl	8002e30 <HAL_ADC_Start_DMA>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80014ce:	f000 fa25 	bl	800191c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80014d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <system_setup+0x80>)
 80014dc:	f002 fbca 	bl	8003c74 <HAL_ADCEx_Calibration_Start>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80014e6:	f000 fa19 	bl	800191c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80014ea:	2204      	movs	r2, #4
 80014ec:	4909      	ldr	r1, [pc, #36]	; (8001514 <system_setup+0x84>)
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <system_setup+0x80>)
 80014f0:	f001 fc9e 	bl	8002e30 <HAL_ADC_Start_DMA>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80014fa:	f000 fa0f 	bl	800191c <Error_Handler>
	  	}
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	24000408 	.word	0x24000408
 8001508:	2400009c 	.word	0x2400009c
 800150c:	240005c0 	.word	0x240005c0
 8001510:	24000100 	.word	0x24000100
 8001514:	240005e0 	.word	0x240005e0

08001518 <sample_pmt>:
	buffer[2] = PC2;
	buffer[3] = PC3;
}

void sample_pmt(uint8_t *buffer)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint8_t pmt_spi[2];


#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001520:	230e      	movs	r3, #14
 8001522:	733b      	strb	r3, [r7, #12]
	pmt_spi[1] = 0xD;
 8001524:	230d      	movs	r3, #13
 8001526:	737b      	strb	r3, [r7, #13]
#else
	receive_spi(hspi1, pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	22bb      	movs	r2, #187	; 0xbb
 800152c:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3301      	adds	r3, #1
 8001532:	22bb      	movs	r2, #187	; 0xbb
 8001534:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3302      	adds	r3, #2
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3303      	adds	r3, #3
 8001542:	4a08      	ldr	r2, [pc, #32]	; (8001564 <sample_pmt+0x4c>)
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	7b3a      	ldrb	r2, [r7, #12]
 800154e:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3305      	adds	r3, #5
 8001554:	7b7a      	ldrb	r2, [r7, #13]
 8001556:	701a      	strb	r2, [r3, #0]

}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	24000544 	.word	0x24000544

08001568 <sample_erpa>:


void sample_erpa(uint8_t *buffer)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[2];

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001570:	230e      	movs	r3, #14
 8001572:	733b      	strb	r3, [r7, #12]
	erpa_spi[1] = 0xD;
 8001574:	230d      	movs	r3, #13
 8001576:	737b      	strb	r3, [r7, #13]

	erpa_adc[0] = 0xEE;
 8001578:	23ee      	movs	r3, #238	; 0xee
 800157a:	813b      	strh	r3, [r7, #8]
	erpa_adc[1] = 0xDD;
 800157c:	23dd      	movs	r3, #221	; 0xdd
 800157e:	817b      	strh	r3, [r7, #10]
#else
	receive_spi(hspi2);
	reveice_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	22aa      	movs	r2, #170	; 0xaa
 8001584:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3301      	adds	r3, #1
 800158a:	22aa      	movs	r2, #170	; 0xaa
 800158c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3302      	adds	r3, #2
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3303      	adds	r3, #3
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <sample_erpa+0xa4>)
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  						// ENDmon MSB
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3304      	adds	r3, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               					// ENDmon LSB
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3305      	adds	r3, #5
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);    // SWP Monitored MSB
 80015b0:	893b      	ldrh	r3, [r7, #8]
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3306      	adds	r3, #6
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);             // SWP Monitored LSB
 80015be:	893a      	ldrh	r2, [r7, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3307      	adds	r3, #7
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);    // TEMPURATURE 1 MSB
 80015c8:	897b      	ldrh	r3, [r7, #10]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3308      	adds	r3, #8
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);             // TEMPURATURE 1 LSB
 80015d6:	897a      	ldrh	r2, [r7, #10]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3309      	adds	r3, #9
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     				// TEMPURATURE 2 MSB
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	330a      	adds	r3, #10
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    			// TEMPURATURE 2 LSB
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	330b      	adds	r3, #11
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];									// ERPA eADC MSB
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	330c      	adds	r3, #12
 80015f4:	7b3a      	ldrb	r2, [r7, #12]
 80015f6:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];									// ERPA eADC LSB
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	330d      	adds	r3, #13
 80015fc:	7b7a      	ldrb	r2, [r7, #13]
 80015fe:	701a      	strb	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	24000545 	.word	0x24000545

08001610 <sample_hk>:


void sample_hk(uint8_t *buffer)
{
 8001610:	b480      	push	{r7}
 8001612:	b08d      	sub	sp, #52	; 0x34
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	int16_t hk_i2c[4];
	uint16_t hk_adc1[9];
	uint16_t hk_adc3[4];

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001618:	2311      	movs	r3, #17
 800161a:	853b      	strh	r3, [r7, #40]	; 0x28
	hk_i2c[1] = 0x12;
 800161c:	2312      	movs	r3, #18
 800161e:	857b      	strh	r3, [r7, #42]	; 0x2a
	hk_i2c[2] = 0x13;
 8001620:	2313      	movs	r3, #19
 8001622:	85bb      	strh	r3, [r7, #44]	; 0x2c
	hk_i2c[3] = 0x14;
 8001624:	2314      	movs	r3, #20
 8001626:	85fb      	strh	r3, [r7, #46]	; 0x2e

	hk_adc1[0] = 0xA0;
 8001628:	23a0      	movs	r3, #160	; 0xa0
 800162a:	82bb      	strh	r3, [r7, #20]
	hk_adc1[1] = 0xA1;
 800162c:	23a1      	movs	r3, #161	; 0xa1
 800162e:	82fb      	strh	r3, [r7, #22]
	hk_adc1[2] = 0xA2;
 8001630:	23a2      	movs	r3, #162	; 0xa2
 8001632:	833b      	strh	r3, [r7, #24]
	hk_adc1[3] = 0xA3;
 8001634:	23a3      	movs	r3, #163	; 0xa3
 8001636:	837b      	strh	r3, [r7, #26]
	hk_adc1[4] = 0xA4;
 8001638:	23a4      	movs	r3, #164	; 0xa4
 800163a:	83bb      	strh	r3, [r7, #28]
	hk_adc1[5] = 0xA5;
 800163c:	23a5      	movs	r3, #165	; 0xa5
 800163e:	83fb      	strh	r3, [r7, #30]
	hk_adc1[6] = 0xA6;
 8001640:	23a6      	movs	r3, #166	; 0xa6
 8001642:	843b      	strh	r3, [r7, #32]
	hk_adc1[7] = 0xA7;
 8001644:	23a7      	movs	r3, #167	; 0xa7
 8001646:	847b      	strh	r3, [r7, #34]	; 0x22
	hk_adc1[8] = 0xA8;
 8001648:	23a8      	movs	r3, #168	; 0xa8
 800164a:	84bb      	strh	r3, [r7, #36]	; 0x24

	hk_adc3[0] = 0xB0;
 800164c:	23b0      	movs	r3, #176	; 0xb0
 800164e:	81bb      	strh	r3, [r7, #12]
	hk_adc3[1] = 0xB1;
 8001650:	23b1      	movs	r3, #177	; 0xb1
 8001652:	81fb      	strh	r3, [r7, #14]
	hk_adc3[2] = 0xB2;
 8001654:	23b2      	movs	r3, #178	; 0xb2
 8001656:	823b      	strh	r3, [r7, #16]
	hk_adc3[3] = 0xB3;
 8001658:	23b3      	movs	r3, #179	; 0xb3
 800165a:	827b      	strh	r3, [r7, #18]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     			// HK SYNC 0xCC MSB
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	22cc      	movs	r2, #204	; 0xcc
 8001660:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     			// HK SYNC 0xCC LSB
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	22cc      	movs	r2, #204	; 0xcc
 8001668:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    			// HK SEQ # MSB
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3302      	adds	r3, #2
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             			// HK SEQ # LSB
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3303      	adds	r3, #3
 8001676:	4a6c      	ldr	r2, [pc, #432]	; (8001828 <sample_hk+0x218>)
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b29a      	uxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3304      	adds	r3, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 800168a:	89fa      	ldrh	r2, [r7, #14]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3305      	adds	r3, #5
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001694:	89bb      	ldrh	r3, [r7, #12]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29a      	uxth	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3306      	adds	r3, #6
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 80016a2:	89ba      	ldrh	r2, [r7, #12]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3307      	adds	r3, #7
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);		// HK TEMP1 MSB
 80016ac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80016b0:	121a      	asrs	r2, r3, #8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3308      	adds	r3, #8
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);					// HK TEMP1 LSB
 80016ba:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3309      	adds	r3, #9
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);		// HK TEMP2 MSB
 80016c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016ca:	121a      	asrs	r2, r3, #8
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	330a      	adds	r3, #10
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);				// HK TEMP2 LSB
 80016d4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	330b      	adds	r3, #11
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);		// HK TEMP3 MSB
 80016e0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80016e4:	121a      	asrs	r2, r3, #8
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	330c      	adds	r3, #12
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);				// HK TEMP3 LSB
 80016ee:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	330d      	adds	r3, #13
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);		// HK TEMP4 MSB
 80016fa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80016fe:	121a      	asrs	r2, r3, #8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	330e      	adds	r3, #14
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);				// HK TEMP4 LSB
 8001708:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	330f      	adds	r3, #15
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001714:	8abb      	ldrh	r3, [r7, #20]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3310      	adds	r3, #16
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001722:	8aba      	ldrh	r2, [r7, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3311      	adds	r3, #17
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 800172c:	8afb      	ldrh	r3, [r7, #22]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	b29a      	uxth	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3312      	adds	r3, #18
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 800173a:	8afa      	ldrh	r2, [r7, #22]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3313      	adds	r3, #19
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001744:	8b3b      	ldrh	r3, [r7, #24]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b29a      	uxth	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3314      	adds	r3, #20
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001752:	8b3a      	ldrh	r2, [r7, #24]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3315      	adds	r3, #21
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 800175c:	8b7b      	ldrh	r3, [r7, #26]
 800175e:	0a1b      	lsrs	r3, r3, #8
 8001760:	b29a      	uxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3316      	adds	r3, #22
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 800176a:	8b7a      	ldrh	r2, [r7, #26]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3317      	adds	r3, #23
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001774:	8c3b      	ldrh	r3, [r7, #32]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	b29a      	uxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3318      	adds	r3, #24
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001782:	8c3a      	ldrh	r2, [r7, #32]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3319      	adds	r3, #25
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 800178c:	8b7b      	ldrh	r3, [r7, #26]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	331a      	adds	r3, #26
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 800179a:	8b7a      	ldrh	r2, [r7, #26]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	331b      	adds	r3, #27
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80017a4:	8b3b      	ldrh	r3, [r7, #24]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	331c      	adds	r3, #28
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 80017b2:	8b3a      	ldrh	r2, [r7, #24]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	331d      	adds	r3, #29
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80017bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	331e      	adds	r3, #30
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80017ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	331f      	adds	r3, #31
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80017d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3320      	adds	r3, #32
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80017e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3321      	adds	r3, #33	; 0x21
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80017ec:	8bbb      	ldrh	r3, [r7, #28]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3322      	adds	r3, #34	; 0x22
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 80017fa:	8bba      	ldrh	r2, [r7, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3323      	adds	r3, #35	; 0x23
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001804:	8bfb      	ldrh	r3, [r7, #30]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	b29a      	uxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3324      	adds	r3, #36	; 0x24
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001812:	8bfa      	ldrh	r2, [r7, #30]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3325      	adds	r3, #37	; 0x25
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]

}
 800181c:	bf00      	nop
 800181e:	3734      	adds	r7, #52	; 0x34
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	24000546 	.word	0x24000546

0800182c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t pmt_data[PMT_DATA_SIZE];
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <PMT_init+0x30>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183c:	2200      	movs	r2, #0
 800183e:	2101      	movs	r1, #1
 8001840:	f00d ff74 	bl	800f72c <osEventFlagsWait>
	    sample_pmt(pmt_data);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe65 	bl	8001518 <sample_pmt>
		pmt_seq++;
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <PMT_init+0x34>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b02      	ldr	r3, [pc, #8]	; (8001860 <PMT_init+0x34>)
 8001858:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800185a:	e7eb      	b.n	8001834 <PMT_init+0x8>
 800185c:	24000548 	.word	0x24000548
 8001860:	24000544 	.word	0x24000544

08001864 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
	uint8_t erpa_data[ERPA_DATA_SIZE];
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <ERPA_init+0x30>)
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001874:	2200      	movs	r2, #0
 8001876:	2102      	movs	r1, #2
 8001878:	f00d ff58 	bl	800f72c <osEventFlagsWait>
	    sample_erpa(erpa_data);
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe71 	bl	8001568 <sample_erpa>
		erpa_seq++;
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <ERPA_init+0x34>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b02      	ldr	r3, [pc, #8]	; (8001898 <ERPA_init+0x34>)
 8001890:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001892:	e7eb      	b.n	800186c <ERPA_init+0x8>
 8001894:	24000548 	.word	0x24000548
 8001898:	24000545 	.word	0x24000545

0800189c <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
	uint8_t hk_data[HK_DATA_SIZE];
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HK_init+0x30>)
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ac:	2200      	movs	r2, #0
 80018ae:	2104      	movs	r1, #4
 80018b0:	f00d ff3c 	bl	800f72c <osEventFlagsWait>
	    sample_hk(hk_data);
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fea9 	bl	8001610 <sample_hk>
		hk_seq++;
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HK_init+0x34>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HK_init+0x34>)
 80018c8:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80018ca:	e7eb      	b.n	80018a4 <HK_init+0x8>
 80018cc:	24000548 	.word	0x24000548
 80018d0:	24000546 	.word	0x24000546

080018d4 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80018dc:	2201      	movs	r2, #1
 80018de:	4904      	ldr	r1, [pc, #16]	; (80018f0 <UART_RX_init+0x1c>)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <UART_RX_init+0x20>)
 80018e2:	f00b fa15 	bl	800cd10 <HAL_UART_Receive_IT>
		osDelay(1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f00d fe82 	bl	800f5f0 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80018ec:	e7f6      	b.n	80018dc <UART_RX_init+0x8>
 80018ee:	bf00      	nop
 80018f0:	2400054c 	.word	0x2400054c
 80018f4:	240004a0 	.word	0x240004a0

080018f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800190a:	f000 fe9f 	bl	800264c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40001000 	.word	0x40001000

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001924:	e7fe      	b.n	8001924 <Error_Handler+0x8>
	...

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x38>)
 8001930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001934:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_MspInit+0x38>)
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_MspInit+0x38>)
 8001940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	210f      	movs	r1, #15
 8001950:	f06f 0001 	mvn.w	r0, #1
 8001954:	f002 fb88 	bl	8004068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58024400 	.word	0x58024400

08001964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a7b      	ldr	r2, [pc, #492]	; (8001b70 <HAL_ADC_MspInit+0x20c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	f040 8091 	bne.w	8001aaa <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001988:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 800198a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800198e:	4a79      	ldr	r2, [pc, #484]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001990:	f043 0320 	orr.w	r3, r3, #32
 8001994:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001998:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 800199a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ac:	4a71      	ldr	r2, [pc, #452]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d4:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	4a62      	ldr	r2, [pc, #392]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001a00:	2333      	movs	r3, #51	; 0x33
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	2303      	movs	r3, #3
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a10:	4619      	mov	r1, r3
 8001a12:	4859      	ldr	r0, [pc, #356]	; (8001b78 <HAL_ADC_MspInit+0x214>)
 8001a14:	f005 fb5a 	bl	80070cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001a18:	23ce      	movs	r3, #206	; 0xce
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4854      	ldr	r0, [pc, #336]	; (8001b7c <HAL_ADC_MspInit+0x218>)
 8001a2c:	f005 fb4e 	bl	80070cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a30:	2303      	movs	r3, #3
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a34:	2303      	movs	r3, #3
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a40:	4619      	mov	r1, r3
 8001a42:	484f      	ldr	r0, [pc, #316]	; (8001b80 <HAL_ADC_MspInit+0x21c>)
 8001a44:	f005 fb42 	bl	80070cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001a48:	4b4e      	ldr	r3, [pc, #312]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a4a:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_ADC_MspInit+0x224>)
 8001a4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a4e:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a50:	2209      	movs	r2, #9
 8001a52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a60:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a70:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a76:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a86:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a8c:	483d      	ldr	r0, [pc, #244]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001a8e:	f002 fce1 	bl	8004454 <HAL_DMA_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001a98:	f7ff ff40 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a39      	ldr	r2, [pc, #228]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001aa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001aa2:	4a38      	ldr	r2, [pc, #224]	; (8001b84 <HAL_ADC_MspInit+0x220>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001aa8:	e05e      	b.n	8001b68 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <HAL_ADC_MspInit+0x228>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d159      	bne.n	8001b68 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	4a2e      	ldr	r2, [pc, #184]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae2:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_ADC_MspInit+0x210>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001af0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001af4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001af8:	f000 fdd4 	bl	80026a4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001afc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001b00:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001b04:	f000 fdce 	bl	80026a4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b0a:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <HAL_ADC_MspInit+0x230>)
 8001b0c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b10:	2273      	movs	r2, #115	; 0x73
 8001b12:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b26:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001b4c:	4810      	ldr	r0, [pc, #64]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b4e:	f002 fc81 	bl	8004454 <HAL_DMA_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001b58:	f7ff fee0 	bl	800191c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b60:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_ADC_MspInit+0x22c>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b68:	bf00      	nop
 8001b6a:	3738      	adds	r7, #56	; 0x38
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40022000 	.word	0x40022000
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58020800 	.word	0x58020800
 8001b7c:	58020000 	.word	0x58020000
 8001b80:	58020400 	.word	0x58020400
 8001b84:	24000164 	.word	0x24000164
 8001b88:	40020010 	.word	0x40020010
 8001b8c:	58026000 	.word	0x58026000
 8001b90:	240001dc 	.word	0x240001dc
 8001b94:	40020028 	.word	0x40020028

08001b98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <HAL_DAC_MspInit+0xf0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d161      	bne.n	8001c7e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001bba:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_DAC_MspInit+0xf4>)
 8001bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bc0:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <HAL_DAC_MspInit+0xf4>)
 8001bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bca:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_DAC_MspInit+0xf4>)
 8001bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_DAC_MspInit+0xf4>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_DAC_MspInit+0xf4>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_DAC_MspInit+0xf4>)
 8001bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4821      	ldr	r0, [pc, #132]	; (8001c90 <HAL_DAC_MspInit+0xf8>)
 8001c0a:	f005 fa5f 	bl	80070cc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_DAC_MspInit+0x100>)
 8001c12:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c16:	2243      	movs	r2, #67	; 0x43
 8001c18:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c1c:	2240      	movs	r2, #64	; 0x40
 8001c1e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c34:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c3c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c44:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001c52:	4810      	ldr	r0, [pc, #64]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c54:	f002 fbfe 	bl	8004454 <HAL_DMA_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001c5e:	f7ff fe5d 	bl	800191c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_DAC_MspInit+0xfc>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2105      	movs	r1, #5
 8001c72:	2036      	movs	r0, #54	; 0x36
 8001c74:	f002 f9f8 	bl	8004068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c78:	2036      	movs	r0, #54	; 0x36
 8001c7a:	f002 fa0f 	bl	800409c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3728      	adds	r7, #40	; 0x28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40007400 	.word	0x40007400
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58020000 	.word	0x58020000
 8001c94:	24000268 	.word	0x24000268
 8001c98:	40020088 	.word	0x40020088

08001c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0ba      	sub	sp, #232	; 0xe8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	22c0      	movs	r2, #192	; 0xc0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f010 fced 	bl	801269c <memset>
  if(hi2c->Instance==I2C1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a27      	ldr	r2, [pc, #156]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d146      	bne.n	8001d5a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ccc:	f04f 0208 	mov.w	r2, #8
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 fd52 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001cee:	f7ff fe15 	bl	800191c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_I2C_MspInit+0xcc>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <HAL_I2C_MspInit+0xcc>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d02:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_I2C_MspInit+0xcc>)
 8001d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d34:	4619      	mov	r1, r3
 8001d36:	480d      	ldr	r0, [pc, #52]	; (8001d6c <HAL_I2C_MspInit+0xd0>)
 8001d38:	f005 f9c8 	bl	80070cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_I2C_MspInit+0xcc>)
 8001d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_I2C_MspInit+0xcc>)
 8001d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_I2C_MspInit+0xcc>)
 8001d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	37e8      	adds	r7, #232	; 0xe8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40005400 	.word	0x40005400
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58020400 	.word	0x58020400

08001d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0ba      	sub	sp, #232	; 0xe8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	22c0      	movs	r2, #192	; 0xc0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f010 fc83 	bl	801269c <memset>
  if(hspi->Instance==SPI2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_SPI_MspInit+0xc4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d145      	bne.n	8001e2c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4618      	mov	r0, r3
 8001db6:	f006 fce9 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001dc0:	f7ff fdac 	bl	800191c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dca:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de8:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001dea:	f043 0302 	orr.w	r3, r3, #2
 8001dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_SPI_MspInit+0xc8>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001e00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <HAL_SPI_MspInit+0xcc>)
 8001e28:	f005 f950 	bl	80070cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	37e8      	adds	r7, #232	; 0xe8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40003800 	.word	0x40003800
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	58020400 	.word	0x58020400

08001e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <HAL_TIM_Base_MspInit+0xec>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12f      	bne.n	8001eb2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e58:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2105      	movs	r1, #5
 8001e74:	2018      	movs	r0, #24
 8001e76:	f002 f8f7 	bl	8004068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001e7a:	2018      	movs	r0, #24
 8001e7c:	f002 f90e 	bl	800409c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2105      	movs	r1, #5
 8001e84:	2019      	movs	r0, #25
 8001e86:	f002 f8ef 	bl	8004068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e8a:	2019      	movs	r0, #25
 8001e8c:	f002 f906 	bl	800409c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2105      	movs	r1, #5
 8001e94:	201a      	movs	r0, #26
 8001e96:	f002 f8e7 	bl	8004068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001e9a:	201a      	movs	r0, #26
 8001e9c:	f002 f8fe 	bl	800409c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2105      	movs	r1, #5
 8001ea4:	201b      	movs	r0, #27
 8001ea6:	f002 f8df 	bl	8004068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001eaa:	201b      	movs	r0, #27
 8001eac:	f002 f8f6 	bl	800409c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eb0:	e038      	b.n	8001f24 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d117      	bne.n	8001eec <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ebc:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec2:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2105      	movs	r1, #5
 8001ede:	201c      	movs	r0, #28
 8001ee0:	f002 f8c2 	bl	8004068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ee4:	201c      	movs	r0, #28
 8001ee6:	f002 f8d9 	bl	800409c <HAL_NVIC_EnableIRQ>
}
 8001eea:	e01b      	b.n	8001f24 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_TIM_Base_MspInit+0xf4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d116      	bne.n	8001f24 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_Base_MspInit+0xf0>)
 8001f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2105      	movs	r1, #5
 8001f18:	201d      	movs	r0, #29
 8001f1a:	f002 f8a5 	bl	8004068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f1e:	201d      	movs	r0, #29
 8001f20:	f002 f8bc 	bl	800409c <HAL_NVIC_EnableIRQ>
}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	58024400 	.word	0x58024400
 8001f34:	40000400 	.word	0x40000400

08001f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_TIM_MspPostInit+0xb8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d120      	bne.n	8001f9c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_TIM_MspPostInit+0xbc>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	4a24      	ldr	r2, [pc, #144]	; (8001ff4 <HAL_TIM_MspPostInit+0xbc>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_TIM_MspPostInit+0xbc>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <HAL_TIM_MspPostInit+0xc0>)
 8001f96:	f005 f899 	bl	80070cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f9a:	e024      	b.n	8001fe6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa4:	d11f      	bne.n	8001fe6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_TIM_MspPostInit+0xbc>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_TIM_MspPostInit+0xbc>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_TIM_MspPostInit+0xbc>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4806      	ldr	r0, [pc, #24]	; (8001ffc <HAL_TIM_MspPostInit+0xc4>)
 8001fe2:	f005 f873 	bl	80070cc <HAL_GPIO_Init>
}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58020000 	.word	0x58020000
 8001ffc:	58020400 	.word	0x58020400

08002000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b0ba      	sub	sp, #232	; 0xe8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	22c0      	movs	r2, #192	; 0xc0
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f010 fb3b 	bl	801269c <memset>
  if(huart->Instance==USART1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2b      	ldr	r2, [pc, #172]	; (80020d8 <HAL_UART_MspInit+0xd8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d14e      	bne.n	80020ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002030:	f04f 0201 	mov.w	r2, #1
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002042:	f107 0310 	add.w	r3, r7, #16
 8002046:	4618      	mov	r0, r3
 8002048:	f006 fba0 	bl	800878c <HAL_RCCEx_PeriphCLKConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002052:	f7ff fc63 	bl	800191c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002056:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_UART_MspInit+0xdc>)
 8002058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_UART_MspInit+0xdc>)
 800205e:	f043 0310 	orr.w	r3, r3, #16
 8002062:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_UART_MspInit+0xdc>)
 8002068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_UART_MspInit+0xdc>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_UART_MspInit+0xdc>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0xdc>)
 8002086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002092:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002096:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ac:	2307      	movs	r3, #7
 80020ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020b6:	4619      	mov	r1, r3
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <HAL_UART_MspInit+0xe0>)
 80020ba:	f005 f807 	bl	80070cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2105      	movs	r1, #5
 80020c2:	2025      	movs	r0, #37	; 0x25
 80020c4:	f001 ffd0 	bl	8004068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f001 ffe7 	bl	800409c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	37e8      	adds	r7, #232	; 0xe8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40011000 	.word	0x40011000
 80020dc:	58024400 	.word	0x58024400
 80020e0:	58020000 	.word	0x58020000

080020e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b090      	sub	sp, #64	; 0x40
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b0f      	cmp	r3, #15
 80020f0:	d827      	bhi.n	8002142 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80020f2:	2200      	movs	r2, #0
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	2036      	movs	r0, #54	; 0x36
 80020f8:	f001 ffb6 	bl	8004068 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020fc:	2036      	movs	r0, #54	; 0x36
 80020fe:	f001 ffcd 	bl	800409c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <HAL_InitTick+0xc4>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002108:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_InitTick+0xc8>)
 800210a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800210e:	4a27      	ldr	r2, [pc, #156]	; (80021ac <HAL_InitTick+0xc8>)
 8002110:	f043 0310 	orr.w	r3, r3, #16
 8002114:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_InitTick+0xc8>)
 800211a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002126:	f107 0210 	add.w	r2, r7, #16
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f006 fae9 	bl	8008708 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002138:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	2b00      	cmp	r3, #0
 800213e:	d106      	bne.n	800214e <HAL_InitTick+0x6a>
 8002140:	e001      	b.n	8002146 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e02b      	b.n	800219e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002146:	f006 fab3 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 800214a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800214c:	e004      	b.n	8002158 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800214e:	f006 faaf 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 8002152:	4603      	mov	r3, r0
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_InitTick+0xcc>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	3b01      	subs	r3, #1
 8002164:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_InitTick+0xd0>)
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_InitTick+0xd4>)
 800216a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_InitTick+0xd0>)
 800216e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002172:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002174:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <HAL_InitTick+0xd0>)
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_InitTick+0xd0>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_InitTick+0xd0>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002186:	480b      	ldr	r0, [pc, #44]	; (80021b4 <HAL_InitTick+0xd0>)
 8002188:	f009 f93d 	bl	800b406 <HAL_TIM_Base_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002192:	4808      	ldr	r0, [pc, #32]	; (80021b4 <HAL_InitTick+0xd0>)
 8002194:	f009 f98e 	bl	800b4b4 <HAL_TIM_Base_Start_IT>
 8002198:	4603      	mov	r3, r0
 800219a:	e000      	b.n	800219e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3740      	adds	r7, #64	; 0x40
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	24000008 	.word	0x24000008
 80021ac:	58024400 	.word	0x58024400
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	240005e8 	.word	0x240005e8
 80021b8:	40001000 	.word	0x40001000

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80021c0:	e7fe      	b.n	80021c0 <NMI_Handler+0x4>

080021c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <MemManage_Handler+0x4>

080021ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler+0x4>

080021da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA1_Stream0_IRQHandler+0x10>)
 80021ee:	f003 fc5b 	bl	8005aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000164 	.word	0x24000164

080021fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA1_Stream1_IRQHandler+0x10>)
 8002202:	f003 fc51 	bl	8005aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	240001dc 	.word	0x240001dc

08002210 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <DMA1_Stream5_IRQHandler+0x10>)
 8002216:	f003 fc47 	bl	8005aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	24000268 	.word	0x24000268

08002224 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <TIM1_BRK_IRQHandler+0x10>)
 800222a:	f009 fc85 	bl	800bb38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	240003bc 	.word	0x240003bc

08002238 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <TIM1_UP_IRQHandler+0x10>)
 800223e:	f009 fc7b 	bl	800bb38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	240003bc 	.word	0x240003bc

0800224c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002252:	f009 fc71 	bl	800bb38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	240003bc 	.word	0x240003bc

08002260 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002264:	4802      	ldr	r0, [pc, #8]	; (8002270 <TIM1_CC_IRQHandler+0x10>)
 8002266:	f009 fc67 	bl	800bb38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	240003bc 	.word	0x240003bc

08002274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <TIM2_IRQHandler+0x10>)
 800227a:	f009 fc5d 	bl	800bb38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	24000408 	.word	0x24000408

08002288 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <TIM3_IRQHandler+0x10>)
 800228e:	f009 fc53 	bl	800bb38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	24000454 	.word	0x24000454

0800229c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <USART1_IRQHandler+0x10>)
 80022a2:	f00a fd81 	bl	800cda8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	240004a0 	.word	0x240004a0

080022b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <TIM6_DAC_IRQHandler+0x20>)
 80022b6:	791b      	ldrb	r3, [r3, #4]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80022be:	4804      	ldr	r0, [pc, #16]	; (80022d0 <TIM6_DAC_IRQHandler+0x20>)
 80022c0:	f001 ff1c 	bl	80040fc <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <TIM6_DAC_IRQHandler+0x24>)
 80022c6:	f009 fc37 	bl	800bb38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	24000254 	.word	0x24000254
 80022d4:	240005e8 	.word	0x240005e8

080022d8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <ITM_SendChar+0x48>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <ITM_SendChar+0x48>)
 80022e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ec:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <ITM_SendChar+0x4c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <ITM_SendChar+0x4c>)
 80022f4:	f043 0301 	orr.w	r3, r3, #1
 80022f8:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80022fa:	bf00      	nop
 80022fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f8      	beq.n	80022fc <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800230a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	6013      	str	r3, [r2, #0]
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000edfc 	.word	0xe000edfc
 8002324:	e0000e00 	.word	0xe0000e00

08002328 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	e00a      	b.n	8002350 <_read+0x28>
		*ptr++ = __io_getchar();
 800233a:	f3af 8000 	nop.w
 800233e:	4601      	mov	r1, r0
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60ba      	str	r2, [r7, #8]
 8002346:	b2ca      	uxtb	r2, r1
 8002348:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbf0      	blt.n	800233a <_read+0x12>
	}

	return len;
 8002358:	687b      	ldr	r3, [r7, #4]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002362:	b580      	push	{r7, lr}
 8002364:	b086      	sub	sp, #24
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e009      	b.n	8002388 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	60ba      	str	r2, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ffab 	bl	80022d8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbf1      	blt.n	8002374 <_write+0x12>
	}
	return len;
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_close>:

int _close(int file) {
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c2:	605a      	str	r2, [r3, #4]
	return 0;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_isatty>:

int _isatty(int file) {
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <_sbrk+0x64>)
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <_sbrk+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <_sbrk+0x40>
		errno = ENOMEM;
 8002434:	f010 f8fa 	bl	801262c <__errno>
 8002438:	4603      	mov	r3, r0
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002442:	e009      	b.n	8002458 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_sbrk+0x64>)
 8002454:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	24080000 	.word	0x24080000
 8002464:	00000400 	.word	0x00000400
 8002468:	24000634 	.word	0x24000634
 800246c:	24004fa0 	.word	0x24004fa0

08002470 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002474:	4b37      	ldr	r3, [pc, #220]	; (8002554 <SystemInit+0xe4>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	4a36      	ldr	r2, [pc, #216]	; (8002554 <SystemInit+0xe4>)
 800247c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <SystemInit+0xe8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	2b06      	cmp	r3, #6
 800248e:	d807      	bhi.n	80024a0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <SystemInit+0xe8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 030f 	bic.w	r3, r3, #15
 8002498:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <SystemInit+0xe8>)
 800249a:	f043 0307 	orr.w	r3, r3, #7
 800249e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80024a0:	4b2e      	ldr	r3, [pc, #184]	; (800255c <SystemInit+0xec>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2d      	ldr	r2, [pc, #180]	; (800255c <SystemInit+0xec>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <SystemInit+0xec>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80024b2:	4b2a      	ldr	r3, [pc, #168]	; (800255c <SystemInit+0xec>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4929      	ldr	r1, [pc, #164]	; (800255c <SystemInit+0xec>)
 80024b8:	4b29      	ldr	r3, [pc, #164]	; (8002560 <SystemInit+0xf0>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <SystemInit+0xe8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <SystemInit+0xe8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 030f 	bic.w	r3, r3, #15
 80024d2:	4a21      	ldr	r2, [pc, #132]	; (8002558 <SystemInit+0xe8>)
 80024d4:	f043 0307 	orr.w	r3, r3, #7
 80024d8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <SystemInit+0xec>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <SystemInit+0xec>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <SystemInit+0xec>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <SystemInit+0xec>)
 80024ee:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <SystemInit+0xf4>)
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <SystemInit+0xec>)
 80024f4:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <SystemInit+0xf8>)
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <SystemInit+0xec>)
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <SystemInit+0xfc>)
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <SystemInit+0xec>)
 8002500:	2200      	movs	r2, #0
 8002502:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <SystemInit+0xec>)
 8002506:	4a19      	ldr	r2, [pc, #100]	; (800256c <SystemInit+0xfc>)
 8002508:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <SystemInit+0xec>)
 800250c:	2200      	movs	r2, #0
 800250e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <SystemInit+0xec>)
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <SystemInit+0xfc>)
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <SystemInit+0xec>)
 8002518:	2200      	movs	r2, #0
 800251a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <SystemInit+0xec>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0e      	ldr	r2, [pc, #56]	; (800255c <SystemInit+0xec>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <SystemInit+0xec>)
 800252a:	2200      	movs	r2, #0
 800252c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <SystemInit+0x100>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <SystemInit+0x104>)
 8002534:	4013      	ands	r3, r2
 8002536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253a:	d202      	bcs.n	8002542 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <SystemInit+0x108>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <SystemInit+0x10c>)
 8002544:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002548:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800254a:	bf00      	nop
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00
 8002558:	52002000 	.word	0x52002000
 800255c:	58024400 	.word	0x58024400
 8002560:	eaf6ed7f 	.word	0xeaf6ed7f
 8002564:	02020200 	.word	0x02020200
 8002568:	01ff0000 	.word	0x01ff0000
 800256c:	01010280 	.word	0x01010280
 8002570:	5c001000 	.word	0x5c001000
 8002574:	ffff0000 	.word	0xffff0000
 8002578:	51008108 	.word	0x51008108
 800257c:	52004000 	.word	0x52004000

08002580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002584:	f7ff ff74 	bl	8002470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800258a:	490d      	ldr	r1, [pc, #52]	; (80025c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002590:	e002      	b.n	8002598 <LoopCopyDataInit>

08002592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002596:	3304      	adds	r3, #4

08002598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800259c:	d3f9      	bcc.n	8002592 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025a0:	4c0a      	ldr	r4, [pc, #40]	; (80025cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a4:	e001      	b.n	80025aa <LoopFillZerobss>

080025a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a8:	3204      	adds	r2, #4

080025aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ae:	f010 f843 	bl	8012638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b2:	f7fe f969 	bl	8000888 <main>
  bx  lr
 80025b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025c0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80025c4:	08013400 	.word	0x08013400
  ldr r2, =_sbss
 80025c8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80025cc:	24004f9c 	.word	0x24004f9c

080025d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <ADC3_IRQHandler>
	...

080025d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025da:	2003      	movs	r0, #3
 80025dc:	f001 fd39 	bl	8004052 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025e0:	f005 febc 	bl	800835c <HAL_RCC_GetSysClockFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_Init+0x68>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	4913      	ldr	r1, [pc, #76]	; (8002640 <HAL_Init+0x6c>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
 80025fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_Init+0x68>)
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_Init+0x6c>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
 8002614:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <HAL_Init+0x70>)
 8002616:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_Init+0x74>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800261e:	2005      	movs	r0, #5
 8002620:	f7ff fd60 	bl	80020e4 <HAL_InitTick>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e002      	b.n	8002634 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800262e:	f7ff f97b 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	58024400 	.word	0x58024400
 8002640:	0801334c 	.word	0x0801334c
 8002644:	24000004 	.word	0x24000004
 8002648:	24000000 	.word	0x24000000

0800264c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_IncTick+0x20>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x24>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4413      	add	r3, r2
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_IncTick+0x24>)
 800265e:	6013      	str	r3, [r2, #0]
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	2400000c 	.word	0x2400000c
 8002670:	24000638 	.word	0x24000638

08002674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return uwTick;
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_GetTick+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	24000638 	.word	0x24000638

0800268c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_GetREVID+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0c1b      	lsrs	r3, r3, #16
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	5c001000 	.word	0x5c001000

080026a4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	4904      	ldr	r1, [pc, #16]	; (80026cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	58000400 	.word	0x58000400

080026d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	609a      	str	r2, [r3, #8]
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3360      	adds	r3, #96	; 0x60
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	431a      	orrs	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800276c:	bf00      	nop
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	611a      	str	r2, [r3, #16]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b087      	sub	sp, #28
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3360      	adds	r3, #96	; 0x60
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	601a      	str	r2, [r3, #0]
  }
}
 80027d4:	bf00      	nop
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002806:	b480      	push	{r7}
 8002808:	b087      	sub	sp, #28
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3330      	adds	r3, #48	; 0x30
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	211f      	movs	r1, #31
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	401a      	ands	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 011f 	and.w	r1, r3, #31
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	431a      	orrs	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f023 0203 	bic.w	r2, r3, #3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3314      	adds	r3, #20
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	0e5b      	lsrs	r3, r3, #25
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	4413      	add	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	0d1b      	lsrs	r3, r3, #20
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2107      	movs	r1, #7
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	401a      	ands	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	0d1b      	lsrs	r3, r3, #20
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0318 	and.w	r3, r3, #24
 80028fe:	4908      	ldr	r1, [pc, #32]	; (8002920 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002900:	40d9      	lsrs	r1, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	400b      	ands	r3, r1
 8002906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	000fffff 	.word	0x000fffff

08002924 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 031f 	and.w	r3, r3, #31
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <LL_ADC_DisableDeepPowerDown+0x20>)
 800294e:	4013      	ands	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6093      	str	r3, [r2, #8]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	5fffffc0 	.word	0x5fffffc0

08002964 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002978:	d101      	bne.n	800297e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800299a:	4013      	ands	r3, r2
 800299c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	6fffffc0 	.word	0x6fffffc0

080029b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c8:	d101      	bne.n	80029ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <LL_ADC_Enable+0x24>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	7fffffc0 	.word	0x7fffffc0

08002a04 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <LL_ADC_Disable+0x24>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	f043 0202 	orr.w	r2, r3, #2
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	7fffffc0 	.word	0x7fffffc0

08002a2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <LL_ADC_IsEnabled+0x18>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <LL_ADC_IsEnabled+0x1a>
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d101      	bne.n	8002a6a <LL_ADC_IsDisableOngoing+0x18>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <LL_ADC_IsDisableOngoing+0x1a>
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <LL_ADC_REG_StartConversion+0x24>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	f043 0204 	orr.w	r2, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	7fffffc0 	.word	0x7fffffc0

08002aa0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d101      	bne.n	8002ab8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e18f      	b.n	8002e26 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7fe ff25 	bl	8001964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff19 	bl	8002964 <LL_ADC_IsDeepPowerDownEnabled>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff feff 	bl	8002940 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff34 	bl	80029b4 <LL_ADC_IsInternalRegulatorEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d114      	bne.n	8002b7c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff18 	bl	800298c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b5c:	4b87      	ldr	r3, [pc, #540]	; (8002d7c <HAL_ADC_Init+0x290>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	099b      	lsrs	r3, r3, #6
 8002b62:	4a87      	ldr	r2, [pc, #540]	; (8002d80 <HAL_ADC_Init+0x294>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b6e:	e002      	b.n	8002b76 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f9      	bne.n	8002b70 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff17 	bl	80029b4 <LL_ADC_IsInternalRegulatorEnabled>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10d      	bne.n	8002ba8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	f043 0210 	orr.w	r2, r3, #16
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff77 	bl	8002aa0 <LL_ADC_REG_IsConversionOngoing>
 8002bb2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 8129 	bne.w	8002e14 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 8125 	bne.w	8002e14 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bd2:	f043 0202 	orr.w	r2, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ff24 	bl	8002a2c <LL_ADC_IsEnabled>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d136      	bne.n	8002c58 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a65      	ldr	r2, [pc, #404]	; (8002d84 <HAL_ADC_Init+0x298>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_ADC_Init+0x112>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <HAL_ADC_Init+0x29c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10e      	bne.n	8002c1c <HAL_ADC_Init+0x130>
 8002bfe:	4861      	ldr	r0, [pc, #388]	; (8002d84 <HAL_ADC_Init+0x298>)
 8002c00:	f7ff ff14 	bl	8002a2c <LL_ADC_IsEnabled>
 8002c04:	4604      	mov	r4, r0
 8002c06:	4860      	ldr	r0, [pc, #384]	; (8002d88 <HAL_ADC_Init+0x29c>)
 8002c08:	f7ff ff10 	bl	8002a2c <LL_ADC_IsEnabled>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4323      	orrs	r3, r4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e008      	b.n	8002c2e <HAL_ADC_Init+0x142>
 8002c1c:	485b      	ldr	r0, [pc, #364]	; (8002d8c <HAL_ADC_Init+0x2a0>)
 8002c1e:	f7ff ff05 	bl	8002a2c <LL_ADC_IsEnabled>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d012      	beq.n	8002c58 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a53      	ldr	r2, [pc, #332]	; (8002d84 <HAL_ADC_Init+0x298>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_ADC_Init+0x15a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a51      	ldr	r2, [pc, #324]	; (8002d88 <HAL_ADC_Init+0x29c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_Init+0x15e>
 8002c46:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_ADC_Init+0x2a4>)
 8002c48:	e000      	b.n	8002c4c <HAL_ADC_Init+0x160>
 8002c4a:	4a52      	ldr	r2, [pc, #328]	; (8002d94 <HAL_ADC_Init+0x2a8>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f7ff fd3c 	bl	80026d0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c58:	f7ff fd18 	bl	800268c <HAL_GetREVID>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d914      	bls.n	8002c90 <HAL_ADC_Init+0x1a4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d110      	bne.n	8002c90 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7d5b      	ldrb	r3, [r3, #21]
 8002c72:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c78:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c7e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7f1b      	ldrb	r3, [r3, #28]
 8002c84:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c86:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c88:	f043 030c 	orr.w	r3, r3, #12
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	e00d      	b.n	8002cac <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7d5b      	ldrb	r3, [r3, #21]
 8002c94:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c9a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ca0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7f1b      	ldrb	r3, [r3, #28]
 8002ca6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7f1b      	ldrb	r3, [r3, #28]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d106      	bne.n	8002cc2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	045b      	lsls	r3, r3, #17
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <HAL_ADC_Init+0x2ac>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	69b9      	ldr	r1, [r7, #24]
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fed2 	bl	8002aa0 <LL_ADC_REG_IsConversionOngoing>
 8002cfc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fedf 	bl	8002ac6 <LL_ADC_INJ_IsConversionOngoing>
 8002d08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d15f      	bne.n	8002dd0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d15c      	bne.n	8002dd0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7d1b      	ldrb	r3, [r3, #20]
 8002d1a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_ADC_Init+0x2b0>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	430b      	orrs	r3, r1
 8002d36:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d130      	bne.n	8002da4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_ADC_Init+0x2b4>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d56:	3a01      	subs	r2, #1
 8002d58:	0411      	lsls	r1, r2, #16
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d5e:	4311      	orrs	r1, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d64:	4311      	orrs	r1, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	611a      	str	r2, [r3, #16]
 8002d78:	e01c      	b.n	8002db4 <HAL_ADC_Init+0x2c8>
 8002d7a:	bf00      	nop
 8002d7c:	24000000 	.word	0x24000000
 8002d80:	053e2d63 	.word	0x053e2d63
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40022100 	.word	0x40022100
 8002d8c:	58026000 	.word	0x58026000
 8002d90:	40022300 	.word	0x40022300
 8002d94:	58026300 	.word	0x58026300
 8002d98:	fff0c003 	.word	0xfff0c003
 8002d9c:	ffffbffc 	.word	0xffffbffc
 8002da0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fdec 	bl	80039a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10c      	bne.n	8002df2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f023 010f 	bic.w	r1, r3, #15
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	1e5a      	subs	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
 8002df0:	e007      	b.n	8002e02 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 020f 	bic.w	r2, r2, #15
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
 8002e12:	e007      	b.n	8002e24 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e18:	f043 0210 	orr.w	r2, r3, #16
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	; 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd90      	pop	{r4, r7, pc}
 8002e2e:	bf00      	nop

08002e30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a55      	ldr	r2, [pc, #340]	; (8002f98 <HAL_ADC_Start_DMA+0x168>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_ADC_Start_DMA+0x20>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a54      	ldr	r2, [pc, #336]	; (8002f9c <HAL_ADC_Start_DMA+0x16c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_Start_DMA+0x24>
 8002e50:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <HAL_ADC_Start_DMA+0x170>)
 8002e52:	e000      	b.n	8002e56 <HAL_ADC_Start_DMA+0x26>
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_ADC_Start_DMA+0x174>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fd64 	bl	8002924 <LL_ADC_GetMultimode>
 8002e5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fe1c 	bl	8002aa0 <LL_ADC_REG_IsConversionOngoing>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 808c 	bne.w	8002f88 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Start_DMA+0x4e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e087      	b.n	8002f8e <HAL_ADC_Start_DMA+0x15e>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d002      	beq.n	8002e98 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d170      	bne.n	8002f7a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fc07 	bl	80036ac <ADC_Enable>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d163      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eac:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <HAL_ADC_Start_DMA+0x178>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a37      	ldr	r2, [pc, #220]	; (8002f9c <HAL_ADC_Start_DMA+0x16c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d002      	beq.n	8002ec8 <HAL_ADC_Start_DMA+0x98>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_Start_DMA+0x9a>
 8002ec8:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_ADC_Start_DMA+0x168>)
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d002      	beq.n	8002ed8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	f023 0206 	bic.w	r2, r3, #6
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	659a      	str	r2, [r3, #88]	; 0x58
 8002efc:	e002      	b.n	8002f04 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	4a28      	ldr	r2, [pc, #160]	; (8002fac <HAL_ADC_Start_DMA+0x17c>)
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <HAL_ADC_Start_DMA+0x180>)
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <HAL_ADC_Start_DMA+0x184>)
 8002f1a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	221c      	movs	r2, #28
 8002f22:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0210 	orr.w	r2, r2, #16
 8002f3a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7ff fc89 	bl	800285e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3340      	adds	r3, #64	; 0x40
 8002f56:	4619      	mov	r1, r3
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f001 fdd6 	bl	8004b0c <HAL_DMA_Start_IT>
 8002f60:	4603      	mov	r3, r0
 8002f62:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fd85 	bl	8002a78 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f6e:	e00d      	b.n	8002f8c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002f78:	e008      	b.n	8002f8c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f86:	e001      	b.n	8002f8c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40022000 	.word	0x40022000
 8002f9c:	40022100 	.word	0x40022100
 8002fa0:	40022300 	.word	0x40022300
 8002fa4:	58026300 	.word	0x58026300
 8002fa8:	fffff0fe 	.word	0xfffff0fe
 8002fac:	0800387f 	.word	0x0800387f
 8002fb0:	08003957 	.word	0x08003957
 8002fb4:	08003973 	.word	0x08003973

08002fb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b0a1      	sub	sp, #132	; 0x84
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_ADC_ConfigChannel+0x1b0>)
 800300e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_ADC_ConfigChannel+0x2a>
 800301a:	2302      	movs	r3, #2
 800301c:	e32e      	b.n	800367c <HAL_ADC_ConfigChannel+0x688>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fd38 	bl	8002aa0 <LL_ADC_REG_IsConversionOngoing>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 8313 	bne.w	800365e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db2c      	blt.n	800309a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003048:	2b00      	cmp	r3, #0
 800304a:	d108      	bne.n	800305e <HAL_ADC_ConfigChannel+0x6a>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2201      	movs	r2, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	e016      	b.n	800308c <HAL_ADC_ConfigChannel+0x98>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800306c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800306e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003076:	2320      	movs	r3, #32
 8003078:	e003      	b.n	8003082 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800307a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2201      	movs	r2, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	69d1      	ldr	r1, [r2, #28]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	430b      	orrs	r3, r1
 8003098:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f7ff fbad 	bl	8002806 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fcf5 	bl	8002aa0 <LL_ADC_REG_IsConversionOngoing>
 80030b6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fd02 	bl	8002ac6 <LL_ADC_INJ_IsConversionOngoing>
 80030c2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 80b8 	bne.w	800323c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 80b4 	bne.w	800323c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	461a      	mov	r2, r3
 80030e2:	f7ff fbcf 	bl	8002884 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_ADC_ConfigChannel+0x1b4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f2:	d10b      	bne.n	800310c <HAL_ADC_ConfigChannel+0x118>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	e01d      	b.n	8003148 <HAL_ADC_ConfigChannel+0x154>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x13e>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	e00a      	b.n	8003148 <HAL_ADC_ConfigChannel+0x154>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695a      	ldr	r2, [r3, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d02c      	beq.n	80031ac <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6919      	ldr	r1, [r3, #16]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003160:	f7ff faea 	bl	8002738 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6919      	ldr	r1, [r3, #16]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	7e5b      	ldrb	r3, [r3, #25]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <HAL_ADC_ConfigChannel+0x186>
 8003174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003178:	e000      	b.n	800317c <HAL_ADC_ConfigChannel+0x188>
 800317a:	2300      	movs	r3, #0
 800317c:	461a      	mov	r2, r3
 800317e:	f7ff fb14 	bl	80027aa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6919      	ldr	r1, [r3, #16]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	7e1b      	ldrb	r3, [r3, #24]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d102      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1a4>
 8003192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003196:	e000      	b.n	800319a <HAL_ADC_ConfigChannel+0x1a6>
 8003198:	2300      	movs	r3, #0
 800319a:	461a      	mov	r2, r3
 800319c:	f7ff faec 	bl	8002778 <LL_ADC_SetDataRightShift>
 80031a0:	e04c      	b.n	800323c <HAL_ADC_ConfigChannel+0x248>
 80031a2:	bf00      	nop
 80031a4:	47ff0000 	.word	0x47ff0000
 80031a8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	429a      	cmp	r2, r3
 80031be:	d107      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031ce:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	069b      	lsls	r3, r3, #26
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d107      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031f2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	069b      	lsls	r3, r3, #26
 8003204:	429a      	cmp	r2, r3
 8003206:	d107      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003216:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	069b      	lsls	r3, r3, #26
 8003228:	429a      	cmp	r2, r3
 800322a:	d107      	bne.n	800323c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800323a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fbf3 	bl	8002a2c <LL_ADC_IsEnabled>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 8211 	bne.w	8003670 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	461a      	mov	r2, r3
 800325c:	f7ff fb3e 	bl	80028dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4aa1      	ldr	r2, [pc, #644]	; (80034ec <HAL_ADC_ConfigChannel+0x4f8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	f040 812e 	bne.w	80034c8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x2a0>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	3301      	adds	r3, #1
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2b09      	cmp	r3, #9
 800328a:	bf94      	ite	ls
 800328c:	2301      	movls	r3, #1
 800328e:	2300      	movhi	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e019      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x2d4>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80032a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80032a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80032ac:	2320      	movs	r3, #32
 80032ae:	e003      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80032b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	3301      	adds	r3, #1
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	2b09      	cmp	r3, #9
 80032c0:	bf94      	ite	ls
 80032c2:	2301      	movls	r3, #1
 80032c4:	2300      	movhi	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d079      	beq.n	80033c0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x2f4>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	3301      	adds	r3, #1
 80032e0:	069b      	lsls	r3, r3, #26
 80032e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032e6:	e015      	b.n	8003314 <HAL_ADC_ConfigChannel+0x320>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f0:	fa93 f3a3 	rbit	r3, r3
 80032f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003300:	2320      	movs	r3, #32
 8003302:	e003      	b.n	800330c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	069b      	lsls	r3, r3, #26
 8003310:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x340>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	0e9b      	lsrs	r3, r3, #26
 8003326:	3301      	adds	r3, #1
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	e017      	b.n	8003364 <HAL_ADC_ConfigChannel+0x370>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003344:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e003      	b.n	8003358 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	ea42 0103 	orr.w	r1, r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <HAL_ADC_ConfigChannel+0x396>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	3301      	adds	r3, #1
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	051b      	lsls	r3, r3, #20
 8003388:	e018      	b.n	80033bc <HAL_ADC_ConfigChannel+0x3c8>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80033a2:	2320      	movs	r3, #32
 80033a4:	e003      	b.n	80033ae <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033bc:	430b      	orrs	r3, r1
 80033be:	e07e      	b.n	80034be <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d107      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x3e8>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	3301      	adds	r3, #1
 80033d4:	069b      	lsls	r3, r3, #26
 80033d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033da:	e015      	b.n	8003408 <HAL_ADC_ConfigChannel+0x414>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80033f4:	2320      	movs	r3, #32
 80033f6:	e003      	b.n	8003400 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	069b      	lsls	r3, r3, #26
 8003404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x434>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	e017      	b.n	8003458 <HAL_ADC_ConfigChannel+0x464>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	61bb      	str	r3, [r7, #24]
  return result;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003440:	2320      	movs	r3, #32
 8003442:	e003      	b.n	800344c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f303 	lsl.w	r3, r1, r3
 8003458:	ea42 0103 	orr.w	r1, r2, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10d      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x490>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	3301      	adds	r3, #1
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	3b1e      	subs	r3, #30
 800347c:	051b      	lsls	r3, r3, #20
 800347e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003482:	e01b      	b.n	80034bc <HAL_ADC_ConfigChannel+0x4c8>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	60fb      	str	r3, [r7, #12]
  return result;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800349c:	2320      	movs	r3, #32
 800349e:	e003      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f003 021f 	and.w	r2, r3, #31
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	3b1e      	subs	r3, #30
 80034b6:	051b      	lsls	r3, r3, #20
 80034b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034bc:	430b      	orrs	r3, r1
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	6892      	ldr	r2, [r2, #8]
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7ff f9de 	bl	8002884 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f280 80cf 	bge.w	8003670 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a06      	ldr	r2, [pc, #24]	; (80034f0 <HAL_ADC_ConfigChannel+0x4fc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_ADC_ConfigChannel+0x4f2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <HAL_ADC_ConfigChannel+0x500>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10a      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x508>
 80034e6:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <HAL_ADC_ConfigChannel+0x504>)
 80034e8:	e009      	b.n	80034fe <HAL_ADC_ConfigChannel+0x50a>
 80034ea:	bf00      	nop
 80034ec:	47ff0000 	.word	0x47ff0000
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40022100 	.word	0x40022100
 80034f8:	40022300 	.word	0x40022300
 80034fc:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_ADC_ConfigChannel+0x690>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f90c 	bl	800271c <LL_ADC_GetCommonPathInternalCh>
 8003504:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a5f      	ldr	r2, [pc, #380]	; (8003688 <HAL_ADC_ConfigChannel+0x694>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <HAL_ADC_ConfigChannel+0x526>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5d      	ldr	r2, [pc, #372]	; (800368c <HAL_ADC_ConfigChannel+0x698>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10e      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x544>
 800351a:	485b      	ldr	r0, [pc, #364]	; (8003688 <HAL_ADC_ConfigChannel+0x694>)
 800351c:	f7ff fa86 	bl	8002a2c <LL_ADC_IsEnabled>
 8003520:	4604      	mov	r4, r0
 8003522:	485a      	ldr	r0, [pc, #360]	; (800368c <HAL_ADC_ConfigChannel+0x698>)
 8003524:	f7ff fa82 	bl	8002a2c <LL_ADC_IsEnabled>
 8003528:	4603      	mov	r3, r0
 800352a:	4323      	orrs	r3, r4
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e008      	b.n	800354a <HAL_ADC_ConfigChannel+0x556>
 8003538:	4855      	ldr	r0, [pc, #340]	; (8003690 <HAL_ADC_ConfigChannel+0x69c>)
 800353a:	f7ff fa77 	bl	8002a2c <LL_ADC_IsEnabled>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d07d      	beq.n	800364a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a50      	ldr	r2, [pc, #320]	; (8003694 <HAL_ADC_ConfigChannel+0x6a0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d130      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x5c6>
 8003558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d12b      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4a      	ldr	r2, [pc, #296]	; (8003690 <HAL_ADC_ConfigChannel+0x69c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f040 8081 	bne.w	8003670 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a45      	ldr	r2, [pc, #276]	; (8003688 <HAL_ADC_ConfigChannel+0x694>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_ADC_ConfigChannel+0x58e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a43      	ldr	r2, [pc, #268]	; (800368c <HAL_ADC_ConfigChannel+0x698>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x592>
 8003582:	4a45      	ldr	r2, [pc, #276]	; (8003698 <HAL_ADC_ConfigChannel+0x6a4>)
 8003584:	e000      	b.n	8003588 <HAL_ADC_ConfigChannel+0x594>
 8003586:	4a3f      	ldr	r2, [pc, #252]	; (8003684 <HAL_ADC_ConfigChannel+0x690>)
 8003588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7ff f8b0 	bl	80026f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003596:	4b41      	ldr	r3, [pc, #260]	; (800369c <HAL_ADC_ConfigChannel+0x6a8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	4a40      	ldr	r2, [pc, #256]	; (80036a0 <HAL_ADC_ConfigChannel+0x6ac>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	3301      	adds	r3, #1
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035aa:	e002      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f9      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b8:	e05a      	b.n	8003670 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <HAL_ADC_ConfigChannel+0x6b0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d11e      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x60e>
 80035c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d119      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <HAL_ADC_ConfigChannel+0x69c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d14b      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a2a      	ldr	r2, [pc, #168]	; (8003688 <HAL_ADC_ConfigChannel+0x694>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x5f8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a29      	ldr	r2, [pc, #164]	; (800368c <HAL_ADC_ConfigChannel+0x698>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x5fc>
 80035ec:	4a2a      	ldr	r2, [pc, #168]	; (8003698 <HAL_ADC_ConfigChannel+0x6a4>)
 80035ee:	e000      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x5fe>
 80035f0:	4a24      	ldr	r2, [pc, #144]	; (8003684 <HAL_ADC_ConfigChannel+0x690>)
 80035f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f7ff f87b 	bl	80026f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003600:	e036      	b.n	8003670 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a28      	ldr	r2, [pc, #160]	; (80036a8 <HAL_ADC_ConfigChannel+0x6b4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d131      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x67c>
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d12c      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <HAL_ADC_ConfigChannel+0x69c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d127      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_ADC_ConfigChannel+0x694>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_ADC_ConfigChannel+0x640>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <HAL_ADC_ConfigChannel+0x698>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x644>
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_ADC_ConfigChannel+0x6a4>)
 8003636:	e000      	b.n	800363a <HAL_ADC_ConfigChannel+0x646>
 8003638:	4a12      	ldr	r2, [pc, #72]	; (8003684 <HAL_ADC_ConfigChannel+0x690>)
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f7ff f857 	bl	80026f6 <LL_ADC_SetCommonPathInternalCh>
 8003648:	e012      	b.n	8003670 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800365c:	e008      	b.n	8003670 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003678:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800367c:	4618      	mov	r0, r3
 800367e:	3784      	adds	r7, #132	; 0x84
 8003680:	46bd      	mov	sp, r7
 8003682:	bd90      	pop	{r4, r7, pc}
 8003684:	58026300 	.word	0x58026300
 8003688:	40022000 	.word	0x40022000
 800368c:	40022100 	.word	0x40022100
 8003690:	58026000 	.word	0x58026000
 8003694:	cb840000 	.word	0xcb840000
 8003698:	40022300 	.word	0x40022300
 800369c:	24000000 	.word	0x24000000
 80036a0:	053e2d63 	.word	0x053e2d63
 80036a4:	c7520000 	.word	0xc7520000
 80036a8:	cfb80000 	.word	0xcfb80000

080036ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff f9b7 	bl	8002a2c <LL_ADC_IsEnabled>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d16e      	bne.n	80037a2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	4b38      	ldr	r3, [pc, #224]	; (80037ac <ADC_Enable+0x100>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e05a      	b.n	80037a4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f972 	bl	80029dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036f8:	f7fe ffbc 	bl	8002674 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <ADC_Enable+0x104>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <ADC_Enable+0x66>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <ADC_Enable+0x108>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <ADC_Enable+0x6a>
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <ADC_Enable+0x10c>)
 8003714:	e000      	b.n	8003718 <ADC_Enable+0x6c>
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <ADC_Enable+0x110>)
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f903 	bl	8002924 <LL_ADC_GetMultimode>
 800371e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <ADC_Enable+0x108>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d002      	beq.n	8003730 <ADC_Enable+0x84>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	e000      	b.n	8003732 <ADC_Enable+0x86>
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <ADC_Enable+0x104>)
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	4293      	cmp	r3, r2
 8003738:	d02c      	beq.n	8003794 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d130      	bne.n	80037a2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003740:	e028      	b.n	8003794 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff f970 	bl	8002a2c <LL_ADC_IsEnabled>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff f940 	bl	80029dc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800375c:	f7fe ff8a 	bl	8002674 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d914      	bls.n	8003794 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d00d      	beq.n	8003794 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	f043 0210 	orr.w	r2, r3, #16
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	f043 0201 	orr.w	r2, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e007      	b.n	80037a4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d1cf      	bne.n	8003742 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	8000003f 	.word	0x8000003f
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40022100 	.word	0x40022100
 80037b8:	40022300 	.word	0x40022300
 80037bc:	58026300 	.word	0x58026300

080037c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f940 	bl	8002a52 <LL_ADC_IsDisableOngoing>
 80037d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff f927 	bl	8002a2c <LL_ADC_IsEnabled>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d047      	beq.n	8003874 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d144      	bne.n	8003874 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 030d 	and.w	r3, r3, #13
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d10c      	bne.n	8003812 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff f901 	bl	8002a04 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2203      	movs	r2, #3
 8003808:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800380a:	f7fe ff33 	bl	8002674 <HAL_GetTick>
 800380e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003810:	e029      	b.n	8003866 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0210 	orr.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e023      	b.n	8003876 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800382e:	f7fe ff21 	bl	8002674 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d914      	bls.n	8003866 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00d      	beq.n	8003866 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f043 0210 	orr.w	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e007      	b.n	8003876 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1dc      	bne.n	800382e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003894:	2b00      	cmp	r3, #0
 8003896:	d14b      	bne.n	8003930 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d021      	beq.n	80038f6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe ff92 	bl	80027e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d032      	beq.n	8003928 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d12b      	bne.n	8003928 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d11f      	bne.n	8003928 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f043 0201 	orr.w	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
 80038f4:	e018      	b.n	8003928 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d111      	bne.n	8003928 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff fb45 	bl	8002fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800392e:	e00e      	b.n	800394e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f7ff fb4f 	bl	8002fe0 <HAL_ADC_ErrorCallback>
}
 8003942:	e004      	b.n	800394e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fb31 	bl	8002fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fb21 	bl	8002fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a7a      	ldr	r2, [pc, #488]	; (8003ba0 <ADC_ConfigureBoostMode+0x1f8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <ADC_ConfigureBoostMode+0x1c>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a79      	ldr	r2, [pc, #484]	; (8003ba4 <ADC_ConfigureBoostMode+0x1fc>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d109      	bne.n	80039d8 <ADC_ConfigureBoostMode+0x30>
 80039c4:	4b78      	ldr	r3, [pc, #480]	; (8003ba8 <ADC_ConfigureBoostMode+0x200>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e008      	b.n	80039ea <ADC_ConfigureBoostMode+0x42>
 80039d8:	4b74      	ldr	r3, [pc, #464]	; (8003bac <ADC_ConfigureBoostMode+0x204>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf14      	ite	ne
 80039e4:	2301      	movne	r3, #1
 80039e6:	2300      	moveq	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039ee:	f004 fe2f 	bl	8008650 <HAL_RCC_GetHCLKFreq>
 80039f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039fc:	d010      	beq.n	8003a20 <ADC_ConfigureBoostMode+0x78>
 80039fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a02:	d873      	bhi.n	8003aec <ADC_ConfigureBoostMode+0x144>
 8003a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a08:	d002      	beq.n	8003a10 <ADC_ConfigureBoostMode+0x68>
 8003a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a0e:	d16d      	bne.n	8003aec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	60fb      	str	r3, [r7, #12]
        break;
 8003a1e:	e068      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	60fb      	str	r3, [r7, #12]
        break;
 8003a26:	e064      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003a28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	f006 f8b6 	bl	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a34:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a3e:	d051      	beq.n	8003ae4 <ADC_ConfigureBoostMode+0x13c>
 8003a40:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a44:	d854      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003a46:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a4a:	d047      	beq.n	8003adc <ADC_ConfigureBoostMode+0x134>
 8003a4c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a50:	d84e      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003a52:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a56:	d03d      	beq.n	8003ad4 <ADC_ConfigureBoostMode+0x12c>
 8003a58:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a5c:	d848      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a62:	d033      	beq.n	8003acc <ADC_ConfigureBoostMode+0x124>
 8003a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a68:	d842      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003a6a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a6e:	d029      	beq.n	8003ac4 <ADC_ConfigureBoostMode+0x11c>
 8003a70:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a74:	d83c      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003a76:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a7a:	d01a      	beq.n	8003ab2 <ADC_ConfigureBoostMode+0x10a>
 8003a7c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a80:	d836      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003a82:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a86:	d014      	beq.n	8003ab2 <ADC_ConfigureBoostMode+0x10a>
 8003a88:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a8c:	d830      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a92:	d00e      	beq.n	8003ab2 <ADC_ConfigureBoostMode+0x10a>
 8003a94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a98:	d82a      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003a9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a9e:	d008      	beq.n	8003ab2 <ADC_ConfigureBoostMode+0x10a>
 8003aa0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003aa4:	d824      	bhi.n	8003af0 <ADC_ConfigureBoostMode+0x148>
 8003aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aaa:	d002      	beq.n	8003ab2 <ADC_ConfigureBoostMode+0x10a>
 8003aac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ab0:	d11e      	bne.n	8003af0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	0c9b      	lsrs	r3, r3, #18
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
        break;
 8003ac2:	e016      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	60fb      	str	r3, [r7, #12]
        break;
 8003aca:	e012      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	60fb      	str	r3, [r7, #12]
        break;
 8003ad2:	e00e      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	60fb      	str	r3, [r7, #12]
        break;
 8003ada:	e00a      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	09db      	lsrs	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
        break;
 8003ae2:	e006      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	60fb      	str	r3, [r7, #12]
        break;
 8003aea:	e002      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003af0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003af2:	f7fe fdcb 	bl	800268c <HAL_GetREVID>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f241 0203 	movw	r2, #4099	; 0x1003
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d815      	bhi.n	8003b2c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a2b      	ldr	r2, [pc, #172]	; (8003bb0 <ADC_ConfigureBoostMode+0x208>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d908      	bls.n	8003b1a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b16:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003b18:	e03e      	b.n	8003b98 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b28:	609a      	str	r2, [r3, #8]
}
 8003b2a:	e035      	b.n	8003b98 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <ADC_ConfigureBoostMode+0x20c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d808      	bhi.n	8003b4c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	e025      	b.n	8003b98 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a1a      	ldr	r2, [pc, #104]	; (8003bb8 <ADC_ConfigureBoostMode+0x210>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d80a      	bhi.n	8003b6a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b66:	609a      	str	r2, [r3, #8]
}
 8003b68:	e016      	b.n	8003b98 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <ADC_ConfigureBoostMode+0x214>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d80a      	bhi.n	8003b88 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b84:	609a      	str	r2, [r3, #8]
}
 8003b86:	e007      	b.n	8003b98 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b96:	609a      	str	r2, [r3, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40022000 	.word	0x40022000
 8003ba4:	40022100 	.word	0x40022100
 8003ba8:	40022300 	.word	0x40022300
 8003bac:	58026300 	.word	0x58026300
 8003bb0:	01312d00 	.word	0x01312d00
 8003bb4:	005f5e10 	.word	0x005f5e10
 8003bb8:	00bebc20 	.word	0x00bebc20
 8003bbc:	017d7840 	.word	0x017d7840

08003bc0 <LL_ADC_IsEnabled>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <LL_ADC_IsEnabled+0x18>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <LL_ADC_IsEnabled+0x1a>
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <LL_ADC_StartCalibration>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <LL_ADC_StartCalibration+0x38>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	3ffeffc0 	.word	0x3ffeffc0

08003c24 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_REG_IsConversionOngoing>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d101      	bne.n	8003c64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADCEx_Calibration_Start+0x1e>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e04c      	b.n	8003d2c <HAL_ADCEx_Calibration_Start+0xb8>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff fd90 	bl	80037c0 <ADC_Disable>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d135      	bne.n	8003d16 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cae:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	f043 0202 	orr.w	r2, r3, #2
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff90 	bl	8003be8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cc8:	e014      	b.n	8003cf4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d30d      	bcc.n	8003cf4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	f023 0312 	bic.w	r3, r3, #18
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e01b      	b.n	8003d2c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff93 	bl	8003c24 <LL_ADC_IsCalibrationOnGoing>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e2      	bne.n	8003cca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	f023 0303 	bic.w	r3, r3, #3
 8003d0c:	f043 0201 	orr.w	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
 8003d14:	e005      	b.n	8003d22 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	f043 0210 	orr.w	r2, r3, #16
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	ffffeefd 	.word	0xffffeefd
 8003d38:	25c3f800 	.word	0x25c3f800

08003d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b09f      	sub	sp, #124	; 0x7c
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0be      	b.n	8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d62:	2300      	movs	r3, #0
 8003d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a5c      	ldr	r2, [pc, #368]	; (8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d102      	bne.n	8003d7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d74:	4b5b      	ldr	r3, [pc, #364]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	e001      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e09d      	b.n	8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff54 	bl	8003c4c <LL_ADC_REG_IsConversionOngoing>
 8003da4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff4e 	bl	8003c4c <LL_ADC_REG_IsConversionOngoing>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d17f      	bne.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d17c      	bne.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a47      	ldr	r2, [pc, #284]	; (8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a46      	ldr	r2, [pc, #280]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003dd0:	4b45      	ldr	r3, [pc, #276]	; (8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dd2:	e000      	b.n	8003dd6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003dd4:	4b45      	ldr	r3, [pc, #276]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003dd6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d039      	beq.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a3a      	ldr	r2, [pc, #232]	; (8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10e      	bne.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e06:	4836      	ldr	r0, [pc, #216]	; (8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e08:	f7ff feda 	bl	8003bc0 <LL_ADC_IsEnabled>
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	4835      	ldr	r0, [pc, #212]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e10:	f7ff fed6 	bl	8003bc0 <LL_ADC_IsEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4323      	orrs	r3, r4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e008      	b.n	8003e36 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003e24:	4832      	ldr	r0, [pc, #200]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e26:	f7ff fecb 	bl	8003bc0 <LL_ADC_IsEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d047      	beq.n	8003eca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	6811      	ldr	r1, [r2, #0]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	6892      	ldr	r2, [r2, #8]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e52:	e03a      	b.n	8003eca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10e      	bne.n	8003e92 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e74:	481a      	ldr	r0, [pc, #104]	; (8003ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e76:	f7ff fea3 	bl	8003bc0 <LL_ADC_IsEnabled>
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4819      	ldr	r0, [pc, #100]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e7e:	f7ff fe9f 	bl	8003bc0 <LL_ADC_IsEnabled>
 8003e82:	4603      	mov	r3, r0
 8003e84:	4323      	orrs	r3, r4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e008      	b.n	8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e92:	4817      	ldr	r0, [pc, #92]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e94:	f7ff fe94 	bl	8003bc0 <LL_ADC_IsEnabled>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d010      	beq.n	8003eca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eb2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eb4:	e009      	b.n	8003eca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	f043 0220 	orr.w	r2, r3, #32
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ec8:	e000      	b.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ed4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	377c      	adds	r7, #124	; 0x7c
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd90      	pop	{r4, r7, pc}
 8003ee0:	40022000 	.word	0x40022000
 8003ee4:	40022100 	.word	0x40022100
 8003ee8:	40022300 	.word	0x40022300
 8003eec:	58026300 	.word	0x58026300
 8003ef0:	58026000 	.word	0x58026000
 8003ef4:	fffff0e0 	.word	0xfffff0e0

08003ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <__NVIC_SetPriorityGrouping+0x40>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f14:	4013      	ands	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <__NVIC_SetPriorityGrouping+0x44>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f26:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <__NVIC_SetPriorityGrouping+0x40>)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	60d3      	str	r3, [r2, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00
 8003f3c:	05fa0000 	.word	0x05fa0000

08003f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <__NVIC_GetPriorityGrouping+0x18>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	f003 0307 	and.w	r3, r3, #7
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	db0b      	blt.n	8003f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	4907      	ldr	r1, [pc, #28]	; (8003f94 <__NVIC_EnableIRQ+0x38>)
 8003f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	e000e100 	.word	0xe000e100

08003f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	db0a      	blt.n	8003fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	490c      	ldr	r1, [pc, #48]	; (8003fe4 <__NVIC_SetPriority+0x4c>)
 8003fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fb6:	0112      	lsls	r2, r2, #4
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fc0:	e00a      	b.n	8003fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4908      	ldr	r1, [pc, #32]	; (8003fe8 <__NVIC_SetPriority+0x50>)
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	3b04      	subs	r3, #4
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	761a      	strb	r2, [r3, #24]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000e100 	.word	0xe000e100
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	; 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f1c3 0307 	rsb	r3, r3, #7
 8004006:	2b04      	cmp	r3, #4
 8004008:	bf28      	it	cs
 800400a:	2304      	movcs	r3, #4
 800400c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3304      	adds	r3, #4
 8004012:	2b06      	cmp	r3, #6
 8004014:	d902      	bls.n	800401c <NVIC_EncodePriority+0x30>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	3b03      	subs	r3, #3
 800401a:	e000      	b.n	800401e <NVIC_EncodePriority+0x32>
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43da      	mvns	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	401a      	ands	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43d9      	mvns	r1, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004044:	4313      	orrs	r3, r2
         );
}
 8004046:	4618      	mov	r0, r3
 8004048:	3724      	adds	r7, #36	; 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff4c 	bl	8003ef8 <__NVIC_SetPriorityGrouping>
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004076:	f7ff ff63 	bl	8003f40 <__NVIC_GetPriorityGrouping>
 800407a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	6978      	ldr	r0, [r7, #20]
 8004082:	f7ff ffb3 	bl	8003fec <NVIC_EncodePriority>
 8004086:	4602      	mov	r2, r0
 8004088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff82 	bl	8003f98 <__NVIC_SetPriority>
}
 8004094:	bf00      	nop
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff56 	bl	8003f5c <__NVIC_EnableIRQ>
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e014      	b.n	80040f4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	791b      	ldrb	r3, [r3, #4]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fd fd5c 	bl	8001b98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01d      	beq.n	800415a <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d018      	beq.n	800415a <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2204      	movs	r2, #4
 800412c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f043 0201 	orr.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004142:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004152:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f827 	bl	80041a8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01d      	beq.n	80041a0 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2204      	movs	r2, #4
 8004172:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f043 0202 	orr.w	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004188:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004198:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f950 	bl	8004440 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_DAC_ConfigChannel+0x1e>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e12a      	b.n	8004434 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	795b      	ldrb	r3, [r3, #5]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_DAC_ConfigChannel+0x2e>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e124      	b.n	8004434 <HAL_DAC_ConfigChannel+0x278>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2202      	movs	r2, #2
 80041f4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d17a      	bne.n	80042f4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80041fe:	f7fe fa39 	bl	8002674 <HAL_GetTick>
 8004202:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d13d      	bne.n	8004286 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800420a:	e018      	b.n	800423e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800420c:	f7fe fa32 	bl	8002674 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d911      	bls.n	800423e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004220:	4b86      	ldr	r3, [pc, #536]	; (800443c <HAL_DAC_ConfigChannel+0x280>)
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f043 0208 	orr.w	r2, r3, #8
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2203      	movs	r2, #3
 8004238:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0fa      	b.n	8004434 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004244:	4b7d      	ldr	r3, [pc, #500]	; (800443c <HAL_DAC_ConfigChannel+0x280>)
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1df      	bne.n	800420c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	6992      	ldr	r2, [r2, #24]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
 8004256:	e020      	b.n	800429a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004258:	f7fe fa0c 	bl	8002674 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d90f      	bls.n	8004286 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426c:	2b00      	cmp	r3, #0
 800426e:	da0a      	bge.n	8004286 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f043 0208 	orr.w	r2, r3, #8
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2203      	movs	r2, #3
 8004280:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0d6      	b.n	8004434 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	2b00      	cmp	r3, #0
 800428e:	dbe3      	blt.n	8004258 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	6992      	ldr	r2, [r2, #24]
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80042aa:	fa01 f303 	lsl.w	r3, r1, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	ea02 0103 	and.w	r1, r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	409a      	lsls	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	21ff      	movs	r1, #255	; 0xff
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	ea02 0103 	and.w	r1, r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	6a1a      	ldr	r2, [r3, #32]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	409a      	lsls	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d11d      	bne.n	8004338 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f003 0310 	and.w	r3, r3, #16
 800430a:	221f      	movs	r2, #31
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2207      	movs	r2, #7
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
 8004360:	e00f      	b.n	8004382 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d102      	bne.n	8004370 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800436a:	2301      	movs	r3, #1
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	e008      	b.n	8004382 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d102      	bne.n	800437e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004378:	2301      	movs	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	e001      	b.n	8004382 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800437e:	2300      	movs	r3, #0
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	4313      	orrs	r3, r2
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43da      	mvns	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	400a      	ands	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6819      	ldr	r1, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	22c0      	movs	r2, #192	; 0xc0
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43da      	mvns	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	400a      	ands	r2, r1
 8004422:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004434:	4618      	mov	r0, r3
 8004436:	3728      	adds	r7, #40	; 0x28
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20008000 	.word	0x20008000

08004440 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800445c:	f7fe f90a 	bl	8002674 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e316      	b.n	8004a9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a66      	ldr	r2, [pc, #408]	; (800460c <HAL_DMA_Init+0x1b8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d04a      	beq.n	800450c <HAL_DMA_Init+0xb8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a65      	ldr	r2, [pc, #404]	; (8004610 <HAL_DMA_Init+0x1bc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d045      	beq.n	800450c <HAL_DMA_Init+0xb8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a63      	ldr	r2, [pc, #396]	; (8004614 <HAL_DMA_Init+0x1c0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d040      	beq.n	800450c <HAL_DMA_Init+0xb8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a62      	ldr	r2, [pc, #392]	; (8004618 <HAL_DMA_Init+0x1c4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d03b      	beq.n	800450c <HAL_DMA_Init+0xb8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a60      	ldr	r2, [pc, #384]	; (800461c <HAL_DMA_Init+0x1c8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d036      	beq.n	800450c <HAL_DMA_Init+0xb8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a5f      	ldr	r2, [pc, #380]	; (8004620 <HAL_DMA_Init+0x1cc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d031      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a5d      	ldr	r2, [pc, #372]	; (8004624 <HAL_DMA_Init+0x1d0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d02c      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a5c      	ldr	r2, [pc, #368]	; (8004628 <HAL_DMA_Init+0x1d4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d027      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a5a      	ldr	r2, [pc, #360]	; (800462c <HAL_DMA_Init+0x1d8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d022      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a59      	ldr	r2, [pc, #356]	; (8004630 <HAL_DMA_Init+0x1dc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d01d      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a57      	ldr	r2, [pc, #348]	; (8004634 <HAL_DMA_Init+0x1e0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d018      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a56      	ldr	r2, [pc, #344]	; (8004638 <HAL_DMA_Init+0x1e4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a54      	ldr	r2, [pc, #336]	; (800463c <HAL_DMA_Init+0x1e8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00e      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a53      	ldr	r2, [pc, #332]	; (8004640 <HAL_DMA_Init+0x1ec>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d009      	beq.n	800450c <HAL_DMA_Init+0xb8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a51      	ldr	r2, [pc, #324]	; (8004644 <HAL_DMA_Init+0x1f0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_DMA_Init+0xb8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a50      	ldr	r2, [pc, #320]	; (8004648 <HAL_DMA_Init+0x1f4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_DMA_Init+0xbc>
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_DMA_Init+0xbe>
 8004510:	2300      	movs	r3, #0
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 813b 	beq.w	800478e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a37      	ldr	r2, [pc, #220]	; (800460c <HAL_DMA_Init+0x1b8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d04a      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a36      	ldr	r2, [pc, #216]	; (8004610 <HAL_DMA_Init+0x1bc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d045      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a34      	ldr	r2, [pc, #208]	; (8004614 <HAL_DMA_Init+0x1c0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d040      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a33      	ldr	r2, [pc, #204]	; (8004618 <HAL_DMA_Init+0x1c4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d03b      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a31      	ldr	r2, [pc, #196]	; (800461c <HAL_DMA_Init+0x1c8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d036      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a30      	ldr	r2, [pc, #192]	; (8004620 <HAL_DMA_Init+0x1cc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d031      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2e      	ldr	r2, [pc, #184]	; (8004624 <HAL_DMA_Init+0x1d0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d02c      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <HAL_DMA_Init+0x1d4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d027      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2b      	ldr	r2, [pc, #172]	; (800462c <HAL_DMA_Init+0x1d8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d022      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <HAL_DMA_Init+0x1dc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d01d      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a28      	ldr	r2, [pc, #160]	; (8004634 <HAL_DMA_Init+0x1e0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d018      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a27      	ldr	r2, [pc, #156]	; (8004638 <HAL_DMA_Init+0x1e4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <HAL_DMA_Init+0x1e8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00e      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a24      	ldr	r2, [pc, #144]	; (8004640 <HAL_DMA_Init+0x1ec>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a22      	ldr	r2, [pc, #136]	; (8004644 <HAL_DMA_Init+0x1f0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_DMA_Init+0x174>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a21      	ldr	r2, [pc, #132]	; (8004648 <HAL_DMA_Init+0x1f4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <HAL_DMA_Init+0x186>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e007      	b.n	80045ea <HAL_DMA_Init+0x196>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0201 	bic.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045ea:	e02f      	b.n	800464c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ec:	f7fe f842 	bl	8002674 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d928      	bls.n	800464c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2203      	movs	r2, #3
 8004604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e246      	b.n	8004a9a <HAL_DMA_Init+0x646>
 800460c:	40020010 	.word	0x40020010
 8004610:	40020028 	.word	0x40020028
 8004614:	40020040 	.word	0x40020040
 8004618:	40020058 	.word	0x40020058
 800461c:	40020070 	.word	0x40020070
 8004620:	40020088 	.word	0x40020088
 8004624:	400200a0 	.word	0x400200a0
 8004628:	400200b8 	.word	0x400200b8
 800462c:	40020410 	.word	0x40020410
 8004630:	40020428 	.word	0x40020428
 8004634:	40020440 	.word	0x40020440
 8004638:	40020458 	.word	0x40020458
 800463c:	40020470 	.word	0x40020470
 8004640:	40020488 	.word	0x40020488
 8004644:	400204a0 	.word	0x400204a0
 8004648:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1c8      	bne.n	80045ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4b83      	ldr	r3, [pc, #524]	; (8004874 <HAL_DMA_Init+0x420>)
 8004666:	4013      	ands	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004672:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	2b04      	cmp	r3, #4
 800469e:	d107      	bne.n	80046b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	4313      	orrs	r3, r2
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80046b0:	4b71      	ldr	r3, [pc, #452]	; (8004878 <HAL_DMA_Init+0x424>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b71      	ldr	r3, [pc, #452]	; (800487c <HAL_DMA_Init+0x428>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046bc:	d328      	bcc.n	8004710 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b28      	cmp	r3, #40	; 0x28
 80046c4:	d903      	bls.n	80046ce <HAL_DMA_Init+0x27a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b2e      	cmp	r3, #46	; 0x2e
 80046cc:	d917      	bls.n	80046fe <HAL_DMA_Init+0x2aa>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b3e      	cmp	r3, #62	; 0x3e
 80046d4:	d903      	bls.n	80046de <HAL_DMA_Init+0x28a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b42      	cmp	r3, #66	; 0x42
 80046dc:	d90f      	bls.n	80046fe <HAL_DMA_Init+0x2aa>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b46      	cmp	r3, #70	; 0x46
 80046e4:	d903      	bls.n	80046ee <HAL_DMA_Init+0x29a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b48      	cmp	r3, #72	; 0x48
 80046ec:	d907      	bls.n	80046fe <HAL_DMA_Init+0x2aa>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b4e      	cmp	r3, #78	; 0x4e
 80046f4:	d905      	bls.n	8004702 <HAL_DMA_Init+0x2ae>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b52      	cmp	r3, #82	; 0x52
 80046fc:	d801      	bhi.n	8004702 <HAL_DMA_Init+0x2ae>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_DMA_Init+0x2b0>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0307 	bic.w	r3, r3, #7
 8004726:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b04      	cmp	r3, #4
 8004738:	d117      	bne.n	800476a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00e      	beq.n	800476a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f002 fb33 	bl	8006db8 <DMA_CheckFifoParam>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2240      	movs	r2, #64	; 0x40
 800475c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e197      	b.n	8004a9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f002 fa6e 	bl	8006c54 <DMA_CalcBaseAndBitshift>
 8004778:	4603      	mov	r3, r0
 800477a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	223f      	movs	r2, #63	; 0x3f
 8004786:	409a      	lsls	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	e0cd      	b.n	800492a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3b      	ldr	r2, [pc, #236]	; (8004880 <HAL_DMA_Init+0x42c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_DMA_Init+0x38a>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a39      	ldr	r2, [pc, #228]	; (8004884 <HAL_DMA_Init+0x430>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <HAL_DMA_Init+0x38a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a38      	ldr	r2, [pc, #224]	; (8004888 <HAL_DMA_Init+0x434>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <HAL_DMA_Init+0x38a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a36      	ldr	r2, [pc, #216]	; (800488c <HAL_DMA_Init+0x438>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_DMA_Init+0x38a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a35      	ldr	r2, [pc, #212]	; (8004890 <HAL_DMA_Init+0x43c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_DMA_Init+0x38a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a33      	ldr	r2, [pc, #204]	; (8004894 <HAL_DMA_Init+0x440>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_DMA_Init+0x38a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a32      	ldr	r2, [pc, #200]	; (8004898 <HAL_DMA_Init+0x444>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_DMA_Init+0x38a>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a30      	ldr	r2, [pc, #192]	; (800489c <HAL_DMA_Init+0x448>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <HAL_DMA_Init+0x38e>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_DMA_Init+0x390>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8097 	beq.w	8004918 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a24      	ldr	r2, [pc, #144]	; (8004880 <HAL_DMA_Init+0x42c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d021      	beq.n	8004838 <HAL_DMA_Init+0x3e4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a22      	ldr	r2, [pc, #136]	; (8004884 <HAL_DMA_Init+0x430>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01c      	beq.n	8004838 <HAL_DMA_Init+0x3e4>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a21      	ldr	r2, [pc, #132]	; (8004888 <HAL_DMA_Init+0x434>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d017      	beq.n	8004838 <HAL_DMA_Init+0x3e4>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1f      	ldr	r2, [pc, #124]	; (800488c <HAL_DMA_Init+0x438>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d012      	beq.n	8004838 <HAL_DMA_Init+0x3e4>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <HAL_DMA_Init+0x43c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00d      	beq.n	8004838 <HAL_DMA_Init+0x3e4>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_DMA_Init+0x440>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d008      	beq.n	8004838 <HAL_DMA_Init+0x3e4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <HAL_DMA_Init+0x444>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <HAL_DMA_Init+0x3e4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <HAL_DMA_Init+0x448>)
 8004836:	4293      	cmp	r3, r2
 8004838:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_DMA_Init+0x44c>)
 8004856:	4013      	ands	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d020      	beq.n	80048a4 <HAL_DMA_Init+0x450>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d102      	bne.n	8004870 <HAL_DMA_Init+0x41c>
 800486a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800486e:	e01a      	b.n	80048a6 <HAL_DMA_Init+0x452>
 8004870:	2300      	movs	r3, #0
 8004872:	e018      	b.n	80048a6 <HAL_DMA_Init+0x452>
 8004874:	fe10803f 	.word	0xfe10803f
 8004878:	5c001000 	.word	0x5c001000
 800487c:	ffff0000 	.word	0xffff0000
 8004880:	58025408 	.word	0x58025408
 8004884:	5802541c 	.word	0x5802541c
 8004888:	58025430 	.word	0x58025430
 800488c:	58025444 	.word	0x58025444
 8004890:	58025458 	.word	0x58025458
 8004894:	5802546c 	.word	0x5802546c
 8004898:	58025480 	.word	0x58025480
 800489c:	58025494 	.word	0x58025494
 80048a0:	fffe000f 	.word	0xfffe000f
 80048a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68d2      	ldr	r2, [r2, #12]
 80048aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80048cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80048d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b6e      	ldr	r3, [pc, #440]	; (8004aa4 <HAL_DMA_Init+0x650>)
 80048ec:	4413      	add	r3, r2
 80048ee:	4a6e      	ldr	r2, [pc, #440]	; (8004aa8 <HAL_DMA_Init+0x654>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	009a      	lsls	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f002 f9a9 	bl	8006c54 <DMA_CalcBaseAndBitshift>
 8004902:	4603      	mov	r3, r0
 8004904:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2201      	movs	r2, #1
 8004910:	409a      	lsls	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	e008      	b.n	800492a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2240      	movs	r2, #64	; 0x40
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2203      	movs	r2, #3
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0b7      	b.n	8004a9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a5f      	ldr	r2, [pc, #380]	; (8004aac <HAL_DMA_Init+0x658>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d072      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a5d      	ldr	r2, [pc, #372]	; (8004ab0 <HAL_DMA_Init+0x65c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d06d      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a5c      	ldr	r2, [pc, #368]	; (8004ab4 <HAL_DMA_Init+0x660>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d068      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a5a      	ldr	r2, [pc, #360]	; (8004ab8 <HAL_DMA_Init+0x664>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d063      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a59      	ldr	r2, [pc, #356]	; (8004abc <HAL_DMA_Init+0x668>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d05e      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a57      	ldr	r2, [pc, #348]	; (8004ac0 <HAL_DMA_Init+0x66c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d059      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a56      	ldr	r2, [pc, #344]	; (8004ac4 <HAL_DMA_Init+0x670>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d054      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a54      	ldr	r2, [pc, #336]	; (8004ac8 <HAL_DMA_Init+0x674>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d04f      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a53      	ldr	r2, [pc, #332]	; (8004acc <HAL_DMA_Init+0x678>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d04a      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a51      	ldr	r2, [pc, #324]	; (8004ad0 <HAL_DMA_Init+0x67c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d045      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a50      	ldr	r2, [pc, #320]	; (8004ad4 <HAL_DMA_Init+0x680>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d040      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a4e      	ldr	r2, [pc, #312]	; (8004ad8 <HAL_DMA_Init+0x684>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d03b      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a4d      	ldr	r2, [pc, #308]	; (8004adc <HAL_DMA_Init+0x688>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d036      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a4b      	ldr	r2, [pc, #300]	; (8004ae0 <HAL_DMA_Init+0x68c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d031      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a4a      	ldr	r2, [pc, #296]	; (8004ae4 <HAL_DMA_Init+0x690>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d02c      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a48      	ldr	r2, [pc, #288]	; (8004ae8 <HAL_DMA_Init+0x694>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d027      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a47      	ldr	r2, [pc, #284]	; (8004aec <HAL_DMA_Init+0x698>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d022      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a45      	ldr	r2, [pc, #276]	; (8004af0 <HAL_DMA_Init+0x69c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01d      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a44      	ldr	r2, [pc, #272]	; (8004af4 <HAL_DMA_Init+0x6a0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d018      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a42      	ldr	r2, [pc, #264]	; (8004af8 <HAL_DMA_Init+0x6a4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a41      	ldr	r2, [pc, #260]	; (8004afc <HAL_DMA_Init+0x6a8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00e      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3f      	ldr	r2, [pc, #252]	; (8004b00 <HAL_DMA_Init+0x6ac>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a3e      	ldr	r2, [pc, #248]	; (8004b04 <HAL_DMA_Init+0x6b0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_DMA_Init+0x5c6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a3c      	ldr	r2, [pc, #240]	; (8004b08 <HAL_DMA_Init+0x6b4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_DMA_Init+0x5ca>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <HAL_DMA_Init+0x5cc>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d032      	beq.n	8004a8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f002 fa43 	bl	8006eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b80      	cmp	r3, #128	; 0x80
 8004a30:	d102      	bne.n	8004a38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d010      	beq.n	8004a78 <HAL_DMA_Init+0x624>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d80c      	bhi.n	8004a78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f002 fac0 	bl	8006fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	e008      	b.n	8004a8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	a7fdabf8 	.word	0xa7fdabf8
 8004aa8:	cccccccd 	.word	0xcccccccd
 8004aac:	40020010 	.word	0x40020010
 8004ab0:	40020028 	.word	0x40020028
 8004ab4:	40020040 	.word	0x40020040
 8004ab8:	40020058 	.word	0x40020058
 8004abc:	40020070 	.word	0x40020070
 8004ac0:	40020088 	.word	0x40020088
 8004ac4:	400200a0 	.word	0x400200a0
 8004ac8:	400200b8 	.word	0x400200b8
 8004acc:	40020410 	.word	0x40020410
 8004ad0:	40020428 	.word	0x40020428
 8004ad4:	40020440 	.word	0x40020440
 8004ad8:	40020458 	.word	0x40020458
 8004adc:	40020470 	.word	0x40020470
 8004ae0:	40020488 	.word	0x40020488
 8004ae4:	400204a0 	.word	0x400204a0
 8004ae8:	400204b8 	.word	0x400204b8
 8004aec:	58025408 	.word	0x58025408
 8004af0:	5802541c 	.word	0x5802541c
 8004af4:	58025430 	.word	0x58025430
 8004af8:	58025444 	.word	0x58025444
 8004afc:	58025458 	.word	0x58025458
 8004b00:	5802546c 	.word	0x5802546c
 8004b04:	58025480 	.word	0x58025480
 8004b08:	58025494 	.word	0x58025494

08004b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e226      	b.n	8004f76 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_DMA_Start_IT+0x2a>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e21f      	b.n	8004f76 <HAL_DMA_Start_IT+0x46a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	f040 820a 	bne.w	8004f60 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a68      	ldr	r2, [pc, #416]	; (8004d00 <HAL_DMA_Start_IT+0x1f4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d04a      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a66      	ldr	r2, [pc, #408]	; (8004d04 <HAL_DMA_Start_IT+0x1f8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d045      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a65      	ldr	r2, [pc, #404]	; (8004d08 <HAL_DMA_Start_IT+0x1fc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d040      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a63      	ldr	r2, [pc, #396]	; (8004d0c <HAL_DMA_Start_IT+0x200>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d03b      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a62      	ldr	r2, [pc, #392]	; (8004d10 <HAL_DMA_Start_IT+0x204>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d036      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a60      	ldr	r2, [pc, #384]	; (8004d14 <HAL_DMA_Start_IT+0x208>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d031      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5f      	ldr	r2, [pc, #380]	; (8004d18 <HAL_DMA_Start_IT+0x20c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d02c      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5d      	ldr	r2, [pc, #372]	; (8004d1c <HAL_DMA_Start_IT+0x210>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d027      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5c      	ldr	r2, [pc, #368]	; (8004d20 <HAL_DMA_Start_IT+0x214>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a5a      	ldr	r2, [pc, #360]	; (8004d24 <HAL_DMA_Start_IT+0x218>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a59      	ldr	r2, [pc, #356]	; (8004d28 <HAL_DMA_Start_IT+0x21c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a57      	ldr	r2, [pc, #348]	; (8004d2c <HAL_DMA_Start_IT+0x220>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a56      	ldr	r2, [pc, #344]	; (8004d30 <HAL_DMA_Start_IT+0x224>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a54      	ldr	r2, [pc, #336]	; (8004d34 <HAL_DMA_Start_IT+0x228>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a53      	ldr	r2, [pc, #332]	; (8004d38 <HAL_DMA_Start_IT+0x22c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_DMA_Start_IT+0xee>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a51      	ldr	r2, [pc, #324]	; (8004d3c <HAL_DMA_Start_IT+0x230>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <HAL_DMA_Start_IT+0x100>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e007      	b.n	8004c1c <HAL_DMA_Start_IT+0x110>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f001 fe6a 	bl	80068fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a34      	ldr	r2, [pc, #208]	; (8004d00 <HAL_DMA_Start_IT+0x1f4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d04a      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a33      	ldr	r2, [pc, #204]	; (8004d04 <HAL_DMA_Start_IT+0x1f8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d045      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a31      	ldr	r2, [pc, #196]	; (8004d08 <HAL_DMA_Start_IT+0x1fc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d040      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a30      	ldr	r2, [pc, #192]	; (8004d0c <HAL_DMA_Start_IT+0x200>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d03b      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2e      	ldr	r2, [pc, #184]	; (8004d10 <HAL_DMA_Start_IT+0x204>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d036      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2d      	ldr	r2, [pc, #180]	; (8004d14 <HAL_DMA_Start_IT+0x208>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d031      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <HAL_DMA_Start_IT+0x20c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d02c      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <HAL_DMA_Start_IT+0x210>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d027      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a28      	ldr	r2, [pc, #160]	; (8004d20 <HAL_DMA_Start_IT+0x214>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d022      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <HAL_DMA_Start_IT+0x218>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d01d      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <HAL_DMA_Start_IT+0x21c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a24      	ldr	r2, [pc, #144]	; (8004d2c <HAL_DMA_Start_IT+0x220>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <HAL_DMA_Start_IT+0x224>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a21      	ldr	r2, [pc, #132]	; (8004d34 <HAL_DMA_Start_IT+0x228>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <HAL_DMA_Start_IT+0x22c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_DMA_Start_IT+0x1bc>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_DMA_Start_IT+0x230>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <HAL_DMA_Start_IT+0x1c0>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_DMA_Start_IT+0x1c2>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d036      	beq.n	8004d40 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 021e 	bic.w	r2, r3, #30
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0216 	orr.w	r2, r2, #22
 8004ce4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03e      	beq.n	8004d6c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0208 	orr.w	r2, r2, #8
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e035      	b.n	8004d6c <HAL_DMA_Start_IT+0x260>
 8004d00:	40020010 	.word	0x40020010
 8004d04:	40020028 	.word	0x40020028
 8004d08:	40020040 	.word	0x40020040
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	40020070 	.word	0x40020070
 8004d14:	40020088 	.word	0x40020088
 8004d18:	400200a0 	.word	0x400200a0
 8004d1c:	400200b8 	.word	0x400200b8
 8004d20:	40020410 	.word	0x40020410
 8004d24:	40020428 	.word	0x40020428
 8004d28:	40020440 	.word	0x40020440
 8004d2c:	40020458 	.word	0x40020458
 8004d30:	40020470 	.word	0x40020470
 8004d34:	40020488 	.word	0x40020488
 8004d38:	400204a0 	.word	0x400204a0
 8004d3c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 020e 	bic.w	r2, r3, #14
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 020a 	orr.w	r2, r2, #10
 8004d52:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0204 	orr.w	r2, r2, #4
 8004d6a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a83      	ldr	r2, [pc, #524]	; (8004f80 <HAL_DMA_Start_IT+0x474>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d072      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a82      	ldr	r2, [pc, #520]	; (8004f84 <HAL_DMA_Start_IT+0x478>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d06d      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a80      	ldr	r2, [pc, #512]	; (8004f88 <HAL_DMA_Start_IT+0x47c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d068      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a7f      	ldr	r2, [pc, #508]	; (8004f8c <HAL_DMA_Start_IT+0x480>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d063      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a7d      	ldr	r2, [pc, #500]	; (8004f90 <HAL_DMA_Start_IT+0x484>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d05e      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a7c      	ldr	r2, [pc, #496]	; (8004f94 <HAL_DMA_Start_IT+0x488>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d059      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a7a      	ldr	r2, [pc, #488]	; (8004f98 <HAL_DMA_Start_IT+0x48c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d054      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a79      	ldr	r2, [pc, #484]	; (8004f9c <HAL_DMA_Start_IT+0x490>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d04f      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a77      	ldr	r2, [pc, #476]	; (8004fa0 <HAL_DMA_Start_IT+0x494>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d04a      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a76      	ldr	r2, [pc, #472]	; (8004fa4 <HAL_DMA_Start_IT+0x498>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d045      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a74      	ldr	r2, [pc, #464]	; (8004fa8 <HAL_DMA_Start_IT+0x49c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d040      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a73      	ldr	r2, [pc, #460]	; (8004fac <HAL_DMA_Start_IT+0x4a0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d03b      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a71      	ldr	r2, [pc, #452]	; (8004fb0 <HAL_DMA_Start_IT+0x4a4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d036      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a70      	ldr	r2, [pc, #448]	; (8004fb4 <HAL_DMA_Start_IT+0x4a8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d031      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a6e      	ldr	r2, [pc, #440]	; (8004fb8 <HAL_DMA_Start_IT+0x4ac>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d02c      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6d      	ldr	r2, [pc, #436]	; (8004fbc <HAL_DMA_Start_IT+0x4b0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d027      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6b      	ldr	r2, [pc, #428]	; (8004fc0 <HAL_DMA_Start_IT+0x4b4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d022      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6a      	ldr	r2, [pc, #424]	; (8004fc4 <HAL_DMA_Start_IT+0x4b8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d01d      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a68      	ldr	r2, [pc, #416]	; (8004fc8 <HAL_DMA_Start_IT+0x4bc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d018      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a67      	ldr	r2, [pc, #412]	; (8004fcc <HAL_DMA_Start_IT+0x4c0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a65      	ldr	r2, [pc, #404]	; (8004fd0 <HAL_DMA_Start_IT+0x4c4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00e      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a64      	ldr	r2, [pc, #400]	; (8004fd4 <HAL_DMA_Start_IT+0x4c8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d009      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a62      	ldr	r2, [pc, #392]	; (8004fd8 <HAL_DMA_Start_IT+0x4cc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <HAL_DMA_Start_IT+0x350>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a61      	ldr	r2, [pc, #388]	; (8004fdc <HAL_DMA_Start_IT+0x4d0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_DMA_Start_IT+0x354>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <HAL_DMA_Start_IT+0x356>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01a      	beq.n	8004e9c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e82:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e9a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a37      	ldr	r2, [pc, #220]	; (8004f80 <HAL_DMA_Start_IT+0x474>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d04a      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a36      	ldr	r2, [pc, #216]	; (8004f84 <HAL_DMA_Start_IT+0x478>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d045      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a34      	ldr	r2, [pc, #208]	; (8004f88 <HAL_DMA_Start_IT+0x47c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d040      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a33      	ldr	r2, [pc, #204]	; (8004f8c <HAL_DMA_Start_IT+0x480>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d03b      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a31      	ldr	r2, [pc, #196]	; (8004f90 <HAL_DMA_Start_IT+0x484>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d036      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a30      	ldr	r2, [pc, #192]	; (8004f94 <HAL_DMA_Start_IT+0x488>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d031      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a2e      	ldr	r2, [pc, #184]	; (8004f98 <HAL_DMA_Start_IT+0x48c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d02c      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2d      	ldr	r2, [pc, #180]	; (8004f9c <HAL_DMA_Start_IT+0x490>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d027      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a2b      	ldr	r2, [pc, #172]	; (8004fa0 <HAL_DMA_Start_IT+0x494>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <HAL_DMA_Start_IT+0x498>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d01d      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a28      	ldr	r2, [pc, #160]	; (8004fa8 <HAL_DMA_Start_IT+0x49c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a27      	ldr	r2, [pc, #156]	; (8004fac <HAL_DMA_Start_IT+0x4a0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <HAL_DMA_Start_IT+0x4a4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <HAL_DMA_Start_IT+0x4a8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <HAL_DMA_Start_IT+0x4ac>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_DMA_Start_IT+0x430>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <HAL_DMA_Start_IT+0x4b0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d108      	bne.n	8004f4e <HAL_DMA_Start_IT+0x442>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e012      	b.n	8004f74 <HAL_DMA_Start_IT+0x468>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e009      	b.n	8004f74 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40020010 	.word	0x40020010
 8004f84:	40020028 	.word	0x40020028
 8004f88:	40020040 	.word	0x40020040
 8004f8c:	40020058 	.word	0x40020058
 8004f90:	40020070 	.word	0x40020070
 8004f94:	40020088 	.word	0x40020088
 8004f98:	400200a0 	.word	0x400200a0
 8004f9c:	400200b8 	.word	0x400200b8
 8004fa0:	40020410 	.word	0x40020410
 8004fa4:	40020428 	.word	0x40020428
 8004fa8:	40020440 	.word	0x40020440
 8004fac:	40020458 	.word	0x40020458
 8004fb0:	40020470 	.word	0x40020470
 8004fb4:	40020488 	.word	0x40020488
 8004fb8:	400204a0 	.word	0x400204a0
 8004fbc:	400204b8 	.word	0x400204b8
 8004fc0:	58025408 	.word	0x58025408
 8004fc4:	5802541c 	.word	0x5802541c
 8004fc8:	58025430 	.word	0x58025430
 8004fcc:	58025444 	.word	0x58025444
 8004fd0:	58025458 	.word	0x58025458
 8004fd4:	5802546c 	.word	0x5802546c
 8004fd8:	58025480 	.word	0x58025480
 8004fdc:	58025494 	.word	0x58025494

08004fe0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004fe8:	f7fd fb44 	bl	8002674 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e2dc      	b.n	80055b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d008      	beq.n	8005016 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e2cd      	b.n	80055b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a76      	ldr	r2, [pc, #472]	; (80051f4 <HAL_DMA_Abort+0x214>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d04a      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a74      	ldr	r2, [pc, #464]	; (80051f8 <HAL_DMA_Abort+0x218>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d045      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a73      	ldr	r2, [pc, #460]	; (80051fc <HAL_DMA_Abort+0x21c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d040      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a71      	ldr	r2, [pc, #452]	; (8005200 <HAL_DMA_Abort+0x220>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d03b      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a70      	ldr	r2, [pc, #448]	; (8005204 <HAL_DMA_Abort+0x224>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d036      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6e      	ldr	r2, [pc, #440]	; (8005208 <HAL_DMA_Abort+0x228>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d031      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a6d      	ldr	r2, [pc, #436]	; (800520c <HAL_DMA_Abort+0x22c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d02c      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a6b      	ldr	r2, [pc, #428]	; (8005210 <HAL_DMA_Abort+0x230>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d027      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a6a      	ldr	r2, [pc, #424]	; (8005214 <HAL_DMA_Abort+0x234>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d022      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a68      	ldr	r2, [pc, #416]	; (8005218 <HAL_DMA_Abort+0x238>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a67      	ldr	r2, [pc, #412]	; (800521c <HAL_DMA_Abort+0x23c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a65      	ldr	r2, [pc, #404]	; (8005220 <HAL_DMA_Abort+0x240>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a64      	ldr	r2, [pc, #400]	; (8005224 <HAL_DMA_Abort+0x244>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a62      	ldr	r2, [pc, #392]	; (8005228 <HAL_DMA_Abort+0x248>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a61      	ldr	r2, [pc, #388]	; (800522c <HAL_DMA_Abort+0x24c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_DMA_Abort+0xd6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a5f      	ldr	r2, [pc, #380]	; (8005230 <HAL_DMA_Abort+0x250>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Abort+0xda>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_DMA_Abort+0xdc>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 021e 	bic.w	r2, r2, #30
 80050ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e00a      	b.n	80050fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 020e 	bic.w	r2, r2, #14
 80050f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a3c      	ldr	r2, [pc, #240]	; (80051f4 <HAL_DMA_Abort+0x214>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d072      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <HAL_DMA_Abort+0x218>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d06d      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a39      	ldr	r2, [pc, #228]	; (80051fc <HAL_DMA_Abort+0x21c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d068      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a37      	ldr	r2, [pc, #220]	; (8005200 <HAL_DMA_Abort+0x220>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d063      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a36      	ldr	r2, [pc, #216]	; (8005204 <HAL_DMA_Abort+0x224>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d05e      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a34      	ldr	r2, [pc, #208]	; (8005208 <HAL_DMA_Abort+0x228>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d059      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a33      	ldr	r2, [pc, #204]	; (800520c <HAL_DMA_Abort+0x22c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d054      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a31      	ldr	r2, [pc, #196]	; (8005210 <HAL_DMA_Abort+0x230>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d04f      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a30      	ldr	r2, [pc, #192]	; (8005214 <HAL_DMA_Abort+0x234>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d04a      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2e      	ldr	r2, [pc, #184]	; (8005218 <HAL_DMA_Abort+0x238>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d045      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2d      	ldr	r2, [pc, #180]	; (800521c <HAL_DMA_Abort+0x23c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d040      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <HAL_DMA_Abort+0x240>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d03b      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <HAL_DMA_Abort+0x244>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d036      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a28      	ldr	r2, [pc, #160]	; (8005228 <HAL_DMA_Abort+0x248>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d031      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a27      	ldr	r2, [pc, #156]	; (800522c <HAL_DMA_Abort+0x24c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d02c      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a25      	ldr	r2, [pc, #148]	; (8005230 <HAL_DMA_Abort+0x250>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d027      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a24      	ldr	r2, [pc, #144]	; (8005234 <HAL_DMA_Abort+0x254>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d022      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a22      	ldr	r2, [pc, #136]	; (8005238 <HAL_DMA_Abort+0x258>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01d      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a21      	ldr	r2, [pc, #132]	; (800523c <HAL_DMA_Abort+0x25c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d018      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <HAL_DMA_Abort+0x260>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1e      	ldr	r2, [pc, #120]	; (8005244 <HAL_DMA_Abort+0x264>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <HAL_DMA_Abort+0x268>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d009      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1b      	ldr	r2, [pc, #108]	; (800524c <HAL_DMA_Abort+0x26c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_DMA_Abort+0x20e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a19      	ldr	r2, [pc, #100]	; (8005250 <HAL_DMA_Abort+0x270>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d132      	bne.n	8005254 <HAL_DMA_Abort+0x274>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e031      	b.n	8005256 <HAL_DMA_Abort+0x276>
 80051f2:	bf00      	nop
 80051f4:	40020010 	.word	0x40020010
 80051f8:	40020028 	.word	0x40020028
 80051fc:	40020040 	.word	0x40020040
 8005200:	40020058 	.word	0x40020058
 8005204:	40020070 	.word	0x40020070
 8005208:	40020088 	.word	0x40020088
 800520c:	400200a0 	.word	0x400200a0
 8005210:	400200b8 	.word	0x400200b8
 8005214:	40020410 	.word	0x40020410
 8005218:	40020428 	.word	0x40020428
 800521c:	40020440 	.word	0x40020440
 8005220:	40020458 	.word	0x40020458
 8005224:	40020470 	.word	0x40020470
 8005228:	40020488 	.word	0x40020488
 800522c:	400204a0 	.word	0x400204a0
 8005230:	400204b8 	.word	0x400204b8
 8005234:	58025408 	.word	0x58025408
 8005238:	5802541c 	.word	0x5802541c
 800523c:	58025430 	.word	0x58025430
 8005240:	58025444 	.word	0x58025444
 8005244:	58025458 	.word	0x58025458
 8005248:	5802546c 	.word	0x5802546c
 800524c:	58025480 	.word	0x58025480
 8005250:	58025494 	.word	0x58025494
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005268:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6d      	ldr	r2, [pc, #436]	; (8005424 <HAL_DMA_Abort+0x444>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d04a      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a6b      	ldr	r2, [pc, #428]	; (8005428 <HAL_DMA_Abort+0x448>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d045      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a6a      	ldr	r2, [pc, #424]	; (800542c <HAL_DMA_Abort+0x44c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d040      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a68      	ldr	r2, [pc, #416]	; (8005430 <HAL_DMA_Abort+0x450>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d03b      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a67      	ldr	r2, [pc, #412]	; (8005434 <HAL_DMA_Abort+0x454>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d036      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a65      	ldr	r2, [pc, #404]	; (8005438 <HAL_DMA_Abort+0x458>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d031      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a64      	ldr	r2, [pc, #400]	; (800543c <HAL_DMA_Abort+0x45c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d02c      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a62      	ldr	r2, [pc, #392]	; (8005440 <HAL_DMA_Abort+0x460>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d027      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a61      	ldr	r2, [pc, #388]	; (8005444 <HAL_DMA_Abort+0x464>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5f      	ldr	r2, [pc, #380]	; (8005448 <HAL_DMA_Abort+0x468>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a5e      	ldr	r2, [pc, #376]	; (800544c <HAL_DMA_Abort+0x46c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a5c      	ldr	r2, [pc, #368]	; (8005450 <HAL_DMA_Abort+0x470>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a5b      	ldr	r2, [pc, #364]	; (8005454 <HAL_DMA_Abort+0x474>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a59      	ldr	r2, [pc, #356]	; (8005458 <HAL_DMA_Abort+0x478>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a58      	ldr	r2, [pc, #352]	; (800545c <HAL_DMA_Abort+0x47c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_DMA_Abort+0x32a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a56      	ldr	r2, [pc, #344]	; (8005460 <HAL_DMA_Abort+0x480>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d108      	bne.n	800531c <HAL_DMA_Abort+0x33c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e007      	b.n	800532c <HAL_DMA_Abort+0x34c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800532c:	e013      	b.n	8005356 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800532e:	f7fd f9a1 	bl	8002674 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b05      	cmp	r3, #5
 800533a:	d90c      	bls.n	8005356 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2203      	movs	r2, #3
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e12d      	b.n	80055b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e5      	bne.n	800532e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <HAL_DMA_Abort+0x444>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d04a      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <HAL_DMA_Abort+0x448>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d045      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a2c      	ldr	r2, [pc, #176]	; (800542c <HAL_DMA_Abort+0x44c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d040      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a2a      	ldr	r2, [pc, #168]	; (8005430 <HAL_DMA_Abort+0x450>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d03b      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a29      	ldr	r2, [pc, #164]	; (8005434 <HAL_DMA_Abort+0x454>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d036      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a27      	ldr	r2, [pc, #156]	; (8005438 <HAL_DMA_Abort+0x458>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d031      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a26      	ldr	r2, [pc, #152]	; (800543c <HAL_DMA_Abort+0x45c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d02c      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a24      	ldr	r2, [pc, #144]	; (8005440 <HAL_DMA_Abort+0x460>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d027      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a23      	ldr	r2, [pc, #140]	; (8005444 <HAL_DMA_Abort+0x464>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d022      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a21      	ldr	r2, [pc, #132]	; (8005448 <HAL_DMA_Abort+0x468>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01d      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a20      	ldr	r2, [pc, #128]	; (800544c <HAL_DMA_Abort+0x46c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d018      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1e      	ldr	r2, [pc, #120]	; (8005450 <HAL_DMA_Abort+0x470>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <HAL_DMA_Abort+0x474>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <HAL_DMA_Abort+0x478>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1a      	ldr	r2, [pc, #104]	; (800545c <HAL_DMA_Abort+0x47c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_DMA_Abort+0x422>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a18      	ldr	r2, [pc, #96]	; (8005460 <HAL_DMA_Abort+0x480>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d101      	bne.n	8005406 <HAL_DMA_Abort+0x426>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_DMA_Abort+0x428>
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02b      	beq.n	8005464 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005410:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	223f      	movs	r2, #63	; 0x3f
 800541c:	409a      	lsls	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	609a      	str	r2, [r3, #8]
 8005422:	e02a      	b.n	800547a <HAL_DMA_Abort+0x49a>
 8005424:	40020010 	.word	0x40020010
 8005428:	40020028 	.word	0x40020028
 800542c:	40020040 	.word	0x40020040
 8005430:	40020058 	.word	0x40020058
 8005434:	40020070 	.word	0x40020070
 8005438:	40020088 	.word	0x40020088
 800543c:	400200a0 	.word	0x400200a0
 8005440:	400200b8 	.word	0x400200b8
 8005444:	40020410 	.word	0x40020410
 8005448:	40020428 	.word	0x40020428
 800544c:	40020440 	.word	0x40020440
 8005450:	40020458 	.word	0x40020458
 8005454:	40020470 	.word	0x40020470
 8005458:	40020488 	.word	0x40020488
 800545c:	400204a0 	.word	0x400204a0
 8005460:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	2201      	movs	r2, #1
 8005474:	409a      	lsls	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a4f      	ldr	r2, [pc, #316]	; (80055bc <HAL_DMA_Abort+0x5dc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d072      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a4d      	ldr	r2, [pc, #308]	; (80055c0 <HAL_DMA_Abort+0x5e0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d06d      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a4c      	ldr	r2, [pc, #304]	; (80055c4 <HAL_DMA_Abort+0x5e4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d068      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a4a      	ldr	r2, [pc, #296]	; (80055c8 <HAL_DMA_Abort+0x5e8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d063      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a49      	ldr	r2, [pc, #292]	; (80055cc <HAL_DMA_Abort+0x5ec>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d05e      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a47      	ldr	r2, [pc, #284]	; (80055d0 <HAL_DMA_Abort+0x5f0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d059      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a46      	ldr	r2, [pc, #280]	; (80055d4 <HAL_DMA_Abort+0x5f4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d054      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a44      	ldr	r2, [pc, #272]	; (80055d8 <HAL_DMA_Abort+0x5f8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04f      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a43      	ldr	r2, [pc, #268]	; (80055dc <HAL_DMA_Abort+0x5fc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d04a      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a41      	ldr	r2, [pc, #260]	; (80055e0 <HAL_DMA_Abort+0x600>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d045      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a40      	ldr	r2, [pc, #256]	; (80055e4 <HAL_DMA_Abort+0x604>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d040      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a3e      	ldr	r2, [pc, #248]	; (80055e8 <HAL_DMA_Abort+0x608>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d03b      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a3d      	ldr	r2, [pc, #244]	; (80055ec <HAL_DMA_Abort+0x60c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d036      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a3b      	ldr	r2, [pc, #236]	; (80055f0 <HAL_DMA_Abort+0x610>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d031      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3a      	ldr	r2, [pc, #232]	; (80055f4 <HAL_DMA_Abort+0x614>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d02c      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a38      	ldr	r2, [pc, #224]	; (80055f8 <HAL_DMA_Abort+0x618>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d027      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a37      	ldr	r2, [pc, #220]	; (80055fc <HAL_DMA_Abort+0x61c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d022      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a35      	ldr	r2, [pc, #212]	; (8005600 <HAL_DMA_Abort+0x620>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d01d      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a34      	ldr	r2, [pc, #208]	; (8005604 <HAL_DMA_Abort+0x624>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d018      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a32      	ldr	r2, [pc, #200]	; (8005608 <HAL_DMA_Abort+0x628>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a31      	ldr	r2, [pc, #196]	; (800560c <HAL_DMA_Abort+0x62c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2f      	ldr	r2, [pc, #188]	; (8005610 <HAL_DMA_Abort+0x630>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2e      	ldr	r2, [pc, #184]	; (8005614 <HAL_DMA_Abort+0x634>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_DMA_Abort+0x58a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <HAL_DMA_Abort+0x638>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d101      	bne.n	800556e <HAL_DMA_Abort+0x58e>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_DMA_Abort+0x590>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d015      	beq.n	80055a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800557c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005594:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800559e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40020010 	.word	0x40020010
 80055c0:	40020028 	.word	0x40020028
 80055c4:	40020040 	.word	0x40020040
 80055c8:	40020058 	.word	0x40020058
 80055cc:	40020070 	.word	0x40020070
 80055d0:	40020088 	.word	0x40020088
 80055d4:	400200a0 	.word	0x400200a0
 80055d8:	400200b8 	.word	0x400200b8
 80055dc:	40020410 	.word	0x40020410
 80055e0:	40020428 	.word	0x40020428
 80055e4:	40020440 	.word	0x40020440
 80055e8:	40020458 	.word	0x40020458
 80055ec:	40020470 	.word	0x40020470
 80055f0:	40020488 	.word	0x40020488
 80055f4:	400204a0 	.word	0x400204a0
 80055f8:	400204b8 	.word	0x400204b8
 80055fc:	58025408 	.word	0x58025408
 8005600:	5802541c 	.word	0x5802541c
 8005604:	58025430 	.word	0x58025430
 8005608:	58025444 	.word	0x58025444
 800560c:	58025458 	.word	0x58025458
 8005610:	5802546c 	.word	0x5802546c
 8005614:	58025480 	.word	0x58025480
 8005618:	58025494 	.word	0x58025494

0800561c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e237      	b.n	8005a9e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d004      	beq.n	8005644 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2280      	movs	r2, #128	; 0x80
 800563e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e22c      	b.n	8005a9e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a5c      	ldr	r2, [pc, #368]	; (80057bc <HAL_DMA_Abort_IT+0x1a0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d04a      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a5b      	ldr	r2, [pc, #364]	; (80057c0 <HAL_DMA_Abort_IT+0x1a4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d045      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a59      	ldr	r2, [pc, #356]	; (80057c4 <HAL_DMA_Abort_IT+0x1a8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d040      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a58      	ldr	r2, [pc, #352]	; (80057c8 <HAL_DMA_Abort_IT+0x1ac>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d03b      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a56      	ldr	r2, [pc, #344]	; (80057cc <HAL_DMA_Abort_IT+0x1b0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d036      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a55      	ldr	r2, [pc, #340]	; (80057d0 <HAL_DMA_Abort_IT+0x1b4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d031      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a53      	ldr	r2, [pc, #332]	; (80057d4 <HAL_DMA_Abort_IT+0x1b8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d02c      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a52      	ldr	r2, [pc, #328]	; (80057d8 <HAL_DMA_Abort_IT+0x1bc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d027      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a50      	ldr	r2, [pc, #320]	; (80057dc <HAL_DMA_Abort_IT+0x1c0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d022      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4f      	ldr	r2, [pc, #316]	; (80057e0 <HAL_DMA_Abort_IT+0x1c4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01d      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a4d      	ldr	r2, [pc, #308]	; (80057e4 <HAL_DMA_Abort_IT+0x1c8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a4c      	ldr	r2, [pc, #304]	; (80057e8 <HAL_DMA_Abort_IT+0x1cc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a4a      	ldr	r2, [pc, #296]	; (80057ec <HAL_DMA_Abort_IT+0x1d0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a49      	ldr	r2, [pc, #292]	; (80057f0 <HAL_DMA_Abort_IT+0x1d4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a47      	ldr	r2, [pc, #284]	; (80057f4 <HAL_DMA_Abort_IT+0x1d8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_DMA_Abort_IT+0xc8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a46      	ldr	r2, [pc, #280]	; (80057f8 <HAL_DMA_Abort_IT+0x1dc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <HAL_DMA_Abort_IT+0xcc>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <HAL_DMA_Abort_IT+0xce>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 8086 	beq.w	80057fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2204      	movs	r2, #4
 80056f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <HAL_DMA_Abort_IT+0x1a0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04a      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a2e      	ldr	r2, [pc, #184]	; (80057c0 <HAL_DMA_Abort_IT+0x1a4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d045      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a2c      	ldr	r2, [pc, #176]	; (80057c4 <HAL_DMA_Abort_IT+0x1a8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d040      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2b      	ldr	r2, [pc, #172]	; (80057c8 <HAL_DMA_Abort_IT+0x1ac>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d03b      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a29      	ldr	r2, [pc, #164]	; (80057cc <HAL_DMA_Abort_IT+0x1b0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d036      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <HAL_DMA_Abort_IT+0x1b4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d031      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a26      	ldr	r2, [pc, #152]	; (80057d4 <HAL_DMA_Abort_IT+0x1b8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d02c      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <HAL_DMA_Abort_IT+0x1bc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d027      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a23      	ldr	r2, [pc, #140]	; (80057dc <HAL_DMA_Abort_IT+0x1c0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a22      	ldr	r2, [pc, #136]	; (80057e0 <HAL_DMA_Abort_IT+0x1c4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <HAL_DMA_Abort_IT+0x1c8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1f      	ldr	r2, [pc, #124]	; (80057e8 <HAL_DMA_Abort_IT+0x1cc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1d      	ldr	r2, [pc, #116]	; (80057ec <HAL_DMA_Abort_IT+0x1d0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1c      	ldr	r2, [pc, #112]	; (80057f0 <HAL_DMA_Abort_IT+0x1d4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1a      	ldr	r2, [pc, #104]	; (80057f4 <HAL_DMA_Abort_IT+0x1d8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_DMA_Abort_IT+0x17c>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <HAL_DMA_Abort_IT+0x1dc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d108      	bne.n	80057aa <HAL_DMA_Abort_IT+0x18e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e178      	b.n	8005a9c <HAL_DMA_Abort_IT+0x480>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e16f      	b.n	8005a9c <HAL_DMA_Abort_IT+0x480>
 80057bc:	40020010 	.word	0x40020010
 80057c0:	40020028 	.word	0x40020028
 80057c4:	40020040 	.word	0x40020040
 80057c8:	40020058 	.word	0x40020058
 80057cc:	40020070 	.word	0x40020070
 80057d0:	40020088 	.word	0x40020088
 80057d4:	400200a0 	.word	0x400200a0
 80057d8:	400200b8 	.word	0x400200b8
 80057dc:	40020410 	.word	0x40020410
 80057e0:	40020428 	.word	0x40020428
 80057e4:	40020440 	.word	0x40020440
 80057e8:	40020458 	.word	0x40020458
 80057ec:	40020470 	.word	0x40020470
 80057f0:	40020488 	.word	0x40020488
 80057f4:	400204a0 	.word	0x400204a0
 80057f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 020e 	bic.w	r2, r2, #14
 800580a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a6c      	ldr	r2, [pc, #432]	; (80059c4 <HAL_DMA_Abort_IT+0x3a8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d04a      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a6b      	ldr	r2, [pc, #428]	; (80059c8 <HAL_DMA_Abort_IT+0x3ac>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d045      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a69      	ldr	r2, [pc, #420]	; (80059cc <HAL_DMA_Abort_IT+0x3b0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d040      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a68      	ldr	r2, [pc, #416]	; (80059d0 <HAL_DMA_Abort_IT+0x3b4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d03b      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a66      	ldr	r2, [pc, #408]	; (80059d4 <HAL_DMA_Abort_IT+0x3b8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d036      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a65      	ldr	r2, [pc, #404]	; (80059d8 <HAL_DMA_Abort_IT+0x3bc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d031      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a63      	ldr	r2, [pc, #396]	; (80059dc <HAL_DMA_Abort_IT+0x3c0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d02c      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a62      	ldr	r2, [pc, #392]	; (80059e0 <HAL_DMA_Abort_IT+0x3c4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d027      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a60      	ldr	r2, [pc, #384]	; (80059e4 <HAL_DMA_Abort_IT+0x3c8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d022      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a5f      	ldr	r2, [pc, #380]	; (80059e8 <HAL_DMA_Abort_IT+0x3cc>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d01d      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a5d      	ldr	r2, [pc, #372]	; (80059ec <HAL_DMA_Abort_IT+0x3d0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d018      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5c      	ldr	r2, [pc, #368]	; (80059f0 <HAL_DMA_Abort_IT+0x3d4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d013      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5a      	ldr	r2, [pc, #360]	; (80059f4 <HAL_DMA_Abort_IT+0x3d8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00e      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a59      	ldr	r2, [pc, #356]	; (80059f8 <HAL_DMA_Abort_IT+0x3dc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a57      	ldr	r2, [pc, #348]	; (80059fc <HAL_DMA_Abort_IT+0x3e0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_DMA_Abort_IT+0x290>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a56      	ldr	r2, [pc, #344]	; (8005a00 <HAL_DMA_Abort_IT+0x3e4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d108      	bne.n	80058be <HAL_DMA_Abort_IT+0x2a2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e007      	b.n	80058ce <HAL_DMA_Abort_IT+0x2b2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a3c      	ldr	r2, [pc, #240]	; (80059c4 <HAL_DMA_Abort_IT+0x3a8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d072      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3a      	ldr	r2, [pc, #232]	; (80059c8 <HAL_DMA_Abort_IT+0x3ac>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d06d      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a39      	ldr	r2, [pc, #228]	; (80059cc <HAL_DMA_Abort_IT+0x3b0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d068      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a37      	ldr	r2, [pc, #220]	; (80059d0 <HAL_DMA_Abort_IT+0x3b4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d063      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a36      	ldr	r2, [pc, #216]	; (80059d4 <HAL_DMA_Abort_IT+0x3b8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d05e      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a34      	ldr	r2, [pc, #208]	; (80059d8 <HAL_DMA_Abort_IT+0x3bc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d059      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a33      	ldr	r2, [pc, #204]	; (80059dc <HAL_DMA_Abort_IT+0x3c0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d054      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a31      	ldr	r2, [pc, #196]	; (80059e0 <HAL_DMA_Abort_IT+0x3c4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d04f      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <HAL_DMA_Abort_IT+0x3c8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d04a      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <HAL_DMA_Abort_IT+0x3cc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d045      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a2d      	ldr	r2, [pc, #180]	; (80059ec <HAL_DMA_Abort_IT+0x3d0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d040      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a2b      	ldr	r2, [pc, #172]	; (80059f0 <HAL_DMA_Abort_IT+0x3d4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d03b      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2a      	ldr	r2, [pc, #168]	; (80059f4 <HAL_DMA_Abort_IT+0x3d8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d036      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a28      	ldr	r2, [pc, #160]	; (80059f8 <HAL_DMA_Abort_IT+0x3dc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d031      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a27      	ldr	r2, [pc, #156]	; (80059fc <HAL_DMA_Abort_IT+0x3e0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d02c      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <HAL_DMA_Abort_IT+0x3e4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d027      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a24      	ldr	r2, [pc, #144]	; (8005a04 <HAL_DMA_Abort_IT+0x3e8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d022      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <HAL_DMA_Abort_IT+0x3ec>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01d      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <HAL_DMA_Abort_IT+0x3f0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1f      	ldr	r2, [pc, #124]	; (8005a10 <HAL_DMA_Abort_IT+0x3f4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1e      	ldr	r2, [pc, #120]	; (8005a14 <HAL_DMA_Abort_IT+0x3f8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1c      	ldr	r2, [pc, #112]	; (8005a18 <HAL_DMA_Abort_IT+0x3fc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <HAL_DMA_Abort_IT+0x400>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_DMA_Abort_IT+0x3a2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a19      	ldr	r2, [pc, #100]	; (8005a20 <HAL_DMA_Abort_IT+0x404>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d132      	bne.n	8005a24 <HAL_DMA_Abort_IT+0x408>
 80059be:	2301      	movs	r3, #1
 80059c0:	e031      	b.n	8005a26 <HAL_DMA_Abort_IT+0x40a>
 80059c2:	bf00      	nop
 80059c4:	40020010 	.word	0x40020010
 80059c8:	40020028 	.word	0x40020028
 80059cc:	40020040 	.word	0x40020040
 80059d0:	40020058 	.word	0x40020058
 80059d4:	40020070 	.word	0x40020070
 80059d8:	40020088 	.word	0x40020088
 80059dc:	400200a0 	.word	0x400200a0
 80059e0:	400200b8 	.word	0x400200b8
 80059e4:	40020410 	.word	0x40020410
 80059e8:	40020428 	.word	0x40020428
 80059ec:	40020440 	.word	0x40020440
 80059f0:	40020458 	.word	0x40020458
 80059f4:	40020470 	.word	0x40020470
 80059f8:	40020488 	.word	0x40020488
 80059fc:	400204a0 	.word	0x400204a0
 8005a00:	400204b8 	.word	0x400204b8
 8005a04:	58025408 	.word	0x58025408
 8005a08:	5802541c 	.word	0x5802541c
 8005a0c:	58025430 	.word	0x58025430
 8005a10:	58025444 	.word	0x58025444
 8005a14:	58025458 	.word	0x58025458
 8005a18:	5802546c 	.word	0x5802546c
 8005a1c:	58025480 	.word	0x58025480
 8005a20:	58025494 	.word	0x58025494
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d028      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a38:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2201      	movs	r2, #1
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a58:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a70:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a7a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop

08005aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ab4:	4b67      	ldr	r3, [pc, #412]	; (8005c54 <HAL_DMA_IRQHandler+0x1ac>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a67      	ldr	r2, [pc, #412]	; (8005c58 <HAL_DMA_IRQHandler+0x1b0>)
 8005aba:	fba2 2303 	umull	r2, r3, r2, r3
 8005abe:	0a9b      	lsrs	r3, r3, #10
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5f      	ldr	r2, [pc, #380]	; (8005c5c <HAL_DMA_IRQHandler+0x1b4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d04a      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a5d      	ldr	r2, [pc, #372]	; (8005c60 <HAL_DMA_IRQHandler+0x1b8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d045      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a5c      	ldr	r2, [pc, #368]	; (8005c64 <HAL_DMA_IRQHandler+0x1bc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d040      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a5a      	ldr	r2, [pc, #360]	; (8005c68 <HAL_DMA_IRQHandler+0x1c0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d03b      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a59      	ldr	r2, [pc, #356]	; (8005c6c <HAL_DMA_IRQHandler+0x1c4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d036      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a57      	ldr	r2, [pc, #348]	; (8005c70 <HAL_DMA_IRQHandler+0x1c8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d031      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a56      	ldr	r2, [pc, #344]	; (8005c74 <HAL_DMA_IRQHandler+0x1cc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d02c      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a54      	ldr	r2, [pc, #336]	; (8005c78 <HAL_DMA_IRQHandler+0x1d0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d027      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a53      	ldr	r2, [pc, #332]	; (8005c7c <HAL_DMA_IRQHandler+0x1d4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a51      	ldr	r2, [pc, #324]	; (8005c80 <HAL_DMA_IRQHandler+0x1d8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a50      	ldr	r2, [pc, #320]	; (8005c84 <HAL_DMA_IRQHandler+0x1dc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a4e      	ldr	r2, [pc, #312]	; (8005c88 <HAL_DMA_IRQHandler+0x1e0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a4d      	ldr	r2, [pc, #308]	; (8005c8c <HAL_DMA_IRQHandler+0x1e4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a4b      	ldr	r2, [pc, #300]	; (8005c90 <HAL_DMA_IRQHandler+0x1e8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a4a      	ldr	r2, [pc, #296]	; (8005c94 <HAL_DMA_IRQHandler+0x1ec>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_DMA_IRQHandler+0xd2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a48      	ldr	r2, [pc, #288]	; (8005c98 <HAL_DMA_IRQHandler+0x1f0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d101      	bne.n	8005b7e <HAL_DMA_IRQHandler+0xd6>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <HAL_DMA_IRQHandler+0xd8>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 842b 	beq.w	80063dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8a:	f003 031f 	and.w	r3, r3, #31
 8005b8e:	2208      	movs	r2, #8
 8005b90:	409a      	lsls	r2, r3
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80a2 	beq.w	8005ce0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a2e      	ldr	r2, [pc, #184]	; (8005c5c <HAL_DMA_IRQHandler+0x1b4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d04a      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2d      	ldr	r2, [pc, #180]	; (8005c60 <HAL_DMA_IRQHandler+0x1b8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d045      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <HAL_DMA_IRQHandler+0x1bc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d040      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2a      	ldr	r2, [pc, #168]	; (8005c68 <HAL_DMA_IRQHandler+0x1c0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d03b      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a28      	ldr	r2, [pc, #160]	; (8005c6c <HAL_DMA_IRQHandler+0x1c4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d036      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a27      	ldr	r2, [pc, #156]	; (8005c70 <HAL_DMA_IRQHandler+0x1c8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d031      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <HAL_DMA_IRQHandler+0x1cc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d02c      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a24      	ldr	r2, [pc, #144]	; (8005c78 <HAL_DMA_IRQHandler+0x1d0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d027      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <HAL_DMA_IRQHandler+0x1d4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d022      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <HAL_DMA_IRQHandler+0x1d8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d01d      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1f      	ldr	r2, [pc, #124]	; (8005c84 <HAL_DMA_IRQHandler+0x1dc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d018      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1e      	ldr	r2, [pc, #120]	; (8005c88 <HAL_DMA_IRQHandler+0x1e0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1c      	ldr	r2, [pc, #112]	; (8005c8c <HAL_DMA_IRQHandler+0x1e4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00e      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1b      	ldr	r2, [pc, #108]	; (8005c90 <HAL_DMA_IRQHandler+0x1e8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <HAL_DMA_IRQHandler+0x1ec>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x194>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <HAL_DMA_IRQHandler+0x1f0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d12f      	bne.n	8005c9c <HAL_DMA_IRQHandler+0x1f4>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bf14      	ite	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	2300      	moveq	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	e02e      	b.n	8005cb0 <HAL_DMA_IRQHandler+0x208>
 8005c52:	bf00      	nop
 8005c54:	24000000 	.word	0x24000000
 8005c58:	1b4e81b5 	.word	0x1b4e81b5
 8005c5c:	40020010 	.word	0x40020010
 8005c60:	40020028 	.word	0x40020028
 8005c64:	40020040 	.word	0x40020040
 8005c68:	40020058 	.word	0x40020058
 8005c6c:	40020070 	.word	0x40020070
 8005c70:	40020088 	.word	0x40020088
 8005c74:	400200a0 	.word	0x400200a0
 8005c78:	400200b8 	.word	0x400200b8
 8005c7c:	40020410 	.word	0x40020410
 8005c80:	40020428 	.word	0x40020428
 8005c84:	40020440 	.word	0x40020440
 8005c88:	40020458 	.word	0x40020458
 8005c8c:	40020470 	.word	0x40020470
 8005c90:	40020488 	.word	0x40020488
 8005c94:	400204a0 	.word	0x400204a0
 8005c98:	400204b8 	.word	0x400204b8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bf14      	ite	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	2300      	moveq	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d015      	beq.n	8005ce0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0204 	bic.w	r2, r2, #4
 8005cc2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc8:	f003 031f 	and.w	r3, r3, #31
 8005ccc:	2208      	movs	r2, #8
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	f043 0201 	orr.w	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce4:	f003 031f 	and.w	r3, r3, #31
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	fa22 f303 	lsr.w	r3, r2, r3
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d06e      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a69      	ldr	r2, [pc, #420]	; (8005ea0 <HAL_DMA_IRQHandler+0x3f8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d04a      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a67      	ldr	r2, [pc, #412]	; (8005ea4 <HAL_DMA_IRQHandler+0x3fc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d045      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a66      	ldr	r2, [pc, #408]	; (8005ea8 <HAL_DMA_IRQHandler+0x400>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d040      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a64      	ldr	r2, [pc, #400]	; (8005eac <HAL_DMA_IRQHandler+0x404>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d03b      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a63      	ldr	r2, [pc, #396]	; (8005eb0 <HAL_DMA_IRQHandler+0x408>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d036      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a61      	ldr	r2, [pc, #388]	; (8005eb4 <HAL_DMA_IRQHandler+0x40c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d031      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a60      	ldr	r2, [pc, #384]	; (8005eb8 <HAL_DMA_IRQHandler+0x410>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d02c      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a5e      	ldr	r2, [pc, #376]	; (8005ebc <HAL_DMA_IRQHandler+0x414>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d027      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a5d      	ldr	r2, [pc, #372]	; (8005ec0 <HAL_DMA_IRQHandler+0x418>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d022      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a5b      	ldr	r2, [pc, #364]	; (8005ec4 <HAL_DMA_IRQHandler+0x41c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01d      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a5a      	ldr	r2, [pc, #360]	; (8005ec8 <HAL_DMA_IRQHandler+0x420>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d018      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a58      	ldr	r2, [pc, #352]	; (8005ecc <HAL_DMA_IRQHandler+0x424>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a57      	ldr	r2, [pc, #348]	; (8005ed0 <HAL_DMA_IRQHandler+0x428>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a55      	ldr	r2, [pc, #340]	; (8005ed4 <HAL_DMA_IRQHandler+0x42c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a54      	ldr	r2, [pc, #336]	; (8005ed8 <HAL_DMA_IRQHandler+0x430>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x2ee>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a52      	ldr	r2, [pc, #328]	; (8005edc <HAL_DMA_IRQHandler+0x434>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d10a      	bne.n	8005dac <HAL_DMA_IRQHandler+0x304>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bf14      	ite	ne
 8005da4:	2301      	movne	r3, #1
 8005da6:	2300      	moveq	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	e003      	b.n	8005db4 <HAL_DMA_IRQHandler+0x30c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00d      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	f043 0202 	orr.w	r2, r3, #2
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	2204      	movs	r2, #4
 8005dde:	409a      	lsls	r2, r3
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 808f 	beq.w	8005f08 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2c      	ldr	r2, [pc, #176]	; (8005ea0 <HAL_DMA_IRQHandler+0x3f8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04a      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <HAL_DMA_IRQHandler+0x3fc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d045      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <HAL_DMA_IRQHandler+0x400>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d040      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a27      	ldr	r2, [pc, #156]	; (8005eac <HAL_DMA_IRQHandler+0x404>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d03b      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a26      	ldr	r2, [pc, #152]	; (8005eb0 <HAL_DMA_IRQHandler+0x408>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d036      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a24      	ldr	r2, [pc, #144]	; (8005eb4 <HAL_DMA_IRQHandler+0x40c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d031      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a23      	ldr	r2, [pc, #140]	; (8005eb8 <HAL_DMA_IRQHandler+0x410>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02c      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <HAL_DMA_IRQHandler+0x414>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d027      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <HAL_DMA_IRQHandler+0x418>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <HAL_DMA_IRQHandler+0x41c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01d      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <HAL_DMA_IRQHandler+0x420>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ecc <HAL_DMA_IRQHandler+0x424>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a1a      	ldr	r2, [pc, #104]	; (8005ed0 <HAL_DMA_IRQHandler+0x428>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a18      	ldr	r2, [pc, #96]	; (8005ed4 <HAL_DMA_IRQHandler+0x42c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <HAL_DMA_IRQHandler+0x430>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x3e2>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_DMA_IRQHandler+0x434>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d12a      	bne.n	8005ee0 <HAL_DMA_IRQHandler+0x438>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e023      	b.n	8005ee8 <HAL_DMA_IRQHandler+0x440>
 8005ea0:	40020010 	.word	0x40020010
 8005ea4:	40020028 	.word	0x40020028
 8005ea8:	40020040 	.word	0x40020040
 8005eac:	40020058 	.word	0x40020058
 8005eb0:	40020070 	.word	0x40020070
 8005eb4:	40020088 	.word	0x40020088
 8005eb8:	400200a0 	.word	0x400200a0
 8005ebc:	400200b8 	.word	0x400200b8
 8005ec0:	40020410 	.word	0x40020410
 8005ec4:	40020428 	.word	0x40020428
 8005ec8:	40020440 	.word	0x40020440
 8005ecc:	40020458 	.word	0x40020458
 8005ed0:	40020470 	.word	0x40020470
 8005ed4:	40020488 	.word	0x40020488
 8005ed8:	400204a0 	.word	0x400204a0
 8005edc:	400204b8 	.word	0x400204b8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef0:	f003 031f 	and.w	r3, r3, #31
 8005ef4:	2204      	movs	r2, #4
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f043 0204 	orr.w	r2, r3, #4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0c:	f003 031f 	and.w	r3, r3, #31
 8005f10:	2210      	movs	r2, #16
 8005f12:	409a      	lsls	r2, r3
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80a6 	beq.w	800606a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a85      	ldr	r2, [pc, #532]	; (8006138 <HAL_DMA_IRQHandler+0x690>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d04a      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a83      	ldr	r2, [pc, #524]	; (800613c <HAL_DMA_IRQHandler+0x694>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d045      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a82      	ldr	r2, [pc, #520]	; (8006140 <HAL_DMA_IRQHandler+0x698>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d040      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a80      	ldr	r2, [pc, #512]	; (8006144 <HAL_DMA_IRQHandler+0x69c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d03b      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a7f      	ldr	r2, [pc, #508]	; (8006148 <HAL_DMA_IRQHandler+0x6a0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d036      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a7d      	ldr	r2, [pc, #500]	; (800614c <HAL_DMA_IRQHandler+0x6a4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d031      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a7c      	ldr	r2, [pc, #496]	; (8006150 <HAL_DMA_IRQHandler+0x6a8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d02c      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a7a      	ldr	r2, [pc, #488]	; (8006154 <HAL_DMA_IRQHandler+0x6ac>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d027      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a79      	ldr	r2, [pc, #484]	; (8006158 <HAL_DMA_IRQHandler+0x6b0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d022      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a77      	ldr	r2, [pc, #476]	; (800615c <HAL_DMA_IRQHandler+0x6b4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d01d      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a76      	ldr	r2, [pc, #472]	; (8006160 <HAL_DMA_IRQHandler+0x6b8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a74      	ldr	r2, [pc, #464]	; (8006164 <HAL_DMA_IRQHandler+0x6bc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a73      	ldr	r2, [pc, #460]	; (8006168 <HAL_DMA_IRQHandler+0x6c0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a71      	ldr	r2, [pc, #452]	; (800616c <HAL_DMA_IRQHandler+0x6c4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a70      	ldr	r2, [pc, #448]	; (8006170 <HAL_DMA_IRQHandler+0x6c8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_DMA_IRQHandler+0x516>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a6e      	ldr	r2, [pc, #440]	; (8006174 <HAL_DMA_IRQHandler+0x6cc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10a      	bne.n	8005fd4 <HAL_DMA_IRQHandler+0x52c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf14      	ite	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	2300      	moveq	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	e009      	b.n	8005fe8 <HAL_DMA_IRQHandler+0x540>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	2301      	movne	r3, #1
 8005fe4:	2300      	moveq	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d03e      	beq.n	800606a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	409a      	lsls	r2, r3
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d018      	beq.n	800603c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d108      	bne.n	800602a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d024      	beq.n	800606a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
 8006028:	e01f      	b.n	800606a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01b      	beq.n	800606a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
 800603a:	e016      	b.n	800606a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0208 	bic.w	r2, r2, #8
 8006058:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2220      	movs	r2, #32
 8006074:	409a      	lsls	r2, r3
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	4013      	ands	r3, r2
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8110 	beq.w	80062a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2c      	ldr	r2, [pc, #176]	; (8006138 <HAL_DMA_IRQHandler+0x690>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d04a      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2b      	ldr	r2, [pc, #172]	; (800613c <HAL_DMA_IRQHandler+0x694>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d045      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a29      	ldr	r2, [pc, #164]	; (8006140 <HAL_DMA_IRQHandler+0x698>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d040      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a28      	ldr	r2, [pc, #160]	; (8006144 <HAL_DMA_IRQHandler+0x69c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d03b      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a26      	ldr	r2, [pc, #152]	; (8006148 <HAL_DMA_IRQHandler+0x6a0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d036      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a25      	ldr	r2, [pc, #148]	; (800614c <HAL_DMA_IRQHandler+0x6a4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d031      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a23      	ldr	r2, [pc, #140]	; (8006150 <HAL_DMA_IRQHandler+0x6a8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d02c      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a22      	ldr	r2, [pc, #136]	; (8006154 <HAL_DMA_IRQHandler+0x6ac>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d027      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a20      	ldr	r2, [pc, #128]	; (8006158 <HAL_DMA_IRQHandler+0x6b0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d022      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_DMA_IRQHandler+0x6b4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d01d      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1d      	ldr	r2, [pc, #116]	; (8006160 <HAL_DMA_IRQHandler+0x6b8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d018      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_DMA_IRQHandler+0x6bc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d013      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <HAL_DMA_IRQHandler+0x6c0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00e      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_DMA_IRQHandler+0x6c4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d009      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a17      	ldr	r2, [pc, #92]	; (8006170 <HAL_DMA_IRQHandler+0x6c8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_DMA_IRQHandler+0x678>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a16      	ldr	r2, [pc, #88]	; (8006174 <HAL_DMA_IRQHandler+0x6cc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d12b      	bne.n	8006178 <HAL_DMA_IRQHandler+0x6d0>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	bf14      	ite	ne
 800612e:	2301      	movne	r3, #1
 8006130:	2300      	moveq	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	e02a      	b.n	800618c <HAL_DMA_IRQHandler+0x6e4>
 8006136:	bf00      	nop
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	bf14      	ite	ne
 8006186:	2301      	movne	r3, #1
 8006188:	2300      	moveq	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8087 	beq.w	80062a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2220      	movs	r2, #32
 800619c:	409a      	lsls	r2, r3
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d139      	bne.n	8006222 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0216 	bic.w	r2, r2, #22
 80061bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695a      	ldr	r2, [r3, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <HAL_DMA_IRQHandler+0x736>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0208 	bic.w	r2, r2, #8
 80061ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f2:	f003 031f 	and.w	r3, r3, #31
 80061f6:	223f      	movs	r2, #63	; 0x3f
 80061f8:	409a      	lsls	r2, r3
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 834a 	beq.w	80068ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
          }
          return;
 8006220:	e344      	b.n	80068ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d018      	beq.n	8006262 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d108      	bne.n	8006250 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006242:	2b00      	cmp	r3, #0
 8006244:	d02c      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
 800624e:	e027      	b.n	80062a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d023      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	4798      	blx	r3
 8006260:	e01e      	b.n	80062a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10f      	bne.n	8006290 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0210 	bic.w	r2, r2, #16
 800627e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8306 	beq.w	80068b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8088 	beq.w	80063c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2204      	movs	r2, #4
 80062bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a7a      	ldr	r2, [pc, #488]	; (80064b0 <HAL_DMA_IRQHandler+0xa08>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d04a      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a79      	ldr	r2, [pc, #484]	; (80064b4 <HAL_DMA_IRQHandler+0xa0c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d045      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a77      	ldr	r2, [pc, #476]	; (80064b8 <HAL_DMA_IRQHandler+0xa10>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d040      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a76      	ldr	r2, [pc, #472]	; (80064bc <HAL_DMA_IRQHandler+0xa14>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d03b      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a74      	ldr	r2, [pc, #464]	; (80064c0 <HAL_DMA_IRQHandler+0xa18>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d036      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a73      	ldr	r2, [pc, #460]	; (80064c4 <HAL_DMA_IRQHandler+0xa1c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d031      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a71      	ldr	r2, [pc, #452]	; (80064c8 <HAL_DMA_IRQHandler+0xa20>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d02c      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a70      	ldr	r2, [pc, #448]	; (80064cc <HAL_DMA_IRQHandler+0xa24>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d027      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a6e      	ldr	r2, [pc, #440]	; (80064d0 <HAL_DMA_IRQHandler+0xa28>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d022      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a6d      	ldr	r2, [pc, #436]	; (80064d4 <HAL_DMA_IRQHandler+0xa2c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d01d      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6b      	ldr	r2, [pc, #428]	; (80064d8 <HAL_DMA_IRQHandler+0xa30>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d018      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a6a      	ldr	r2, [pc, #424]	; (80064dc <HAL_DMA_IRQHandler+0xa34>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a68      	ldr	r2, [pc, #416]	; (80064e0 <HAL_DMA_IRQHandler+0xa38>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00e      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a67      	ldr	r2, [pc, #412]	; (80064e4 <HAL_DMA_IRQHandler+0xa3c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d009      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a65      	ldr	r2, [pc, #404]	; (80064e8 <HAL_DMA_IRQHandler+0xa40>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <HAL_DMA_IRQHandler+0x8b8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a64      	ldr	r2, [pc, #400]	; (80064ec <HAL_DMA_IRQHandler+0xa44>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d108      	bne.n	8006372 <HAL_DMA_IRQHandler+0x8ca>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	e007      	b.n	8006382 <HAL_DMA_IRQHandler+0x8da>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638a:	429a      	cmp	r2, r3
 800638c:	d307      	bcc.n	800639e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f2      	bne.n	8006382 <HAL_DMA_IRQHandler+0x8da>
 800639c:	e000      	b.n	80063a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800639e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2203      	movs	r2, #3
 80063b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80063b6:	e003      	b.n	80063c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8272 	beq.w	80068b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
 80063da:	e26c      	b.n	80068b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a43      	ldr	r2, [pc, #268]	; (80064f0 <HAL_DMA_IRQHandler+0xa48>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d022      	beq.n	800642c <HAL_DMA_IRQHandler+0x984>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a42      	ldr	r2, [pc, #264]	; (80064f4 <HAL_DMA_IRQHandler+0xa4c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d01d      	beq.n	800642c <HAL_DMA_IRQHandler+0x984>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a40      	ldr	r2, [pc, #256]	; (80064f8 <HAL_DMA_IRQHandler+0xa50>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d018      	beq.n	800642c <HAL_DMA_IRQHandler+0x984>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a3f      	ldr	r2, [pc, #252]	; (80064fc <HAL_DMA_IRQHandler+0xa54>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <HAL_DMA_IRQHandler+0x984>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a3d      	ldr	r2, [pc, #244]	; (8006500 <HAL_DMA_IRQHandler+0xa58>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00e      	beq.n	800642c <HAL_DMA_IRQHandler+0x984>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3c      	ldr	r2, [pc, #240]	; (8006504 <HAL_DMA_IRQHandler+0xa5c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d009      	beq.n	800642c <HAL_DMA_IRQHandler+0x984>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a3a      	ldr	r2, [pc, #232]	; (8006508 <HAL_DMA_IRQHandler+0xa60>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_DMA_IRQHandler+0x984>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a39      	ldr	r2, [pc, #228]	; (800650c <HAL_DMA_IRQHandler+0xa64>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d101      	bne.n	8006430 <HAL_DMA_IRQHandler+0x988>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <HAL_DMA_IRQHandler+0x98a>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 823f 	beq.w	80068b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	2204      	movs	r2, #4
 800644a:	409a      	lsls	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80cd 	beq.w	80065f0 <HAL_DMA_IRQHandler+0xb48>
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80c7 	beq.w	80065f0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2204      	movs	r2, #4
 800646c:	409a      	lsls	r2, r3
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d049      	beq.n	8006510 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 8210 	beq.w	80068b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006498:	e20a      	b.n	80068b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8206 	beq.w	80068b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ac:	e200      	b.n	80068b0 <HAL_DMA_IRQHandler+0xe08>
 80064ae:	bf00      	nop
 80064b0:	40020010 	.word	0x40020010
 80064b4:	40020028 	.word	0x40020028
 80064b8:	40020040 	.word	0x40020040
 80064bc:	40020058 	.word	0x40020058
 80064c0:	40020070 	.word	0x40020070
 80064c4:	40020088 	.word	0x40020088
 80064c8:	400200a0 	.word	0x400200a0
 80064cc:	400200b8 	.word	0x400200b8
 80064d0:	40020410 	.word	0x40020410
 80064d4:	40020428 	.word	0x40020428
 80064d8:	40020440 	.word	0x40020440
 80064dc:	40020458 	.word	0x40020458
 80064e0:	40020470 	.word	0x40020470
 80064e4:	40020488 	.word	0x40020488
 80064e8:	400204a0 	.word	0x400204a0
 80064ec:	400204b8 	.word	0x400204b8
 80064f0:	58025408 	.word	0x58025408
 80064f4:	5802541c 	.word	0x5802541c
 80064f8:	58025430 	.word	0x58025430
 80064fc:	58025444 	.word	0x58025444
 8006500:	58025458 	.word	0x58025458
 8006504:	5802546c 	.word	0x5802546c
 8006508:	58025480 	.word	0x58025480
 800650c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d160      	bne.n	80065dc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a7f      	ldr	r2, [pc, #508]	; (800671c <HAL_DMA_IRQHandler+0xc74>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a7d      	ldr	r2, [pc, #500]	; (8006720 <HAL_DMA_IRQHandler+0xc78>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a7c      	ldr	r2, [pc, #496]	; (8006724 <HAL_DMA_IRQHandler+0xc7c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a7a      	ldr	r2, [pc, #488]	; (8006728 <HAL_DMA_IRQHandler+0xc80>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a79      	ldr	r2, [pc, #484]	; (800672c <HAL_DMA_IRQHandler+0xc84>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a77      	ldr	r2, [pc, #476]	; (8006730 <HAL_DMA_IRQHandler+0xc88>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a76      	ldr	r2, [pc, #472]	; (8006734 <HAL_DMA_IRQHandler+0xc8c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a74      	ldr	r2, [pc, #464]	; (8006738 <HAL_DMA_IRQHandler+0xc90>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a73      	ldr	r2, [pc, #460]	; (800673c <HAL_DMA_IRQHandler+0xc94>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a71      	ldr	r2, [pc, #452]	; (8006740 <HAL_DMA_IRQHandler+0xc98>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a70      	ldr	r2, [pc, #448]	; (8006744 <HAL_DMA_IRQHandler+0xc9c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a6e      	ldr	r2, [pc, #440]	; (8006748 <HAL_DMA_IRQHandler+0xca0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a6d      	ldr	r2, [pc, #436]	; (800674c <HAL_DMA_IRQHandler+0xca4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a6b      	ldr	r2, [pc, #428]	; (8006750 <HAL_DMA_IRQHandler+0xca8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a6a      	ldr	r2, [pc, #424]	; (8006754 <HAL_DMA_IRQHandler+0xcac>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_IRQHandler+0xb12>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a68      	ldr	r2, [pc, #416]	; (8006758 <HAL_DMA_IRQHandler+0xcb0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d108      	bne.n	80065cc <HAL_DMA_IRQHandler+0xb24>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0208 	bic.w	r2, r2, #8
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e007      	b.n	80065dc <HAL_DMA_IRQHandler+0xb34>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0204 	bic.w	r2, r2, #4
 80065da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 8165 	beq.w	80068b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065ee:	e15f      	b.n	80068b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2202      	movs	r2, #2
 80065fa:	409a      	lsls	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	4013      	ands	r3, r2
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80c5 	beq.w	8006790 <HAL_DMA_IRQHandler+0xce8>
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80bf 	beq.w	8006790 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	2202      	movs	r2, #2
 800661c:	409a      	lsls	r2, r3
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d018      	beq.n	800665e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d109      	bne.n	800664a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 813a 	beq.w	80068b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006648:	e134      	b.n	80068b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8130 	beq.w	80068b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800665c:	e12a      	b.n	80068b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	f040 8089 	bne.w	800677c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2b      	ldr	r2, [pc, #172]	; (800671c <HAL_DMA_IRQHandler+0xc74>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d04a      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a29      	ldr	r2, [pc, #164]	; (8006720 <HAL_DMA_IRQHandler+0xc78>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d045      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a28      	ldr	r2, [pc, #160]	; (8006724 <HAL_DMA_IRQHandler+0xc7c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d040      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a26      	ldr	r2, [pc, #152]	; (8006728 <HAL_DMA_IRQHandler+0xc80>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d03b      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a25      	ldr	r2, [pc, #148]	; (800672c <HAL_DMA_IRQHandler+0xc84>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d036      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a23      	ldr	r2, [pc, #140]	; (8006730 <HAL_DMA_IRQHandler+0xc88>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d031      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a22      	ldr	r2, [pc, #136]	; (8006734 <HAL_DMA_IRQHandler+0xc8c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d02c      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a20      	ldr	r2, [pc, #128]	; (8006738 <HAL_DMA_IRQHandler+0xc90>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d027      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1f      	ldr	r2, [pc, #124]	; (800673c <HAL_DMA_IRQHandler+0xc94>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d022      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <HAL_DMA_IRQHandler+0xc98>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d01d      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <HAL_DMA_IRQHandler+0xc9c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d018      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <HAL_DMA_IRQHandler+0xca0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a19      	ldr	r2, [pc, #100]	; (800674c <HAL_DMA_IRQHandler+0xca4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00e      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a17      	ldr	r2, [pc, #92]	; (8006750 <HAL_DMA_IRQHandler+0xca8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d009      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a16      	ldr	r2, [pc, #88]	; (8006754 <HAL_DMA_IRQHandler+0xcac>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d004      	beq.n	800670a <HAL_DMA_IRQHandler+0xc62>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a14      	ldr	r2, [pc, #80]	; (8006758 <HAL_DMA_IRQHandler+0xcb0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d128      	bne.n	800675c <HAL_DMA_IRQHandler+0xcb4>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0214 	bic.w	r2, r2, #20
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	e027      	b.n	800676c <HAL_DMA_IRQHandler+0xcc4>
 800671c:	40020010 	.word	0x40020010
 8006720:	40020028 	.word	0x40020028
 8006724:	40020040 	.word	0x40020040
 8006728:	40020058 	.word	0x40020058
 800672c:	40020070 	.word	0x40020070
 8006730:	40020088 	.word	0x40020088
 8006734:	400200a0 	.word	0x400200a0
 8006738:	400200b8 	.word	0x400200b8
 800673c:	40020410 	.word	0x40020410
 8006740:	40020428 	.word	0x40020428
 8006744:	40020440 	.word	0x40020440
 8006748:	40020458 	.word	0x40020458
 800674c:	40020470 	.word	0x40020470
 8006750:	40020488 	.word	0x40020488
 8006754:	400204a0 	.word	0x400204a0
 8006758:	400204b8 	.word	0x400204b8
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 020a 	bic.w	r2, r2, #10
 800676a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8097 	beq.w	80068b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800678e:	e091      	b.n	80068b4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	2208      	movs	r2, #8
 800679a:	409a      	lsls	r2, r3
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	4013      	ands	r3, r2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8088 	beq.w	80068b6 <HAL_DMA_IRQHandler+0xe0e>
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8082 	beq.w	80068b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a41      	ldr	r2, [pc, #260]	; (80068bc <HAL_DMA_IRQHandler+0xe14>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d04a      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a3f      	ldr	r2, [pc, #252]	; (80068c0 <HAL_DMA_IRQHandler+0xe18>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d045      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a3e      	ldr	r2, [pc, #248]	; (80068c4 <HAL_DMA_IRQHandler+0xe1c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d040      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a3c      	ldr	r2, [pc, #240]	; (80068c8 <HAL_DMA_IRQHandler+0xe20>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d03b      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a3b      	ldr	r2, [pc, #236]	; (80068cc <HAL_DMA_IRQHandler+0xe24>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d036      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a39      	ldr	r2, [pc, #228]	; (80068d0 <HAL_DMA_IRQHandler+0xe28>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d031      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a38      	ldr	r2, [pc, #224]	; (80068d4 <HAL_DMA_IRQHandler+0xe2c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d02c      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a36      	ldr	r2, [pc, #216]	; (80068d8 <HAL_DMA_IRQHandler+0xe30>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d027      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a35      	ldr	r2, [pc, #212]	; (80068dc <HAL_DMA_IRQHandler+0xe34>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d022      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a33      	ldr	r2, [pc, #204]	; (80068e0 <HAL_DMA_IRQHandler+0xe38>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01d      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a32      	ldr	r2, [pc, #200]	; (80068e4 <HAL_DMA_IRQHandler+0xe3c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d018      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a30      	ldr	r2, [pc, #192]	; (80068e8 <HAL_DMA_IRQHandler+0xe40>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2f      	ldr	r2, [pc, #188]	; (80068ec <HAL_DMA_IRQHandler+0xe44>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a2d      	ldr	r2, [pc, #180]	; (80068f0 <HAL_DMA_IRQHandler+0xe48>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d009      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a2c      	ldr	r2, [pc, #176]	; (80068f4 <HAL_DMA_IRQHandler+0xe4c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_DMA_IRQHandler+0xdaa>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a2a      	ldr	r2, [pc, #168]	; (80068f8 <HAL_DMA_IRQHandler+0xe50>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <HAL_DMA_IRQHandler+0xdbc>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 021c 	bic.w	r2, r2, #28
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e007      	b.n	8006874 <HAL_DMA_IRQHandler+0xdcc>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 020e 	bic.w	r2, r2, #14
 8006872:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	2201      	movs	r2, #1
 800687e:	409a      	lsls	r2, r3
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	e004      	b.n	80068b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80068ac:	bf00      	nop
 80068ae:	e002      	b.n	80068b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068b0:	bf00      	nop
 80068b2:	e000      	b.n	80068b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80068b6:	3728      	adds	r7, #40	; 0x28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40020010 	.word	0x40020010
 80068c0:	40020028 	.word	0x40020028
 80068c4:	40020040 	.word	0x40020040
 80068c8:	40020058 	.word	0x40020058
 80068cc:	40020070 	.word	0x40020070
 80068d0:	40020088 	.word	0x40020088
 80068d4:	400200a0 	.word	0x400200a0
 80068d8:	400200b8 	.word	0x400200b8
 80068dc:	40020410 	.word	0x40020410
 80068e0:	40020428 	.word	0x40020428
 80068e4:	40020440 	.word	0x40020440
 80068e8:	40020458 	.word	0x40020458
 80068ec:	40020470 	.word	0x40020470
 80068f0:	40020488 	.word	0x40020488
 80068f4:	400204a0 	.word	0x400204a0
 80068f8:	400204b8 	.word	0x400204b8

080068fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006914:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a7f      	ldr	r2, [pc, #508]	; (8006b18 <DMA_SetConfig+0x21c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d072      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a7d      	ldr	r2, [pc, #500]	; (8006b1c <DMA_SetConfig+0x220>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d06d      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a7c      	ldr	r2, [pc, #496]	; (8006b20 <DMA_SetConfig+0x224>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d068      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a7a      	ldr	r2, [pc, #488]	; (8006b24 <DMA_SetConfig+0x228>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d063      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a79      	ldr	r2, [pc, #484]	; (8006b28 <DMA_SetConfig+0x22c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d05e      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a77      	ldr	r2, [pc, #476]	; (8006b2c <DMA_SetConfig+0x230>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d059      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a76      	ldr	r2, [pc, #472]	; (8006b30 <DMA_SetConfig+0x234>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d054      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a74      	ldr	r2, [pc, #464]	; (8006b34 <DMA_SetConfig+0x238>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d04f      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a73      	ldr	r2, [pc, #460]	; (8006b38 <DMA_SetConfig+0x23c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d04a      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a71      	ldr	r2, [pc, #452]	; (8006b3c <DMA_SetConfig+0x240>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d045      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a70      	ldr	r2, [pc, #448]	; (8006b40 <DMA_SetConfig+0x244>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d040      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a6e      	ldr	r2, [pc, #440]	; (8006b44 <DMA_SetConfig+0x248>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d03b      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a6d      	ldr	r2, [pc, #436]	; (8006b48 <DMA_SetConfig+0x24c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d036      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a6b      	ldr	r2, [pc, #428]	; (8006b4c <DMA_SetConfig+0x250>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d031      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a6a      	ldr	r2, [pc, #424]	; (8006b50 <DMA_SetConfig+0x254>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d02c      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a68      	ldr	r2, [pc, #416]	; (8006b54 <DMA_SetConfig+0x258>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d027      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a67      	ldr	r2, [pc, #412]	; (8006b58 <DMA_SetConfig+0x25c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d022      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a65      	ldr	r2, [pc, #404]	; (8006b5c <DMA_SetConfig+0x260>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01d      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a64      	ldr	r2, [pc, #400]	; (8006b60 <DMA_SetConfig+0x264>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d018      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a62      	ldr	r2, [pc, #392]	; (8006b64 <DMA_SetConfig+0x268>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a61      	ldr	r2, [pc, #388]	; (8006b68 <DMA_SetConfig+0x26c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a5f      	ldr	r2, [pc, #380]	; (8006b6c <DMA_SetConfig+0x270>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d009      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a5e      	ldr	r2, [pc, #376]	; (8006b70 <DMA_SetConfig+0x274>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <DMA_SetConfig+0x10a>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a5c      	ldr	r2, [pc, #368]	; (8006b74 <DMA_SetConfig+0x278>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d101      	bne.n	8006a0a <DMA_SetConfig+0x10e>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <DMA_SetConfig+0x110>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a39      	ldr	r2, [pc, #228]	; (8006b18 <DMA_SetConfig+0x21c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d04a      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a38      	ldr	r2, [pc, #224]	; (8006b1c <DMA_SetConfig+0x220>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d045      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a36      	ldr	r2, [pc, #216]	; (8006b20 <DMA_SetConfig+0x224>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d040      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a35      	ldr	r2, [pc, #212]	; (8006b24 <DMA_SetConfig+0x228>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d03b      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a33      	ldr	r2, [pc, #204]	; (8006b28 <DMA_SetConfig+0x22c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d036      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a32      	ldr	r2, [pc, #200]	; (8006b2c <DMA_SetConfig+0x230>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d031      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a30      	ldr	r2, [pc, #192]	; (8006b30 <DMA_SetConfig+0x234>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d02c      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a2f      	ldr	r2, [pc, #188]	; (8006b34 <DMA_SetConfig+0x238>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d027      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a2d      	ldr	r2, [pc, #180]	; (8006b38 <DMA_SetConfig+0x23c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d022      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a2c      	ldr	r2, [pc, #176]	; (8006b3c <DMA_SetConfig+0x240>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d01d      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a2a      	ldr	r2, [pc, #168]	; (8006b40 <DMA_SetConfig+0x244>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d018      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a29      	ldr	r2, [pc, #164]	; (8006b44 <DMA_SetConfig+0x248>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d013      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <DMA_SetConfig+0x24c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00e      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a26      	ldr	r2, [pc, #152]	; (8006b4c <DMA_SetConfig+0x250>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d009      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a24      	ldr	r2, [pc, #144]	; (8006b50 <DMA_SetConfig+0x254>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d004      	beq.n	8006acc <DMA_SetConfig+0x1d0>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a23      	ldr	r2, [pc, #140]	; (8006b54 <DMA_SetConfig+0x258>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d101      	bne.n	8006ad0 <DMA_SetConfig+0x1d4>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <DMA_SetConfig+0x1d6>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d059      	beq.n	8006b8a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	223f      	movs	r2, #63	; 0x3f
 8006ae0:	409a      	lsls	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006af4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d138      	bne.n	8006b78 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b16:	e086      	b.n	8006c26 <DMA_SetConfig+0x32a>
 8006b18:	40020010 	.word	0x40020010
 8006b1c:	40020028 	.word	0x40020028
 8006b20:	40020040 	.word	0x40020040
 8006b24:	40020058 	.word	0x40020058
 8006b28:	40020070 	.word	0x40020070
 8006b2c:	40020088 	.word	0x40020088
 8006b30:	400200a0 	.word	0x400200a0
 8006b34:	400200b8 	.word	0x400200b8
 8006b38:	40020410 	.word	0x40020410
 8006b3c:	40020428 	.word	0x40020428
 8006b40:	40020440 	.word	0x40020440
 8006b44:	40020458 	.word	0x40020458
 8006b48:	40020470 	.word	0x40020470
 8006b4c:	40020488 	.word	0x40020488
 8006b50:	400204a0 	.word	0x400204a0
 8006b54:	400204b8 	.word	0x400204b8
 8006b58:	58025408 	.word	0x58025408
 8006b5c:	5802541c 	.word	0x5802541c
 8006b60:	58025430 	.word	0x58025430
 8006b64:	58025444 	.word	0x58025444
 8006b68:	58025458 	.word	0x58025458
 8006b6c:	5802546c 	.word	0x5802546c
 8006b70:	58025480 	.word	0x58025480
 8006b74:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	60da      	str	r2, [r3, #12]
}
 8006b88:	e04d      	b.n	8006c26 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a29      	ldr	r2, [pc, #164]	; (8006c34 <DMA_SetConfig+0x338>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d022      	beq.n	8006bda <DMA_SetConfig+0x2de>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a27      	ldr	r2, [pc, #156]	; (8006c38 <DMA_SetConfig+0x33c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d01d      	beq.n	8006bda <DMA_SetConfig+0x2de>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a26      	ldr	r2, [pc, #152]	; (8006c3c <DMA_SetConfig+0x340>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d018      	beq.n	8006bda <DMA_SetConfig+0x2de>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a24      	ldr	r2, [pc, #144]	; (8006c40 <DMA_SetConfig+0x344>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <DMA_SetConfig+0x2de>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a23      	ldr	r2, [pc, #140]	; (8006c44 <DMA_SetConfig+0x348>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00e      	beq.n	8006bda <DMA_SetConfig+0x2de>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a21      	ldr	r2, [pc, #132]	; (8006c48 <DMA_SetConfig+0x34c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d009      	beq.n	8006bda <DMA_SetConfig+0x2de>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <DMA_SetConfig+0x350>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d004      	beq.n	8006bda <DMA_SetConfig+0x2de>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	; (8006c50 <DMA_SetConfig+0x354>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d101      	bne.n	8006bde <DMA_SetConfig+0x2e2>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <DMA_SetConfig+0x2e4>
 8006bde:	2300      	movs	r3, #0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d020      	beq.n	8006c26 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2201      	movs	r2, #1
 8006bee:	409a      	lsls	r2, r3
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d108      	bne.n	8006c16 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	60da      	str	r2, [r3, #12]
}
 8006c14:	e007      	b.n	8006c26 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	60da      	str	r2, [r3, #12]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	58025408 	.word	0x58025408
 8006c38:	5802541c 	.word	0x5802541c
 8006c3c:	58025430 	.word	0x58025430
 8006c40:	58025444 	.word	0x58025444
 8006c44:	58025458 	.word	0x58025458
 8006c48:	5802546c 	.word	0x5802546c
 8006c4c:	58025480 	.word	0x58025480
 8006c50:	58025494 	.word	0x58025494

08006c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a42      	ldr	r2, [pc, #264]	; (8006d6c <DMA_CalcBaseAndBitshift+0x118>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d04a      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a41      	ldr	r2, [pc, #260]	; (8006d70 <DMA_CalcBaseAndBitshift+0x11c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d045      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a3f      	ldr	r2, [pc, #252]	; (8006d74 <DMA_CalcBaseAndBitshift+0x120>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d040      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a3e      	ldr	r2, [pc, #248]	; (8006d78 <DMA_CalcBaseAndBitshift+0x124>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d03b      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a3c      	ldr	r2, [pc, #240]	; (8006d7c <DMA_CalcBaseAndBitshift+0x128>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d036      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a3b      	ldr	r2, [pc, #236]	; (8006d80 <DMA_CalcBaseAndBitshift+0x12c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d031      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a39      	ldr	r2, [pc, #228]	; (8006d84 <DMA_CalcBaseAndBitshift+0x130>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d02c      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a38      	ldr	r2, [pc, #224]	; (8006d88 <DMA_CalcBaseAndBitshift+0x134>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d027      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a36      	ldr	r2, [pc, #216]	; (8006d8c <DMA_CalcBaseAndBitshift+0x138>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d022      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a35      	ldr	r2, [pc, #212]	; (8006d90 <DMA_CalcBaseAndBitshift+0x13c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d01d      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a33      	ldr	r2, [pc, #204]	; (8006d94 <DMA_CalcBaseAndBitshift+0x140>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a32      	ldr	r2, [pc, #200]	; (8006d98 <DMA_CalcBaseAndBitshift+0x144>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d013      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a30      	ldr	r2, [pc, #192]	; (8006d9c <DMA_CalcBaseAndBitshift+0x148>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a2f      	ldr	r2, [pc, #188]	; (8006da0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a2d      	ldr	r2, [pc, #180]	; (8006da4 <DMA_CalcBaseAndBitshift+0x150>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <DMA_CalcBaseAndBitshift+0xa8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <DMA_CalcBaseAndBitshift+0x154>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d101      	bne.n	8006d00 <DMA_CalcBaseAndBitshift+0xac>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e000      	b.n	8006d02 <DMA_CalcBaseAndBitshift+0xae>
 8006d00:	2300      	movs	r3, #0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d024      	beq.n	8006d50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	3b10      	subs	r3, #16
 8006d0e:	4a27      	ldr	r2, [pc, #156]	; (8006dac <DMA_CalcBaseAndBitshift+0x158>)
 8006d10:	fba2 2303 	umull	r2, r3, r2, r3
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006d20:	5cd3      	ldrb	r3, [r2, r3]
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d908      	bls.n	8006d40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <DMA_CalcBaseAndBitshift+0x160>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	1d1a      	adds	r2, r3, #4
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	659a      	str	r2, [r3, #88]	; 0x58
 8006d3e:	e00d      	b.n	8006d5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <DMA_CalcBaseAndBitshift+0x160>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8006d4e:	e005      	b.n	8006d5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	40020010 	.word	0x40020010
 8006d70:	40020028 	.word	0x40020028
 8006d74:	40020040 	.word	0x40020040
 8006d78:	40020058 	.word	0x40020058
 8006d7c:	40020070 	.word	0x40020070
 8006d80:	40020088 	.word	0x40020088
 8006d84:	400200a0 	.word	0x400200a0
 8006d88:	400200b8 	.word	0x400200b8
 8006d8c:	40020410 	.word	0x40020410
 8006d90:	40020428 	.word	0x40020428
 8006d94:	40020440 	.word	0x40020440
 8006d98:	40020458 	.word	0x40020458
 8006d9c:	40020470 	.word	0x40020470
 8006da0:	40020488 	.word	0x40020488
 8006da4:	400204a0 	.word	0x400204a0
 8006da8:	400204b8 	.word	0x400204b8
 8006dac:	aaaaaaab 	.word	0xaaaaaaab
 8006db0:	0801335c 	.word	0x0801335c
 8006db4:	fffffc00 	.word	0xfffffc00

08006db8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d120      	bne.n	8006e0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d858      	bhi.n	8006e86 <DMA_CheckFifoParam+0xce>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <DMA_CheckFifoParam+0x24>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006dff 	.word	0x08006dff
 8006de4:	08006ded 	.word	0x08006ded
 8006de8:	08006e87 	.word	0x08006e87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d048      	beq.n	8006e8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006dfc:	e045      	b.n	8006e8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e06:	d142      	bne.n	8006e8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e0c:	e03f      	b.n	8006e8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e16:	d123      	bne.n	8006e60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d838      	bhi.n	8006e92 <DMA_CheckFifoParam+0xda>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <DMA_CheckFifoParam+0x70>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e3f 	.word	0x08006e3f
 8006e30:	08006e39 	.word	0x08006e39
 8006e34:	08006e51 	.word	0x08006e51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	73fb      	strb	r3, [r7, #15]
        break;
 8006e3c:	e030      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d025      	beq.n	8006e96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e4e:	e022      	b.n	8006e96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e58:	d11f      	bne.n	8006e9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006e5e:	e01c      	b.n	8006e9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d902      	bls.n	8006e6e <DMA_CheckFifoParam+0xb6>
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d003      	beq.n	8006e74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006e6c:	e018      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	73fb      	strb	r3, [r7, #15]
        break;
 8006e72:	e015      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00e      	beq.n	8006e9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
    break;
 8006e84:	e00b      	b.n	8006e9e <DMA_CheckFifoParam+0xe6>
        break;
 8006e86:	bf00      	nop
 8006e88:	e00a      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8006e8a:	bf00      	nop
 8006e8c:	e008      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8006e8e:	bf00      	nop
 8006e90:	e006      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8006e92:	bf00      	nop
 8006e94:	e004      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8006e96:	bf00      	nop
 8006e98:	e002      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>
        break;
 8006e9a:	bf00      	nop
 8006e9c:	e000      	b.n	8006ea0 <DMA_CheckFifoParam+0xe8>
    break;
 8006e9e:	bf00      	nop
    }
  }

  return status;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop

08006eb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a38      	ldr	r2, [pc, #224]	; (8006fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d022      	beq.n	8006f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a36      	ldr	r2, [pc, #216]	; (8006fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d01d      	beq.n	8006f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a35      	ldr	r2, [pc, #212]	; (8006fac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d018      	beq.n	8006f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a33      	ldr	r2, [pc, #204]	; (8006fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d013      	beq.n	8006f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a32      	ldr	r2, [pc, #200]	; (8006fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00e      	beq.n	8006f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a30      	ldr	r2, [pc, #192]	; (8006fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d009      	beq.n	8006f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a2f      	ldr	r2, [pc, #188]	; (8006fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d004      	beq.n	8006f0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a2d      	ldr	r2, [pc, #180]	; (8006fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d101      	bne.n	8006f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006f12:	2300      	movs	r3, #0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01a      	beq.n	8006f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	3b08      	subs	r3, #8
 8006f20:	4a28      	ldr	r2, [pc, #160]	; (8006fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	091b      	lsrs	r3, r3, #4
 8006f28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4b26      	ldr	r3, [pc, #152]	; (8006fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	461a      	mov	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a24      	ldr	r2, [pc, #144]	; (8006fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006f3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	2201      	movs	r2, #1
 8006f46:	409a      	lsls	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006f4c:	e024      	b.n	8006f98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	3b10      	subs	r3, #16
 8006f56:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006f58:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d806      	bhi.n	8006f76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d902      	bls.n	8006f76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3308      	adds	r3, #8
 8006f74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a16      	ldr	r2, [pc, #88]	; (8006fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006f88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	2201      	movs	r2, #1
 8006f92:	409a      	lsls	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f98:	bf00      	nop
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	58025408 	.word	0x58025408
 8006fa8:	5802541c 	.word	0x5802541c
 8006fac:	58025430 	.word	0x58025430
 8006fb0:	58025444 	.word	0x58025444
 8006fb4:	58025458 	.word	0x58025458
 8006fb8:	5802546c 	.word	0x5802546c
 8006fbc:	58025480 	.word	0x58025480
 8006fc0:	58025494 	.word	0x58025494
 8006fc4:	cccccccd 	.word	0xcccccccd
 8006fc8:	16009600 	.word	0x16009600
 8006fcc:	58025880 	.word	0x58025880
 8006fd0:	aaaaaaab 	.word	0xaaaaaaab
 8006fd4:	400204b8 	.word	0x400204b8
 8006fd8:	4002040f 	.word	0x4002040f
 8006fdc:	10008200 	.word	0x10008200
 8006fe0:	40020880 	.word	0x40020880

08006fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d04a      	beq.n	8007090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d847      	bhi.n	8007090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a25      	ldr	r2, [pc, #148]	; (800709c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d022      	beq.n	8007050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a24      	ldr	r2, [pc, #144]	; (80070a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d01d      	beq.n	8007050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a22      	ldr	r2, [pc, #136]	; (80070a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d018      	beq.n	8007050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a21      	ldr	r2, [pc, #132]	; (80070a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1f      	ldr	r2, [pc, #124]	; (80070ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00e      	beq.n	8007050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1e      	ldr	r2, [pc, #120]	; (80070b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d009      	beq.n	8007050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d101      	bne.n	8007054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007054:	2300      	movs	r3, #0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	461a      	mov	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800706c:	671a      	str	r2, [r3, #112]	; 0x70
 800706e:	e009      	b.n	8007084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4b14      	ldr	r3, [pc, #80]	; (80070c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	461a      	mov	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a11      	ldr	r2, [pc, #68]	; (80070c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007082:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3b01      	subs	r3, #1
 8007088:	2201      	movs	r2, #1
 800708a:	409a      	lsls	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	58025408 	.word	0x58025408
 80070a0:	5802541c 	.word	0x5802541c
 80070a4:	58025430 	.word	0x58025430
 80070a8:	58025444 	.word	0x58025444
 80070ac:	58025458 	.word	0x58025458
 80070b0:	5802546c 	.word	0x5802546c
 80070b4:	58025480 	.word	0x58025480
 80070b8:	58025494 	.word	0x58025494
 80070bc:	1600963f 	.word	0x1600963f
 80070c0:	58025940 	.word	0x58025940
 80070c4:	1000823f 	.word	0x1000823f
 80070c8:	40020940 	.word	0x40020940

080070cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b089      	sub	sp, #36	; 0x24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80070da:	4b89      	ldr	r3, [pc, #548]	; (8007300 <HAL_GPIO_Init+0x234>)
 80070dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80070de:	e194      	b.n	800740a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	2101      	movs	r1, #1
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ec:	4013      	ands	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 8186 	beq.w	8007404 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	2b01      	cmp	r3, #1
 8007102:	d005      	beq.n	8007110 <HAL_GPIO_Init+0x44>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d130      	bne.n	8007172 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	2203      	movs	r2, #3
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	43db      	mvns	r3, r3
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	4013      	ands	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	4313      	orrs	r3, r2
 8007138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007146:	2201      	movs	r2, #1
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	43db      	mvns	r3, r3
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	4013      	ands	r3, r2
 8007154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	091b      	lsrs	r3, r3, #4
 800715c:	f003 0201 	and.w	r2, r3, #1
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	4313      	orrs	r3, r2
 800716a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b03      	cmp	r3, #3
 800717c:	d017      	beq.n	80071ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	2203      	movs	r2, #3
 800718a:	fa02 f303 	lsl.w	r3, r2, r3
 800718e:	43db      	mvns	r3, r3
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	4013      	ands	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d123      	bne.n	8007202 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	08da      	lsrs	r2, r3, #3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3208      	adds	r2, #8
 80071c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	220f      	movs	r2, #15
 80071d2:	fa02 f303 	lsl.w	r3, r2, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	4013      	ands	r3, r2
 80071dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	08da      	lsrs	r2, r3, #3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3208      	adds	r2, #8
 80071fc:	69b9      	ldr	r1, [r7, #24]
 80071fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	2203      	movs	r2, #3
 800720e:	fa02 f303 	lsl.w	r3, r2, r3
 8007212:	43db      	mvns	r3, r3
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	4013      	ands	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f003 0203 	and.w	r2, r3, #3
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	4313      	orrs	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80e0 	beq.w	8007404 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007244:	4b2f      	ldr	r3, [pc, #188]	; (8007304 <HAL_GPIO_Init+0x238>)
 8007246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800724a:	4a2e      	ldr	r2, [pc, #184]	; (8007304 <HAL_GPIO_Init+0x238>)
 800724c:	f043 0302 	orr.w	r3, r3, #2
 8007250:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007254:	4b2b      	ldr	r3, [pc, #172]	; (8007304 <HAL_GPIO_Init+0x238>)
 8007256:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800725a:	f003 0302 	and.w	r3, r3, #2
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007262:	4a29      	ldr	r2, [pc, #164]	; (8007308 <HAL_GPIO_Init+0x23c>)
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	3302      	adds	r3, #2
 800726a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	220f      	movs	r2, #15
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	43db      	mvns	r3, r3
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	4013      	ands	r3, r2
 8007284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a20      	ldr	r2, [pc, #128]	; (800730c <HAL_GPIO_Init+0x240>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d052      	beq.n	8007334 <HAL_GPIO_Init+0x268>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a1f      	ldr	r2, [pc, #124]	; (8007310 <HAL_GPIO_Init+0x244>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d031      	beq.n	80072fa <HAL_GPIO_Init+0x22e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1e      	ldr	r2, [pc, #120]	; (8007314 <HAL_GPIO_Init+0x248>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d02b      	beq.n	80072f6 <HAL_GPIO_Init+0x22a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <HAL_GPIO_Init+0x24c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d025      	beq.n	80072f2 <HAL_GPIO_Init+0x226>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <HAL_GPIO_Init+0x250>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01f      	beq.n	80072ee <HAL_GPIO_Init+0x222>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <HAL_GPIO_Init+0x254>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d019      	beq.n	80072ea <HAL_GPIO_Init+0x21e>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a1a      	ldr	r2, [pc, #104]	; (8007324 <HAL_GPIO_Init+0x258>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <HAL_GPIO_Init+0x21a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a19      	ldr	r2, [pc, #100]	; (8007328 <HAL_GPIO_Init+0x25c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00d      	beq.n	80072e2 <HAL_GPIO_Init+0x216>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a18      	ldr	r2, [pc, #96]	; (800732c <HAL_GPIO_Init+0x260>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d007      	beq.n	80072de <HAL_GPIO_Init+0x212>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a17      	ldr	r2, [pc, #92]	; (8007330 <HAL_GPIO_Init+0x264>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d101      	bne.n	80072da <HAL_GPIO_Init+0x20e>
 80072d6:	2309      	movs	r3, #9
 80072d8:	e02d      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072da:	230a      	movs	r3, #10
 80072dc:	e02b      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072de:	2308      	movs	r3, #8
 80072e0:	e029      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072e2:	2307      	movs	r3, #7
 80072e4:	e027      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072e6:	2306      	movs	r3, #6
 80072e8:	e025      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072ea:	2305      	movs	r3, #5
 80072ec:	e023      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072ee:	2304      	movs	r3, #4
 80072f0:	e021      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072f2:	2303      	movs	r3, #3
 80072f4:	e01f      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e01d      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e01b      	b.n	8007336 <HAL_GPIO_Init+0x26a>
 80072fe:	bf00      	nop
 8007300:	58000080 	.word	0x58000080
 8007304:	58024400 	.word	0x58024400
 8007308:	58000400 	.word	0x58000400
 800730c:	58020000 	.word	0x58020000
 8007310:	58020400 	.word	0x58020400
 8007314:	58020800 	.word	0x58020800
 8007318:	58020c00 	.word	0x58020c00
 800731c:	58021000 	.word	0x58021000
 8007320:	58021400 	.word	0x58021400
 8007324:	58021800 	.word	0x58021800
 8007328:	58021c00 	.word	0x58021c00
 800732c:	58022000 	.word	0x58022000
 8007330:	58022400 	.word	0x58022400
 8007334:	2300      	movs	r3, #0
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	f002 0203 	and.w	r2, r2, #3
 800733c:	0092      	lsls	r2, r2, #2
 800733e:	4093      	lsls	r3, r2
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4313      	orrs	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007346:	4938      	ldr	r1, [pc, #224]	; (8007428 <HAL_GPIO_Init+0x35c>)
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	089b      	lsrs	r3, r3, #2
 800734c:	3302      	adds	r3, #2
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	43db      	mvns	r3, r3
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	4013      	ands	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800737a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	43db      	mvns	r3, r3
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	4013      	ands	r3, r2
 8007392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80073a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	43db      	mvns	r3, r3
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	4013      	ands	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	43db      	mvns	r3, r3
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	4013      	ands	r3, r2
 80073e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	3301      	adds	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	f47f ae63 	bne.w	80070e0 <HAL_GPIO_Init+0x14>
  }
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	3724      	adds	r7, #36	; 0x24
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	58000400 	.word	0x58000400

0800742c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	807b      	strh	r3, [r7, #2]
 8007438:	4613      	mov	r3, r2
 800743a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800743c:	787b      	ldrb	r3, [r7, #1]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007442:	887a      	ldrh	r2, [r7, #2]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007448:	e003      	b.n	8007452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800744a:	887b      	ldrh	r3, [r7, #2]
 800744c:	041a      	lsls	r2, r3, #16
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	619a      	str	r2, [r3, #24]
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
	...

08007460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e08b      	b.n	800758a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fa fc08 	bl	8001c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2224      	movs	r2, #36	; 0x24
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0201 	bic.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d107      	bne.n	80074da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	e006      	b.n	80074e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d108      	bne.n	8007502 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	e007      	b.n	8007512 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6859      	ldr	r1, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <HAL_I2C_Init+0x134>)
 800751e:	430b      	orrs	r3, r1
 8007520:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69d9      	ldr	r1, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	02008000 	.word	0x02008000

08007598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d138      	bne.n	8007620 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d101      	bne.n	80075bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075b8:	2302      	movs	r3, #2
 80075ba:	e032      	b.n	8007622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2224      	movs	r2, #36	; 0x24
 80075c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6819      	ldr	r1, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	e000      	b.n	8007622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b20      	cmp	r3, #32
 8007642:	d139      	bne.n	80076b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800764a:	2b01      	cmp	r3, #1
 800764c:	d101      	bne.n	8007652 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800764e:	2302      	movs	r3, #2
 8007650:	e033      	b.n	80076ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2224      	movs	r2, #36	; 0x24
 800765e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007680:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	e000      	b.n	80076ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076b8:	2302      	movs	r3, #2
  }
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
	...

080076c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80076d0:	4b19      	ldr	r3, [pc, #100]	; (8007738 <HAL_PWREx_ConfigSupply+0x70>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d00a      	beq.n	80076f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80076dc:	4b16      	ldr	r3, [pc, #88]	; (8007738 <HAL_PWREx_ConfigSupply+0x70>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d001      	beq.n	80076ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e01f      	b.n	800772e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e01d      	b.n	800772e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <HAL_PWREx_ConfigSupply+0x70>)
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f023 0207 	bic.w	r2, r3, #7
 80076fa:	490f      	ldr	r1, [pc, #60]	; (8007738 <HAL_PWREx_ConfigSupply+0x70>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007702:	f7fa ffb7 	bl	8002674 <HAL_GetTick>
 8007706:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007708:	e009      	b.n	800771e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800770a:	f7fa ffb3 	bl	8002674 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007718:	d901      	bls.n	800771e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e007      	b.n	800772e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <HAL_PWREx_ConfigSupply+0x70>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772a:	d1ee      	bne.n	800770a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	58024800 	.word	0x58024800

0800773c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08c      	sub	sp, #48	; 0x30
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f000 bc48 	b.w	8007fe0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 8088 	beq.w	800786e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800775e:	4b99      	ldr	r3, [pc, #612]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007768:	4b96      	ldr	r3, [pc, #600]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	2b10      	cmp	r3, #16
 8007772:	d007      	beq.n	8007784 <HAL_RCC_OscConfig+0x48>
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	2b18      	cmp	r3, #24
 8007778:	d111      	bne.n	800779e <HAL_RCC_OscConfig+0x62>
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	f003 0303 	and.w	r3, r3, #3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d10c      	bne.n	800779e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007784:	4b8f      	ldr	r3, [pc, #572]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d06d      	beq.n	800786c <HAL_RCC_OscConfig+0x130>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d169      	bne.n	800786c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	f000 bc21 	b.w	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a6:	d106      	bne.n	80077b6 <HAL_RCC_OscConfig+0x7a>
 80077a8:	4b86      	ldr	r3, [pc, #536]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a85      	ldr	r2, [pc, #532]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	e02e      	b.n	8007814 <HAL_RCC_OscConfig+0xd8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10c      	bne.n	80077d8 <HAL_RCC_OscConfig+0x9c>
 80077be:	4b81      	ldr	r3, [pc, #516]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a80      	ldr	r2, [pc, #512]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	4b7e      	ldr	r3, [pc, #504]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a7d      	ldr	r2, [pc, #500]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e01d      	b.n	8007814 <HAL_RCC_OscConfig+0xd8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0xc0>
 80077e2:	4b78      	ldr	r3, [pc, #480]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a77      	ldr	r2, [pc, #476]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4b75      	ldr	r3, [pc, #468]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a74      	ldr	r2, [pc, #464]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0xd8>
 80077fc:	4b71      	ldr	r3, [pc, #452]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a70      	ldr	r2, [pc, #448]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	4b6e      	ldr	r3, [pc, #440]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a6d      	ldr	r2, [pc, #436]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800780e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d013      	beq.n	8007844 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781c:	f7fa ff2a 	bl	8002674 <HAL_GetTick>
 8007820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007824:	f7fa ff26 	bl	8002674 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	; 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e3d4      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007836:	4b63      	ldr	r3, [pc, #396]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0f0      	beq.n	8007824 <HAL_RCC_OscConfig+0xe8>
 8007842:	e014      	b.n	800786e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007844:	f7fa ff16 	bl	8002674 <HAL_GetTick>
 8007848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800784c:	f7fa ff12 	bl	8002674 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b64      	cmp	r3, #100	; 0x64
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e3c0      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800785e:	4b59      	ldr	r3, [pc, #356]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f0      	bne.n	800784c <HAL_RCC_OscConfig+0x110>
 800786a:	e000      	b.n	800786e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 80ca 	beq.w	8007a10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800787c:	4b51      	ldr	r3, [pc, #324]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007884:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007886:	4b4f      	ldr	r3, [pc, #316]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <HAL_RCC_OscConfig+0x166>
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	2b18      	cmp	r3, #24
 8007896:	d156      	bne.n	8007946 <HAL_RCC_OscConfig+0x20a>
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d151      	bne.n	8007946 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078a2:	4b48      	ldr	r3, [pc, #288]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0304 	and.w	r3, r3, #4
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_RCC_OscConfig+0x17e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e392      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078ba:	4b42      	ldr	r3, [pc, #264]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f023 0219 	bic.w	r2, r3, #25
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	493f      	ldr	r1, [pc, #252]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078cc:	f7fa fed2 	bl	8002674 <HAL_GetTick>
 80078d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078d4:	f7fa fece 	bl	8002674 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e37c      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078e6:	4b37      	ldr	r3, [pc, #220]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0f0      	beq.n	80078d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f2:	f7fa fecb 	bl	800268c <HAL_GetREVID>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d817      	bhi.n	8007930 <HAL_RCC_OscConfig+0x1f4>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	2b40      	cmp	r3, #64	; 0x40
 8007906:	d108      	bne.n	800791a <HAL_RCC_OscConfig+0x1de>
 8007908:	4b2e      	ldr	r3, [pc, #184]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007910:	4a2c      	ldr	r2, [pc, #176]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007916:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007918:	e07a      	b.n	8007a10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800791a:	4b2a      	ldr	r3, [pc, #168]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	031b      	lsls	r3, r3, #12
 8007928:	4926      	ldr	r1, [pc, #152]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800792a:	4313      	orrs	r3, r2
 800792c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800792e:	e06f      	b.n	8007a10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007930:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	061b      	lsls	r3, r3, #24
 800793e:	4921      	ldr	r1, [pc, #132]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007940:	4313      	orrs	r3, r2
 8007942:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007944:	e064      	b.n	8007a10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d047      	beq.n	80079de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800794e:	4b1d      	ldr	r3, [pc, #116]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f023 0219 	bic.w	r2, r3, #25
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	491a      	ldr	r1, [pc, #104]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800795c:	4313      	orrs	r3, r2
 800795e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007960:	f7fa fe88 	bl	8002674 <HAL_GetTick>
 8007964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007966:	e008      	b.n	800797a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007968:	f7fa fe84 	bl	8002674 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e332      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f0      	beq.n	8007968 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007986:	f7fa fe81 	bl	800268c <HAL_GetREVID>
 800798a:	4603      	mov	r3, r0
 800798c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007990:	4293      	cmp	r3, r2
 8007992:	d819      	bhi.n	80079c8 <HAL_RCC_OscConfig+0x28c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b40      	cmp	r3, #64	; 0x40
 800799a:	d108      	bne.n	80079ae <HAL_RCC_OscConfig+0x272>
 800799c:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80079a4:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80079a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079aa:	6053      	str	r3, [r2, #4]
 80079ac:	e030      	b.n	8007a10 <HAL_RCC_OscConfig+0x2d4>
 80079ae:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	031b      	lsls	r3, r3, #12
 80079bc:	4901      	ldr	r1, [pc, #4]	; (80079c4 <HAL_RCC_OscConfig+0x288>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	604b      	str	r3, [r1, #4]
 80079c2:	e025      	b.n	8007a10 <HAL_RCC_OscConfig+0x2d4>
 80079c4:	58024400 	.word	0x58024400
 80079c8:	4b9a      	ldr	r3, [pc, #616]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	061b      	lsls	r3, r3, #24
 80079d6:	4997      	ldr	r1, [pc, #604]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	604b      	str	r3, [r1, #4]
 80079dc:	e018      	b.n	8007a10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079de:	4b95      	ldr	r3, [pc, #596]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a94      	ldr	r2, [pc, #592]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ea:	f7fa fe43 	bl	8002674 <HAL_GetTick>
 80079ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079f0:	e008      	b.n	8007a04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f2:	f7fa fe3f 	bl	8002674 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d901      	bls.n	8007a04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e2ed      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a04:	4b8b      	ldr	r3, [pc, #556]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1f0      	bne.n	80079f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 80a9 	beq.w	8007b70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a1e:	4b85      	ldr	r3, [pc, #532]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a28:	4b82      	ldr	r3, [pc, #520]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d007      	beq.n	8007a44 <HAL_RCC_OscConfig+0x308>
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2b18      	cmp	r3, #24
 8007a38:	d13a      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x374>
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d135      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a44:	4b7b      	ldr	r3, [pc, #492]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <HAL_RCC_OscConfig+0x320>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	2b80      	cmp	r3, #128	; 0x80
 8007a56:	d001      	beq.n	8007a5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e2c1      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a5c:	f7fa fe16 	bl	800268c <HAL_GetREVID>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d817      	bhi.n	8007a9a <HAL_RCC_OscConfig+0x35e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	d108      	bne.n	8007a84 <HAL_RCC_OscConfig+0x348>
 8007a72:	4b70      	ldr	r3, [pc, #448]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a7a:	4a6e      	ldr	r2, [pc, #440]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a82:	e075      	b.n	8007b70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a84:	4b6b      	ldr	r3, [pc, #428]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	069b      	lsls	r3, r3, #26
 8007a92:	4968      	ldr	r1, [pc, #416]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a98:	e06a      	b.n	8007b70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a9a:	4b66      	ldr	r3, [pc, #408]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	061b      	lsls	r3, r3, #24
 8007aa8:	4962      	ldr	r1, [pc, #392]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aae:	e05f      	b.n	8007b70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d042      	beq.n	8007b3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007ab8:	4b5e      	ldr	r3, [pc, #376]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a5d      	ldr	r2, [pc, #372]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac4:	f7fa fdd6 	bl	8002674 <HAL_GetTick>
 8007ac8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007acc:	f7fa fdd2 	bl	8002674 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e280      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ade:	4b55      	ldr	r3, [pc, #340]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007aea:	f7fa fdcf 	bl	800268c <HAL_GetREVID>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d817      	bhi.n	8007b28 <HAL_RCC_OscConfig+0x3ec>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d108      	bne.n	8007b12 <HAL_RCC_OscConfig+0x3d6>
 8007b00:	4b4c      	ldr	r3, [pc, #304]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b08:	4a4a      	ldr	r2, [pc, #296]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b0e:	6053      	str	r3, [r2, #4]
 8007b10:	e02e      	b.n	8007b70 <HAL_RCC_OscConfig+0x434>
 8007b12:	4b48      	ldr	r3, [pc, #288]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	069b      	lsls	r3, r3, #26
 8007b20:	4944      	ldr	r1, [pc, #272]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	604b      	str	r3, [r1, #4]
 8007b26:	e023      	b.n	8007b70 <HAL_RCC_OscConfig+0x434>
 8007b28:	4b42      	ldr	r3, [pc, #264]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	061b      	lsls	r3, r3, #24
 8007b36:	493f      	ldr	r1, [pc, #252]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60cb      	str	r3, [r1, #12]
 8007b3c:	e018      	b.n	8007b70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b3e:	4b3d      	ldr	r3, [pc, #244]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a3c      	ldr	r2, [pc, #240]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4a:	f7fa fd93 	bl	8002674 <HAL_GetTick>
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b50:	e008      	b.n	8007b64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b52:	f7fa fd8f 	bl	8002674 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e23d      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b64:	4b33      	ldr	r3, [pc, #204]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f0      	bne.n	8007b52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d036      	beq.n	8007bea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d019      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b84:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b88:	4a2a      	ldr	r2, [pc, #168]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b90:	f7fa fd70 	bl	8002674 <HAL_GetTick>
 8007b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b98:	f7fa fd6c 	bl	8002674 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e21a      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007baa:	4b22      	ldr	r3, [pc, #136]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0f0      	beq.n	8007b98 <HAL_RCC_OscConfig+0x45c>
 8007bb6:	e018      	b.n	8007bea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bb8:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbc:	4a1d      	ldr	r2, [pc, #116]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007bbe:	f023 0301 	bic.w	r3, r3, #1
 8007bc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc4:	f7fa fd56 	bl	8002674 <HAL_GetTick>
 8007bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bca:	e008      	b.n	8007bde <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bcc:	f7fa fd52 	bl	8002674 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e200      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bde:	4b15      	ldr	r3, [pc, #84]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f0      	bne.n	8007bcc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d039      	beq.n	8007c6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01c      	beq.n	8007c38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a0c      	ldr	r2, [pc, #48]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c0a:	f7fa fd33 	bl	8002674 <HAL_GetTick>
 8007c0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c10:	e008      	b.n	8007c24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c12:	f7fa fd2f 	bl	8002674 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d901      	bls.n	8007c24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e1dd      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c24:	4b03      	ldr	r3, [pc, #12]	; (8007c34 <HAL_RCC_OscConfig+0x4f8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0f0      	beq.n	8007c12 <HAL_RCC_OscConfig+0x4d6>
 8007c30:	e01b      	b.n	8007c6a <HAL_RCC_OscConfig+0x52e>
 8007c32:	bf00      	nop
 8007c34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c38:	4b9b      	ldr	r3, [pc, #620]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a9a      	ldr	r2, [pc, #616]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c44:	f7fa fd16 	bl	8002674 <HAL_GetTick>
 8007c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c4a:	e008      	b.n	8007c5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c4c:	f7fa fd12 	bl	8002674 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e1c0      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c5e:	4b92      	ldr	r3, [pc, #584]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f0      	bne.n	8007c4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8081 	beq.w	8007d7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c78:	4b8c      	ldr	r3, [pc, #560]	; (8007eac <HAL_RCC_OscConfig+0x770>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a8b      	ldr	r2, [pc, #556]	; (8007eac <HAL_RCC_OscConfig+0x770>)
 8007c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c84:	f7fa fcf6 	bl	8002674 <HAL_GetTick>
 8007c88:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c8a:	e008      	b.n	8007c9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8c:	f7fa fcf2 	bl	8002674 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b64      	cmp	r3, #100	; 0x64
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e1a0      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c9e:	4b83      	ldr	r3, [pc, #524]	; (8007eac <HAL_RCC_OscConfig+0x770>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0f0      	beq.n	8007c8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d106      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x584>
 8007cb2:	4b7d      	ldr	r3, [pc, #500]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb6:	4a7c      	ldr	r2, [pc, #496]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8007cbe:	e02d      	b.n	8007d1c <HAL_RCC_OscConfig+0x5e0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10c      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x5a6>
 8007cc8:	4b77      	ldr	r3, [pc, #476]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ccc:	4a76      	ldr	r2, [pc, #472]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd4:	4b74      	ldr	r3, [pc, #464]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd8:	4a73      	ldr	r2, [pc, #460]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cda:	f023 0304 	bic.w	r3, r3, #4
 8007cde:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce0:	e01c      	b.n	8007d1c <HAL_RCC_OscConfig+0x5e0>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2b05      	cmp	r3, #5
 8007ce8:	d10c      	bne.n	8007d04 <HAL_RCC_OscConfig+0x5c8>
 8007cea:	4b6f      	ldr	r3, [pc, #444]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cee:	4a6e      	ldr	r2, [pc, #440]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cf0:	f043 0304 	orr.w	r3, r3, #4
 8007cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf6:	4b6c      	ldr	r3, [pc, #432]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfa:	4a6b      	ldr	r2, [pc, #428]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	6713      	str	r3, [r2, #112]	; 0x70
 8007d02:	e00b      	b.n	8007d1c <HAL_RCC_OscConfig+0x5e0>
 8007d04:	4b68      	ldr	r3, [pc, #416]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d08:	4a67      	ldr	r2, [pc, #412]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007d0a:	f023 0301 	bic.w	r3, r3, #1
 8007d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d10:	4b65      	ldr	r3, [pc, #404]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d14:	4a64      	ldr	r2, [pc, #400]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007d16:	f023 0304 	bic.w	r3, r3, #4
 8007d1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d015      	beq.n	8007d50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d24:	f7fa fca6 	bl	8002674 <HAL_GetTick>
 8007d28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d2a:	e00a      	b.n	8007d42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2c:	f7fa fca2 	bl	8002674 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d901      	bls.n	8007d42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e14e      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d42:	4b59      	ldr	r3, [pc, #356]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0ee      	beq.n	8007d2c <HAL_RCC_OscConfig+0x5f0>
 8007d4e:	e014      	b.n	8007d7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d50:	f7fa fc90 	bl	8002674 <HAL_GetTick>
 8007d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d56:	e00a      	b.n	8007d6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d58:	f7fa fc8c 	bl	8002674 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e138      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d6e:	4b4e      	ldr	r3, [pc, #312]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1ee      	bne.n	8007d58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 812d 	beq.w	8007fde <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d84:	4b48      	ldr	r3, [pc, #288]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d8c:	2b18      	cmp	r3, #24
 8007d8e:	f000 80bd 	beq.w	8007f0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	f040 809e 	bne.w	8007ed8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d9c:	4b42      	ldr	r3, [pc, #264]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a41      	ldr	r2, [pc, #260]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da8:	f7fa fc64 	bl	8002674 <HAL_GetTick>
 8007dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007db0:	f7fa fc60 	bl	8002674 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e10e      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007dc2:	4b39      	ldr	r3, [pc, #228]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1f0      	bne.n	8007db0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dce:	4b36      	ldr	r3, [pc, #216]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dd2:	4b37      	ldr	r3, [pc, #220]	; (8007eb0 <HAL_RCC_OscConfig+0x774>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007dde:	0112      	lsls	r2, r2, #4
 8007de0:	430a      	orrs	r2, r1
 8007de2:	4931      	ldr	r1, [pc, #196]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	628b      	str	r3, [r1, #40]	; 0x28
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dec:	3b01      	subs	r3, #1
 8007dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df6:	3b01      	subs	r3, #1
 8007df8:	025b      	lsls	r3, r3, #9
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	3b01      	subs	r3, #1
 8007e04:	041b      	lsls	r3, r3, #16
 8007e06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e10:	3b01      	subs	r3, #1
 8007e12:	061b      	lsls	r3, r3, #24
 8007e14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e18:	4923      	ldr	r1, [pc, #140]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007e1e:	4b22      	ldr	r3, [pc, #136]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	4a21      	ldr	r2, [pc, #132]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e2a:	4b1f      	ldr	r3, [pc, #124]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e2e:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <HAL_RCC_OscConfig+0x778>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e36:	00d2      	lsls	r2, r2, #3
 8007e38:	491b      	ldr	r1, [pc, #108]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e3e:	4b1a      	ldr	r3, [pc, #104]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	f023 020c 	bic.w	r2, r3, #12
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	4917      	ldr	r1, [pc, #92]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e50:	4b15      	ldr	r3, [pc, #84]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	f023 0202 	bic.w	r2, r3, #2
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5c:	4912      	ldr	r1, [pc, #72]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e62:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	4a10      	ldr	r2, [pc, #64]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	4a0d      	ldr	r2, [pc, #52]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007e86:	4b08      	ldr	r3, [pc, #32]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	4a07      	ldr	r2, [pc, #28]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e8c:	f043 0301 	orr.w	r3, r3, #1
 8007e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a04      	ldr	r2, [pc, #16]	; (8007ea8 <HAL_RCC_OscConfig+0x76c>)
 8007e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9e:	f7fa fbe9 	bl	8002674 <HAL_GetTick>
 8007ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ea4:	e011      	b.n	8007eca <HAL_RCC_OscConfig+0x78e>
 8007ea6:	bf00      	nop
 8007ea8:	58024400 	.word	0x58024400
 8007eac:	58024800 	.word	0x58024800
 8007eb0:	fffffc0c 	.word	0xfffffc0c
 8007eb4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb8:	f7fa fbdc 	bl	8002674 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e08a      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007eca:	4b47      	ldr	r3, [pc, #284]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x77c>
 8007ed6:	e082      	b.n	8007fde <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ed8:	4b43      	ldr	r3, [pc, #268]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a42      	ldr	r2, [pc, #264]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fa fbc6 	bl	8002674 <HAL_GetTick>
 8007ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eec:	f7fa fbc2 	bl	8002674 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e070      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007efe:	4b3a      	ldr	r3, [pc, #232]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1f0      	bne.n	8007eec <HAL_RCC_OscConfig+0x7b0>
 8007f0a:	e068      	b.n	8007fde <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f0c:	4b36      	ldr	r3, [pc, #216]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f12:	4b35      	ldr	r3, [pc, #212]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d031      	beq.n	8007f84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f003 0203 	and.w	r2, r3, #3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d12a      	bne.n	8007f84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	091b      	lsrs	r3, r3, #4
 8007f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d122      	bne.n	8007f84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d11a      	bne.n	8007f84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	0a5b      	lsrs	r3, r3, #9
 8007f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d111      	bne.n	8007f84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d108      	bne.n	8007f84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	0e1b      	lsrs	r3, r3, #24
 8007f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d001      	beq.n	8007f88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e02b      	b.n	8007fe0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007f88:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8c:	08db      	lsrs	r3, r3, #3
 8007f8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d01f      	beq.n	8007fde <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007f9e:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	4a11      	ldr	r2, [pc, #68]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007fa4:	f023 0301 	bic.w	r3, r3, #1
 8007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007faa:	f7fa fb63 	bl	8002674 <HAL_GetTick>
 8007fae:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007fb0:	bf00      	nop
 8007fb2:	f7fa fb5f 	bl	8002674 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d0f9      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fbe:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fc2:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <HAL_RCC_OscConfig+0x8b0>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fca:	00d2      	lsls	r2, r2, #3
 8007fcc:	4906      	ldr	r1, [pc, #24]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007fd2:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	4a04      	ldr	r2, [pc, #16]	; (8007fe8 <HAL_RCC_OscConfig+0x8ac>)
 8007fd8:	f043 0301 	orr.w	r3, r3, #1
 8007fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3730      	adds	r7, #48	; 0x30
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	58024400 	.word	0x58024400
 8007fec:	ffff0007 	.word	0xffff0007

08007ff0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e19c      	b.n	800833e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008004:	4b8a      	ldr	r3, [pc, #552]	; (8008230 <HAL_RCC_ClockConfig+0x240>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d910      	bls.n	8008034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008012:	4b87      	ldr	r3, [pc, #540]	; (8008230 <HAL_RCC_ClockConfig+0x240>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f023 020f 	bic.w	r2, r3, #15
 800801a:	4985      	ldr	r1, [pc, #532]	; (8008230 <HAL_RCC_ClockConfig+0x240>)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	4313      	orrs	r3, r2
 8008020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008022:	4b83      	ldr	r3, [pc, #524]	; (8008230 <HAL_RCC_ClockConfig+0x240>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d001      	beq.n	8008034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e184      	b.n	800833e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d010      	beq.n	8008062 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	4b7b      	ldr	r3, [pc, #492]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800804c:	429a      	cmp	r2, r3
 800804e:	d908      	bls.n	8008062 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008050:	4b78      	ldr	r3, [pc, #480]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	4975      	ldr	r1, [pc, #468]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 800805e:	4313      	orrs	r3, r2
 8008060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d010      	beq.n	8008090 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695a      	ldr	r2, [r3, #20]
 8008072:	4b70      	ldr	r3, [pc, #448]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800807a:	429a      	cmp	r2, r3
 800807c:	d908      	bls.n	8008090 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800807e:	4b6d      	ldr	r3, [pc, #436]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	496a      	ldr	r1, [pc, #424]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 800808c:	4313      	orrs	r3, r2
 800808e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d010      	beq.n	80080be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	4b64      	ldr	r3, [pc, #400]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d908      	bls.n	80080be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080ac:	4b61      	ldr	r3, [pc, #388]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	495e      	ldr	r1, [pc, #376]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d010      	beq.n	80080ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69da      	ldr	r2, [r3, #28]
 80080ce:	4b59      	ldr	r3, [pc, #356]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d908      	bls.n	80080ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080da:	4b56      	ldr	r3, [pc, #344]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	4953      	ldr	r1, [pc, #332]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d010      	beq.n	800811a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	4b4d      	ldr	r3, [pc, #308]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f003 030f 	and.w	r3, r3, #15
 8008104:	429a      	cmp	r2, r3
 8008106:	d908      	bls.n	800811a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008108:	4b4a      	ldr	r3, [pc, #296]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f023 020f 	bic.w	r2, r3, #15
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	4947      	ldr	r1, [pc, #284]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008116:	4313      	orrs	r3, r2
 8008118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	d055      	beq.n	80081d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008126:	4b43      	ldr	r3, [pc, #268]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	4940      	ldr	r1, [pc, #256]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008134:	4313      	orrs	r3, r2
 8008136:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b02      	cmp	r3, #2
 800813e:	d107      	bne.n	8008150 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008140:	4b3c      	ldr	r3, [pc, #240]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d121      	bne.n	8008190 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e0f6      	b.n	800833e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2b03      	cmp	r3, #3
 8008156:	d107      	bne.n	8008168 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008158:	4b36      	ldr	r3, [pc, #216]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d115      	bne.n	8008190 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e0ea      	b.n	800833e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d107      	bne.n	8008180 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008170:	4b30      	ldr	r3, [pc, #192]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e0de      	b.n	800833e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008180:	4b2c      	ldr	r3, [pc, #176]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e0d6      	b.n	800833e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008190:	4b28      	ldr	r3, [pc, #160]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f023 0207 	bic.w	r2, r3, #7
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	4925      	ldr	r1, [pc, #148]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081a2:	f7fa fa67 	bl	8002674 <HAL_GetTick>
 80081a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081a8:	e00a      	b.n	80081c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081aa:	f7fa fa63 	bl	8002674 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e0be      	b.n	800833e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081c0:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d1eb      	bne.n	80081aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d010      	beq.n	8008200 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d208      	bcs.n	8008200 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081ee:	4b11      	ldr	r3, [pc, #68]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f023 020f 	bic.w	r2, r3, #15
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	490e      	ldr	r1, [pc, #56]	; (8008234 <HAL_RCC_ClockConfig+0x244>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <HAL_RCC_ClockConfig+0x240>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d214      	bcs.n	8008238 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800820e:	4b08      	ldr	r3, [pc, #32]	; (8008230 <HAL_RCC_ClockConfig+0x240>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f023 020f 	bic.w	r2, r3, #15
 8008216:	4906      	ldr	r1, [pc, #24]	; (8008230 <HAL_RCC_ClockConfig+0x240>)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	4313      	orrs	r3, r2
 800821c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <HAL_RCC_ClockConfig+0x240>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 030f 	and.w	r3, r3, #15
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d005      	beq.n	8008238 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e086      	b.n	800833e <HAL_RCC_ClockConfig+0x34e>
 8008230:	52002000 	.word	0x52002000
 8008234:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d010      	beq.n	8008266 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691a      	ldr	r2, [r3, #16]
 8008248:	4b3f      	ldr	r3, [pc, #252]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008250:	429a      	cmp	r2, r3
 8008252:	d208      	bcs.n	8008266 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008254:	4b3c      	ldr	r3, [pc, #240]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	4939      	ldr	r1, [pc, #228]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 8008262:	4313      	orrs	r3, r2
 8008264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	2b00      	cmp	r3, #0
 8008270:	d010      	beq.n	8008294 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695a      	ldr	r2, [r3, #20]
 8008276:	4b34      	ldr	r3, [pc, #208]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800827e:	429a      	cmp	r2, r3
 8008280:	d208      	bcs.n	8008294 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008282:	4b31      	ldr	r3, [pc, #196]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	492e      	ldr	r1, [pc, #184]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 8008290:	4313      	orrs	r3, r2
 8008292:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	d010      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699a      	ldr	r2, [r3, #24]
 80082a4:	4b28      	ldr	r3, [pc, #160]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 80082a6:	69db      	ldr	r3, [r3, #28]
 80082a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d208      	bcs.n	80082c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082b0:	4b25      	ldr	r3, [pc, #148]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	4922      	ldr	r1, [pc, #136]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d010      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69da      	ldr	r2, [r3, #28]
 80082d2:	4b1d      	ldr	r3, [pc, #116]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082da:	429a      	cmp	r2, r3
 80082dc:	d208      	bcs.n	80082f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80082de:	4b1a      	ldr	r3, [pc, #104]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	4917      	ldr	r1, [pc, #92]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80082f0:	f000 f834 	bl	800835c <HAL_RCC_GetSysClockFreq>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b14      	ldr	r3, [pc, #80]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	0a1b      	lsrs	r3, r3, #8
 80082fc:	f003 030f 	and.w	r3, r3, #15
 8008300:	4912      	ldr	r1, [pc, #72]	; (800834c <HAL_RCC_ClockConfig+0x35c>)
 8008302:	5ccb      	ldrb	r3, [r1, r3]
 8008304:	f003 031f 	and.w	r3, r3, #31
 8008308:	fa22 f303 	lsr.w	r3, r2, r3
 800830c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800830e:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <HAL_RCC_ClockConfig+0x358>)
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	4a0d      	ldr	r2, [pc, #52]	; (800834c <HAL_RCC_ClockConfig+0x35c>)
 8008318:	5cd3      	ldrb	r3, [r2, r3]
 800831a:	f003 031f 	and.w	r3, r3, #31
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	fa22 f303 	lsr.w	r3, r2, r3
 8008324:	4a0a      	ldr	r2, [pc, #40]	; (8008350 <HAL_RCC_ClockConfig+0x360>)
 8008326:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008328:	4a0a      	ldr	r2, [pc, #40]	; (8008354 <HAL_RCC_ClockConfig+0x364>)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800832e:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <HAL_RCC_ClockConfig+0x368>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7f9 fed6 	bl	80020e4 <HAL_InitTick>
 8008338:	4603      	mov	r3, r0
 800833a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	58024400 	.word	0x58024400
 800834c:	0801334c 	.word	0x0801334c
 8008350:	24000004 	.word	0x24000004
 8008354:	24000000 	.word	0x24000000
 8008358:	24000008 	.word	0x24000008

0800835c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800835c:	b480      	push	{r7}
 800835e:	b089      	sub	sp, #36	; 0x24
 8008360:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008362:	4bb3      	ldr	r3, [pc, #716]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800836a:	2b18      	cmp	r3, #24
 800836c:	f200 8155 	bhi.w	800861a <HAL_RCC_GetSysClockFreq+0x2be>
 8008370:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	080083dd 	.word	0x080083dd
 800837c:	0800861b 	.word	0x0800861b
 8008380:	0800861b 	.word	0x0800861b
 8008384:	0800861b 	.word	0x0800861b
 8008388:	0800861b 	.word	0x0800861b
 800838c:	0800861b 	.word	0x0800861b
 8008390:	0800861b 	.word	0x0800861b
 8008394:	0800861b 	.word	0x0800861b
 8008398:	08008403 	.word	0x08008403
 800839c:	0800861b 	.word	0x0800861b
 80083a0:	0800861b 	.word	0x0800861b
 80083a4:	0800861b 	.word	0x0800861b
 80083a8:	0800861b 	.word	0x0800861b
 80083ac:	0800861b 	.word	0x0800861b
 80083b0:	0800861b 	.word	0x0800861b
 80083b4:	0800861b 	.word	0x0800861b
 80083b8:	08008409 	.word	0x08008409
 80083bc:	0800861b 	.word	0x0800861b
 80083c0:	0800861b 	.word	0x0800861b
 80083c4:	0800861b 	.word	0x0800861b
 80083c8:	0800861b 	.word	0x0800861b
 80083cc:	0800861b 	.word	0x0800861b
 80083d0:	0800861b 	.word	0x0800861b
 80083d4:	0800861b 	.word	0x0800861b
 80083d8:	0800840f 	.word	0x0800840f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083dc:	4b94      	ldr	r3, [pc, #592]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083e8:	4b91      	ldr	r3, [pc, #580]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	08db      	lsrs	r3, r3, #3
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	4a90      	ldr	r2, [pc, #576]	; (8008634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083f4:	fa22 f303 	lsr.w	r3, r2, r3
 80083f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80083fa:	e111      	b.n	8008620 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80083fc:	4b8d      	ldr	r3, [pc, #564]	; (8008634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083fe:	61bb      	str	r3, [r7, #24]
      break;
 8008400:	e10e      	b.n	8008620 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008402:	4b8d      	ldr	r3, [pc, #564]	; (8008638 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008404:	61bb      	str	r3, [r7, #24]
      break;
 8008406:	e10b      	b.n	8008620 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008408:	4b8c      	ldr	r3, [pc, #560]	; (800863c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800840a:	61bb      	str	r3, [r7, #24]
      break;
 800840c:	e108      	b.n	8008620 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800840e:	4b88      	ldr	r3, [pc, #544]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008418:	4b85      	ldr	r3, [pc, #532]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841c:	091b      	lsrs	r3, r3, #4
 800841e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008422:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008424:	4b82      	ldr	r3, [pc, #520]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800842e:	4b80      	ldr	r3, [pc, #512]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	fb02 f303 	mul.w	r3, r2, r3
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008446:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80e1 	beq.w	8008614 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b02      	cmp	r3, #2
 8008456:	f000 8083 	beq.w	8008560 <HAL_RCC_GetSysClockFreq+0x204>
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2b02      	cmp	r3, #2
 800845e:	f200 80a1 	bhi.w	80085a4 <HAL_RCC_GetSysClockFreq+0x248>
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_RCC_GetSysClockFreq+0x114>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d056      	beq.n	800851c <HAL_RCC_GetSysClockFreq+0x1c0>
 800846e:	e099      	b.n	80085a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008470:	4b6f      	ldr	r3, [pc, #444]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d02d      	beq.n	80084d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800847c:	4b6c      	ldr	r3, [pc, #432]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	08db      	lsrs	r3, r3, #3
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	4a6b      	ldr	r2, [pc, #428]	; (8008634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008488:	fa22 f303 	lsr.w	r3, r2, r3
 800848c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	ee07 3a90 	vmov	s15, r3
 8008494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a6:	4b62      	ldr	r3, [pc, #392]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008640 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80084d6:	e087      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008644 <HAL_RCC_GetSysClockFreq+0x2e8>
 80084e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ea:	4b51      	ldr	r3, [pc, #324]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80084fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008640 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800850a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800850e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800851a:	e065      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008526:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008648 <HAL_RCC_GetSysClockFreq+0x2ec>
 800852a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800852e:	4b40      	ldr	r3, [pc, #256]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800853e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008542:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008640 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800854a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800854e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800855e:	e043      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	ee07 3a90 	vmov	s15, r3
 8008566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800864c <HAL_RCC_GetSysClockFreq+0x2f0>
 800856e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008572:	4b2f      	ldr	r3, [pc, #188]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008582:	ed97 6a02 	vldr	s12, [r7, #8]
 8008586:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008640 <HAL_RCC_GetSysClockFreq+0x2e4>
 800858a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800858e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085a2:	e021      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008648 <HAL_RCC_GetSysClockFreq+0x2ec>
 80085b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b6:	4b1e      	ldr	r3, [pc, #120]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085be:	ee07 3a90 	vmov	s15, r3
 80085c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80085ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008640 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80085e8:	4b11      	ldr	r3, [pc, #68]	; (8008630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ec:	0a5b      	lsrs	r3, r3, #9
 80085ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f2:	3301      	adds	r3, #1
 80085f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008600:	edd7 6a07 	vldr	s13, [r7, #28]
 8008604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800860c:	ee17 3a90 	vmov	r3, s15
 8008610:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008612:	e005      	b.n	8008620 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008614:	2300      	movs	r3, #0
 8008616:	61bb      	str	r3, [r7, #24]
      break;
 8008618:	e002      	b.n	8008620 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800861c:	61bb      	str	r3, [r7, #24]
      break;
 800861e:	bf00      	nop
  }

  return sysclockfreq;
 8008620:	69bb      	ldr	r3, [r7, #24]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3724      	adds	r7, #36	; 0x24
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	58024400 	.word	0x58024400
 8008634:	03d09000 	.word	0x03d09000
 8008638:	003d0900 	.word	0x003d0900
 800863c:	017d7840 	.word	0x017d7840
 8008640:	46000000 	.word	0x46000000
 8008644:	4c742400 	.word	0x4c742400
 8008648:	4a742400 	.word	0x4a742400
 800864c:	4bbebc20 	.word	0x4bbebc20

08008650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008656:	f7ff fe81 	bl	800835c <HAL_RCC_GetSysClockFreq>
 800865a:	4602      	mov	r2, r0
 800865c:	4b10      	ldr	r3, [pc, #64]	; (80086a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	0a1b      	lsrs	r3, r3, #8
 8008662:	f003 030f 	and.w	r3, r3, #15
 8008666:	490f      	ldr	r1, [pc, #60]	; (80086a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008668:	5ccb      	ldrb	r3, [r1, r3]
 800866a:	f003 031f 	and.w	r3, r3, #31
 800866e:	fa22 f303 	lsr.w	r3, r2, r3
 8008672:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008674:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	4a09      	ldr	r2, [pc, #36]	; (80086a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800867e:	5cd3      	ldrb	r3, [r2, r3]
 8008680:	f003 031f 	and.w	r3, r3, #31
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	fa22 f303 	lsr.w	r3, r2, r3
 800868a:	4a07      	ldr	r2, [pc, #28]	; (80086a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800868c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800868e:	4a07      	ldr	r2, [pc, #28]	; (80086ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008694:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008696:	681b      	ldr	r3, [r3, #0]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	58024400 	.word	0x58024400
 80086a4:	0801334c 	.word	0x0801334c
 80086a8:	24000004 	.word	0x24000004
 80086ac:	24000000 	.word	0x24000000

080086b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80086b4:	f7ff ffcc 	bl	8008650 <HAL_RCC_GetHCLKFreq>
 80086b8:	4602      	mov	r2, r0
 80086ba:	4b06      	ldr	r3, [pc, #24]	; (80086d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	091b      	lsrs	r3, r3, #4
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	4904      	ldr	r1, [pc, #16]	; (80086d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80086c6:	5ccb      	ldrb	r3, [r1, r3]
 80086c8:	f003 031f 	and.w	r3, r3, #31
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	58024400 	.word	0x58024400
 80086d8:	0801334c 	.word	0x0801334c

080086dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80086e0:	f7ff ffb6 	bl	8008650 <HAL_RCC_GetHCLKFreq>
 80086e4:	4602      	mov	r2, r0
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	4904      	ldr	r1, [pc, #16]	; (8008704 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086f2:	5ccb      	ldrb	r3, [r1, r3]
 80086f4:	f003 031f 	and.w	r3, r3, #31
 80086f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	58024400 	.word	0x58024400
 8008704:	0801334c 	.word	0x0801334c

08008708 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	223f      	movs	r2, #63	; 0x3f
 8008716:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008718:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <HAL_RCC_GetClockConfig+0x7c>)
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f003 0207 	and.w	r2, r3, #7
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008724:	4b17      	ldr	r3, [pc, #92]	; (8008784 <HAL_RCC_GetClockConfig+0x7c>)
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008730:	4b14      	ldr	r3, [pc, #80]	; (8008784 <HAL_RCC_GetClockConfig+0x7c>)
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f003 020f 	and.w	r2, r3, #15
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800873c:	4b11      	ldr	r3, [pc, #68]	; (8008784 <HAL_RCC_GetClockConfig+0x7c>)
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008748:	4b0e      	ldr	r3, [pc, #56]	; (8008784 <HAL_RCC_GetClockConfig+0x7c>)
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008754:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <HAL_RCC_GetClockConfig+0x7c>)
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008760:	4b08      	ldr	r3, [pc, #32]	; (8008784 <HAL_RCC_GetClockConfig+0x7c>)
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <HAL_RCC_GetClockConfig+0x80>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 020f 	and.w	r2, r3, #15
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	601a      	str	r2, [r3, #0]
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	58024400 	.word	0x58024400
 8008788:	52002000 	.word	0x52002000

0800878c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800878c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008790:	b0ca      	sub	sp, #296	; 0x128
 8008792:	af00      	add	r7, sp, #0
 8008794:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008798:	2300      	movs	r3, #0
 800879a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800879e:	2300      	movs	r3, #0
 80087a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80087b0:	2500      	movs	r5, #0
 80087b2:	ea54 0305 	orrs.w	r3, r4, r5
 80087b6:	d049      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80087b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087c2:	d02f      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80087c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087c8:	d828      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087ce:	d01a      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80087d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087d4:	d822      	bhi.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087de:	d007      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80087e0:	e01c      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e2:	4bb8      	ldr	r3, [pc, #736]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	4ab7      	ldr	r2, [pc, #732]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087ee:	e01a      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f4:	3308      	adds	r3, #8
 80087f6:	2102      	movs	r1, #2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f002 fb61 	bl	800aec0 <RCCEx_PLL2_Config>
 80087fe:	4603      	mov	r3, r0
 8008800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008804:	e00f      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880a:	3328      	adds	r3, #40	; 0x28
 800880c:	2102      	movs	r1, #2
 800880e:	4618      	mov	r0, r3
 8008810:	f002 fc08 	bl	800b024 <RCCEx_PLL3_Config>
 8008814:	4603      	mov	r3, r0
 8008816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800881a:	e004      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008822:	e000      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800882e:	4ba5      	ldr	r3, [pc, #660]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008832:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800883a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800883c:	4aa1      	ldr	r2, [pc, #644]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800883e:	430b      	orrs	r3, r1
 8008840:	6513      	str	r3, [r2, #80]	; 0x50
 8008842:	e003      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008848:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008858:	f04f 0900 	mov.w	r9, #0
 800885c:	ea58 0309 	orrs.w	r3, r8, r9
 8008860:	d047      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008868:	2b04      	cmp	r3, #4
 800886a:	d82a      	bhi.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	08008889 	.word	0x08008889
 8008878:	08008897 	.word	0x08008897
 800887c:	080088ad 	.word	0x080088ad
 8008880:	080088cb 	.word	0x080088cb
 8008884:	080088cb 	.word	0x080088cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008888:	4b8e      	ldr	r3, [pc, #568]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	4a8d      	ldr	r2, [pc, #564]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800888e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008894:	e01a      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889a:	3308      	adds	r3, #8
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f002 fb0e 	bl	800aec0 <RCCEx_PLL2_Config>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088aa:	e00f      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b0:	3328      	adds	r3, #40	; 0x28
 80088b2:	2100      	movs	r1, #0
 80088b4:	4618      	mov	r0, r3
 80088b6:	f002 fbb5 	bl	800b024 <RCCEx_PLL3_Config>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088c0:	e004      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088c8:	e000      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80088ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088d4:	4b7b      	ldr	r3, [pc, #492]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d8:	f023 0107 	bic.w	r1, r3, #7
 80088dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e2:	4a78      	ldr	r2, [pc, #480]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088e4:	430b      	orrs	r3, r1
 80088e6:	6513      	str	r3, [r2, #80]	; 0x50
 80088e8:	e003      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80088f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80088fe:	f04f 0b00 	mov.w	fp, #0
 8008902:	ea5a 030b 	orrs.w	r3, sl, fp
 8008906:	d04c      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800890e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008912:	d030      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008918:	d829      	bhi.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800891a:	2bc0      	cmp	r3, #192	; 0xc0
 800891c:	d02d      	beq.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800891e:	2bc0      	cmp	r3, #192	; 0xc0
 8008920:	d825      	bhi.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008922:	2b80      	cmp	r3, #128	; 0x80
 8008924:	d018      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008926:	2b80      	cmp	r3, #128	; 0x80
 8008928:	d821      	bhi.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800892e:	2b40      	cmp	r3, #64	; 0x40
 8008930:	d007      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008932:	e01c      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008934:	4b63      	ldr	r3, [pc, #396]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	4a62      	ldr	r2, [pc, #392]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800893a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800893e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008940:	e01c      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008946:	3308      	adds	r3, #8
 8008948:	2100      	movs	r1, #0
 800894a:	4618      	mov	r0, r3
 800894c:	f002 fab8 	bl	800aec0 <RCCEx_PLL2_Config>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008956:	e011      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895c:	3328      	adds	r3, #40	; 0x28
 800895e:	2100      	movs	r1, #0
 8008960:	4618      	mov	r0, r3
 8008962:	f002 fb5f 	bl	800b024 <RCCEx_PLL3_Config>
 8008966:	4603      	mov	r3, r0
 8008968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800896c:	e006      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008974:	e002      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008976:	bf00      	nop
 8008978:	e000      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800897a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800897c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008984:	4b4f      	ldr	r3, [pc, #316]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008988:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800898c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008992:	4a4c      	ldr	r2, [pc, #304]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008994:	430b      	orrs	r3, r1
 8008996:	6513      	str	r3, [r2, #80]	; 0x50
 8008998:	e003      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800899e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80089a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80089ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80089b2:	2300      	movs	r3, #0
 80089b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80089b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80089bc:	460b      	mov	r3, r1
 80089be:	4313      	orrs	r3, r2
 80089c0:	d053      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80089c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089ce:	d035      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80089d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089d4:	d82e      	bhi.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089da:	d031      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80089dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089e0:	d828      	bhi.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089e6:	d01a      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80089e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ec:	d822      	bhi.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80089f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089f6:	d007      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80089f8:	e01c      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089fa:	4b32      	ldr	r3, [pc, #200]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	4a31      	ldr	r2, [pc, #196]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a06:	e01c      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f002 fa55 	bl	800aec0 <RCCEx_PLL2_Config>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a1c:	e011      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a22:	3328      	adds	r3, #40	; 0x28
 8008a24:	2100      	movs	r1, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f002 fafc 	bl	800b024 <RCCEx_PLL3_Config>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a32:	e006      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a3a:	e002      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a3c:	bf00      	nop
 8008a3e:	e000      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a4a:	4b1e      	ldr	r3, [pc, #120]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a5a:	4a1a      	ldr	r2, [pc, #104]	; (8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8008a60:	e003      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008a84:	460b      	mov	r3, r1
 8008a86:	4313      	orrs	r3, r2
 8008a88:	d056      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a96:	d038      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a9c:	d831      	bhi.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008aa2:	d034      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008aa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008aa8:	d82b      	bhi.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aae:	d01d      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ab4:	d825      	bhi.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008aba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008abe:	d00a      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008ac0:	e01f      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008ac2:	bf00      	nop
 8008ac4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac8:	4ba2      	ldr	r3, [pc, #648]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4aa1      	ldr	r2, [pc, #644]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ad4:	e01c      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ada:	3308      	adds	r3, #8
 8008adc:	2100      	movs	r1, #0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f002 f9ee 	bl	800aec0 <RCCEx_PLL2_Config>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008aea:	e011      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af0:	3328      	adds	r3, #40	; 0x28
 8008af2:	2100      	movs	r1, #0
 8008af4:	4618      	mov	r0, r3
 8008af6:	f002 fa95 	bl	800b024 <RCCEx_PLL3_Config>
 8008afa:	4603      	mov	r3, r0
 8008afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b00:	e006      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b08:	e002      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008b0a:	bf00      	nop
 8008b0c:	e000      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10b      	bne.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b18:	4b8e      	ldr	r3, [pc, #568]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b28:	4a8a      	ldr	r2, [pc, #552]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b2e:	e003      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008b44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008b52:	460b      	mov	r3, r1
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d03a      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5e:	2b30      	cmp	r3, #48	; 0x30
 8008b60:	d01f      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008b62:	2b30      	cmp	r3, #48	; 0x30
 8008b64:	d819      	bhi.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008b66:	2b20      	cmp	r3, #32
 8008b68:	d00c      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	d815      	bhi.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d019      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008b72:	2b10      	cmp	r3, #16
 8008b74:	d111      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b76:	4b77      	ldr	r3, [pc, #476]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	4a76      	ldr	r2, [pc, #472]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008b82:	e011      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b88:	3308      	adds	r3, #8
 8008b8a:	2102      	movs	r1, #2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f002 f997 	bl	800aec0 <RCCEx_PLL2_Config>
 8008b92:	4603      	mov	r3, r0
 8008b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008b98:	e006      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ba0:	e002      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ba2:	bf00      	nop
 8008ba4:	e000      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10a      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008bb0:	4b68      	ldr	r3, [pc, #416]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bbe:	4a65      	ldr	r2, [pc, #404]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bc0:	430b      	orrs	r3, r1
 8008bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bc4:	e003      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008bda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bde:	2300      	movs	r3, #0
 8008be0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008be4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4313      	orrs	r3, r2
 8008bec:	d051      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bf8:	d035      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bfe:	d82e      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c04:	d031      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008c06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c0a:	d828      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c10:	d01a      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c16:	d822      	bhi.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c20:	d007      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008c22:	e01c      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c24:	4b4b      	ldr	r3, [pc, #300]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	4a4a      	ldr	r2, [pc, #296]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c30:	e01c      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c36:	3308      	adds	r3, #8
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 f940 	bl	800aec0 <RCCEx_PLL2_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c46:	e011      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c4c:	3328      	adds	r3, #40	; 0x28
 8008c4e:	2100      	movs	r1, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f002 f9e7 	bl	800b024 <RCCEx_PLL3_Config>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c5c:	e006      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c64:	e002      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008c66:	bf00      	nop
 8008c68:	e000      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008c74:	4b37      	ldr	r3, [pc, #220]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c82:	4a34      	ldr	r2, [pc, #208]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c84:	430b      	orrs	r3, r1
 8008c86:	6513      	str	r3, [r2, #80]	; 0x50
 8008c88:	e003      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ca8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008cac:	460b      	mov	r3, r1
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	d056      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cbc:	d033      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cc2:	d82c      	bhi.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cc8:	d02f      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008cca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cce:	d826      	bhi.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008cd4:	d02b      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008cd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008cda:	d820      	bhi.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ce0:	d012      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ce6:	d81a      	bhi.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d022      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf0:	d115      	bne.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f002 f8e0 	bl	800aec0 <RCCEx_PLL2_Config>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d06:	e015      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0c:	3328      	adds	r3, #40	; 0x28
 8008d0e:	2101      	movs	r1, #1
 8008d10:	4618      	mov	r0, r3
 8008d12:	f002 f987 	bl	800b024 <RCCEx_PLL3_Config>
 8008d16:	4603      	mov	r3, r0
 8008d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d1c:	e00a      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d24:	e006      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d26:	bf00      	nop
 8008d28:	e004      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d2a:	bf00      	nop
 8008d2c:	e002      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d2e:	bf00      	nop
 8008d30:	e000      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10d      	bne.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d4a:	4a02      	ldr	r2, [pc, #8]	; (8008d54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d4c:	430b      	orrs	r3, r1
 8008d4e:	6513      	str	r3, [r2, #80]	; 0x50
 8008d50:	e006      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008d52:	bf00      	nop
 8008d54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d70:	2300      	movs	r3, #0
 8008d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	d055      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d8c:	d033      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d92:	d82c      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d98:	d02f      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9e:	d826      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008da0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008da4:	d02b      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008da6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008daa:	d820      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db0:	d012      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db6:	d81a      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d022      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008dbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dc0:	d115      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	2101      	movs	r1, #1
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f002 f878 	bl	800aec0 <RCCEx_PLL2_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008dd6:	e015      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ddc:	3328      	adds	r3, #40	; 0x28
 8008dde:	2101      	movs	r1, #1
 8008de0:	4618      	mov	r0, r3
 8008de2:	f002 f91f 	bl	800b024 <RCCEx_PLL3_Config>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008dec:	e00a      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008df4:	e006      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008df6:	bf00      	nop
 8008df8:	e004      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dfa:	bf00      	nop
 8008dfc:	e002      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008dfe:	bf00      	nop
 8008e00:	e000      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e0c:	4ba3      	ldr	r3, [pc, #652]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e10:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e1c:	4a9f      	ldr	r2, [pc, #636]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1e:	430b      	orrs	r3, r1
 8008e20:	6593      	str	r3, [r2, #88]	; 0x58
 8008e22:	e003      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e46:	460b      	mov	r3, r1
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	d037      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e56:	d00e      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5c:	d816      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d018      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e66:	d111      	bne.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e68:	4b8c      	ldr	r3, [pc, #560]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	4a8b      	ldr	r2, [pc, #556]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e74:	e00f      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 f81e 	bl	800aec0 <RCCEx_PLL2_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008e8a:	e004      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e92:	e000      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008e9e:	4b7f      	ldr	r3, [pc, #508]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eac:	4a7b      	ldr	r2, [pc, #492]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eae:	430b      	orrs	r3, r1
 8008eb0:	6513      	str	r3, [r2, #80]	; 0x50
 8008eb2:	e003      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ecc:	2300      	movs	r3, #0
 8008ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008ed2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	d039      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d81c      	bhi.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008ee6:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eec:	08008f29 	.word	0x08008f29
 8008ef0:	08008efd 	.word	0x08008efd
 8008ef4:	08008f0b 	.word	0x08008f0b
 8008ef8:	08008f29 	.word	0x08008f29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008efc:	4b67      	ldr	r3, [pc, #412]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	4a66      	ldr	r2, [pc, #408]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f08:	e00f      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f0e:	3308      	adds	r3, #8
 8008f10:	2102      	movs	r1, #2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 ffd4 	bl	800aec0 <RCCEx_PLL2_Config>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f1e:	e004      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f26:	e000      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f32:	4b5a      	ldr	r3, [pc, #360]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f36:	f023 0103 	bic.w	r1, r3, #3
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f40:	4a56      	ldr	r2, [pc, #344]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f42:	430b      	orrs	r3, r1
 8008f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f46:	e003      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f60:	2300      	movs	r3, #0
 8008f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	f000 809f 	beq.w	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f72:	4b4b      	ldr	r3, [pc, #300]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a4a      	ldr	r2, [pc, #296]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f7e:	f7f9 fb79 	bl	8002674 <HAL_GetTick>
 8008f82:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f86:	e00b      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f88:	f7f9 fb74 	bl	8002674 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b64      	cmp	r3, #100	; 0x64
 8008f96:	d903      	bls.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f9e:	e005      	b.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fa0:	4b3f      	ldr	r3, [pc, #252]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0ed      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008fac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d179      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008fb4:	4b39      	ldr	r3, [pc, #228]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fc0:	4053      	eors	r3, r2
 8008fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d015      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fca:	4b34      	ldr	r3, [pc, #208]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fd6:	4b31      	ldr	r3, [pc, #196]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fda:	4a30      	ldr	r2, [pc, #192]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fe0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fe2:	4b2e      	ldr	r3, [pc, #184]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe6:	4a2d      	ldr	r2, [pc, #180]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008fee:	4a2b      	ldr	r2, [pc, #172]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ff4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009002:	d118      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009004:	f7f9 fb36 	bl	8002674 <HAL_GetTick>
 8009008:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800900c:	e00d      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800900e:	f7f9 fb31 	bl	8002674 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009018:	1ad2      	subs	r2, r2, r3
 800901a:	f241 3388 	movw	r3, #5000	; 0x1388
 800901e:	429a      	cmp	r2, r3
 8009020:	d903      	bls.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009028:	e005      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800902a:	4b1c      	ldr	r3, [pc, #112]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800902c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0eb      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903a:	2b00      	cmp	r3, #0
 800903c:	d129      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800903e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800904a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800904e:	d10e      	bne.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009050:	4b12      	ldr	r3, [pc, #72]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800905c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009060:	091a      	lsrs	r2, r3, #4
 8009062:	4b10      	ldr	r3, [pc, #64]	; (80090a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009064:	4013      	ands	r3, r2
 8009066:	4a0d      	ldr	r2, [pc, #52]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009068:	430b      	orrs	r3, r1
 800906a:	6113      	str	r3, [r2, #16]
 800906c:	e005      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800906e:	4b0b      	ldr	r3, [pc, #44]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	4a0a      	ldr	r2, [pc, #40]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009074:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009078:	6113      	str	r3, [r2, #16]
 800907a:	4b08      	ldr	r3, [pc, #32]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800907c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800907e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800908a:	4a04      	ldr	r2, [pc, #16]	; (800909c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800908c:	430b      	orrs	r3, r1
 800908e:	6713      	str	r3, [r2, #112]	; 0x70
 8009090:	e00e      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009096:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800909a:	e009      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800909c:	58024400 	.word	0x58024400
 80090a0:	58024800 	.word	0x58024800
 80090a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80090b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f002 0301 	and.w	r3, r2, #1
 80090bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80090c0:	2300      	movs	r3, #0
 80090c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f000 8089 	beq.w	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090d8:	2b28      	cmp	r3, #40	; 0x28
 80090da:	d86b      	bhi.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80090dc:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e2:	bf00      	nop
 80090e4:	080091bd 	.word	0x080091bd
 80090e8:	080091b5 	.word	0x080091b5
 80090ec:	080091b5 	.word	0x080091b5
 80090f0:	080091b5 	.word	0x080091b5
 80090f4:	080091b5 	.word	0x080091b5
 80090f8:	080091b5 	.word	0x080091b5
 80090fc:	080091b5 	.word	0x080091b5
 8009100:	080091b5 	.word	0x080091b5
 8009104:	08009189 	.word	0x08009189
 8009108:	080091b5 	.word	0x080091b5
 800910c:	080091b5 	.word	0x080091b5
 8009110:	080091b5 	.word	0x080091b5
 8009114:	080091b5 	.word	0x080091b5
 8009118:	080091b5 	.word	0x080091b5
 800911c:	080091b5 	.word	0x080091b5
 8009120:	080091b5 	.word	0x080091b5
 8009124:	0800919f 	.word	0x0800919f
 8009128:	080091b5 	.word	0x080091b5
 800912c:	080091b5 	.word	0x080091b5
 8009130:	080091b5 	.word	0x080091b5
 8009134:	080091b5 	.word	0x080091b5
 8009138:	080091b5 	.word	0x080091b5
 800913c:	080091b5 	.word	0x080091b5
 8009140:	080091b5 	.word	0x080091b5
 8009144:	080091bd 	.word	0x080091bd
 8009148:	080091b5 	.word	0x080091b5
 800914c:	080091b5 	.word	0x080091b5
 8009150:	080091b5 	.word	0x080091b5
 8009154:	080091b5 	.word	0x080091b5
 8009158:	080091b5 	.word	0x080091b5
 800915c:	080091b5 	.word	0x080091b5
 8009160:	080091b5 	.word	0x080091b5
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091b5 	.word	0x080091b5
 800916c:	080091b5 	.word	0x080091b5
 8009170:	080091b5 	.word	0x080091b5
 8009174:	080091b5 	.word	0x080091b5
 8009178:	080091b5 	.word	0x080091b5
 800917c:	080091b5 	.word	0x080091b5
 8009180:	080091b5 	.word	0x080091b5
 8009184:	080091bd 	.word	0x080091bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800918c:	3308      	adds	r3, #8
 800918e:	2101      	movs	r1, #1
 8009190:	4618      	mov	r0, r3
 8009192:	f001 fe95 	bl	800aec0 <RCCEx_PLL2_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800919c:	e00f      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a2:	3328      	adds	r3, #40	; 0x28
 80091a4:	2101      	movs	r1, #1
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 ff3c 	bl	800b024 <RCCEx_PLL3_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80091b2:	e004      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091ba:	e000      	b.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80091bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80091c6:	4bbf      	ldr	r3, [pc, #764]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80091ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091d4:	4abb      	ldr	r2, [pc, #748]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091d6:	430b      	orrs	r3, r1
 80091d8:	6553      	str	r3, [r2, #84]	; 0x54
 80091da:	e003      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f002 0302 	and.w	r3, r2, #2
 80091f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091f4:	2300      	movs	r3, #0
 80091f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80091fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80091fe:	460b      	mov	r3, r1
 8009200:	4313      	orrs	r3, r2
 8009202:	d041      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800920a:	2b05      	cmp	r3, #5
 800920c:	d824      	bhi.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800920e:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	08009261 	.word	0x08009261
 8009218:	0800922d 	.word	0x0800922d
 800921c:	08009243 	.word	0x08009243
 8009220:	08009261 	.word	0x08009261
 8009224:	08009261 	.word	0x08009261
 8009228:	08009261 	.word	0x08009261
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800922c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009230:	3308      	adds	r3, #8
 8009232:	2101      	movs	r1, #1
 8009234:	4618      	mov	r0, r3
 8009236:	f001 fe43 	bl	800aec0 <RCCEx_PLL2_Config>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009240:	e00f      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009246:	3328      	adds	r3, #40	; 0x28
 8009248:	2101      	movs	r1, #1
 800924a:	4618      	mov	r0, r3
 800924c:	f001 feea 	bl	800b024 <RCCEx_PLL3_Config>
 8009250:	4603      	mov	r3, r0
 8009252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009256:	e004      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800925e:	e000      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800926a:	4b96      	ldr	r3, [pc, #600]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800926c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926e:	f023 0107 	bic.w	r1, r3, #7
 8009272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009278:	4a92      	ldr	r2, [pc, #584]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800927a:	430b      	orrs	r3, r1
 800927c:	6553      	str	r3, [r2, #84]	; 0x54
 800927e:	e003      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f002 0304 	and.w	r3, r2, #4
 8009294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009298:	2300      	movs	r3, #0
 800929a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800929e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4313      	orrs	r3, r2
 80092a6:	d044      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092b0:	2b05      	cmp	r3, #5
 80092b2:	d825      	bhi.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80092b4:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80092b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ba:	bf00      	nop
 80092bc:	08009309 	.word	0x08009309
 80092c0:	080092d5 	.word	0x080092d5
 80092c4:	080092eb 	.word	0x080092eb
 80092c8:	08009309 	.word	0x08009309
 80092cc:	08009309 	.word	0x08009309
 80092d0:	08009309 	.word	0x08009309
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d8:	3308      	adds	r3, #8
 80092da:	2101      	movs	r1, #1
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 fdef 	bl	800aec0 <RCCEx_PLL2_Config>
 80092e2:	4603      	mov	r3, r0
 80092e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80092e8:	e00f      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ee:	3328      	adds	r3, #40	; 0x28
 80092f0:	2101      	movs	r1, #1
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 fe96 	bl	800b024 <RCCEx_PLL3_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80092fe:	e004      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009306:	e000      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800930a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10b      	bne.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009312:	4b6c      	ldr	r3, [pc, #432]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009316:	f023 0107 	bic.w	r1, r3, #7
 800931a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800931e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009322:	4a68      	ldr	r2, [pc, #416]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009324:	430b      	orrs	r3, r1
 8009326:	6593      	str	r3, [r2, #88]	; 0x58
 8009328:	e003      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800932e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f002 0320 	and.w	r3, r2, #32
 800933e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009342:	2300      	movs	r3, #0
 8009344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800934c:	460b      	mov	r3, r1
 800934e:	4313      	orrs	r3, r2
 8009350:	d055      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800935e:	d033      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009364:	d82c      	bhi.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936a:	d02f      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800936c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009370:	d826      	bhi.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009372:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009376:	d02b      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009378:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800937c:	d820      	bhi.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800937e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009382:	d012      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009388:	d81a      	bhi.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d022      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800938e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009392:	d115      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009398:	3308      	adds	r3, #8
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f001 fd8f 	bl	800aec0 <RCCEx_PLL2_Config>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80093a8:	e015      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ae:	3328      	adds	r3, #40	; 0x28
 80093b0:	2102      	movs	r1, #2
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 fe36 	bl	800b024 <RCCEx_PLL3_Config>
 80093b8:	4603      	mov	r3, r0
 80093ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80093be:	e00a      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093c6:	e006      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093c8:	bf00      	nop
 80093ca:	e004      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093cc:	bf00      	nop
 80093ce:	e002      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093d0:	bf00      	nop
 80093d2:	e000      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80093d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10b      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093de:	4b39      	ldr	r3, [pc, #228]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80093e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ee:	4a35      	ldr	r2, [pc, #212]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6553      	str	r3, [r2, #84]	; 0x54
 80093f4:	e003      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800940a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800940e:	2300      	movs	r3, #0
 8009410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009414:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009418:	460b      	mov	r3, r1
 800941a:	4313      	orrs	r3, r2
 800941c:	d058      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800941e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009426:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800942a:	d033      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800942c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009430:	d82c      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009436:	d02f      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943c:	d826      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800943e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009442:	d02b      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009448:	d820      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800944a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800944e:	d012      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009454:	d81a      	bhi.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d022      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800945a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800945e:	d115      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009464:	3308      	adds	r3, #8
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f001 fd29 	bl	800aec0 <RCCEx_PLL2_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009474:	e015      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800947a:	3328      	adds	r3, #40	; 0x28
 800947c:	2102      	movs	r1, #2
 800947e:	4618      	mov	r0, r3
 8009480:	f001 fdd0 	bl	800b024 <RCCEx_PLL3_Config>
 8009484:	4603      	mov	r3, r0
 8009486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800948a:	e00a      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009492:	e006      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009494:	bf00      	nop
 8009496:	e004      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009498:	bf00      	nop
 800949a:	e002      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10e      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094aa:	4b06      	ldr	r3, [pc, #24]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094ba:	4a02      	ldr	r2, [pc, #8]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094bc:	430b      	orrs	r3, r1
 80094be:	6593      	str	r3, [r2, #88]	; 0x58
 80094c0:	e006      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80094c2:	bf00      	nop
 80094c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80094dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094e0:	2300      	movs	r3, #0
 80094e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80094ea:	460b      	mov	r3, r1
 80094ec:	4313      	orrs	r3, r2
 80094ee:	d055      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80094f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094fc:	d033      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80094fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009502:	d82c      	bhi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009508:	d02f      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800950a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800950e:	d826      	bhi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009510:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009514:	d02b      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009516:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800951a:	d820      	bhi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800951c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009520:	d012      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009526:	d81a      	bhi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009528:	2b00      	cmp	r3, #0
 800952a:	d022      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800952c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009530:	d115      	bne.n	800955e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009536:	3308      	adds	r3, #8
 8009538:	2100      	movs	r1, #0
 800953a:	4618      	mov	r0, r3
 800953c:	f001 fcc0 	bl	800aec0 <RCCEx_PLL2_Config>
 8009540:	4603      	mov	r3, r0
 8009542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009546:	e015      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954c:	3328      	adds	r3, #40	; 0x28
 800954e:	2102      	movs	r1, #2
 8009550:	4618      	mov	r0, r3
 8009552:	f001 fd67 	bl	800b024 <RCCEx_PLL3_Config>
 8009556:	4603      	mov	r3, r0
 8009558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800955c:	e00a      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009564:	e006      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009566:	bf00      	nop
 8009568:	e004      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800956a:	bf00      	nop
 800956c:	e002      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800956e:	bf00      	nop
 8009570:	e000      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800957c:	4ba1      	ldr	r3, [pc, #644]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800957e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009580:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800958c:	4a9d      	ldr	r2, [pc, #628]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800958e:	430b      	orrs	r3, r1
 8009590:	6593      	str	r3, [r2, #88]	; 0x58
 8009592:	e003      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009598:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800959c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f002 0308 	and.w	r3, r2, #8
 80095a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095ac:	2300      	movs	r3, #0
 80095ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80095b6:	460b      	mov	r3, r1
 80095b8:	4313      	orrs	r3, r2
 80095ba:	d01e      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80095bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c8:	d10c      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ce:	3328      	adds	r3, #40	; 0x28
 80095d0:	2102      	movs	r1, #2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f001 fd26 	bl	800b024 <RCCEx_PLL3_Config>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80095e4:	4b87      	ldr	r3, [pc, #540]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095f4:	4a83      	ldr	r2, [pc, #524]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095f6:	430b      	orrs	r3, r1
 80095f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f002 0310 	and.w	r3, r2, #16
 8009606:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800960a:	2300      	movs	r3, #0
 800960c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009610:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009614:	460b      	mov	r3, r1
 8009616:	4313      	orrs	r3, r2
 8009618:	d01e      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009626:	d10c      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800962c:	3328      	adds	r3, #40	; 0x28
 800962e:	2102      	movs	r1, #2
 8009630:	4618      	mov	r0, r3
 8009632:	f001 fcf7 	bl	800b024 <RCCEx_PLL3_Config>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009642:	4b70      	ldr	r3, [pc, #448]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009652:	4a6c      	ldr	r2, [pc, #432]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009654:	430b      	orrs	r3, r1
 8009656:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009668:	2300      	movs	r3, #0
 800966a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800966e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009672:	460b      	mov	r3, r1
 8009674:	4313      	orrs	r3, r2
 8009676:	d03e      	beq.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009684:	d022      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800968a:	d81b      	bhi.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d003      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009694:	d00b      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009696:	e015      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969c:	3308      	adds	r3, #8
 800969e:	2100      	movs	r1, #0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f001 fc0d 	bl	800aec0 <RCCEx_PLL2_Config>
 80096a6:	4603      	mov	r3, r0
 80096a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80096ac:	e00f      	b.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b2:	3328      	adds	r3, #40	; 0x28
 80096b4:	2102      	movs	r1, #2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 fcb4 	bl	800b024 <RCCEx_PLL3_Config>
 80096bc:	4603      	mov	r3, r0
 80096be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80096c2:	e004      	b.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096ca:	e000      	b.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80096cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10b      	bne.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096d6:	4b4b      	ldr	r3, [pc, #300]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80096de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096e6:	4a47      	ldr	r2, [pc, #284]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096e8:	430b      	orrs	r3, r1
 80096ea:	6593      	str	r3, [r2, #88]	; 0x58
 80096ec:	e003      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009702:	67bb      	str	r3, [r7, #120]	; 0x78
 8009704:	2300      	movs	r3, #0
 8009706:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009708:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800970c:	460b      	mov	r3, r1
 800970e:	4313      	orrs	r3, r2
 8009710:	d03b      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800971a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800971e:	d01f      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009724:	d818      	bhi.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800972a:	d003      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800972c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009730:	d007      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009732:	e011      	b.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009734:	4b33      	ldr	r3, [pc, #204]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	4a32      	ldr	r2, [pc, #200]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800973a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800973e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009740:	e00f      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009746:	3328      	adds	r3, #40	; 0x28
 8009748:	2101      	movs	r1, #1
 800974a:	4618      	mov	r0, r3
 800974c:	f001 fc6a 	bl	800b024 <RCCEx_PLL3_Config>
 8009750:	4603      	mov	r3, r0
 8009752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009756:	e004      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800975e:	e000      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10b      	bne.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800976a:	4b26      	ldr	r3, [pc, #152]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800976c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977a:	4a22      	ldr	r2, [pc, #136]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800977c:	430b      	orrs	r3, r1
 800977e:	6553      	str	r3, [r2, #84]	; 0x54
 8009780:	e003      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009786:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800978a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009796:	673b      	str	r3, [r7, #112]	; 0x70
 8009798:	2300      	movs	r3, #0
 800979a:	677b      	str	r3, [r7, #116]	; 0x74
 800979c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80097a0:	460b      	mov	r3, r1
 80097a2:	4313      	orrs	r3, r2
 80097a4:	d034      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80097a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80097b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b4:	d007      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80097b6:	e011      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b8:	4b12      	ldr	r3, [pc, #72]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	4a11      	ldr	r2, [pc, #68]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80097c4:	e00e      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ca:	3308      	adds	r3, #8
 80097cc:	2102      	movs	r1, #2
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 fb76 	bl	800aec0 <RCCEx_PLL2_Config>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80097da:	e003      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10d      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80097ec:	4b05      	ldr	r3, [pc, #20]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fa:	4a02      	ldr	r2, [pc, #8]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097fc:	430b      	orrs	r3, r1
 80097fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009800:	e006      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009802:	bf00      	nop
 8009804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800980c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800981c:	66bb      	str	r3, [r7, #104]	; 0x68
 800981e:	2300      	movs	r3, #0
 8009820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009822:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009826:	460b      	mov	r3, r1
 8009828:	4313      	orrs	r3, r2
 800982a:	d00c      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800982c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009830:	3328      	adds	r3, #40	; 0x28
 8009832:	2102      	movs	r1, #2
 8009834:	4618      	mov	r0, r3
 8009836:	f001 fbf5 	bl	800b024 <RCCEx_PLL3_Config>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009852:	663b      	str	r3, [r7, #96]	; 0x60
 8009854:	2300      	movs	r3, #0
 8009856:	667b      	str	r3, [r7, #100]	; 0x64
 8009858:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800985c:	460b      	mov	r3, r1
 800985e:	4313      	orrs	r3, r2
 8009860:	d038      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800986a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800986e:	d018      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009874:	d811      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800987a:	d014      	beq.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800987c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009880:	d80b      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d011      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800988a:	d106      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800988c:	4bc3      	ldr	r3, [pc, #780]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800988e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009890:	4ac2      	ldr	r2, [pc, #776]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009898:	e008      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098a0:	e004      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098a2:	bf00      	nop
 80098a4:	e002      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098a6:	bf00      	nop
 80098a8:	e000      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10b      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80098b4:	4bb9      	ldr	r3, [pc, #740]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80098bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098c4:	4ab5      	ldr	r2, [pc, #724]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098c6:	430b      	orrs	r3, r1
 80098c8:	6553      	str	r3, [r2, #84]	; 0x54
 80098ca:	e003      	b.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80098e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80098e2:	2300      	movs	r3, #0
 80098e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80098ea:	460b      	mov	r3, r1
 80098ec:	4313      	orrs	r3, r2
 80098ee:	d009      	beq.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098f0:	4baa      	ldr	r3, [pc, #680]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80098f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098fe:	4aa7      	ldr	r2, [pc, #668]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009900:	430b      	orrs	r3, r1
 8009902:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009910:	653b      	str	r3, [r7, #80]	; 0x50
 8009912:	2300      	movs	r3, #0
 8009914:	657b      	str	r3, [r7, #84]	; 0x54
 8009916:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800991a:	460b      	mov	r3, r1
 800991c:	4313      	orrs	r3, r2
 800991e:	d00a      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009920:	4b9e      	ldr	r3, [pc, #632]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009930:	4a9a      	ldr	r2, [pc, #616]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009932:	430b      	orrs	r3, r1
 8009934:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009942:	64bb      	str	r3, [r7, #72]	; 0x48
 8009944:	2300      	movs	r3, #0
 8009946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009948:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800994c:	460b      	mov	r3, r1
 800994e:	4313      	orrs	r3, r2
 8009950:	d009      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009952:	4b92      	ldr	r3, [pc, #584]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800995a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009960:	4a8e      	ldr	r2, [pc, #568]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009962:	430b      	orrs	r3, r1
 8009964:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009972:	643b      	str	r3, [r7, #64]	; 0x40
 8009974:	2300      	movs	r3, #0
 8009976:	647b      	str	r3, [r7, #68]	; 0x44
 8009978:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800997c:	460b      	mov	r3, r1
 800997e:	4313      	orrs	r3, r2
 8009980:	d00e      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009982:	4b86      	ldr	r3, [pc, #536]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	4a85      	ldr	r2, [pc, #532]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800998c:	6113      	str	r3, [r2, #16]
 800998e:	4b83      	ldr	r3, [pc, #524]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009990:	6919      	ldr	r1, [r3, #16]
 8009992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009996:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800999a:	4a80      	ldr	r2, [pc, #512]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800999c:	430b      	orrs	r3, r1
 800999e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80099ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80099ae:	2300      	movs	r3, #0
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80099b6:	460b      	mov	r3, r1
 80099b8:	4313      	orrs	r3, r2
 80099ba:	d009      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80099bc:	4b77      	ldr	r3, [pc, #476]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80099c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ca:	4a74      	ldr	r2, [pc, #464]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099cc:	430b      	orrs	r3, r1
 80099ce:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80099d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80099dc:	633b      	str	r3, [r7, #48]	; 0x30
 80099de:	2300      	movs	r3, #0
 80099e0:	637b      	str	r3, [r7, #52]	; 0x34
 80099e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80099e6:	460b      	mov	r3, r1
 80099e8:	4313      	orrs	r3, r2
 80099ea:	d00a      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80099ec:	4b6b      	ldr	r3, [pc, #428]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099fc:	4a67      	ldr	r2, [pc, #412]	; (8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099fe:	430b      	orrs	r3, r1
 8009a00:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	d011      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a22:	3308      	adds	r3, #8
 8009a24:	2100      	movs	r1, #0
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 fa4a 	bl	800aec0 <RCCEx_PLL2_Config>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	6239      	str	r1, [r7, #32]
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24
 8009a54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	d011      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a62:	3308      	adds	r3, #8
 8009a64:	2101      	movs	r1, #1
 8009a66:	4618      	mov	r0, r3
 8009a68:	f001 fa2a 	bl	800aec0 <RCCEx_PLL2_Config>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	61b9      	str	r1, [r7, #24]
 8009a8e:	f003 0304 	and.w	r3, r3, #4
 8009a92:	61fb      	str	r3, [r7, #28]
 8009a94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	d011      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fa0a 	bl	800aec0 <RCCEx_PLL2_Config>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009abe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	2100      	movs	r1, #0
 8009acc:	6139      	str	r1, [r7, #16]
 8009ace:	f003 0308 	and.w	r3, r3, #8
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4313      	orrs	r3, r2
 8009adc:	d011      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ae2:	3328      	adds	r3, #40	; 0x28
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 fa9c 	bl	800b024 <RCCEx_PLL3_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009af2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009afe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	f003 0310 	and.w	r3, r3, #16
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	d011      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b22:	3328      	adds	r3, #40	; 0x28
 8009b24:	2101      	movs	r1, #1
 8009b26:	4618      	mov	r0, r3
 8009b28:	f001 fa7c 	bl	800b024 <RCCEx_PLL3_Config>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	f003 0320 	and.w	r3, r3, #32
 8009b52:	607b      	str	r3, [r7, #4]
 8009b54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	d011      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b62:	3328      	adds	r3, #40	; 0x28
 8009b64:	2102      	movs	r1, #2
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 fa5c 	bl	800b024 <RCCEx_PLL3_Config>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009b82:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d101      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e000      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009b96:	46bd      	mov	sp, r7
 8009b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b9c:	58024400 	.word	0x58024400

08009ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b090      	sub	sp, #64	; 0x40
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bae:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009bb2:	430b      	orrs	r3, r1
 8009bb4:	f040 8094 	bne.w	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009bb8:	4b9e      	ldr	r3, [pc, #632]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bbc:	f003 0307 	and.w	r3, r3, #7
 8009bc0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	f200 8087 	bhi.w	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009bca:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009be5 	.word	0x08009be5
 8009bd4:	08009c0d 	.word	0x08009c0d
 8009bd8:	08009c35 	.word	0x08009c35
 8009bdc:	08009cd1 	.word	0x08009cd1
 8009be0:	08009c5d 	.word	0x08009c5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009be4:	4b93      	ldr	r3, [pc, #588]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bf0:	d108      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f001 f810 	bl	800ac1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c00:	f000 bd45 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c04:	2300      	movs	r3, #0
 8009c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c08:	f000 bd41 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c0c:	4b89      	ldr	r3, [pc, #548]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c18:	d108      	bne.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c1a:	f107 0318 	add.w	r3, r7, #24
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fd54 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c28:	f000 bd31 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c30:	f000 bd2d 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c34:	4b7f      	ldr	r3, [pc, #508]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c40:	d108      	bne.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c42:	f107 030c 	add.w	r3, r7, #12
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 fe94 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c50:	f000 bd1d 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c58:	f000 bd19 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c5c:	4b75      	ldr	r3, [pc, #468]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c66:	4b73      	ldr	r3, [pc, #460]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0304 	and.w	r3, r3, #4
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	d10c      	bne.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d109      	bne.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c78:	4b6e      	ldr	r3, [pc, #440]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	08db      	lsrs	r3, r3, #3
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	4a6d      	ldr	r2, [pc, #436]	; (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c84:	fa22 f303 	lsr.w	r3, r2, r3
 8009c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c8a:	e01f      	b.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c8c:	4b69      	ldr	r3, [pc, #420]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c98:	d106      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ca0:	d102      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ca2:	4b66      	ldr	r3, [pc, #408]	; (8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca6:	e011      	b.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ca8:	4b62      	ldr	r3, [pc, #392]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cb4:	d106      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cbc:	d102      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009cbe:	4b60      	ldr	r3, [pc, #384]	; (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cc2:	e003      	b.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009cc8:	f000 bce1 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ccc:	f000 bcdf 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009cd0:	4b5c      	ldr	r3, [pc, #368]	; (8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cd4:	f000 bcdb 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cdc:	f000 bcd7 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ce4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009ce8:	430b      	orrs	r3, r1
 8009cea:	f040 80ad 	bne.w	8009e48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009cee:	4b51      	ldr	r3, [pc, #324]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009cf6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cfe:	d056      	beq.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d06:	f200 8090 	bhi.w	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	2bc0      	cmp	r3, #192	; 0xc0
 8009d0e:	f000 8088 	beq.w	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	2bc0      	cmp	r3, #192	; 0xc0
 8009d16:	f200 8088 	bhi.w	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1c:	2b80      	cmp	r3, #128	; 0x80
 8009d1e:	d032      	beq.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	2b80      	cmp	r3, #128	; 0x80
 8009d24:	f200 8081 	bhi.w	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	2b40      	cmp	r3, #64	; 0x40
 8009d32:	d014      	beq.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009d34:	e079      	b.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d36:	4b3f      	ldr	r3, [pc, #252]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d42:	d108      	bne.n	8009d56 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 ff67 	bl	800ac1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d52:	f000 bc9c 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d5a:	f000 bc98 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d5e:	4b35      	ldr	r3, [pc, #212]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d6a:	d108      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d6c:	f107 0318 	add.w	r3, r7, #24
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 fcab 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d7a:	f000 bc88 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d82:	f000 bc84 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d86:	4b2b      	ldr	r3, [pc, #172]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d92:	d108      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d94:	f107 030c 	add.w	r3, r7, #12
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 fdeb 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da2:	f000 bc74 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009daa:	f000 bc70 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dae:	4b21      	ldr	r3, [pc, #132]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009db6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009db8:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d10c      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dca:	4b1a      	ldr	r3, [pc, #104]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	08db      	lsrs	r3, r3, #3
 8009dd0:	f003 0303 	and.w	r3, r3, #3
 8009dd4:	4a18      	ldr	r2, [pc, #96]	; (8009e38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ddc:	e01f      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dea:	d106      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009df2:	d102      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009df4:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df8:	e011      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dfa:	4b0e      	ldr	r3, [pc, #56]	; (8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e06:	d106      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e0e:	d102      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e10:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e14:	e003      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e1a:	f000 bc38 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e1e:	f000 bc36 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e22:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e26:	f000 bc32 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e2e:	f000 bc2e 	b.w	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400
 8009e38:	03d09000 	.word	0x03d09000
 8009e3c:	003d0900 	.word	0x003d0900
 8009e40:	017d7840 	.word	0x017d7840
 8009e44:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e4c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009e50:	430b      	orrs	r3, r1
 8009e52:	f040 809c 	bne.w	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009e56:	4b9e      	ldr	r3, [pc, #632]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009e5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e66:	d054      	beq.n	8009f12 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e6e:	f200 808b 	bhi.w	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e78:	f000 8083 	beq.w	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009e82:	f200 8081 	bhi.w	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e8c:	d02f      	beq.n	8009eee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e94:	d878      	bhi.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d004      	beq.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ea2:	d012      	beq.n	8009eca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009ea4:	e070      	b.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ea6:	4b8a      	ldr	r3, [pc, #552]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eb2:	d107      	bne.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 feaf 	bl	800ac1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ec2:	e3e4      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ec8:	e3e1      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eca:	4b81      	ldr	r3, [pc, #516]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ed6:	d107      	bne.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ed8:	f107 0318 	add.w	r3, r7, #24
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fbf5 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ee6:	e3d2      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009eec:	e3cf      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009eee:	4b78      	ldr	r3, [pc, #480]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efa:	d107      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efc:	f107 030c 	add.w	r3, r7, #12
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 fd37 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f0a:	e3c0      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f10:	e3bd      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f12:	4b6f      	ldr	r3, [pc, #444]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f1a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f1c:	4b6c      	ldr	r3, [pc, #432]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d10c      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d109      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f2e:	4b68      	ldr	r3, [pc, #416]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	08db      	lsrs	r3, r3, #3
 8009f34:	f003 0303 	and.w	r3, r3, #3
 8009f38:	4a66      	ldr	r2, [pc, #408]	; (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f40:	e01e      	b.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f42:	4b63      	ldr	r3, [pc, #396]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f4e:	d106      	bne.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f56:	d102      	bne.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f58:	4b5f      	ldr	r3, [pc, #380]	; (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f5c:	e010      	b.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f5e:	4b5c      	ldr	r3, [pc, #368]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f6a:	d106      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f72:	d102      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f74:	4b59      	ldr	r3, [pc, #356]	; (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f78:	e002      	b.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009f7e:	e386      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f80:	e385      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f82:	4b57      	ldr	r3, [pc, #348]	; (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f86:	e382      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f8c:	e37f      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f92:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009f96:	430b      	orrs	r3, r1
 8009f98:	f040 80a7 	bne.w	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009f9c:	4b4c      	ldr	r3, [pc, #304]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009fa4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fac:	d055      	beq.n	800a05a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fb4:	f200 8096 	bhi.w	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fbe:	f000 8084 	beq.w	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fc8:	f200 808c 	bhi.w	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fd2:	d030      	beq.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fda:	f200 8083 	bhi.w	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d004      	beq.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fea:	d012      	beq.n	800a012 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009fec:	e07a      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fee:	4b38      	ldr	r3, [pc, #224]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ffa:	d107      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fe0b 	bl	800ac1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a00a:	e340      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a010:	e33d      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a012:	4b2f      	ldr	r3, [pc, #188]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a01a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a01e:	d107      	bne.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a020:	f107 0318 	add.w	r3, r7, #24
 800a024:	4618      	mov	r0, r3
 800a026:	f000 fb51 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a02e:	e32e      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a034:	e32b      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a036:	4b26      	ldr	r3, [pc, #152]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a03e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a042:	d107      	bne.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a044:	f107 030c 	add.w	r3, r7, #12
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fc93 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a052:	e31c      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a054:	2300      	movs	r3, #0
 800a056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a058:	e319      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a05a:	4b1d      	ldr	r3, [pc, #116]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a05c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a05e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a062:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a064:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d10c      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a072:	2b00      	cmp	r3, #0
 800a074:	d109      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a076:	4b16      	ldr	r3, [pc, #88]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	08db      	lsrs	r3, r3, #3
 800a07c:	f003 0303 	and.w	r3, r3, #3
 800a080:	4a14      	ldr	r2, [pc, #80]	; (800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a082:	fa22 f303 	lsr.w	r3, r2, r3
 800a086:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a088:	e01e      	b.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a096:	d106      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a09a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a09e:	d102      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0a0:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0a4:	e010      	b.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0b2:	d106      	bne.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ba:	d102      	bne.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0bc:	4b07      	ldr	r3, [pc, #28]	; (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0c0:	e002      	b.n	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a0c6:	e2e2      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0c8:	e2e1      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0ca:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ce:	e2de      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0d0:	58024400 	.word	0x58024400
 800a0d4:	03d09000 	.word	0x03d09000
 800a0d8:	003d0900 	.word	0x003d0900
 800a0dc:	017d7840 	.word	0x017d7840
 800a0e0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e8:	e2d1      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a0ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ee:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a0f2:	430b      	orrs	r3, r1
 800a0f4:	f040 809c 	bne.w	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a0f8:	4b93      	ldr	r3, [pc, #588]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a100:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a108:	d054      	beq.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a110:	f200 808b 	bhi.w	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a11a:	f000 8083 	beq.w	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a124:	f200 8081 	bhi.w	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a12e:	d02f      	beq.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a136:	d878      	bhi.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d004      	beq.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a144:	d012      	beq.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a146:	e070      	b.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a148:	4b7f      	ldr	r3, [pc, #508]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a150:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a154:	d107      	bne.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fd5e 	bl	800ac1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a164:	e293      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a16a:	e290      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a16c:	4b76      	ldr	r3, [pc, #472]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a178:	d107      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17a:	f107 0318 	add.w	r3, r7, #24
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 faa4 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a188:	e281      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18e:	e27e      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a190:	4b6d      	ldr	r3, [pc, #436]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a19c:	d107      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a19e:	f107 030c 	add.w	r3, r7, #12
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 fbe6 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ac:	e26f      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1b2:	e26c      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1b4:	4b64      	ldr	r3, [pc, #400]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1be:	4b62      	ldr	r3, [pc, #392]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0304 	and.w	r3, r3, #4
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d10c      	bne.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1d0:	4b5d      	ldr	r3, [pc, #372]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	08db      	lsrs	r3, r3, #3
 800a1d6:	f003 0303 	and.w	r3, r3, #3
 800a1da:	4a5c      	ldr	r2, [pc, #368]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1e2:	e01e      	b.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1e4:	4b58      	ldr	r3, [pc, #352]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1f0:	d106      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1f8:	d102      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1fa:	4b55      	ldr	r3, [pc, #340]	; (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1fe:	e010      	b.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a200:	4b51      	ldr	r3, [pc, #324]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a20c:	d106      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a214:	d102      	bne.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a216:	4b4f      	ldr	r3, [pc, #316]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a21a:	e002      	b.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a220:	e235      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a222:	e234      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a224:	4b4c      	ldr	r3, [pc, #304]	; (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a228:	e231      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a22e:	e22e      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a230:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a234:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a238:	430b      	orrs	r3, r1
 800a23a:	f040 808f 	bne.w	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a23e:	4b42      	ldr	r3, [pc, #264]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a242:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a246:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a24e:	d06b      	beq.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a256:	d874      	bhi.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a25e:	d056      	beq.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a266:	d86c      	bhi.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a26e:	d03b      	beq.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a276:	d864      	bhi.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a27e:	d021      	beq.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a286:	d85c      	bhi.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d004      	beq.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a294:	d004      	beq.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a296:	e054      	b.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a298:	f7fe fa0a 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 800a29c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a29e:	e1f6      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2a0:	4b29      	ldr	r3, [pc, #164]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2ac:	d107      	bne.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ae:	f107 0318 	add.w	r3, r7, #24
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fa0a 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2bc:	e1e7      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c2:	e1e4      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2c4:	4b20      	ldr	r3, [pc, #128]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2d0:	d107      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2d2:	f107 030c 	add.w	r3, r7, #12
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 fb4c 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2e0:	e1d5      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2e6:	e1d2      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d109      	bne.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2f4:	4b14      	ldr	r3, [pc, #80]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	08db      	lsrs	r3, r3, #3
 800a2fa:	f003 0303 	and.w	r3, r3, #3
 800a2fe:	4a13      	ldr	r2, [pc, #76]	; (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a300:	fa22 f303 	lsr.w	r3, r2, r3
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a306:	e1c2      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a30c:	e1bf      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a30e:	4b0e      	ldr	r3, [pc, #56]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a31a:	d102      	bne.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a31c:	4b0c      	ldr	r3, [pc, #48]	; (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a320:	e1b5      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a326:	e1b2      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a328:	4b07      	ldr	r3, [pc, #28]	; (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a334:	d102      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a33a:	e1a8      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a340:	e1a5      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a346:	e1a2      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a348:	58024400 	.word	0x58024400
 800a34c:	03d09000 	.word	0x03d09000
 800a350:	003d0900 	.word	0x003d0900
 800a354:	017d7840 	.word	0x017d7840
 800a358:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a35c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a360:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a364:	430b      	orrs	r3, r1
 800a366:	d173      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a368:	4b9c      	ldr	r3, [pc, #624]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a36a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a36c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a370:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a378:	d02f      	beq.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a380:	d863      	bhi.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	d004      	beq.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38e:	d012      	beq.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a390:	e05b      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a392:	4b92      	ldr	r3, [pc, #584]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a39a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a39e:	d107      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3a0:	f107 0318 	add.w	r3, r7, #24
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 f991 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ae:	e16e      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3b4:	e16b      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3b6:	4b89      	ldr	r3, [pc, #548]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3c2:	d107      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3c4:	f107 030c 	add.w	r3, r7, #12
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 fad3 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3d2:	e15c      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d8:	e159      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3da:	4b80      	ldr	r3, [pc, #512]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3e4:	4b7d      	ldr	r3, [pc, #500]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	d10c      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3f6:	4b79      	ldr	r3, [pc, #484]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	08db      	lsrs	r3, r3, #3
 800a3fc:	f003 0303 	and.w	r3, r3, #3
 800a400:	4a77      	ldr	r2, [pc, #476]	; (800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a402:	fa22 f303 	lsr.w	r3, r2, r3
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a408:	e01e      	b.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a40a:	4b74      	ldr	r3, [pc, #464]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a416:	d106      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a41e:	d102      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a420:	4b70      	ldr	r3, [pc, #448]	; (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a424:	e010      	b.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a426:	4b6d      	ldr	r3, [pc, #436]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a42e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a432:	d106      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a43a:	d102      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a43c:	4b6a      	ldr	r3, [pc, #424]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a440:	e002      	b.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a446:	e122      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a448:	e121      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a44e:	e11e      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a454:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a458:	430b      	orrs	r3, r1
 800a45a:	d133      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a45c:	4b5f      	ldr	r3, [pc, #380]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a45e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a464:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d004      	beq.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a472:	d012      	beq.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a474:	e023      	b.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a476:	4b59      	ldr	r3, [pc, #356]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a47e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a482:	d107      	bne.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fbc7 	bl	800ac1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a492:	e0fc      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a498:	e0f9      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a49a:	4b50      	ldr	r3, [pc, #320]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4a6:	d107      	bne.n	800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a8:	f107 0318 	add.w	r3, r7, #24
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f90d 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b6:	e0ea      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4bc:	e0e7      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c2:	e0e4      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a4c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4c8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a4cc:	430b      	orrs	r3, r1
 800a4ce:	f040 808d 	bne.w	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a4d2:	4b42      	ldr	r3, [pc, #264]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a4da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4e2:	d06b      	beq.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4ea:	d874      	bhi.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4f2:	d056      	beq.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4fa:	d86c      	bhi.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a502:	d03b      	beq.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a506:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a50a:	d864      	bhi.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a512:	d021      	beq.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a51a:	d85c      	bhi.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d004      	beq.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a528:	d004      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a52a:	e054      	b.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a52c:	f000 f8b8 	bl	800a6a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a530:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a532:	e0ac      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a534:	4b29      	ldr	r3, [pc, #164]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a53c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a540:	d107      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a542:	f107 0318 	add.w	r3, r7, #24
 800a546:	4618      	mov	r0, r3
 800a548:	f000 f8c0 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a550:	e09d      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a556:	e09a      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a558:	4b20      	ldr	r3, [pc, #128]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a564:	d107      	bne.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a566:	f107 030c 	add.w	r3, r7, #12
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 fa02 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a574:	e08b      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a57a:	e088      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a57c:	4b17      	ldr	r3, [pc, #92]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b04      	cmp	r3, #4
 800a586:	d109      	bne.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a588:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	08db      	lsrs	r3, r3, #3
 800a58e:	f003 0303 	and.w	r3, r3, #3
 800a592:	4a13      	ldr	r2, [pc, #76]	; (800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a594:	fa22 f303 	lsr.w	r3, r2, r3
 800a598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a59a:	e078      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5a0:	e075      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a5a2:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ae:	d102      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a5b0:	4b0c      	ldr	r3, [pc, #48]	; (800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b4:	e06b      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ba:	e068      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5bc:	4b07      	ldr	r3, [pc, #28]	; (800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5c8:	d102      	bne.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a5ca:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ce:	e05e      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5d4:	e05b      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5da:	e058      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	03d09000 	.word	0x03d09000
 800a5e4:	003d0900 	.word	0x003d0900
 800a5e8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a5ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5f0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a5f4:	430b      	orrs	r3, r1
 800a5f6:	d148      	bne.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a5f8:	4b27      	ldr	r3, [pc, #156]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a600:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a608:	d02a      	beq.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a610:	d838      	bhi.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	2b00      	cmp	r3, #0
 800a616:	d004      	beq.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a61e:	d00d      	beq.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a620:	e030      	b.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a622:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a62a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a62e:	d102      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a630:	4b1a      	ldr	r3, [pc, #104]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a634:	e02b      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a63a:	e028      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a63c:	4b16      	ldr	r3, [pc, #88]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a648:	d107      	bne.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a64a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fae4 	bl	800ac1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a658:	e019      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a65e:	e016      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a660:	4b0d      	ldr	r3, [pc, #52]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a66c:	d107      	bne.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a66e:	f107 0318 	add.w	r3, r7, #24
 800a672:	4618      	mov	r0, r3
 800a674:	f000 f82a 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a67c:	e007      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a682:	e004      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a684:	2300      	movs	r3, #0
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a688:	e001      	b.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a690:	4618      	mov	r0, r3
 800a692:	3740      	adds	r7, #64	; 0x40
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	58024400 	.word	0x58024400
 800a69c:	017d7840 	.word	0x017d7840

0800a6a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a6a4:	f7fd ffd4 	bl	8008650 <HAL_RCC_GetHCLKFreq>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	091b      	lsrs	r3, r3, #4
 800a6b0:	f003 0307 	and.w	r3, r3, #7
 800a6b4:	4904      	ldr	r1, [pc, #16]	; (800a6c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a6b6:	5ccb      	ldrb	r3, [r1, r3]
 800a6b8:	f003 031f 	and.w	r3, r3, #31
 800a6bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	58024400 	.word	0x58024400
 800a6c8:	0801334c 	.word	0x0801334c

0800a6cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b089      	sub	sp, #36	; 0x24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6d4:	4ba1      	ldr	r3, [pc, #644]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d8:	f003 0303 	and.w	r3, r3, #3
 800a6dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a6de:	4b9f      	ldr	r3, [pc, #636]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e2:	0b1b      	lsrs	r3, r3, #12
 800a6e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a6ea:	4b9c      	ldr	r3, [pc, #624]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ee:	091b      	lsrs	r3, r3, #4
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a6f6:	4b99      	ldr	r3, [pc, #612]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6fa:	08db      	lsrs	r3, r3, #3
 800a6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	fb02 f303 	mul.w	r3, r2, r3
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 8111 	beq.w	800a93c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	f000 8083 	beq.w	800a828 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	2b02      	cmp	r3, #2
 800a726:	f200 80a1 	bhi.w	800a86c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d003      	beq.n	800a738 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d056      	beq.n	800a7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a736:	e099      	b.n	800a86c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a738:	4b88      	ldr	r3, [pc, #544]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0320 	and.w	r3, r3, #32
 800a740:	2b00      	cmp	r3, #0
 800a742:	d02d      	beq.n	800a7a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a744:	4b85      	ldr	r3, [pc, #532]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	08db      	lsrs	r3, r3, #3
 800a74a:	f003 0303 	and.w	r3, r3, #3
 800a74e:	4a84      	ldr	r2, [pc, #528]	; (800a960 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a750:	fa22 f303 	lsr.w	r3, r2, r3
 800a754:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	ee07 3a90 	vmov	s15, r3
 800a75c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	ee07 3a90 	vmov	s15, r3
 800a766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a76e:	4b7b      	ldr	r3, [pc, #492]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a77e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a782:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a78e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a79a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a79e:	e087      	b.n	800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	ee07 3a90 	vmov	s15, r3
 800a7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a968 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7b2:	4b6a      	ldr	r3, [pc, #424]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7e2:	e065      	b.n	800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	ee07 3a90 	vmov	s15, r3
 800a7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7f6:	4b59      	ldr	r3, [pc, #356]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fe:	ee07 3a90 	vmov	s15, r3
 800a802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a806:	ed97 6a03 	vldr	s12, [r7, #12]
 800a80a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a826:	e043      	b.n	800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	ee07 3a90 	vmov	s15, r3
 800a82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a832:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a970 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a83a:	4b48      	ldr	r3, [pc, #288]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a842:	ee07 3a90 	vmov	s15, r3
 800a846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a84a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a84e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a85a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a86a:	e021      	b.n	800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	ee07 3a90 	vmov	s15, r3
 800a872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a876:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a87e:	4b37      	ldr	r3, [pc, #220]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a88e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a892:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a964 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a8b0:	4b2a      	ldr	r3, [pc, #168]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b4:	0a5b      	lsrs	r3, r3, #9
 800a8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8d6:	ee17 2a90 	vmov	r2, s15
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a8de:	4b1f      	ldr	r3, [pc, #124]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8e8:	ee07 3a90 	vmov	s15, r3
 800a8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a904:	ee17 2a90 	vmov	r2, s15
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a90c:	4b13      	ldr	r3, [pc, #76]	; (800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	0e1b      	lsrs	r3, r3, #24
 800a912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a926:	edd7 6a07 	vldr	s13, [r7, #28]
 800a92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a932:	ee17 2a90 	vmov	r2, s15
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a93a:	e008      	b.n	800a94e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	609a      	str	r2, [r3, #8]
}
 800a94e:	bf00      	nop
 800a950:	3724      	adds	r7, #36	; 0x24
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	58024400 	.word	0x58024400
 800a960:	03d09000 	.word	0x03d09000
 800a964:	46000000 	.word	0x46000000
 800a968:	4c742400 	.word	0x4c742400
 800a96c:	4a742400 	.word	0x4a742400
 800a970:	4bbebc20 	.word	0x4bbebc20

0800a974 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a974:	b480      	push	{r7}
 800a976:	b089      	sub	sp, #36	; 0x24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a97c:	4ba1      	ldr	r3, [pc, #644]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a980:	f003 0303 	and.w	r3, r3, #3
 800a984:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a986:	4b9f      	ldr	r3, [pc, #636]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98a:	0d1b      	lsrs	r3, r3, #20
 800a98c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a990:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a992:	4b9c      	ldr	r3, [pc, #624]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a996:	0a1b      	lsrs	r3, r3, #8
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a99e:	4b99      	ldr	r3, [pc, #612]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	08db      	lsrs	r3, r3, #3
 800a9a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9a8:	693a      	ldr	r2, [r7, #16]
 800a9aa:	fb02 f303 	mul.w	r3, r2, r3
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 8111 	beq.w	800abe4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	f000 8083 	beq.w	800aad0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	f200 80a1 	bhi.w	800ab14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d003      	beq.n	800a9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d056      	beq.n	800aa8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a9de:	e099      	b.n	800ab14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9e0:	4b88      	ldr	r3, [pc, #544]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0320 	and.w	r3, r3, #32
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d02d      	beq.n	800aa48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9ec:	4b85      	ldr	r3, [pc, #532]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	08db      	lsrs	r3, r3, #3
 800a9f2:	f003 0303 	and.w	r3, r3, #3
 800a9f6:	4a84      	ldr	r2, [pc, #528]	; (800ac08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	ee07 3a90 	vmov	s15, r3
 800aa04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	ee07 3a90 	vmov	s15, r3
 800aa0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa16:	4b7b      	ldr	r3, [pc, #492]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1e:	ee07 3a90 	vmov	s15, r3
 800aa22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa26:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa46:	e087      	b.n	800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aa56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa5a:	4b6a      	ldr	r3, [pc, #424]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa8a:	e065      	b.n	800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa9e:	4b59      	ldr	r3, [pc, #356]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa6:	ee07 3a90 	vmov	s15, r3
 800aaaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaae:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aabe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aace:	e043      	b.n	800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aada:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae2:	4b48      	ldr	r3, [pc, #288]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab12:	e021      	b.n	800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab26:	4b37      	ldr	r3, [pc, #220]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab2e:	ee07 3a90 	vmov	s15, r3
 800ab32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ab58:	4b2a      	ldr	r3, [pc, #168]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5c:	0a5b      	lsrs	r3, r3, #9
 800ab5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab7e:	ee17 2a90 	vmov	r2, s15
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ab86:	4b1f      	ldr	r3, [pc, #124]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8a:	0c1b      	lsrs	r3, r3, #16
 800ab8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab90:	ee07 3a90 	vmov	s15, r3
 800ab94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aba0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abac:	ee17 2a90 	vmov	r2, s15
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800abb4:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb8:	0e1b      	lsrs	r3, r3, #24
 800abba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abbe:	ee07 3a90 	vmov	s15, r3
 800abc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abce:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abda:	ee17 2a90 	vmov	r2, s15
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800abe2:	e008      	b.n	800abf6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	609a      	str	r2, [r3, #8]
}
 800abf6:	bf00      	nop
 800abf8:	3724      	adds	r7, #36	; 0x24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	58024400 	.word	0x58024400
 800ac08:	03d09000 	.word	0x03d09000
 800ac0c:	46000000 	.word	0x46000000
 800ac10:	4c742400 	.word	0x4c742400
 800ac14:	4a742400 	.word	0x4a742400
 800ac18:	4bbebc20 	.word	0x4bbebc20

0800ac1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b089      	sub	sp, #36	; 0x24
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac24:	4ba0      	ldr	r3, [pc, #640]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ac2e:	4b9e      	ldr	r3, [pc, #632]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	091b      	lsrs	r3, r3, #4
 800ac34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ac3a:	4b9b      	ldr	r3, [pc, #620]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac44:	4b98      	ldr	r3, [pc, #608]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	08db      	lsrs	r3, r3, #3
 800ac4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	ee07 3a90 	vmov	s15, r3
 800ac58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 8111 	beq.w	800ae8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	f000 8083 	beq.w	800ad76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	f200 80a1 	bhi.w	800adba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d003      	beq.n	800ac86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d056      	beq.n	800ad32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ac84:	e099      	b.n	800adba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac86:	4b88      	ldr	r3, [pc, #544]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0320 	and.w	r3, r3, #32
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d02d      	beq.n	800acee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac92:	4b85      	ldr	r3, [pc, #532]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	4a83      	ldr	r2, [pc, #524]	; (800aeac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	ee07 3a90 	vmov	s15, r3
 800acb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acbc:	4b7a      	ldr	r3, [pc, #488]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc4:	ee07 3a90 	vmov	s15, r3
 800acc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800accc:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800aeb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ace0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acec:	e087      	b.n	800adfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	ee07 3a90 	vmov	s15, r3
 800acf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800aeb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800acfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad00:	4b69      	ldr	r3, [pc, #420]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad08:	ee07 3a90 	vmov	s15, r3
 800ad0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad14:	eddf 5a66 	vldr	s11, [pc, #408]	; 800aeb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad30:	e065      	b.n	800adfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	ee07 3a90 	vmov	s15, r3
 800ad38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800aeb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ad40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad44:	4b58      	ldr	r3, [pc, #352]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4c:	ee07 3a90 	vmov	s15, r3
 800ad50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad58:	eddf 5a55 	vldr	s11, [pc, #340]	; 800aeb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad74:	e043      	b.n	800adfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	ee07 3a90 	vmov	s15, r3
 800ad7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800aebc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ad84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad88:	4b47      	ldr	r3, [pc, #284]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad90:	ee07 3a90 	vmov	s15, r3
 800ad94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800aeb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ada0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adb8:	e021      	b.n	800adfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	ee07 3a90 	vmov	s15, r3
 800adc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800aeb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800adc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adcc:	4b36      	ldr	r3, [pc, #216]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add4:	ee07 3a90 	vmov	s15, r3
 800add8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800addc:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800aeb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ade4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adfc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800adfe:	4b2a      	ldr	r3, [pc, #168]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae02:	0a5b      	lsrs	r3, r3, #9
 800ae04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae08:	ee07 3a90 	vmov	s15, r3
 800ae0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae18:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae24:	ee17 2a90 	vmov	r2, s15
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ae2c:	4b1e      	ldr	r3, [pc, #120]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae30:	0c1b      	lsrs	r3, r3, #16
 800ae32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae52:	ee17 2a90 	vmov	r2, s15
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ae5a:	4b13      	ldr	r3, [pc, #76]	; (800aea8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5e:	0e1b      	lsrs	r3, r3, #24
 800ae60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae64:	ee07 3a90 	vmov	s15, r3
 800ae68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae80:	ee17 2a90 	vmov	r2, s15
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ae88:	e008      	b.n	800ae9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	609a      	str	r2, [r3, #8]
}
 800ae9c:	bf00      	nop
 800ae9e:	3724      	adds	r7, #36	; 0x24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	58024400 	.word	0x58024400
 800aeac:	03d09000 	.word	0x03d09000
 800aeb0:	46000000 	.word	0x46000000
 800aeb4:	4c742400 	.word	0x4c742400
 800aeb8:	4a742400 	.word	0x4a742400
 800aebc:	4bbebc20 	.word	0x4bbebc20

0800aec0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aece:	4b53      	ldr	r3, [pc, #332]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800aed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed2:	f003 0303 	and.w	r3, r3, #3
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d101      	bne.n	800aede <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e099      	b.n	800b012 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aede:	4b4f      	ldr	r3, [pc, #316]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a4e      	ldr	r2, [pc, #312]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800aee4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeea:	f7f7 fbc3 	bl	8002674 <HAL_GetTick>
 800aeee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aef0:	e008      	b.n	800af04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aef2:	f7f7 fbbf 	bl	8002674 <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d901      	bls.n	800af04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e086      	b.n	800b012 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af04:	4b45      	ldr	r3, [pc, #276]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1f0      	bne.n	800aef2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af10:	4b42      	ldr	r3, [pc, #264]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	031b      	lsls	r3, r3, #12
 800af1e:	493f      	ldr	r1, [pc, #252]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af20:	4313      	orrs	r3, r2
 800af22:	628b      	str	r3, [r1, #40]	; 0x28
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	3b01      	subs	r3, #1
 800af2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	3b01      	subs	r3, #1
 800af34:	025b      	lsls	r3, r3, #9
 800af36:	b29b      	uxth	r3, r3
 800af38:	431a      	orrs	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	3b01      	subs	r3, #1
 800af40:	041b      	lsls	r3, r3, #16
 800af42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af46:	431a      	orrs	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	061b      	lsls	r3, r3, #24
 800af50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af54:	4931      	ldr	r1, [pc, #196]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af56:	4313      	orrs	r3, r2
 800af58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af5a:	4b30      	ldr	r3, [pc, #192]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	492d      	ldr	r1, [pc, #180]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af6c:	4b2b      	ldr	r3, [pc, #172]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	f023 0220 	bic.w	r2, r3, #32
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	4928      	ldr	r1, [pc, #160]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af7a:	4313      	orrs	r3, r2
 800af7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af7e:	4b27      	ldr	r3, [pc, #156]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	4a26      	ldr	r2, [pc, #152]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af84:	f023 0310 	bic.w	r3, r3, #16
 800af88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af8a:	4b24      	ldr	r3, [pc, #144]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af8e:	4b24      	ldr	r3, [pc, #144]	; (800b020 <RCCEx_PLL2_Config+0x160>)
 800af90:	4013      	ands	r3, r2
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	69d2      	ldr	r2, [r2, #28]
 800af96:	00d2      	lsls	r2, r2, #3
 800af98:	4920      	ldr	r1, [pc, #128]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800af9a:	4313      	orrs	r3, r2
 800af9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af9e:	4b1f      	ldr	r3, [pc, #124]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa2:	4a1e      	ldr	r2, [pc, #120]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afa4:	f043 0310 	orr.w	r3, r3, #16
 800afa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d106      	bne.n	800afbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800afb0:	4b1a      	ldr	r3, [pc, #104]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb4:	4a19      	ldr	r2, [pc, #100]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afbc:	e00f      	b.n	800afde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d106      	bne.n	800afd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800afc4:	4b15      	ldr	r3, [pc, #84]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc8:	4a14      	ldr	r2, [pc, #80]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afd0:	e005      	b.n	800afde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800afd2:	4b12      	ldr	r3, [pc, #72]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd6:	4a11      	ldr	r2, [pc, #68]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800afdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800afde:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a0e      	ldr	r2, [pc, #56]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800afe4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800afe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afea:	f7f7 fb43 	bl	8002674 <HAL_GetTick>
 800afee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aff0:	e008      	b.n	800b004 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aff2:	f7f7 fb3f 	bl	8002674 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	2b02      	cmp	r3, #2
 800affe:	d901      	bls.n	800b004 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e006      	b.n	800b012 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b004:	4b05      	ldr	r3, [pc, #20]	; (800b01c <RCCEx_PLL2_Config+0x15c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d0f0      	beq.n	800aff2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b010:	7bfb      	ldrb	r3, [r7, #15]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	58024400 	.word	0x58024400
 800b020:	ffff0007 	.word	0xffff0007

0800b024 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b032:	4b53      	ldr	r3, [pc, #332]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b036:	f003 0303 	and.w	r3, r3, #3
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d101      	bne.n	800b042 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e099      	b.n	800b176 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b042:	4b4f      	ldr	r3, [pc, #316]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a4e      	ldr	r2, [pc, #312]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b04e:	f7f7 fb11 	bl	8002674 <HAL_GetTick>
 800b052:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b054:	e008      	b.n	800b068 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b056:	f7f7 fb0d 	bl	8002674 <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	2b02      	cmp	r3, #2
 800b062:	d901      	bls.n	800b068 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	e086      	b.n	800b176 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b068:	4b45      	ldr	r3, [pc, #276]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1f0      	bne.n	800b056 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b074:	4b42      	ldr	r3, [pc, #264]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b078:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	051b      	lsls	r3, r3, #20
 800b082:	493f      	ldr	r1, [pc, #252]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b084:	4313      	orrs	r3, r2
 800b086:	628b      	str	r3, [r1, #40]	; 0x28
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	3b01      	subs	r3, #1
 800b098:	025b      	lsls	r3, r3, #9
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	431a      	orrs	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	041b      	lsls	r3, r3, #16
 800b0a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0aa:	431a      	orrs	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	061b      	lsls	r3, r3, #24
 800b0b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0b8:	4931      	ldr	r1, [pc, #196]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b0be:	4b30      	ldr	r3, [pc, #192]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	492d      	ldr	r1, [pc, #180]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b0d0:	4b2b      	ldr	r3, [pc, #172]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	4928      	ldr	r1, [pc, #160]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b0e2:	4b27      	ldr	r3, [pc, #156]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e6:	4a26      	ldr	r2, [pc, #152]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b0ee:	4b24      	ldr	r3, [pc, #144]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0f2:	4b24      	ldr	r3, [pc, #144]	; (800b184 <RCCEx_PLL3_Config+0x160>)
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	69d2      	ldr	r2, [r2, #28]
 800b0fa:	00d2      	lsls	r2, r2, #3
 800b0fc:	4920      	ldr	r1, [pc, #128]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b102:	4b1f      	ldr	r3, [pc, #124]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b106:	4a1e      	ldr	r2, [pc, #120]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b10c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d106      	bne.n	800b122 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b114:	4b1a      	ldr	r3, [pc, #104]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	4a19      	ldr	r2, [pc, #100]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b11a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b11e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b120:	e00f      	b.n	800b142 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d106      	bne.n	800b136 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b128:	4b15      	ldr	r3, [pc, #84]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	4a14      	ldr	r2, [pc, #80]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b12e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b132:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b134:	e005      	b.n	800b142 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b136:	4b12      	ldr	r3, [pc, #72]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13a:	4a11      	ldr	r2, [pc, #68]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b13c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b140:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b142:	4b0f      	ldr	r3, [pc, #60]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a0e      	ldr	r2, [pc, #56]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b14e:	f7f7 fa91 	bl	8002674 <HAL_GetTick>
 800b152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b154:	e008      	b.n	800b168 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b156:	f7f7 fa8d 	bl	8002674 <HAL_GetTick>
 800b15a:	4602      	mov	r2, r0
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	2b02      	cmp	r3, #2
 800b162:	d901      	bls.n	800b168 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	e006      	b.n	800b176 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b168:	4b05      	ldr	r3, [pc, #20]	; (800b180 <RCCEx_PLL3_Config+0x15c>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0f0      	beq.n	800b156 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	58024400 	.word	0x58024400
 800b184:	ffff0007 	.word	0xffff0007

0800b188 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e10f      	b.n	800b3ba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a87      	ldr	r2, [pc, #540]	; (800b3c4 <HAL_SPI_Init+0x23c>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00f      	beq.n	800b1ca <HAL_SPI_Init+0x42>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a86      	ldr	r2, [pc, #536]	; (800b3c8 <HAL_SPI_Init+0x240>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00a      	beq.n	800b1ca <HAL_SPI_Init+0x42>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a84      	ldr	r2, [pc, #528]	; (800b3cc <HAL_SPI_Init+0x244>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d005      	beq.n	800b1ca <HAL_SPI_Init+0x42>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	2b0f      	cmp	r3, #15
 800b1c4:	d901      	bls.n	800b1ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e0f7      	b.n	800b3ba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f900 	bl	800b3d0 <SPI_GetPacketSize>
 800b1d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a7b      	ldr	r2, [pc, #492]	; (800b3c4 <HAL_SPI_Init+0x23c>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d00c      	beq.n	800b1f6 <HAL_SPI_Init+0x6e>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a79      	ldr	r2, [pc, #484]	; (800b3c8 <HAL_SPI_Init+0x240>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d007      	beq.n	800b1f6 <HAL_SPI_Init+0x6e>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a78      	ldr	r2, [pc, #480]	; (800b3cc <HAL_SPI_Init+0x244>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d002      	beq.n	800b1f6 <HAL_SPI_Init+0x6e>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d811      	bhi.n	800b21a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b1fa:	4a72      	ldr	r2, [pc, #456]	; (800b3c4 <HAL_SPI_Init+0x23c>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d009      	beq.n	800b214 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a70      	ldr	r2, [pc, #448]	; (800b3c8 <HAL_SPI_Init+0x240>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d004      	beq.n	800b214 <HAL_SPI_Init+0x8c>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a6f      	ldr	r2, [pc, #444]	; (800b3cc <HAL_SPI_Init+0x244>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d104      	bne.n	800b21e <HAL_SPI_Init+0x96>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b10      	cmp	r3, #16
 800b218:	d901      	bls.n	800b21e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e0cd      	b.n	800b3ba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	d106      	bne.n	800b238 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f6 fd9c 	bl	8001d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2202      	movs	r2, #2
 800b23c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f022 0201 	bic.w	r2, r2, #1
 800b24e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b25a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b264:	d119      	bne.n	800b29a <HAL_SPI_Init+0x112>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b26e:	d103      	bne.n	800b278 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b274:	2b00      	cmp	r3, #0
 800b276:	d008      	beq.n	800b28a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10c      	bne.n	800b29a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b288:	d107      	bne.n	800b29a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b298:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00f      	beq.n	800b2c6 <HAL_SPI_Init+0x13e>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	2b06      	cmp	r3, #6
 800b2ac:	d90b      	bls.n	800b2c6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e007      	b.n	800b2d6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	69da      	ldr	r2, [r3, #28]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e8:	ea42 0103 	orr.w	r1, r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68da      	ldr	r2, [r3, #12]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	431a      	orrs	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699b      	ldr	r3, [r3, #24]
 800b30c:	431a      	orrs	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	431a      	orrs	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	431a      	orrs	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	431a      	orrs	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b32a:	431a      	orrs	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	431a      	orrs	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b336:	ea42 0103 	orr.w	r1, r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	430a      	orrs	r2, r1
 800b344:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d113      	bne.n	800b376 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b360:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b374:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f022 0201 	bic.w	r2, r2, #1
 800b384:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d00a      	beq.n	800b3a8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	40013000 	.word	0x40013000
 800b3c8:	40003800 	.word	0x40003800
 800b3cc:	40003c00 	.word	0x40003c00

0800b3d0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3dc:	095b      	lsrs	r3, r3, #5
 800b3de:	3301      	adds	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	3307      	adds	r3, #7
 800b3ee:	08db      	lsrs	r3, r3, #3
 800b3f0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	fb02 f303 	mul.w	r3, r2, r3
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b082      	sub	sp, #8
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e049      	b.n	800b4ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d106      	bne.n	800b432 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7f6 fd07 	bl	8001e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2202      	movs	r2, #2
 800b436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	3304      	adds	r3, #4
 800b442:	4619      	mov	r1, r3
 800b444:	4610      	mov	r0, r2
 800b446:	f000 fea9 	bl	800c19c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d001      	beq.n	800b4cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e054      	b.n	800b576 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68da      	ldr	r2, [r3, #12]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0201 	orr.w	r2, r2, #1
 800b4e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a26      	ldr	r2, [pc, #152]	; (800b584 <HAL_TIM_Base_Start_IT+0xd0>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d022      	beq.n	800b534 <HAL_TIM_Base_Start_IT+0x80>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4f6:	d01d      	beq.n	800b534 <HAL_TIM_Base_Start_IT+0x80>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a22      	ldr	r2, [pc, #136]	; (800b588 <HAL_TIM_Base_Start_IT+0xd4>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d018      	beq.n	800b534 <HAL_TIM_Base_Start_IT+0x80>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a21      	ldr	r2, [pc, #132]	; (800b58c <HAL_TIM_Base_Start_IT+0xd8>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d013      	beq.n	800b534 <HAL_TIM_Base_Start_IT+0x80>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a1f      	ldr	r2, [pc, #124]	; (800b590 <HAL_TIM_Base_Start_IT+0xdc>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d00e      	beq.n	800b534 <HAL_TIM_Base_Start_IT+0x80>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a1e      	ldr	r2, [pc, #120]	; (800b594 <HAL_TIM_Base_Start_IT+0xe0>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d009      	beq.n	800b534 <HAL_TIM_Base_Start_IT+0x80>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a1c      	ldr	r2, [pc, #112]	; (800b598 <HAL_TIM_Base_Start_IT+0xe4>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d004      	beq.n	800b534 <HAL_TIM_Base_Start_IT+0x80>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a1b      	ldr	r2, [pc, #108]	; (800b59c <HAL_TIM_Base_Start_IT+0xe8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d115      	bne.n	800b560 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689a      	ldr	r2, [r3, #8]
 800b53a:	4b19      	ldr	r3, [pc, #100]	; (800b5a0 <HAL_TIM_Base_Start_IT+0xec>)
 800b53c:	4013      	ands	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b06      	cmp	r3, #6
 800b544:	d015      	beq.n	800b572 <HAL_TIM_Base_Start_IT+0xbe>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b54c:	d011      	beq.n	800b572 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f042 0201 	orr.w	r2, r2, #1
 800b55c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b55e:	e008      	b.n	800b572 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f042 0201 	orr.w	r2, r2, #1
 800b56e:	601a      	str	r2, [r3, #0]
 800b570:	e000      	b.n	800b574 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b572:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	40010000 	.word	0x40010000
 800b588:	40000400 	.word	0x40000400
 800b58c:	40000800 	.word	0x40000800
 800b590:	40000c00 	.word	0x40000c00
 800b594:	40010400 	.word	0x40010400
 800b598:	40001800 	.word	0x40001800
 800b59c:	40014000 	.word	0x40014000
 800b5a0:	00010007 	.word	0x00010007

0800b5a4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d109      	bne.n	800b5cc <HAL_TIM_OC_Start_IT+0x28>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	bf14      	ite	ne
 800b5c4:	2301      	movne	r3, #1
 800b5c6:	2300      	moveq	r3, #0
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	e03c      	b.n	800b646 <HAL_TIM_OC_Start_IT+0xa2>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	d109      	bne.n	800b5e6 <HAL_TIM_OC_Start_IT+0x42>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	bf14      	ite	ne
 800b5de:	2301      	movne	r3, #1
 800b5e0:	2300      	moveq	r3, #0
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	e02f      	b.n	800b646 <HAL_TIM_OC_Start_IT+0xa2>
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b08      	cmp	r3, #8
 800b5ea:	d109      	bne.n	800b600 <HAL_TIM_OC_Start_IT+0x5c>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	bf14      	ite	ne
 800b5f8:	2301      	movne	r3, #1
 800b5fa:	2300      	moveq	r3, #0
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	e022      	b.n	800b646 <HAL_TIM_OC_Start_IT+0xa2>
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b0c      	cmp	r3, #12
 800b604:	d109      	bne.n	800b61a <HAL_TIM_OC_Start_IT+0x76>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b01      	cmp	r3, #1
 800b610:	bf14      	ite	ne
 800b612:	2301      	movne	r3, #1
 800b614:	2300      	moveq	r3, #0
 800b616:	b2db      	uxtb	r3, r3
 800b618:	e015      	b.n	800b646 <HAL_TIM_OC_Start_IT+0xa2>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b10      	cmp	r3, #16
 800b61e:	d109      	bne.n	800b634 <HAL_TIM_OC_Start_IT+0x90>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b626:	b2db      	uxtb	r3, r3
 800b628:	2b01      	cmp	r3, #1
 800b62a:	bf14      	ite	ne
 800b62c:	2301      	movne	r3, #1
 800b62e:	2300      	moveq	r3, #0
 800b630:	b2db      	uxtb	r3, r3
 800b632:	e008      	b.n	800b646 <HAL_TIM_OC_Start_IT+0xa2>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	bf14      	ite	ne
 800b640:	2301      	movne	r3, #1
 800b642:	2300      	moveq	r3, #0
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e0ec      	b.n	800b828 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d104      	bne.n	800b65e <HAL_TIM_OC_Start_IT+0xba>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b65c:	e023      	b.n	800b6a6 <HAL_TIM_OC_Start_IT+0x102>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b04      	cmp	r3, #4
 800b662:	d104      	bne.n	800b66e <HAL_TIM_OC_Start_IT+0xca>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b66c:	e01b      	b.n	800b6a6 <HAL_TIM_OC_Start_IT+0x102>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b08      	cmp	r3, #8
 800b672:	d104      	bne.n	800b67e <HAL_TIM_OC_Start_IT+0xda>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b67c:	e013      	b.n	800b6a6 <HAL_TIM_OC_Start_IT+0x102>
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b0c      	cmp	r3, #12
 800b682:	d104      	bne.n	800b68e <HAL_TIM_OC_Start_IT+0xea>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b68c:	e00b      	b.n	800b6a6 <HAL_TIM_OC_Start_IT+0x102>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b10      	cmp	r3, #16
 800b692:	d104      	bne.n	800b69e <HAL_TIM_OC_Start_IT+0xfa>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2202      	movs	r2, #2
 800b698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b69c:	e003      	b.n	800b6a6 <HAL_TIM_OC_Start_IT+0x102>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b0c      	cmp	r3, #12
 800b6aa:	d841      	bhi.n	800b730 <HAL_TIM_OC_Start_IT+0x18c>
 800b6ac:	a201      	add	r2, pc, #4	; (adr r2, 800b6b4 <HAL_TIM_OC_Start_IT+0x110>)
 800b6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b2:	bf00      	nop
 800b6b4:	0800b6e9 	.word	0x0800b6e9
 800b6b8:	0800b731 	.word	0x0800b731
 800b6bc:	0800b731 	.word	0x0800b731
 800b6c0:	0800b731 	.word	0x0800b731
 800b6c4:	0800b6fb 	.word	0x0800b6fb
 800b6c8:	0800b731 	.word	0x0800b731
 800b6cc:	0800b731 	.word	0x0800b731
 800b6d0:	0800b731 	.word	0x0800b731
 800b6d4:	0800b70d 	.word	0x0800b70d
 800b6d8:	0800b731 	.word	0x0800b731
 800b6dc:	0800b731 	.word	0x0800b731
 800b6e0:	0800b731 	.word	0x0800b731
 800b6e4:	0800b71f 	.word	0x0800b71f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68da      	ldr	r2, [r3, #12]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f042 0202 	orr.w	r2, r2, #2
 800b6f6:	60da      	str	r2, [r3, #12]
      break;
 800b6f8:	e01d      	b.n	800b736 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68da      	ldr	r2, [r3, #12]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f042 0204 	orr.w	r2, r2, #4
 800b708:	60da      	str	r2, [r3, #12]
      break;
 800b70a:	e014      	b.n	800b736 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68da      	ldr	r2, [r3, #12]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f042 0208 	orr.w	r2, r2, #8
 800b71a:	60da      	str	r2, [r3, #12]
      break;
 800b71c:	e00b      	b.n	800b736 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68da      	ldr	r2, [r3, #12]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f042 0210 	orr.w	r2, r2, #16
 800b72c:	60da      	str	r2, [r3, #12]
      break;
 800b72e:	e002      	b.n	800b736 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	73fb      	strb	r3, [r7, #15]
      break;
 800b734:	bf00      	nop
  }

  if (status == HAL_OK)
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d174      	bne.n	800b826 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2201      	movs	r2, #1
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	4618      	mov	r0, r3
 800b746:	f001 f943 	bl	800c9d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a38      	ldr	r2, [pc, #224]	; (800b830 <HAL_TIM_OC_Start_IT+0x28c>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d013      	beq.n	800b77c <HAL_TIM_OC_Start_IT+0x1d8>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a36      	ldr	r2, [pc, #216]	; (800b834 <HAL_TIM_OC_Start_IT+0x290>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d00e      	beq.n	800b77c <HAL_TIM_OC_Start_IT+0x1d8>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a35      	ldr	r2, [pc, #212]	; (800b838 <HAL_TIM_OC_Start_IT+0x294>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d009      	beq.n	800b77c <HAL_TIM_OC_Start_IT+0x1d8>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a33      	ldr	r2, [pc, #204]	; (800b83c <HAL_TIM_OC_Start_IT+0x298>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d004      	beq.n	800b77c <HAL_TIM_OC_Start_IT+0x1d8>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a32      	ldr	r2, [pc, #200]	; (800b840 <HAL_TIM_OC_Start_IT+0x29c>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d101      	bne.n	800b780 <HAL_TIM_OC_Start_IT+0x1dc>
 800b77c:	2301      	movs	r3, #1
 800b77e:	e000      	b.n	800b782 <HAL_TIM_OC_Start_IT+0x1de>
 800b780:	2300      	movs	r3, #0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d007      	beq.n	800b796 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b794:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a25      	ldr	r2, [pc, #148]	; (800b830 <HAL_TIM_OC_Start_IT+0x28c>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d022      	beq.n	800b7e6 <HAL_TIM_OC_Start_IT+0x242>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a8:	d01d      	beq.n	800b7e6 <HAL_TIM_OC_Start_IT+0x242>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a25      	ldr	r2, [pc, #148]	; (800b844 <HAL_TIM_OC_Start_IT+0x2a0>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d018      	beq.n	800b7e6 <HAL_TIM_OC_Start_IT+0x242>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a23      	ldr	r2, [pc, #140]	; (800b848 <HAL_TIM_OC_Start_IT+0x2a4>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d013      	beq.n	800b7e6 <HAL_TIM_OC_Start_IT+0x242>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a22      	ldr	r2, [pc, #136]	; (800b84c <HAL_TIM_OC_Start_IT+0x2a8>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d00e      	beq.n	800b7e6 <HAL_TIM_OC_Start_IT+0x242>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a19      	ldr	r2, [pc, #100]	; (800b834 <HAL_TIM_OC_Start_IT+0x290>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d009      	beq.n	800b7e6 <HAL_TIM_OC_Start_IT+0x242>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a1e      	ldr	r2, [pc, #120]	; (800b850 <HAL_TIM_OC_Start_IT+0x2ac>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d004      	beq.n	800b7e6 <HAL_TIM_OC_Start_IT+0x242>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a15      	ldr	r2, [pc, #84]	; (800b838 <HAL_TIM_OC_Start_IT+0x294>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d115      	bne.n	800b812 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	4b19      	ldr	r3, [pc, #100]	; (800b854 <HAL_TIM_OC_Start_IT+0x2b0>)
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	2b06      	cmp	r3, #6
 800b7f6:	d015      	beq.n	800b824 <HAL_TIM_OC_Start_IT+0x280>
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7fe:	d011      	beq.n	800b824 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f042 0201 	orr.w	r2, r2, #1
 800b80e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b810:	e008      	b.n	800b824 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f042 0201 	orr.w	r2, r2, #1
 800b820:	601a      	str	r2, [r3, #0]
 800b822:	e000      	b.n	800b826 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b824:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b826:	7bfb      	ldrb	r3, [r7, #15]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	40010000 	.word	0x40010000
 800b834:	40010400 	.word	0x40010400
 800b838:	40014000 	.word	0x40014000
 800b83c:	40014400 	.word	0x40014400
 800b840:	40014800 	.word	0x40014800
 800b844:	40000400 	.word	0x40000400
 800b848:	40000800 	.word	0x40000800
 800b84c:	40000c00 	.word	0x40000c00
 800b850:	40001800 	.word	0x40001800
 800b854:	00010007 	.word	0x00010007

0800b858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	e049      	b.n	800b8fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	d106      	bne.n	800b884 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f841 	bl	800b906 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3304      	adds	r3, #4
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f000 fc80 	bl	800c19c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b906:	b480      	push	{r7}
 800b908:	b083      	sub	sp, #12
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b90e:	bf00      	nop
 800b910:	370c      	adds	r7, #12
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
	...

0800b91c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d109      	bne.n	800b940 <HAL_TIM_PWM_Start+0x24>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b01      	cmp	r3, #1
 800b936:	bf14      	ite	ne
 800b938:	2301      	movne	r3, #1
 800b93a:	2300      	moveq	r3, #0
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	e03c      	b.n	800b9ba <HAL_TIM_PWM_Start+0x9e>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b04      	cmp	r3, #4
 800b944:	d109      	bne.n	800b95a <HAL_TIM_PWM_Start+0x3e>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b01      	cmp	r3, #1
 800b950:	bf14      	ite	ne
 800b952:	2301      	movne	r3, #1
 800b954:	2300      	moveq	r3, #0
 800b956:	b2db      	uxtb	r3, r3
 800b958:	e02f      	b.n	800b9ba <HAL_TIM_PWM_Start+0x9e>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b08      	cmp	r3, #8
 800b95e:	d109      	bne.n	800b974 <HAL_TIM_PWM_Start+0x58>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b01      	cmp	r3, #1
 800b96a:	bf14      	ite	ne
 800b96c:	2301      	movne	r3, #1
 800b96e:	2300      	moveq	r3, #0
 800b970:	b2db      	uxtb	r3, r3
 800b972:	e022      	b.n	800b9ba <HAL_TIM_PWM_Start+0x9e>
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b0c      	cmp	r3, #12
 800b978:	d109      	bne.n	800b98e <HAL_TIM_PWM_Start+0x72>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b01      	cmp	r3, #1
 800b984:	bf14      	ite	ne
 800b986:	2301      	movne	r3, #1
 800b988:	2300      	moveq	r3, #0
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	e015      	b.n	800b9ba <HAL_TIM_PWM_Start+0x9e>
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b10      	cmp	r3, #16
 800b992:	d109      	bne.n	800b9a8 <HAL_TIM_PWM_Start+0x8c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	bf14      	ite	ne
 800b9a0:	2301      	movne	r3, #1
 800b9a2:	2300      	moveq	r3, #0
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	e008      	b.n	800b9ba <HAL_TIM_PWM_Start+0x9e>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	bf14      	ite	ne
 800b9b4:	2301      	movne	r3, #1
 800b9b6:	2300      	moveq	r3, #0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e0a1      	b.n	800bb06 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d104      	bne.n	800b9d2 <HAL_TIM_PWM_Start+0xb6>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9d0:	e023      	b.n	800ba1a <HAL_TIM_PWM_Start+0xfe>
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b04      	cmp	r3, #4
 800b9d6:	d104      	bne.n	800b9e2 <HAL_TIM_PWM_Start+0xc6>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2202      	movs	r2, #2
 800b9dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9e0:	e01b      	b.n	800ba1a <HAL_TIM_PWM_Start+0xfe>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b08      	cmp	r3, #8
 800b9e6:	d104      	bne.n	800b9f2 <HAL_TIM_PWM_Start+0xd6>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9f0:	e013      	b.n	800ba1a <HAL_TIM_PWM_Start+0xfe>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	2b0c      	cmp	r3, #12
 800b9f6:	d104      	bne.n	800ba02 <HAL_TIM_PWM_Start+0xe6>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba00:	e00b      	b.n	800ba1a <HAL_TIM_PWM_Start+0xfe>
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d104      	bne.n	800ba12 <HAL_TIM_PWM_Start+0xf6>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba10:	e003      	b.n	800ba1a <HAL_TIM_PWM_Start+0xfe>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2202      	movs	r2, #2
 800ba16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 ffd4 	bl	800c9d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a38      	ldr	r2, [pc, #224]	; (800bb10 <HAL_TIM_PWM_Start+0x1f4>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d013      	beq.n	800ba5a <HAL_TIM_PWM_Start+0x13e>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a37      	ldr	r2, [pc, #220]	; (800bb14 <HAL_TIM_PWM_Start+0x1f8>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d00e      	beq.n	800ba5a <HAL_TIM_PWM_Start+0x13e>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a35      	ldr	r2, [pc, #212]	; (800bb18 <HAL_TIM_PWM_Start+0x1fc>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d009      	beq.n	800ba5a <HAL_TIM_PWM_Start+0x13e>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a34      	ldr	r2, [pc, #208]	; (800bb1c <HAL_TIM_PWM_Start+0x200>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d004      	beq.n	800ba5a <HAL_TIM_PWM_Start+0x13e>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a32      	ldr	r2, [pc, #200]	; (800bb20 <HAL_TIM_PWM_Start+0x204>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d101      	bne.n	800ba5e <HAL_TIM_PWM_Start+0x142>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e000      	b.n	800ba60 <HAL_TIM_PWM_Start+0x144>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d007      	beq.n	800ba74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a25      	ldr	r2, [pc, #148]	; (800bb10 <HAL_TIM_PWM_Start+0x1f4>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d022      	beq.n	800bac4 <HAL_TIM_PWM_Start+0x1a8>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba86:	d01d      	beq.n	800bac4 <HAL_TIM_PWM_Start+0x1a8>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a25      	ldr	r2, [pc, #148]	; (800bb24 <HAL_TIM_PWM_Start+0x208>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d018      	beq.n	800bac4 <HAL_TIM_PWM_Start+0x1a8>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a24      	ldr	r2, [pc, #144]	; (800bb28 <HAL_TIM_PWM_Start+0x20c>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d013      	beq.n	800bac4 <HAL_TIM_PWM_Start+0x1a8>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a22      	ldr	r2, [pc, #136]	; (800bb2c <HAL_TIM_PWM_Start+0x210>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d00e      	beq.n	800bac4 <HAL_TIM_PWM_Start+0x1a8>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a1a      	ldr	r2, [pc, #104]	; (800bb14 <HAL_TIM_PWM_Start+0x1f8>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d009      	beq.n	800bac4 <HAL_TIM_PWM_Start+0x1a8>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a1e      	ldr	r2, [pc, #120]	; (800bb30 <HAL_TIM_PWM_Start+0x214>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d004      	beq.n	800bac4 <HAL_TIM_PWM_Start+0x1a8>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a16      	ldr	r2, [pc, #88]	; (800bb18 <HAL_TIM_PWM_Start+0x1fc>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d115      	bne.n	800baf0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	689a      	ldr	r2, [r3, #8]
 800baca:	4b1a      	ldr	r3, [pc, #104]	; (800bb34 <HAL_TIM_PWM_Start+0x218>)
 800bacc:	4013      	ands	r3, r2
 800bace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2b06      	cmp	r3, #6
 800bad4:	d015      	beq.n	800bb02 <HAL_TIM_PWM_Start+0x1e6>
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800badc:	d011      	beq.n	800bb02 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f042 0201 	orr.w	r2, r2, #1
 800baec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baee:	e008      	b.n	800bb02 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0201 	orr.w	r2, r2, #1
 800bafe:	601a      	str	r2, [r3, #0]
 800bb00:	e000      	b.n	800bb04 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	40010000 	.word	0x40010000
 800bb14:	40010400 	.word	0x40010400
 800bb18:	40014000 	.word	0x40014000
 800bb1c:	40014400 	.word	0x40014400
 800bb20:	40014800 	.word	0x40014800
 800bb24:	40000400 	.word	0x40000400
 800bb28:	40000800 	.word	0x40000800
 800bb2c:	40000c00 	.word	0x40000c00
 800bb30:	40001800 	.word	0x40001800
 800bb34:	00010007 	.word	0x00010007

0800bb38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b084      	sub	sp, #16
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f003 0302 	and.w	r3, r3, #2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d020      	beq.n	800bb9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f003 0302 	and.w	r3, r3, #2
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d01b      	beq.n	800bb9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f06f 0202 	mvn.w	r2, #2
 800bb6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	699b      	ldr	r3, [r3, #24]
 800bb7a:	f003 0303 	and.w	r3, r3, #3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d003      	beq.n	800bb8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 faec 	bl	800c160 <HAL_TIM_IC_CaptureCallback>
 800bb88:	e005      	b.n	800bb96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7f4 fd2a 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 faef 	bl	800c174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	f003 0304 	and.w	r3, r3, #4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d020      	beq.n	800bbe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01b      	beq.n	800bbe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f06f 0204 	mvn.w	r2, #4
 800bbb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2202      	movs	r2, #2
 800bbbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fac6 	bl	800c160 <HAL_TIM_IC_CaptureCallback>
 800bbd4:	e005      	b.n	800bbe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f7f4 fd04 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fac9 	bl	800c174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	f003 0308 	and.w	r3, r3, #8
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d020      	beq.n	800bc34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f003 0308 	and.w	r3, r3, #8
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d01b      	beq.n	800bc34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f06f 0208 	mvn.w	r2, #8
 800bc04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2204      	movs	r2, #4
 800bc0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	f003 0303 	and.w	r3, r3, #3
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 faa0 	bl	800c160 <HAL_TIM_IC_CaptureCallback>
 800bc20:	e005      	b.n	800bc2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7f4 fcde 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 faa3 	bl	800c174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	f003 0310 	and.w	r3, r3, #16
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d020      	beq.n	800bc80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f003 0310 	and.w	r3, r3, #16
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d01b      	beq.n	800bc80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f06f 0210 	mvn.w	r2, #16
 800bc50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2208      	movs	r2, #8
 800bc56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	69db      	ldr	r3, [r3, #28]
 800bc5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fa7a 	bl	800c160 <HAL_TIM_IC_CaptureCallback>
 800bc6c:	e005      	b.n	800bc7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7f4 fcb8 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fa7d 	bl	800c174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00c      	beq.n	800bca4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f003 0301 	and.w	r3, r3, #1
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f06f 0201 	mvn.w	r2, #1
 800bc9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7f5 fe2a 	bl	80018f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d104      	bne.n	800bcb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00c      	beq.n	800bcd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d007      	beq.n	800bcd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800bcca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 ffbb 	bl	800cc48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00c      	beq.n	800bcf6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d007      	beq.n	800bcf6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bcee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 ffb3 	bl	800cc5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00c      	beq.n	800bd1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d007      	beq.n	800bd1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 fa37 	bl	800c188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	f003 0320 	and.w	r3, r3, #32
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00c      	beq.n	800bd3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f003 0320 	and.w	r3, r3, #32
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d007      	beq.n	800bd3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f06f 0220 	mvn.w	r2, #32
 800bd36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 ff7b 	bl	800cc34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd3e:	bf00      	nop
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d101      	bne.n	800bd66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd62:	2302      	movs	r3, #2
 800bd64:	e0ff      	b.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2b14      	cmp	r3, #20
 800bd72:	f200 80f0 	bhi.w	800bf56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd76:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7c:	0800bdd1 	.word	0x0800bdd1
 800bd80:	0800bf57 	.word	0x0800bf57
 800bd84:	0800bf57 	.word	0x0800bf57
 800bd88:	0800bf57 	.word	0x0800bf57
 800bd8c:	0800be11 	.word	0x0800be11
 800bd90:	0800bf57 	.word	0x0800bf57
 800bd94:	0800bf57 	.word	0x0800bf57
 800bd98:	0800bf57 	.word	0x0800bf57
 800bd9c:	0800be53 	.word	0x0800be53
 800bda0:	0800bf57 	.word	0x0800bf57
 800bda4:	0800bf57 	.word	0x0800bf57
 800bda8:	0800bf57 	.word	0x0800bf57
 800bdac:	0800be93 	.word	0x0800be93
 800bdb0:	0800bf57 	.word	0x0800bf57
 800bdb4:	0800bf57 	.word	0x0800bf57
 800bdb8:	0800bf57 	.word	0x0800bf57
 800bdbc:	0800bed5 	.word	0x0800bed5
 800bdc0:	0800bf57 	.word	0x0800bf57
 800bdc4:	0800bf57 	.word	0x0800bf57
 800bdc8:	0800bf57 	.word	0x0800bf57
 800bdcc:	0800bf15 	.word	0x0800bf15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68b9      	ldr	r1, [r7, #8]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 fa86 	bl	800c2e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	699a      	ldr	r2, [r3, #24]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f042 0208 	orr.w	r2, r2, #8
 800bdea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	699a      	ldr	r2, [r3, #24]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f022 0204 	bic.w	r2, r2, #4
 800bdfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6999      	ldr	r1, [r3, #24]
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	691a      	ldr	r2, [r3, #16]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	430a      	orrs	r2, r1
 800be0c:	619a      	str	r2, [r3, #24]
      break;
 800be0e:	e0a5      	b.n	800bf5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68b9      	ldr	r1, [r7, #8]
 800be16:	4618      	mov	r0, r3
 800be18:	f000 faf6 	bl	800c408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	699a      	ldr	r2, [r3, #24]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	699a      	ldr	r2, [r3, #24]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6999      	ldr	r1, [r3, #24]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	021a      	lsls	r2, r3, #8
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	430a      	orrs	r2, r1
 800be4e:	619a      	str	r2, [r3, #24]
      break;
 800be50:	e084      	b.n	800bf5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68b9      	ldr	r1, [r7, #8]
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 fb5f 	bl	800c51c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	69da      	ldr	r2, [r3, #28]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f042 0208 	orr.w	r2, r2, #8
 800be6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	69da      	ldr	r2, [r3, #28]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f022 0204 	bic.w	r2, r2, #4
 800be7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	69d9      	ldr	r1, [r3, #28]
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	691a      	ldr	r2, [r3, #16]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	61da      	str	r2, [r3, #28]
      break;
 800be90:	e064      	b.n	800bf5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68b9      	ldr	r1, [r7, #8]
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fbc7 	bl	800c62c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	69da      	ldr	r2, [r3, #28]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800beac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	69da      	ldr	r2, [r3, #28]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	69d9      	ldr	r1, [r3, #28]
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	021a      	lsls	r2, r3, #8
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	61da      	str	r2, [r3, #28]
      break;
 800bed2:	e043      	b.n	800bf5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68b9      	ldr	r1, [r7, #8]
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 fc10 	bl	800c700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f042 0208 	orr.w	r2, r2, #8
 800beee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f022 0204 	bic.w	r2, r2, #4
 800befe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	691a      	ldr	r2, [r3, #16]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	430a      	orrs	r2, r1
 800bf10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf12:	e023      	b.n	800bf5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68b9      	ldr	r1, [r7, #8]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 fc54 	bl	800c7c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	021a      	lsls	r2, r3, #8
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	430a      	orrs	r2, r1
 800bf52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf54:	e002      	b.n	800bf5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	75fb      	strb	r3, [r7, #23]
      break;
 800bf5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop

0800bf70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d101      	bne.n	800bf8c <HAL_TIM_ConfigClockSource+0x1c>
 800bf88:	2302      	movs	r3, #2
 800bf8a:	e0dc      	b.n	800c146 <HAL_TIM_ConfigClockSource+0x1d6>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2202      	movs	r2, #2
 800bf98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	4b6a      	ldr	r3, [pc, #424]	; (800c150 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a64      	ldr	r2, [pc, #400]	; (800c154 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	f000 80a9 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800bfc8:	4a62      	ldr	r2, [pc, #392]	; (800c154 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	f200 80ae 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd0:	4a61      	ldr	r2, [pc, #388]	; (800c158 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	f000 80a1 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800bfd8:	4a5f      	ldr	r2, [pc, #380]	; (800c158 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	f200 80a6 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800bfe0:	4a5e      	ldr	r2, [pc, #376]	; (800c15c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	f000 8099 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800bfe8:	4a5c      	ldr	r2, [pc, #368]	; (800c15c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	f200 809e 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800bff0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bff4:	f000 8091 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800bff8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bffc:	f200 8096 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c004:	f000 8089 	beq.w	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800c008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c00c:	f200 808e 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c014:	d03e      	beq.n	800c094 <HAL_TIM_ConfigClockSource+0x124>
 800c016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c01a:	f200 8087 	bhi.w	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c022:	f000 8086 	beq.w	800c132 <HAL_TIM_ConfigClockSource+0x1c2>
 800c026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c02a:	d87f      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c02c:	2b70      	cmp	r3, #112	; 0x70
 800c02e:	d01a      	beq.n	800c066 <HAL_TIM_ConfigClockSource+0xf6>
 800c030:	2b70      	cmp	r3, #112	; 0x70
 800c032:	d87b      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c034:	2b60      	cmp	r3, #96	; 0x60
 800c036:	d050      	beq.n	800c0da <HAL_TIM_ConfigClockSource+0x16a>
 800c038:	2b60      	cmp	r3, #96	; 0x60
 800c03a:	d877      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c03c:	2b50      	cmp	r3, #80	; 0x50
 800c03e:	d03c      	beq.n	800c0ba <HAL_TIM_ConfigClockSource+0x14a>
 800c040:	2b50      	cmp	r3, #80	; 0x50
 800c042:	d873      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c044:	2b40      	cmp	r3, #64	; 0x40
 800c046:	d058      	beq.n	800c0fa <HAL_TIM_ConfigClockSource+0x18a>
 800c048:	2b40      	cmp	r3, #64	; 0x40
 800c04a:	d86f      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c04c:	2b30      	cmp	r3, #48	; 0x30
 800c04e:	d064      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800c050:	2b30      	cmp	r3, #48	; 0x30
 800c052:	d86b      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c054:	2b20      	cmp	r3, #32
 800c056:	d060      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800c058:	2b20      	cmp	r3, #32
 800c05a:	d867      	bhi.n	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d05c      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800c060:	2b10      	cmp	r3, #16
 800c062:	d05a      	beq.n	800c11a <HAL_TIM_ConfigClockSource+0x1aa>
 800c064:	e062      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6818      	ldr	r0, [r3, #0]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	6899      	ldr	r1, [r3, #8]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	685a      	ldr	r2, [r3, #4]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	f000 fc8b 	bl	800c990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c088:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	609a      	str	r2, [r3, #8]
      break;
 800c092:	e04f      	b.n	800c134 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6818      	ldr	r0, [r3, #0]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	6899      	ldr	r1, [r3, #8]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	f000 fc74 	bl	800c990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	689a      	ldr	r2, [r3, #8]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0b6:	609a      	str	r2, [r3, #8]
      break;
 800c0b8:	e03c      	b.n	800c134 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	6859      	ldr	r1, [r3, #4]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f000 fbe4 	bl	800c894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2150      	movs	r1, #80	; 0x50
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 fc3e 	bl	800c954 <TIM_ITRx_SetConfig>
      break;
 800c0d8:	e02c      	b.n	800c134 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6818      	ldr	r0, [r3, #0]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	6859      	ldr	r1, [r3, #4]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f000 fc03 	bl	800c8f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2160      	movs	r1, #96	; 0x60
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f000 fc2e 	bl	800c954 <TIM_ITRx_SetConfig>
      break;
 800c0f8:	e01c      	b.n	800c134 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	6859      	ldr	r1, [r3, #4]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	461a      	mov	r2, r3
 800c108:	f000 fbc4 	bl	800c894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2140      	movs	r1, #64	; 0x40
 800c112:	4618      	mov	r0, r3
 800c114:	f000 fc1e 	bl	800c954 <TIM_ITRx_SetConfig>
      break;
 800c118:	e00c      	b.n	800c134 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4619      	mov	r1, r3
 800c124:	4610      	mov	r0, r2
 800c126:	f000 fc15 	bl	800c954 <TIM_ITRx_SetConfig>
      break;
 800c12a:	e003      	b.n	800c134 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	73fb      	strb	r3, [r7, #15]
      break;
 800c130:	e000      	b.n	800c134 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c132:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2201      	movs	r2, #1
 800c138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c144:	7bfb      	ldrb	r3, [r7, #15]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	ffceff88 	.word	0xffceff88
 800c154:	00100040 	.word	0x00100040
 800c158:	00100030 	.word	0x00100030
 800c15c:	00100020 	.word	0x00100020

0800c160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a46      	ldr	r2, [pc, #280]	; (800c2c8 <TIM_Base_SetConfig+0x12c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d013      	beq.n	800c1dc <TIM_Base_SetConfig+0x40>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ba:	d00f      	beq.n	800c1dc <TIM_Base_SetConfig+0x40>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a43      	ldr	r2, [pc, #268]	; (800c2cc <TIM_Base_SetConfig+0x130>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00b      	beq.n	800c1dc <TIM_Base_SetConfig+0x40>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a42      	ldr	r2, [pc, #264]	; (800c2d0 <TIM_Base_SetConfig+0x134>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d007      	beq.n	800c1dc <TIM_Base_SetConfig+0x40>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a41      	ldr	r2, [pc, #260]	; (800c2d4 <TIM_Base_SetConfig+0x138>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d003      	beq.n	800c1dc <TIM_Base_SetConfig+0x40>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a40      	ldr	r2, [pc, #256]	; (800c2d8 <TIM_Base_SetConfig+0x13c>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d108      	bne.n	800c1ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a35      	ldr	r2, [pc, #212]	; (800c2c8 <TIM_Base_SetConfig+0x12c>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d01f      	beq.n	800c236 <TIM_Base_SetConfig+0x9a>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1fc:	d01b      	beq.n	800c236 <TIM_Base_SetConfig+0x9a>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a32      	ldr	r2, [pc, #200]	; (800c2cc <TIM_Base_SetConfig+0x130>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d017      	beq.n	800c236 <TIM_Base_SetConfig+0x9a>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a31      	ldr	r2, [pc, #196]	; (800c2d0 <TIM_Base_SetConfig+0x134>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d013      	beq.n	800c236 <TIM_Base_SetConfig+0x9a>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a30      	ldr	r2, [pc, #192]	; (800c2d4 <TIM_Base_SetConfig+0x138>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d00f      	beq.n	800c236 <TIM_Base_SetConfig+0x9a>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a2f      	ldr	r2, [pc, #188]	; (800c2d8 <TIM_Base_SetConfig+0x13c>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d00b      	beq.n	800c236 <TIM_Base_SetConfig+0x9a>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a2e      	ldr	r2, [pc, #184]	; (800c2dc <TIM_Base_SetConfig+0x140>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d007      	beq.n	800c236 <TIM_Base_SetConfig+0x9a>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a2d      	ldr	r2, [pc, #180]	; (800c2e0 <TIM_Base_SetConfig+0x144>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d003      	beq.n	800c236 <TIM_Base_SetConfig+0x9a>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a2c      	ldr	r2, [pc, #176]	; (800c2e4 <TIM_Base_SetConfig+0x148>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d108      	bne.n	800c248 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c23c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	4313      	orrs	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	4313      	orrs	r3, r2
 800c254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	689a      	ldr	r2, [r3, #8]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a16      	ldr	r2, [pc, #88]	; (800c2c8 <TIM_Base_SetConfig+0x12c>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d00f      	beq.n	800c294 <TIM_Base_SetConfig+0xf8>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a18      	ldr	r2, [pc, #96]	; (800c2d8 <TIM_Base_SetConfig+0x13c>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d00b      	beq.n	800c294 <TIM_Base_SetConfig+0xf8>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a17      	ldr	r2, [pc, #92]	; (800c2dc <TIM_Base_SetConfig+0x140>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d007      	beq.n	800c294 <TIM_Base_SetConfig+0xf8>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a16      	ldr	r2, [pc, #88]	; (800c2e0 <TIM_Base_SetConfig+0x144>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d003      	beq.n	800c294 <TIM_Base_SetConfig+0xf8>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a15      	ldr	r2, [pc, #84]	; (800c2e4 <TIM_Base_SetConfig+0x148>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d103      	bne.n	800c29c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	691a      	ldr	r2, [r3, #16]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	f003 0301 	and.w	r3, r3, #1
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d105      	bne.n	800c2ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	f023 0201 	bic.w	r2, r3, #1
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	611a      	str	r2, [r3, #16]
  }
}
 800c2ba:	bf00      	nop
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	40010000 	.word	0x40010000
 800c2cc:	40000400 	.word	0x40000400
 800c2d0:	40000800 	.word	0x40000800
 800c2d4:	40000c00 	.word	0x40000c00
 800c2d8:	40010400 	.word	0x40010400
 800c2dc:	40014000 	.word	0x40014000
 800c2e0:	40014400 	.word	0x40014400
 800c2e4:	40014800 	.word	0x40014800

0800c2e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a1b      	ldr	r3, [r3, #32]
 800c2f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	f023 0201 	bic.w	r2, r3, #1
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	699b      	ldr	r3, [r3, #24]
 800c30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	4b37      	ldr	r3, [pc, #220]	; (800c3f0 <TIM_OC1_SetConfig+0x108>)
 800c314:	4013      	ands	r3, r2
 800c316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f023 0303 	bic.w	r3, r3, #3
 800c31e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	4313      	orrs	r3, r2
 800c328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f023 0302 	bic.w	r3, r3, #2
 800c330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	4313      	orrs	r3, r2
 800c33a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a2d      	ldr	r2, [pc, #180]	; (800c3f4 <TIM_OC1_SetConfig+0x10c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d00f      	beq.n	800c364 <TIM_OC1_SetConfig+0x7c>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a2c      	ldr	r2, [pc, #176]	; (800c3f8 <TIM_OC1_SetConfig+0x110>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d00b      	beq.n	800c364 <TIM_OC1_SetConfig+0x7c>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a2b      	ldr	r2, [pc, #172]	; (800c3fc <TIM_OC1_SetConfig+0x114>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d007      	beq.n	800c364 <TIM_OC1_SetConfig+0x7c>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a2a      	ldr	r2, [pc, #168]	; (800c400 <TIM_OC1_SetConfig+0x118>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d003      	beq.n	800c364 <TIM_OC1_SetConfig+0x7c>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a29      	ldr	r2, [pc, #164]	; (800c404 <TIM_OC1_SetConfig+0x11c>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d10c      	bne.n	800c37e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	f023 0308 	bic.w	r3, r3, #8
 800c36a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	4313      	orrs	r3, r2
 800c374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	f023 0304 	bic.w	r3, r3, #4
 800c37c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a1c      	ldr	r2, [pc, #112]	; (800c3f4 <TIM_OC1_SetConfig+0x10c>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d00f      	beq.n	800c3a6 <TIM_OC1_SetConfig+0xbe>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a1b      	ldr	r2, [pc, #108]	; (800c3f8 <TIM_OC1_SetConfig+0x110>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d00b      	beq.n	800c3a6 <TIM_OC1_SetConfig+0xbe>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a1a      	ldr	r2, [pc, #104]	; (800c3fc <TIM_OC1_SetConfig+0x114>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d007      	beq.n	800c3a6 <TIM_OC1_SetConfig+0xbe>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a19      	ldr	r2, [pc, #100]	; (800c400 <TIM_OC1_SetConfig+0x118>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d003      	beq.n	800c3a6 <TIM_OC1_SetConfig+0xbe>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a18      	ldr	r2, [pc, #96]	; (800c404 <TIM_OC1_SetConfig+0x11c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d111      	bne.n	800c3ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	621a      	str	r2, [r3, #32]
}
 800c3e4:	bf00      	nop
 800c3e6:	371c      	adds	r7, #28
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	fffeff8f 	.word	0xfffeff8f
 800c3f4:	40010000 	.word	0x40010000
 800c3f8:	40010400 	.word	0x40010400
 800c3fc:	40014000 	.word	0x40014000
 800c400:	40014400 	.word	0x40014400
 800c404:	40014800 	.word	0x40014800

0800c408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c408:	b480      	push	{r7}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a1b      	ldr	r3, [r3, #32]
 800c416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a1b      	ldr	r3, [r3, #32]
 800c41c:	f023 0210 	bic.w	r2, r3, #16
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	4b34      	ldr	r3, [pc, #208]	; (800c504 <TIM_OC2_SetConfig+0xfc>)
 800c434:	4013      	ands	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	021b      	lsls	r3, r3, #8
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	4313      	orrs	r3, r2
 800c44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f023 0320 	bic.w	r3, r3, #32
 800c452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a29      	ldr	r2, [pc, #164]	; (800c508 <TIM_OC2_SetConfig+0x100>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d003      	beq.n	800c470 <TIM_OC2_SetConfig+0x68>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	4a28      	ldr	r2, [pc, #160]	; (800c50c <TIM_OC2_SetConfig+0x104>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d10d      	bne.n	800c48c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	011b      	lsls	r3, r3, #4
 800c47e:	697a      	ldr	r2, [r7, #20]
 800c480:	4313      	orrs	r3, r2
 800c482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c48a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a1e      	ldr	r2, [pc, #120]	; (800c508 <TIM_OC2_SetConfig+0x100>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d00f      	beq.n	800c4b4 <TIM_OC2_SetConfig+0xac>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a1d      	ldr	r2, [pc, #116]	; (800c50c <TIM_OC2_SetConfig+0x104>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d00b      	beq.n	800c4b4 <TIM_OC2_SetConfig+0xac>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a1c      	ldr	r2, [pc, #112]	; (800c510 <TIM_OC2_SetConfig+0x108>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d007      	beq.n	800c4b4 <TIM_OC2_SetConfig+0xac>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a1b      	ldr	r2, [pc, #108]	; (800c514 <TIM_OC2_SetConfig+0x10c>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d003      	beq.n	800c4b4 <TIM_OC2_SetConfig+0xac>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a1a      	ldr	r2, [pc, #104]	; (800c518 <TIM_OC2_SetConfig+0x110>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d113      	bne.n	800c4dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	693a      	ldr	r2, [r7, #16]
 800c4e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	621a      	str	r2, [r3, #32]
}
 800c4f6:	bf00      	nop
 800c4f8:	371c      	adds	r7, #28
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	feff8fff 	.word	0xfeff8fff
 800c508:	40010000 	.word	0x40010000
 800c50c:	40010400 	.word	0x40010400
 800c510:	40014000 	.word	0x40014000
 800c514:	40014400 	.word	0x40014400
 800c518:	40014800 	.word	0x40014800

0800c51c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b087      	sub	sp, #28
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a1b      	ldr	r3, [r3, #32]
 800c52a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a1b      	ldr	r3, [r3, #32]
 800c530:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	69db      	ldr	r3, [r3, #28]
 800c542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	4b33      	ldr	r3, [pc, #204]	; (800c614 <TIM_OC3_SetConfig+0xf8>)
 800c548:	4013      	ands	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f023 0303 	bic.w	r3, r3, #3
 800c552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	021b      	lsls	r3, r3, #8
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	4313      	orrs	r3, r2
 800c570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a28      	ldr	r2, [pc, #160]	; (800c618 <TIM_OC3_SetConfig+0xfc>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d003      	beq.n	800c582 <TIM_OC3_SetConfig+0x66>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a27      	ldr	r2, [pc, #156]	; (800c61c <TIM_OC3_SetConfig+0x100>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d10d      	bne.n	800c59e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	021b      	lsls	r3, r3, #8
 800c590:	697a      	ldr	r2, [r7, #20]
 800c592:	4313      	orrs	r3, r2
 800c594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c59c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a1d      	ldr	r2, [pc, #116]	; (800c618 <TIM_OC3_SetConfig+0xfc>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d00f      	beq.n	800c5c6 <TIM_OC3_SetConfig+0xaa>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a1c      	ldr	r2, [pc, #112]	; (800c61c <TIM_OC3_SetConfig+0x100>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d00b      	beq.n	800c5c6 <TIM_OC3_SetConfig+0xaa>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a1b      	ldr	r2, [pc, #108]	; (800c620 <TIM_OC3_SetConfig+0x104>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d007      	beq.n	800c5c6 <TIM_OC3_SetConfig+0xaa>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a1a      	ldr	r2, [pc, #104]	; (800c624 <TIM_OC3_SetConfig+0x108>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d003      	beq.n	800c5c6 <TIM_OC3_SetConfig+0xaa>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a19      	ldr	r2, [pc, #100]	; (800c628 <TIM_OC3_SetConfig+0x10c>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d113      	bne.n	800c5ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	011b      	lsls	r3, r3, #4
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	011b      	lsls	r3, r3, #4
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	697a      	ldr	r2, [r7, #20]
 800c606:	621a      	str	r2, [r3, #32]
}
 800c608:	bf00      	nop
 800c60a:	371c      	adds	r7, #28
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr
 800c614:	fffeff8f 	.word	0xfffeff8f
 800c618:	40010000 	.word	0x40010000
 800c61c:	40010400 	.word	0x40010400
 800c620:	40014000 	.word	0x40014000
 800c624:	40014400 	.word	0x40014400
 800c628:	40014800 	.word	0x40014800

0800c62c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b087      	sub	sp, #28
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4b24      	ldr	r3, [pc, #144]	; (800c6e8 <TIM_OC4_SetConfig+0xbc>)
 800c658:	4013      	ands	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	021b      	lsls	r3, r3, #8
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	031b      	lsls	r3, r3, #12
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	4313      	orrs	r3, r2
 800c682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a19      	ldr	r2, [pc, #100]	; (800c6ec <TIM_OC4_SetConfig+0xc0>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d00f      	beq.n	800c6ac <TIM_OC4_SetConfig+0x80>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a18      	ldr	r2, [pc, #96]	; (800c6f0 <TIM_OC4_SetConfig+0xc4>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00b      	beq.n	800c6ac <TIM_OC4_SetConfig+0x80>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a17      	ldr	r2, [pc, #92]	; (800c6f4 <TIM_OC4_SetConfig+0xc8>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d007      	beq.n	800c6ac <TIM_OC4_SetConfig+0x80>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a16      	ldr	r2, [pc, #88]	; (800c6f8 <TIM_OC4_SetConfig+0xcc>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d003      	beq.n	800c6ac <TIM_OC4_SetConfig+0x80>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a15      	ldr	r2, [pc, #84]	; (800c6fc <TIM_OC4_SetConfig+0xd0>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d109      	bne.n	800c6c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	695b      	ldr	r3, [r3, #20]
 800c6b8:	019b      	lsls	r3, r3, #6
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	697a      	ldr	r2, [r7, #20]
 800c6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	685a      	ldr	r2, [r3, #4]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	621a      	str	r2, [r3, #32]
}
 800c6da:	bf00      	nop
 800c6dc:	371c      	adds	r7, #28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	feff8fff 	.word	0xfeff8fff
 800c6ec:	40010000 	.word	0x40010000
 800c6f0:	40010400 	.word	0x40010400
 800c6f4:	40014000 	.word	0x40014000
 800c6f8:	40014400 	.word	0x40014400
 800c6fc:	40014800 	.word	0x40014800

0800c700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a1b      	ldr	r3, [r3, #32]
 800c714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	4b21      	ldr	r3, [pc, #132]	; (800c7b0 <TIM_OC5_SetConfig+0xb0>)
 800c72c:	4013      	ands	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	4313      	orrs	r3, r2
 800c738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c740:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	041b      	lsls	r3, r3, #16
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a18      	ldr	r2, [pc, #96]	; (800c7b4 <TIM_OC5_SetConfig+0xb4>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d00f      	beq.n	800c776 <TIM_OC5_SetConfig+0x76>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a17      	ldr	r2, [pc, #92]	; (800c7b8 <TIM_OC5_SetConfig+0xb8>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d00b      	beq.n	800c776 <TIM_OC5_SetConfig+0x76>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a16      	ldr	r2, [pc, #88]	; (800c7bc <TIM_OC5_SetConfig+0xbc>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d007      	beq.n	800c776 <TIM_OC5_SetConfig+0x76>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4a15      	ldr	r2, [pc, #84]	; (800c7c0 <TIM_OC5_SetConfig+0xc0>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d003      	beq.n	800c776 <TIM_OC5_SetConfig+0x76>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a14      	ldr	r2, [pc, #80]	; (800c7c4 <TIM_OC5_SetConfig+0xc4>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d109      	bne.n	800c78a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c77c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	695b      	ldr	r3, [r3, #20]
 800c782:	021b      	lsls	r3, r3, #8
 800c784:	697a      	ldr	r2, [r7, #20]
 800c786:	4313      	orrs	r3, r2
 800c788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	685a      	ldr	r2, [r3, #4]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	621a      	str	r2, [r3, #32]
}
 800c7a4:	bf00      	nop
 800c7a6:	371c      	adds	r7, #28
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	fffeff8f 	.word	0xfffeff8f
 800c7b4:	40010000 	.word	0x40010000
 800c7b8:	40010400 	.word	0x40010400
 800c7bc:	40014000 	.word	0x40014000
 800c7c0:	40014400 	.word	0x40014400
 800c7c4:	40014800 	.word	0x40014800

0800c7c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a1b      	ldr	r3, [r3, #32]
 800c7dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	4b22      	ldr	r3, [pc, #136]	; (800c87c <TIM_OC6_SetConfig+0xb4>)
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	021b      	lsls	r3, r3, #8
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	4313      	orrs	r3, r2
 800c802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c80a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
 800c810:	051b      	lsls	r3, r3, #20
 800c812:	693a      	ldr	r2, [r7, #16]
 800c814:	4313      	orrs	r3, r2
 800c816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a19      	ldr	r2, [pc, #100]	; (800c880 <TIM_OC6_SetConfig+0xb8>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d00f      	beq.n	800c840 <TIM_OC6_SetConfig+0x78>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a18      	ldr	r2, [pc, #96]	; (800c884 <TIM_OC6_SetConfig+0xbc>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d00b      	beq.n	800c840 <TIM_OC6_SetConfig+0x78>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a17      	ldr	r2, [pc, #92]	; (800c888 <TIM_OC6_SetConfig+0xc0>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d007      	beq.n	800c840 <TIM_OC6_SetConfig+0x78>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a16      	ldr	r2, [pc, #88]	; (800c88c <TIM_OC6_SetConfig+0xc4>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d003      	beq.n	800c840 <TIM_OC6_SetConfig+0x78>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a15      	ldr	r2, [pc, #84]	; (800c890 <TIM_OC6_SetConfig+0xc8>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d109      	bne.n	800c854 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c846:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	029b      	lsls	r3, r3, #10
 800c84e:	697a      	ldr	r2, [r7, #20]
 800c850:	4313      	orrs	r3, r2
 800c852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	693a      	ldr	r2, [r7, #16]
 800c86c:	621a      	str	r2, [r3, #32]
}
 800c86e:	bf00      	nop
 800c870:	371c      	adds	r7, #28
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	feff8fff 	.word	0xfeff8fff
 800c880:	40010000 	.word	0x40010000
 800c884:	40010400 	.word	0x40010400
 800c888:	40014000 	.word	0x40014000
 800c88c:	40014400 	.word	0x40014400
 800c890:	40014800 	.word	0x40014800

0800c894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c894:	b480      	push	{r7}
 800c896:	b087      	sub	sp, #28
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6a1b      	ldr	r3, [r3, #32]
 800c8a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	f023 0201 	bic.w	r2, r3, #1
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c8be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	f023 030a 	bic.w	r3, r3, #10
 800c8d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	621a      	str	r2, [r3, #32]
}
 800c8e6:	bf00      	nop
 800c8e8:	371c      	adds	r7, #28
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b087      	sub	sp, #28
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	60f8      	str	r0, [r7, #12]
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6a1b      	ldr	r3, [r3, #32]
 800c908:	f023 0210 	bic.w	r2, r3, #16
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c91c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	031b      	lsls	r3, r3, #12
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	4313      	orrs	r3, r2
 800c926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c92e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	011b      	lsls	r3, r3, #4
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	4313      	orrs	r3, r2
 800c938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	621a      	str	r2, [r3, #32]
}
 800c946:	bf00      	nop
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
	...

0800c954 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c964:	68fa      	ldr	r2, [r7, #12]
 800c966:	4b09      	ldr	r3, [pc, #36]	; (800c98c <TIM_ITRx_SetConfig+0x38>)
 800c968:	4013      	ands	r3, r2
 800c96a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c96c:	683a      	ldr	r2, [r7, #0]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	4313      	orrs	r3, r2
 800c972:	f043 0307 	orr.w	r3, r3, #7
 800c976:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	609a      	str	r2, [r3, #8]
}
 800c97e:	bf00      	nop
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	ffcfff8f 	.word	0xffcfff8f

0800c990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c990:	b480      	push	{r7}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	021a      	lsls	r2, r3, #8
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	431a      	orrs	r2, r3
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	609a      	str	r2, [r3, #8]
}
 800c9c4:	bf00      	nop
 800c9c6:	371c      	adds	r7, #28
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	f003 031f 	and.w	r3, r3, #31
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6a1a      	ldr	r2, [r3, #32]
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	43db      	mvns	r3, r3
 800c9f2:	401a      	ands	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6a1a      	ldr	r2, [r3, #32]
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	f003 031f 	and.w	r3, r3, #31
 800ca02:	6879      	ldr	r1, [r7, #4]
 800ca04:	fa01 f303 	lsl.w	r3, r1, r3
 800ca08:	431a      	orrs	r2, r3
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	621a      	str	r2, [r3, #32]
}
 800ca0e:	bf00      	nop
 800ca10:	371c      	adds	r7, #28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
	...

0800ca1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d101      	bne.n	800ca34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca30:	2302      	movs	r3, #2
 800ca32:	e06d      	b.n	800cb10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a30      	ldr	r2, [pc, #192]	; (800cb1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d004      	beq.n	800ca68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a2f      	ldr	r2, [pc, #188]	; (800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d108      	bne.n	800ca7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ca6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	4313      	orrs	r3, r2
 800ca78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a20      	ldr	r2, [pc, #128]	; (800cb1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d022      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caa6:	d01d      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a1d      	ldr	r2, [pc, #116]	; (800cb24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d018      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a1c      	ldr	r2, [pc, #112]	; (800cb28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d013      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a1a      	ldr	r2, [pc, #104]	; (800cb2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d00e      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a15      	ldr	r2, [pc, #84]	; (800cb20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d009      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a16      	ldr	r2, [pc, #88]	; (800cb30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d004      	beq.n	800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a15      	ldr	r2, [pc, #84]	; (800cb34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d10c      	bne.n	800cafe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	4313      	orrs	r3, r2
 800caf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68ba      	ldr	r2, [r7, #8]
 800cafc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3714      	adds	r7, #20
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	40010000 	.word	0x40010000
 800cb20:	40010400 	.word	0x40010400
 800cb24:	40000400 	.word	0x40000400
 800cb28:	40000800 	.word	0x40000800
 800cb2c:	40000c00 	.word	0x40000c00
 800cb30:	40001800 	.word	0x40001800
 800cb34:	40014000 	.word	0x40014000

0800cb38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d101      	bne.n	800cb54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cb50:	2302      	movs	r3, #2
 800cb52:	e065      	b.n	800cc20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	695b      	ldr	r3, [r3, #20]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	041b      	lsls	r3, r3, #16
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a16      	ldr	r2, [pc, #88]	; (800cc2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d004      	beq.n	800cbe2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a14      	ldr	r2, [pc, #80]	; (800cc30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d115      	bne.n	800cc0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbec:	051b      	lsls	r3, r3, #20
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3714      	adds	r7, #20
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	40010000 	.word	0x40010000
 800cc30:	40010400 	.word	0x40010400

0800cc34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d101      	bne.n	800cc82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e042      	b.n	800cd08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d106      	bne.n	800cc9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7f5 f9b3 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2224      	movs	r2, #36	; 0x24
 800cc9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f022 0201 	bic.w	r2, r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f001 f9b6 	bl	800e02c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fc4b 	bl	800d55c <UART_SetConfig>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d101      	bne.n	800ccd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e01b      	b.n	800cd08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	685a      	ldr	r2, [r3, #4]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	689a      	ldr	r2, [r3, #8]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ccee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f042 0201 	orr.w	r2, r2, #1
 800ccfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f001 fa35 	bl	800e170 <UART_CheckIdleState>
 800cd06:	4603      	mov	r3, r0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08a      	sub	sp, #40	; 0x28
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd24:	2b20      	cmp	r3, #32
 800cd26:	d137      	bne.n	800cd98 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d002      	beq.n	800cd34 <HAL_UART_Receive_IT+0x24>
 800cd2e:	88fb      	ldrh	r3, [r7, #6]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d101      	bne.n	800cd38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	e030      	b.n	800cd9a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a18      	ldr	r2, [pc, #96]	; (800cda4 <HAL_UART_Receive_IT+0x94>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d01f      	beq.n	800cd88 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d018      	beq.n	800cd88 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	e853 3f00 	ldrex	r3, [r3]
 800cd62:	613b      	str	r3, [r7, #16]
   return(result);
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd6a:	627b      	str	r3, [r7, #36]	; 0x24
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	461a      	mov	r2, r3
 800cd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd74:	623b      	str	r3, [r7, #32]
 800cd76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd78:	69f9      	ldr	r1, [r7, #28]
 800cd7a:	6a3a      	ldr	r2, [r7, #32]
 800cd7c:	e841 2300 	strex	r3, r2, [r1]
 800cd80:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1e6      	bne.n	800cd56 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cd88:	88fb      	ldrh	r3, [r7, #6]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	68b9      	ldr	r1, [r7, #8]
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f001 fb06 	bl	800e3a0 <UART_Start_Receive_IT>
 800cd94:	4603      	mov	r3, r0
 800cd96:	e000      	b.n	800cd9a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cd98:	2302      	movs	r3, #2
  }
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3728      	adds	r7, #40	; 0x28
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	58000c00 	.word	0x58000c00

0800cda8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b0ba      	sub	sp, #232	; 0xe8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cdce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cdd2:	f640 030f 	movw	r3, #2063	; 0x80f
 800cdd6:	4013      	ands	r3, r2
 800cdd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d11b      	bne.n	800ce1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cde4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cde8:	f003 0320 	and.w	r3, r3, #32
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d015      	beq.n	800ce1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdf4:	f003 0320 	and.w	r3, r3, #32
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d105      	bne.n	800ce08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d009      	beq.n	800ce1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f000 8377 	beq.w	800d500 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	4798      	blx	r3
      }
      return;
 800ce1a:	e371      	b.n	800d500 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f000 8123 	beq.w	800d06c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ce26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce2a:	4b8d      	ldr	r3, [pc, #564]	; (800d060 <HAL_UART_IRQHandler+0x2b8>)
 800ce2c:	4013      	ands	r3, r2
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d106      	bne.n	800ce40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ce32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ce36:	4b8b      	ldr	r3, [pc, #556]	; (800d064 <HAL_UART_IRQHandler+0x2bc>)
 800ce38:	4013      	ands	r3, r2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	f000 8116 	beq.w	800d06c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce44:	f003 0301 	and.w	r3, r3, #1
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d011      	beq.n	800ce70 <HAL_UART_IRQHandler+0xc8>
 800ce4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00b      	beq.n	800ce70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce66:	f043 0201 	orr.w	r2, r3, #1
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce74:	f003 0302 	and.w	r3, r3, #2
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d011      	beq.n	800cea0 <HAL_UART_IRQHandler+0xf8>
 800ce7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce80:	f003 0301 	and.w	r3, r3, #1
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d00b      	beq.n	800cea0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2202      	movs	r2, #2
 800ce8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce96:	f043 0204 	orr.w	r2, r3, #4
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d011      	beq.n	800ced0 <HAL_UART_IRQHandler+0x128>
 800ceac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00b      	beq.n	800ced0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2204      	movs	r2, #4
 800cebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cec6:	f043 0202 	orr.w	r2, r3, #2
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ced0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced4:	f003 0308 	and.w	r3, r3, #8
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d017      	beq.n	800cf0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee0:	f003 0320 	and.w	r3, r3, #32
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d105      	bne.n	800cef4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cee8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ceec:	4b5c      	ldr	r3, [pc, #368]	; (800d060 <HAL_UART_IRQHandler+0x2b8>)
 800ceee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00b      	beq.n	800cf0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2208      	movs	r2, #8
 800cefa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf02:	f043 0208 	orr.w	r2, r3, #8
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d012      	beq.n	800cf3e <HAL_UART_IRQHandler+0x196>
 800cf18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00c      	beq.n	800cf3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf34:	f043 0220 	orr.w	r2, r3, #32
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f000 82dd 	beq.w	800d504 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf4e:	f003 0320 	and.w	r3, r3, #32
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d013      	beq.n	800cf7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf5a:	f003 0320 	and.w	r3, r3, #32
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d105      	bne.n	800cf6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d007      	beq.n	800cf7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf92:	2b40      	cmp	r3, #64	; 0x40
 800cf94:	d005      	beq.n	800cfa2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d054      	beq.n	800d04c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f001 fb1e 	bl	800e5e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfb2:	2b40      	cmp	r3, #64	; 0x40
 800cfb4:	d146      	bne.n	800d044 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	3308      	adds	r3, #8
 800cfbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cfc4:	e853 3f00 	ldrex	r3, [r3]
 800cfc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cfcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	3308      	adds	r3, #8
 800cfde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cfe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cfe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cfee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cff2:	e841 2300 	strex	r3, r2, [r1]
 800cff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1d9      	bne.n	800cfb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d017      	beq.n	800d03c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d012:	4a15      	ldr	r2, [pc, #84]	; (800d068 <HAL_UART_IRQHandler+0x2c0>)
 800d014:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7f8 fafd 	bl	800561c <HAL_DMA_Abort_IT>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d019      	beq.n	800d05c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d036:	4610      	mov	r0, r2
 800d038:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d03a:	e00f      	b.n	800d05c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fa77 	bl	800d530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d042:	e00b      	b.n	800d05c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 fa73 	bl	800d530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d04a:	e007      	b.n	800d05c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fa6f 	bl	800d530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d05a:	e253      	b.n	800d504 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d05c:	bf00      	nop
    return;
 800d05e:	e251      	b.n	800d504 <HAL_UART_IRQHandler+0x75c>
 800d060:	10000001 	.word	0x10000001
 800d064:	04000120 	.word	0x04000120
 800d068:	0800e6b1 	.word	0x0800e6b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d070:	2b01      	cmp	r3, #1
 800d072:	f040 81e7 	bne.w	800d444 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d07a:	f003 0310 	and.w	r3, r3, #16
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 81e0 	beq.w	800d444 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d088:	f003 0310 	and.w	r3, r3, #16
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 81d9 	beq.w	800d444 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2210      	movs	r2, #16
 800d098:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0a4:	2b40      	cmp	r3, #64	; 0x40
 800d0a6:	f040 8151 	bne.w	800d34c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a96      	ldr	r2, [pc, #600]	; (800d30c <HAL_UART_IRQHandler+0x564>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d068      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a93      	ldr	r2, [pc, #588]	; (800d310 <HAL_UART_IRQHandler+0x568>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d061      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a91      	ldr	r2, [pc, #580]	; (800d314 <HAL_UART_IRQHandler+0x56c>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d05a      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a8e      	ldr	r2, [pc, #568]	; (800d318 <HAL_UART_IRQHandler+0x570>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d053      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a8c      	ldr	r2, [pc, #560]	; (800d31c <HAL_UART_IRQHandler+0x574>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d04c      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a89      	ldr	r2, [pc, #548]	; (800d320 <HAL_UART_IRQHandler+0x578>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d045      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a87      	ldr	r2, [pc, #540]	; (800d324 <HAL_UART_IRQHandler+0x57c>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d03e      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a84      	ldr	r2, [pc, #528]	; (800d328 <HAL_UART_IRQHandler+0x580>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d037      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a82      	ldr	r2, [pc, #520]	; (800d32c <HAL_UART_IRQHandler+0x584>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d030      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a7f      	ldr	r2, [pc, #508]	; (800d330 <HAL_UART_IRQHandler+0x588>)
 800d132:	4293      	cmp	r3, r2
 800d134:	d029      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a7d      	ldr	r2, [pc, #500]	; (800d334 <HAL_UART_IRQHandler+0x58c>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d022      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a7a      	ldr	r2, [pc, #488]	; (800d338 <HAL_UART_IRQHandler+0x590>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d01b      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a78      	ldr	r2, [pc, #480]	; (800d33c <HAL_UART_IRQHandler+0x594>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d014      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a75      	ldr	r2, [pc, #468]	; (800d340 <HAL_UART_IRQHandler+0x598>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d00d      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a73      	ldr	r2, [pc, #460]	; (800d344 <HAL_UART_IRQHandler+0x59c>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d006      	beq.n	800d18a <HAL_UART_IRQHandler+0x3e2>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a70      	ldr	r2, [pc, #448]	; (800d348 <HAL_UART_IRQHandler+0x5a0>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d106      	bne.n	800d198 <HAL_UART_IRQHandler+0x3f0>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	b29b      	uxth	r3, r3
 800d196:	e005      	b.n	800d1a4 <HAL_UART_IRQHandler+0x3fc>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d1a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 81ab 	beq.w	800d508 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	f080 81a3 	bcs.w	800d508 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d1c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1d2:	69db      	ldr	r3, [r3, #28]
 800d1d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1d8:	f000 8087 	beq.w	800d2ea <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d1e8:	e853 3f00 	ldrex	r3, [r3]
 800d1ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d1f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d1f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	461a      	mov	r2, r3
 800d202:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d20a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d20e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d212:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d216:	e841 2300 	strex	r3, r2, [r1]
 800d21a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d21e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1da      	bne.n	800d1dc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	3308      	adds	r3, #8
 800d22c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d230:	e853 3f00 	ldrex	r3, [r3]
 800d234:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d238:	f023 0301 	bic.w	r3, r3, #1
 800d23c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3308      	adds	r3, #8
 800d246:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d24a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d24e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d250:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d252:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d256:	e841 2300 	strex	r3, r2, [r1]
 800d25a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d25c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e1      	bne.n	800d226 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d26c:	e853 3f00 	ldrex	r3, [r3]
 800d270:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3308      	adds	r3, #8
 800d282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d286:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d288:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d28a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d28c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d28e:	e841 2300 	strex	r3, r2, [r1]
 800d292:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1e3      	bne.n	800d262 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2220      	movs	r2, #32
 800d29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2b0:	e853 3f00 	ldrex	r3, [r3]
 800d2b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d2b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2b8:	f023 0310 	bic.w	r3, r3, #16
 800d2bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d2d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2d2:	e841 2300 	strex	r3, r2, [r1]
 800d2d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1e4      	bne.n	800d2a8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7f7 fe7b 	bl	8004fe0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2202      	movs	r2, #2
 800d2ee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	b29b      	uxth	r3, r3
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 f91d 	bl	800d544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d30a:	e0fd      	b.n	800d508 <HAL_UART_IRQHandler+0x760>
 800d30c:	40020010 	.word	0x40020010
 800d310:	40020028 	.word	0x40020028
 800d314:	40020040 	.word	0x40020040
 800d318:	40020058 	.word	0x40020058
 800d31c:	40020070 	.word	0x40020070
 800d320:	40020088 	.word	0x40020088
 800d324:	400200a0 	.word	0x400200a0
 800d328:	400200b8 	.word	0x400200b8
 800d32c:	40020410 	.word	0x40020410
 800d330:	40020428 	.word	0x40020428
 800d334:	40020440 	.word	0x40020440
 800d338:	40020458 	.word	0x40020458
 800d33c:	40020470 	.word	0x40020470
 800d340:	40020488 	.word	0x40020488
 800d344:	400204a0 	.word	0x400204a0
 800d348:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d358:	b29b      	uxth	r3, r3
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d366:	b29b      	uxth	r3, r3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 80cf 	beq.w	800d50c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d36e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d372:	2b00      	cmp	r3, #0
 800d374:	f000 80ca 	beq.w	800d50c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d380:	e853 3f00 	ldrex	r3, [r3]
 800d384:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d38c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	461a      	mov	r2, r3
 800d396:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d39a:	647b      	str	r3, [r7, #68]	; 0x44
 800d39c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d3a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3a2:	e841 2300 	strex	r3, r2, [r1]
 800d3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1e4      	bne.n	800d378 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b8:	e853 3f00 	ldrex	r3, [r3]
 800d3bc:	623b      	str	r3, [r7, #32]
   return(result);
 800d3be:	6a3a      	ldr	r2, [r7, #32]
 800d3c0:	4b55      	ldr	r3, [pc, #340]	; (800d518 <HAL_UART_IRQHandler+0x770>)
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d3d2:	633a      	str	r2, [r7, #48]	; 0x30
 800d3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3da:	e841 2300 	strex	r3, r2, [r1]
 800d3de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1e3      	bne.n	800d3ae <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2220      	movs	r2, #32
 800d3ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	60fb      	str	r3, [r7, #12]
   return(result);
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f023 0310 	bic.w	r3, r3, #16
 800d40e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	461a      	mov	r2, r3
 800d418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d41c:	61fb      	str	r3, [r7, #28]
 800d41e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d420:	69b9      	ldr	r1, [r7, #24]
 800d422:	69fa      	ldr	r2, [r7, #28]
 800d424:	e841 2300 	strex	r3, r2, [r1]
 800d428:	617b      	str	r3, [r7, #20]
   return(result);
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1e4      	bne.n	800d3fa <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2202      	movs	r2, #2
 800d434:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f881 	bl	800d544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d442:	e063      	b.n	800d50c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00e      	beq.n	800d46e <HAL_UART_IRQHandler+0x6c6>
 800d450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d008      	beq.n	800d46e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d464:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 fe80 	bl	800f16c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d46c:	e051      	b.n	800d512 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d476:	2b00      	cmp	r3, #0
 800d478:	d014      	beq.n	800d4a4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d482:	2b00      	cmp	r3, #0
 800d484:	d105      	bne.n	800d492 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d48a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d008      	beq.n	800d4a4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d496:	2b00      	cmp	r3, #0
 800d498:	d03a      	beq.n	800d510 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	4798      	blx	r3
    }
    return;
 800d4a2:	e035      	b.n	800d510 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d009      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x71c>
 800d4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d003      	beq.n	800d4c4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f001 f90d 	bl	800e6dc <UART_EndTransmit_IT>
    return;
 800d4c2:	e026      	b.n	800d512 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d009      	beq.n	800d4e4 <HAL_UART_IRQHandler+0x73c>
 800d4d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d003      	beq.n	800d4e4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f001 fe59 	bl	800f194 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4e2:	e016      	b.n	800d512 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d010      	beq.n	800d512 <HAL_UART_IRQHandler+0x76a>
 800d4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	da0c      	bge.n	800d512 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f001 fe41 	bl	800f180 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4fe:	e008      	b.n	800d512 <HAL_UART_IRQHandler+0x76a>
      return;
 800d500:	bf00      	nop
 800d502:	e006      	b.n	800d512 <HAL_UART_IRQHandler+0x76a>
    return;
 800d504:	bf00      	nop
 800d506:	e004      	b.n	800d512 <HAL_UART_IRQHandler+0x76a>
      return;
 800d508:	bf00      	nop
 800d50a:	e002      	b.n	800d512 <HAL_UART_IRQHandler+0x76a>
      return;
 800d50c:	bf00      	nop
 800d50e:	e000      	b.n	800d512 <HAL_UART_IRQHandler+0x76a>
    return;
 800d510:	bf00      	nop
  }
}
 800d512:	37e8      	adds	r7, #232	; 0xe8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	effffffe 	.word	0xeffffffe

0800d51c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d538:	bf00      	nop
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	460b      	mov	r3, r1
 800d54e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d55c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d560:	b092      	sub	sp, #72	; 0x48
 800d562:	af00      	add	r7, sp, #0
 800d564:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	689a      	ldr	r2, [r3, #8]
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	431a      	orrs	r2, r3
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	431a      	orrs	r2, r3
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	69db      	ldr	r3, [r3, #28]
 800d580:	4313      	orrs	r3, r2
 800d582:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	4bbe      	ldr	r3, [pc, #760]	; (800d884 <UART_SetConfig+0x328>)
 800d58c:	4013      	ands	r3, r2
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	6812      	ldr	r2, [r2, #0]
 800d592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d594:	430b      	orrs	r3, r1
 800d596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	68da      	ldr	r2, [r3, #12]
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	430a      	orrs	r2, r1
 800d5ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4ab3      	ldr	r2, [pc, #716]	; (800d888 <UART_SetConfig+0x32c>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d004      	beq.n	800d5c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	689a      	ldr	r2, [r3, #8]
 800d5ce:	4baf      	ldr	r3, [pc, #700]	; (800d88c <UART_SetConfig+0x330>)
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	6812      	ldr	r2, [r2, #0]
 800d5d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d5d8:	430b      	orrs	r3, r1
 800d5da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e2:	f023 010f 	bic.w	r1, r3, #15
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4aa6      	ldr	r2, [pc, #664]	; (800d890 <UART_SetConfig+0x334>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d177      	bne.n	800d6ec <UART_SetConfig+0x190>
 800d5fc:	4ba5      	ldr	r3, [pc, #660]	; (800d894 <UART_SetConfig+0x338>)
 800d5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d604:	2b28      	cmp	r3, #40	; 0x28
 800d606:	d86d      	bhi.n	800d6e4 <UART_SetConfig+0x188>
 800d608:	a201      	add	r2, pc, #4	; (adr r2, 800d610 <UART_SetConfig+0xb4>)
 800d60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60e:	bf00      	nop
 800d610:	0800d6b5 	.word	0x0800d6b5
 800d614:	0800d6e5 	.word	0x0800d6e5
 800d618:	0800d6e5 	.word	0x0800d6e5
 800d61c:	0800d6e5 	.word	0x0800d6e5
 800d620:	0800d6e5 	.word	0x0800d6e5
 800d624:	0800d6e5 	.word	0x0800d6e5
 800d628:	0800d6e5 	.word	0x0800d6e5
 800d62c:	0800d6e5 	.word	0x0800d6e5
 800d630:	0800d6bd 	.word	0x0800d6bd
 800d634:	0800d6e5 	.word	0x0800d6e5
 800d638:	0800d6e5 	.word	0x0800d6e5
 800d63c:	0800d6e5 	.word	0x0800d6e5
 800d640:	0800d6e5 	.word	0x0800d6e5
 800d644:	0800d6e5 	.word	0x0800d6e5
 800d648:	0800d6e5 	.word	0x0800d6e5
 800d64c:	0800d6e5 	.word	0x0800d6e5
 800d650:	0800d6c5 	.word	0x0800d6c5
 800d654:	0800d6e5 	.word	0x0800d6e5
 800d658:	0800d6e5 	.word	0x0800d6e5
 800d65c:	0800d6e5 	.word	0x0800d6e5
 800d660:	0800d6e5 	.word	0x0800d6e5
 800d664:	0800d6e5 	.word	0x0800d6e5
 800d668:	0800d6e5 	.word	0x0800d6e5
 800d66c:	0800d6e5 	.word	0x0800d6e5
 800d670:	0800d6cd 	.word	0x0800d6cd
 800d674:	0800d6e5 	.word	0x0800d6e5
 800d678:	0800d6e5 	.word	0x0800d6e5
 800d67c:	0800d6e5 	.word	0x0800d6e5
 800d680:	0800d6e5 	.word	0x0800d6e5
 800d684:	0800d6e5 	.word	0x0800d6e5
 800d688:	0800d6e5 	.word	0x0800d6e5
 800d68c:	0800d6e5 	.word	0x0800d6e5
 800d690:	0800d6d5 	.word	0x0800d6d5
 800d694:	0800d6e5 	.word	0x0800d6e5
 800d698:	0800d6e5 	.word	0x0800d6e5
 800d69c:	0800d6e5 	.word	0x0800d6e5
 800d6a0:	0800d6e5 	.word	0x0800d6e5
 800d6a4:	0800d6e5 	.word	0x0800d6e5
 800d6a8:	0800d6e5 	.word	0x0800d6e5
 800d6ac:	0800d6e5 	.word	0x0800d6e5
 800d6b0:	0800d6dd 	.word	0x0800d6dd
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ba:	e222      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d6bc:	2304      	movs	r3, #4
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c2:	e21e      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d6c4:	2308      	movs	r3, #8
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ca:	e21a      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d6cc:	2310      	movs	r3, #16
 800d6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d2:	e216      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d6d4:	2320      	movs	r3, #32
 800d6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6da:	e212      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d6dc:	2340      	movs	r3, #64	; 0x40
 800d6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e2:	e20e      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d6e4:	2380      	movs	r3, #128	; 0x80
 800d6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ea:	e20a      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a69      	ldr	r2, [pc, #420]	; (800d898 <UART_SetConfig+0x33c>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d130      	bne.n	800d758 <UART_SetConfig+0x1fc>
 800d6f6:	4b67      	ldr	r3, [pc, #412]	; (800d894 <UART_SetConfig+0x338>)
 800d6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6fa:	f003 0307 	and.w	r3, r3, #7
 800d6fe:	2b05      	cmp	r3, #5
 800d700:	d826      	bhi.n	800d750 <UART_SetConfig+0x1f4>
 800d702:	a201      	add	r2, pc, #4	; (adr r2, 800d708 <UART_SetConfig+0x1ac>)
 800d704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d708:	0800d721 	.word	0x0800d721
 800d70c:	0800d729 	.word	0x0800d729
 800d710:	0800d731 	.word	0x0800d731
 800d714:	0800d739 	.word	0x0800d739
 800d718:	0800d741 	.word	0x0800d741
 800d71c:	0800d749 	.word	0x0800d749
 800d720:	2300      	movs	r3, #0
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e1ec      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d728:	2304      	movs	r3, #4
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e1e8      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d730:	2308      	movs	r3, #8
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e1e4      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d738:	2310      	movs	r3, #16
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73e:	e1e0      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d740:	2320      	movs	r3, #32
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d746:	e1dc      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d748:	2340      	movs	r3, #64	; 0x40
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74e:	e1d8      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d750:	2380      	movs	r3, #128	; 0x80
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d756:	e1d4      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a4f      	ldr	r2, [pc, #316]	; (800d89c <UART_SetConfig+0x340>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d130      	bne.n	800d7c4 <UART_SetConfig+0x268>
 800d762:	4b4c      	ldr	r3, [pc, #304]	; (800d894 <UART_SetConfig+0x338>)
 800d764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b05      	cmp	r3, #5
 800d76c:	d826      	bhi.n	800d7bc <UART_SetConfig+0x260>
 800d76e:	a201      	add	r2, pc, #4	; (adr r2, 800d774 <UART_SetConfig+0x218>)
 800d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d774:	0800d78d 	.word	0x0800d78d
 800d778:	0800d795 	.word	0x0800d795
 800d77c:	0800d79d 	.word	0x0800d79d
 800d780:	0800d7a5 	.word	0x0800d7a5
 800d784:	0800d7ad 	.word	0x0800d7ad
 800d788:	0800d7b5 	.word	0x0800d7b5
 800d78c:	2300      	movs	r3, #0
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e1b6      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d794:	2304      	movs	r3, #4
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e1b2      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d79c:	2308      	movs	r3, #8
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e1ae      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d7a4:	2310      	movs	r3, #16
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7aa:	e1aa      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d7ac:	2320      	movs	r3, #32
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b2:	e1a6      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d7b4:	2340      	movs	r3, #64	; 0x40
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ba:	e1a2      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d7bc:	2380      	movs	r3, #128	; 0x80
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c2:	e19e      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a35      	ldr	r2, [pc, #212]	; (800d8a0 <UART_SetConfig+0x344>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d130      	bne.n	800d830 <UART_SetConfig+0x2d4>
 800d7ce:	4b31      	ldr	r3, [pc, #196]	; (800d894 <UART_SetConfig+0x338>)
 800d7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d2:	f003 0307 	and.w	r3, r3, #7
 800d7d6:	2b05      	cmp	r3, #5
 800d7d8:	d826      	bhi.n	800d828 <UART_SetConfig+0x2cc>
 800d7da:	a201      	add	r2, pc, #4	; (adr r2, 800d7e0 <UART_SetConfig+0x284>)
 800d7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e0:	0800d7f9 	.word	0x0800d7f9
 800d7e4:	0800d801 	.word	0x0800d801
 800d7e8:	0800d809 	.word	0x0800d809
 800d7ec:	0800d811 	.word	0x0800d811
 800d7f0:	0800d819 	.word	0x0800d819
 800d7f4:	0800d821 	.word	0x0800d821
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fe:	e180      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d800:	2304      	movs	r3, #4
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e17c      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d808:	2308      	movs	r3, #8
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80e:	e178      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d810:	2310      	movs	r3, #16
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d816:	e174      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d818:	2320      	movs	r3, #32
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81e:	e170      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d820:	2340      	movs	r3, #64	; 0x40
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d826:	e16c      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d828:	2380      	movs	r3, #128	; 0x80
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82e:	e168      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a1b      	ldr	r2, [pc, #108]	; (800d8a4 <UART_SetConfig+0x348>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d142      	bne.n	800d8c0 <UART_SetConfig+0x364>
 800d83a:	4b16      	ldr	r3, [pc, #88]	; (800d894 <UART_SetConfig+0x338>)
 800d83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	2b05      	cmp	r3, #5
 800d844:	d838      	bhi.n	800d8b8 <UART_SetConfig+0x35c>
 800d846:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <UART_SetConfig+0x2f0>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d865 	.word	0x0800d865
 800d850:	0800d86d 	.word	0x0800d86d
 800d854:	0800d875 	.word	0x0800d875
 800d858:	0800d87d 	.word	0x0800d87d
 800d85c:	0800d8a9 	.word	0x0800d8a9
 800d860:	0800d8b1 	.word	0x0800d8b1
 800d864:	2300      	movs	r3, #0
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86a:	e14a      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d86c:	2304      	movs	r3, #4
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d872:	e146      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d874:	2308      	movs	r3, #8
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87a:	e142      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d87c:	2310      	movs	r3, #16
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d882:	e13e      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d884:	cfff69f3 	.word	0xcfff69f3
 800d888:	58000c00 	.word	0x58000c00
 800d88c:	11fff4ff 	.word	0x11fff4ff
 800d890:	40011000 	.word	0x40011000
 800d894:	58024400 	.word	0x58024400
 800d898:	40004400 	.word	0x40004400
 800d89c:	40004800 	.word	0x40004800
 800d8a0:	40004c00 	.word	0x40004c00
 800d8a4:	40005000 	.word	0x40005000
 800d8a8:	2320      	movs	r3, #32
 800d8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ae:	e128      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d8b0:	2340      	movs	r3, #64	; 0x40
 800d8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b6:	e124      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d8b8:	2380      	movs	r3, #128	; 0x80
 800d8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8be:	e120      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4acb      	ldr	r2, [pc, #812]	; (800dbf4 <UART_SetConfig+0x698>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d176      	bne.n	800d9b8 <UART_SetConfig+0x45c>
 800d8ca:	4bcb      	ldr	r3, [pc, #812]	; (800dbf8 <UART_SetConfig+0x69c>)
 800d8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8d2:	2b28      	cmp	r3, #40	; 0x28
 800d8d4:	d86c      	bhi.n	800d9b0 <UART_SetConfig+0x454>
 800d8d6:	a201      	add	r2, pc, #4	; (adr r2, 800d8dc <UART_SetConfig+0x380>)
 800d8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8dc:	0800d981 	.word	0x0800d981
 800d8e0:	0800d9b1 	.word	0x0800d9b1
 800d8e4:	0800d9b1 	.word	0x0800d9b1
 800d8e8:	0800d9b1 	.word	0x0800d9b1
 800d8ec:	0800d9b1 	.word	0x0800d9b1
 800d8f0:	0800d9b1 	.word	0x0800d9b1
 800d8f4:	0800d9b1 	.word	0x0800d9b1
 800d8f8:	0800d9b1 	.word	0x0800d9b1
 800d8fc:	0800d989 	.word	0x0800d989
 800d900:	0800d9b1 	.word	0x0800d9b1
 800d904:	0800d9b1 	.word	0x0800d9b1
 800d908:	0800d9b1 	.word	0x0800d9b1
 800d90c:	0800d9b1 	.word	0x0800d9b1
 800d910:	0800d9b1 	.word	0x0800d9b1
 800d914:	0800d9b1 	.word	0x0800d9b1
 800d918:	0800d9b1 	.word	0x0800d9b1
 800d91c:	0800d991 	.word	0x0800d991
 800d920:	0800d9b1 	.word	0x0800d9b1
 800d924:	0800d9b1 	.word	0x0800d9b1
 800d928:	0800d9b1 	.word	0x0800d9b1
 800d92c:	0800d9b1 	.word	0x0800d9b1
 800d930:	0800d9b1 	.word	0x0800d9b1
 800d934:	0800d9b1 	.word	0x0800d9b1
 800d938:	0800d9b1 	.word	0x0800d9b1
 800d93c:	0800d999 	.word	0x0800d999
 800d940:	0800d9b1 	.word	0x0800d9b1
 800d944:	0800d9b1 	.word	0x0800d9b1
 800d948:	0800d9b1 	.word	0x0800d9b1
 800d94c:	0800d9b1 	.word	0x0800d9b1
 800d950:	0800d9b1 	.word	0x0800d9b1
 800d954:	0800d9b1 	.word	0x0800d9b1
 800d958:	0800d9b1 	.word	0x0800d9b1
 800d95c:	0800d9a1 	.word	0x0800d9a1
 800d960:	0800d9b1 	.word	0x0800d9b1
 800d964:	0800d9b1 	.word	0x0800d9b1
 800d968:	0800d9b1 	.word	0x0800d9b1
 800d96c:	0800d9b1 	.word	0x0800d9b1
 800d970:	0800d9b1 	.word	0x0800d9b1
 800d974:	0800d9b1 	.word	0x0800d9b1
 800d978:	0800d9b1 	.word	0x0800d9b1
 800d97c:	0800d9a9 	.word	0x0800d9a9
 800d980:	2301      	movs	r3, #1
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d986:	e0bc      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d988:	2304      	movs	r3, #4
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98e:	e0b8      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d990:	2308      	movs	r3, #8
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d996:	e0b4      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d998:	2310      	movs	r3, #16
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99e:	e0b0      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d9a0:	2320      	movs	r3, #32
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a6:	e0ac      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d9a8:	2340      	movs	r3, #64	; 0x40
 800d9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ae:	e0a8      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d9b0:	2380      	movs	r3, #128	; 0x80
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b6:	e0a4      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a8f      	ldr	r2, [pc, #572]	; (800dbfc <UART_SetConfig+0x6a0>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d130      	bne.n	800da24 <UART_SetConfig+0x4c8>
 800d9c2:	4b8d      	ldr	r3, [pc, #564]	; (800dbf8 <UART_SetConfig+0x69c>)
 800d9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9c6:	f003 0307 	and.w	r3, r3, #7
 800d9ca:	2b05      	cmp	r3, #5
 800d9cc:	d826      	bhi.n	800da1c <UART_SetConfig+0x4c0>
 800d9ce:	a201      	add	r2, pc, #4	; (adr r2, 800d9d4 <UART_SetConfig+0x478>)
 800d9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d4:	0800d9ed 	.word	0x0800d9ed
 800d9d8:	0800d9f5 	.word	0x0800d9f5
 800d9dc:	0800d9fd 	.word	0x0800d9fd
 800d9e0:	0800da05 	.word	0x0800da05
 800d9e4:	0800da0d 	.word	0x0800da0d
 800d9e8:	0800da15 	.word	0x0800da15
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f2:	e086      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d9f4:	2304      	movs	r3, #4
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	e082      	b.n	800db02 <UART_SetConfig+0x5a6>
 800d9fc:	2308      	movs	r3, #8
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da02:	e07e      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da04:	2310      	movs	r3, #16
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0a:	e07a      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da0c:	2320      	movs	r3, #32
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da12:	e076      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da14:	2340      	movs	r3, #64	; 0x40
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1a:	e072      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da1c:	2380      	movs	r3, #128	; 0x80
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da22:	e06e      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a75      	ldr	r2, [pc, #468]	; (800dc00 <UART_SetConfig+0x6a4>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d130      	bne.n	800da90 <UART_SetConfig+0x534>
 800da2e:	4b72      	ldr	r3, [pc, #456]	; (800dbf8 <UART_SetConfig+0x69c>)
 800da30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da32:	f003 0307 	and.w	r3, r3, #7
 800da36:	2b05      	cmp	r3, #5
 800da38:	d826      	bhi.n	800da88 <UART_SetConfig+0x52c>
 800da3a:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <UART_SetConfig+0x4e4>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800da59 	.word	0x0800da59
 800da44:	0800da61 	.word	0x0800da61
 800da48:	0800da69 	.word	0x0800da69
 800da4c:	0800da71 	.word	0x0800da71
 800da50:	0800da79 	.word	0x0800da79
 800da54:	0800da81 	.word	0x0800da81
 800da58:	2300      	movs	r3, #0
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e050      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da60:	2304      	movs	r3, #4
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da66:	e04c      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da68:	2308      	movs	r3, #8
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6e:	e048      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da70:	2310      	movs	r3, #16
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da76:	e044      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da78:	2320      	movs	r3, #32
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7e:	e040      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da80:	2340      	movs	r3, #64	; 0x40
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e03c      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da88:	2380      	movs	r3, #128	; 0x80
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8e:	e038      	b.n	800db02 <UART_SetConfig+0x5a6>
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a5b      	ldr	r2, [pc, #364]	; (800dc04 <UART_SetConfig+0x6a8>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d130      	bne.n	800dafc <UART_SetConfig+0x5a0>
 800da9a:	4b57      	ldr	r3, [pc, #348]	; (800dbf8 <UART_SetConfig+0x69c>)
 800da9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	2b05      	cmp	r3, #5
 800daa4:	d826      	bhi.n	800daf4 <UART_SetConfig+0x598>
 800daa6:	a201      	add	r2, pc, #4	; (adr r2, 800daac <UART_SetConfig+0x550>)
 800daa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daac:	0800dac5 	.word	0x0800dac5
 800dab0:	0800dacd 	.word	0x0800dacd
 800dab4:	0800dad5 	.word	0x0800dad5
 800dab8:	0800dadd 	.word	0x0800dadd
 800dabc:	0800dae5 	.word	0x0800dae5
 800dac0:	0800daed 	.word	0x0800daed
 800dac4:	2302      	movs	r3, #2
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e01a      	b.n	800db02 <UART_SetConfig+0x5a6>
 800dacc:	2304      	movs	r3, #4
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad2:	e016      	b.n	800db02 <UART_SetConfig+0x5a6>
 800dad4:	2308      	movs	r3, #8
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dada:	e012      	b.n	800db02 <UART_SetConfig+0x5a6>
 800dadc:	2310      	movs	r3, #16
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae2:	e00e      	b.n	800db02 <UART_SetConfig+0x5a6>
 800dae4:	2320      	movs	r3, #32
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daea:	e00a      	b.n	800db02 <UART_SetConfig+0x5a6>
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e006      	b.n	800db02 <UART_SetConfig+0x5a6>
 800daf4:	2380      	movs	r3, #128	; 0x80
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e002      	b.n	800db02 <UART_SetConfig+0x5a6>
 800dafc:	2380      	movs	r3, #128	; 0x80
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a3f      	ldr	r2, [pc, #252]	; (800dc04 <UART_SetConfig+0x6a8>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	f040 80f8 	bne.w	800dcfe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db12:	2b20      	cmp	r3, #32
 800db14:	dc46      	bgt.n	800dba4 <UART_SetConfig+0x648>
 800db16:	2b02      	cmp	r3, #2
 800db18:	f2c0 8082 	blt.w	800dc20 <UART_SetConfig+0x6c4>
 800db1c:	3b02      	subs	r3, #2
 800db1e:	2b1e      	cmp	r3, #30
 800db20:	d87e      	bhi.n	800dc20 <UART_SetConfig+0x6c4>
 800db22:	a201      	add	r2, pc, #4	; (adr r2, 800db28 <UART_SetConfig+0x5cc>)
 800db24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db28:	0800dbab 	.word	0x0800dbab
 800db2c:	0800dc21 	.word	0x0800dc21
 800db30:	0800dbb3 	.word	0x0800dbb3
 800db34:	0800dc21 	.word	0x0800dc21
 800db38:	0800dc21 	.word	0x0800dc21
 800db3c:	0800dc21 	.word	0x0800dc21
 800db40:	0800dbc3 	.word	0x0800dbc3
 800db44:	0800dc21 	.word	0x0800dc21
 800db48:	0800dc21 	.word	0x0800dc21
 800db4c:	0800dc21 	.word	0x0800dc21
 800db50:	0800dc21 	.word	0x0800dc21
 800db54:	0800dc21 	.word	0x0800dc21
 800db58:	0800dc21 	.word	0x0800dc21
 800db5c:	0800dc21 	.word	0x0800dc21
 800db60:	0800dbd3 	.word	0x0800dbd3
 800db64:	0800dc21 	.word	0x0800dc21
 800db68:	0800dc21 	.word	0x0800dc21
 800db6c:	0800dc21 	.word	0x0800dc21
 800db70:	0800dc21 	.word	0x0800dc21
 800db74:	0800dc21 	.word	0x0800dc21
 800db78:	0800dc21 	.word	0x0800dc21
 800db7c:	0800dc21 	.word	0x0800dc21
 800db80:	0800dc21 	.word	0x0800dc21
 800db84:	0800dc21 	.word	0x0800dc21
 800db88:	0800dc21 	.word	0x0800dc21
 800db8c:	0800dc21 	.word	0x0800dc21
 800db90:	0800dc21 	.word	0x0800dc21
 800db94:	0800dc21 	.word	0x0800dc21
 800db98:	0800dc21 	.word	0x0800dc21
 800db9c:	0800dc21 	.word	0x0800dc21
 800dba0:	0800dc13 	.word	0x0800dc13
 800dba4:	2b40      	cmp	r3, #64	; 0x40
 800dba6:	d037      	beq.n	800dc18 <UART_SetConfig+0x6bc>
 800dba8:	e03a      	b.n	800dc20 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dbaa:	f7fc fd79 	bl	800a6a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800dbae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dbb0:	e03c      	b.n	800dc2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fc fd88 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbc0:	e034      	b.n	800dc2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbc2:	f107 0318 	add.w	r3, r7, #24
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fc fed4 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbd0:	e02c      	b.n	800dc2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbd2:	4b09      	ldr	r3, [pc, #36]	; (800dbf8 <UART_SetConfig+0x69c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 0320 	and.w	r3, r3, #32
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d016      	beq.n	800dc0c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbde:	4b06      	ldr	r3, [pc, #24]	; (800dbf8 <UART_SetConfig+0x69c>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	08db      	lsrs	r3, r3, #3
 800dbe4:	f003 0303 	and.w	r3, r3, #3
 800dbe8:	4a07      	ldr	r2, [pc, #28]	; (800dc08 <UART_SetConfig+0x6ac>)
 800dbea:	fa22 f303 	lsr.w	r3, r2, r3
 800dbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbf0:	e01c      	b.n	800dc2c <UART_SetConfig+0x6d0>
 800dbf2:	bf00      	nop
 800dbf4:	40011400 	.word	0x40011400
 800dbf8:	58024400 	.word	0x58024400
 800dbfc:	40007800 	.word	0x40007800
 800dc00:	40007c00 	.word	0x40007c00
 800dc04:	58000c00 	.word	0x58000c00
 800dc08:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dc0c:	4b9d      	ldr	r3, [pc, #628]	; (800de84 <UART_SetConfig+0x928>)
 800dc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc10:	e00c      	b.n	800dc2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc12:	4b9d      	ldr	r3, [pc, #628]	; (800de88 <UART_SetConfig+0x92c>)
 800dc14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc16:	e009      	b.n	800dc2c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc1e:	e005      	b.n	800dc2c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dc20:	2300      	movs	r3, #0
 800dc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dc24:	2301      	movs	r3, #1
 800dc26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dc2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f000 81de 	beq.w	800dff0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc38:	4a94      	ldr	r2, [pc, #592]	; (800de8c <UART_SetConfig+0x930>)
 800dc3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc3e:	461a      	mov	r2, r3
 800dc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc42:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc46:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	685a      	ldr	r2, [r3, #4]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	4413      	add	r3, r2
 800dc52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d305      	bcc.n	800dc64 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d903      	bls.n	800dc6c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dc64:	2301      	movs	r3, #1
 800dc66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc6a:	e1c1      	b.n	800dff0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc6e:	2200      	movs	r2, #0
 800dc70:	60bb      	str	r3, [r7, #8]
 800dc72:	60fa      	str	r2, [r7, #12]
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc78:	4a84      	ldr	r2, [pc, #528]	; (800de8c <UART_SetConfig+0x930>)
 800dc7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	2200      	movs	r2, #0
 800dc82:	603b      	str	r3, [r7, #0]
 800dc84:	607a      	str	r2, [r7, #4]
 800dc86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc8e:	f7f2 fb27 	bl	80002e0 <__aeabi_uldivmod>
 800dc92:	4602      	mov	r2, r0
 800dc94:	460b      	mov	r3, r1
 800dc96:	4610      	mov	r0, r2
 800dc98:	4619      	mov	r1, r3
 800dc9a:	f04f 0200 	mov.w	r2, #0
 800dc9e:	f04f 0300 	mov.w	r3, #0
 800dca2:	020b      	lsls	r3, r1, #8
 800dca4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dca8:	0202      	lsls	r2, r0, #8
 800dcaa:	6979      	ldr	r1, [r7, #20]
 800dcac:	6849      	ldr	r1, [r1, #4]
 800dcae:	0849      	lsrs	r1, r1, #1
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	eb12 0804 	adds.w	r8, r2, r4
 800dcba:	eb43 0905 	adc.w	r9, r3, r5
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	469a      	mov	sl, r3
 800dcc6:	4693      	mov	fp, r2
 800dcc8:	4652      	mov	r2, sl
 800dcca:	465b      	mov	r3, fp
 800dccc:	4640      	mov	r0, r8
 800dcce:	4649      	mov	r1, r9
 800dcd0:	f7f2 fb06 	bl	80002e0 <__aeabi_uldivmod>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	4613      	mov	r3, r2
 800dcda:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dce2:	d308      	bcc.n	800dcf6 <UART_SetConfig+0x79a>
 800dce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcea:	d204      	bcs.n	800dcf6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcf2:	60da      	str	r2, [r3, #12]
 800dcf4:	e17c      	b.n	800dff0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dcfc:	e178      	b.n	800dff0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	69db      	ldr	r3, [r3, #28]
 800dd02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd06:	f040 80c5 	bne.w	800de94 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dd0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd0e:	2b20      	cmp	r3, #32
 800dd10:	dc48      	bgt.n	800dda4 <UART_SetConfig+0x848>
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	db7b      	blt.n	800de0e <UART_SetConfig+0x8b2>
 800dd16:	2b20      	cmp	r3, #32
 800dd18:	d879      	bhi.n	800de0e <UART_SetConfig+0x8b2>
 800dd1a:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <UART_SetConfig+0x7c4>)
 800dd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd20:	0800ddab 	.word	0x0800ddab
 800dd24:	0800ddb3 	.word	0x0800ddb3
 800dd28:	0800de0f 	.word	0x0800de0f
 800dd2c:	0800de0f 	.word	0x0800de0f
 800dd30:	0800ddbb 	.word	0x0800ddbb
 800dd34:	0800de0f 	.word	0x0800de0f
 800dd38:	0800de0f 	.word	0x0800de0f
 800dd3c:	0800de0f 	.word	0x0800de0f
 800dd40:	0800ddcb 	.word	0x0800ddcb
 800dd44:	0800de0f 	.word	0x0800de0f
 800dd48:	0800de0f 	.word	0x0800de0f
 800dd4c:	0800de0f 	.word	0x0800de0f
 800dd50:	0800de0f 	.word	0x0800de0f
 800dd54:	0800de0f 	.word	0x0800de0f
 800dd58:	0800de0f 	.word	0x0800de0f
 800dd5c:	0800de0f 	.word	0x0800de0f
 800dd60:	0800dddb 	.word	0x0800dddb
 800dd64:	0800de0f 	.word	0x0800de0f
 800dd68:	0800de0f 	.word	0x0800de0f
 800dd6c:	0800de0f 	.word	0x0800de0f
 800dd70:	0800de0f 	.word	0x0800de0f
 800dd74:	0800de0f 	.word	0x0800de0f
 800dd78:	0800de0f 	.word	0x0800de0f
 800dd7c:	0800de0f 	.word	0x0800de0f
 800dd80:	0800de0f 	.word	0x0800de0f
 800dd84:	0800de0f 	.word	0x0800de0f
 800dd88:	0800de0f 	.word	0x0800de0f
 800dd8c:	0800de0f 	.word	0x0800de0f
 800dd90:	0800de0f 	.word	0x0800de0f
 800dd94:	0800de0f 	.word	0x0800de0f
 800dd98:	0800de0f 	.word	0x0800de0f
 800dd9c:	0800de0f 	.word	0x0800de0f
 800dda0:	0800de01 	.word	0x0800de01
 800dda4:	2b40      	cmp	r3, #64	; 0x40
 800dda6:	d02e      	beq.n	800de06 <UART_SetConfig+0x8aa>
 800dda8:	e031      	b.n	800de0e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddaa:	f7fa fc81 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 800ddae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ddb0:	e033      	b.n	800de1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddb2:	f7fa fc93 	bl	80086dc <HAL_RCC_GetPCLK2Freq>
 800ddb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ddb8:	e02f      	b.n	800de1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fc fc84 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ddc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddc8:	e027      	b.n	800de1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddca:	f107 0318 	add.w	r3, r7, #24
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fc fdd0 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddd8:	e01f      	b.n	800de1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddda:	4b2d      	ldr	r3, [pc, #180]	; (800de90 <UART_SetConfig+0x934>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f003 0320 	and.w	r3, r3, #32
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d009      	beq.n	800ddfa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dde6:	4b2a      	ldr	r3, [pc, #168]	; (800de90 <UART_SetConfig+0x934>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	08db      	lsrs	r3, r3, #3
 800ddec:	f003 0303 	and.w	r3, r3, #3
 800ddf0:	4a24      	ldr	r2, [pc, #144]	; (800de84 <UART_SetConfig+0x928>)
 800ddf2:	fa22 f303 	lsr.w	r3, r2, r3
 800ddf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ddf8:	e00f      	b.n	800de1a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ddfa:	4b22      	ldr	r3, [pc, #136]	; (800de84 <UART_SetConfig+0x928>)
 800ddfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddfe:	e00c      	b.n	800de1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de00:	4b21      	ldr	r3, [pc, #132]	; (800de88 <UART_SetConfig+0x92c>)
 800de02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de04:	e009      	b.n	800de1a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de0c:	e005      	b.n	800de1a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de0e:	2300      	movs	r3, #0
 800de10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800de1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 80e7 	beq.w	800dff0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de26:	4a19      	ldr	r2, [pc, #100]	; (800de8c <UART_SetConfig+0x930>)
 800de28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de2c:	461a      	mov	r2, r3
 800de2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de30:	fbb3 f3f2 	udiv	r3, r3, r2
 800de34:	005a      	lsls	r2, r3, #1
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	085b      	lsrs	r3, r3, #1
 800de3c:	441a      	add	r2, r3
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	fbb2 f3f3 	udiv	r3, r2, r3
 800de46:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4a:	2b0f      	cmp	r3, #15
 800de4c:	d916      	bls.n	800de7c <UART_SetConfig+0x920>
 800de4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de54:	d212      	bcs.n	800de7c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de58:	b29b      	uxth	r3, r3
 800de5a:	f023 030f 	bic.w	r3, r3, #15
 800de5e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de62:	085b      	lsrs	r3, r3, #1
 800de64:	b29b      	uxth	r3, r3
 800de66:	f003 0307 	and.w	r3, r3, #7
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de6e:	4313      	orrs	r3, r2
 800de70:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800de78:	60da      	str	r2, [r3, #12]
 800de7a:	e0b9      	b.n	800dff0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de82:	e0b5      	b.n	800dff0 <UART_SetConfig+0xa94>
 800de84:	03d09000 	.word	0x03d09000
 800de88:	003d0900 	.word	0x003d0900
 800de8c:	08013364 	.word	0x08013364
 800de90:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800de94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de98:	2b20      	cmp	r3, #32
 800de9a:	dc49      	bgt.n	800df30 <UART_SetConfig+0x9d4>
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	db7c      	blt.n	800df9a <UART_SetConfig+0xa3e>
 800dea0:	2b20      	cmp	r3, #32
 800dea2:	d87a      	bhi.n	800df9a <UART_SetConfig+0xa3e>
 800dea4:	a201      	add	r2, pc, #4	; (adr r2, 800deac <UART_SetConfig+0x950>)
 800dea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deaa:	bf00      	nop
 800deac:	0800df37 	.word	0x0800df37
 800deb0:	0800df3f 	.word	0x0800df3f
 800deb4:	0800df9b 	.word	0x0800df9b
 800deb8:	0800df9b 	.word	0x0800df9b
 800debc:	0800df47 	.word	0x0800df47
 800dec0:	0800df9b 	.word	0x0800df9b
 800dec4:	0800df9b 	.word	0x0800df9b
 800dec8:	0800df9b 	.word	0x0800df9b
 800decc:	0800df57 	.word	0x0800df57
 800ded0:	0800df9b 	.word	0x0800df9b
 800ded4:	0800df9b 	.word	0x0800df9b
 800ded8:	0800df9b 	.word	0x0800df9b
 800dedc:	0800df9b 	.word	0x0800df9b
 800dee0:	0800df9b 	.word	0x0800df9b
 800dee4:	0800df9b 	.word	0x0800df9b
 800dee8:	0800df9b 	.word	0x0800df9b
 800deec:	0800df67 	.word	0x0800df67
 800def0:	0800df9b 	.word	0x0800df9b
 800def4:	0800df9b 	.word	0x0800df9b
 800def8:	0800df9b 	.word	0x0800df9b
 800defc:	0800df9b 	.word	0x0800df9b
 800df00:	0800df9b 	.word	0x0800df9b
 800df04:	0800df9b 	.word	0x0800df9b
 800df08:	0800df9b 	.word	0x0800df9b
 800df0c:	0800df9b 	.word	0x0800df9b
 800df10:	0800df9b 	.word	0x0800df9b
 800df14:	0800df9b 	.word	0x0800df9b
 800df18:	0800df9b 	.word	0x0800df9b
 800df1c:	0800df9b 	.word	0x0800df9b
 800df20:	0800df9b 	.word	0x0800df9b
 800df24:	0800df9b 	.word	0x0800df9b
 800df28:	0800df9b 	.word	0x0800df9b
 800df2c:	0800df8d 	.word	0x0800df8d
 800df30:	2b40      	cmp	r3, #64	; 0x40
 800df32:	d02e      	beq.n	800df92 <UART_SetConfig+0xa36>
 800df34:	e031      	b.n	800df9a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df36:	f7fa fbbb 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 800df3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df3c:	e033      	b.n	800dfa6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df3e:	f7fa fbcd 	bl	80086dc <HAL_RCC_GetPCLK2Freq>
 800df42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df44:	e02f      	b.n	800dfa6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fc fbbe 	bl	800a6cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df54:	e027      	b.n	800dfa6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df56:	f107 0318 	add.w	r3, r7, #24
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fc fd0a 	bl	800a974 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df64:	e01f      	b.n	800dfa6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df66:	4b2d      	ldr	r3, [pc, #180]	; (800e01c <UART_SetConfig+0xac0>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f003 0320 	and.w	r3, r3, #32
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d009      	beq.n	800df86 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df72:	4b2a      	ldr	r3, [pc, #168]	; (800e01c <UART_SetConfig+0xac0>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	08db      	lsrs	r3, r3, #3
 800df78:	f003 0303 	and.w	r3, r3, #3
 800df7c:	4a28      	ldr	r2, [pc, #160]	; (800e020 <UART_SetConfig+0xac4>)
 800df7e:	fa22 f303 	lsr.w	r3, r2, r3
 800df82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df84:	e00f      	b.n	800dfa6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800df86:	4b26      	ldr	r3, [pc, #152]	; (800e020 <UART_SetConfig+0xac4>)
 800df88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df8a:	e00c      	b.n	800dfa6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df8c:	4b25      	ldr	r3, [pc, #148]	; (800e024 <UART_SetConfig+0xac8>)
 800df8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df90:	e009      	b.n	800dfa6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df98:	e005      	b.n	800dfa6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800df9a:	2300      	movs	r3, #0
 800df9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dfa4:	bf00      	nop
    }

    if (pclk != 0U)
 800dfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d021      	beq.n	800dff0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb0:	4a1d      	ldr	r2, [pc, #116]	; (800e028 <UART_SetConfig+0xacc>)
 800dfb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfba:	fbb3 f2f2 	udiv	r2, r3, r2
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	085b      	lsrs	r3, r3, #1
 800dfc4:	441a      	add	r2, r3
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	2b0f      	cmp	r3, #15
 800dfd4:	d909      	bls.n	800dfea <UART_SetConfig+0xa8e>
 800dfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfdc:	d205      	bcs.n	800dfea <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	60da      	str	r2, [r3, #12]
 800dfe8:	e002      	b.n	800dff0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	2201      	movs	r2, #1
 800dff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	2201      	movs	r2, #1
 800dffc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	2200      	movs	r2, #0
 800e004:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	2200      	movs	r2, #0
 800e00a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e00c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e010:	4618      	mov	r0, r3
 800e012:	3748      	adds	r7, #72	; 0x48
 800e014:	46bd      	mov	sp, r7
 800e016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e01a:	bf00      	nop
 800e01c:	58024400 	.word	0x58024400
 800e020:	03d09000 	.word	0x03d09000
 800e024:	003d0900 	.word	0x003d0900
 800e028:	08013364 	.word	0x08013364

0800e02c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e038:	f003 0308 	and.w	r3, r3, #8
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00a      	beq.n	800e056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	430a      	orrs	r2, r1
 800e054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e05a:	f003 0301 	and.w	r3, r3, #1
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d00a      	beq.n	800e078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	430a      	orrs	r2, r1
 800e076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07c:	f003 0302 	and.w	r3, r3, #2
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00a      	beq.n	800e09a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	430a      	orrs	r2, r1
 800e098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09e:	f003 0304 	and.w	r3, r3, #4
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00a      	beq.n	800e0bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	430a      	orrs	r2, r1
 800e0ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c0:	f003 0310 	and.w	r3, r3, #16
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00a      	beq.n	800e0de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	430a      	orrs	r2, r1
 800e0dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0e2:	f003 0320 	and.w	r3, r3, #32
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00a      	beq.n	800e100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	430a      	orrs	r2, r1
 800e0fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d01a      	beq.n	800e142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	430a      	orrs	r2, r1
 800e120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e12a:	d10a      	bne.n	800e142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	430a      	orrs	r2, r1
 800e140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00a      	beq.n	800e164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	430a      	orrs	r2, r1
 800e162:	605a      	str	r2, [r3, #4]
  }
}
 800e164:	bf00      	nop
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b098      	sub	sp, #96	; 0x60
 800e174:	af02      	add	r7, sp, #8
 800e176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e180:	f7f4 fa78 	bl	8002674 <HAL_GetTick>
 800e184:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f003 0308 	and.w	r3, r3, #8
 800e190:	2b08      	cmp	r3, #8
 800e192:	d12f      	bne.n	800e1f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e19c:	2200      	movs	r2, #0
 800e19e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 f88e 	bl	800e2c4 <UART_WaitOnFlagUntilTimeout>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d022      	beq.n	800e1f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b6:	e853 3f00 	ldrex	r3, [r3]
 800e1ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1c2:	653b      	str	r3, [r7, #80]	; 0x50
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1cc:	647b      	str	r3, [r7, #68]	; 0x44
 800e1ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1d4:	e841 2300 	strex	r3, r2, [r1]
 800e1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1e6      	bne.n	800e1ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2220      	movs	r2, #32
 800e1e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1f0:	2303      	movs	r3, #3
 800e1f2:	e063      	b.n	800e2bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 0304 	and.w	r3, r3, #4
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	d149      	bne.n	800e296 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e202:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e206:	9300      	str	r3, [sp, #0]
 800e208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e20a:	2200      	movs	r2, #0
 800e20c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 f857 	bl	800e2c4 <UART_WaitOnFlagUntilTimeout>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d03c      	beq.n	800e296 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	e853 3f00 	ldrex	r3, [r3]
 800e228:	623b      	str	r3, [r7, #32]
   return(result);
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e230:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e23a:	633b      	str	r3, [r7, #48]	; 0x30
 800e23c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e242:	e841 2300 	strex	r3, r2, [r1]
 800e246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1e6      	bne.n	800e21c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3308      	adds	r3, #8
 800e254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	e853 3f00 	ldrex	r3, [r3]
 800e25c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f023 0301 	bic.w	r3, r3, #1
 800e264:	64bb      	str	r3, [r7, #72]	; 0x48
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3308      	adds	r3, #8
 800e26c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e26e:	61fa      	str	r2, [r7, #28]
 800e270:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e272:	69b9      	ldr	r1, [r7, #24]
 800e274:	69fa      	ldr	r2, [r7, #28]
 800e276:	e841 2300 	strex	r3, r2, [r1]
 800e27a:	617b      	str	r3, [r7, #20]
   return(result);
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d1e5      	bne.n	800e24e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2220      	movs	r2, #32
 800e286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e292:	2303      	movs	r3, #3
 800e294:	e012      	b.n	800e2bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2220      	movs	r2, #32
 800e29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2220      	movs	r2, #32
 800e2a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3758      	adds	r7, #88	; 0x58
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	603b      	str	r3, [r7, #0]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2d4:	e04f      	b.n	800e376 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2dc:	d04b      	beq.n	800e376 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2de:	f7f4 f9c9 	bl	8002674 <HAL_GetTick>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	69ba      	ldr	r2, [r7, #24]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d302      	bcc.n	800e2f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d101      	bne.n	800e2f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	e04e      	b.n	800e396 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f003 0304 	and.w	r3, r3, #4
 800e302:	2b00      	cmp	r3, #0
 800e304:	d037      	beq.n	800e376 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	2b80      	cmp	r3, #128	; 0x80
 800e30a:	d034      	beq.n	800e376 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b40      	cmp	r3, #64	; 0x40
 800e310:	d031      	beq.n	800e376 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	69db      	ldr	r3, [r3, #28]
 800e318:	f003 0308 	and.w	r3, r3, #8
 800e31c:	2b08      	cmp	r3, #8
 800e31e:	d110      	bne.n	800e342 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2208      	movs	r2, #8
 800e326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f000 f95b 	bl	800e5e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2208      	movs	r2, #8
 800e332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2200      	movs	r2, #0
 800e33a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	e029      	b.n	800e396 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	69db      	ldr	r3, [r3, #28]
 800e348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e34c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e350:	d111      	bne.n	800e376 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e35a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	f000 f941 	bl	800e5e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	2220      	movs	r2, #32
 800e366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e372:	2303      	movs	r3, #3
 800e374:	e00f      	b.n	800e396 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	69da      	ldr	r2, [r3, #28]
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	4013      	ands	r3, r2
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	429a      	cmp	r2, r3
 800e384:	bf0c      	ite	eq
 800e386:	2301      	moveq	r3, #1
 800e388:	2300      	movne	r3, #0
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	461a      	mov	r2, r3
 800e38e:	79fb      	ldrb	r3, [r7, #7]
 800e390:	429a      	cmp	r2, r3
 800e392:	d0a0      	beq.n	800e2d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b0a3      	sub	sp, #140	; 0x8c
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	88fa      	ldrh	r2, [r7, #6]
 800e3b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	88fa      	ldrh	r2, [r7, #6]
 800e3c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3d2:	d10e      	bne.n	800e3f2 <UART_Start_Receive_IT+0x52>
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d105      	bne.n	800e3e8 <UART_Start_Receive_IT+0x48>
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e3e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3e6:	e02d      	b.n	800e444 <UART_Start_Receive_IT+0xa4>
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	22ff      	movs	r2, #255	; 0xff
 800e3ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3f0:	e028      	b.n	800e444 <UART_Start_Receive_IT+0xa4>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10d      	bne.n	800e416 <UART_Start_Receive_IT+0x76>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	691b      	ldr	r3, [r3, #16]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d104      	bne.n	800e40c <UART_Start_Receive_IT+0x6c>
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	22ff      	movs	r2, #255	; 0xff
 800e406:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e40a:	e01b      	b.n	800e444 <UART_Start_Receive_IT+0xa4>
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	227f      	movs	r2, #127	; 0x7f
 800e410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e414:	e016      	b.n	800e444 <UART_Start_Receive_IT+0xa4>
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e41e:	d10d      	bne.n	800e43c <UART_Start_Receive_IT+0x9c>
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d104      	bne.n	800e432 <UART_Start_Receive_IT+0x92>
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	227f      	movs	r2, #127	; 0x7f
 800e42c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e430:	e008      	b.n	800e444 <UART_Start_Receive_IT+0xa4>
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	223f      	movs	r2, #63	; 0x3f
 800e436:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e43a:	e003      	b.n	800e444 <UART_Start_Receive_IT+0xa4>
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2200      	movs	r2, #0
 800e448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2222      	movs	r2, #34	; 0x22
 800e450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	3308      	adds	r3, #8
 800e45a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e45e:	e853 3f00 	ldrex	r3, [r3]
 800e462:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e466:	f043 0301 	orr.w	r3, r3, #1
 800e46a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	3308      	adds	r3, #8
 800e474:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e478:	673a      	str	r2, [r7, #112]	; 0x70
 800e47a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e47e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e480:	e841 2300 	strex	r3, r2, [r1]
 800e484:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d1e3      	bne.n	800e454 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e494:	d14f      	bne.n	800e536 <UART_Start_Receive_IT+0x196>
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e49c:	88fa      	ldrh	r2, [r7, #6]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d349      	bcc.n	800e536 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4aa:	d107      	bne.n	800e4bc <UART_Start_Receive_IT+0x11c>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	691b      	ldr	r3, [r3, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d103      	bne.n	800e4bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	4a47      	ldr	r2, [pc, #284]	; (800e5d4 <UART_Start_Receive_IT+0x234>)
 800e4b8:	675a      	str	r2, [r3, #116]	; 0x74
 800e4ba:	e002      	b.n	800e4c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	4a46      	ldr	r2, [pc, #280]	; (800e5d8 <UART_Start_Receive_IT+0x238>)
 800e4c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	691b      	ldr	r3, [r3, #16]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d01a      	beq.n	800e500 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d2:	e853 3f00 	ldrex	r3, [r3]
 800e4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4ee:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4f4:	e841 2300 	strex	r3, r2, [r1]
 800e4f8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e4fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1e4      	bne.n	800e4ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3308      	adds	r3, #8
 800e506:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50a:	e853 3f00 	ldrex	r3, [r3]
 800e50e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e516:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	3308      	adds	r3, #8
 800e51e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e520:	64ba      	str	r2, [r7, #72]	; 0x48
 800e522:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e524:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e528:	e841 2300 	strex	r3, r2, [r1]
 800e52c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e530:	2b00      	cmp	r3, #0
 800e532:	d1e5      	bne.n	800e500 <UART_Start_Receive_IT+0x160>
 800e534:	e046      	b.n	800e5c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e53e:	d107      	bne.n	800e550 <UART_Start_Receive_IT+0x1b0>
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d103      	bne.n	800e550 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	4a24      	ldr	r2, [pc, #144]	; (800e5dc <UART_Start_Receive_IT+0x23c>)
 800e54c:	675a      	str	r2, [r3, #116]	; 0x74
 800e54e:	e002      	b.n	800e556 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	4a23      	ldr	r2, [pc, #140]	; (800e5e0 <UART_Start_Receive_IT+0x240>)
 800e554:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d019      	beq.n	800e592 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e566:	e853 3f00 	ldrex	r3, [r3]
 800e56a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e572:	677b      	str	r3, [r7, #116]	; 0x74
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	461a      	mov	r2, r3
 800e57a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e57c:	637b      	str	r3, [r7, #52]	; 0x34
 800e57e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e580:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e584:	e841 2300 	strex	r3, r2, [r1]
 800e588:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1e6      	bne.n	800e55e <UART_Start_Receive_IT+0x1be>
 800e590:	e018      	b.n	800e5c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	e853 3f00 	ldrex	r3, [r3]
 800e59e:	613b      	str	r3, [r7, #16]
   return(result);
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	f043 0320 	orr.w	r3, r3, #32
 800e5a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5b0:	623b      	str	r3, [r7, #32]
 800e5b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b4:	69f9      	ldr	r1, [r7, #28]
 800e5b6:	6a3a      	ldr	r2, [r7, #32]
 800e5b8:	e841 2300 	strex	r3, r2, [r1]
 800e5bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1e6      	bne.n	800e592 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e5c4:	2300      	movs	r3, #0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	378c      	adds	r7, #140	; 0x8c
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop
 800e5d4:	0800ee05 	.word	0x0800ee05
 800e5d8:	0800eaa5 	.word	0x0800eaa5
 800e5dc:	0800e8ed 	.word	0x0800e8ed
 800e5e0:	0800e735 	.word	0x0800e735

0800e5e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b095      	sub	sp, #84	; 0x54
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f4:	e853 3f00 	ldrex	r3, [r3]
 800e5f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e600:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	461a      	mov	r2, r3
 800e608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e60a:	643b      	str	r3, [r7, #64]	; 0x40
 800e60c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e610:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e612:	e841 2300 	strex	r3, r2, [r1]
 800e616:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1e6      	bne.n	800e5ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3308      	adds	r3, #8
 800e624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e626:	6a3b      	ldr	r3, [r7, #32]
 800e628:	e853 3f00 	ldrex	r3, [r3]
 800e62c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e62e:	69fa      	ldr	r2, [r7, #28]
 800e630:	4b1e      	ldr	r3, [pc, #120]	; (800e6ac <UART_EndRxTransfer+0xc8>)
 800e632:	4013      	ands	r3, r2
 800e634:	64bb      	str	r3, [r7, #72]	; 0x48
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	3308      	adds	r3, #8
 800e63c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e63e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e640:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e646:	e841 2300 	strex	r3, r2, [r1]
 800e64a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1e5      	bne.n	800e61e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e656:	2b01      	cmp	r3, #1
 800e658:	d118      	bne.n	800e68c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	e853 3f00 	ldrex	r3, [r3]
 800e666:	60bb      	str	r3, [r7, #8]
   return(result);
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	f023 0310 	bic.w	r3, r3, #16
 800e66e:	647b      	str	r3, [r7, #68]	; 0x44
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	461a      	mov	r2, r3
 800e676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e678:	61bb      	str	r3, [r7, #24]
 800e67a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67c:	6979      	ldr	r1, [r7, #20]
 800e67e:	69ba      	ldr	r2, [r7, #24]
 800e680:	e841 2300 	strex	r3, r2, [r1]
 800e684:	613b      	str	r3, [r7, #16]
   return(result);
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1e6      	bne.n	800e65a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2220      	movs	r2, #32
 800e690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e6a0:	bf00      	nop
 800e6a2:	3754      	adds	r7, #84	; 0x54
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr
 800e6ac:	effffffe 	.word	0xeffffffe

0800e6b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f7fe ff2e 	bl	800d530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6d4:	bf00      	nop
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b088      	sub	sp, #32
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	e853 3f00 	ldrex	r3, [r3]
 800e6f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6f8:	61fb      	str	r3, [r7, #28]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	461a      	mov	r2, r3
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	61bb      	str	r3, [r7, #24]
 800e704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e706:	6979      	ldr	r1, [r7, #20]
 800e708:	69ba      	ldr	r2, [r7, #24]
 800e70a:	e841 2300 	strex	r3, r2, [r1]
 800e70e:	613b      	str	r3, [r7, #16]
   return(result);
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d1e6      	bne.n	800e6e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2220      	movs	r2, #32
 800e71a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7fe fef9 	bl	800d51c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e72a:	bf00      	nop
 800e72c:	3720      	adds	r7, #32
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
	...

0800e734 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b09c      	sub	sp, #112	; 0x70
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e742:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e74c:	2b22      	cmp	r3, #34	; 0x22
 800e74e:	f040 80be 	bne.w	800e8ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e758:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e75c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e760:	b2d9      	uxtb	r1, r3
 800e762:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e766:	b2da      	uxtb	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e76c:	400a      	ands	r2, r1
 800e76e:	b2d2      	uxtb	r2, r2
 800e770:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e782:	b29b      	uxth	r3, r3
 800e784:	3b01      	subs	r3, #1
 800e786:	b29a      	uxth	r2, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e794:	b29b      	uxth	r3, r3
 800e796:	2b00      	cmp	r3, #0
 800e798:	f040 80a1 	bne.w	800e8de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7a4:	e853 3f00 	ldrex	r3, [r3]
 800e7a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e7aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800e7bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7c2:	e841 2300 	strex	r3, r2, [r1]
 800e7c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1e6      	bne.n	800e79c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d8:	e853 3f00 	ldrex	r3, [r3]
 800e7dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e0:	f023 0301 	bic.w	r3, r3, #1
 800e7e4:	667b      	str	r3, [r7, #100]	; 0x64
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e7ee:	647a      	str	r2, [r7, #68]	; 0x44
 800e7f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7f6:	e841 2300 	strex	r3, r2, [r1]
 800e7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d1e5      	bne.n	800e7ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2220      	movs	r2, #32
 800e806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	4a33      	ldr	r2, [pc, #204]	; (800e8e8 <UART_RxISR_8BIT+0x1b4>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d01f      	beq.n	800e860 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d018      	beq.n	800e860 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e836:	e853 3f00 	ldrex	r3, [r3]
 800e83a:	623b      	str	r3, [r7, #32]
   return(result);
 800e83c:	6a3b      	ldr	r3, [r7, #32]
 800e83e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e842:	663b      	str	r3, [r7, #96]	; 0x60
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	461a      	mov	r2, r3
 800e84a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e84c:	633b      	str	r3, [r7, #48]	; 0x30
 800e84e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e854:	e841 2300 	strex	r3, r2, [r1]
 800e858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1e6      	bne.n	800e82e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e864:	2b01      	cmp	r3, #1
 800e866:	d12e      	bne.n	800e8c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	e853 3f00 	ldrex	r3, [r3]
 800e87a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f023 0310 	bic.w	r3, r3, #16
 800e882:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	461a      	mov	r2, r3
 800e88a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e88c:	61fb      	str	r3, [r7, #28]
 800e88e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e890:	69b9      	ldr	r1, [r7, #24]
 800e892:	69fa      	ldr	r2, [r7, #28]
 800e894:	e841 2300 	strex	r3, r2, [r1]
 800e898:	617b      	str	r3, [r7, #20]
   return(result);
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1e6      	bne.n	800e86e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	69db      	ldr	r3, [r3, #28]
 800e8a6:	f003 0310 	and.w	r3, r3, #16
 800e8aa:	2b10      	cmp	r3, #16
 800e8ac:	d103      	bne.n	800e8b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2210      	movs	r2, #16
 800e8b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e8bc:	4619      	mov	r1, r3
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7fe fe40 	bl	800d544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e8c4:	e00b      	b.n	800e8de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7f1 fec2 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 800e8cc:	e007      	b.n	800e8de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	699a      	ldr	r2, [r3, #24]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f042 0208 	orr.w	r2, r2, #8
 800e8dc:	619a      	str	r2, [r3, #24]
}
 800e8de:	bf00      	nop
 800e8e0:	3770      	adds	r7, #112	; 0x70
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	58000c00 	.word	0x58000c00

0800e8ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b09c      	sub	sp, #112	; 0x70
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e904:	2b22      	cmp	r3, #34	; 0x22
 800e906:	f040 80be 	bne.w	800ea86 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e910:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e918:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e91a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800e91e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e922:	4013      	ands	r3, r2
 800e924:	b29a      	uxth	r2, r3
 800e926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e928:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e92e:	1c9a      	adds	r2, r3, #2
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	3b01      	subs	r3, #1
 800e93e:	b29a      	uxth	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f040 80a1 	bne.w	800ea96 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e95c:	e853 3f00 	ldrex	r3, [r3]
 800e960:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e968:	667b      	str	r3, [r7, #100]	; 0x64
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	461a      	mov	r2, r3
 800e970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e972:	657b      	str	r3, [r7, #84]	; 0x54
 800e974:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e97a:	e841 2300 	strex	r3, r2, [r1]
 800e97e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1e6      	bne.n	800e954 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	3308      	adds	r3, #8
 800e98c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e990:	e853 3f00 	ldrex	r3, [r3]
 800e994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e998:	f023 0301 	bic.w	r3, r3, #1
 800e99c:	663b      	str	r3, [r7, #96]	; 0x60
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	3308      	adds	r3, #8
 800e9a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9a6:	643a      	str	r2, [r7, #64]	; 0x40
 800e9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9ae:	e841 2300 	strex	r3, r2, [r1]
 800e9b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1e5      	bne.n	800e986 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2220      	movs	r2, #32
 800e9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4a33      	ldr	r2, [pc, #204]	; (800eaa0 <UART_RxISR_16BIT+0x1b4>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d01f      	beq.n	800ea18 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d018      	beq.n	800ea18 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	e853 3f00 	ldrex	r3, [r3]
 800e9f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e9fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	461a      	mov	r2, r3
 800ea02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea06:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e6      	bne.n	800e9e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d12e      	bne.n	800ea7e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2200      	movs	r2, #0
 800ea24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	e853 3f00 	ldrex	r3, [r3]
 800ea32:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	f023 0310 	bic.w	r3, r3, #16
 800ea3a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	461a      	mov	r2, r3
 800ea42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea44:	61bb      	str	r3, [r7, #24]
 800ea46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea48:	6979      	ldr	r1, [r7, #20]
 800ea4a:	69ba      	ldr	r2, [r7, #24]
 800ea4c:	e841 2300 	strex	r3, r2, [r1]
 800ea50:	613b      	str	r3, [r7, #16]
   return(result);
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1e6      	bne.n	800ea26 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	69db      	ldr	r3, [r3, #28]
 800ea5e:	f003 0310 	and.w	r3, r3, #16
 800ea62:	2b10      	cmp	r3, #16
 800ea64:	d103      	bne.n	800ea6e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2210      	movs	r2, #16
 800ea6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea74:	4619      	mov	r1, r3
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f7fe fd64 	bl	800d544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea7c:	e00b      	b.n	800ea96 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7f1 fde6 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 800ea84:	e007      	b.n	800ea96 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	699a      	ldr	r2, [r3, #24]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f042 0208 	orr.w	r2, r2, #8
 800ea94:	619a      	str	r2, [r3, #24]
}
 800ea96:	bf00      	nop
 800ea98:	3770      	adds	r7, #112	; 0x70
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	58000c00 	.word	0x58000c00

0800eaa4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b0ac      	sub	sp, #176	; 0xb0
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eab2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	69db      	ldr	r3, [r3, #28]
 800eabc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eada:	2b22      	cmp	r3, #34	; 0x22
 800eadc:	f040 8180 	bne.w	800ede0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eae6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eaea:	e123      	b.n	800ed34 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eaf6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800eafa:	b2d9      	uxtb	r1, r3
 800eafc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb06:	400a      	ands	r2, r1
 800eb08:	b2d2      	uxtb	r2, r2
 800eb0a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb10:	1c5a      	adds	r2, r3, #1
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	3b01      	subs	r3, #1
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	69db      	ldr	r3, [r3, #28]
 800eb2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800eb32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb36:	f003 0307 	and.w	r3, r3, #7
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d053      	beq.n	800ebe6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eb3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb42:	f003 0301 	and.w	r3, r3, #1
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d011      	beq.n	800eb6e <UART_RxISR_8BIT_FIFOEN+0xca>
 800eb4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eb4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00b      	beq.n	800eb6e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb64:	f043 0201 	orr.w	r2, r3, #1
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eb72:	f003 0302 	and.w	r3, r3, #2
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d011      	beq.n	800eb9e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800eb7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eb7e:	f003 0301 	and.w	r3, r3, #1
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00b      	beq.n	800eb9e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2202      	movs	r2, #2
 800eb8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb94:	f043 0204 	orr.w	r2, r3, #4
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eb9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eba2:	f003 0304 	and.w	r3, r3, #4
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d011      	beq.n	800ebce <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ebaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00b      	beq.n	800ebce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2204      	movs	r2, #4
 800ebbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebc4:	f043 0202 	orr.w	r2, r3, #2
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d006      	beq.n	800ebe6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7fe fca9 	bl	800d530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f040 80a0 	bne.w	800ed34 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ebfc:	e853 3f00 	ldrex	r3, [r3]
 800ec00:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800ec02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	461a      	mov	r2, r3
 800ec12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec16:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ec18:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ec1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ec1e:	e841 2300 	strex	r3, r2, [r1]
 800ec22:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800ec24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1e4      	bne.n	800ebf4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3308      	adds	r3, #8
 800ec30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec34:	e853 3f00 	ldrex	r3, [r3]
 800ec38:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ec3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec3c:	4b6e      	ldr	r3, [pc, #440]	; (800edf8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ec3e:	4013      	ands	r3, r2
 800ec40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	3308      	adds	r3, #8
 800ec4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ec4e:	66ba      	str	r2, [r7, #104]	; 0x68
 800ec50:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec52:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ec54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec56:	e841 2300 	strex	r3, r2, [r1]
 800ec5a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ec5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d1e3      	bne.n	800ec2a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2220      	movs	r2, #32
 800ec66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a60      	ldr	r2, [pc, #384]	; (800edfc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d021      	beq.n	800ecc4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d01a      	beq.n	800ecc4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec96:	e853 3f00 	ldrex	r3, [r3]
 800ec9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ec9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800eca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	461a      	mov	r2, r3
 800ecac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecb0:	657b      	str	r3, [r7, #84]	; 0x54
 800ecb2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ecb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ecb8:	e841 2300 	strex	r3, r2, [r1]
 800ecbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ecbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1e4      	bne.n	800ec8e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d130      	bne.n	800ed2e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	e853 3f00 	ldrex	r3, [r3]
 800ecde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ece0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece2:	f023 0310 	bic.w	r3, r3, #16
 800ece6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	461a      	mov	r2, r3
 800ecf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ecf4:	643b      	str	r3, [r7, #64]	; 0x40
 800ecf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ecfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ecfc:	e841 2300 	strex	r3, r2, [r1]
 800ed00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1e4      	bne.n	800ecd2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	69db      	ldr	r3, [r3, #28]
 800ed0e:	f003 0310 	and.w	r3, r3, #16
 800ed12:	2b10      	cmp	r3, #16
 800ed14:	d103      	bne.n	800ed1e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	2210      	movs	r2, #16
 800ed1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed24:	4619      	mov	r1, r3
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7fe fc0c 	bl	800d544 <HAL_UARTEx_RxEventCallback>
 800ed2c:	e002      	b.n	800ed34 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f7f1 fc8e 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ed34:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d006      	beq.n	800ed4a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ed3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ed40:	f003 0320 	and.w	r3, r3, #32
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f47f aed1 	bne.w	800eaec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ed54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d049      	beq.n	800edf0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ed62:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d242      	bcs.n	800edf0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	3308      	adds	r3, #8
 800ed70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed72:	6a3b      	ldr	r3, [r7, #32]
 800ed74:	e853 3f00 	ldrex	r3, [r3]
 800ed78:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3308      	adds	r3, #8
 800ed8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ed8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed96:	e841 2300 	strex	r3, r2, [r1]
 800ed9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1e3      	bne.n	800ed6a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a16      	ldr	r2, [pc, #88]	; (800ee00 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800eda6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	e853 3f00 	ldrex	r3, [r3]
 800edb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	f043 0320 	orr.w	r3, r3, #32
 800edbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	461a      	mov	r2, r3
 800edc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800edca:	61bb      	str	r3, [r7, #24]
 800edcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edce:	6979      	ldr	r1, [r7, #20]
 800edd0:	69ba      	ldr	r2, [r7, #24]
 800edd2:	e841 2300 	strex	r3, r2, [r1]
 800edd6:	613b      	str	r3, [r7, #16]
   return(result);
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d1e4      	bne.n	800eda8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800edde:	e007      	b.n	800edf0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	699a      	ldr	r2, [r3, #24]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f042 0208 	orr.w	r2, r2, #8
 800edee:	619a      	str	r2, [r3, #24]
}
 800edf0:	bf00      	nop
 800edf2:	37b0      	adds	r7, #176	; 0xb0
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	effffffe 	.word	0xeffffffe
 800edfc:	58000c00 	.word	0x58000c00
 800ee00:	0800e735 	.word	0x0800e735

0800ee04 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b0ae      	sub	sp, #184	; 0xb8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee12:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	69db      	ldr	r3, [r3, #28]
 800ee1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	689b      	ldr	r3, [r3, #8]
 800ee30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee3a:	2b22      	cmp	r3, #34	; 0x22
 800ee3c:	f040 8184 	bne.w	800f148 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee46:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ee4a:	e127      	b.n	800f09c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee52:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ee5e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ee62:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ee66:	4013      	ands	r3, r2
 800ee68:	b29a      	uxth	r2, r3
 800ee6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee74:	1c9a      	adds	r2, r3, #2
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	3b01      	subs	r3, #1
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	69db      	ldr	r3, [r3, #28]
 800ee92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ee96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ee9a:	f003 0307 	and.w	r3, r3, #7
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d053      	beq.n	800ef4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800eea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eea6:	f003 0301 	and.w	r3, r3, #1
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d011      	beq.n	800eed2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800eeae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eeb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00b      	beq.n	800eed2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2201      	movs	r2, #1
 800eec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eec8:	f043 0201 	orr.w	r2, r3, #1
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800eed6:	f003 0302 	and.w	r3, r3, #2
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d011      	beq.n	800ef02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800eede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800eee2:	f003 0301 	and.w	r3, r3, #1
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00b      	beq.n	800ef02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2202      	movs	r2, #2
 800eef0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eef8:	f043 0204 	orr.w	r2, r3, #4
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ef06:	f003 0304 	and.w	r3, r3, #4
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d011      	beq.n	800ef32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ef0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ef12:	f003 0301 	and.w	r3, r3, #1
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00b      	beq.n	800ef32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2204      	movs	r2, #4
 800ef20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef28:	f043 0202 	orr.w	r2, r3, #2
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d006      	beq.n	800ef4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7fe faf7 	bl	800d530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2200      	movs	r2, #0
 800ef46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f040 80a2 	bne.w	800f09c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef60:	e853 3f00 	ldrex	r3, [r3]
 800ef64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ef66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	461a      	mov	r2, r3
 800ef76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ef7e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ef82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ef86:	e841 2300 	strex	r3, r2, [r1]
 800ef8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ef8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1e2      	bne.n	800ef58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	3308      	adds	r3, #8
 800ef98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef9c:	e853 3f00 	ldrex	r3, [r3]
 800efa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800efa2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800efa4:	4b6e      	ldr	r3, [pc, #440]	; (800f160 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800efa6:	4013      	ands	r3, r2
 800efa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	3308      	adds	r3, #8
 800efb2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800efb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800efb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800efbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800efbe:	e841 2300 	strex	r3, r2, [r1]
 800efc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800efc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e3      	bne.n	800ef92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2220      	movs	r2, #32
 800efce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4a60      	ldr	r2, [pc, #384]	; (800f164 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d021      	beq.n	800f02c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d01a      	beq.n	800f02c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800effe:	e853 3f00 	ldrex	r3, [r3]
 800f002:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f006:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f00a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	461a      	mov	r2, r3
 800f014:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f018:	65bb      	str	r3, [r7, #88]	; 0x58
 800f01a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f01c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f01e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f020:	e841 2300 	strex	r3, r2, [r1]
 800f024:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1e4      	bne.n	800eff6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f030:	2b01      	cmp	r3, #1
 800f032:	d130      	bne.n	800f096 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2200      	movs	r2, #0
 800f038:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	e853 3f00 	ldrex	r3, [r3]
 800f046:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04a:	f023 0310 	bic.w	r3, r3, #16
 800f04e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	461a      	mov	r2, r3
 800f058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f05c:	647b      	str	r3, [r7, #68]	; 0x44
 800f05e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f064:	e841 2300 	strex	r3, r2, [r1]
 800f068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d1e4      	bne.n	800f03a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	69db      	ldr	r3, [r3, #28]
 800f076:	f003 0310 	and.w	r3, r3, #16
 800f07a:	2b10      	cmp	r3, #16
 800f07c:	d103      	bne.n	800f086 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2210      	movs	r2, #16
 800f084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f08c:	4619      	mov	r1, r3
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7fe fa58 	bl	800d544 <HAL_UARTEx_RxEventCallback>
 800f094:	e002      	b.n	800f09c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7f1 fada 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f09c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d006      	beq.n	800f0b2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f0a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f0a8:	f003 0320 	and.w	r3, r3, #32
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	f47f aecd 	bne.w	800ee4c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0b8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f0bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d049      	beq.n	800f158 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f0ca:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d242      	bcs.n	800f158 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	3308      	adds	r3, #8
 800f0d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0dc:	e853 3f00 	ldrex	r3, [r3]
 800f0e0:	623b      	str	r3, [r7, #32]
   return(result);
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f0e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	3308      	adds	r3, #8
 800f0f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f0f6:	633a      	str	r2, [r7, #48]	; 0x30
 800f0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0fe:	e841 2300 	strex	r3, r2, [r1]
 800f102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1e3      	bne.n	800f0d2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4a16      	ldr	r2, [pc, #88]	; (800f168 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f10e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	e853 3f00 	ldrex	r3, [r3]
 800f11c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f043 0320 	orr.w	r3, r3, #32
 800f124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	461a      	mov	r2, r3
 800f12e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f132:	61fb      	str	r3, [r7, #28]
 800f134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f136:	69b9      	ldr	r1, [r7, #24]
 800f138:	69fa      	ldr	r2, [r7, #28]
 800f13a:	e841 2300 	strex	r3, r2, [r1]
 800f13e:	617b      	str	r3, [r7, #20]
   return(result);
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d1e4      	bne.n	800f110 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f146:	e007      	b.n	800f158 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	699a      	ldr	r2, [r3, #24]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f042 0208 	orr.w	r2, r2, #8
 800f156:	619a      	str	r2, [r3, #24]
}
 800f158:	bf00      	nop
 800f15a:	37b8      	adds	r7, #184	; 0xb8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	effffffe 	.word	0xeffffffe
 800f164:	58000c00 	.word	0x58000c00
 800f168:	0800e8ed 	.word	0x0800e8ed

0800f16c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f174:	bf00      	nop
 800f176:	370c      	adds	r7, #12
 800f178:	46bd      	mov	sp, r7
 800f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f180:	b480      	push	{r7}
 800f182:	b083      	sub	sp, #12
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f188:	bf00      	nop
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d101      	bne.n	800f1be <HAL_UARTEx_DisableFifoMode+0x16>
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	e027      	b.n	800f20e <HAL_UARTEx_DisableFifoMode+0x66>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2224      	movs	r2, #36	; 0x24
 800f1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f022 0201 	bic.w	r2, r2, #1
 800f1e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f1ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2220      	movs	r2, #32
 800f200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3714      	adds	r7, #20
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr

0800f21a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b084      	sub	sp, #16
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d101      	bne.n	800f232 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f22e:	2302      	movs	r3, #2
 800f230:	e02d      	b.n	800f28e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2201      	movs	r2, #1
 800f236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2224      	movs	r2, #36	; 0x24
 800f23e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f022 0201 	bic.w	r2, r2, #1
 800f258:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	683a      	ldr	r2, [r7, #0]
 800f26a:	430a      	orrs	r2, r1
 800f26c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 f850 	bl	800f314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2220      	movs	r2, #32
 800f280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f28c:	2300      	movs	r3, #0
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
 800f29e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	d101      	bne.n	800f2ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f2aa:	2302      	movs	r3, #2
 800f2ac:	e02d      	b.n	800f30a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2224      	movs	r2, #36	; 0x24
 800f2ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f022 0201 	bic.w	r2, r2, #1
 800f2d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	689b      	ldr	r3, [r3, #8]
 800f2dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	683a      	ldr	r2, [r7, #0]
 800f2e6:	430a      	orrs	r2, r1
 800f2e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 f812 	bl	800f314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2220      	movs	r2, #32
 800f2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
	...

0800f314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f320:	2b00      	cmp	r3, #0
 800f322:	d108      	bne.n	800f336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f334:	e031      	b.n	800f39a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f336:	2310      	movs	r3, #16
 800f338:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f33a:	2310      	movs	r3, #16
 800f33c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	0e5b      	lsrs	r3, r3, #25
 800f346:	b2db      	uxtb	r3, r3
 800f348:	f003 0307 	and.w	r3, r3, #7
 800f34c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	0f5b      	lsrs	r3, r3, #29
 800f356:	b2db      	uxtb	r3, r3
 800f358:	f003 0307 	and.w	r3, r3, #7
 800f35c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f35e:	7bbb      	ldrb	r3, [r7, #14]
 800f360:	7b3a      	ldrb	r2, [r7, #12]
 800f362:	4911      	ldr	r1, [pc, #68]	; (800f3a8 <UARTEx_SetNbDataToProcess+0x94>)
 800f364:	5c8a      	ldrb	r2, [r1, r2]
 800f366:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f36a:	7b3a      	ldrb	r2, [r7, #12]
 800f36c:	490f      	ldr	r1, [pc, #60]	; (800f3ac <UARTEx_SetNbDataToProcess+0x98>)
 800f36e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f370:	fb93 f3f2 	sdiv	r3, r3, r2
 800f374:	b29a      	uxth	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
 800f37e:	7b7a      	ldrb	r2, [r7, #13]
 800f380:	4909      	ldr	r1, [pc, #36]	; (800f3a8 <UARTEx_SetNbDataToProcess+0x94>)
 800f382:	5c8a      	ldrb	r2, [r1, r2]
 800f384:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f388:	7b7a      	ldrb	r2, [r7, #13]
 800f38a:	4908      	ldr	r1, [pc, #32]	; (800f3ac <UARTEx_SetNbDataToProcess+0x98>)
 800f38c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f38e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f392:	b29a      	uxth	r2, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f39a:	bf00      	nop
 800f39c:	3714      	adds	r7, #20
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	0801337c 	.word	0x0801337c
 800f3ac:	08013384 	.word	0x08013384

0800f3b0 <__NVIC_SetPriority>:
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	6039      	str	r1, [r7, #0]
 800f3ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f3bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	db0a      	blt.n	800f3da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	b2da      	uxtb	r2, r3
 800f3c8:	490c      	ldr	r1, [pc, #48]	; (800f3fc <__NVIC_SetPriority+0x4c>)
 800f3ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f3ce:	0112      	lsls	r2, r2, #4
 800f3d0:	b2d2      	uxtb	r2, r2
 800f3d2:	440b      	add	r3, r1
 800f3d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f3d8:	e00a      	b.n	800f3f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	4908      	ldr	r1, [pc, #32]	; (800f400 <__NVIC_SetPriority+0x50>)
 800f3e0:	88fb      	ldrh	r3, [r7, #6]
 800f3e2:	f003 030f 	and.w	r3, r3, #15
 800f3e6:	3b04      	subs	r3, #4
 800f3e8:	0112      	lsls	r2, r2, #4
 800f3ea:	b2d2      	uxtb	r2, r2
 800f3ec:	440b      	add	r3, r1
 800f3ee:	761a      	strb	r2, [r3, #24]
}
 800f3f0:	bf00      	nop
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr
 800f3fc:	e000e100 	.word	0xe000e100
 800f400:	e000ed00 	.word	0xe000ed00

0800f404 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f404:	b580      	push	{r7, lr}
 800f406:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f408:	4b05      	ldr	r3, [pc, #20]	; (800f420 <SysTick_Handler+0x1c>)
 800f40a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f40c:	f002 f872 	bl	80114f4 <xTaskGetSchedulerState>
 800f410:	4603      	mov	r3, r0
 800f412:	2b01      	cmp	r3, #1
 800f414:	d001      	beq.n	800f41a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f416:	f002 fe8f 	bl	8012138 <xPortSysTickHandler>
  }
}
 800f41a:	bf00      	nop
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	e000e010 	.word	0xe000e010

0800f424 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f424:	b580      	push	{r7, lr}
 800f426:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f428:	2100      	movs	r1, #0
 800f42a:	f06f 0004 	mvn.w	r0, #4
 800f42e:	f7ff ffbf 	bl	800f3b0 <__NVIC_SetPriority>
#endif
}
 800f432:	bf00      	nop
 800f434:	bd80      	pop	{r7, pc}
	...

0800f438 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f43e:	f3ef 8305 	mrs	r3, IPSR
 800f442:	603b      	str	r3, [r7, #0]
  return(result);
 800f444:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f446:	2b00      	cmp	r3, #0
 800f448:	d003      	beq.n	800f452 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f44a:	f06f 0305 	mvn.w	r3, #5
 800f44e:	607b      	str	r3, [r7, #4]
 800f450:	e00c      	b.n	800f46c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f452:	4b0a      	ldr	r3, [pc, #40]	; (800f47c <osKernelInitialize+0x44>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d105      	bne.n	800f466 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f45a:	4b08      	ldr	r3, [pc, #32]	; (800f47c <osKernelInitialize+0x44>)
 800f45c:	2201      	movs	r2, #1
 800f45e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f460:	2300      	movs	r3, #0
 800f462:	607b      	str	r3, [r7, #4]
 800f464:	e002      	b.n	800f46c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f46a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f46c:	687b      	ldr	r3, [r7, #4]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	370c      	adds	r7, #12
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	2400063c 	.word	0x2400063c

0800f480 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f486:	f3ef 8305 	mrs	r3, IPSR
 800f48a:	603b      	str	r3, [r7, #0]
  return(result);
 800f48c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d003      	beq.n	800f49a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f492:	f06f 0305 	mvn.w	r3, #5
 800f496:	607b      	str	r3, [r7, #4]
 800f498:	e010      	b.n	800f4bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f49a:	4b0b      	ldr	r3, [pc, #44]	; (800f4c8 <osKernelStart+0x48>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d109      	bne.n	800f4b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f4a2:	f7ff ffbf 	bl	800f424 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f4a6:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <osKernelStart+0x48>)
 800f4a8:	2202      	movs	r2, #2
 800f4aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f4ac:	f001 fb3c 	bl	8010b28 <vTaskStartScheduler>
      stat = osOK;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	607b      	str	r3, [r7, #4]
 800f4b4:	e002      	b.n	800f4bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f4b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f4bc:	687b      	ldr	r3, [r7, #4]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	2400063c 	.word	0x2400063c

0800f4cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b08e      	sub	sp, #56	; 0x38
 800f4d0:	af04      	add	r7, sp, #16
 800f4d2:	60f8      	str	r0, [r7, #12]
 800f4d4:	60b9      	str	r1, [r7, #8]
 800f4d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4dc:	f3ef 8305 	mrs	r3, IPSR
 800f4e0:	617b      	str	r3, [r7, #20]
  return(result);
 800f4e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d17e      	bne.n	800f5e6 <osThreadNew+0x11a>
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d07b      	beq.n	800f5e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f4ee:	2380      	movs	r3, #128	; 0x80
 800f4f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f4f2:	2318      	movs	r3, #24
 800f4f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f4fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d045      	beq.n	800f592 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d002      	beq.n	800f514 <osThreadNew+0x48>
        name = attr->name;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	699b      	ldr	r3, [r3, #24]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d002      	beq.n	800f522 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	699b      	ldr	r3, [r3, #24]
 800f520:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d008      	beq.n	800f53a <osThreadNew+0x6e>
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	2b38      	cmp	r3, #56	; 0x38
 800f52c:	d805      	bhi.n	800f53a <osThreadNew+0x6e>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	f003 0301 	and.w	r3, r3, #1
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <osThreadNew+0x72>
        return (NULL);
 800f53a:	2300      	movs	r3, #0
 800f53c:	e054      	b.n	800f5e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	695b      	ldr	r3, [r3, #20]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d003      	beq.n	800f54e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	695b      	ldr	r3, [r3, #20]
 800f54a:	089b      	lsrs	r3, r3, #2
 800f54c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	689b      	ldr	r3, [r3, #8]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00e      	beq.n	800f574 <osThreadNew+0xa8>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	2b5b      	cmp	r3, #91	; 0x5b
 800f55c:	d90a      	bls.n	800f574 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f562:	2b00      	cmp	r3, #0
 800f564:	d006      	beq.n	800f574 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	695b      	ldr	r3, [r3, #20]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d002      	beq.n	800f574 <osThreadNew+0xa8>
        mem = 1;
 800f56e:	2301      	movs	r3, #1
 800f570:	61bb      	str	r3, [r7, #24]
 800f572:	e010      	b.n	800f596 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	689b      	ldr	r3, [r3, #8]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10c      	bne.n	800f596 <osThreadNew+0xca>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d108      	bne.n	800f596 <osThreadNew+0xca>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d104      	bne.n	800f596 <osThreadNew+0xca>
          mem = 0;
 800f58c:	2300      	movs	r3, #0
 800f58e:	61bb      	str	r3, [r7, #24]
 800f590:	e001      	b.n	800f596 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f592:	2300      	movs	r3, #0
 800f594:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d110      	bne.n	800f5be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f5a4:	9202      	str	r2, [sp, #8]
 800f5a6:	9301      	str	r3, [sp, #4]
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	6a3a      	ldr	r2, [r7, #32]
 800f5b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f001 f8e2 	bl	801077c <xTaskCreateStatic>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	613b      	str	r3, [r7, #16]
 800f5bc:	e013      	b.n	800f5e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f5be:	69bb      	ldr	r3, [r7, #24]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d110      	bne.n	800f5e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f5c4:	6a3b      	ldr	r3, [r7, #32]
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	f107 0310 	add.w	r3, r7, #16
 800f5cc:	9301      	str	r3, [sp, #4]
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	9300      	str	r3, [sp, #0]
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f001 f92d 	bl	8010836 <xTaskCreate>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d001      	beq.n	800f5e6 <osThreadNew+0x11a>
            hTask = NULL;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f5e6:	693b      	ldr	r3, [r7, #16]
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3728      	adds	r7, #40	; 0x28
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5f8:	f3ef 8305 	mrs	r3, IPSR
 800f5fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800f5fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f600:	2b00      	cmp	r3, #0
 800f602:	d003      	beq.n	800f60c <osDelay+0x1c>
    stat = osErrorISR;
 800f604:	f06f 0305 	mvn.w	r3, #5
 800f608:	60fb      	str	r3, [r7, #12]
 800f60a:	e007      	b.n	800f61c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f60c:	2300      	movs	r3, #0
 800f60e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d002      	beq.n	800f61c <osDelay+0x2c>
      vTaskDelay(ticks);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f001 fa52 	bl	8010ac0 <vTaskDelay>
    }
  }

  return (stat);
 800f61c:	68fb      	ldr	r3, [r7, #12]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3710      	adds	r7, #16
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}

0800f626 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800f626:	b580      	push	{r7, lr}
 800f628:	b086      	sub	sp, #24
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800f62e:	2300      	movs	r3, #0
 800f630:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f632:	f3ef 8305 	mrs	r3, IPSR
 800f636:	60fb      	str	r3, [r7, #12]
  return(result);
 800f638:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d12d      	bne.n	800f69a <osEventFlagsNew+0x74>
    mem = -1;
 800f63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f642:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d015      	beq.n	800f676 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d006      	beq.n	800f660 <osEventFlagsNew+0x3a>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	2b1f      	cmp	r3, #31
 800f658:	d902      	bls.n	800f660 <osEventFlagsNew+0x3a>
        mem = 1;
 800f65a:	2301      	movs	r3, #1
 800f65c:	613b      	str	r3, [r7, #16]
 800f65e:	e00c      	b.n	800f67a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d108      	bne.n	800f67a <osEventFlagsNew+0x54>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d104      	bne.n	800f67a <osEventFlagsNew+0x54>
          mem = 0;
 800f670:	2300      	movs	r3, #0
 800f672:	613b      	str	r3, [r7, #16]
 800f674:	e001      	b.n	800f67a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d106      	bne.n	800f68e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	4618      	mov	r0, r3
 800f686:	f000 f8eb 	bl	800f860 <xEventGroupCreateStatic>
 800f68a:	6178      	str	r0, [r7, #20]
 800f68c:	e005      	b.n	800f69a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d102      	bne.n	800f69a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800f694:	f000 f91b 	bl	800f8ce <xEventGroupCreate>
 800f698:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800f69a:	697b      	ldr	r3, [r7, #20]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3718      	adds	r7, #24
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b086      	sub	sp, #24
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d004      	beq.n	800f6c2 <osEventFlagsSet+0x1e>
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d003      	beq.n	800f6ca <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800f6c2:	f06f 0303 	mvn.w	r3, #3
 800f6c6:	617b      	str	r3, [r7, #20]
 800f6c8:	e028      	b.n	800f71c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6ca:	f3ef 8305 	mrs	r3, IPSR
 800f6ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d01d      	beq.n	800f712 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800f6da:	f107 0308 	add.w	r3, r7, #8
 800f6de:	461a      	mov	r2, r3
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6938      	ldr	r0, [r7, #16]
 800f6e4:	f000 fa96 	bl	800fc14 <xEventGroupSetBitsFromISR>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d103      	bne.n	800f6f6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800f6ee:	f06f 0302 	mvn.w	r3, #2
 800f6f2:	617b      	str	r3, [r7, #20]
 800f6f4:	e012      	b.n	800f71c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00d      	beq.n	800f71c <osEventFlagsSet+0x78>
 800f700:	4b09      	ldr	r3, [pc, #36]	; (800f728 <osEventFlagsSet+0x84>)
 800f702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	f3bf 8f6f 	isb	sy
 800f710:	e004      	b.n	800f71c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800f712:	6839      	ldr	r1, [r7, #0]
 800f714:	6938      	ldr	r0, [r7, #16]
 800f716:	f000 f9c3 	bl	800faa0 <xEventGroupSetBits>
 800f71a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800f71c:	697b      	ldr	r3, [r7, #20]
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3718      	adds	r7, #24
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	e000ed04 	.word	0xe000ed04

0800f72c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08c      	sub	sp, #48	; 0x30
 800f730:	af02      	add	r7, sp, #8
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
 800f738:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800f73e:	69bb      	ldr	r3, [r7, #24]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d004      	beq.n	800f74e <osEventFlagsWait+0x22>
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d003      	beq.n	800f756 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800f74e:	f06f 0303 	mvn.w	r3, #3
 800f752:	61fb      	str	r3, [r7, #28]
 800f754:	e04b      	b.n	800f7ee <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f756:	f3ef 8305 	mrs	r3, IPSR
 800f75a:	617b      	str	r3, [r7, #20]
  return(result);
 800f75c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d003      	beq.n	800f76a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800f762:	f06f 0305 	mvn.w	r3, #5
 800f766:	61fb      	str	r3, [r7, #28]
 800f768:	e041      	b.n	800f7ee <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f003 0301 	and.w	r3, r3, #1
 800f770:	2b00      	cmp	r3, #0
 800f772:	d002      	beq.n	800f77a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800f774:	2301      	movs	r3, #1
 800f776:	627b      	str	r3, [r7, #36]	; 0x24
 800f778:	e001      	b.n	800f77e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800f77a:	2300      	movs	r3, #0
 800f77c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f003 0302 	and.w	r3, r3, #2
 800f784:	2b00      	cmp	r3, #0
 800f786:	d002      	beq.n	800f78e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800f788:	2300      	movs	r3, #0
 800f78a:	623b      	str	r3, [r7, #32]
 800f78c:	e001      	b.n	800f792 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800f78e:	2301      	movs	r3, #1
 800f790:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	6a3a      	ldr	r2, [r7, #32]
 800f79a:	68b9      	ldr	r1, [r7, #8]
 800f79c:	69b8      	ldr	r0, [r7, #24]
 800f79e:	f000 f8b1 	bl	800f904 <xEventGroupWaitBits>
 800f7a2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f003 0301 	and.w	r3, r3, #1
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d010      	beq.n	800f7d0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800f7ae:	68ba      	ldr	r2, [r7, #8]
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	4013      	ands	r3, r2
 800f7b4:	68ba      	ldr	r2, [r7, #8]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d019      	beq.n	800f7ee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d003      	beq.n	800f7c8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800f7c0:	f06f 0301 	mvn.w	r3, #1
 800f7c4:	61fb      	str	r3, [r7, #28]
 800f7c6:	e012      	b.n	800f7ee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800f7c8:	f06f 0302 	mvn.w	r3, #2
 800f7cc:	61fb      	str	r3, [r7, #28]
 800f7ce:	e00e      	b.n	800f7ee <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d109      	bne.n	800f7ee <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d003      	beq.n	800f7e8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800f7e0:	f06f 0301 	mvn.w	r3, #1
 800f7e4:	61fb      	str	r3, [r7, #28]
 800f7e6:	e002      	b.n	800f7ee <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800f7e8:	f06f 0302 	mvn.w	r3, #2
 800f7ec:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800f7ee:	69fb      	ldr	r3, [r7, #28]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3728      	adds	r7, #40	; 0x28
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	4a07      	ldr	r2, [pc, #28]	; (800f824 <vApplicationGetIdleTaskMemory+0x2c>)
 800f808:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	4a06      	ldr	r2, [pc, #24]	; (800f828 <vApplicationGetIdleTaskMemory+0x30>)
 800f80e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2280      	movs	r2, #128	; 0x80
 800f814:	601a      	str	r2, [r3, #0]
}
 800f816:	bf00      	nop
 800f818:	3714      	adds	r7, #20
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	24000640 	.word	0x24000640
 800f828:	2400069c 	.word	0x2400069c

0800f82c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f82c:	b480      	push	{r7}
 800f82e:	b085      	sub	sp, #20
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	4a07      	ldr	r2, [pc, #28]	; (800f858 <vApplicationGetTimerTaskMemory+0x2c>)
 800f83c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	4a06      	ldr	r2, [pc, #24]	; (800f85c <vApplicationGetTimerTaskMemory+0x30>)
 800f842:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f84a:	601a      	str	r2, [r3, #0]
}
 800f84c:	bf00      	nop
 800f84e:	3714      	adds	r7, #20
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	2400089c 	.word	0x2400089c
 800f85c:	240008f8 	.word	0x240008f8

0800f860 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d10a      	bne.n	800f884 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f880:	bf00      	nop
 800f882:	e7fe      	b.n	800f882 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800f884:	2320      	movs	r3, #32
 800f886:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b20      	cmp	r3, #32
 800f88c:	d00a      	beq.n	800f8a4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800f88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	60fb      	str	r3, [r7, #12]
}
 800f8a0:	bf00      	nop
 800f8a2:	e7fe      	b.n	800f8a2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00a      	beq.n	800f8c4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	3304      	adds	r3, #4
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f000 f9bf 	bl	800fc3c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800f8c4:	697b      	ldr	r3, [r7, #20]
	}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3718      	adds	r7, #24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b082      	sub	sp, #8
 800f8d2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800f8d4:	2020      	movs	r0, #32
 800f8d6:	f002 fcbf 	bl	8012258 <pvPortMalloc>
 800f8da:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d00a      	beq.n	800f8f8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	3304      	adds	r3, #4
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f000 f9a5 	bl	800fc3c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800f8f8:	687b      	ldr	r3, [r7, #4]
	}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3708      	adds	r7, #8
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
	...

0800f904 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b090      	sub	sp, #64	; 0x40
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800f916:	2300      	movs	r3, #0
 800f918:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800f91a:	2300      	movs	r3, #0
 800f91c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d10a      	bne.n	800f93a <xEventGroupWaitBits+0x36>
	__asm volatile
 800f924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f928:	f383 8811 	msr	BASEPRI, r3
 800f92c:	f3bf 8f6f 	isb	sy
 800f930:	f3bf 8f4f 	dsb	sy
 800f934:	623b      	str	r3, [r7, #32]
}
 800f936:	bf00      	nop
 800f938:	e7fe      	b.n	800f938 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00a      	beq.n	800f95a <xEventGroupWaitBits+0x56>
	__asm volatile
 800f944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f948:	f383 8811 	msr	BASEPRI, r3
 800f94c:	f3bf 8f6f 	isb	sy
 800f950:	f3bf 8f4f 	dsb	sy
 800f954:	61fb      	str	r3, [r7, #28]
}
 800f956:	bf00      	nop
 800f958:	e7fe      	b.n	800f958 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10a      	bne.n	800f976 <xEventGroupWaitBits+0x72>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f964:	f383 8811 	msr	BASEPRI, r3
 800f968:	f3bf 8f6f 	isb	sy
 800f96c:	f3bf 8f4f 	dsb	sy
 800f970:	61bb      	str	r3, [r7, #24]
}
 800f972:	bf00      	nop
 800f974:	e7fe      	b.n	800f974 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f976:	f001 fdbd 	bl	80114f4 <xTaskGetSchedulerState>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d102      	bne.n	800f986 <xEventGroupWaitBits+0x82>
 800f980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f982:	2b00      	cmp	r3, #0
 800f984:	d101      	bne.n	800f98a <xEventGroupWaitBits+0x86>
 800f986:	2301      	movs	r3, #1
 800f988:	e000      	b.n	800f98c <xEventGroupWaitBits+0x88>
 800f98a:	2300      	movs	r3, #0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10a      	bne.n	800f9a6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	f383 8811 	msr	BASEPRI, r3
 800f998:	f3bf 8f6f 	isb	sy
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	617b      	str	r3, [r7, #20]
}
 800f9a2:	bf00      	nop
 800f9a4:	e7fe      	b.n	800f9a4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800f9a6:	f001 f925 	bl	8010bf4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800f9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800f9b0:	683a      	ldr	r2, [r7, #0]
 800f9b2:	68b9      	ldr	r1, [r7, #8]
 800f9b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9b6:	f000 f90b 	bl	800fbd0 <prvTestWaitCondition>
 800f9ba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800f9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00e      	beq.n	800f9e0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800f9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d028      	beq.n	800fa22 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	43db      	mvns	r3, r3
 800f9d8:	401a      	ands	r2, r3
 800f9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9dc:	601a      	str	r2, [r3, #0]
 800f9de:	e020      	b.n	800fa22 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800f9e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d104      	bne.n	800f9f0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800f9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	633b      	str	r3, [r7, #48]	; 0x30
 800f9ee:	e018      	b.n	800fa22 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d003      	beq.n	800f9fe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800f9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9fc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d003      	beq.n	800fa0c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fa0a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800fa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa0e:	1d18      	adds	r0, r3, #4
 800fa10:	68ba      	ldr	r2, [r7, #8]
 800fa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa14:	4313      	orrs	r3, r2
 800fa16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa18:	4619      	mov	r1, r3
 800fa1a:	f001 fae3 	bl	8010fe4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800fa22:	f001 f8f5 	bl	8010c10 <xTaskResumeAll>
 800fa26:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800fa28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d031      	beq.n	800fa92 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d107      	bne.n	800fa44 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800fa34:	4b19      	ldr	r3, [pc, #100]	; (800fa9c <xEventGroupWaitBits+0x198>)
 800fa36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa3a:	601a      	str	r2, [r3, #0]
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800fa44:	f001 fde2 	bl	801160c <uxTaskResetEventItemValue>
 800fa48:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800fa4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d11a      	bne.n	800fa8a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800fa54:	f002 fade 	bl	8012014 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800fa58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	68b9      	ldr	r1, [r7, #8]
 800fa62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fa64:	f000 f8b4 	bl	800fbd0 <prvTestWaitCondition>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d009      	beq.n	800fa82 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d006      	beq.n	800fa82 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800fa74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	43db      	mvns	r3, r3
 800fa7c:	401a      	ands	r2, r3
 800fa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa80:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800fa82:	2301      	movs	r3, #1
 800fa84:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800fa86:	f002 faf5 	bl	8012074 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800fa8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fa90:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800fa92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3740      	adds	r7, #64	; 0x40
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	e000ed04 	.word	0xe000ed04

0800faa0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b08e      	sub	sp, #56	; 0x38
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800faaa:	2300      	movs	r3, #0
 800faac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800fab2:	2300      	movs	r3, #0
 800fab4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d10a      	bne.n	800fad2 <xEventGroupSetBits+0x32>
	__asm volatile
 800fabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	613b      	str	r3, [r7, #16]
}
 800face:	bf00      	nop
 800fad0:	e7fe      	b.n	800fad0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00a      	beq.n	800faf2 <xEventGroupSetBits+0x52>
	__asm volatile
 800fadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae0:	f383 8811 	msr	BASEPRI, r3
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	f3bf 8f4f 	dsb	sy
 800faec:	60fb      	str	r3, [r7, #12]
}
 800faee:	bf00      	nop
 800faf0:	e7fe      	b.n	800faf0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800faf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf4:	3304      	adds	r3, #4
 800faf6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800faf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafa:	3308      	adds	r3, #8
 800fafc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800fafe:	f001 f879 	bl	8010bf4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800fb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800fb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	431a      	orrs	r2, r3
 800fb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb12:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800fb14:	e03c      	b.n	800fb90 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800fb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800fb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800fb22:	2300      	movs	r3, #0
 800fb24:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fb2c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb34:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d108      	bne.n	800fb52 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800fb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	69bb      	ldr	r3, [r7, #24]
 800fb46:	4013      	ands	r3, r2
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00b      	beq.n	800fb64 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb50:	e008      	b.n	800fb64 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb54:	681a      	ldr	r2, [r3, #0]
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	4013      	ands	r3, r2
 800fb5a:	69ba      	ldr	r2, [r7, #24]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d101      	bne.n	800fb64 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800fb60:	2301      	movs	r3, #1
 800fb62:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d010      	beq.n	800fb8c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d003      	beq.n	800fb7c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800fb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800fb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fb84:	4619      	mov	r1, r3
 800fb86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb88:	f001 faf8 	bl	801117c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800fb90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb92:	6a3b      	ldr	r3, [r7, #32]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d1be      	bne.n	800fb16 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9e:	43db      	mvns	r3, r3
 800fba0:	401a      	ands	r2, r3
 800fba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800fba6:	f001 f833 	bl	8010c10 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800fbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbac:	681b      	ldr	r3, [r3, #0]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3738      	adds	r7, #56	; 0x38
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b082      	sub	sp, #8
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800fbc0:	6839      	ldr	r1, [r7, #0]
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f7ff ff6c 	bl	800faa0 <xEventGroupSetBits>
}
 800fbc8:	bf00      	nop
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}

0800fbd0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b087      	sub	sp, #28
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d107      	bne.n	800fbf6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	4013      	ands	r3, r2
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d00a      	beq.n	800fc06 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	617b      	str	r3, [r7, #20]
 800fbf4:	e007      	b.n	800fc06 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	4013      	ands	r3, r2
 800fbfc:	68ba      	ldr	r2, [r7, #8]
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d101      	bne.n	800fc06 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800fc02:	2301      	movs	r3, #1
 800fc04:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800fc06:	697b      	ldr	r3, [r7, #20]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	371c      	adds	r7, #28
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	68f9      	ldr	r1, [r7, #12]
 800fc26:	4804      	ldr	r0, [pc, #16]	; (800fc38 <xEventGroupSetBitsFromISR+0x24>)
 800fc28:	f002 f8aa 	bl	8011d80 <xTimerPendFunctionCallFromISR>
 800fc2c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800fc2e:	697b      	ldr	r3, [r7, #20]
	}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3718      	adds	r7, #24
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	0800fbb7 	.word	0x0800fbb7

0800fc3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f103 0208 	add.w	r2, r3, #8
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f103 0208 	add.w	r2, r3, #8
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f103 0208 	add.w	r2, r3, #8
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fc8a:	bf00      	nop
 800fc8c:	370c      	adds	r7, #12
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr

0800fc96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc96:	b480      	push	{r7}
 800fc98:	b085      	sub	sp, #20
 800fc9a:	af00      	add	r7, sp, #0
 800fc9c:	6078      	str	r0, [r7, #4]
 800fc9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	689a      	ldr	r2, [r3, #8]
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	683a      	ldr	r2, [r7, #0]
 800fcba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	683a      	ldr	r2, [r7, #0]
 800fcc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	1c5a      	adds	r2, r3, #1
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	601a      	str	r2, [r3, #0]
}
 800fcd2:	bf00      	nop
 800fcd4:	3714      	adds	r7, #20
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr

0800fcde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcde:	b480      	push	{r7}
 800fce0:	b085      	sub	sp, #20
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcf4:	d103      	bne.n	800fcfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	691b      	ldr	r3, [r3, #16]
 800fcfa:	60fb      	str	r3, [r7, #12]
 800fcfc:	e00c      	b.n	800fd18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	3308      	adds	r3, #8
 800fd02:	60fb      	str	r3, [r7, #12]
 800fd04:	e002      	b.n	800fd0c <vListInsert+0x2e>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	68ba      	ldr	r2, [r7, #8]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d2f6      	bcs.n	800fd06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	685a      	ldr	r2, [r3, #4]
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	683a      	ldr	r2, [r7, #0]
 800fd26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	68fa      	ldr	r2, [r7, #12]
 800fd2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	683a      	ldr	r2, [r7, #0]
 800fd32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	1c5a      	adds	r2, r3, #1
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	601a      	str	r2, [r3, #0]
}
 800fd44:	bf00      	nop
 800fd46:	3714      	adds	r7, #20
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	691b      	ldr	r3, [r3, #16]
 800fd5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	6892      	ldr	r2, [r2, #8]
 800fd66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	689b      	ldr	r3, [r3, #8]
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	6852      	ldr	r2, [r2, #4]
 800fd70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d103      	bne.n	800fd84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	689a      	ldr	r2, [r3, #8]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	1e5a      	subs	r2, r3, #1
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d10a      	bne.n	800fdce <xQueueGenericReset+0x2a>
	__asm volatile
 800fdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdbc:	f383 8811 	msr	BASEPRI, r3
 800fdc0:	f3bf 8f6f 	isb	sy
 800fdc4:	f3bf 8f4f 	dsb	sy
 800fdc8:	60bb      	str	r3, [r7, #8]
}
 800fdca:	bf00      	nop
 800fdcc:	e7fe      	b.n	800fdcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fdce:	f002 f921 	bl	8012014 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdda:	68f9      	ldr	r1, [r7, #12]
 800fddc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fdde:	fb01 f303 	mul.w	r3, r1, r3
 800fde2:	441a      	add	r2, r3
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2200      	movs	r2, #0
 800fdec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	68f9      	ldr	r1, [r7, #12]
 800fe02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe04:	fb01 f303 	mul.w	r3, r1, r3
 800fe08:	441a      	add	r2, r3
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	22ff      	movs	r2, #255	; 0xff
 800fe12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	22ff      	movs	r2, #255	; 0xff
 800fe1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d114      	bne.n	800fe4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d01a      	beq.n	800fe62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	3310      	adds	r3, #16
 800fe30:	4618      	mov	r0, r3
 800fe32:	f001 f93f 	bl	80110b4 <xTaskRemoveFromEventList>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d012      	beq.n	800fe62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe3c:	4b0c      	ldr	r3, [pc, #48]	; (800fe70 <xQueueGenericReset+0xcc>)
 800fe3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	f3bf 8f4f 	dsb	sy
 800fe48:	f3bf 8f6f 	isb	sy
 800fe4c:	e009      	b.n	800fe62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	3310      	adds	r3, #16
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7ff fef2 	bl	800fc3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	3324      	adds	r3, #36	; 0x24
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7ff feed 	bl	800fc3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe62:	f002 f907 	bl	8012074 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe66:	2301      	movs	r3, #1
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3710      	adds	r7, #16
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	e000ed04 	.word	0xe000ed04

0800fe74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b08e      	sub	sp, #56	; 0x38
 800fe78:	af02      	add	r7, sp, #8
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]
 800fe80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10a      	bne.n	800fe9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fe88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8c:	f383 8811 	msr	BASEPRI, r3
 800fe90:	f3bf 8f6f 	isb	sy
 800fe94:	f3bf 8f4f 	dsb	sy
 800fe98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fe9a:	bf00      	nop
 800fe9c:	e7fe      	b.n	800fe9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d10a      	bne.n	800feba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea8:	f383 8811 	msr	BASEPRI, r3
 800feac:	f3bf 8f6f 	isb	sy
 800feb0:	f3bf 8f4f 	dsb	sy
 800feb4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800feb6:	bf00      	nop
 800feb8:	e7fe      	b.n	800feb8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d002      	beq.n	800fec6 <xQueueGenericCreateStatic+0x52>
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d001      	beq.n	800feca <xQueueGenericCreateStatic+0x56>
 800fec6:	2301      	movs	r3, #1
 800fec8:	e000      	b.n	800fecc <xQueueGenericCreateStatic+0x58>
 800feca:	2300      	movs	r3, #0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d10a      	bne.n	800fee6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed4:	f383 8811 	msr	BASEPRI, r3
 800fed8:	f3bf 8f6f 	isb	sy
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	623b      	str	r3, [r7, #32]
}
 800fee2:	bf00      	nop
 800fee4:	e7fe      	b.n	800fee4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d102      	bne.n	800fef2 <xQueueGenericCreateStatic+0x7e>
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d101      	bne.n	800fef6 <xQueueGenericCreateStatic+0x82>
 800fef2:	2301      	movs	r3, #1
 800fef4:	e000      	b.n	800fef8 <xQueueGenericCreateStatic+0x84>
 800fef6:	2300      	movs	r3, #0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d10a      	bne.n	800ff12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff00:	f383 8811 	msr	BASEPRI, r3
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	61fb      	str	r3, [r7, #28]
}
 800ff0e:	bf00      	nop
 800ff10:	e7fe      	b.n	800ff10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ff12:	2350      	movs	r3, #80	; 0x50
 800ff14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	2b50      	cmp	r3, #80	; 0x50
 800ff1a:	d00a      	beq.n	800ff32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ff1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	61bb      	str	r3, [r7, #24]
}
 800ff2e:	bf00      	nop
 800ff30:	e7fe      	b.n	800ff30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00d      	beq.n	800ff5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff40:	2201      	movs	r2, #1
 800ff42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4c:	9300      	str	r3, [sp, #0]
 800ff4e:	4613      	mov	r3, r2
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	68b9      	ldr	r1, [r7, #8]
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f000 f805 	bl	800ff64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3730      	adds	r7, #48	; 0x30
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}

0800ff64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	607a      	str	r2, [r7, #4]
 800ff70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d103      	bne.n	800ff80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	69ba      	ldr	r2, [r7, #24]
 800ff7c:	601a      	str	r2, [r3, #0]
 800ff7e:	e002      	b.n	800ff86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ff80:	69bb      	ldr	r3, [r7, #24]
 800ff82:	687a      	ldr	r2, [r7, #4]
 800ff84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	68fa      	ldr	r2, [r7, #12]
 800ff8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	68ba      	ldr	r2, [r7, #8]
 800ff90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ff92:	2101      	movs	r1, #1
 800ff94:	69b8      	ldr	r0, [r7, #24]
 800ff96:	f7ff ff05 	bl	800fda4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	78fa      	ldrb	r2, [r7, #3]
 800ff9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ffa2:	bf00      	nop
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
	...

0800ffac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b08e      	sub	sp, #56	; 0x38
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
 800ffb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d10a      	bne.n	800ffde <xQueueGenericSend+0x32>
	__asm volatile
 800ffc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffcc:	f383 8811 	msr	BASEPRI, r3
 800ffd0:	f3bf 8f6f 	isb	sy
 800ffd4:	f3bf 8f4f 	dsb	sy
 800ffd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ffda:	bf00      	nop
 800ffdc:	e7fe      	b.n	800ffdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d103      	bne.n	800ffec <xQueueGenericSend+0x40>
 800ffe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d101      	bne.n	800fff0 <xQueueGenericSend+0x44>
 800ffec:	2301      	movs	r3, #1
 800ffee:	e000      	b.n	800fff2 <xQueueGenericSend+0x46>
 800fff0:	2300      	movs	r3, #0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d10a      	bne.n	801000c <xQueueGenericSend+0x60>
	__asm volatile
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	f383 8811 	msr	BASEPRI, r3
 800fffe:	f3bf 8f6f 	isb	sy
 8010002:	f3bf 8f4f 	dsb	sy
 8010006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010008:	bf00      	nop
 801000a:	e7fe      	b.n	801000a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	2b02      	cmp	r3, #2
 8010010:	d103      	bne.n	801001a <xQueueGenericSend+0x6e>
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010016:	2b01      	cmp	r3, #1
 8010018:	d101      	bne.n	801001e <xQueueGenericSend+0x72>
 801001a:	2301      	movs	r3, #1
 801001c:	e000      	b.n	8010020 <xQueueGenericSend+0x74>
 801001e:	2300      	movs	r3, #0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10a      	bne.n	801003a <xQueueGenericSend+0x8e>
	__asm volatile
 8010024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010028:	f383 8811 	msr	BASEPRI, r3
 801002c:	f3bf 8f6f 	isb	sy
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	623b      	str	r3, [r7, #32]
}
 8010036:	bf00      	nop
 8010038:	e7fe      	b.n	8010038 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801003a:	f001 fa5b 	bl	80114f4 <xTaskGetSchedulerState>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d102      	bne.n	801004a <xQueueGenericSend+0x9e>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d101      	bne.n	801004e <xQueueGenericSend+0xa2>
 801004a:	2301      	movs	r3, #1
 801004c:	e000      	b.n	8010050 <xQueueGenericSend+0xa4>
 801004e:	2300      	movs	r3, #0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d10a      	bne.n	801006a <xQueueGenericSend+0xbe>
	__asm volatile
 8010054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010058:	f383 8811 	msr	BASEPRI, r3
 801005c:	f3bf 8f6f 	isb	sy
 8010060:	f3bf 8f4f 	dsb	sy
 8010064:	61fb      	str	r3, [r7, #28]
}
 8010066:	bf00      	nop
 8010068:	e7fe      	b.n	8010068 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801006a:	f001 ffd3 	bl	8012014 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801006e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010076:	429a      	cmp	r2, r3
 8010078:	d302      	bcc.n	8010080 <xQueueGenericSend+0xd4>
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	2b02      	cmp	r3, #2
 801007e:	d129      	bne.n	80100d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010080:	683a      	ldr	r2, [r7, #0]
 8010082:	68b9      	ldr	r1, [r7, #8]
 8010084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010086:	f000 fa0b 	bl	80104a0 <prvCopyDataToQueue>
 801008a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801008c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010090:	2b00      	cmp	r3, #0
 8010092:	d010      	beq.n	80100b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010096:	3324      	adds	r3, #36	; 0x24
 8010098:	4618      	mov	r0, r3
 801009a:	f001 f80b 	bl	80110b4 <xTaskRemoveFromEventList>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d013      	beq.n	80100cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80100a4:	4b3f      	ldr	r3, [pc, #252]	; (80101a4 <xQueueGenericSend+0x1f8>)
 80100a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100aa:	601a      	str	r2, [r3, #0]
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	f3bf 8f6f 	isb	sy
 80100b4:	e00a      	b.n	80100cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80100b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d007      	beq.n	80100cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80100bc:	4b39      	ldr	r3, [pc, #228]	; (80101a4 <xQueueGenericSend+0x1f8>)
 80100be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c2:	601a      	str	r2, [r3, #0]
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80100cc:	f001 ffd2 	bl	8012074 <vPortExitCritical>
				return pdPASS;
 80100d0:	2301      	movs	r3, #1
 80100d2:	e063      	b.n	801019c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d103      	bne.n	80100e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80100da:	f001 ffcb 	bl	8012074 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	e05c      	b.n	801019c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d106      	bne.n	80100f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80100e8:	f107 0314 	add.w	r3, r7, #20
 80100ec:	4618      	mov	r0, r3
 80100ee:	f001 f8a7 	bl	8011240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80100f2:	2301      	movs	r3, #1
 80100f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80100f6:	f001 ffbd 	bl	8012074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80100fa:	f000 fd7b 	bl	8010bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100fe:	f001 ff89 	bl	8012014 <vPortEnterCritical>
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010108:	b25b      	sxtb	r3, r3
 801010a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801010e:	d103      	bne.n	8010118 <xQueueGenericSend+0x16c>
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801011e:	b25b      	sxtb	r3, r3
 8010120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010124:	d103      	bne.n	801012e <xQueueGenericSend+0x182>
 8010126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010128:	2200      	movs	r2, #0
 801012a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801012e:	f001 ffa1 	bl	8012074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010132:	1d3a      	adds	r2, r7, #4
 8010134:	f107 0314 	add.w	r3, r7, #20
 8010138:	4611      	mov	r1, r2
 801013a:	4618      	mov	r0, r3
 801013c:	f001 f896 	bl	801126c <xTaskCheckForTimeOut>
 8010140:	4603      	mov	r3, r0
 8010142:	2b00      	cmp	r3, #0
 8010144:	d124      	bne.n	8010190 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010148:	f000 faa2 	bl	8010690 <prvIsQueueFull>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d018      	beq.n	8010184 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	3310      	adds	r3, #16
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	4611      	mov	r1, r2
 801015a:	4618      	mov	r0, r3
 801015c:	f000 ff1e 	bl	8010f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010162:	f000 fa2d 	bl	80105c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010166:	f000 fd53 	bl	8010c10 <xTaskResumeAll>
 801016a:	4603      	mov	r3, r0
 801016c:	2b00      	cmp	r3, #0
 801016e:	f47f af7c 	bne.w	801006a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010172:	4b0c      	ldr	r3, [pc, #48]	; (80101a4 <xQueueGenericSend+0x1f8>)
 8010174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010178:	601a      	str	r2, [r3, #0]
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	e772      	b.n	801006a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010186:	f000 fa1b 	bl	80105c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801018a:	f000 fd41 	bl	8010c10 <xTaskResumeAll>
 801018e:	e76c      	b.n	801006a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010192:	f000 fa15 	bl	80105c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010196:	f000 fd3b 	bl	8010c10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801019a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801019c:	4618      	mov	r0, r3
 801019e:	3738      	adds	r7, #56	; 0x38
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	e000ed04 	.word	0xe000ed04

080101a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b090      	sub	sp, #64	; 0x40
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	607a      	str	r2, [r7, #4]
 80101b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80101ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d10a      	bne.n	80101d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80101c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c4:	f383 8811 	msr	BASEPRI, r3
 80101c8:	f3bf 8f6f 	isb	sy
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80101d2:	bf00      	nop
 80101d4:	e7fe      	b.n	80101d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d103      	bne.n	80101e4 <xQueueGenericSendFromISR+0x3c>
 80101dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d101      	bne.n	80101e8 <xQueueGenericSendFromISR+0x40>
 80101e4:	2301      	movs	r3, #1
 80101e6:	e000      	b.n	80101ea <xQueueGenericSendFromISR+0x42>
 80101e8:	2300      	movs	r3, #0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d10a      	bne.n	8010204 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80101ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f2:	f383 8811 	msr	BASEPRI, r3
 80101f6:	f3bf 8f6f 	isb	sy
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010200:	bf00      	nop
 8010202:	e7fe      	b.n	8010202 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	2b02      	cmp	r3, #2
 8010208:	d103      	bne.n	8010212 <xQueueGenericSendFromISR+0x6a>
 801020a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801020e:	2b01      	cmp	r3, #1
 8010210:	d101      	bne.n	8010216 <xQueueGenericSendFromISR+0x6e>
 8010212:	2301      	movs	r3, #1
 8010214:	e000      	b.n	8010218 <xQueueGenericSendFromISR+0x70>
 8010216:	2300      	movs	r3, #0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d10a      	bne.n	8010232 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801021c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010220:	f383 8811 	msr	BASEPRI, r3
 8010224:	f3bf 8f6f 	isb	sy
 8010228:	f3bf 8f4f 	dsb	sy
 801022c:	623b      	str	r3, [r7, #32]
}
 801022e:	bf00      	nop
 8010230:	e7fe      	b.n	8010230 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010232:	f001 ffd1 	bl	80121d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010236:	f3ef 8211 	mrs	r2, BASEPRI
 801023a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801023e:	f383 8811 	msr	BASEPRI, r3
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	61fa      	str	r2, [r7, #28]
 801024c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801024e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010250:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801025a:	429a      	cmp	r2, r3
 801025c:	d302      	bcc.n	8010264 <xQueueGenericSendFromISR+0xbc>
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	2b02      	cmp	r3, #2
 8010262:	d12f      	bne.n	80102c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801026a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801026e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010272:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010274:	683a      	ldr	r2, [r7, #0]
 8010276:	68b9      	ldr	r1, [r7, #8]
 8010278:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801027a:	f000 f911 	bl	80104a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801027e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010286:	d112      	bne.n	80102ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028c:	2b00      	cmp	r3, #0
 801028e:	d016      	beq.n	80102be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010292:	3324      	adds	r3, #36	; 0x24
 8010294:	4618      	mov	r0, r3
 8010296:	f000 ff0d 	bl	80110b4 <xTaskRemoveFromEventList>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00e      	beq.n	80102be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00b      	beq.n	80102be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2201      	movs	r2, #1
 80102aa:	601a      	str	r2, [r3, #0]
 80102ac:	e007      	b.n	80102be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80102b2:	3301      	adds	r3, #1
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	b25a      	sxtb	r2, r3
 80102b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80102be:	2301      	movs	r3, #1
 80102c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80102c2:	e001      	b.n	80102c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80102d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80102d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3740      	adds	r7, #64	; 0x40
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
	...

080102e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b08c      	sub	sp, #48	; 0x30
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80102ec:	2300      	movs	r3, #0
 80102ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80102f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10a      	bne.n	8010310 <xQueueReceive+0x30>
	__asm volatile
 80102fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fe:	f383 8811 	msr	BASEPRI, r3
 8010302:	f3bf 8f6f 	isb	sy
 8010306:	f3bf 8f4f 	dsb	sy
 801030a:	623b      	str	r3, [r7, #32]
}
 801030c:	bf00      	nop
 801030e:	e7fe      	b.n	801030e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d103      	bne.n	801031e <xQueueReceive+0x3e>
 8010316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801031a:	2b00      	cmp	r3, #0
 801031c:	d101      	bne.n	8010322 <xQueueReceive+0x42>
 801031e:	2301      	movs	r3, #1
 8010320:	e000      	b.n	8010324 <xQueueReceive+0x44>
 8010322:	2300      	movs	r3, #0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d10a      	bne.n	801033e <xQueueReceive+0x5e>
	__asm volatile
 8010328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032c:	f383 8811 	msr	BASEPRI, r3
 8010330:	f3bf 8f6f 	isb	sy
 8010334:	f3bf 8f4f 	dsb	sy
 8010338:	61fb      	str	r3, [r7, #28]
}
 801033a:	bf00      	nop
 801033c:	e7fe      	b.n	801033c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801033e:	f001 f8d9 	bl	80114f4 <xTaskGetSchedulerState>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d102      	bne.n	801034e <xQueueReceive+0x6e>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d101      	bne.n	8010352 <xQueueReceive+0x72>
 801034e:	2301      	movs	r3, #1
 8010350:	e000      	b.n	8010354 <xQueueReceive+0x74>
 8010352:	2300      	movs	r3, #0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d10a      	bne.n	801036e <xQueueReceive+0x8e>
	__asm volatile
 8010358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035c:	f383 8811 	msr	BASEPRI, r3
 8010360:	f3bf 8f6f 	isb	sy
 8010364:	f3bf 8f4f 	dsb	sy
 8010368:	61bb      	str	r3, [r7, #24]
}
 801036a:	bf00      	nop
 801036c:	e7fe      	b.n	801036c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801036e:	f001 fe51 	bl	8012014 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010376:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037a:	2b00      	cmp	r3, #0
 801037c:	d01f      	beq.n	80103be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801037e:	68b9      	ldr	r1, [r7, #8]
 8010380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010382:	f000 f8f7 	bl	8010574 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	1e5a      	subs	r2, r3, #1
 801038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801038e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010390:	691b      	ldr	r3, [r3, #16]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00f      	beq.n	80103b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010398:	3310      	adds	r3, #16
 801039a:	4618      	mov	r0, r3
 801039c:	f000 fe8a 	bl	80110b4 <xTaskRemoveFromEventList>
 80103a0:	4603      	mov	r3, r0
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d007      	beq.n	80103b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80103a6:	4b3d      	ldr	r3, [pc, #244]	; (801049c <xQueueReceive+0x1bc>)
 80103a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ac:	601a      	str	r2, [r3, #0]
 80103ae:	f3bf 8f4f 	dsb	sy
 80103b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80103b6:	f001 fe5d 	bl	8012074 <vPortExitCritical>
				return pdPASS;
 80103ba:	2301      	movs	r3, #1
 80103bc:	e069      	b.n	8010492 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d103      	bne.n	80103cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80103c4:	f001 fe56 	bl	8012074 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80103c8:	2300      	movs	r3, #0
 80103ca:	e062      	b.n	8010492 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80103cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d106      	bne.n	80103e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103d2:	f107 0310 	add.w	r3, r7, #16
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 ff32 	bl	8011240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103dc:	2301      	movs	r3, #1
 80103de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80103e0:	f001 fe48 	bl	8012074 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80103e4:	f000 fc06 	bl	8010bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103e8:	f001 fe14 	bl	8012014 <vPortEnterCritical>
 80103ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103f2:	b25b      	sxtb	r3, r3
 80103f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103f8:	d103      	bne.n	8010402 <xQueueReceive+0x122>
 80103fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103fc:	2200      	movs	r2, #0
 80103fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010408:	b25b      	sxtb	r3, r3
 801040a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801040e:	d103      	bne.n	8010418 <xQueueReceive+0x138>
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	2200      	movs	r2, #0
 8010414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010418:	f001 fe2c 	bl	8012074 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801041c:	1d3a      	adds	r2, r7, #4
 801041e:	f107 0310 	add.w	r3, r7, #16
 8010422:	4611      	mov	r1, r2
 8010424:	4618      	mov	r0, r3
 8010426:	f000 ff21 	bl	801126c <xTaskCheckForTimeOut>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d123      	bne.n	8010478 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010432:	f000 f917 	bl	8010664 <prvIsQueueEmpty>
 8010436:	4603      	mov	r3, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	d017      	beq.n	801046c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801043c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043e:	3324      	adds	r3, #36	; 0x24
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	4611      	mov	r1, r2
 8010444:	4618      	mov	r0, r3
 8010446:	f000 fda9 	bl	8010f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801044a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801044c:	f000 f8b8 	bl	80105c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010450:	f000 fbde 	bl	8010c10 <xTaskResumeAll>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d189      	bne.n	801036e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801045a:	4b10      	ldr	r3, [pc, #64]	; (801049c <xQueueReceive+0x1bc>)
 801045c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	f3bf 8f6f 	isb	sy
 801046a:	e780      	b.n	801036e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801046c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801046e:	f000 f8a7 	bl	80105c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010472:	f000 fbcd 	bl	8010c10 <xTaskResumeAll>
 8010476:	e77a      	b.n	801036e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801047a:	f000 f8a1 	bl	80105c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801047e:	f000 fbc7 	bl	8010c10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010484:	f000 f8ee 	bl	8010664 <prvIsQueueEmpty>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	f43f af6f 	beq.w	801036e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010492:	4618      	mov	r0, r3
 8010494:	3730      	adds	r7, #48	; 0x30
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	e000ed04 	.word	0xe000ed04

080104a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b086      	sub	sp, #24
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80104ac:	2300      	movs	r3, #0
 80104ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10d      	bne.n	80104da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d14d      	bne.n	8010562 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	689b      	ldr	r3, [r3, #8]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f001 f830 	bl	8011530 <xTaskPriorityDisinherit>
 80104d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2200      	movs	r2, #0
 80104d6:	609a      	str	r2, [r3, #8]
 80104d8:	e043      	b.n	8010562 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d119      	bne.n	8010514 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	6858      	ldr	r0, [r3, #4]
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104e8:	461a      	mov	r2, r3
 80104ea:	68b9      	ldr	r1, [r7, #8]
 80104ec:	f002 f8c8 	bl	8012680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	685a      	ldr	r2, [r3, #4]
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104f8:	441a      	add	r2, r3
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	685a      	ldr	r2, [r3, #4]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	689b      	ldr	r3, [r3, #8]
 8010506:	429a      	cmp	r2, r3
 8010508:	d32b      	bcc.n	8010562 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	605a      	str	r2, [r3, #4]
 8010512:	e026      	b.n	8010562 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	68d8      	ldr	r0, [r3, #12]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801051c:	461a      	mov	r2, r3
 801051e:	68b9      	ldr	r1, [r7, #8]
 8010520:	f002 f8ae 	bl	8012680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	68da      	ldr	r2, [r3, #12]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801052c:	425b      	negs	r3, r3
 801052e:	441a      	add	r2, r3
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	68da      	ldr	r2, [r3, #12]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	429a      	cmp	r2, r3
 801053e:	d207      	bcs.n	8010550 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	689a      	ldr	r2, [r3, #8]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010548:	425b      	negs	r3, r3
 801054a:	441a      	add	r2, r3
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2b02      	cmp	r3, #2
 8010554:	d105      	bne.n	8010562 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d002      	beq.n	8010562 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	3b01      	subs	r3, #1
 8010560:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	1c5a      	adds	r2, r3, #1
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801056a:	697b      	ldr	r3, [r7, #20]
}
 801056c:	4618      	mov	r0, r3
 801056e:	3718      	adds	r7, #24
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010582:	2b00      	cmp	r3, #0
 8010584:	d018      	beq.n	80105b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	68da      	ldr	r2, [r3, #12]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801058e:	441a      	add	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	68da      	ldr	r2, [r3, #12]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	429a      	cmp	r2, r3
 801059e:	d303      	bcc.n	80105a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	68d9      	ldr	r1, [r3, #12]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b0:	461a      	mov	r2, r3
 80105b2:	6838      	ldr	r0, [r7, #0]
 80105b4:	f002 f864 	bl	8012680 <memcpy>
	}
}
 80105b8:	bf00      	nop
 80105ba:	3708      	adds	r7, #8
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80105c8:	f001 fd24 	bl	8012014 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105d4:	e011      	b.n	80105fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d012      	beq.n	8010604 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	3324      	adds	r3, #36	; 0x24
 80105e2:	4618      	mov	r0, r3
 80105e4:	f000 fd66 	bl	80110b4 <xTaskRemoveFromEventList>
 80105e8:	4603      	mov	r3, r0
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d001      	beq.n	80105f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80105ee:	f000 fe9f 	bl	8011330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80105f2:	7bfb      	ldrb	r3, [r7, #15]
 80105f4:	3b01      	subs	r3, #1
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	dce9      	bgt.n	80105d6 <prvUnlockQueue+0x16>
 8010602:	e000      	b.n	8010606 <prvUnlockQueue+0x46>
					break;
 8010604:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	22ff      	movs	r2, #255	; 0xff
 801060a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801060e:	f001 fd31 	bl	8012074 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010612:	f001 fcff 	bl	8012014 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801061c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801061e:	e011      	b.n	8010644 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	691b      	ldr	r3, [r3, #16]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d012      	beq.n	801064e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	3310      	adds	r3, #16
 801062c:	4618      	mov	r0, r3
 801062e:	f000 fd41 	bl	80110b4 <xTaskRemoveFromEventList>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010638:	f000 fe7a 	bl	8011330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801063c:	7bbb      	ldrb	r3, [r7, #14]
 801063e:	3b01      	subs	r3, #1
 8010640:	b2db      	uxtb	r3, r3
 8010642:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010648:	2b00      	cmp	r3, #0
 801064a:	dce9      	bgt.n	8010620 <prvUnlockQueue+0x60>
 801064c:	e000      	b.n	8010650 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801064e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	22ff      	movs	r2, #255	; 0xff
 8010654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010658:	f001 fd0c 	bl	8012074 <vPortExitCritical>
}
 801065c:	bf00      	nop
 801065e:	3710      	adds	r7, #16
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b084      	sub	sp, #16
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801066c:	f001 fcd2 	bl	8012014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010674:	2b00      	cmp	r3, #0
 8010676:	d102      	bne.n	801067e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010678:	2301      	movs	r3, #1
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	e001      	b.n	8010682 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801067e:	2300      	movs	r3, #0
 8010680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010682:	f001 fcf7 	bl	8012074 <vPortExitCritical>

	return xReturn;
 8010686:	68fb      	ldr	r3, [r7, #12]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3710      	adds	r7, #16
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010698:	f001 fcbc 	bl	8012014 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d102      	bne.n	80106ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80106a8:	2301      	movs	r3, #1
 80106aa:	60fb      	str	r3, [r7, #12]
 80106ac:	e001      	b.n	80106b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80106ae:	2300      	movs	r3, #0
 80106b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80106b2:	f001 fcdf 	bl	8012074 <vPortExitCritical>

	return xReturn;
 80106b6:	68fb      	ldr	r3, [r7, #12]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3710      	adds	r7, #16
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80106c0:	b480      	push	{r7}
 80106c2:	b085      	sub	sp, #20
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106ca:	2300      	movs	r3, #0
 80106cc:	60fb      	str	r3, [r7, #12]
 80106ce:	e014      	b.n	80106fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80106d0:	4a0f      	ldr	r2, [pc, #60]	; (8010710 <vQueueAddToRegistry+0x50>)
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10b      	bne.n	80106f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80106dc:	490c      	ldr	r1, [pc, #48]	; (8010710 <vQueueAddToRegistry+0x50>)
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	683a      	ldr	r2, [r7, #0]
 80106e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80106e6:	4a0a      	ldr	r2, [pc, #40]	; (8010710 <vQueueAddToRegistry+0x50>)
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	4413      	add	r3, r2
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80106f2:	e006      	b.n	8010702 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3301      	adds	r3, #1
 80106f8:	60fb      	str	r3, [r7, #12]
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2b07      	cmp	r3, #7
 80106fe:	d9e7      	bls.n	80106d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010700:	bf00      	nop
 8010702:	bf00      	nop
 8010704:	3714      	adds	r7, #20
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	24000cf8 	.word	0x24000cf8

08010714 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010714:	b580      	push	{r7, lr}
 8010716:	b086      	sub	sp, #24
 8010718:	af00      	add	r7, sp, #0
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010724:	f001 fc76 	bl	8012014 <vPortEnterCritical>
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801072e:	b25b      	sxtb	r3, r3
 8010730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010734:	d103      	bne.n	801073e <vQueueWaitForMessageRestricted+0x2a>
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	2200      	movs	r2, #0
 801073a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010744:	b25b      	sxtb	r3, r3
 8010746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801074a:	d103      	bne.n	8010754 <vQueueWaitForMessageRestricted+0x40>
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	2200      	movs	r2, #0
 8010750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010754:	f001 fc8e 	bl	8012074 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801075c:	2b00      	cmp	r3, #0
 801075e:	d106      	bne.n	801076e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	3324      	adds	r3, #36	; 0x24
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	68b9      	ldr	r1, [r7, #8]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 fc77 	bl	801105c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801076e:	6978      	ldr	r0, [r7, #20]
 8010770:	f7ff ff26 	bl	80105c0 <prvUnlockQueue>
	}
 8010774:	bf00      	nop
 8010776:	3718      	adds	r7, #24
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801077c:	b580      	push	{r7, lr}
 801077e:	b08e      	sub	sp, #56	; 0x38
 8010780:	af04      	add	r7, sp, #16
 8010782:	60f8      	str	r0, [r7, #12]
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
 8010788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801078c:	2b00      	cmp	r3, #0
 801078e:	d10a      	bne.n	80107a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010794:	f383 8811 	msr	BASEPRI, r3
 8010798:	f3bf 8f6f 	isb	sy
 801079c:	f3bf 8f4f 	dsb	sy
 80107a0:	623b      	str	r3, [r7, #32]
}
 80107a2:	bf00      	nop
 80107a4:	e7fe      	b.n	80107a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80107a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d10a      	bne.n	80107c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80107ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b0:	f383 8811 	msr	BASEPRI, r3
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	f3bf 8f4f 	dsb	sy
 80107bc:	61fb      	str	r3, [r7, #28]
}
 80107be:	bf00      	nop
 80107c0:	e7fe      	b.n	80107c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80107c2:	235c      	movs	r3, #92	; 0x5c
 80107c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	2b5c      	cmp	r3, #92	; 0x5c
 80107ca:	d00a      	beq.n	80107e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80107cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d0:	f383 8811 	msr	BASEPRI, r3
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	f3bf 8f4f 	dsb	sy
 80107dc:	61bb      	str	r3, [r7, #24]
}
 80107de:	bf00      	nop
 80107e0:	e7fe      	b.n	80107e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80107e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80107e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d01e      	beq.n	8010828 <xTaskCreateStatic+0xac>
 80107ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d01b      	beq.n	8010828 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80107fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fc:	2202      	movs	r2, #2
 80107fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010802:	2300      	movs	r3, #0
 8010804:	9303      	str	r3, [sp, #12]
 8010806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010808:	9302      	str	r3, [sp, #8]
 801080a:	f107 0314 	add.w	r3, r7, #20
 801080e:	9301      	str	r3, [sp, #4]
 8010810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010812:	9300      	str	r3, [sp, #0]
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	68b9      	ldr	r1, [r7, #8]
 801081a:	68f8      	ldr	r0, [r7, #12]
 801081c:	f000 f850 	bl	80108c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010822:	f000 f8dd 	bl	80109e0 <prvAddNewTaskToReadyList>
 8010826:	e001      	b.n	801082c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010828:	2300      	movs	r3, #0
 801082a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801082c:	697b      	ldr	r3, [r7, #20]
	}
 801082e:	4618      	mov	r0, r3
 8010830:	3728      	adds	r7, #40	; 0x28
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}

08010836 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010836:	b580      	push	{r7, lr}
 8010838:	b08c      	sub	sp, #48	; 0x30
 801083a:	af04      	add	r7, sp, #16
 801083c:	60f8      	str	r0, [r7, #12]
 801083e:	60b9      	str	r1, [r7, #8]
 8010840:	603b      	str	r3, [r7, #0]
 8010842:	4613      	mov	r3, r2
 8010844:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010846:	88fb      	ldrh	r3, [r7, #6]
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	4618      	mov	r0, r3
 801084c:	f001 fd04 	bl	8012258 <pvPortMalloc>
 8010850:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00e      	beq.n	8010876 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010858:	205c      	movs	r0, #92	; 0x5c
 801085a:	f001 fcfd 	bl	8012258 <pvPortMalloc>
 801085e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010860:	69fb      	ldr	r3, [r7, #28]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d003      	beq.n	801086e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	631a      	str	r2, [r3, #48]	; 0x30
 801086c:	e005      	b.n	801087a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801086e:	6978      	ldr	r0, [r7, #20]
 8010870:	f001 fdbe 	bl	80123f0 <vPortFree>
 8010874:	e001      	b.n	801087a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010876:	2300      	movs	r3, #0
 8010878:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801087a:	69fb      	ldr	r3, [r7, #28]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d017      	beq.n	80108b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	2200      	movs	r2, #0
 8010884:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010888:	88fa      	ldrh	r2, [r7, #6]
 801088a:	2300      	movs	r3, #0
 801088c:	9303      	str	r3, [sp, #12]
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	9302      	str	r3, [sp, #8]
 8010892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010894:	9301      	str	r3, [sp, #4]
 8010896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	68b9      	ldr	r1, [r7, #8]
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	f000 f80e 	bl	80108c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80108a4:	69f8      	ldr	r0, [r7, #28]
 80108a6:	f000 f89b 	bl	80109e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80108aa:	2301      	movs	r3, #1
 80108ac:	61bb      	str	r3, [r7, #24]
 80108ae:	e002      	b.n	80108b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80108b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80108b6:	69bb      	ldr	r3, [r7, #24]
	}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3720      	adds	r7, #32
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80108ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	461a      	mov	r2, r3
 80108d8:	21a5      	movs	r1, #165	; 0xa5
 80108da:	f001 fedf 	bl	801269c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108e2:	6879      	ldr	r1, [r7, #4]
 80108e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80108e8:	440b      	add	r3, r1
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	4413      	add	r3, r2
 80108ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	f023 0307 	bic.w	r3, r3, #7
 80108f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	f003 0307 	and.w	r3, r3, #7
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00a      	beq.n	8010918 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010906:	f383 8811 	msr	BASEPRI, r3
 801090a:	f3bf 8f6f 	isb	sy
 801090e:	f3bf 8f4f 	dsb	sy
 8010912:	617b      	str	r3, [r7, #20]
}
 8010914:	bf00      	nop
 8010916:	e7fe      	b.n	8010916 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d01f      	beq.n	801095e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801091e:	2300      	movs	r3, #0
 8010920:	61fb      	str	r3, [r7, #28]
 8010922:	e012      	b.n	801094a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010924:	68ba      	ldr	r2, [r7, #8]
 8010926:	69fb      	ldr	r3, [r7, #28]
 8010928:	4413      	add	r3, r2
 801092a:	7819      	ldrb	r1, [r3, #0]
 801092c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801092e:	69fb      	ldr	r3, [r7, #28]
 8010930:	4413      	add	r3, r2
 8010932:	3334      	adds	r3, #52	; 0x34
 8010934:	460a      	mov	r2, r1
 8010936:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010938:	68ba      	ldr	r2, [r7, #8]
 801093a:	69fb      	ldr	r3, [r7, #28]
 801093c:	4413      	add	r3, r2
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d006      	beq.n	8010952 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	3301      	adds	r3, #1
 8010948:	61fb      	str	r3, [r7, #28]
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	2b0f      	cmp	r3, #15
 801094e:	d9e9      	bls.n	8010924 <prvInitialiseNewTask+0x64>
 8010950:	e000      	b.n	8010954 <prvInitialiseNewTask+0x94>
			{
				break;
 8010952:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010956:	2200      	movs	r2, #0
 8010958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801095c:	e003      	b.n	8010966 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	2200      	movs	r2, #0
 8010962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010968:	2b37      	cmp	r3, #55	; 0x37
 801096a:	d901      	bls.n	8010970 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801096c:	2337      	movs	r3, #55	; 0x37
 801096e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010974:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801097a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097e:	2200      	movs	r2, #0
 8010980:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	3304      	adds	r3, #4
 8010986:	4618      	mov	r0, r3
 8010988:	f7ff f978 	bl	800fc7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801098c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098e:	3318      	adds	r3, #24
 8010990:	4618      	mov	r0, r3
 8010992:	f7ff f973 	bl	800fc7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801099a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80109a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80109a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80109ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ae:	2200      	movs	r2, #0
 80109b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80109b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80109ba:	683a      	ldr	r2, [r7, #0]
 80109bc:	68f9      	ldr	r1, [r7, #12]
 80109be:	69b8      	ldr	r0, [r7, #24]
 80109c0:	f001 f9fe 	bl	8011dc0 <pxPortInitialiseStack>
 80109c4:	4602      	mov	r2, r0
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80109ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d002      	beq.n	80109d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80109d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109d6:	bf00      	nop
 80109d8:	3720      	adds	r7, #32
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
	...

080109e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80109e8:	f001 fb14 	bl	8012014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80109ec:	4b2d      	ldr	r3, [pc, #180]	; (8010aa4 <prvAddNewTaskToReadyList+0xc4>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	3301      	adds	r3, #1
 80109f2:	4a2c      	ldr	r2, [pc, #176]	; (8010aa4 <prvAddNewTaskToReadyList+0xc4>)
 80109f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80109f6:	4b2c      	ldr	r3, [pc, #176]	; (8010aa8 <prvAddNewTaskToReadyList+0xc8>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d109      	bne.n	8010a12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80109fe:	4a2a      	ldr	r2, [pc, #168]	; (8010aa8 <prvAddNewTaskToReadyList+0xc8>)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010a04:	4b27      	ldr	r3, [pc, #156]	; (8010aa4 <prvAddNewTaskToReadyList+0xc4>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d110      	bne.n	8010a2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010a0c:	f000 fcb4 	bl	8011378 <prvInitialiseTaskLists>
 8010a10:	e00d      	b.n	8010a2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010a12:	4b26      	ldr	r3, [pc, #152]	; (8010aac <prvAddNewTaskToReadyList+0xcc>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d109      	bne.n	8010a2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010a1a:	4b23      	ldr	r3, [pc, #140]	; (8010aa8 <prvAddNewTaskToReadyList+0xc8>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d802      	bhi.n	8010a2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010a28:	4a1f      	ldr	r2, [pc, #124]	; (8010aa8 <prvAddNewTaskToReadyList+0xc8>)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010a2e:	4b20      	ldr	r3, [pc, #128]	; (8010ab0 <prvAddNewTaskToReadyList+0xd0>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	3301      	adds	r3, #1
 8010a34:	4a1e      	ldr	r2, [pc, #120]	; (8010ab0 <prvAddNewTaskToReadyList+0xd0>)
 8010a36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010a38:	4b1d      	ldr	r3, [pc, #116]	; (8010ab0 <prvAddNewTaskToReadyList+0xd0>)
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a44:	4b1b      	ldr	r3, [pc, #108]	; (8010ab4 <prvAddNewTaskToReadyList+0xd4>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d903      	bls.n	8010a54 <prvAddNewTaskToReadyList+0x74>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a50:	4a18      	ldr	r2, [pc, #96]	; (8010ab4 <prvAddNewTaskToReadyList+0xd4>)
 8010a52:	6013      	str	r3, [r2, #0]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a58:	4613      	mov	r3, r2
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	4413      	add	r3, r2
 8010a5e:	009b      	lsls	r3, r3, #2
 8010a60:	4a15      	ldr	r2, [pc, #84]	; (8010ab8 <prvAddNewTaskToReadyList+0xd8>)
 8010a62:	441a      	add	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	3304      	adds	r3, #4
 8010a68:	4619      	mov	r1, r3
 8010a6a:	4610      	mov	r0, r2
 8010a6c:	f7ff f913 	bl	800fc96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010a70:	f001 fb00 	bl	8012074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010a74:	4b0d      	ldr	r3, [pc, #52]	; (8010aac <prvAddNewTaskToReadyList+0xcc>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d00e      	beq.n	8010a9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010a7c:	4b0a      	ldr	r3, [pc, #40]	; (8010aa8 <prvAddNewTaskToReadyList+0xc8>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d207      	bcs.n	8010a9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010a8a:	4b0c      	ldr	r3, [pc, #48]	; (8010abc <prvAddNewTaskToReadyList+0xdc>)
 8010a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a90:	601a      	str	r2, [r3, #0]
 8010a92:	f3bf 8f4f 	dsb	sy
 8010a96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a9a:	bf00      	nop
 8010a9c:	3708      	adds	r7, #8
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	2400120c 	.word	0x2400120c
 8010aa8:	24000d38 	.word	0x24000d38
 8010aac:	24001218 	.word	0x24001218
 8010ab0:	24001228 	.word	0x24001228
 8010ab4:	24001214 	.word	0x24001214
 8010ab8:	24000d3c 	.word	0x24000d3c
 8010abc:	e000ed04 	.word	0xe000ed04

08010ac0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b084      	sub	sp, #16
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d017      	beq.n	8010b02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010ad2:	4b13      	ldr	r3, [pc, #76]	; (8010b20 <vTaskDelay+0x60>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d00a      	beq.n	8010af0 <vTaskDelay+0x30>
	__asm volatile
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	60bb      	str	r3, [r7, #8]
}
 8010aec:	bf00      	nop
 8010aee:	e7fe      	b.n	8010aee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010af0:	f000 f880 	bl	8010bf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010af4:	2100      	movs	r1, #0
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fda0 	bl	801163c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010afc:	f000 f888 	bl	8010c10 <xTaskResumeAll>
 8010b00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d107      	bne.n	8010b18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010b08:	4b06      	ldr	r3, [pc, #24]	; (8010b24 <vTaskDelay+0x64>)
 8010b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b0e:	601a      	str	r2, [r3, #0]
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b18:	bf00      	nop
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	24001234 	.word	0x24001234
 8010b24:	e000ed04 	.word	0xe000ed04

08010b28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b08a      	sub	sp, #40	; 0x28
 8010b2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010b32:	2300      	movs	r3, #0
 8010b34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010b36:	463a      	mov	r2, r7
 8010b38:	1d39      	adds	r1, r7, #4
 8010b3a:	f107 0308 	add.w	r3, r7, #8
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fe fe5a 	bl	800f7f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010b44:	6839      	ldr	r1, [r7, #0]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	68ba      	ldr	r2, [r7, #8]
 8010b4a:	9202      	str	r2, [sp, #8]
 8010b4c:	9301      	str	r3, [sp, #4]
 8010b4e:	2300      	movs	r3, #0
 8010b50:	9300      	str	r3, [sp, #0]
 8010b52:	2300      	movs	r3, #0
 8010b54:	460a      	mov	r2, r1
 8010b56:	4921      	ldr	r1, [pc, #132]	; (8010bdc <vTaskStartScheduler+0xb4>)
 8010b58:	4821      	ldr	r0, [pc, #132]	; (8010be0 <vTaskStartScheduler+0xb8>)
 8010b5a:	f7ff fe0f 	bl	801077c <xTaskCreateStatic>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	4a20      	ldr	r2, [pc, #128]	; (8010be4 <vTaskStartScheduler+0xbc>)
 8010b62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010b64:	4b1f      	ldr	r3, [pc, #124]	; (8010be4 <vTaskStartScheduler+0xbc>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d002      	beq.n	8010b72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	617b      	str	r3, [r7, #20]
 8010b70:	e001      	b.n	8010b76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010b72:	2300      	movs	r3, #0
 8010b74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	d102      	bne.n	8010b82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010b7c:	f000 fdb2 	bl	80116e4 <xTimerCreateTimerTask>
 8010b80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d116      	bne.n	8010bb6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8010b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b8c:	f383 8811 	msr	BASEPRI, r3
 8010b90:	f3bf 8f6f 	isb	sy
 8010b94:	f3bf 8f4f 	dsb	sy
 8010b98:	613b      	str	r3, [r7, #16]
}
 8010b9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010b9c:	4b12      	ldr	r3, [pc, #72]	; (8010be8 <vTaskStartScheduler+0xc0>)
 8010b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ba2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010ba4:	4b11      	ldr	r3, [pc, #68]	; (8010bec <vTaskStartScheduler+0xc4>)
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010baa:	4b11      	ldr	r3, [pc, #68]	; (8010bf0 <vTaskStartScheduler+0xc8>)
 8010bac:	2200      	movs	r2, #0
 8010bae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010bb0:	f001 f98e 	bl	8011ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010bb4:	e00e      	b.n	8010bd4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bbc:	d10a      	bne.n	8010bd4 <vTaskStartScheduler+0xac>
	__asm volatile
 8010bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc2:	f383 8811 	msr	BASEPRI, r3
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	f3bf 8f4f 	dsb	sy
 8010bce:	60fb      	str	r3, [r7, #12]
}
 8010bd0:	bf00      	nop
 8010bd2:	e7fe      	b.n	8010bd2 <vTaskStartScheduler+0xaa>
}
 8010bd4:	bf00      	nop
 8010bd6:	3718      	adds	r7, #24
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	080132a4 	.word	0x080132a4
 8010be0:	08011349 	.word	0x08011349
 8010be4:	24001230 	.word	0x24001230
 8010be8:	2400122c 	.word	0x2400122c
 8010bec:	24001218 	.word	0x24001218
 8010bf0:	24001210 	.word	0x24001210

08010bf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010bf8:	4b04      	ldr	r3, [pc, #16]	; (8010c0c <vTaskSuspendAll+0x18>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	4a03      	ldr	r2, [pc, #12]	; (8010c0c <vTaskSuspendAll+0x18>)
 8010c00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010c02:	bf00      	nop
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr
 8010c0c:	24001234 	.word	0x24001234

08010c10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010c1e:	4b42      	ldr	r3, [pc, #264]	; (8010d28 <xTaskResumeAll+0x118>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d10a      	bne.n	8010c3c <xTaskResumeAll+0x2c>
	__asm volatile
 8010c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2a:	f383 8811 	msr	BASEPRI, r3
 8010c2e:	f3bf 8f6f 	isb	sy
 8010c32:	f3bf 8f4f 	dsb	sy
 8010c36:	603b      	str	r3, [r7, #0]
}
 8010c38:	bf00      	nop
 8010c3a:	e7fe      	b.n	8010c3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010c3c:	f001 f9ea 	bl	8012014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010c40:	4b39      	ldr	r3, [pc, #228]	; (8010d28 <xTaskResumeAll+0x118>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3b01      	subs	r3, #1
 8010c46:	4a38      	ldr	r2, [pc, #224]	; (8010d28 <xTaskResumeAll+0x118>)
 8010c48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c4a:	4b37      	ldr	r3, [pc, #220]	; (8010d28 <xTaskResumeAll+0x118>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d162      	bne.n	8010d18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010c52:	4b36      	ldr	r3, [pc, #216]	; (8010d2c <xTaskResumeAll+0x11c>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d05e      	beq.n	8010d18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c5a:	e02f      	b.n	8010cbc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c5c:	4b34      	ldr	r3, [pc, #208]	; (8010d30 <xTaskResumeAll+0x120>)
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	3318      	adds	r3, #24
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7ff f871 	bl	800fd50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	3304      	adds	r3, #4
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ff f86c 	bl	800fd50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c7c:	4b2d      	ldr	r3, [pc, #180]	; (8010d34 <xTaskResumeAll+0x124>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d903      	bls.n	8010c8c <xTaskResumeAll+0x7c>
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c88:	4a2a      	ldr	r2, [pc, #168]	; (8010d34 <xTaskResumeAll+0x124>)
 8010c8a:	6013      	str	r3, [r2, #0]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c90:	4613      	mov	r3, r2
 8010c92:	009b      	lsls	r3, r3, #2
 8010c94:	4413      	add	r3, r2
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	4a27      	ldr	r2, [pc, #156]	; (8010d38 <xTaskResumeAll+0x128>)
 8010c9a:	441a      	add	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	f7fe fff7 	bl	800fc96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cac:	4b23      	ldr	r3, [pc, #140]	; (8010d3c <xTaskResumeAll+0x12c>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d302      	bcc.n	8010cbc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010cb6:	4b22      	ldr	r3, [pc, #136]	; (8010d40 <xTaskResumeAll+0x130>)
 8010cb8:	2201      	movs	r2, #1
 8010cba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cbc:	4b1c      	ldr	r3, [pc, #112]	; (8010d30 <xTaskResumeAll+0x120>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d1cb      	bne.n	8010c5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d001      	beq.n	8010cce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010cca:	f000 fbf3 	bl	80114b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010cce:	4b1d      	ldr	r3, [pc, #116]	; (8010d44 <xTaskResumeAll+0x134>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d010      	beq.n	8010cfc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010cda:	f000 f847 	bl	8010d6c <xTaskIncrementTick>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010ce4:	4b16      	ldr	r3, [pc, #88]	; (8010d40 <xTaskResumeAll+0x130>)
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	3b01      	subs	r3, #1
 8010cee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1f1      	bne.n	8010cda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010cf6:	4b13      	ldr	r3, [pc, #76]	; (8010d44 <xTaskResumeAll+0x134>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010cfc:	4b10      	ldr	r3, [pc, #64]	; (8010d40 <xTaskResumeAll+0x130>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d009      	beq.n	8010d18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d04:	2301      	movs	r3, #1
 8010d06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d08:	4b0f      	ldr	r3, [pc, #60]	; (8010d48 <xTaskResumeAll+0x138>)
 8010d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d0e:	601a      	str	r2, [r3, #0]
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d18:	f001 f9ac 	bl	8012074 <vPortExitCritical>

	return xAlreadyYielded;
 8010d1c:	68bb      	ldr	r3, [r7, #8]
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3710      	adds	r7, #16
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	24001234 	.word	0x24001234
 8010d2c:	2400120c 	.word	0x2400120c
 8010d30:	240011cc 	.word	0x240011cc
 8010d34:	24001214 	.word	0x24001214
 8010d38:	24000d3c 	.word	0x24000d3c
 8010d3c:	24000d38 	.word	0x24000d38
 8010d40:	24001220 	.word	0x24001220
 8010d44:	2400121c 	.word	0x2400121c
 8010d48:	e000ed04 	.word	0xe000ed04

08010d4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010d52:	4b05      	ldr	r3, [pc, #20]	; (8010d68 <xTaskGetTickCount+0x1c>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010d58:	687b      	ldr	r3, [r7, #4]
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	370c      	adds	r7, #12
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	24001210 	.word	0x24001210

08010d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010d72:	2300      	movs	r3, #0
 8010d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d76:	4b4f      	ldr	r3, [pc, #316]	; (8010eb4 <xTaskIncrementTick+0x148>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f040 808f 	bne.w	8010e9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d80:	4b4d      	ldr	r3, [pc, #308]	; (8010eb8 <xTaskIncrementTick+0x14c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	3301      	adds	r3, #1
 8010d86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d88:	4a4b      	ldr	r2, [pc, #300]	; (8010eb8 <xTaskIncrementTick+0x14c>)
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d120      	bne.n	8010dd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d94:	4b49      	ldr	r3, [pc, #292]	; (8010ebc <xTaskIncrementTick+0x150>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00a      	beq.n	8010db4 <xTaskIncrementTick+0x48>
	__asm volatile
 8010d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	603b      	str	r3, [r7, #0]
}
 8010db0:	bf00      	nop
 8010db2:	e7fe      	b.n	8010db2 <xTaskIncrementTick+0x46>
 8010db4:	4b41      	ldr	r3, [pc, #260]	; (8010ebc <xTaskIncrementTick+0x150>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	60fb      	str	r3, [r7, #12]
 8010dba:	4b41      	ldr	r3, [pc, #260]	; (8010ec0 <xTaskIncrementTick+0x154>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4a3f      	ldr	r2, [pc, #252]	; (8010ebc <xTaskIncrementTick+0x150>)
 8010dc0:	6013      	str	r3, [r2, #0]
 8010dc2:	4a3f      	ldr	r2, [pc, #252]	; (8010ec0 <xTaskIncrementTick+0x154>)
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	6013      	str	r3, [r2, #0]
 8010dc8:	4b3e      	ldr	r3, [pc, #248]	; (8010ec4 <xTaskIncrementTick+0x158>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	4a3d      	ldr	r2, [pc, #244]	; (8010ec4 <xTaskIncrementTick+0x158>)
 8010dd0:	6013      	str	r3, [r2, #0]
 8010dd2:	f000 fb6f 	bl	80114b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010dd6:	4b3c      	ldr	r3, [pc, #240]	; (8010ec8 <xTaskIncrementTick+0x15c>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	693a      	ldr	r2, [r7, #16]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d349      	bcc.n	8010e74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010de0:	4b36      	ldr	r3, [pc, #216]	; (8010ebc <xTaskIncrementTick+0x150>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d104      	bne.n	8010df4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dea:	4b37      	ldr	r3, [pc, #220]	; (8010ec8 <xTaskIncrementTick+0x15c>)
 8010dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010df0:	601a      	str	r2, [r3, #0]
					break;
 8010df2:	e03f      	b.n	8010e74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010df4:	4b31      	ldr	r3, [pc, #196]	; (8010ebc <xTaskIncrementTick+0x150>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	685b      	ldr	r3, [r3, #4]
 8010e02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e04:	693a      	ldr	r2, [r7, #16]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d203      	bcs.n	8010e14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e0c:	4a2e      	ldr	r2, [pc, #184]	; (8010ec8 <xTaskIncrementTick+0x15c>)
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e12:	e02f      	b.n	8010e74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	3304      	adds	r3, #4
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe ff99 	bl	800fd50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d004      	beq.n	8010e30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	3318      	adds	r3, #24
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe ff90 	bl	800fd50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e34:	4b25      	ldr	r3, [pc, #148]	; (8010ecc <xTaskIncrementTick+0x160>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d903      	bls.n	8010e44 <xTaskIncrementTick+0xd8>
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e40:	4a22      	ldr	r2, [pc, #136]	; (8010ecc <xTaskIncrementTick+0x160>)
 8010e42:	6013      	str	r3, [r2, #0]
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e48:	4613      	mov	r3, r2
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	4413      	add	r3, r2
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	4a1f      	ldr	r2, [pc, #124]	; (8010ed0 <xTaskIncrementTick+0x164>)
 8010e52:	441a      	add	r2, r3
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	3304      	adds	r3, #4
 8010e58:	4619      	mov	r1, r3
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	f7fe ff1b 	bl	800fc96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e64:	4b1b      	ldr	r3, [pc, #108]	; (8010ed4 <xTaskIncrementTick+0x168>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d3b8      	bcc.n	8010de0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010e6e:	2301      	movs	r3, #1
 8010e70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e72:	e7b5      	b.n	8010de0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e74:	4b17      	ldr	r3, [pc, #92]	; (8010ed4 <xTaskIncrementTick+0x168>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e7a:	4915      	ldr	r1, [pc, #84]	; (8010ed0 <xTaskIncrementTick+0x164>)
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	4413      	add	r3, r2
 8010e82:	009b      	lsls	r3, r3, #2
 8010e84:	440b      	add	r3, r1
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d901      	bls.n	8010e90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010e90:	4b11      	ldr	r3, [pc, #68]	; (8010ed8 <xTaskIncrementTick+0x16c>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d007      	beq.n	8010ea8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	617b      	str	r3, [r7, #20]
 8010e9c:	e004      	b.n	8010ea8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010e9e:	4b0f      	ldr	r3, [pc, #60]	; (8010edc <xTaskIncrementTick+0x170>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	4a0d      	ldr	r2, [pc, #52]	; (8010edc <xTaskIncrementTick+0x170>)
 8010ea6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010ea8:	697b      	ldr	r3, [r7, #20]
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3718      	adds	r7, #24
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	24001234 	.word	0x24001234
 8010eb8:	24001210 	.word	0x24001210
 8010ebc:	240011c4 	.word	0x240011c4
 8010ec0:	240011c8 	.word	0x240011c8
 8010ec4:	24001224 	.word	0x24001224
 8010ec8:	2400122c 	.word	0x2400122c
 8010ecc:	24001214 	.word	0x24001214
 8010ed0:	24000d3c 	.word	0x24000d3c
 8010ed4:	24000d38 	.word	0x24000d38
 8010ed8:	24001220 	.word	0x24001220
 8010edc:	2400121c 	.word	0x2400121c

08010ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b085      	sub	sp, #20
 8010ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ee6:	4b28      	ldr	r3, [pc, #160]	; (8010f88 <vTaskSwitchContext+0xa8>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d003      	beq.n	8010ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010eee:	4b27      	ldr	r3, [pc, #156]	; (8010f8c <vTaskSwitchContext+0xac>)
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010ef4:	e041      	b.n	8010f7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8010ef6:	4b25      	ldr	r3, [pc, #148]	; (8010f8c <vTaskSwitchContext+0xac>)
 8010ef8:	2200      	movs	r2, #0
 8010efa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010efc:	4b24      	ldr	r3, [pc, #144]	; (8010f90 <vTaskSwitchContext+0xb0>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	60fb      	str	r3, [r7, #12]
 8010f02:	e010      	b.n	8010f26 <vTaskSwitchContext+0x46>
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d10a      	bne.n	8010f20 <vTaskSwitchContext+0x40>
	__asm volatile
 8010f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0e:	f383 8811 	msr	BASEPRI, r3
 8010f12:	f3bf 8f6f 	isb	sy
 8010f16:	f3bf 8f4f 	dsb	sy
 8010f1a:	607b      	str	r3, [r7, #4]
}
 8010f1c:	bf00      	nop
 8010f1e:	e7fe      	b.n	8010f1e <vTaskSwitchContext+0x3e>
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	3b01      	subs	r3, #1
 8010f24:	60fb      	str	r3, [r7, #12]
 8010f26:	491b      	ldr	r1, [pc, #108]	; (8010f94 <vTaskSwitchContext+0xb4>)
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	4413      	add	r3, r2
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	440b      	add	r3, r1
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d0e4      	beq.n	8010f04 <vTaskSwitchContext+0x24>
 8010f3a:	68fa      	ldr	r2, [r7, #12]
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	4a13      	ldr	r2, [pc, #76]	; (8010f94 <vTaskSwitchContext+0xb4>)
 8010f46:	4413      	add	r3, r2
 8010f48:	60bb      	str	r3, [r7, #8]
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	605a      	str	r2, [r3, #4]
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	685a      	ldr	r2, [r3, #4]
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	3308      	adds	r3, #8
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d104      	bne.n	8010f6a <vTaskSwitchContext+0x8a>
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	685a      	ldr	r2, [r3, #4]
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	605a      	str	r2, [r3, #4]
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	4a09      	ldr	r2, [pc, #36]	; (8010f98 <vTaskSwitchContext+0xb8>)
 8010f72:	6013      	str	r3, [r2, #0]
 8010f74:	4a06      	ldr	r2, [pc, #24]	; (8010f90 <vTaskSwitchContext+0xb0>)
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	6013      	str	r3, [r2, #0]
}
 8010f7a:	bf00      	nop
 8010f7c:	3714      	adds	r7, #20
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr
 8010f86:	bf00      	nop
 8010f88:	24001234 	.word	0x24001234
 8010f8c:	24001220 	.word	0x24001220
 8010f90:	24001214 	.word	0x24001214
 8010f94:	24000d3c 	.word	0x24000d3c
 8010f98:	24000d38 	.word	0x24000d38

08010f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d10a      	bne.n	8010fc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb0:	f383 8811 	msr	BASEPRI, r3
 8010fb4:	f3bf 8f6f 	isb	sy
 8010fb8:	f3bf 8f4f 	dsb	sy
 8010fbc:	60fb      	str	r3, [r7, #12]
}
 8010fbe:	bf00      	nop
 8010fc0:	e7fe      	b.n	8010fc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010fc2:	4b07      	ldr	r3, [pc, #28]	; (8010fe0 <vTaskPlaceOnEventList+0x44>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	3318      	adds	r3, #24
 8010fc8:	4619      	mov	r1, r3
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f7fe fe87 	bl	800fcde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010fd0:	2101      	movs	r1, #1
 8010fd2:	6838      	ldr	r0, [r7, #0]
 8010fd4:	f000 fb32 	bl	801163c <prvAddCurrentTaskToDelayedList>
}
 8010fd8:	bf00      	nop
 8010fda:	3710      	adds	r7, #16
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	24000d38 	.word	0x24000d38

08010fe4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b086      	sub	sp, #24
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d10a      	bne.n	801100c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8010ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffa:	f383 8811 	msr	BASEPRI, r3
 8010ffe:	f3bf 8f6f 	isb	sy
 8011002:	f3bf 8f4f 	dsb	sy
 8011006:	617b      	str	r3, [r7, #20]
}
 8011008:	bf00      	nop
 801100a:	e7fe      	b.n	801100a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801100c:	4b11      	ldr	r3, [pc, #68]	; (8011054 <vTaskPlaceOnUnorderedEventList+0x70>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d10a      	bne.n	801102a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011018:	f383 8811 	msr	BASEPRI, r3
 801101c:	f3bf 8f6f 	isb	sy
 8011020:	f3bf 8f4f 	dsb	sy
 8011024:	613b      	str	r3, [r7, #16]
}
 8011026:	bf00      	nop
 8011028:	e7fe      	b.n	8011028 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801102a:	4b0b      	ldr	r3, [pc, #44]	; (8011058 <vTaskPlaceOnUnorderedEventList+0x74>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	68ba      	ldr	r2, [r7, #8]
 8011030:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011034:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011036:	4b08      	ldr	r3, [pc, #32]	; (8011058 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	3318      	adds	r3, #24
 801103c:	4619      	mov	r1, r3
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f7fe fe29 	bl	800fc96 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011044:	2101      	movs	r1, #1
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 faf8 	bl	801163c <prvAddCurrentTaskToDelayedList>
}
 801104c:	bf00      	nop
 801104e:	3718      	adds	r7, #24
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	24001234 	.word	0x24001234
 8011058:	24000d38 	.word	0x24000d38

0801105c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801105c:	b580      	push	{r7, lr}
 801105e:	b086      	sub	sp, #24
 8011060:	af00      	add	r7, sp, #0
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d10a      	bne.n	8011084 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011072:	f383 8811 	msr	BASEPRI, r3
 8011076:	f3bf 8f6f 	isb	sy
 801107a:	f3bf 8f4f 	dsb	sy
 801107e:	617b      	str	r3, [r7, #20]
}
 8011080:	bf00      	nop
 8011082:	e7fe      	b.n	8011082 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011084:	4b0a      	ldr	r3, [pc, #40]	; (80110b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	3318      	adds	r3, #24
 801108a:	4619      	mov	r1, r3
 801108c:	68f8      	ldr	r0, [r7, #12]
 801108e:	f7fe fe02 	bl	800fc96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d002      	beq.n	801109e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801109c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801109e:	6879      	ldr	r1, [r7, #4]
 80110a0:	68b8      	ldr	r0, [r7, #8]
 80110a2:	f000 facb 	bl	801163c <prvAddCurrentTaskToDelayedList>
	}
 80110a6:	bf00      	nop
 80110a8:	3718      	adds	r7, #24
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	24000d38 	.word	0x24000d38

080110b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b086      	sub	sp, #24
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d10a      	bne.n	80110e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80110ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ce:	f383 8811 	msr	BASEPRI, r3
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	f3bf 8f4f 	dsb	sy
 80110da:	60fb      	str	r3, [r7, #12]
}
 80110dc:	bf00      	nop
 80110de:	e7fe      	b.n	80110de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	3318      	adds	r3, #24
 80110e4:	4618      	mov	r0, r3
 80110e6:	f7fe fe33 	bl	800fd50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110ea:	4b1e      	ldr	r3, [pc, #120]	; (8011164 <xTaskRemoveFromEventList+0xb0>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d11d      	bne.n	801112e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	3304      	adds	r3, #4
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fe fe2a 	bl	800fd50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011100:	4b19      	ldr	r3, [pc, #100]	; (8011168 <xTaskRemoveFromEventList+0xb4>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	429a      	cmp	r2, r3
 8011106:	d903      	bls.n	8011110 <xTaskRemoveFromEventList+0x5c>
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110c:	4a16      	ldr	r2, [pc, #88]	; (8011168 <xTaskRemoveFromEventList+0xb4>)
 801110e:	6013      	str	r3, [r2, #0]
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011114:	4613      	mov	r3, r2
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	4413      	add	r3, r2
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	4a13      	ldr	r2, [pc, #76]	; (801116c <xTaskRemoveFromEventList+0xb8>)
 801111e:	441a      	add	r2, r3
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	3304      	adds	r3, #4
 8011124:	4619      	mov	r1, r3
 8011126:	4610      	mov	r0, r2
 8011128:	f7fe fdb5 	bl	800fc96 <vListInsertEnd>
 801112c:	e005      	b.n	801113a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	3318      	adds	r3, #24
 8011132:	4619      	mov	r1, r3
 8011134:	480e      	ldr	r0, [pc, #56]	; (8011170 <xTaskRemoveFromEventList+0xbc>)
 8011136:	f7fe fdae 	bl	800fc96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801113e:	4b0d      	ldr	r3, [pc, #52]	; (8011174 <xTaskRemoveFromEventList+0xc0>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011144:	429a      	cmp	r2, r3
 8011146:	d905      	bls.n	8011154 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011148:	2301      	movs	r3, #1
 801114a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801114c:	4b0a      	ldr	r3, [pc, #40]	; (8011178 <xTaskRemoveFromEventList+0xc4>)
 801114e:	2201      	movs	r2, #1
 8011150:	601a      	str	r2, [r3, #0]
 8011152:	e001      	b.n	8011158 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011154:	2300      	movs	r3, #0
 8011156:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011158:	697b      	ldr	r3, [r7, #20]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3718      	adds	r7, #24
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	24001234 	.word	0x24001234
 8011168:	24001214 	.word	0x24001214
 801116c:	24000d3c 	.word	0x24000d3c
 8011170:	240011cc 	.word	0x240011cc
 8011174:	24000d38 	.word	0x24000d38
 8011178:	24001220 	.word	0x24001220

0801117c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011186:	4b29      	ldr	r3, [pc, #164]	; (801122c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d10a      	bne.n	80111a4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801118e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011192:	f383 8811 	msr	BASEPRI, r3
 8011196:	f3bf 8f6f 	isb	sy
 801119a:	f3bf 8f4f 	dsb	sy
 801119e:	613b      	str	r3, [r7, #16]
}
 80111a0:	bf00      	nop
 80111a2:	e7fe      	b.n	80111a2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10a      	bne.n	80111d0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80111ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111be:	f383 8811 	msr	BASEPRI, r3
 80111c2:	f3bf 8f6f 	isb	sy
 80111c6:	f3bf 8f4f 	dsb	sy
 80111ca:	60fb      	str	r3, [r7, #12]
}
 80111cc:	bf00      	nop
 80111ce:	e7fe      	b.n	80111ce <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f7fe fdbd 	bl	800fd50 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	3304      	adds	r3, #4
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fe fdb8 	bl	800fd50 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e4:	4b12      	ldr	r3, [pc, #72]	; (8011230 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d903      	bls.n	80111f4 <vTaskRemoveFromUnorderedEventList+0x78>
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f0:	4a0f      	ldr	r2, [pc, #60]	; (8011230 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80111f2:	6013      	str	r3, [r2, #0]
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111f8:	4613      	mov	r3, r2
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	4413      	add	r3, r2
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4a0c      	ldr	r2, [pc, #48]	; (8011234 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011202:	441a      	add	r2, r3
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	3304      	adds	r3, #4
 8011208:	4619      	mov	r1, r3
 801120a:	4610      	mov	r0, r2
 801120c:	f7fe fd43 	bl	800fc96 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011214:	4b08      	ldr	r3, [pc, #32]	; (8011238 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801121a:	429a      	cmp	r2, r3
 801121c:	d902      	bls.n	8011224 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801121e:	4b07      	ldr	r3, [pc, #28]	; (801123c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011220:	2201      	movs	r2, #1
 8011222:	601a      	str	r2, [r3, #0]
	}
}
 8011224:	bf00      	nop
 8011226:	3718      	adds	r7, #24
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	24001234 	.word	0x24001234
 8011230:	24001214 	.word	0x24001214
 8011234:	24000d3c 	.word	0x24000d3c
 8011238:	24000d38 	.word	0x24000d38
 801123c:	24001220 	.word	0x24001220

08011240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011240:	b480      	push	{r7}
 8011242:	b083      	sub	sp, #12
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011248:	4b06      	ldr	r3, [pc, #24]	; (8011264 <vTaskInternalSetTimeOutState+0x24>)
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011250:	4b05      	ldr	r3, [pc, #20]	; (8011268 <vTaskInternalSetTimeOutState+0x28>)
 8011252:	681a      	ldr	r2, [r3, #0]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	605a      	str	r2, [r3, #4]
}
 8011258:	bf00      	nop
 801125a:	370c      	adds	r7, #12
 801125c:	46bd      	mov	sp, r7
 801125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011262:	4770      	bx	lr
 8011264:	24001224 	.word	0x24001224
 8011268:	24001210 	.word	0x24001210

0801126c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b088      	sub	sp, #32
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d10a      	bne.n	8011292 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801127c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011280:	f383 8811 	msr	BASEPRI, r3
 8011284:	f3bf 8f6f 	isb	sy
 8011288:	f3bf 8f4f 	dsb	sy
 801128c:	613b      	str	r3, [r7, #16]
}
 801128e:	bf00      	nop
 8011290:	e7fe      	b.n	8011290 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10a      	bne.n	80112ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129c:	f383 8811 	msr	BASEPRI, r3
 80112a0:	f3bf 8f6f 	isb	sy
 80112a4:	f3bf 8f4f 	dsb	sy
 80112a8:	60fb      	str	r3, [r7, #12]
}
 80112aa:	bf00      	nop
 80112ac:	e7fe      	b.n	80112ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80112ae:	f000 feb1 	bl	8012014 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80112b2:	4b1d      	ldr	r3, [pc, #116]	; (8011328 <xTaskCheckForTimeOut+0xbc>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	69ba      	ldr	r2, [r7, #24]
 80112be:	1ad3      	subs	r3, r2, r3
 80112c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112ca:	d102      	bne.n	80112d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80112cc:	2300      	movs	r3, #0
 80112ce:	61fb      	str	r3, [r7, #28]
 80112d0:	e023      	b.n	801131a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	4b15      	ldr	r3, [pc, #84]	; (801132c <xTaskCheckForTimeOut+0xc0>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d007      	beq.n	80112ee <xTaskCheckForTimeOut+0x82>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	69ba      	ldr	r2, [r7, #24]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d302      	bcc.n	80112ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80112e8:	2301      	movs	r3, #1
 80112ea:	61fb      	str	r3, [r7, #28]
 80112ec:	e015      	b.n	801131a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	697a      	ldr	r2, [r7, #20]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d20b      	bcs.n	8011310 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	1ad2      	subs	r2, r2, r3
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7ff ff9b 	bl	8011240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801130a:	2300      	movs	r3, #0
 801130c:	61fb      	str	r3, [r7, #28]
 801130e:	e004      	b.n	801131a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	2200      	movs	r2, #0
 8011314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011316:	2301      	movs	r3, #1
 8011318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801131a:	f000 feab 	bl	8012074 <vPortExitCritical>

	return xReturn;
 801131e:	69fb      	ldr	r3, [r7, #28]
}
 8011320:	4618      	mov	r0, r3
 8011322:	3720      	adds	r7, #32
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	24001210 	.word	0x24001210
 801132c:	24001224 	.word	0x24001224

08011330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011330:	b480      	push	{r7}
 8011332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011334:	4b03      	ldr	r3, [pc, #12]	; (8011344 <vTaskMissedYield+0x14>)
 8011336:	2201      	movs	r2, #1
 8011338:	601a      	str	r2, [r3, #0]
}
 801133a:	bf00      	nop
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr
 8011344:	24001220 	.word	0x24001220

08011348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011350:	f000 f852 	bl	80113f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011354:	4b06      	ldr	r3, [pc, #24]	; (8011370 <prvIdleTask+0x28>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d9f9      	bls.n	8011350 <prvIdleTask+0x8>
			{
				taskYIELD();
 801135c:	4b05      	ldr	r3, [pc, #20]	; (8011374 <prvIdleTask+0x2c>)
 801135e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011362:	601a      	str	r2, [r3, #0]
 8011364:	f3bf 8f4f 	dsb	sy
 8011368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801136c:	e7f0      	b.n	8011350 <prvIdleTask+0x8>
 801136e:	bf00      	nop
 8011370:	24000d3c 	.word	0x24000d3c
 8011374:	e000ed04 	.word	0xe000ed04

08011378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801137e:	2300      	movs	r3, #0
 8011380:	607b      	str	r3, [r7, #4]
 8011382:	e00c      	b.n	801139e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011384:	687a      	ldr	r2, [r7, #4]
 8011386:	4613      	mov	r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	4413      	add	r3, r2
 801138c:	009b      	lsls	r3, r3, #2
 801138e:	4a12      	ldr	r2, [pc, #72]	; (80113d8 <prvInitialiseTaskLists+0x60>)
 8011390:	4413      	add	r3, r2
 8011392:	4618      	mov	r0, r3
 8011394:	f7fe fc52 	bl	800fc3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	3301      	adds	r3, #1
 801139c:	607b      	str	r3, [r7, #4]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2b37      	cmp	r3, #55	; 0x37
 80113a2:	d9ef      	bls.n	8011384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80113a4:	480d      	ldr	r0, [pc, #52]	; (80113dc <prvInitialiseTaskLists+0x64>)
 80113a6:	f7fe fc49 	bl	800fc3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80113aa:	480d      	ldr	r0, [pc, #52]	; (80113e0 <prvInitialiseTaskLists+0x68>)
 80113ac:	f7fe fc46 	bl	800fc3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80113b0:	480c      	ldr	r0, [pc, #48]	; (80113e4 <prvInitialiseTaskLists+0x6c>)
 80113b2:	f7fe fc43 	bl	800fc3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80113b6:	480c      	ldr	r0, [pc, #48]	; (80113e8 <prvInitialiseTaskLists+0x70>)
 80113b8:	f7fe fc40 	bl	800fc3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80113bc:	480b      	ldr	r0, [pc, #44]	; (80113ec <prvInitialiseTaskLists+0x74>)
 80113be:	f7fe fc3d 	bl	800fc3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80113c2:	4b0b      	ldr	r3, [pc, #44]	; (80113f0 <prvInitialiseTaskLists+0x78>)
 80113c4:	4a05      	ldr	r2, [pc, #20]	; (80113dc <prvInitialiseTaskLists+0x64>)
 80113c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80113c8:	4b0a      	ldr	r3, [pc, #40]	; (80113f4 <prvInitialiseTaskLists+0x7c>)
 80113ca:	4a05      	ldr	r2, [pc, #20]	; (80113e0 <prvInitialiseTaskLists+0x68>)
 80113cc:	601a      	str	r2, [r3, #0]
}
 80113ce:	bf00      	nop
 80113d0:	3708      	adds	r7, #8
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	24000d3c 	.word	0x24000d3c
 80113dc:	2400119c 	.word	0x2400119c
 80113e0:	240011b0 	.word	0x240011b0
 80113e4:	240011cc 	.word	0x240011cc
 80113e8:	240011e0 	.word	0x240011e0
 80113ec:	240011f8 	.word	0x240011f8
 80113f0:	240011c4 	.word	0x240011c4
 80113f4:	240011c8 	.word	0x240011c8

080113f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113fe:	e019      	b.n	8011434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011400:	f000 fe08 	bl	8012014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011404:	4b10      	ldr	r3, [pc, #64]	; (8011448 <prvCheckTasksWaitingTermination+0x50>)
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	3304      	adds	r3, #4
 8011410:	4618      	mov	r0, r3
 8011412:	f7fe fc9d 	bl	800fd50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011416:	4b0d      	ldr	r3, [pc, #52]	; (801144c <prvCheckTasksWaitingTermination+0x54>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	3b01      	subs	r3, #1
 801141c:	4a0b      	ldr	r2, [pc, #44]	; (801144c <prvCheckTasksWaitingTermination+0x54>)
 801141e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011420:	4b0b      	ldr	r3, [pc, #44]	; (8011450 <prvCheckTasksWaitingTermination+0x58>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	3b01      	subs	r3, #1
 8011426:	4a0a      	ldr	r2, [pc, #40]	; (8011450 <prvCheckTasksWaitingTermination+0x58>)
 8011428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801142a:	f000 fe23 	bl	8012074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 f810 	bl	8011454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011434:	4b06      	ldr	r3, [pc, #24]	; (8011450 <prvCheckTasksWaitingTermination+0x58>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1e1      	bne.n	8011400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801143c:	bf00      	nop
 801143e:	bf00      	nop
 8011440:	3708      	adds	r7, #8
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	240011e0 	.word	0x240011e0
 801144c:	2400120c 	.word	0x2400120c
 8011450:	240011f4 	.word	0x240011f4

08011454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011454:	b580      	push	{r7, lr}
 8011456:	b084      	sub	sp, #16
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011462:	2b00      	cmp	r3, #0
 8011464:	d108      	bne.n	8011478 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801146a:	4618      	mov	r0, r3
 801146c:	f000 ffc0 	bl	80123f0 <vPortFree>
				vPortFree( pxTCB );
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f000 ffbd 	bl	80123f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011476:	e018      	b.n	80114aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801147e:	2b01      	cmp	r3, #1
 8011480:	d103      	bne.n	801148a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f000 ffb4 	bl	80123f0 <vPortFree>
	}
 8011488:	e00f      	b.n	80114aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011490:	2b02      	cmp	r3, #2
 8011492:	d00a      	beq.n	80114aa <prvDeleteTCB+0x56>
	__asm volatile
 8011494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011498:	f383 8811 	msr	BASEPRI, r3
 801149c:	f3bf 8f6f 	isb	sy
 80114a0:	f3bf 8f4f 	dsb	sy
 80114a4:	60fb      	str	r3, [r7, #12]
}
 80114a6:	bf00      	nop
 80114a8:	e7fe      	b.n	80114a8 <prvDeleteTCB+0x54>
	}
 80114aa:	bf00      	nop
 80114ac:	3710      	adds	r7, #16
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
	...

080114b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114ba:	4b0c      	ldr	r3, [pc, #48]	; (80114ec <prvResetNextTaskUnblockTime+0x38>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d104      	bne.n	80114ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80114c4:	4b0a      	ldr	r3, [pc, #40]	; (80114f0 <prvResetNextTaskUnblockTime+0x3c>)
 80114c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80114cc:	e008      	b.n	80114e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114ce:	4b07      	ldr	r3, [pc, #28]	; (80114ec <prvResetNextTaskUnblockTime+0x38>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	4a04      	ldr	r2, [pc, #16]	; (80114f0 <prvResetNextTaskUnblockTime+0x3c>)
 80114de:	6013      	str	r3, [r2, #0]
}
 80114e0:	bf00      	nop
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	240011c4 	.word	0x240011c4
 80114f0:	2400122c 	.word	0x2400122c

080114f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80114fa:	4b0b      	ldr	r3, [pc, #44]	; (8011528 <xTaskGetSchedulerState+0x34>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d102      	bne.n	8011508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011502:	2301      	movs	r3, #1
 8011504:	607b      	str	r3, [r7, #4]
 8011506:	e008      	b.n	801151a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011508:	4b08      	ldr	r3, [pc, #32]	; (801152c <xTaskGetSchedulerState+0x38>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d102      	bne.n	8011516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011510:	2302      	movs	r3, #2
 8011512:	607b      	str	r3, [r7, #4]
 8011514:	e001      	b.n	801151a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011516:	2300      	movs	r3, #0
 8011518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801151a:	687b      	ldr	r3, [r7, #4]
	}
 801151c:	4618      	mov	r0, r3
 801151e:	370c      	adds	r7, #12
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr
 8011528:	24001218 	.word	0x24001218
 801152c:	24001234 	.word	0x24001234

08011530 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011530:	b580      	push	{r7, lr}
 8011532:	b086      	sub	sp, #24
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801153c:	2300      	movs	r3, #0
 801153e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d056      	beq.n	80115f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011546:	4b2e      	ldr	r3, [pc, #184]	; (8011600 <xTaskPriorityDisinherit+0xd0>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	693a      	ldr	r2, [r7, #16]
 801154c:	429a      	cmp	r2, r3
 801154e:	d00a      	beq.n	8011566 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011554:	f383 8811 	msr	BASEPRI, r3
 8011558:	f3bf 8f6f 	isb	sy
 801155c:	f3bf 8f4f 	dsb	sy
 8011560:	60fb      	str	r3, [r7, #12]
}
 8011562:	bf00      	nop
 8011564:	e7fe      	b.n	8011564 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801156a:	2b00      	cmp	r3, #0
 801156c:	d10a      	bne.n	8011584 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801156e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011572:	f383 8811 	msr	BASEPRI, r3
 8011576:	f3bf 8f6f 	isb	sy
 801157a:	f3bf 8f4f 	dsb	sy
 801157e:	60bb      	str	r3, [r7, #8]
}
 8011580:	bf00      	nop
 8011582:	e7fe      	b.n	8011582 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011588:	1e5a      	subs	r2, r3, #1
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011596:	429a      	cmp	r2, r3
 8011598:	d02c      	beq.n	80115f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d128      	bne.n	80115f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	3304      	adds	r3, #4
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fe fbd2 	bl	800fd50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c4:	4b0f      	ldr	r3, [pc, #60]	; (8011604 <xTaskPriorityDisinherit+0xd4>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d903      	bls.n	80115d4 <xTaskPriorityDisinherit+0xa4>
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d0:	4a0c      	ldr	r2, [pc, #48]	; (8011604 <xTaskPriorityDisinherit+0xd4>)
 80115d2:	6013      	str	r3, [r2, #0]
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115d8:	4613      	mov	r3, r2
 80115da:	009b      	lsls	r3, r3, #2
 80115dc:	4413      	add	r3, r2
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	4a09      	ldr	r2, [pc, #36]	; (8011608 <xTaskPriorityDisinherit+0xd8>)
 80115e2:	441a      	add	r2, r3
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	3304      	adds	r3, #4
 80115e8:	4619      	mov	r1, r3
 80115ea:	4610      	mov	r0, r2
 80115ec:	f7fe fb53 	bl	800fc96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80115f0:	2301      	movs	r3, #1
 80115f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80115f4:	697b      	ldr	r3, [r7, #20]
	}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3718      	adds	r7, #24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	24000d38 	.word	0x24000d38
 8011604:	24001214 	.word	0x24001214
 8011608:	24000d3c 	.word	0x24000d3c

0801160c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8011612:	4b09      	ldr	r3, [pc, #36]	; (8011638 <uxTaskResetEventItemValue+0x2c>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	699b      	ldr	r3, [r3, #24]
 8011618:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801161a:	4b07      	ldr	r3, [pc, #28]	; (8011638 <uxTaskResetEventItemValue+0x2c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011620:	4b05      	ldr	r3, [pc, #20]	; (8011638 <uxTaskResetEventItemValue+0x2c>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011628:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801162a:	687b      	ldr	r3, [r7, #4]
}
 801162c:	4618      	mov	r0, r3
 801162e:	370c      	adds	r7, #12
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr
 8011638:	24000d38 	.word	0x24000d38

0801163c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011646:	4b21      	ldr	r3, [pc, #132]	; (80116cc <prvAddCurrentTaskToDelayedList+0x90>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801164c:	4b20      	ldr	r3, [pc, #128]	; (80116d0 <prvAddCurrentTaskToDelayedList+0x94>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	3304      	adds	r3, #4
 8011652:	4618      	mov	r0, r3
 8011654:	f7fe fb7c 	bl	800fd50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801165e:	d10a      	bne.n	8011676 <prvAddCurrentTaskToDelayedList+0x3a>
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d007      	beq.n	8011676 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011666:	4b1a      	ldr	r3, [pc, #104]	; (80116d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	3304      	adds	r3, #4
 801166c:	4619      	mov	r1, r3
 801166e:	4819      	ldr	r0, [pc, #100]	; (80116d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8011670:	f7fe fb11 	bl	800fc96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011674:	e026      	b.n	80116c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011676:	68fa      	ldr	r2, [r7, #12]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	4413      	add	r3, r2
 801167c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801167e:	4b14      	ldr	r3, [pc, #80]	; (80116d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	68ba      	ldr	r2, [r7, #8]
 8011684:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	429a      	cmp	r2, r3
 801168c:	d209      	bcs.n	80116a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801168e:	4b12      	ldr	r3, [pc, #72]	; (80116d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	4b0f      	ldr	r3, [pc, #60]	; (80116d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	3304      	adds	r3, #4
 8011698:	4619      	mov	r1, r3
 801169a:	4610      	mov	r0, r2
 801169c:	f7fe fb1f 	bl	800fcde <vListInsert>
}
 80116a0:	e010      	b.n	80116c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80116a2:	4b0e      	ldr	r3, [pc, #56]	; (80116dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	4b0a      	ldr	r3, [pc, #40]	; (80116d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	3304      	adds	r3, #4
 80116ac:	4619      	mov	r1, r3
 80116ae:	4610      	mov	r0, r2
 80116b0:	f7fe fb15 	bl	800fcde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80116b4:	4b0a      	ldr	r3, [pc, #40]	; (80116e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	68ba      	ldr	r2, [r7, #8]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d202      	bcs.n	80116c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80116be:	4a08      	ldr	r2, [pc, #32]	; (80116e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	6013      	str	r3, [r2, #0]
}
 80116c4:	bf00      	nop
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	24001210 	.word	0x24001210
 80116d0:	24000d38 	.word	0x24000d38
 80116d4:	240011f8 	.word	0x240011f8
 80116d8:	240011c8 	.word	0x240011c8
 80116dc:	240011c4 	.word	0x240011c4
 80116e0:	2400122c 	.word	0x2400122c

080116e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b08a      	sub	sp, #40	; 0x28
 80116e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80116ea:	2300      	movs	r3, #0
 80116ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80116ee:	f000 fb07 	bl	8011d00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80116f2:	4b1c      	ldr	r3, [pc, #112]	; (8011764 <xTimerCreateTimerTask+0x80>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d021      	beq.n	801173e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80116fa:	2300      	movs	r3, #0
 80116fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80116fe:	2300      	movs	r3, #0
 8011700:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011702:	1d3a      	adds	r2, r7, #4
 8011704:	f107 0108 	add.w	r1, r7, #8
 8011708:	f107 030c 	add.w	r3, r7, #12
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe f88d 	bl	800f82c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011712:	6879      	ldr	r1, [r7, #4]
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	9202      	str	r2, [sp, #8]
 801171a:	9301      	str	r3, [sp, #4]
 801171c:	2302      	movs	r3, #2
 801171e:	9300      	str	r3, [sp, #0]
 8011720:	2300      	movs	r3, #0
 8011722:	460a      	mov	r2, r1
 8011724:	4910      	ldr	r1, [pc, #64]	; (8011768 <xTimerCreateTimerTask+0x84>)
 8011726:	4811      	ldr	r0, [pc, #68]	; (801176c <xTimerCreateTimerTask+0x88>)
 8011728:	f7ff f828 	bl	801077c <xTaskCreateStatic>
 801172c:	4603      	mov	r3, r0
 801172e:	4a10      	ldr	r2, [pc, #64]	; (8011770 <xTimerCreateTimerTask+0x8c>)
 8011730:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011732:	4b0f      	ldr	r3, [pc, #60]	; (8011770 <xTimerCreateTimerTask+0x8c>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801173a:	2301      	movs	r3, #1
 801173c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d10a      	bne.n	801175a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011748:	f383 8811 	msr	BASEPRI, r3
 801174c:	f3bf 8f6f 	isb	sy
 8011750:	f3bf 8f4f 	dsb	sy
 8011754:	613b      	str	r3, [r7, #16]
}
 8011756:	bf00      	nop
 8011758:	e7fe      	b.n	8011758 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801175a:	697b      	ldr	r3, [r7, #20]
}
 801175c:	4618      	mov	r0, r3
 801175e:	3718      	adds	r7, #24
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}
 8011764:	24001268 	.word	0x24001268
 8011768:	080132ac 	.word	0x080132ac
 801176c:	080118a9 	.word	0x080118a9
 8011770:	2400126c 	.word	0x2400126c

08011774 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b08a      	sub	sp, #40	; 0x28
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
 8011780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011782:	2300      	movs	r3, #0
 8011784:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d10a      	bne.n	80117a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 801178c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011790:	f383 8811 	msr	BASEPRI, r3
 8011794:	f3bf 8f6f 	isb	sy
 8011798:	f3bf 8f4f 	dsb	sy
 801179c:	623b      	str	r3, [r7, #32]
}
 801179e:	bf00      	nop
 80117a0:	e7fe      	b.n	80117a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80117a2:	4b1a      	ldr	r3, [pc, #104]	; (801180c <xTimerGenericCommand+0x98>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d02a      	beq.n	8011800 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	2b05      	cmp	r3, #5
 80117ba:	dc18      	bgt.n	80117ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80117bc:	f7ff fe9a 	bl	80114f4 <xTaskGetSchedulerState>
 80117c0:	4603      	mov	r3, r0
 80117c2:	2b02      	cmp	r3, #2
 80117c4:	d109      	bne.n	80117da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80117c6:	4b11      	ldr	r3, [pc, #68]	; (801180c <xTimerGenericCommand+0x98>)
 80117c8:	6818      	ldr	r0, [r3, #0]
 80117ca:	f107 0110 	add.w	r1, r7, #16
 80117ce:	2300      	movs	r3, #0
 80117d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117d2:	f7fe fbeb 	bl	800ffac <xQueueGenericSend>
 80117d6:	6278      	str	r0, [r7, #36]	; 0x24
 80117d8:	e012      	b.n	8011800 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80117da:	4b0c      	ldr	r3, [pc, #48]	; (801180c <xTimerGenericCommand+0x98>)
 80117dc:	6818      	ldr	r0, [r3, #0]
 80117de:	f107 0110 	add.w	r1, r7, #16
 80117e2:	2300      	movs	r3, #0
 80117e4:	2200      	movs	r2, #0
 80117e6:	f7fe fbe1 	bl	800ffac <xQueueGenericSend>
 80117ea:	6278      	str	r0, [r7, #36]	; 0x24
 80117ec:	e008      	b.n	8011800 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80117ee:	4b07      	ldr	r3, [pc, #28]	; (801180c <xTimerGenericCommand+0x98>)
 80117f0:	6818      	ldr	r0, [r3, #0]
 80117f2:	f107 0110 	add.w	r1, r7, #16
 80117f6:	2300      	movs	r3, #0
 80117f8:	683a      	ldr	r2, [r7, #0]
 80117fa:	f7fe fcd5 	bl	80101a8 <xQueueGenericSendFromISR>
 80117fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011802:	4618      	mov	r0, r3
 8011804:	3728      	adds	r7, #40	; 0x28
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	24001268 	.word	0x24001268

08011810 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b088      	sub	sp, #32
 8011814:	af02      	add	r7, sp, #8
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801181a:	4b22      	ldr	r3, [pc, #136]	; (80118a4 <prvProcessExpiredTimer+0x94>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	3304      	adds	r3, #4
 8011828:	4618      	mov	r0, r3
 801182a:	f7fe fa91 	bl	800fd50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011834:	f003 0304 	and.w	r3, r3, #4
 8011838:	2b00      	cmp	r3, #0
 801183a:	d022      	beq.n	8011882 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	699a      	ldr	r2, [r3, #24]
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	18d1      	adds	r1, r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	683a      	ldr	r2, [r7, #0]
 8011848:	6978      	ldr	r0, [r7, #20]
 801184a:	f000 f8d1 	bl	80119f0 <prvInsertTimerInActiveList>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d01f      	beq.n	8011894 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011854:	2300      	movs	r3, #0
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	2300      	movs	r3, #0
 801185a:	687a      	ldr	r2, [r7, #4]
 801185c:	2100      	movs	r1, #0
 801185e:	6978      	ldr	r0, [r7, #20]
 8011860:	f7ff ff88 	bl	8011774 <xTimerGenericCommand>
 8011864:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d113      	bne.n	8011894 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011870:	f383 8811 	msr	BASEPRI, r3
 8011874:	f3bf 8f6f 	isb	sy
 8011878:	f3bf 8f4f 	dsb	sy
 801187c:	60fb      	str	r3, [r7, #12]
}
 801187e:	bf00      	nop
 8011880:	e7fe      	b.n	8011880 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011888:	f023 0301 	bic.w	r3, r3, #1
 801188c:	b2da      	uxtb	r2, r3
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	6a1b      	ldr	r3, [r3, #32]
 8011898:	6978      	ldr	r0, [r7, #20]
 801189a:	4798      	blx	r3
}
 801189c:	bf00      	nop
 801189e:	3718      	adds	r7, #24
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}
 80118a4:	24001260 	.word	0x24001260

080118a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118b0:	f107 0308 	add.w	r3, r7, #8
 80118b4:	4618      	mov	r0, r3
 80118b6:	f000 f857 	bl	8011968 <prvGetNextExpireTime>
 80118ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	4619      	mov	r1, r3
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f000 f803 	bl	80118cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80118c6:	f000 f8d5 	bl	8011a74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80118ca:	e7f1      	b.n	80118b0 <prvTimerTask+0x8>

080118cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80118d6:	f7ff f98d 	bl	8010bf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80118da:	f107 0308 	add.w	r3, r7, #8
 80118de:	4618      	mov	r0, r3
 80118e0:	f000 f866 	bl	80119b0 <prvSampleTimeNow>
 80118e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d130      	bne.n	801194e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d10a      	bne.n	8011908 <prvProcessTimerOrBlockTask+0x3c>
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d806      	bhi.n	8011908 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80118fa:	f7ff f989 	bl	8010c10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80118fe:	68f9      	ldr	r1, [r7, #12]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7ff ff85 	bl	8011810 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011906:	e024      	b.n	8011952 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d008      	beq.n	8011920 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801190e:	4b13      	ldr	r3, [pc, #76]	; (801195c <prvProcessTimerOrBlockTask+0x90>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d101      	bne.n	801191c <prvProcessTimerOrBlockTask+0x50>
 8011918:	2301      	movs	r3, #1
 801191a:	e000      	b.n	801191e <prvProcessTimerOrBlockTask+0x52>
 801191c:	2300      	movs	r3, #0
 801191e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011920:	4b0f      	ldr	r3, [pc, #60]	; (8011960 <prvProcessTimerOrBlockTask+0x94>)
 8011922:	6818      	ldr	r0, [r3, #0]
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	1ad3      	subs	r3, r2, r3
 801192a:	683a      	ldr	r2, [r7, #0]
 801192c:	4619      	mov	r1, r3
 801192e:	f7fe fef1 	bl	8010714 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011932:	f7ff f96d 	bl	8010c10 <xTaskResumeAll>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d10a      	bne.n	8011952 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801193c:	4b09      	ldr	r3, [pc, #36]	; (8011964 <prvProcessTimerOrBlockTask+0x98>)
 801193e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011942:	601a      	str	r2, [r3, #0]
 8011944:	f3bf 8f4f 	dsb	sy
 8011948:	f3bf 8f6f 	isb	sy
}
 801194c:	e001      	b.n	8011952 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801194e:	f7ff f95f 	bl	8010c10 <xTaskResumeAll>
}
 8011952:	bf00      	nop
 8011954:	3710      	adds	r7, #16
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	24001264 	.word	0x24001264
 8011960:	24001268 	.word	0x24001268
 8011964:	e000ed04 	.word	0xe000ed04

08011968 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011968:	b480      	push	{r7}
 801196a:	b085      	sub	sp, #20
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011970:	4b0e      	ldr	r3, [pc, #56]	; (80119ac <prvGetNextExpireTime+0x44>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d101      	bne.n	801197e <prvGetNextExpireTime+0x16>
 801197a:	2201      	movs	r2, #1
 801197c:	e000      	b.n	8011980 <prvGetNextExpireTime+0x18>
 801197e:	2200      	movs	r2, #0
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d105      	bne.n	8011998 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801198c:	4b07      	ldr	r3, [pc, #28]	; (80119ac <prvGetNextExpireTime+0x44>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	60fb      	str	r3, [r7, #12]
 8011996:	e001      	b.n	801199c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011998:	2300      	movs	r3, #0
 801199a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801199c:	68fb      	ldr	r3, [r7, #12]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3714      	adds	r7, #20
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	24001260 	.word	0x24001260

080119b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b084      	sub	sp, #16
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80119b8:	f7ff f9c8 	bl	8010d4c <xTaskGetTickCount>
 80119bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80119be:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <prvSampleTimeNow+0x3c>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	68fa      	ldr	r2, [r7, #12]
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d205      	bcs.n	80119d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80119c8:	f000 f936 	bl	8011c38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2201      	movs	r2, #1
 80119d0:	601a      	str	r2, [r3, #0]
 80119d2:	e002      	b.n	80119da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2200      	movs	r2, #0
 80119d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80119da:	4a04      	ldr	r2, [pc, #16]	; (80119ec <prvSampleTimeNow+0x3c>)
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80119e0:	68fb      	ldr	r3, [r7, #12]
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3710      	adds	r7, #16
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	24001270 	.word	0x24001270

080119f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	607a      	str	r2, [r7, #4]
 80119fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80119fe:	2300      	movs	r3, #0
 8011a00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	68ba      	ldr	r2, [r7, #8]
 8011a06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011a0e:	68ba      	ldr	r2, [r7, #8]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d812      	bhi.n	8011a3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	1ad2      	subs	r2, r2, r3
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	699b      	ldr	r3, [r3, #24]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d302      	bcc.n	8011a2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011a24:	2301      	movs	r3, #1
 8011a26:	617b      	str	r3, [r7, #20]
 8011a28:	e01b      	b.n	8011a62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011a2a:	4b10      	ldr	r3, [pc, #64]	; (8011a6c <prvInsertTimerInActiveList+0x7c>)
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	3304      	adds	r3, #4
 8011a32:	4619      	mov	r1, r3
 8011a34:	4610      	mov	r0, r2
 8011a36:	f7fe f952 	bl	800fcde <vListInsert>
 8011a3a:	e012      	b.n	8011a62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d206      	bcs.n	8011a52 <prvInsertTimerInActiveList+0x62>
 8011a44:	68ba      	ldr	r2, [r7, #8]
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d302      	bcc.n	8011a52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	617b      	str	r3, [r7, #20]
 8011a50:	e007      	b.n	8011a62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011a52:	4b07      	ldr	r3, [pc, #28]	; (8011a70 <prvInsertTimerInActiveList+0x80>)
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	3304      	adds	r3, #4
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	f7fe f93e 	bl	800fcde <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011a62:	697b      	ldr	r3, [r7, #20]
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3718      	adds	r7, #24
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	24001264 	.word	0x24001264
 8011a70:	24001260 	.word	0x24001260

08011a74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b08e      	sub	sp, #56	; 0x38
 8011a78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011a7a:	e0ca      	b.n	8011c12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	da18      	bge.n	8011ab4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011a82:	1d3b      	adds	r3, r7, #4
 8011a84:	3304      	adds	r3, #4
 8011a86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d10a      	bne.n	8011aa4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a92:	f383 8811 	msr	BASEPRI, r3
 8011a96:	f3bf 8f6f 	isb	sy
 8011a9a:	f3bf 8f4f 	dsb	sy
 8011a9e:	61fb      	str	r3, [r7, #28]
}
 8011aa0:	bf00      	nop
 8011aa2:	e7fe      	b.n	8011aa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aaa:	6850      	ldr	r0, [r2, #4]
 8011aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aae:	6892      	ldr	r2, [r2, #8]
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	f2c0 80aa 	blt.w	8011c10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac2:	695b      	ldr	r3, [r3, #20]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d004      	beq.n	8011ad2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aca:	3304      	adds	r3, #4
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7fe f93f 	bl	800fd50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ad2:	463b      	mov	r3, r7
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7ff ff6b 	bl	80119b0 <prvSampleTimeNow>
 8011ada:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2b09      	cmp	r3, #9
 8011ae0:	f200 8097 	bhi.w	8011c12 <prvProcessReceivedCommands+0x19e>
 8011ae4:	a201      	add	r2, pc, #4	; (adr r2, 8011aec <prvProcessReceivedCommands+0x78>)
 8011ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aea:	bf00      	nop
 8011aec:	08011b15 	.word	0x08011b15
 8011af0:	08011b15 	.word	0x08011b15
 8011af4:	08011b15 	.word	0x08011b15
 8011af8:	08011b89 	.word	0x08011b89
 8011afc:	08011b9d 	.word	0x08011b9d
 8011b00:	08011be7 	.word	0x08011be7
 8011b04:	08011b15 	.word	0x08011b15
 8011b08:	08011b15 	.word	0x08011b15
 8011b0c:	08011b89 	.word	0x08011b89
 8011b10:	08011b9d 	.word	0x08011b9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b1a:	f043 0301 	orr.w	r3, r3, #1
 8011b1e:	b2da      	uxtb	r2, r3
 8011b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011b26:	68ba      	ldr	r2, [r7, #8]
 8011b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b2a:	699b      	ldr	r3, [r3, #24]
 8011b2c:	18d1      	adds	r1, r2, r3
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b34:	f7ff ff5c 	bl	80119f0 <prvInsertTimerInActiveList>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d069      	beq.n	8011c12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b40:	6a1b      	ldr	r3, [r3, #32]
 8011b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b4c:	f003 0304 	and.w	r3, r3, #4
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d05e      	beq.n	8011c12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011b54:	68ba      	ldr	r2, [r7, #8]
 8011b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b58:	699b      	ldr	r3, [r3, #24]
 8011b5a:	441a      	add	r2, r3
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	2300      	movs	r3, #0
 8011b62:	2100      	movs	r1, #0
 8011b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b66:	f7ff fe05 	bl	8011774 <xTimerGenericCommand>
 8011b6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011b6c:	6a3b      	ldr	r3, [r7, #32]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d14f      	bne.n	8011c12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b76:	f383 8811 	msr	BASEPRI, r3
 8011b7a:	f3bf 8f6f 	isb	sy
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	61bb      	str	r3, [r7, #24]
}
 8011b84:	bf00      	nop
 8011b86:	e7fe      	b.n	8011b86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b8e:	f023 0301 	bic.w	r3, r3, #1
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011b9a:	e03a      	b.n	8011c12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ba2:	f043 0301 	orr.w	r3, r3, #1
 8011ba6:	b2da      	uxtb	r2, r3
 8011ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011bae:	68ba      	ldr	r2, [r7, #8]
 8011bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb6:	699b      	ldr	r3, [r3, #24]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d10a      	bne.n	8011bd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc0:	f383 8811 	msr	BASEPRI, r3
 8011bc4:	f3bf 8f6f 	isb	sy
 8011bc8:	f3bf 8f4f 	dsb	sy
 8011bcc:	617b      	str	r3, [r7, #20]
}
 8011bce:	bf00      	nop
 8011bd0:	e7fe      	b.n	8011bd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd4:	699a      	ldr	r2, [r3, #24]
 8011bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd8:	18d1      	adds	r1, r2, r3
 8011bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011be0:	f7ff ff06 	bl	80119f0 <prvInsertTimerInActiveList>
					break;
 8011be4:	e015      	b.n	8011c12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011bec:	f003 0302 	and.w	r3, r3, #2
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d103      	bne.n	8011bfc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bf6:	f000 fbfb 	bl	80123f0 <vPortFree>
 8011bfa:	e00a      	b.n	8011c12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c02:	f023 0301 	bic.w	r3, r3, #1
 8011c06:	b2da      	uxtb	r2, r3
 8011c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011c0e:	e000      	b.n	8011c12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011c10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c12:	4b08      	ldr	r3, [pc, #32]	; (8011c34 <prvProcessReceivedCommands+0x1c0>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	1d39      	adds	r1, r7, #4
 8011c18:	2200      	movs	r2, #0
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fe fb60 	bl	80102e0 <xQueueReceive>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f47f af2a 	bne.w	8011a7c <prvProcessReceivedCommands+0x8>
	}
}
 8011c28:	bf00      	nop
 8011c2a:	bf00      	nop
 8011c2c:	3730      	adds	r7, #48	; 0x30
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	24001268 	.word	0x24001268

08011c38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b088      	sub	sp, #32
 8011c3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011c3e:	e048      	b.n	8011cd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011c40:	4b2d      	ldr	r3, [pc, #180]	; (8011cf8 <prvSwitchTimerLists+0xc0>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	68db      	ldr	r3, [r3, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c4a:	4b2b      	ldr	r3, [pc, #172]	; (8011cf8 <prvSwitchTimerLists+0xc0>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	68db      	ldr	r3, [r3, #12]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	3304      	adds	r3, #4
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7fe f879 	bl	800fd50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	6a1b      	ldr	r3, [r3, #32]
 8011c62:	68f8      	ldr	r0, [r7, #12]
 8011c64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c6c:	f003 0304 	and.w	r3, r3, #4
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d02e      	beq.n	8011cd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	699b      	ldr	r3, [r3, #24]
 8011c78:	693a      	ldr	r2, [r7, #16]
 8011c7a:	4413      	add	r3, r2
 8011c7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d90e      	bls.n	8011ca4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	68ba      	ldr	r2, [r7, #8]
 8011c8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	68fa      	ldr	r2, [r7, #12]
 8011c90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011c92:	4b19      	ldr	r3, [pc, #100]	; (8011cf8 <prvSwitchTimerLists+0xc0>)
 8011c94:	681a      	ldr	r2, [r3, #0]
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	3304      	adds	r3, #4
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	4610      	mov	r0, r2
 8011c9e:	f7fe f81e 	bl	800fcde <vListInsert>
 8011ca2:	e016      	b.n	8011cd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	9300      	str	r3, [sp, #0]
 8011ca8:	2300      	movs	r3, #0
 8011caa:	693a      	ldr	r2, [r7, #16]
 8011cac:	2100      	movs	r1, #0
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f7ff fd60 	bl	8011774 <xTimerGenericCommand>
 8011cb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d10a      	bne.n	8011cd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc0:	f383 8811 	msr	BASEPRI, r3
 8011cc4:	f3bf 8f6f 	isb	sy
 8011cc8:	f3bf 8f4f 	dsb	sy
 8011ccc:	603b      	str	r3, [r7, #0]
}
 8011cce:	bf00      	nop
 8011cd0:	e7fe      	b.n	8011cd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011cd2:	4b09      	ldr	r3, [pc, #36]	; (8011cf8 <prvSwitchTimerLists+0xc0>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1b1      	bne.n	8011c40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011cdc:	4b06      	ldr	r3, [pc, #24]	; (8011cf8 <prvSwitchTimerLists+0xc0>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011ce2:	4b06      	ldr	r3, [pc, #24]	; (8011cfc <prvSwitchTimerLists+0xc4>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4a04      	ldr	r2, [pc, #16]	; (8011cf8 <prvSwitchTimerLists+0xc0>)
 8011ce8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011cea:	4a04      	ldr	r2, [pc, #16]	; (8011cfc <prvSwitchTimerLists+0xc4>)
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	6013      	str	r3, [r2, #0]
}
 8011cf0:	bf00      	nop
 8011cf2:	3718      	adds	r7, #24
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	24001260 	.word	0x24001260
 8011cfc:	24001264 	.word	0x24001264

08011d00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011d06:	f000 f985 	bl	8012014 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011d0a:	4b15      	ldr	r3, [pc, #84]	; (8011d60 <prvCheckForValidListAndQueue+0x60>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d120      	bne.n	8011d54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011d12:	4814      	ldr	r0, [pc, #80]	; (8011d64 <prvCheckForValidListAndQueue+0x64>)
 8011d14:	f7fd ff92 	bl	800fc3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011d18:	4813      	ldr	r0, [pc, #76]	; (8011d68 <prvCheckForValidListAndQueue+0x68>)
 8011d1a:	f7fd ff8f 	bl	800fc3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011d1e:	4b13      	ldr	r3, [pc, #76]	; (8011d6c <prvCheckForValidListAndQueue+0x6c>)
 8011d20:	4a10      	ldr	r2, [pc, #64]	; (8011d64 <prvCheckForValidListAndQueue+0x64>)
 8011d22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011d24:	4b12      	ldr	r3, [pc, #72]	; (8011d70 <prvCheckForValidListAndQueue+0x70>)
 8011d26:	4a10      	ldr	r2, [pc, #64]	; (8011d68 <prvCheckForValidListAndQueue+0x68>)
 8011d28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	9300      	str	r3, [sp, #0]
 8011d2e:	4b11      	ldr	r3, [pc, #68]	; (8011d74 <prvCheckForValidListAndQueue+0x74>)
 8011d30:	4a11      	ldr	r2, [pc, #68]	; (8011d78 <prvCheckForValidListAndQueue+0x78>)
 8011d32:	2110      	movs	r1, #16
 8011d34:	200a      	movs	r0, #10
 8011d36:	f7fe f89d 	bl	800fe74 <xQueueGenericCreateStatic>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	4a08      	ldr	r2, [pc, #32]	; (8011d60 <prvCheckForValidListAndQueue+0x60>)
 8011d3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011d40:	4b07      	ldr	r3, [pc, #28]	; (8011d60 <prvCheckForValidListAndQueue+0x60>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d005      	beq.n	8011d54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011d48:	4b05      	ldr	r3, [pc, #20]	; (8011d60 <prvCheckForValidListAndQueue+0x60>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	490b      	ldr	r1, [pc, #44]	; (8011d7c <prvCheckForValidListAndQueue+0x7c>)
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe fcb6 	bl	80106c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011d54:	f000 f98e 	bl	8012074 <vPortExitCritical>
}
 8011d58:	bf00      	nop
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	24001268 	.word	0x24001268
 8011d64:	24001238 	.word	0x24001238
 8011d68:	2400124c 	.word	0x2400124c
 8011d6c:	24001260 	.word	0x24001260
 8011d70:	24001264 	.word	0x24001264
 8011d74:	24001314 	.word	0x24001314
 8011d78:	24001274 	.word	0x24001274
 8011d7c:	080132b4 	.word	0x080132b4

08011d80 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b08a      	sub	sp, #40	; 0x28
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
 8011d8c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8011d8e:	f06f 0301 	mvn.w	r3, #1
 8011d92:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011da0:	4b06      	ldr	r3, [pc, #24]	; (8011dbc <xTimerPendFunctionCallFromISR+0x3c>)
 8011da2:	6818      	ldr	r0, [r3, #0]
 8011da4:	f107 0114 	add.w	r1, r7, #20
 8011da8:	2300      	movs	r3, #0
 8011daa:	683a      	ldr	r2, [r7, #0]
 8011dac:	f7fe f9fc 	bl	80101a8 <xQueueGenericSendFromISR>
 8011db0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3728      	adds	r7, #40	; 0x28
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	24001268 	.word	0x24001268

08011dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b085      	sub	sp, #20
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	3b04      	subs	r3, #4
 8011dd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	3b04      	subs	r3, #4
 8011dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	f023 0201 	bic.w	r2, r3, #1
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	3b04      	subs	r3, #4
 8011dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011df0:	4a0c      	ldr	r2, [pc, #48]	; (8011e24 <pxPortInitialiseStack+0x64>)
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	3b14      	subs	r3, #20
 8011dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011dfc:	687a      	ldr	r2, [r7, #4]
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	3b04      	subs	r3, #4
 8011e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	f06f 0202 	mvn.w	r2, #2
 8011e0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	3b20      	subs	r3, #32
 8011e14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e16:	68fb      	ldr	r3, [r7, #12]
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	08011e29 	.word	0x08011e29

08011e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b085      	sub	sp, #20
 8011e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011e32:	4b12      	ldr	r3, [pc, #72]	; (8011e7c <prvTaskExitError+0x54>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e3a:	d00a      	beq.n	8011e52 <prvTaskExitError+0x2a>
	__asm volatile
 8011e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e40:	f383 8811 	msr	BASEPRI, r3
 8011e44:	f3bf 8f6f 	isb	sy
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	60fb      	str	r3, [r7, #12]
}
 8011e4e:	bf00      	nop
 8011e50:	e7fe      	b.n	8011e50 <prvTaskExitError+0x28>
	__asm volatile
 8011e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e56:	f383 8811 	msr	BASEPRI, r3
 8011e5a:	f3bf 8f6f 	isb	sy
 8011e5e:	f3bf 8f4f 	dsb	sy
 8011e62:	60bb      	str	r3, [r7, #8]
}
 8011e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011e66:	bf00      	nop
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d0fc      	beq.n	8011e68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011e6e:	bf00      	nop
 8011e70:	bf00      	nop
 8011e72:	3714      	adds	r7, #20
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr
 8011e7c:	24000010 	.word	0x24000010

08011e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011e80:	4b07      	ldr	r3, [pc, #28]	; (8011ea0 <pxCurrentTCBConst2>)
 8011e82:	6819      	ldr	r1, [r3, #0]
 8011e84:	6808      	ldr	r0, [r1, #0]
 8011e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8a:	f380 8809 	msr	PSP, r0
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f04f 0000 	mov.w	r0, #0
 8011e96:	f380 8811 	msr	BASEPRI, r0
 8011e9a:	4770      	bx	lr
 8011e9c:	f3af 8000 	nop.w

08011ea0 <pxCurrentTCBConst2>:
 8011ea0:	24000d38 	.word	0x24000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011ea4:	bf00      	nop
 8011ea6:	bf00      	nop

08011ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011ea8:	4808      	ldr	r0, [pc, #32]	; (8011ecc <prvPortStartFirstTask+0x24>)
 8011eaa:	6800      	ldr	r0, [r0, #0]
 8011eac:	6800      	ldr	r0, [r0, #0]
 8011eae:	f380 8808 	msr	MSP, r0
 8011eb2:	f04f 0000 	mov.w	r0, #0
 8011eb6:	f380 8814 	msr	CONTROL, r0
 8011eba:	b662      	cpsie	i
 8011ebc:	b661      	cpsie	f
 8011ebe:	f3bf 8f4f 	dsb	sy
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	df00      	svc	0
 8011ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011eca:	bf00      	nop
 8011ecc:	e000ed08 	.word	0xe000ed08

08011ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b086      	sub	sp, #24
 8011ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ed6:	4b46      	ldr	r3, [pc, #280]	; (8011ff0 <xPortStartScheduler+0x120>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4a46      	ldr	r2, [pc, #280]	; (8011ff4 <xPortStartScheduler+0x124>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d10a      	bne.n	8011ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8011ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	613b      	str	r3, [r7, #16]
}
 8011ef2:	bf00      	nop
 8011ef4:	e7fe      	b.n	8011ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011ef6:	4b3e      	ldr	r3, [pc, #248]	; (8011ff0 <xPortStartScheduler+0x120>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4a3f      	ldr	r2, [pc, #252]	; (8011ff8 <xPortStartScheduler+0x128>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	d10a      	bne.n	8011f16 <xPortStartScheduler+0x46>
	__asm volatile
 8011f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	60fb      	str	r3, [r7, #12]
}
 8011f12:	bf00      	nop
 8011f14:	e7fe      	b.n	8011f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011f16:	4b39      	ldr	r3, [pc, #228]	; (8011ffc <xPortStartScheduler+0x12c>)
 8011f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	22ff      	movs	r2, #255	; 0xff
 8011f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011f30:	78fb      	ldrb	r3, [r7, #3]
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011f38:	b2da      	uxtb	r2, r3
 8011f3a:	4b31      	ldr	r3, [pc, #196]	; (8012000 <xPortStartScheduler+0x130>)
 8011f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011f3e:	4b31      	ldr	r3, [pc, #196]	; (8012004 <xPortStartScheduler+0x134>)
 8011f40:	2207      	movs	r2, #7
 8011f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f44:	e009      	b.n	8011f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011f46:	4b2f      	ldr	r3, [pc, #188]	; (8012004 <xPortStartScheduler+0x134>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	3b01      	subs	r3, #1
 8011f4c:	4a2d      	ldr	r2, [pc, #180]	; (8012004 <xPortStartScheduler+0x134>)
 8011f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f50:	78fb      	ldrb	r3, [r7, #3]
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	005b      	lsls	r3, r3, #1
 8011f56:	b2db      	uxtb	r3, r3
 8011f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f5a:	78fb      	ldrb	r3, [r7, #3]
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f62:	2b80      	cmp	r3, #128	; 0x80
 8011f64:	d0ef      	beq.n	8011f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011f66:	4b27      	ldr	r3, [pc, #156]	; (8012004 <xPortStartScheduler+0x134>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	f1c3 0307 	rsb	r3, r3, #7
 8011f6e:	2b04      	cmp	r3, #4
 8011f70:	d00a      	beq.n	8011f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8011f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f76:	f383 8811 	msr	BASEPRI, r3
 8011f7a:	f3bf 8f6f 	isb	sy
 8011f7e:	f3bf 8f4f 	dsb	sy
 8011f82:	60bb      	str	r3, [r7, #8]
}
 8011f84:	bf00      	nop
 8011f86:	e7fe      	b.n	8011f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f88:	4b1e      	ldr	r3, [pc, #120]	; (8012004 <xPortStartScheduler+0x134>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	021b      	lsls	r3, r3, #8
 8011f8e:	4a1d      	ldr	r2, [pc, #116]	; (8012004 <xPortStartScheduler+0x134>)
 8011f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011f92:	4b1c      	ldr	r3, [pc, #112]	; (8012004 <xPortStartScheduler+0x134>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011f9a:	4a1a      	ldr	r2, [pc, #104]	; (8012004 <xPortStartScheduler+0x134>)
 8011f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011fa6:	4b18      	ldr	r3, [pc, #96]	; (8012008 <xPortStartScheduler+0x138>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	4a17      	ldr	r2, [pc, #92]	; (8012008 <xPortStartScheduler+0x138>)
 8011fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011fb2:	4b15      	ldr	r3, [pc, #84]	; (8012008 <xPortStartScheduler+0x138>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	4a14      	ldr	r2, [pc, #80]	; (8012008 <xPortStartScheduler+0x138>)
 8011fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011fbe:	f000 f8dd 	bl	801217c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011fc2:	4b12      	ldr	r3, [pc, #72]	; (801200c <xPortStartScheduler+0x13c>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011fc8:	f000 f8fc 	bl	80121c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011fcc:	4b10      	ldr	r3, [pc, #64]	; (8012010 <xPortStartScheduler+0x140>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4a0f      	ldr	r2, [pc, #60]	; (8012010 <xPortStartScheduler+0x140>)
 8011fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011fd8:	f7ff ff66 	bl	8011ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011fdc:	f7fe ff80 	bl	8010ee0 <vTaskSwitchContext>
	prvTaskExitError();
 8011fe0:	f7ff ff22 	bl	8011e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	e000ed00 	.word	0xe000ed00
 8011ff4:	410fc271 	.word	0x410fc271
 8011ff8:	410fc270 	.word	0x410fc270
 8011ffc:	e000e400 	.word	0xe000e400
 8012000:	24001364 	.word	0x24001364
 8012004:	24001368 	.word	0x24001368
 8012008:	e000ed20 	.word	0xe000ed20
 801200c:	24000010 	.word	0x24000010
 8012010:	e000ef34 	.word	0xe000ef34

08012014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
	__asm volatile
 801201a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801201e:	f383 8811 	msr	BASEPRI, r3
 8012022:	f3bf 8f6f 	isb	sy
 8012026:	f3bf 8f4f 	dsb	sy
 801202a:	607b      	str	r3, [r7, #4]
}
 801202c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801202e:	4b0f      	ldr	r3, [pc, #60]	; (801206c <vPortEnterCritical+0x58>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	3301      	adds	r3, #1
 8012034:	4a0d      	ldr	r2, [pc, #52]	; (801206c <vPortEnterCritical+0x58>)
 8012036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012038:	4b0c      	ldr	r3, [pc, #48]	; (801206c <vPortEnterCritical+0x58>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	2b01      	cmp	r3, #1
 801203e:	d10f      	bne.n	8012060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012040:	4b0b      	ldr	r3, [pc, #44]	; (8012070 <vPortEnterCritical+0x5c>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	b2db      	uxtb	r3, r3
 8012046:	2b00      	cmp	r3, #0
 8012048:	d00a      	beq.n	8012060 <vPortEnterCritical+0x4c>
	__asm volatile
 801204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204e:	f383 8811 	msr	BASEPRI, r3
 8012052:	f3bf 8f6f 	isb	sy
 8012056:	f3bf 8f4f 	dsb	sy
 801205a:	603b      	str	r3, [r7, #0]
}
 801205c:	bf00      	nop
 801205e:	e7fe      	b.n	801205e <vPortEnterCritical+0x4a>
	}
}
 8012060:	bf00      	nop
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr
 801206c:	24000010 	.word	0x24000010
 8012070:	e000ed04 	.word	0xe000ed04

08012074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012074:	b480      	push	{r7}
 8012076:	b083      	sub	sp, #12
 8012078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801207a:	4b12      	ldr	r3, [pc, #72]	; (80120c4 <vPortExitCritical+0x50>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d10a      	bne.n	8012098 <vPortExitCritical+0x24>
	__asm volatile
 8012082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012086:	f383 8811 	msr	BASEPRI, r3
 801208a:	f3bf 8f6f 	isb	sy
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	607b      	str	r3, [r7, #4]
}
 8012094:	bf00      	nop
 8012096:	e7fe      	b.n	8012096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012098:	4b0a      	ldr	r3, [pc, #40]	; (80120c4 <vPortExitCritical+0x50>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	3b01      	subs	r3, #1
 801209e:	4a09      	ldr	r2, [pc, #36]	; (80120c4 <vPortExitCritical+0x50>)
 80120a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80120a2:	4b08      	ldr	r3, [pc, #32]	; (80120c4 <vPortExitCritical+0x50>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d105      	bne.n	80120b6 <vPortExitCritical+0x42>
 80120aa:	2300      	movs	r3, #0
 80120ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	f383 8811 	msr	BASEPRI, r3
}
 80120b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80120b6:	bf00      	nop
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	24000010 	.word	0x24000010
	...

080120d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80120d0:	f3ef 8009 	mrs	r0, PSP
 80120d4:	f3bf 8f6f 	isb	sy
 80120d8:	4b15      	ldr	r3, [pc, #84]	; (8012130 <pxCurrentTCBConst>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	f01e 0f10 	tst.w	lr, #16
 80120e0:	bf08      	it	eq
 80120e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80120e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ea:	6010      	str	r0, [r2, #0]
 80120ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80120f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80120f4:	f380 8811 	msr	BASEPRI, r0
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	f3bf 8f6f 	isb	sy
 8012100:	f7fe feee 	bl	8010ee0 <vTaskSwitchContext>
 8012104:	f04f 0000 	mov.w	r0, #0
 8012108:	f380 8811 	msr	BASEPRI, r0
 801210c:	bc09      	pop	{r0, r3}
 801210e:	6819      	ldr	r1, [r3, #0]
 8012110:	6808      	ldr	r0, [r1, #0]
 8012112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012116:	f01e 0f10 	tst.w	lr, #16
 801211a:	bf08      	it	eq
 801211c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012120:	f380 8809 	msr	PSP, r0
 8012124:	f3bf 8f6f 	isb	sy
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop
 801212c:	f3af 8000 	nop.w

08012130 <pxCurrentTCBConst>:
 8012130:	24000d38 	.word	0x24000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012134:	bf00      	nop
 8012136:	bf00      	nop

08012138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
	__asm volatile
 801213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012142:	f383 8811 	msr	BASEPRI, r3
 8012146:	f3bf 8f6f 	isb	sy
 801214a:	f3bf 8f4f 	dsb	sy
 801214e:	607b      	str	r3, [r7, #4]
}
 8012150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012152:	f7fe fe0b 	bl	8010d6c <xTaskIncrementTick>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d003      	beq.n	8012164 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801215c:	4b06      	ldr	r3, [pc, #24]	; (8012178 <xPortSysTickHandler+0x40>)
 801215e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012162:	601a      	str	r2, [r3, #0]
 8012164:	2300      	movs	r3, #0
 8012166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	f383 8811 	msr	BASEPRI, r3
}
 801216e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012170:	bf00      	nop
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	e000ed04 	.word	0xe000ed04

0801217c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801217c:	b480      	push	{r7}
 801217e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012180:	4b0b      	ldr	r3, [pc, #44]	; (80121b0 <vPortSetupTimerInterrupt+0x34>)
 8012182:	2200      	movs	r2, #0
 8012184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012186:	4b0b      	ldr	r3, [pc, #44]	; (80121b4 <vPortSetupTimerInterrupt+0x38>)
 8012188:	2200      	movs	r2, #0
 801218a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801218c:	4b0a      	ldr	r3, [pc, #40]	; (80121b8 <vPortSetupTimerInterrupt+0x3c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	4a0a      	ldr	r2, [pc, #40]	; (80121bc <vPortSetupTimerInterrupt+0x40>)
 8012192:	fba2 2303 	umull	r2, r3, r2, r3
 8012196:	099b      	lsrs	r3, r3, #6
 8012198:	4a09      	ldr	r2, [pc, #36]	; (80121c0 <vPortSetupTimerInterrupt+0x44>)
 801219a:	3b01      	subs	r3, #1
 801219c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801219e:	4b04      	ldr	r3, [pc, #16]	; (80121b0 <vPortSetupTimerInterrupt+0x34>)
 80121a0:	2207      	movs	r2, #7
 80121a2:	601a      	str	r2, [r3, #0]
}
 80121a4:	bf00      	nop
 80121a6:	46bd      	mov	sp, r7
 80121a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop
 80121b0:	e000e010 	.word	0xe000e010
 80121b4:	e000e018 	.word	0xe000e018
 80121b8:	24000000 	.word	0x24000000
 80121bc:	10624dd3 	.word	0x10624dd3
 80121c0:	e000e014 	.word	0xe000e014

080121c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80121c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80121d4 <vPortEnableVFP+0x10>
 80121c8:	6801      	ldr	r1, [r0, #0]
 80121ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80121ce:	6001      	str	r1, [r0, #0]
 80121d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80121d2:	bf00      	nop
 80121d4:	e000ed88 	.word	0xe000ed88

080121d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80121d8:	b480      	push	{r7}
 80121da:	b085      	sub	sp, #20
 80121dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80121de:	f3ef 8305 	mrs	r3, IPSR
 80121e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2b0f      	cmp	r3, #15
 80121e8:	d914      	bls.n	8012214 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80121ea:	4a17      	ldr	r2, [pc, #92]	; (8012248 <vPortValidateInterruptPriority+0x70>)
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	4413      	add	r3, r2
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80121f4:	4b15      	ldr	r3, [pc, #84]	; (801224c <vPortValidateInterruptPriority+0x74>)
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	7afa      	ldrb	r2, [r7, #11]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d20a      	bcs.n	8012214 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80121fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012202:	f383 8811 	msr	BASEPRI, r3
 8012206:	f3bf 8f6f 	isb	sy
 801220a:	f3bf 8f4f 	dsb	sy
 801220e:	607b      	str	r3, [r7, #4]
}
 8012210:	bf00      	nop
 8012212:	e7fe      	b.n	8012212 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012214:	4b0e      	ldr	r3, [pc, #56]	; (8012250 <vPortValidateInterruptPriority+0x78>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801221c:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <vPortValidateInterruptPriority+0x7c>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	429a      	cmp	r2, r3
 8012222:	d90a      	bls.n	801223a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	603b      	str	r3, [r7, #0]
}
 8012236:	bf00      	nop
 8012238:	e7fe      	b.n	8012238 <vPortValidateInterruptPriority+0x60>
	}
 801223a:	bf00      	nop
 801223c:	3714      	adds	r7, #20
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr
 8012246:	bf00      	nop
 8012248:	e000e3f0 	.word	0xe000e3f0
 801224c:	24001364 	.word	0x24001364
 8012250:	e000ed0c 	.word	0xe000ed0c
 8012254:	24001368 	.word	0x24001368

08012258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b08a      	sub	sp, #40	; 0x28
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012260:	2300      	movs	r3, #0
 8012262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012264:	f7fe fcc6 	bl	8010bf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012268:	4b5b      	ldr	r3, [pc, #364]	; (80123d8 <pvPortMalloc+0x180>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d101      	bne.n	8012274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012270:	f000 f920 	bl	80124b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012274:	4b59      	ldr	r3, [pc, #356]	; (80123dc <pvPortMalloc+0x184>)
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	4013      	ands	r3, r2
 801227c:	2b00      	cmp	r3, #0
 801227e:	f040 8093 	bne.w	80123a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d01d      	beq.n	80122c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012288:	2208      	movs	r2, #8
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	4413      	add	r3, r2
 801228e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f003 0307 	and.w	r3, r3, #7
 8012296:	2b00      	cmp	r3, #0
 8012298:	d014      	beq.n	80122c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f023 0307 	bic.w	r3, r3, #7
 80122a0:	3308      	adds	r3, #8
 80122a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f003 0307 	and.w	r3, r3, #7
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d00a      	beq.n	80122c4 <pvPortMalloc+0x6c>
	__asm volatile
 80122ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b2:	f383 8811 	msr	BASEPRI, r3
 80122b6:	f3bf 8f6f 	isb	sy
 80122ba:	f3bf 8f4f 	dsb	sy
 80122be:	617b      	str	r3, [r7, #20]
}
 80122c0:	bf00      	nop
 80122c2:	e7fe      	b.n	80122c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d06e      	beq.n	80123a8 <pvPortMalloc+0x150>
 80122ca:	4b45      	ldr	r3, [pc, #276]	; (80123e0 <pvPortMalloc+0x188>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d869      	bhi.n	80123a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80122d4:	4b43      	ldr	r3, [pc, #268]	; (80123e4 <pvPortMalloc+0x18c>)
 80122d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80122d8:	4b42      	ldr	r3, [pc, #264]	; (80123e4 <pvPortMalloc+0x18c>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122de:	e004      	b.n	80122ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80122e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d903      	bls.n	80122fc <pvPortMalloc+0xa4>
 80122f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d1f1      	bne.n	80122e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80122fc:	4b36      	ldr	r3, [pc, #216]	; (80123d8 <pvPortMalloc+0x180>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012302:	429a      	cmp	r2, r3
 8012304:	d050      	beq.n	80123a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012306:	6a3b      	ldr	r3, [r7, #32]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	2208      	movs	r2, #8
 801230c:	4413      	add	r3, r2
 801230e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	6a3b      	ldr	r3, [r7, #32]
 8012316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231a:	685a      	ldr	r2, [r3, #4]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	1ad2      	subs	r2, r2, r3
 8012320:	2308      	movs	r3, #8
 8012322:	005b      	lsls	r3, r3, #1
 8012324:	429a      	cmp	r2, r3
 8012326:	d91f      	bls.n	8012368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4413      	add	r3, r2
 801232e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	f003 0307 	and.w	r3, r3, #7
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00a      	beq.n	8012350 <pvPortMalloc+0xf8>
	__asm volatile
 801233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233e:	f383 8811 	msr	BASEPRI, r3
 8012342:	f3bf 8f6f 	isb	sy
 8012346:	f3bf 8f4f 	dsb	sy
 801234a:	613b      	str	r3, [r7, #16]
}
 801234c:	bf00      	nop
 801234e:	e7fe      	b.n	801234e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	685a      	ldr	r2, [r3, #4]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	1ad2      	subs	r2, r2, r3
 8012358:	69bb      	ldr	r3, [r7, #24]
 801235a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012362:	69b8      	ldr	r0, [r7, #24]
 8012364:	f000 f908 	bl	8012578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012368:	4b1d      	ldr	r3, [pc, #116]	; (80123e0 <pvPortMalloc+0x188>)
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	4a1b      	ldr	r2, [pc, #108]	; (80123e0 <pvPortMalloc+0x188>)
 8012374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012376:	4b1a      	ldr	r3, [pc, #104]	; (80123e0 <pvPortMalloc+0x188>)
 8012378:	681a      	ldr	r2, [r3, #0]
 801237a:	4b1b      	ldr	r3, [pc, #108]	; (80123e8 <pvPortMalloc+0x190>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	429a      	cmp	r2, r3
 8012380:	d203      	bcs.n	801238a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012382:	4b17      	ldr	r3, [pc, #92]	; (80123e0 <pvPortMalloc+0x188>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4a18      	ldr	r2, [pc, #96]	; (80123e8 <pvPortMalloc+0x190>)
 8012388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238c:	685a      	ldr	r2, [r3, #4]
 801238e:	4b13      	ldr	r3, [pc, #76]	; (80123dc <pvPortMalloc+0x184>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	431a      	orrs	r2, r3
 8012394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239a:	2200      	movs	r2, #0
 801239c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801239e:	4b13      	ldr	r3, [pc, #76]	; (80123ec <pvPortMalloc+0x194>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	3301      	adds	r3, #1
 80123a4:	4a11      	ldr	r2, [pc, #68]	; (80123ec <pvPortMalloc+0x194>)
 80123a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80123a8:	f7fe fc32 	bl	8010c10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	f003 0307 	and.w	r3, r3, #7
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d00a      	beq.n	80123cc <pvPortMalloc+0x174>
	__asm volatile
 80123b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ba:	f383 8811 	msr	BASEPRI, r3
 80123be:	f3bf 8f6f 	isb	sy
 80123c2:	f3bf 8f4f 	dsb	sy
 80123c6:	60fb      	str	r3, [r7, #12]
}
 80123c8:	bf00      	nop
 80123ca:	e7fe      	b.n	80123ca <pvPortMalloc+0x172>
	return pvReturn;
 80123cc:	69fb      	ldr	r3, [r7, #28]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3728      	adds	r7, #40	; 0x28
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	24004f74 	.word	0x24004f74
 80123dc:	24004f88 	.word	0x24004f88
 80123e0:	24004f78 	.word	0x24004f78
 80123e4:	24004f6c 	.word	0x24004f6c
 80123e8:	24004f7c 	.word	0x24004f7c
 80123ec:	24004f80 	.word	0x24004f80

080123f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b086      	sub	sp, #24
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d04d      	beq.n	801249e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012402:	2308      	movs	r3, #8
 8012404:	425b      	negs	r3, r3
 8012406:	697a      	ldr	r2, [r7, #20]
 8012408:	4413      	add	r3, r2
 801240a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	685a      	ldr	r2, [r3, #4]
 8012414:	4b24      	ldr	r3, [pc, #144]	; (80124a8 <vPortFree+0xb8>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	4013      	ands	r3, r2
 801241a:	2b00      	cmp	r3, #0
 801241c:	d10a      	bne.n	8012434 <vPortFree+0x44>
	__asm volatile
 801241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012422:	f383 8811 	msr	BASEPRI, r3
 8012426:	f3bf 8f6f 	isb	sy
 801242a:	f3bf 8f4f 	dsb	sy
 801242e:	60fb      	str	r3, [r7, #12]
}
 8012430:	bf00      	nop
 8012432:	e7fe      	b.n	8012432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00a      	beq.n	8012452 <vPortFree+0x62>
	__asm volatile
 801243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012440:	f383 8811 	msr	BASEPRI, r3
 8012444:	f3bf 8f6f 	isb	sy
 8012448:	f3bf 8f4f 	dsb	sy
 801244c:	60bb      	str	r3, [r7, #8]
}
 801244e:	bf00      	nop
 8012450:	e7fe      	b.n	8012450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	685a      	ldr	r2, [r3, #4]
 8012456:	4b14      	ldr	r3, [pc, #80]	; (80124a8 <vPortFree+0xb8>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	4013      	ands	r3, r2
 801245c:	2b00      	cmp	r3, #0
 801245e:	d01e      	beq.n	801249e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d11a      	bne.n	801249e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	685a      	ldr	r2, [r3, #4]
 801246c:	4b0e      	ldr	r3, [pc, #56]	; (80124a8 <vPortFree+0xb8>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	43db      	mvns	r3, r3
 8012472:	401a      	ands	r2, r3
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012478:	f7fe fbbc 	bl	8010bf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	685a      	ldr	r2, [r3, #4]
 8012480:	4b0a      	ldr	r3, [pc, #40]	; (80124ac <vPortFree+0xbc>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	4413      	add	r3, r2
 8012486:	4a09      	ldr	r2, [pc, #36]	; (80124ac <vPortFree+0xbc>)
 8012488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801248a:	6938      	ldr	r0, [r7, #16]
 801248c:	f000 f874 	bl	8012578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012490:	4b07      	ldr	r3, [pc, #28]	; (80124b0 <vPortFree+0xc0>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	3301      	adds	r3, #1
 8012496:	4a06      	ldr	r2, [pc, #24]	; (80124b0 <vPortFree+0xc0>)
 8012498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801249a:	f7fe fbb9 	bl	8010c10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801249e:	bf00      	nop
 80124a0:	3718      	adds	r7, #24
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	24004f88 	.word	0x24004f88
 80124ac:	24004f78 	.word	0x24004f78
 80124b0:	24004f84 	.word	0x24004f84

080124b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80124b4:	b480      	push	{r7}
 80124b6:	b085      	sub	sp, #20
 80124b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80124ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80124be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80124c0:	4b27      	ldr	r3, [pc, #156]	; (8012560 <prvHeapInit+0xac>)
 80124c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	f003 0307 	and.w	r3, r3, #7
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00c      	beq.n	80124e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	3307      	adds	r3, #7
 80124d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f023 0307 	bic.w	r3, r3, #7
 80124da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	4a1f      	ldr	r2, [pc, #124]	; (8012560 <prvHeapInit+0xac>)
 80124e4:	4413      	add	r3, r2
 80124e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80124ec:	4a1d      	ldr	r2, [pc, #116]	; (8012564 <prvHeapInit+0xb0>)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80124f2:	4b1c      	ldr	r3, [pc, #112]	; (8012564 <prvHeapInit+0xb0>)
 80124f4:	2200      	movs	r2, #0
 80124f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	68ba      	ldr	r2, [r7, #8]
 80124fc:	4413      	add	r3, r2
 80124fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012500:	2208      	movs	r2, #8
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	1a9b      	subs	r3, r3, r2
 8012506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	f023 0307 	bic.w	r3, r3, #7
 801250e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	4a15      	ldr	r2, [pc, #84]	; (8012568 <prvHeapInit+0xb4>)
 8012514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012516:	4b14      	ldr	r3, [pc, #80]	; (8012568 <prvHeapInit+0xb4>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2200      	movs	r2, #0
 801251c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801251e:	4b12      	ldr	r3, [pc, #72]	; (8012568 <prvHeapInit+0xb4>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2200      	movs	r2, #0
 8012524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	1ad2      	subs	r2, r2, r3
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012534:	4b0c      	ldr	r3, [pc, #48]	; (8012568 <prvHeapInit+0xb4>)
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	685b      	ldr	r3, [r3, #4]
 8012540:	4a0a      	ldr	r2, [pc, #40]	; (801256c <prvHeapInit+0xb8>)
 8012542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	4a09      	ldr	r2, [pc, #36]	; (8012570 <prvHeapInit+0xbc>)
 801254a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801254c:	4b09      	ldr	r3, [pc, #36]	; (8012574 <prvHeapInit+0xc0>)
 801254e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012552:	601a      	str	r2, [r3, #0]
}
 8012554:	bf00      	nop
 8012556:	3714      	adds	r7, #20
 8012558:	46bd      	mov	sp, r7
 801255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255e:	4770      	bx	lr
 8012560:	2400136c 	.word	0x2400136c
 8012564:	24004f6c 	.word	0x24004f6c
 8012568:	24004f74 	.word	0x24004f74
 801256c:	24004f7c 	.word	0x24004f7c
 8012570:	24004f78 	.word	0x24004f78
 8012574:	24004f88 	.word	0x24004f88

08012578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012578:	b480      	push	{r7}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012580:	4b28      	ldr	r3, [pc, #160]	; (8012624 <prvInsertBlockIntoFreeList+0xac>)
 8012582:	60fb      	str	r3, [r7, #12]
 8012584:	e002      	b.n	801258c <prvInsertBlockIntoFreeList+0x14>
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	429a      	cmp	r2, r3
 8012594:	d8f7      	bhi.n	8012586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	68ba      	ldr	r2, [r7, #8]
 80125a0:	4413      	add	r3, r2
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d108      	bne.n	80125ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	685a      	ldr	r2, [r3, #4]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	441a      	add	r2, r3
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	68ba      	ldr	r2, [r7, #8]
 80125c4:	441a      	add	r2, r3
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d118      	bne.n	8012600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	4b15      	ldr	r3, [pc, #84]	; (8012628 <prvInsertBlockIntoFreeList+0xb0>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d00d      	beq.n	80125f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	685a      	ldr	r2, [r3, #4]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	441a      	add	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	601a      	str	r2, [r3, #0]
 80125f4:	e008      	b.n	8012608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80125f6:	4b0c      	ldr	r3, [pc, #48]	; (8012628 <prvInsertBlockIntoFreeList+0xb0>)
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	601a      	str	r2, [r3, #0]
 80125fe:	e003      	b.n	8012608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	429a      	cmp	r2, r3
 801260e:	d002      	beq.n	8012616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	687a      	ldr	r2, [r7, #4]
 8012614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012616:	bf00      	nop
 8012618:	3714      	adds	r7, #20
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop
 8012624:	24004f6c 	.word	0x24004f6c
 8012628:	24004f74 	.word	0x24004f74

0801262c <__errno>:
 801262c:	4b01      	ldr	r3, [pc, #4]	; (8012634 <__errno+0x8>)
 801262e:	6818      	ldr	r0, [r3, #0]
 8012630:	4770      	bx	lr
 8012632:	bf00      	nop
 8012634:	24000014 	.word	0x24000014

08012638 <__libc_init_array>:
 8012638:	b570      	push	{r4, r5, r6, lr}
 801263a:	4d0d      	ldr	r5, [pc, #52]	; (8012670 <__libc_init_array+0x38>)
 801263c:	4c0d      	ldr	r4, [pc, #52]	; (8012674 <__libc_init_array+0x3c>)
 801263e:	1b64      	subs	r4, r4, r5
 8012640:	10a4      	asrs	r4, r4, #2
 8012642:	2600      	movs	r6, #0
 8012644:	42a6      	cmp	r6, r4
 8012646:	d109      	bne.n	801265c <__libc_init_array+0x24>
 8012648:	4d0b      	ldr	r5, [pc, #44]	; (8012678 <__libc_init_array+0x40>)
 801264a:	4c0c      	ldr	r4, [pc, #48]	; (801267c <__libc_init_array+0x44>)
 801264c:	f000 fd2c 	bl	80130a8 <_init>
 8012650:	1b64      	subs	r4, r4, r5
 8012652:	10a4      	asrs	r4, r4, #2
 8012654:	2600      	movs	r6, #0
 8012656:	42a6      	cmp	r6, r4
 8012658:	d105      	bne.n	8012666 <__libc_init_array+0x2e>
 801265a:	bd70      	pop	{r4, r5, r6, pc}
 801265c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012660:	4798      	blx	r3
 8012662:	3601      	adds	r6, #1
 8012664:	e7ee      	b.n	8012644 <__libc_init_array+0xc>
 8012666:	f855 3b04 	ldr.w	r3, [r5], #4
 801266a:	4798      	blx	r3
 801266c:	3601      	adds	r6, #1
 801266e:	e7f2      	b.n	8012656 <__libc_init_array+0x1e>
 8012670:	080133f8 	.word	0x080133f8
 8012674:	080133f8 	.word	0x080133f8
 8012678:	080133f8 	.word	0x080133f8
 801267c:	080133fc 	.word	0x080133fc

08012680 <memcpy>:
 8012680:	440a      	add	r2, r1
 8012682:	4291      	cmp	r1, r2
 8012684:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012688:	d100      	bne.n	801268c <memcpy+0xc>
 801268a:	4770      	bx	lr
 801268c:	b510      	push	{r4, lr}
 801268e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012696:	4291      	cmp	r1, r2
 8012698:	d1f9      	bne.n	801268e <memcpy+0xe>
 801269a:	bd10      	pop	{r4, pc}

0801269c <memset>:
 801269c:	4402      	add	r2, r0
 801269e:	4603      	mov	r3, r0
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d100      	bne.n	80126a6 <memset+0xa>
 80126a4:	4770      	bx	lr
 80126a6:	f803 1b01 	strb.w	r1, [r3], #1
 80126aa:	e7f9      	b.n	80126a0 <memset+0x4>

080126ac <_puts_r>:
 80126ac:	b570      	push	{r4, r5, r6, lr}
 80126ae:	460e      	mov	r6, r1
 80126b0:	4605      	mov	r5, r0
 80126b2:	b118      	cbz	r0, 80126bc <_puts_r+0x10>
 80126b4:	6983      	ldr	r3, [r0, #24]
 80126b6:	b90b      	cbnz	r3, 80126bc <_puts_r+0x10>
 80126b8:	f000 fa48 	bl	8012b4c <__sinit>
 80126bc:	69ab      	ldr	r3, [r5, #24]
 80126be:	68ac      	ldr	r4, [r5, #8]
 80126c0:	b913      	cbnz	r3, 80126c8 <_puts_r+0x1c>
 80126c2:	4628      	mov	r0, r5
 80126c4:	f000 fa42 	bl	8012b4c <__sinit>
 80126c8:	4b2c      	ldr	r3, [pc, #176]	; (801277c <_puts_r+0xd0>)
 80126ca:	429c      	cmp	r4, r3
 80126cc:	d120      	bne.n	8012710 <_puts_r+0x64>
 80126ce:	686c      	ldr	r4, [r5, #4]
 80126d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126d2:	07db      	lsls	r3, r3, #31
 80126d4:	d405      	bmi.n	80126e2 <_puts_r+0x36>
 80126d6:	89a3      	ldrh	r3, [r4, #12]
 80126d8:	0598      	lsls	r0, r3, #22
 80126da:	d402      	bmi.n	80126e2 <_puts_r+0x36>
 80126dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126de:	f000 fad3 	bl	8012c88 <__retarget_lock_acquire_recursive>
 80126e2:	89a3      	ldrh	r3, [r4, #12]
 80126e4:	0719      	lsls	r1, r3, #28
 80126e6:	d51d      	bpl.n	8012724 <_puts_r+0x78>
 80126e8:	6923      	ldr	r3, [r4, #16]
 80126ea:	b1db      	cbz	r3, 8012724 <_puts_r+0x78>
 80126ec:	3e01      	subs	r6, #1
 80126ee:	68a3      	ldr	r3, [r4, #8]
 80126f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80126f4:	3b01      	subs	r3, #1
 80126f6:	60a3      	str	r3, [r4, #8]
 80126f8:	bb39      	cbnz	r1, 801274a <_puts_r+0x9e>
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	da38      	bge.n	8012770 <_puts_r+0xc4>
 80126fe:	4622      	mov	r2, r4
 8012700:	210a      	movs	r1, #10
 8012702:	4628      	mov	r0, r5
 8012704:	f000 f848 	bl	8012798 <__swbuf_r>
 8012708:	3001      	adds	r0, #1
 801270a:	d011      	beq.n	8012730 <_puts_r+0x84>
 801270c:	250a      	movs	r5, #10
 801270e:	e011      	b.n	8012734 <_puts_r+0x88>
 8012710:	4b1b      	ldr	r3, [pc, #108]	; (8012780 <_puts_r+0xd4>)
 8012712:	429c      	cmp	r4, r3
 8012714:	d101      	bne.n	801271a <_puts_r+0x6e>
 8012716:	68ac      	ldr	r4, [r5, #8]
 8012718:	e7da      	b.n	80126d0 <_puts_r+0x24>
 801271a:	4b1a      	ldr	r3, [pc, #104]	; (8012784 <_puts_r+0xd8>)
 801271c:	429c      	cmp	r4, r3
 801271e:	bf08      	it	eq
 8012720:	68ec      	ldreq	r4, [r5, #12]
 8012722:	e7d5      	b.n	80126d0 <_puts_r+0x24>
 8012724:	4621      	mov	r1, r4
 8012726:	4628      	mov	r0, r5
 8012728:	f000 f888 	bl	801283c <__swsetup_r>
 801272c:	2800      	cmp	r0, #0
 801272e:	d0dd      	beq.n	80126ec <_puts_r+0x40>
 8012730:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012736:	07da      	lsls	r2, r3, #31
 8012738:	d405      	bmi.n	8012746 <_puts_r+0x9a>
 801273a:	89a3      	ldrh	r3, [r4, #12]
 801273c:	059b      	lsls	r3, r3, #22
 801273e:	d402      	bmi.n	8012746 <_puts_r+0x9a>
 8012740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012742:	f000 faa2 	bl	8012c8a <__retarget_lock_release_recursive>
 8012746:	4628      	mov	r0, r5
 8012748:	bd70      	pop	{r4, r5, r6, pc}
 801274a:	2b00      	cmp	r3, #0
 801274c:	da04      	bge.n	8012758 <_puts_r+0xac>
 801274e:	69a2      	ldr	r2, [r4, #24]
 8012750:	429a      	cmp	r2, r3
 8012752:	dc06      	bgt.n	8012762 <_puts_r+0xb6>
 8012754:	290a      	cmp	r1, #10
 8012756:	d004      	beq.n	8012762 <_puts_r+0xb6>
 8012758:	6823      	ldr	r3, [r4, #0]
 801275a:	1c5a      	adds	r2, r3, #1
 801275c:	6022      	str	r2, [r4, #0]
 801275e:	7019      	strb	r1, [r3, #0]
 8012760:	e7c5      	b.n	80126ee <_puts_r+0x42>
 8012762:	4622      	mov	r2, r4
 8012764:	4628      	mov	r0, r5
 8012766:	f000 f817 	bl	8012798 <__swbuf_r>
 801276a:	3001      	adds	r0, #1
 801276c:	d1bf      	bne.n	80126ee <_puts_r+0x42>
 801276e:	e7df      	b.n	8012730 <_puts_r+0x84>
 8012770:	6823      	ldr	r3, [r4, #0]
 8012772:	250a      	movs	r5, #10
 8012774:	1c5a      	adds	r2, r3, #1
 8012776:	6022      	str	r2, [r4, #0]
 8012778:	701d      	strb	r5, [r3, #0]
 801277a:	e7db      	b.n	8012734 <_puts_r+0x88>
 801277c:	080133b0 	.word	0x080133b0
 8012780:	080133d0 	.word	0x080133d0
 8012784:	08013390 	.word	0x08013390

08012788 <puts>:
 8012788:	4b02      	ldr	r3, [pc, #8]	; (8012794 <puts+0xc>)
 801278a:	4601      	mov	r1, r0
 801278c:	6818      	ldr	r0, [r3, #0]
 801278e:	f7ff bf8d 	b.w	80126ac <_puts_r>
 8012792:	bf00      	nop
 8012794:	24000014 	.word	0x24000014

08012798 <__swbuf_r>:
 8012798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801279a:	460e      	mov	r6, r1
 801279c:	4614      	mov	r4, r2
 801279e:	4605      	mov	r5, r0
 80127a0:	b118      	cbz	r0, 80127aa <__swbuf_r+0x12>
 80127a2:	6983      	ldr	r3, [r0, #24]
 80127a4:	b90b      	cbnz	r3, 80127aa <__swbuf_r+0x12>
 80127a6:	f000 f9d1 	bl	8012b4c <__sinit>
 80127aa:	4b21      	ldr	r3, [pc, #132]	; (8012830 <__swbuf_r+0x98>)
 80127ac:	429c      	cmp	r4, r3
 80127ae:	d12b      	bne.n	8012808 <__swbuf_r+0x70>
 80127b0:	686c      	ldr	r4, [r5, #4]
 80127b2:	69a3      	ldr	r3, [r4, #24]
 80127b4:	60a3      	str	r3, [r4, #8]
 80127b6:	89a3      	ldrh	r3, [r4, #12]
 80127b8:	071a      	lsls	r2, r3, #28
 80127ba:	d52f      	bpl.n	801281c <__swbuf_r+0x84>
 80127bc:	6923      	ldr	r3, [r4, #16]
 80127be:	b36b      	cbz	r3, 801281c <__swbuf_r+0x84>
 80127c0:	6923      	ldr	r3, [r4, #16]
 80127c2:	6820      	ldr	r0, [r4, #0]
 80127c4:	1ac0      	subs	r0, r0, r3
 80127c6:	6963      	ldr	r3, [r4, #20]
 80127c8:	b2f6      	uxtb	r6, r6
 80127ca:	4283      	cmp	r3, r0
 80127cc:	4637      	mov	r7, r6
 80127ce:	dc04      	bgt.n	80127da <__swbuf_r+0x42>
 80127d0:	4621      	mov	r1, r4
 80127d2:	4628      	mov	r0, r5
 80127d4:	f000 f926 	bl	8012a24 <_fflush_r>
 80127d8:	bb30      	cbnz	r0, 8012828 <__swbuf_r+0x90>
 80127da:	68a3      	ldr	r3, [r4, #8]
 80127dc:	3b01      	subs	r3, #1
 80127de:	60a3      	str	r3, [r4, #8]
 80127e0:	6823      	ldr	r3, [r4, #0]
 80127e2:	1c5a      	adds	r2, r3, #1
 80127e4:	6022      	str	r2, [r4, #0]
 80127e6:	701e      	strb	r6, [r3, #0]
 80127e8:	6963      	ldr	r3, [r4, #20]
 80127ea:	3001      	adds	r0, #1
 80127ec:	4283      	cmp	r3, r0
 80127ee:	d004      	beq.n	80127fa <__swbuf_r+0x62>
 80127f0:	89a3      	ldrh	r3, [r4, #12]
 80127f2:	07db      	lsls	r3, r3, #31
 80127f4:	d506      	bpl.n	8012804 <__swbuf_r+0x6c>
 80127f6:	2e0a      	cmp	r6, #10
 80127f8:	d104      	bne.n	8012804 <__swbuf_r+0x6c>
 80127fa:	4621      	mov	r1, r4
 80127fc:	4628      	mov	r0, r5
 80127fe:	f000 f911 	bl	8012a24 <_fflush_r>
 8012802:	b988      	cbnz	r0, 8012828 <__swbuf_r+0x90>
 8012804:	4638      	mov	r0, r7
 8012806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012808:	4b0a      	ldr	r3, [pc, #40]	; (8012834 <__swbuf_r+0x9c>)
 801280a:	429c      	cmp	r4, r3
 801280c:	d101      	bne.n	8012812 <__swbuf_r+0x7a>
 801280e:	68ac      	ldr	r4, [r5, #8]
 8012810:	e7cf      	b.n	80127b2 <__swbuf_r+0x1a>
 8012812:	4b09      	ldr	r3, [pc, #36]	; (8012838 <__swbuf_r+0xa0>)
 8012814:	429c      	cmp	r4, r3
 8012816:	bf08      	it	eq
 8012818:	68ec      	ldreq	r4, [r5, #12]
 801281a:	e7ca      	b.n	80127b2 <__swbuf_r+0x1a>
 801281c:	4621      	mov	r1, r4
 801281e:	4628      	mov	r0, r5
 8012820:	f000 f80c 	bl	801283c <__swsetup_r>
 8012824:	2800      	cmp	r0, #0
 8012826:	d0cb      	beq.n	80127c0 <__swbuf_r+0x28>
 8012828:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801282c:	e7ea      	b.n	8012804 <__swbuf_r+0x6c>
 801282e:	bf00      	nop
 8012830:	080133b0 	.word	0x080133b0
 8012834:	080133d0 	.word	0x080133d0
 8012838:	08013390 	.word	0x08013390

0801283c <__swsetup_r>:
 801283c:	4b32      	ldr	r3, [pc, #200]	; (8012908 <__swsetup_r+0xcc>)
 801283e:	b570      	push	{r4, r5, r6, lr}
 8012840:	681d      	ldr	r5, [r3, #0]
 8012842:	4606      	mov	r6, r0
 8012844:	460c      	mov	r4, r1
 8012846:	b125      	cbz	r5, 8012852 <__swsetup_r+0x16>
 8012848:	69ab      	ldr	r3, [r5, #24]
 801284a:	b913      	cbnz	r3, 8012852 <__swsetup_r+0x16>
 801284c:	4628      	mov	r0, r5
 801284e:	f000 f97d 	bl	8012b4c <__sinit>
 8012852:	4b2e      	ldr	r3, [pc, #184]	; (801290c <__swsetup_r+0xd0>)
 8012854:	429c      	cmp	r4, r3
 8012856:	d10f      	bne.n	8012878 <__swsetup_r+0x3c>
 8012858:	686c      	ldr	r4, [r5, #4]
 801285a:	89a3      	ldrh	r3, [r4, #12]
 801285c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012860:	0719      	lsls	r1, r3, #28
 8012862:	d42c      	bmi.n	80128be <__swsetup_r+0x82>
 8012864:	06dd      	lsls	r5, r3, #27
 8012866:	d411      	bmi.n	801288c <__swsetup_r+0x50>
 8012868:	2309      	movs	r3, #9
 801286a:	6033      	str	r3, [r6, #0]
 801286c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012870:	81a3      	strh	r3, [r4, #12]
 8012872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012876:	e03e      	b.n	80128f6 <__swsetup_r+0xba>
 8012878:	4b25      	ldr	r3, [pc, #148]	; (8012910 <__swsetup_r+0xd4>)
 801287a:	429c      	cmp	r4, r3
 801287c:	d101      	bne.n	8012882 <__swsetup_r+0x46>
 801287e:	68ac      	ldr	r4, [r5, #8]
 8012880:	e7eb      	b.n	801285a <__swsetup_r+0x1e>
 8012882:	4b24      	ldr	r3, [pc, #144]	; (8012914 <__swsetup_r+0xd8>)
 8012884:	429c      	cmp	r4, r3
 8012886:	bf08      	it	eq
 8012888:	68ec      	ldreq	r4, [r5, #12]
 801288a:	e7e6      	b.n	801285a <__swsetup_r+0x1e>
 801288c:	0758      	lsls	r0, r3, #29
 801288e:	d512      	bpl.n	80128b6 <__swsetup_r+0x7a>
 8012890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012892:	b141      	cbz	r1, 80128a6 <__swsetup_r+0x6a>
 8012894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012898:	4299      	cmp	r1, r3
 801289a:	d002      	beq.n	80128a2 <__swsetup_r+0x66>
 801289c:	4630      	mov	r0, r6
 801289e:	f000 fa5b 	bl	8012d58 <_free_r>
 80128a2:	2300      	movs	r3, #0
 80128a4:	6363      	str	r3, [r4, #52]	; 0x34
 80128a6:	89a3      	ldrh	r3, [r4, #12]
 80128a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80128ac:	81a3      	strh	r3, [r4, #12]
 80128ae:	2300      	movs	r3, #0
 80128b0:	6063      	str	r3, [r4, #4]
 80128b2:	6923      	ldr	r3, [r4, #16]
 80128b4:	6023      	str	r3, [r4, #0]
 80128b6:	89a3      	ldrh	r3, [r4, #12]
 80128b8:	f043 0308 	orr.w	r3, r3, #8
 80128bc:	81a3      	strh	r3, [r4, #12]
 80128be:	6923      	ldr	r3, [r4, #16]
 80128c0:	b94b      	cbnz	r3, 80128d6 <__swsetup_r+0x9a>
 80128c2:	89a3      	ldrh	r3, [r4, #12]
 80128c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80128c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128cc:	d003      	beq.n	80128d6 <__swsetup_r+0x9a>
 80128ce:	4621      	mov	r1, r4
 80128d0:	4630      	mov	r0, r6
 80128d2:	f000 fa01 	bl	8012cd8 <__smakebuf_r>
 80128d6:	89a0      	ldrh	r0, [r4, #12]
 80128d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80128dc:	f010 0301 	ands.w	r3, r0, #1
 80128e0:	d00a      	beq.n	80128f8 <__swsetup_r+0xbc>
 80128e2:	2300      	movs	r3, #0
 80128e4:	60a3      	str	r3, [r4, #8]
 80128e6:	6963      	ldr	r3, [r4, #20]
 80128e8:	425b      	negs	r3, r3
 80128ea:	61a3      	str	r3, [r4, #24]
 80128ec:	6923      	ldr	r3, [r4, #16]
 80128ee:	b943      	cbnz	r3, 8012902 <__swsetup_r+0xc6>
 80128f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80128f4:	d1ba      	bne.n	801286c <__swsetup_r+0x30>
 80128f6:	bd70      	pop	{r4, r5, r6, pc}
 80128f8:	0781      	lsls	r1, r0, #30
 80128fa:	bf58      	it	pl
 80128fc:	6963      	ldrpl	r3, [r4, #20]
 80128fe:	60a3      	str	r3, [r4, #8]
 8012900:	e7f4      	b.n	80128ec <__swsetup_r+0xb0>
 8012902:	2000      	movs	r0, #0
 8012904:	e7f7      	b.n	80128f6 <__swsetup_r+0xba>
 8012906:	bf00      	nop
 8012908:	24000014 	.word	0x24000014
 801290c:	080133b0 	.word	0x080133b0
 8012910:	080133d0 	.word	0x080133d0
 8012914:	08013390 	.word	0x08013390

08012918 <__sflush_r>:
 8012918:	898a      	ldrh	r2, [r1, #12]
 801291a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801291e:	4605      	mov	r5, r0
 8012920:	0710      	lsls	r0, r2, #28
 8012922:	460c      	mov	r4, r1
 8012924:	d458      	bmi.n	80129d8 <__sflush_r+0xc0>
 8012926:	684b      	ldr	r3, [r1, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	dc05      	bgt.n	8012938 <__sflush_r+0x20>
 801292c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801292e:	2b00      	cmp	r3, #0
 8012930:	dc02      	bgt.n	8012938 <__sflush_r+0x20>
 8012932:	2000      	movs	r0, #0
 8012934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801293a:	2e00      	cmp	r6, #0
 801293c:	d0f9      	beq.n	8012932 <__sflush_r+0x1a>
 801293e:	2300      	movs	r3, #0
 8012940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012944:	682f      	ldr	r7, [r5, #0]
 8012946:	602b      	str	r3, [r5, #0]
 8012948:	d032      	beq.n	80129b0 <__sflush_r+0x98>
 801294a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801294c:	89a3      	ldrh	r3, [r4, #12]
 801294e:	075a      	lsls	r2, r3, #29
 8012950:	d505      	bpl.n	801295e <__sflush_r+0x46>
 8012952:	6863      	ldr	r3, [r4, #4]
 8012954:	1ac0      	subs	r0, r0, r3
 8012956:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012958:	b10b      	cbz	r3, 801295e <__sflush_r+0x46>
 801295a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801295c:	1ac0      	subs	r0, r0, r3
 801295e:	2300      	movs	r3, #0
 8012960:	4602      	mov	r2, r0
 8012962:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012964:	6a21      	ldr	r1, [r4, #32]
 8012966:	4628      	mov	r0, r5
 8012968:	47b0      	blx	r6
 801296a:	1c43      	adds	r3, r0, #1
 801296c:	89a3      	ldrh	r3, [r4, #12]
 801296e:	d106      	bne.n	801297e <__sflush_r+0x66>
 8012970:	6829      	ldr	r1, [r5, #0]
 8012972:	291d      	cmp	r1, #29
 8012974:	d82c      	bhi.n	80129d0 <__sflush_r+0xb8>
 8012976:	4a2a      	ldr	r2, [pc, #168]	; (8012a20 <__sflush_r+0x108>)
 8012978:	40ca      	lsrs	r2, r1
 801297a:	07d6      	lsls	r6, r2, #31
 801297c:	d528      	bpl.n	80129d0 <__sflush_r+0xb8>
 801297e:	2200      	movs	r2, #0
 8012980:	6062      	str	r2, [r4, #4]
 8012982:	04d9      	lsls	r1, r3, #19
 8012984:	6922      	ldr	r2, [r4, #16]
 8012986:	6022      	str	r2, [r4, #0]
 8012988:	d504      	bpl.n	8012994 <__sflush_r+0x7c>
 801298a:	1c42      	adds	r2, r0, #1
 801298c:	d101      	bne.n	8012992 <__sflush_r+0x7a>
 801298e:	682b      	ldr	r3, [r5, #0]
 8012990:	b903      	cbnz	r3, 8012994 <__sflush_r+0x7c>
 8012992:	6560      	str	r0, [r4, #84]	; 0x54
 8012994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012996:	602f      	str	r7, [r5, #0]
 8012998:	2900      	cmp	r1, #0
 801299a:	d0ca      	beq.n	8012932 <__sflush_r+0x1a>
 801299c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129a0:	4299      	cmp	r1, r3
 80129a2:	d002      	beq.n	80129aa <__sflush_r+0x92>
 80129a4:	4628      	mov	r0, r5
 80129a6:	f000 f9d7 	bl	8012d58 <_free_r>
 80129aa:	2000      	movs	r0, #0
 80129ac:	6360      	str	r0, [r4, #52]	; 0x34
 80129ae:	e7c1      	b.n	8012934 <__sflush_r+0x1c>
 80129b0:	6a21      	ldr	r1, [r4, #32]
 80129b2:	2301      	movs	r3, #1
 80129b4:	4628      	mov	r0, r5
 80129b6:	47b0      	blx	r6
 80129b8:	1c41      	adds	r1, r0, #1
 80129ba:	d1c7      	bne.n	801294c <__sflush_r+0x34>
 80129bc:	682b      	ldr	r3, [r5, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d0c4      	beq.n	801294c <__sflush_r+0x34>
 80129c2:	2b1d      	cmp	r3, #29
 80129c4:	d001      	beq.n	80129ca <__sflush_r+0xb2>
 80129c6:	2b16      	cmp	r3, #22
 80129c8:	d101      	bne.n	80129ce <__sflush_r+0xb6>
 80129ca:	602f      	str	r7, [r5, #0]
 80129cc:	e7b1      	b.n	8012932 <__sflush_r+0x1a>
 80129ce:	89a3      	ldrh	r3, [r4, #12]
 80129d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129d4:	81a3      	strh	r3, [r4, #12]
 80129d6:	e7ad      	b.n	8012934 <__sflush_r+0x1c>
 80129d8:	690f      	ldr	r7, [r1, #16]
 80129da:	2f00      	cmp	r7, #0
 80129dc:	d0a9      	beq.n	8012932 <__sflush_r+0x1a>
 80129de:	0793      	lsls	r3, r2, #30
 80129e0:	680e      	ldr	r6, [r1, #0]
 80129e2:	bf08      	it	eq
 80129e4:	694b      	ldreq	r3, [r1, #20]
 80129e6:	600f      	str	r7, [r1, #0]
 80129e8:	bf18      	it	ne
 80129ea:	2300      	movne	r3, #0
 80129ec:	eba6 0807 	sub.w	r8, r6, r7
 80129f0:	608b      	str	r3, [r1, #8]
 80129f2:	f1b8 0f00 	cmp.w	r8, #0
 80129f6:	dd9c      	ble.n	8012932 <__sflush_r+0x1a>
 80129f8:	6a21      	ldr	r1, [r4, #32]
 80129fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129fc:	4643      	mov	r3, r8
 80129fe:	463a      	mov	r2, r7
 8012a00:	4628      	mov	r0, r5
 8012a02:	47b0      	blx	r6
 8012a04:	2800      	cmp	r0, #0
 8012a06:	dc06      	bgt.n	8012a16 <__sflush_r+0xfe>
 8012a08:	89a3      	ldrh	r3, [r4, #12]
 8012a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a0e:	81a3      	strh	r3, [r4, #12]
 8012a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a14:	e78e      	b.n	8012934 <__sflush_r+0x1c>
 8012a16:	4407      	add	r7, r0
 8012a18:	eba8 0800 	sub.w	r8, r8, r0
 8012a1c:	e7e9      	b.n	80129f2 <__sflush_r+0xda>
 8012a1e:	bf00      	nop
 8012a20:	20400001 	.word	0x20400001

08012a24 <_fflush_r>:
 8012a24:	b538      	push	{r3, r4, r5, lr}
 8012a26:	690b      	ldr	r3, [r1, #16]
 8012a28:	4605      	mov	r5, r0
 8012a2a:	460c      	mov	r4, r1
 8012a2c:	b913      	cbnz	r3, 8012a34 <_fflush_r+0x10>
 8012a2e:	2500      	movs	r5, #0
 8012a30:	4628      	mov	r0, r5
 8012a32:	bd38      	pop	{r3, r4, r5, pc}
 8012a34:	b118      	cbz	r0, 8012a3e <_fflush_r+0x1a>
 8012a36:	6983      	ldr	r3, [r0, #24]
 8012a38:	b90b      	cbnz	r3, 8012a3e <_fflush_r+0x1a>
 8012a3a:	f000 f887 	bl	8012b4c <__sinit>
 8012a3e:	4b14      	ldr	r3, [pc, #80]	; (8012a90 <_fflush_r+0x6c>)
 8012a40:	429c      	cmp	r4, r3
 8012a42:	d11b      	bne.n	8012a7c <_fflush_r+0x58>
 8012a44:	686c      	ldr	r4, [r5, #4]
 8012a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d0ef      	beq.n	8012a2e <_fflush_r+0xa>
 8012a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012a50:	07d0      	lsls	r0, r2, #31
 8012a52:	d404      	bmi.n	8012a5e <_fflush_r+0x3a>
 8012a54:	0599      	lsls	r1, r3, #22
 8012a56:	d402      	bmi.n	8012a5e <_fflush_r+0x3a>
 8012a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a5a:	f000 f915 	bl	8012c88 <__retarget_lock_acquire_recursive>
 8012a5e:	4628      	mov	r0, r5
 8012a60:	4621      	mov	r1, r4
 8012a62:	f7ff ff59 	bl	8012918 <__sflush_r>
 8012a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a68:	07da      	lsls	r2, r3, #31
 8012a6a:	4605      	mov	r5, r0
 8012a6c:	d4e0      	bmi.n	8012a30 <_fflush_r+0xc>
 8012a6e:	89a3      	ldrh	r3, [r4, #12]
 8012a70:	059b      	lsls	r3, r3, #22
 8012a72:	d4dd      	bmi.n	8012a30 <_fflush_r+0xc>
 8012a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a76:	f000 f908 	bl	8012c8a <__retarget_lock_release_recursive>
 8012a7a:	e7d9      	b.n	8012a30 <_fflush_r+0xc>
 8012a7c:	4b05      	ldr	r3, [pc, #20]	; (8012a94 <_fflush_r+0x70>)
 8012a7e:	429c      	cmp	r4, r3
 8012a80:	d101      	bne.n	8012a86 <_fflush_r+0x62>
 8012a82:	68ac      	ldr	r4, [r5, #8]
 8012a84:	e7df      	b.n	8012a46 <_fflush_r+0x22>
 8012a86:	4b04      	ldr	r3, [pc, #16]	; (8012a98 <_fflush_r+0x74>)
 8012a88:	429c      	cmp	r4, r3
 8012a8a:	bf08      	it	eq
 8012a8c:	68ec      	ldreq	r4, [r5, #12]
 8012a8e:	e7da      	b.n	8012a46 <_fflush_r+0x22>
 8012a90:	080133b0 	.word	0x080133b0
 8012a94:	080133d0 	.word	0x080133d0
 8012a98:	08013390 	.word	0x08013390

08012a9c <std>:
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	b510      	push	{r4, lr}
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	e9c0 3300 	strd	r3, r3, [r0]
 8012aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012aaa:	6083      	str	r3, [r0, #8]
 8012aac:	8181      	strh	r1, [r0, #12]
 8012aae:	6643      	str	r3, [r0, #100]	; 0x64
 8012ab0:	81c2      	strh	r2, [r0, #14]
 8012ab2:	6183      	str	r3, [r0, #24]
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	2208      	movs	r2, #8
 8012ab8:	305c      	adds	r0, #92	; 0x5c
 8012aba:	f7ff fdef 	bl	801269c <memset>
 8012abe:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <std+0x38>)
 8012ac0:	6263      	str	r3, [r4, #36]	; 0x24
 8012ac2:	4b05      	ldr	r3, [pc, #20]	; (8012ad8 <std+0x3c>)
 8012ac4:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ac6:	4b05      	ldr	r3, [pc, #20]	; (8012adc <std+0x40>)
 8012ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012aca:	4b05      	ldr	r3, [pc, #20]	; (8012ae0 <std+0x44>)
 8012acc:	6224      	str	r4, [r4, #32]
 8012ace:	6323      	str	r3, [r4, #48]	; 0x30
 8012ad0:	bd10      	pop	{r4, pc}
 8012ad2:	bf00      	nop
 8012ad4:	08012f39 	.word	0x08012f39
 8012ad8:	08012f5b 	.word	0x08012f5b
 8012adc:	08012f93 	.word	0x08012f93
 8012ae0:	08012fb7 	.word	0x08012fb7

08012ae4 <_cleanup_r>:
 8012ae4:	4901      	ldr	r1, [pc, #4]	; (8012aec <_cleanup_r+0x8>)
 8012ae6:	f000 b8af 	b.w	8012c48 <_fwalk_reent>
 8012aea:	bf00      	nop
 8012aec:	08012a25 	.word	0x08012a25

08012af0 <__sfmoreglue>:
 8012af0:	b570      	push	{r4, r5, r6, lr}
 8012af2:	2268      	movs	r2, #104	; 0x68
 8012af4:	1e4d      	subs	r5, r1, #1
 8012af6:	4355      	muls	r5, r2
 8012af8:	460e      	mov	r6, r1
 8012afa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012afe:	f000 f997 	bl	8012e30 <_malloc_r>
 8012b02:	4604      	mov	r4, r0
 8012b04:	b140      	cbz	r0, 8012b18 <__sfmoreglue+0x28>
 8012b06:	2100      	movs	r1, #0
 8012b08:	e9c0 1600 	strd	r1, r6, [r0]
 8012b0c:	300c      	adds	r0, #12
 8012b0e:	60a0      	str	r0, [r4, #8]
 8012b10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b14:	f7ff fdc2 	bl	801269c <memset>
 8012b18:	4620      	mov	r0, r4
 8012b1a:	bd70      	pop	{r4, r5, r6, pc}

08012b1c <__sfp_lock_acquire>:
 8012b1c:	4801      	ldr	r0, [pc, #4]	; (8012b24 <__sfp_lock_acquire+0x8>)
 8012b1e:	f000 b8b3 	b.w	8012c88 <__retarget_lock_acquire_recursive>
 8012b22:	bf00      	nop
 8012b24:	24004f8d 	.word	0x24004f8d

08012b28 <__sfp_lock_release>:
 8012b28:	4801      	ldr	r0, [pc, #4]	; (8012b30 <__sfp_lock_release+0x8>)
 8012b2a:	f000 b8ae 	b.w	8012c8a <__retarget_lock_release_recursive>
 8012b2e:	bf00      	nop
 8012b30:	24004f8d 	.word	0x24004f8d

08012b34 <__sinit_lock_acquire>:
 8012b34:	4801      	ldr	r0, [pc, #4]	; (8012b3c <__sinit_lock_acquire+0x8>)
 8012b36:	f000 b8a7 	b.w	8012c88 <__retarget_lock_acquire_recursive>
 8012b3a:	bf00      	nop
 8012b3c:	24004f8e 	.word	0x24004f8e

08012b40 <__sinit_lock_release>:
 8012b40:	4801      	ldr	r0, [pc, #4]	; (8012b48 <__sinit_lock_release+0x8>)
 8012b42:	f000 b8a2 	b.w	8012c8a <__retarget_lock_release_recursive>
 8012b46:	bf00      	nop
 8012b48:	24004f8e 	.word	0x24004f8e

08012b4c <__sinit>:
 8012b4c:	b510      	push	{r4, lr}
 8012b4e:	4604      	mov	r4, r0
 8012b50:	f7ff fff0 	bl	8012b34 <__sinit_lock_acquire>
 8012b54:	69a3      	ldr	r3, [r4, #24]
 8012b56:	b11b      	cbz	r3, 8012b60 <__sinit+0x14>
 8012b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b5c:	f7ff bff0 	b.w	8012b40 <__sinit_lock_release>
 8012b60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012b64:	6523      	str	r3, [r4, #80]	; 0x50
 8012b66:	4b13      	ldr	r3, [pc, #76]	; (8012bb4 <__sinit+0x68>)
 8012b68:	4a13      	ldr	r2, [pc, #76]	; (8012bb8 <__sinit+0x6c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8012b6e:	42a3      	cmp	r3, r4
 8012b70:	bf04      	itt	eq
 8012b72:	2301      	moveq	r3, #1
 8012b74:	61a3      	streq	r3, [r4, #24]
 8012b76:	4620      	mov	r0, r4
 8012b78:	f000 f820 	bl	8012bbc <__sfp>
 8012b7c:	6060      	str	r0, [r4, #4]
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f000 f81c 	bl	8012bbc <__sfp>
 8012b84:	60a0      	str	r0, [r4, #8]
 8012b86:	4620      	mov	r0, r4
 8012b88:	f000 f818 	bl	8012bbc <__sfp>
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	60e0      	str	r0, [r4, #12]
 8012b90:	2104      	movs	r1, #4
 8012b92:	6860      	ldr	r0, [r4, #4]
 8012b94:	f7ff ff82 	bl	8012a9c <std>
 8012b98:	68a0      	ldr	r0, [r4, #8]
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	2109      	movs	r1, #9
 8012b9e:	f7ff ff7d 	bl	8012a9c <std>
 8012ba2:	68e0      	ldr	r0, [r4, #12]
 8012ba4:	2202      	movs	r2, #2
 8012ba6:	2112      	movs	r1, #18
 8012ba8:	f7ff ff78 	bl	8012a9c <std>
 8012bac:	2301      	movs	r3, #1
 8012bae:	61a3      	str	r3, [r4, #24]
 8012bb0:	e7d2      	b.n	8012b58 <__sinit+0xc>
 8012bb2:	bf00      	nop
 8012bb4:	0801338c 	.word	0x0801338c
 8012bb8:	08012ae5 	.word	0x08012ae5

08012bbc <__sfp>:
 8012bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bbe:	4607      	mov	r7, r0
 8012bc0:	f7ff ffac 	bl	8012b1c <__sfp_lock_acquire>
 8012bc4:	4b1e      	ldr	r3, [pc, #120]	; (8012c40 <__sfp+0x84>)
 8012bc6:	681e      	ldr	r6, [r3, #0]
 8012bc8:	69b3      	ldr	r3, [r6, #24]
 8012bca:	b913      	cbnz	r3, 8012bd2 <__sfp+0x16>
 8012bcc:	4630      	mov	r0, r6
 8012bce:	f7ff ffbd 	bl	8012b4c <__sinit>
 8012bd2:	3648      	adds	r6, #72	; 0x48
 8012bd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012bd8:	3b01      	subs	r3, #1
 8012bda:	d503      	bpl.n	8012be4 <__sfp+0x28>
 8012bdc:	6833      	ldr	r3, [r6, #0]
 8012bde:	b30b      	cbz	r3, 8012c24 <__sfp+0x68>
 8012be0:	6836      	ldr	r6, [r6, #0]
 8012be2:	e7f7      	b.n	8012bd4 <__sfp+0x18>
 8012be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012be8:	b9d5      	cbnz	r5, 8012c20 <__sfp+0x64>
 8012bea:	4b16      	ldr	r3, [pc, #88]	; (8012c44 <__sfp+0x88>)
 8012bec:	60e3      	str	r3, [r4, #12]
 8012bee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012bf2:	6665      	str	r5, [r4, #100]	; 0x64
 8012bf4:	f000 f847 	bl	8012c86 <__retarget_lock_init_recursive>
 8012bf8:	f7ff ff96 	bl	8012b28 <__sfp_lock_release>
 8012bfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012c00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012c04:	6025      	str	r5, [r4, #0]
 8012c06:	61a5      	str	r5, [r4, #24]
 8012c08:	2208      	movs	r2, #8
 8012c0a:	4629      	mov	r1, r5
 8012c0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c10:	f7ff fd44 	bl	801269c <memset>
 8012c14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c1c:	4620      	mov	r0, r4
 8012c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c20:	3468      	adds	r4, #104	; 0x68
 8012c22:	e7d9      	b.n	8012bd8 <__sfp+0x1c>
 8012c24:	2104      	movs	r1, #4
 8012c26:	4638      	mov	r0, r7
 8012c28:	f7ff ff62 	bl	8012af0 <__sfmoreglue>
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	6030      	str	r0, [r6, #0]
 8012c30:	2800      	cmp	r0, #0
 8012c32:	d1d5      	bne.n	8012be0 <__sfp+0x24>
 8012c34:	f7ff ff78 	bl	8012b28 <__sfp_lock_release>
 8012c38:	230c      	movs	r3, #12
 8012c3a:	603b      	str	r3, [r7, #0]
 8012c3c:	e7ee      	b.n	8012c1c <__sfp+0x60>
 8012c3e:	bf00      	nop
 8012c40:	0801338c 	.word	0x0801338c
 8012c44:	ffff0001 	.word	0xffff0001

08012c48 <_fwalk_reent>:
 8012c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c4c:	4606      	mov	r6, r0
 8012c4e:	4688      	mov	r8, r1
 8012c50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012c54:	2700      	movs	r7, #0
 8012c56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c5a:	f1b9 0901 	subs.w	r9, r9, #1
 8012c5e:	d505      	bpl.n	8012c6c <_fwalk_reent+0x24>
 8012c60:	6824      	ldr	r4, [r4, #0]
 8012c62:	2c00      	cmp	r4, #0
 8012c64:	d1f7      	bne.n	8012c56 <_fwalk_reent+0xe>
 8012c66:	4638      	mov	r0, r7
 8012c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c6c:	89ab      	ldrh	r3, [r5, #12]
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	d907      	bls.n	8012c82 <_fwalk_reent+0x3a>
 8012c72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c76:	3301      	adds	r3, #1
 8012c78:	d003      	beq.n	8012c82 <_fwalk_reent+0x3a>
 8012c7a:	4629      	mov	r1, r5
 8012c7c:	4630      	mov	r0, r6
 8012c7e:	47c0      	blx	r8
 8012c80:	4307      	orrs	r7, r0
 8012c82:	3568      	adds	r5, #104	; 0x68
 8012c84:	e7e9      	b.n	8012c5a <_fwalk_reent+0x12>

08012c86 <__retarget_lock_init_recursive>:
 8012c86:	4770      	bx	lr

08012c88 <__retarget_lock_acquire_recursive>:
 8012c88:	4770      	bx	lr

08012c8a <__retarget_lock_release_recursive>:
 8012c8a:	4770      	bx	lr

08012c8c <__swhatbuf_r>:
 8012c8c:	b570      	push	{r4, r5, r6, lr}
 8012c8e:	460e      	mov	r6, r1
 8012c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c94:	2900      	cmp	r1, #0
 8012c96:	b096      	sub	sp, #88	; 0x58
 8012c98:	4614      	mov	r4, r2
 8012c9a:	461d      	mov	r5, r3
 8012c9c:	da08      	bge.n	8012cb0 <__swhatbuf_r+0x24>
 8012c9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	602a      	str	r2, [r5, #0]
 8012ca6:	061a      	lsls	r2, r3, #24
 8012ca8:	d410      	bmi.n	8012ccc <__swhatbuf_r+0x40>
 8012caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cae:	e00e      	b.n	8012cce <__swhatbuf_r+0x42>
 8012cb0:	466a      	mov	r2, sp
 8012cb2:	f000 f9a7 	bl	8013004 <_fstat_r>
 8012cb6:	2800      	cmp	r0, #0
 8012cb8:	dbf1      	blt.n	8012c9e <__swhatbuf_r+0x12>
 8012cba:	9a01      	ldr	r2, [sp, #4]
 8012cbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012cc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012cc4:	425a      	negs	r2, r3
 8012cc6:	415a      	adcs	r2, r3
 8012cc8:	602a      	str	r2, [r5, #0]
 8012cca:	e7ee      	b.n	8012caa <__swhatbuf_r+0x1e>
 8012ccc:	2340      	movs	r3, #64	; 0x40
 8012cce:	2000      	movs	r0, #0
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	b016      	add	sp, #88	; 0x58
 8012cd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08012cd8 <__smakebuf_r>:
 8012cd8:	898b      	ldrh	r3, [r1, #12]
 8012cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012cdc:	079d      	lsls	r5, r3, #30
 8012cde:	4606      	mov	r6, r0
 8012ce0:	460c      	mov	r4, r1
 8012ce2:	d507      	bpl.n	8012cf4 <__smakebuf_r+0x1c>
 8012ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	6123      	str	r3, [r4, #16]
 8012cec:	2301      	movs	r3, #1
 8012cee:	6163      	str	r3, [r4, #20]
 8012cf0:	b002      	add	sp, #8
 8012cf2:	bd70      	pop	{r4, r5, r6, pc}
 8012cf4:	ab01      	add	r3, sp, #4
 8012cf6:	466a      	mov	r2, sp
 8012cf8:	f7ff ffc8 	bl	8012c8c <__swhatbuf_r>
 8012cfc:	9900      	ldr	r1, [sp, #0]
 8012cfe:	4605      	mov	r5, r0
 8012d00:	4630      	mov	r0, r6
 8012d02:	f000 f895 	bl	8012e30 <_malloc_r>
 8012d06:	b948      	cbnz	r0, 8012d1c <__smakebuf_r+0x44>
 8012d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d0c:	059a      	lsls	r2, r3, #22
 8012d0e:	d4ef      	bmi.n	8012cf0 <__smakebuf_r+0x18>
 8012d10:	f023 0303 	bic.w	r3, r3, #3
 8012d14:	f043 0302 	orr.w	r3, r3, #2
 8012d18:	81a3      	strh	r3, [r4, #12]
 8012d1a:	e7e3      	b.n	8012ce4 <__smakebuf_r+0xc>
 8012d1c:	4b0d      	ldr	r3, [pc, #52]	; (8012d54 <__smakebuf_r+0x7c>)
 8012d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	6020      	str	r0, [r4, #0]
 8012d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d28:	81a3      	strh	r3, [r4, #12]
 8012d2a:	9b00      	ldr	r3, [sp, #0]
 8012d2c:	6163      	str	r3, [r4, #20]
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	6120      	str	r0, [r4, #16]
 8012d32:	b15b      	cbz	r3, 8012d4c <__smakebuf_r+0x74>
 8012d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d38:	4630      	mov	r0, r6
 8012d3a:	f000 f975 	bl	8013028 <_isatty_r>
 8012d3e:	b128      	cbz	r0, 8012d4c <__smakebuf_r+0x74>
 8012d40:	89a3      	ldrh	r3, [r4, #12]
 8012d42:	f023 0303 	bic.w	r3, r3, #3
 8012d46:	f043 0301 	orr.w	r3, r3, #1
 8012d4a:	81a3      	strh	r3, [r4, #12]
 8012d4c:	89a0      	ldrh	r0, [r4, #12]
 8012d4e:	4305      	orrs	r5, r0
 8012d50:	81a5      	strh	r5, [r4, #12]
 8012d52:	e7cd      	b.n	8012cf0 <__smakebuf_r+0x18>
 8012d54:	08012ae5 	.word	0x08012ae5

08012d58 <_free_r>:
 8012d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d5a:	2900      	cmp	r1, #0
 8012d5c:	d044      	beq.n	8012de8 <_free_r+0x90>
 8012d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d62:	9001      	str	r0, [sp, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f1a1 0404 	sub.w	r4, r1, #4
 8012d6a:	bfb8      	it	lt
 8012d6c:	18e4      	addlt	r4, r4, r3
 8012d6e:	f000 f97d 	bl	801306c <__malloc_lock>
 8012d72:	4a1e      	ldr	r2, [pc, #120]	; (8012dec <_free_r+0x94>)
 8012d74:	9801      	ldr	r0, [sp, #4]
 8012d76:	6813      	ldr	r3, [r2, #0]
 8012d78:	b933      	cbnz	r3, 8012d88 <_free_r+0x30>
 8012d7a:	6063      	str	r3, [r4, #4]
 8012d7c:	6014      	str	r4, [r2, #0]
 8012d7e:	b003      	add	sp, #12
 8012d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d84:	f000 b978 	b.w	8013078 <__malloc_unlock>
 8012d88:	42a3      	cmp	r3, r4
 8012d8a:	d908      	bls.n	8012d9e <_free_r+0x46>
 8012d8c:	6825      	ldr	r5, [r4, #0]
 8012d8e:	1961      	adds	r1, r4, r5
 8012d90:	428b      	cmp	r3, r1
 8012d92:	bf01      	itttt	eq
 8012d94:	6819      	ldreq	r1, [r3, #0]
 8012d96:	685b      	ldreq	r3, [r3, #4]
 8012d98:	1949      	addeq	r1, r1, r5
 8012d9a:	6021      	streq	r1, [r4, #0]
 8012d9c:	e7ed      	b.n	8012d7a <_free_r+0x22>
 8012d9e:	461a      	mov	r2, r3
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	b10b      	cbz	r3, 8012da8 <_free_r+0x50>
 8012da4:	42a3      	cmp	r3, r4
 8012da6:	d9fa      	bls.n	8012d9e <_free_r+0x46>
 8012da8:	6811      	ldr	r1, [r2, #0]
 8012daa:	1855      	adds	r5, r2, r1
 8012dac:	42a5      	cmp	r5, r4
 8012dae:	d10b      	bne.n	8012dc8 <_free_r+0x70>
 8012db0:	6824      	ldr	r4, [r4, #0]
 8012db2:	4421      	add	r1, r4
 8012db4:	1854      	adds	r4, r2, r1
 8012db6:	42a3      	cmp	r3, r4
 8012db8:	6011      	str	r1, [r2, #0]
 8012dba:	d1e0      	bne.n	8012d7e <_free_r+0x26>
 8012dbc:	681c      	ldr	r4, [r3, #0]
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	6053      	str	r3, [r2, #4]
 8012dc2:	4421      	add	r1, r4
 8012dc4:	6011      	str	r1, [r2, #0]
 8012dc6:	e7da      	b.n	8012d7e <_free_r+0x26>
 8012dc8:	d902      	bls.n	8012dd0 <_free_r+0x78>
 8012dca:	230c      	movs	r3, #12
 8012dcc:	6003      	str	r3, [r0, #0]
 8012dce:	e7d6      	b.n	8012d7e <_free_r+0x26>
 8012dd0:	6825      	ldr	r5, [r4, #0]
 8012dd2:	1961      	adds	r1, r4, r5
 8012dd4:	428b      	cmp	r3, r1
 8012dd6:	bf04      	itt	eq
 8012dd8:	6819      	ldreq	r1, [r3, #0]
 8012dda:	685b      	ldreq	r3, [r3, #4]
 8012ddc:	6063      	str	r3, [r4, #4]
 8012dde:	bf04      	itt	eq
 8012de0:	1949      	addeq	r1, r1, r5
 8012de2:	6021      	streq	r1, [r4, #0]
 8012de4:	6054      	str	r4, [r2, #4]
 8012de6:	e7ca      	b.n	8012d7e <_free_r+0x26>
 8012de8:	b003      	add	sp, #12
 8012dea:	bd30      	pop	{r4, r5, pc}
 8012dec:	24004f90 	.word	0x24004f90

08012df0 <sbrk_aligned>:
 8012df0:	b570      	push	{r4, r5, r6, lr}
 8012df2:	4e0e      	ldr	r6, [pc, #56]	; (8012e2c <sbrk_aligned+0x3c>)
 8012df4:	460c      	mov	r4, r1
 8012df6:	6831      	ldr	r1, [r6, #0]
 8012df8:	4605      	mov	r5, r0
 8012dfa:	b911      	cbnz	r1, 8012e02 <sbrk_aligned+0x12>
 8012dfc:	f000 f88c 	bl	8012f18 <_sbrk_r>
 8012e00:	6030      	str	r0, [r6, #0]
 8012e02:	4621      	mov	r1, r4
 8012e04:	4628      	mov	r0, r5
 8012e06:	f000 f887 	bl	8012f18 <_sbrk_r>
 8012e0a:	1c43      	adds	r3, r0, #1
 8012e0c:	d00a      	beq.n	8012e24 <sbrk_aligned+0x34>
 8012e0e:	1cc4      	adds	r4, r0, #3
 8012e10:	f024 0403 	bic.w	r4, r4, #3
 8012e14:	42a0      	cmp	r0, r4
 8012e16:	d007      	beq.n	8012e28 <sbrk_aligned+0x38>
 8012e18:	1a21      	subs	r1, r4, r0
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	f000 f87c 	bl	8012f18 <_sbrk_r>
 8012e20:	3001      	adds	r0, #1
 8012e22:	d101      	bne.n	8012e28 <sbrk_aligned+0x38>
 8012e24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012e28:	4620      	mov	r0, r4
 8012e2a:	bd70      	pop	{r4, r5, r6, pc}
 8012e2c:	24004f94 	.word	0x24004f94

08012e30 <_malloc_r>:
 8012e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e34:	1ccd      	adds	r5, r1, #3
 8012e36:	f025 0503 	bic.w	r5, r5, #3
 8012e3a:	3508      	adds	r5, #8
 8012e3c:	2d0c      	cmp	r5, #12
 8012e3e:	bf38      	it	cc
 8012e40:	250c      	movcc	r5, #12
 8012e42:	2d00      	cmp	r5, #0
 8012e44:	4607      	mov	r7, r0
 8012e46:	db01      	blt.n	8012e4c <_malloc_r+0x1c>
 8012e48:	42a9      	cmp	r1, r5
 8012e4a:	d905      	bls.n	8012e58 <_malloc_r+0x28>
 8012e4c:	230c      	movs	r3, #12
 8012e4e:	603b      	str	r3, [r7, #0]
 8012e50:	2600      	movs	r6, #0
 8012e52:	4630      	mov	r0, r6
 8012e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e58:	4e2e      	ldr	r6, [pc, #184]	; (8012f14 <_malloc_r+0xe4>)
 8012e5a:	f000 f907 	bl	801306c <__malloc_lock>
 8012e5e:	6833      	ldr	r3, [r6, #0]
 8012e60:	461c      	mov	r4, r3
 8012e62:	bb34      	cbnz	r4, 8012eb2 <_malloc_r+0x82>
 8012e64:	4629      	mov	r1, r5
 8012e66:	4638      	mov	r0, r7
 8012e68:	f7ff ffc2 	bl	8012df0 <sbrk_aligned>
 8012e6c:	1c43      	adds	r3, r0, #1
 8012e6e:	4604      	mov	r4, r0
 8012e70:	d14d      	bne.n	8012f0e <_malloc_r+0xde>
 8012e72:	6834      	ldr	r4, [r6, #0]
 8012e74:	4626      	mov	r6, r4
 8012e76:	2e00      	cmp	r6, #0
 8012e78:	d140      	bne.n	8012efc <_malloc_r+0xcc>
 8012e7a:	6823      	ldr	r3, [r4, #0]
 8012e7c:	4631      	mov	r1, r6
 8012e7e:	4638      	mov	r0, r7
 8012e80:	eb04 0803 	add.w	r8, r4, r3
 8012e84:	f000 f848 	bl	8012f18 <_sbrk_r>
 8012e88:	4580      	cmp	r8, r0
 8012e8a:	d13a      	bne.n	8012f02 <_malloc_r+0xd2>
 8012e8c:	6821      	ldr	r1, [r4, #0]
 8012e8e:	3503      	adds	r5, #3
 8012e90:	1a6d      	subs	r5, r5, r1
 8012e92:	f025 0503 	bic.w	r5, r5, #3
 8012e96:	3508      	adds	r5, #8
 8012e98:	2d0c      	cmp	r5, #12
 8012e9a:	bf38      	it	cc
 8012e9c:	250c      	movcc	r5, #12
 8012e9e:	4629      	mov	r1, r5
 8012ea0:	4638      	mov	r0, r7
 8012ea2:	f7ff ffa5 	bl	8012df0 <sbrk_aligned>
 8012ea6:	3001      	adds	r0, #1
 8012ea8:	d02b      	beq.n	8012f02 <_malloc_r+0xd2>
 8012eaa:	6823      	ldr	r3, [r4, #0]
 8012eac:	442b      	add	r3, r5
 8012eae:	6023      	str	r3, [r4, #0]
 8012eb0:	e00e      	b.n	8012ed0 <_malloc_r+0xa0>
 8012eb2:	6822      	ldr	r2, [r4, #0]
 8012eb4:	1b52      	subs	r2, r2, r5
 8012eb6:	d41e      	bmi.n	8012ef6 <_malloc_r+0xc6>
 8012eb8:	2a0b      	cmp	r2, #11
 8012eba:	d916      	bls.n	8012eea <_malloc_r+0xba>
 8012ebc:	1961      	adds	r1, r4, r5
 8012ebe:	42a3      	cmp	r3, r4
 8012ec0:	6025      	str	r5, [r4, #0]
 8012ec2:	bf18      	it	ne
 8012ec4:	6059      	strne	r1, [r3, #4]
 8012ec6:	6863      	ldr	r3, [r4, #4]
 8012ec8:	bf08      	it	eq
 8012eca:	6031      	streq	r1, [r6, #0]
 8012ecc:	5162      	str	r2, [r4, r5]
 8012ece:	604b      	str	r3, [r1, #4]
 8012ed0:	4638      	mov	r0, r7
 8012ed2:	f104 060b 	add.w	r6, r4, #11
 8012ed6:	f000 f8cf 	bl	8013078 <__malloc_unlock>
 8012eda:	f026 0607 	bic.w	r6, r6, #7
 8012ede:	1d23      	adds	r3, r4, #4
 8012ee0:	1af2      	subs	r2, r6, r3
 8012ee2:	d0b6      	beq.n	8012e52 <_malloc_r+0x22>
 8012ee4:	1b9b      	subs	r3, r3, r6
 8012ee6:	50a3      	str	r3, [r4, r2]
 8012ee8:	e7b3      	b.n	8012e52 <_malloc_r+0x22>
 8012eea:	6862      	ldr	r2, [r4, #4]
 8012eec:	42a3      	cmp	r3, r4
 8012eee:	bf0c      	ite	eq
 8012ef0:	6032      	streq	r2, [r6, #0]
 8012ef2:	605a      	strne	r2, [r3, #4]
 8012ef4:	e7ec      	b.n	8012ed0 <_malloc_r+0xa0>
 8012ef6:	4623      	mov	r3, r4
 8012ef8:	6864      	ldr	r4, [r4, #4]
 8012efa:	e7b2      	b.n	8012e62 <_malloc_r+0x32>
 8012efc:	4634      	mov	r4, r6
 8012efe:	6876      	ldr	r6, [r6, #4]
 8012f00:	e7b9      	b.n	8012e76 <_malloc_r+0x46>
 8012f02:	230c      	movs	r3, #12
 8012f04:	603b      	str	r3, [r7, #0]
 8012f06:	4638      	mov	r0, r7
 8012f08:	f000 f8b6 	bl	8013078 <__malloc_unlock>
 8012f0c:	e7a1      	b.n	8012e52 <_malloc_r+0x22>
 8012f0e:	6025      	str	r5, [r4, #0]
 8012f10:	e7de      	b.n	8012ed0 <_malloc_r+0xa0>
 8012f12:	bf00      	nop
 8012f14:	24004f90 	.word	0x24004f90

08012f18 <_sbrk_r>:
 8012f18:	b538      	push	{r3, r4, r5, lr}
 8012f1a:	4d06      	ldr	r5, [pc, #24]	; (8012f34 <_sbrk_r+0x1c>)
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	4604      	mov	r4, r0
 8012f20:	4608      	mov	r0, r1
 8012f22:	602b      	str	r3, [r5, #0]
 8012f24:	f7ef fa6e 	bl	8002404 <_sbrk>
 8012f28:	1c43      	adds	r3, r0, #1
 8012f2a:	d102      	bne.n	8012f32 <_sbrk_r+0x1a>
 8012f2c:	682b      	ldr	r3, [r5, #0]
 8012f2e:	b103      	cbz	r3, 8012f32 <_sbrk_r+0x1a>
 8012f30:	6023      	str	r3, [r4, #0]
 8012f32:	bd38      	pop	{r3, r4, r5, pc}
 8012f34:	24004f98 	.word	0x24004f98

08012f38 <__sread>:
 8012f38:	b510      	push	{r4, lr}
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f40:	f000 f8a0 	bl	8013084 <_read_r>
 8012f44:	2800      	cmp	r0, #0
 8012f46:	bfab      	itete	ge
 8012f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8012f4c:	181b      	addge	r3, r3, r0
 8012f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f52:	bfac      	ite	ge
 8012f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f56:	81a3      	strhlt	r3, [r4, #12]
 8012f58:	bd10      	pop	{r4, pc}

08012f5a <__swrite>:
 8012f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5e:	461f      	mov	r7, r3
 8012f60:	898b      	ldrh	r3, [r1, #12]
 8012f62:	05db      	lsls	r3, r3, #23
 8012f64:	4605      	mov	r5, r0
 8012f66:	460c      	mov	r4, r1
 8012f68:	4616      	mov	r6, r2
 8012f6a:	d505      	bpl.n	8012f78 <__swrite+0x1e>
 8012f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f70:	2302      	movs	r3, #2
 8012f72:	2200      	movs	r2, #0
 8012f74:	f000 f868 	bl	8013048 <_lseek_r>
 8012f78:	89a3      	ldrh	r3, [r4, #12]
 8012f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f82:	81a3      	strh	r3, [r4, #12]
 8012f84:	4632      	mov	r2, r6
 8012f86:	463b      	mov	r3, r7
 8012f88:	4628      	mov	r0, r5
 8012f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f8e:	f000 b817 	b.w	8012fc0 <_write_r>

08012f92 <__sseek>:
 8012f92:	b510      	push	{r4, lr}
 8012f94:	460c      	mov	r4, r1
 8012f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f9a:	f000 f855 	bl	8013048 <_lseek_r>
 8012f9e:	1c43      	adds	r3, r0, #1
 8012fa0:	89a3      	ldrh	r3, [r4, #12]
 8012fa2:	bf15      	itete	ne
 8012fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fae:	81a3      	strheq	r3, [r4, #12]
 8012fb0:	bf18      	it	ne
 8012fb2:	81a3      	strhne	r3, [r4, #12]
 8012fb4:	bd10      	pop	{r4, pc}

08012fb6 <__sclose>:
 8012fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fba:	f000 b813 	b.w	8012fe4 <_close_r>
	...

08012fc0 <_write_r>:
 8012fc0:	b538      	push	{r3, r4, r5, lr}
 8012fc2:	4d07      	ldr	r5, [pc, #28]	; (8012fe0 <_write_r+0x20>)
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	4608      	mov	r0, r1
 8012fc8:	4611      	mov	r1, r2
 8012fca:	2200      	movs	r2, #0
 8012fcc:	602a      	str	r2, [r5, #0]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	f7ef f9c7 	bl	8002362 <_write>
 8012fd4:	1c43      	adds	r3, r0, #1
 8012fd6:	d102      	bne.n	8012fde <_write_r+0x1e>
 8012fd8:	682b      	ldr	r3, [r5, #0]
 8012fda:	b103      	cbz	r3, 8012fde <_write_r+0x1e>
 8012fdc:	6023      	str	r3, [r4, #0]
 8012fde:	bd38      	pop	{r3, r4, r5, pc}
 8012fe0:	24004f98 	.word	0x24004f98

08012fe4 <_close_r>:
 8012fe4:	b538      	push	{r3, r4, r5, lr}
 8012fe6:	4d06      	ldr	r5, [pc, #24]	; (8013000 <_close_r+0x1c>)
 8012fe8:	2300      	movs	r3, #0
 8012fea:	4604      	mov	r4, r0
 8012fec:	4608      	mov	r0, r1
 8012fee:	602b      	str	r3, [r5, #0]
 8012ff0:	f7ef f9d3 	bl	800239a <_close>
 8012ff4:	1c43      	adds	r3, r0, #1
 8012ff6:	d102      	bne.n	8012ffe <_close_r+0x1a>
 8012ff8:	682b      	ldr	r3, [r5, #0]
 8012ffa:	b103      	cbz	r3, 8012ffe <_close_r+0x1a>
 8012ffc:	6023      	str	r3, [r4, #0]
 8012ffe:	bd38      	pop	{r3, r4, r5, pc}
 8013000:	24004f98 	.word	0x24004f98

08013004 <_fstat_r>:
 8013004:	b538      	push	{r3, r4, r5, lr}
 8013006:	4d07      	ldr	r5, [pc, #28]	; (8013024 <_fstat_r+0x20>)
 8013008:	2300      	movs	r3, #0
 801300a:	4604      	mov	r4, r0
 801300c:	4608      	mov	r0, r1
 801300e:	4611      	mov	r1, r2
 8013010:	602b      	str	r3, [r5, #0]
 8013012:	f7ef f9ce 	bl	80023b2 <_fstat>
 8013016:	1c43      	adds	r3, r0, #1
 8013018:	d102      	bne.n	8013020 <_fstat_r+0x1c>
 801301a:	682b      	ldr	r3, [r5, #0]
 801301c:	b103      	cbz	r3, 8013020 <_fstat_r+0x1c>
 801301e:	6023      	str	r3, [r4, #0]
 8013020:	bd38      	pop	{r3, r4, r5, pc}
 8013022:	bf00      	nop
 8013024:	24004f98 	.word	0x24004f98

08013028 <_isatty_r>:
 8013028:	b538      	push	{r3, r4, r5, lr}
 801302a:	4d06      	ldr	r5, [pc, #24]	; (8013044 <_isatty_r+0x1c>)
 801302c:	2300      	movs	r3, #0
 801302e:	4604      	mov	r4, r0
 8013030:	4608      	mov	r0, r1
 8013032:	602b      	str	r3, [r5, #0]
 8013034:	f7ef f9cd 	bl	80023d2 <_isatty>
 8013038:	1c43      	adds	r3, r0, #1
 801303a:	d102      	bne.n	8013042 <_isatty_r+0x1a>
 801303c:	682b      	ldr	r3, [r5, #0]
 801303e:	b103      	cbz	r3, 8013042 <_isatty_r+0x1a>
 8013040:	6023      	str	r3, [r4, #0]
 8013042:	bd38      	pop	{r3, r4, r5, pc}
 8013044:	24004f98 	.word	0x24004f98

08013048 <_lseek_r>:
 8013048:	b538      	push	{r3, r4, r5, lr}
 801304a:	4d07      	ldr	r5, [pc, #28]	; (8013068 <_lseek_r+0x20>)
 801304c:	4604      	mov	r4, r0
 801304e:	4608      	mov	r0, r1
 8013050:	4611      	mov	r1, r2
 8013052:	2200      	movs	r2, #0
 8013054:	602a      	str	r2, [r5, #0]
 8013056:	461a      	mov	r2, r3
 8013058:	f7ef f9c6 	bl	80023e8 <_lseek>
 801305c:	1c43      	adds	r3, r0, #1
 801305e:	d102      	bne.n	8013066 <_lseek_r+0x1e>
 8013060:	682b      	ldr	r3, [r5, #0]
 8013062:	b103      	cbz	r3, 8013066 <_lseek_r+0x1e>
 8013064:	6023      	str	r3, [r4, #0]
 8013066:	bd38      	pop	{r3, r4, r5, pc}
 8013068:	24004f98 	.word	0x24004f98

0801306c <__malloc_lock>:
 801306c:	4801      	ldr	r0, [pc, #4]	; (8013074 <__malloc_lock+0x8>)
 801306e:	f7ff be0b 	b.w	8012c88 <__retarget_lock_acquire_recursive>
 8013072:	bf00      	nop
 8013074:	24004f8c 	.word	0x24004f8c

08013078 <__malloc_unlock>:
 8013078:	4801      	ldr	r0, [pc, #4]	; (8013080 <__malloc_unlock+0x8>)
 801307a:	f7ff be06 	b.w	8012c8a <__retarget_lock_release_recursive>
 801307e:	bf00      	nop
 8013080:	24004f8c 	.word	0x24004f8c

08013084 <_read_r>:
 8013084:	b538      	push	{r3, r4, r5, lr}
 8013086:	4d07      	ldr	r5, [pc, #28]	; (80130a4 <_read_r+0x20>)
 8013088:	4604      	mov	r4, r0
 801308a:	4608      	mov	r0, r1
 801308c:	4611      	mov	r1, r2
 801308e:	2200      	movs	r2, #0
 8013090:	602a      	str	r2, [r5, #0]
 8013092:	461a      	mov	r2, r3
 8013094:	f7ef f948 	bl	8002328 <_read>
 8013098:	1c43      	adds	r3, r0, #1
 801309a:	d102      	bne.n	80130a2 <_read_r+0x1e>
 801309c:	682b      	ldr	r3, [r5, #0]
 801309e:	b103      	cbz	r3, 80130a2 <_read_r+0x1e>
 80130a0:	6023      	str	r3, [r4, #0]
 80130a2:	bd38      	pop	{r3, r4, r5, pc}
 80130a4:	24004f98 	.word	0x24004f98

080130a8 <_init>:
 80130a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130aa:	bf00      	nop
 80130ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130ae:	bc08      	pop	{r3}
 80130b0:	469e      	mov	lr, r3
 80130b2:	4770      	bx	lr

080130b4 <_fini>:
 80130b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130b6:	bf00      	nop
 80130b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130ba:	bc08      	pop	{r3}
 80130bc:	469e      	mov	lr, r3
 80130be:	4770      	bx	lr
